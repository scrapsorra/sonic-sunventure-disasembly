00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000                            
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F16 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F1C                            
00000F1C                            	@nochg:
00000F1C 4A78 F614                  		tst.w	(v_demolength).w
00000F20 6700 0000                  		beq.w	@end
00000F24 5378 F614                  		subq.w	#1,(v_demolength).w
00000F28                            
00000F28                            	@end:
00000F28 4E75                       		rts	
00000F2A                            
00000F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2A                            
00000F2A                            
00000F2A                            sub_106E:
00000F2A 33FC 0100 00A1 1100        		stopZ80
00000F32 0839 0000 00A1 1100 66F6   		waitZ80
00000F3C 6100 0000                  		bsr.w	ReadJoypads
00000F40 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F44 6600                       		bne.s	@waterabove	; if yes, branch
00000F46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6A 6000                       		bra.s	@waterbelow
00000F6C                            
00000F6C                            	@waterabove:
00000F6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F90                            
00000F90                            	@waterbelow:
00000F90 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB4 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FD8 33FC 0000 00A1 1100        		startZ80
00000FE0 4E75                       		rts	
00000FE2                            ; End of function sub_106E
00000FE2                            
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            ; Horizontal interrupt
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            
00000FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE2                            
00000FE2                            
00000FE2                            HBlank:
00000FE2 46FC 2700                  		disable_ints
00000FE6 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEA 6700                       		beq.s	@nochg		; if not, branch
00000FEC 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FF6 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000FFC 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001000 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001008 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100A 2298                       		move.l	(a0)+,(a1)
0000100C 2298                       		move.l	(a0)+,(a1)
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000104E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001052 4A38 F64F                  		tst.b	($FFFFF64F).w
00001056 6600                       		bne.s	loc_119E
00001058                            
00001058                            	@nochg:
00001058 4E73                       		rte	
0000105A                            ; ===========================================================================
0000105A                            
0000105A                            loc_119E:
0000105A 4238 F64F                  		clr.b	($FFFFF64F).w
0000105E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001062 6100 FC98                  		bsr.w	Demo_Time
00001066 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000106C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001070 4E73                       		rte	
00001072                            ; End of function HBlank
00001072                            
00001072                            ; ---------------------------------------------------------------------------
00001072                            ; Subroutine to	initialise joypads
00001072                            ; ---------------------------------------------------------------------------
00001072                            
00001072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001072                            
00001072                            
00001072                            JoypadInit:
00001072 33FC 0100 00A1 1100        		stopZ80
0000107A 0839 0000 00A1 1100 66F6   		waitZ80
00001084 7040                       		moveq	#$40,d0
00001086 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000108C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001092 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001098 33FC 0000 00A1 1100        		startZ80
000010A0 4E75                       		rts	
000010A2                            ; End of function JoypadInit
000010A2                            
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; Subroutine to	read joypad input, and send it to the RAM
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A2                            
000010A2                            
000010A2                            ReadJoypads:
000010A2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010AC 6100                       		bsr.s	@read		; do the first joypad
000010AE 5449                       		addq.w	#2,a1		; do the second	joypad
000010B0                            
000010B0                            	@read:
000010B0 12BC 0000                  		move.b	#0,(a1)
000010B4 4E71                       		nop	
000010B6 4E71                       		nop	
000010B8 1011                       		move.b	(a1),d0
000010BA E508                       		lsl.b	#2,d0
000010BC 0200 00C0                  		andi.b	#$C0,d0
000010C0 12BC 0040                  		move.b	#$40,(a1)
000010C4 4E71                       		nop	
000010C6 4E71                       		nop	
000010C8 1211                       		move.b	(a1),d1
000010CA 0201 003F                  		andi.b	#$3F,d1
000010CE 8001                       		or.b	d1,d0
000010D0 4600                       		not.b	d0
000010D2 1210                       		move.b	(a0),d1
000010D4 B101                       		eor.b	d0,d1
000010D6 10C0                       		move.b	d0,(a0)+
000010D8 C200                       		and.b	d0,d1
000010DA 10C1                       		move.b	d1,(a0)+
000010DC 4E75                       		rts	
000010DE                            ; End of function ReadJoypads
000010DE                            
000010DE                            
000010DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010DE                            
000010DE                            
000010DE                            VDPSetupGame:
000010DE 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F0 7E12                       		moveq	#$12,d7
000010F2                            
000010F2                            	@setreg:
000010F2 309A                       		move.w	(a2)+,(a0)
000010F4 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010F8                            
000010F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000010FE 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001102 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001108 7000                       		moveq	#0,d0
0000110A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001114 3E3C 003F                  		move.w	#$3F,d7
00001118                            
00001118                            	@clrCRAM:
00001118 3280                       		move.w	d0,(a1)
0000111A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000111E                            
0000111E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001122 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001126 2F01                       		move.l	d1,-(sp)
00001128 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114A                            
0000114A                            	@waitforDMA:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001150 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001156 221F                       		move.l	(sp)+,d1
00001158 4E75                       		rts	
0000115A                            ; End of function VDPSetupGame
0000115A                            
0000115A                            ; ===========================================================================
0000115A 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000115C 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000115E 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001160 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001162 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001164 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001166 8600                       		dc.w $8600		; unused
00001168 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116A 8800                       		dc.w $8800		; unused
0000116C 8900                       		dc.w $8900		; unused
0000116E 8A00                       		dc.w $8A00		; default H.interrupt register
00001170 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001172 8C81                       		dc.w $8C81		; 40-cell display mode
00001174 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001176 8E00                       		dc.w $8E00		; unused
00001178 8F02                       		dc.w $8F02		; set VDP increment size
0000117A 9001                       		dc.w $9001		; 64-cell hscroll size
0000117C 9100                       		dc.w $9100		; window horizontal position
0000117E 9200                       		dc.w $9200		; window vertical position
00001180                            
00001180                            ; ---------------------------------------------------------------------------
00001180                            ; Subroutine to	clear the screen
00001180                            ; ---------------------------------------------------------------------------
00001180                            
00001180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001180                            
00001180                            
00001180                            ClearScreen:
00001180 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A2                            
000011A2                            	@wait1:
000011A2 3215                       		move.w	(a5),d1
000011A4 0801 0001                  		btst	#1,d1
000011A8 66F8                       		bne.s	@wait1
000011AA                            
000011AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011AE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D0                            
000011D0                            	@wait2:
000011D0 3215                       		move.w	(a5),d1
000011D2 0801 0001                  		btst	#1,d1
000011D6 66F8                       		bne.s	@wait2
000011D8                            
000011D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000011DC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E4                            
000011E4 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011E8 7000                       		moveq	#0,d0
000011EA 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011EE                            
000011EE                            	@clearsprites:
000011EE 22C0                       		move.l	d0,(a1)+
000011F0 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F4                            
000011F4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011F8 7000                       		moveq	#0,d0
000011FA 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000011FE                            
000011FE                            	@clearhscroll:
000011FE 22C0                       		move.l	d0,(a1)+
00001200 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001204 4E75                       		rts	
00001206                            ; End of function ClearScreen
00001206                            
00001206                            ; ---------------------------------------------------------------------------
00001206                            ; Subroutine to	load the sound driver
00001206                            ; ---------------------------------------------------------------------------
00001206                            
00001206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001206                            
00001206                            
00001206                            SoundDriverLoad:
00001206 4E71                       		nop	
00001208 33FC 0100 00A1 1100        		stopZ80
00001210 33FC 0100 00A1 1200        		resetZ80
00001218 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000121E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001224 6100 0000                  		bsr.w	KosDec		; decompress
00001228 33FC 0000 00A1 1200        		resetZ80a
00001230 4E71                       		nop	
00001232 4E71                       		nop	
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 33FC 0100 00A1 1200        		resetZ80
00001240 33FC 0000 00A1 1100        		startZ80
00001248 4E75                       		rts	
0000124A                            ; End of function SoundDriverLoad
0000124A                            
0000124A                            		include	"_incObj\sub PlaySound.asm"
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            ; Subroutine to	play a music track
0000124A                            
0000124A                            ; input:
0000124A                            ;	d0 = track to play
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            
0000124A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124A                            
0000124A                            
0000124A                            PlaySound:
0000124A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000124E 4E75                       		rts	
00001250                            ; End of function PlaySound
00001250                            
00001250                            ; ---------------------------------------------------------------------------
00001250                            ; Subroutine to	play a sound effect
00001250                            ; ---------------------------------------------------------------------------
00001250                            
00001250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001250                            
00001250                            
00001250                            PlaySound_Special:
00001250 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001254 4E75                       		rts	
00001256                            ; End of function PlaySound_Special
00001256                            
00001256                            ; ===========================================================================
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Unused sound/music subroutine
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            PlaySound_Unused:
00001256 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125A 4E75                       		rts	
0000125A 4E75                       		rts	
0000125C                            		include	"_inc\PauseGame.asm"
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	pause the game
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PauseGame:
0000125C 4E71                       		nop	
0000125E 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001262 6700                       		beq.s	Unpause		; if not, branch
00001264 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001268 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001270 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001272                            
00001272                            Pause_StopGame:
00001272 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001278 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000127E                            
0000127E                            Pause_Loop:
0000127E 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001284 6100 0000                  		bsr.w	WaitForVBla
00001288 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000128C 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000128E 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001294 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001296 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000129C 4E71                       		nop	
0000129E 6000                       		bra.s	Pause_EndMusic
000012A0                            ; ===========================================================================
000012A0                            
000012A0                            Pause_ChkBC:
000012A0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012A6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012A8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012AE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B0                            
000012B0                            Pause_ChkStart:
000012B0 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012B6 67C6                       		beq.s	Pause_Loop	; if not, branch
000012B8                            
000012B8                            Pause_EndMusic:
000012B8 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012BE                            
000012BE                            Unpause:
000012BE 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C4                            
000012C4                            Pause_DoNothing:
000012C4 4E75                       		rts	
000012C6                            ; ===========================================================================
000012C6                            
000012C6                            Pause_SlowMo:
000012C6 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012CC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D2 4E75                       		rts	
000012D4                            ; End of function PauseGame
000012D4                            ; End of function PauseGame
000012D4                            
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D4                            
000012D4                            ; input:
000012D4                            ;	a1 = tile map address
000012D4                            ;	d0 = VRAM address
000012D4                            ;	d1 = width (cells)
000012D4                            ;	d2 = height (cells)
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            
000012D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D4                            
000012D4                            
000012D4                            TilemapToVRAM:
000012D4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DA 283C 0080 0000             		move.l	#$800000,d4
000012E0                            
000012E0                            	Tilemap_Line:
000012E0 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E4 3601                       		move.w	d1,d3
000012E6                            
000012E6                            	Tilemap_Cell:
000012E6 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012E8 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012EC D084                       		add.l	d4,d0		; goto next line
000012EE 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F2 4E75                       		rts	
000012F4                            ; End of function TilemapToVRAM
000012F4                            
000012F4                            		include	"_inc\Nemesis Decompression.asm"
000012F4                            ; ==============================================================================
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Nemesis decompression routine
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Optimized by vladikcomper
000012F4                            ; ------------------------------------------------------------------------------
000012F4                             
000012F4                            NemDec_RAM:
000012F4 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012F8 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012FC 6000                           bra.s   NemDec_Main
000012FE                             
000012FE                            ; ------------------------------------------------------------------------------
000012FE                            NemDec:
000012FE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001302 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001308 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000130C                             
0000130C                            NemDec_Main:
0000130C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001310 3418                           move.w  (a0)+,d2        ; get number of patterns
00001312 6A00                           bpl.s   @0          ; are we in Mode 0?
00001314 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001318 E74A                       @0  lsl.w   #3,d2
0000131A 3A42                           movea.w d2,a5
0000131C 7607                           moveq   #7,d3
0000131E 7400                           moveq   #0,d2
00001320 7800                           moveq   #0,d4
00001322 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001326 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001328 E145                           asl.w   #8,d5           ; shift up by a byte
0000132A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000132C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001330 6100                           bsr.s   NemDec2
00001332 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001336 4E75                           rts
00001338                             
00001338                            ; ---------------------------------------------------------------------------
00001338                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001338                            ; ---------------------------------------------------------------------------
00001338                             
00001338                            NemDec2:
00001338 3E06                           move.w  d6,d7
0000133A 5147                           subq.w  #8,d7           ; get shift value
0000133C 3205                           move.w  d5,d1
0000133E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001340 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001344 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001346 0241 00FF                      andi.w  #$FF,d1
0000134A D241                           add.w   d1,d1
0000134C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001350 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001354 6400                           bcc.s   @0          ; if not, branch
00001356 5046                           addq.w  #8,d6
00001358 E145                           asl.w   #8,d5
0000135A 1A18                           move.b  (a0)+,d5        ; read next byte
0000135C 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001360 3001                           move.w  d1,d0
00001362 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001366 0240 00F0                      andi.w  #$F0,d0
0000136A                             
0000136A                            NemDec_GetRepeatCount:
0000136A E848                           lsr.w   #4,d0           ; get repeat count
0000136C                             
0000136C                            NemDec_WritePixel:
0000136C E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000136E 8801                           or.b    d1,d4           ; write pixel
00001370 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001374 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001376                            ; ---------------------------------------------------------------------------
00001376                             
00001376                            NemPCD_NewRow:
00001376 7800                           moveq   #0,d4           ; reset row
00001378 7607                           moveq   #7,d3           ; reset nybble counter
0000137A                             
0000137A                            NemDec_WritePixelLoop:
0000137A 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000137E 60B8                           bra.s   NemDec2
00001380                            ; ---------------------------------------------------------------------------
00001380                             
00001380                            NemDec_InlineData:
00001380 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001382 0C46 0009                      cmpi.w  #9,d6
00001386 6400                           bcc.s   @0
00001388 5046                           addq.w  #8,d6
0000138A E145                           asl.w   #8,d5
0000138C 1A18                           move.b  (a0)+,d5
0000138E 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001390 3205                           move.w  d5,d1
00001392 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001394 3001                           move.w  d1,d0
00001396 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139A 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000139E 0C46 0009                      cmpi.w  #9,d6
000013A2 64C6                           bcc.s   NemDec_GetRepeatCount
000013A4 5046                           addq.w  #8,d6
000013A6 E145                           asl.w   #8,d5
000013A8 1A18                           move.b  (a0)+,d5
000013AA 60BE                           bra.s   NemDec_GetRepeatCount
000013AC                             
000013AC                            ; ---------------------------------------------------------------------------
000013AC                            ; Subroutines to output decompressed entry
000013AC                            ; Selected depending on current decompression mode
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemPCD_WriteRowToVDP:
000013AC                            loc_1502:
000013AC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemPCD_WriteRowToVDP_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 2882                           move.l  d2,(a4)         ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66B6                           bne.s   NemPCD_NewRow
000013C0 4E75                           rts
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec_WriteRowToRAM:
000013C2 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C4 534D                           subq.w  #1,a5
000013C6 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C8 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            NemDec_WriteRowToRAM_XOR:
000013CC B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CE 28C2                           move.l  d2,(a4)+        ; and write the result
000013D0 534D                           subq.w  #1,a5
000013D2 380D                           move.w  a5,d4
000013D4 66A0                           bne.s   NemPCD_NewRow
000013D6 4E75                           rts
000013D8                             
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013D8                            ; ---------------------------------------------------------------------------
000013D8                             
000013D8                            NemDec_BuildCodeTable:
000013D8 1018                           move.b  (a0)+,d0        ; read first byte
000013DA                             
000013DA                            @ChkEnd:
000013DA 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013DE 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E0 4E75                           rts
000013E2                            ; ---------------------------------------------------------------------------
000013E2                             
000013E2                            @NewPalIndex:
000013E2 3E00                           move.w  d0,d7
000013E4                             
000013E4                            @ItemLoop:
000013E4 1018                           move.b  (a0)+,d0        ; read next byte
000013E6 6BF2                           bmi.s   @ChkEnd         ; ~~
000013E8 1200                           move.b  d0,d1
000013EA 0247 000F                      andi.w  #$F,d7          ; get palette index
000013EE 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F2 8E41                           or.w    d1,d7           ; combine the two
000013F4 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013F8 1200                           move.b  d0,d1
000013FA E149                           lsl.w   #8,d1
000013FC 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013FE 7208                           moveq   #8,d1
00001400 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001402 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001404 1018                           move.b  (a0)+,d0        ; get code
00001406 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001408 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000140C 60D6                           bra.s   @ItemLoop       ; repeat
0000140E                            ; ---------------------------------------------------------------------------
0000140E                             
0000140E                            @ItemShortCode:
0000140E 1018                           move.b  (a0)+,d0        ; get code
00001410 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001412 D040                           add.w   d0,d0           ; get index into code table
00001414 7A01                           moveq   #1,d5
00001416 E36D                           lsl.w   d1,d5
00001418 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000141E                             
0000141E                            @ItemShortCodeLoop:
0000141E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001420 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001424 60BE                           bra.s   @ItemLoop
00001424 60BE                           bra.s   @ItemLoop
00001426                            
00001426                              
00001426                                pusho	; buffer local label symbol config
00001426                                opt ws+  ; change local label symbol to '.'
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO ResetDMAQueue
00001426                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001426                            ; Performs all queued DMA transfers and clears the DMA queue.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a1,a5	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE InitDMAQueue
00001426                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001426                            ; Must be called before the queue is used, and the queue expects that only it
00001426                            ; write to this region of RAM.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a0,d0,d1	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001426                            ; Queues a DMA with parameters given in registers.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	AssumeSourceAddressInBytes (default 1)
00001426                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001426                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001426                            ; 	Use128kbSafeDMA (default 0)
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001426                            ; 		set to 0)
00001426                            ; 	d2	Destination address
00001426                            ; 	d3	Transfer length (in words)
00001426                            ; Output:
00001426                            ; 	d0,d1,d2,d3,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001426                            ; * 184(29/9) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; With Use128kbSafeDMA = 1, runs in:
00001426                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001426                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001426                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001426                            ;   fills the queue (second piece is discarded)
00001426                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001426                            ;   space for both pieces (both pieces queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001426                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001426                            ; edited to make sure the adresss given is correct.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001426                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001426                            ; discarded. However, all callers must be edited to make sure the adresss given
00001426                            ; in the correct form. You can use the dmaSource function for that.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO QueueStaticDMA
00001426                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001426                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001426                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001426                            ; Output:
00001426                            ; 	d0,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001426                            ; * 122(21/8) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressInBytes
00001426                            ;
00001426                            ; This option makes the function work as a drop-in replacement of the original
00001426                            ; functions. If you modify all callers to supply a position in words instead of
00001426                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001426 =00000001                  AssumeSourceAddressInBytes = 1
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressIsRAMSafe
00001426                            ;
00001426                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001426                            ; source address is given to the function in a way that makes them safe to use
00001426                            ; with RAM sources. You need to edit all callers to ensure this.
00001426                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001426 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001426                            ; ===========================================================================
00001426                            ; option: UseRAMSourceSafeDMA
00001426                            ;
00001426                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001426                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001426                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001426 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001426                            ; ===========================================================================
00001426                            ; option: Use128kbSafeDMA
00001426                            ;
00001426                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001426                            ; disabled by default because you can simply align the art in ROM and avoid the
00001426                            ; issue altogether. It is here so that you have a high-performance routine to do
00001426                            ; the job in situations where you can't align it in ROM.
00001426 =00000001                  Use128kbSafeDMA = 1
00001426                            ; ===========================================================================
00001426                            ; option UseVIntSafeDMA
00001426                            ;
00001426                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001426                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001426                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001426                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001426                            ; restore interrupts after.
00001426 =00000000                  UseVIntSafeDMA = 0
00001426                            ; ===========================================================================
00001426                            
00001426                            
00001426                            ; Convenience macros, for increased maintainability of the code.
00001426 =00000027                  DMA = %100111
00001426 =00000021                  VRAM = %100001
00001426                            ; Like vdpComm, but starting from an address contained in a register
00001426 =00000001                  vdpCommReg_defined = 1
00001426                            vdpCommReg macro reg,type,rwd,clr
00001426                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001426                            	if ((\type&\rwd)&3)<>0
00001426                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001426                            	endif
00001426                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001426                            	swap	\reg								; Put all bits in proper places
00001426                            	if \clr <> 0
00001426                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001426                            	endif
00001426                            	if ((\type&\rwd)&$FC)=$20
00001426                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001426                            	elseif ((\type&\rwd)&$FC)<>0
00001426                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001426                            	endif
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  intMacros_defined = 1
00001426                            enableInts macro
00001426                            	move	#$2300,sr
00001426                            	endm
00001426                            
00001426                            disableInts macro
00001426                            	move	#$2700,sr
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  DMAEntry_defined = 1
00001426                                    rsreset
00001426 =00000000                  DMAEntry.Reg94:		rs.b	1
00001426                            			  
00001426 =00000001                  DMAEntry.Size:      rs.b    0
00001426 =00000001                  DMAEntry.SizeH:		rs.b	1
00001426 =00000002                  DMAEntry.Reg93:		rs.b	1
00001426 =00000003                  DMAEntry.Source:    rs.b    0
00001426 =00000003                  DMAEntry.SizeL:		rs.b	1
00001426 =00000004                  DMAEntry.Reg97:		rs.b	1
00001426 =00000005                  DMAEntry.SrcH:		rs.b	1
00001426 =00000006                  DMAEntry.Reg96:		rs.b	1
00001426 =00000007                  DMAEntry.SrcM:		rs.b	1
00001426 =00000008                  DMAEntry.Reg95:		rs.b	1
00001426 =00000009                  DMAEntry.SrcL:		rs.b	1
00001426 =0000000A                  DMAEntry.Command:	rs.l	1
00001426 =0000000E                  DMAEntry.len:   rs.w    0
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001426                            ; ---------------------------------------------------------------------------
00001426                            						
00001426                            										   
00001426                            									   
00001426                            	  
00001426                            																			 
00001426                            							  
00001426 =00000001                  QueueStaticDMA_defined = 1
00001426                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001426                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001426                            ; crosses a 128kB boundary, or has size 0.
00001426                            QueueStaticDMA macro src,length,dest
00001426                                local   len
00001426                            		if ((\src)&1)<>0
00001426                            			inform 3,"DMA queued from odd source \1!"
00001426                            		endif
00001426                            		if ((\length)&1)<>0
00001426                            			inform 3,"DMA an odd number of bytes \2!"
00001426                            		endif
00001426                            		if (\length)=0
00001426                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001426                            		endif
00001426                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001426                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001426                            		endif
00001426                            	  
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	sr,-(sp)										; Save current interrupt mask
00001426                            		disableInts												; Mask off interrupts
00001426                            	endif ; UseVIntSafeDMA=1
00001426                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001426                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001426                            	beq.s	.done												; Return if there's no more room in the buffer
00001426                            	len: = ((length>>1)&$7FFF)
00001426                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001426                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001426                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001426                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001426                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001426                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001426                            .done:
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001426                            	endif ;UseVIntSafeDMA=1
00001426                            	endm
00001426                            
00001426                                
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ResetDMAQueue: macro
00001426                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001426                            	endm
00001426                            ; ===========================================================================
00001426                            
00001426                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001426                            
00001426                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001426                            Add_To_DMA_Queue:
00001426                            QueueDMATransfer:
00001426 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001430                            
00001430 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001432 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001436 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143A 7000                       	moveq	#0,d0											; We need a zero on d0
0000143C                            
0000143C                            		; Detect if transfer crosses 128KB boundary
0000143C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000143C                            		; (1) d3.w = 0 => 128kB transfer
0000143C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000143C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000143C                            		; (2) d3.w != 0
0000143C                            		;   (a) if there is carry on d1.w + d3.w
0000143C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000143C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000143C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000143C                            		; The reason this works is that carry on d1.w + d3.w means that
0000143C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000143C                            		; d1.w + d3.w > $10000.
0000143C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000143E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001440 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001442                            	; It does not cross a 128kB boundary. So just finish writing it.
00001442 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001446                            
00001446                            .finishxfer:
00001446                            	; Command to specify destination address and begin DMA
00001446 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001452 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001456 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001458 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000145C                            
0000145C                            .done:
0000145C 4E75                       	rts
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            .doubletransfer:
0000145E                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000145E D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001460 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001464                            
00001464 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001468 67DC                       		beq.s	.finishxfer									; Branch if not
0000146A                            
0000146A                            		; Get second transfer's source, destination, and length
0000146A 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000146C D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000146E D040                       		add.w	d0,d0										; Convert to number of bytes
00001470 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001472                            
00001472                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001472                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001480 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001484                            
00001484                            		; Do second transfer
00001484 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001488 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000148C                            
0000148C                            		; Command to specify destination address and begin DMA
00001496 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149A 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000149C                            
0000149C 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A0 4E75                       		rts
000014A2                            ; End of function QueueDMATransfer
000014A2                            ; ===========================================================================
000014A2                            
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            ; Subroutine for issuing all VDP commands that were queued
000014A2                            ; (by earlier calls to QueueDMATransfer)
000014A2                            ; Resets the queue when it's done
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            
000014A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A2                            
000014A2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A2                            Process_DMA_Queue:
000014A2                            ProcessDMAQueue:
000014A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014A6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AA                            ; ---------------------------------------------------------------------------
000014AA                            .jump_table:
000014AA 4E75                       	rts
000014AC                            	rept 6
000014AC                            		trap	#0											; Just in case
000014AC 4E40 4E40 4E40 4E40 4E40+  	endr
000014B8                            ; ---------------------------------------------------------------------------
000014B8 =00000001                      c: = 1
000014B8                            	rept QueueSlotCount
000014B8                            		lea	(vdp_control_port).l,a5
000014B8                            		lea	(VDP_Command_Buffer).w,a1
000014B8                            		if c<>QueueSlotCount
000014B8                            			bra.w	.jump0 - c*8
000014B8                            		endif
000014B8                                c: = c + 1
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            	rept QueueSlotCount
000015B0                            		move.l	(a1)+,(a5)									; Transfer length
000015B0                            		move.l	(a1)+,(a5)									; Source address high
000015B0                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B0                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B0 2A99 2A99 2A99 3A99 2A99+  	endr
00001640                            
00001640                            .jump0:
00001640 31FC C800 C8FC             	ResetDMAQueue
00001646 4E75                       	rts
00001648                            ; End of function ProcessDMAQueue
00001648                            ; ===========================================================================
00001648                            
00001648                            ; ---------------------------------------------------------------------------
00001648                            ; Subroutine for initializing the DMA queue.
00001648                            ; ---------------------------------------------------------------------------
00001648                            
00001648                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            InitDMAQueue:
00001648 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000164C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000164E 223C 9397 9695             	move.l	#$93979695,d1
00001654 =00000000                      c: = 0
00001654                            	rept QueueSlotCount
00001654                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001654                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001654                                c: = c + DMAEntry.len
00001654 1080 03C8 0002 1140 000E+  	endr
000016E2                            
000016E2 31FC C800 C8FC             	ResetDMAQueue
000016E8 4E75                       	rts
000016EA                            ; End of function ProcessDMAQueue
000016EA                            ; ===========================================================================
000016EA                            
000016EA                            
000016EA                                popo	; buffer local label symbol config
000016EA                            
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ARGUMENTS
000016EA                            ; d0 = index of PLC list
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            ; LoadPLC:
000016EA                            AddPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000016FE 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001702                            
00001702                            	@findspace:
00001702 4A92                       		tst.l	(a2)		; is space available in RAM?
00001704 6700                       		beq.s	@copytoRAM	; if yes, branch
00001706 5C4A                       		addq.w	#6,a2		; if not, try next space
00001708 60F8                       		bra.s	@findspace
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            @copytoRAM:
0000170A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000170C 6B00                       		bmi.s	@skip
0000170E                            
0000170E                            	@loop:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001712 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001716                            
00001716                            	@skip:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171A 4E75                       		rts	
0000171C                            ; End of function AddPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            ; Queue pattern load requests, but clear the PLQ first
0000171C                            
0000171C                            ; ARGUMENTS
0000171C                            ; d0 = index of PLC list (see ArtLoadCues)
0000171C                            
0000171C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000171C                            ;	  (or hacker) is responsible for making sure that no more than
0000171C                            ;	  16 load requests are copied into the buffer.
0000171C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000171C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000171C                            
0000171C                            ; LoadPLC2:
0000171C                            NewPLC:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001730 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001732 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001736 3019                       		move.w	(a1)+,d0	; get length of PLC
00001738 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173A                            
0000173A                            	@loop:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000173E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001742                            
00001742                            	@skip:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function NewPLC
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001748                            
00001748                            
00001748                            ClearPLC:
00001748 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000174C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000174E                            
0000174E                            	@loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,@loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC:
00001756 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175A 6700                       		beq.s	Rplc_Exit
0000175C 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001760 6600                       		bne.s	Rplc_Exit
00001762 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001766 47F9 0000 13AC             		lea	(NemPCD_WriteRowToVDP).l,a3
0000176C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001780 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001792 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            Rplc_Exit:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            ; sub_165E:
000017C8                            ProcessDPLC2:
000017C8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:
000017E0 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017F8 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001814                            
00001814                            loc_16AA:
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000181C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000182C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:
00001846 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function ProcessDPLC2
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            QuickPLC:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; get length of PLC
00001868                            
00001868                            	Qplc_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000187E 6100 FA7E                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001886 4E75                       		rts	
00001888                            ; End of function QuickPLC
00001888                            
00001888                            		include	"_inc\Enigma Decompression.asm"
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            
00001888                            ; input:
00001888                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001888                            ;	a0 = source address
00001888                            ;	a1 = destination address
00001888                            
00001888                            ; usage:
00001888                            ;	lea	(source).l,a0
00001888                            ;	lea	(destination).l,a1
00001888                            ;	move.w	#arttile,d0
00001888                            ;	bsr.w	EniDec
00001888                            
00001888                            ; See http://www.segaretro.org/Enigma_compression for format description
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3		; store starting art tile
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2		; store incremental copy word
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4		; store literal copy word
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018A6 7C10                       		moveq	#16,d6		; initial shift value
000018A8                            ; loc_173E:
000018A8                            Eni_Loop:
000018A8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018B6 3401                       		move.w	d1,d2		; and copy it
000018B8 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018BC 6400                       		bhs.s	@sevenbitentry
000018BE 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            ; loc_1758:
000018C2                            @sevenbitentry:
000018C2 6100 0000                  		bsr.w	EniDec_FetchByte
000018C6 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            ; loc_1768:
000018D2                            EniDec_00:
000018D2 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D4 524A                       		addq.w	#1,a2		; increment it
000018D6 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DA 60CC                       		bra.s	Eni_Loop
000018DC                            ; ===========================================================================
000018DC                            ; loc_1772:
000018DC                            EniDec_01:
000018DC 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018DE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E2 60C4                       		bra.s	Eni_Loop
000018E4                            ; ===========================================================================
000018E4                            ; loc_177A:
000018E4                            EniDec_100:
000018E4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018E8                            ; loc_177E:
000018E8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EA 51CA FFFC                  		dbf	d2,@loop	; repeat
000018EE                            
000018EE 60B8                       		bra.s	Eni_Loop
000018F0                            ; ===========================================================================
000018F0                            ; loc_1786:
000018F0                            EniDec_101:
000018F0 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F4                            ; loc_178A:
000018F4 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018F6 5241                       		addq.w	#1,d1		; increment
000018F8 51CA FFFA                  		dbf	d2,@loop	; repeat
000018FC                            
000018FC 60AA                       		bra.s	Eni_Loop
000018FE                            ; ===========================================================================
000018FE                            ; loc_1794:
000018FE                            EniDec_110:
000018FE 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001902                            ; loc_1798:
00001902 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001904 5341                       		subq.w	#1,d1		; decrement
00001906 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190A                            
0000190A 609C                       		bra.s	Eni_Loop
0000190C                            ; ===========================================================================
0000190C                            ; loc_17A2:
0000190C                            EniDec_111:
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	EniDec_Done
00001912                            ; loc_17A8:
00001912 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001916 32C1                       		move.w	d1,(a1)+	; copy it
00001918 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000191C                            
0000191C 608A                       		bra.s	Eni_Loop
0000191E                            ; ===========================================================================
0000191E                            ; loc_17B4:
0000191E                            EniDec_Index:
0000191E 60B2                       		bra.s	EniDec_00
00001920 60B0                       		bra.s	EniDec_00
00001922 60B8                       		bra.s	EniDec_01
00001924 60B6                       		bra.s	EniDec_01
00001926 60BC                       		bra.s	EniDec_100
00001928 60C6                       		bra.s	EniDec_101
0000192A 60D2                       		bra.s	EniDec_110
0000192C 60DE                       		bra.s	EniDec_111
0000192E                            ; ===========================================================================
0000192E                            ; loc_17C4:
0000192E                            EniDec_Done:
0000192E 5348                       		subq.w	#1,a0		; go back by one byte
00001930 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001934 6600                       		bne.s	@notnewbyte	; if not, branch
00001936 5348                       		subq.w	#1,a0		; and another one if needed
00001938                            ; loc_17CE:
00001938                            @notnewbyte:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000193C 6400                       		bcc.s	@evenbyte	; if not, branch
0000193E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001940                            ; loc_17D6:
00001940                            @evenbyte:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            
00001946                            ; ---------------------------------------------------------------------------
00001946                            ; Part of the Enigma decompressor
00001946                            ; Fetches an inline copy value and stores it in d1
00001946                            ; ---------------------------------------------------------------------------
00001946                            
00001946                            ; =============== S U B R O U T I N E =======================================
00001946                            
00001946                            ; loc_17DC:
00001946                            EniDec_FetchInlineValue:
00001946 360B                       		move.w	a3,d3		; copy starting art tile
00001948 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194A D201                       		add.b	d1,d1		; is the priority bit set?
0000194C 6400                       		bcc.s	@skippriority	; if not, branch
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001952 6700                       		beq.s	@skippriority	; if not, branch
00001954 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001958                            ; loc_17EE:
00001958                            @skippriority:
00001958 D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195A 6400                       		bcc.s	@skiphighpal	; if not, branch
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	@skiphighpal
00001962 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001966                            ; loc_17FC:
00001966                            @skiphighpal:
00001966 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001968 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	@skiplowpal
00001970 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001974                            ; loc_180A:
00001974                            @skiplowpal:
00001974 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001976 6400                       		bcc.s	@skipyflip	; if not, branch
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	@skipyflip
0000197E 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001982                            ; loc_1818:
00001982                            @skipyflip:
00001982 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001984 6400                       		bcc.s	@skipxflip	; if not, branch
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	@skipxflip
0000198C 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001990                            ; loc_1826:
00001990                            @skipxflip:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001996 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#16,d6
0000199E 4447                       		neg.w	d7		; calculate bit deficit
000019A0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A2 1A10                       		move.b	(a0),d5		; get next byte
000019A4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019AE                            ; loc_1844:
000019AE                            @maskvalue:
000019AE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019B6 D243                       		add.w	d3,d1		; add starting art tile
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5	; get next word
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            ; loc_1856:
000019C0                            @enoughbits:
000019C0 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C2 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019CC D243                       		add.w	d3,d1	; add starting art tile
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	EniDec_FetchByte
000019D2                            ; ===========================================================================
000019D2                            ; loc_1868:
000019D2                            @justenough:
000019D2 7C10                       		moveq	#16,d6	; reset shift value
000019D4 60D8                       		bra.s	@maskvalue
000019D6                            ; ===========================================================================
000019D6                            ; word_186C:
000019D6                            EniDec_Masks:
000019D6 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019DE 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019E6 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019EE 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            ; sub_188C:
000019F6                            EniDec_FetchByte:
000019F6 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019F8 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
000019FC 6400                       		bhs.s	@locret	; if not, branch
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            @locret:
00001A04 4E75                       		rts	
00001A06                            ; End of function EniDec_FetchByte
00001A06                            ; End of function EniDec_FetchByte
00001A06                            		include	"_inc\Kosinski Decompression.asm"
00001A06                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A06                            ; (sometimes called KOZINSKI decompression)
00001A06                            ;
00001A06                            ; ARGUMENTS:
00001A06                            ; a0 = source address
00001A06                            ; a1 = destination address
00001A06                            ;
00001A06                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A06                            ; New faster version by written by vladikcomper, with additional improvements by
00001A06                            ; MarkeyJester and Flamewing
00001A06                            ; Converted to ASM68K by Beta Filter.
00001A06                            ; ---------------------------------------------------------------------------
00001A06 =00000001                  Kos_UseLUT: equ 1
00001A06 =00000003                  Kos_LoopUnroll: equ 3
00001A06 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A06                            
00001A06                            Kos_RunBitStream macro
00001A06                                dbra    d2,@skip\@
00001A06                                moveq   #7,d2                   ; Set repeat count to 8.
00001A06                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A06                                not.w   d3                      ; Have all 16 bits been used up?
00001A06                                bne.s   @skip\@                   ; Branch if not.
00001A06                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A06                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A06                                if Kos_UseLUT=1
00001A06                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A06                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A06                                endif
00001A06                            @skip\@
00001A06                                endm
00001A06                            
00001A06                            Kos_ReadBit macro
00001A06                                if Kos_UseLUT=1
00001A06                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A06                                else
00001A06                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A06                                endif
00001A06                                endm
00001A06                            ; ===========================================================================
00001A06                            ; KozDec@193A:
00001A06                            KosDec:
00001A06 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A08 7000                           moveq   #0,d0
00001A0A 7200                           moveq   #0,d1
00001A0C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A10 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A12 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A14 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A18 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A1C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A1E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A20 6000                           bra.s   @FetchNewCode
00001A22                            ; ---------------------------------------------------------------------------
00001A22                            @FetchCodeLoop:
00001A22                                ; Code 1 (Uncompressed byte).
00001A3A 12D8                           move.b  (a0)+,(a1)+
00001A3C                            
00001A3C                            @FetchNewCode:
00001A3E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A40                            
00001A40                                ; Codes 00 and 01.
00001A40 7AFF                           moveq   #-1,d5
00001A42 4BD1                           lea (a1),a5
00001A5E 6500 0000                      bcs.w   @Code_01
00001A62                            
00001A62                                ; Code 00 (Dictionary ref. short).
00001A7C 6500                           bcs.s   @Copy45
00001A98 6500                           bcs.s   @Copy3
00001AB2 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB4 DAC5                           adda.w  d5,a5
00001AB6 12DD                           move.b  (a5)+,(a1)+
00001AB8 12DD                           move.b  (a5)+,(a1)+
00001ABA 6080                           bra.s   @FetchNewCode
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            @Copy3:
00001AD4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AD6 DAC5                           adda.w  d5,a5
00001AD8 12DD                           move.b  (a5)+,(a1)+
00001ADA 12DD                           move.b  (a5)+,(a1)+
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 6000 FF5C                      bra.w   @FetchNewCode
00001AE2                            ; ---------------------------------------------------------------------------
00001AE2                            @Copy45:
00001AFC 6500                           bcs.s   @Copy5
00001B16 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B18 DAC5                           adda.w  d5,a5
00001B1A 12DD                           move.b  (a5)+,(a1)+
00001B1C 12DD                           move.b  (a5)+,(a1)+
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 6000 FF18                      bra.w   @FetchNewCode
00001B26                            ; ---------------------------------------------------------------------------
00001B26                            @Copy5:
00001B3E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B40 DAC5                           adda.w  d5,a5
00001B42 12DD                           move.b  (a5)+,(a1)+
00001B44 12DD                           move.b  (a5)+,(a1)+
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 6000 FEEE                      bra.w   @FetchNewCode
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            @Code_01:
00001B50 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B52                                ; Code 01 (Dictionary ref. long / special).
00001B6A 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B6C 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B6E 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B70 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B72 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B74 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B76 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B78                            
00001B78                                ; special mode (extended counter)
00001B78 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7A 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B7C 5304                           subq.b  #1,d4
00001B7E 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B82                            
00001B82 DAC5                           adda.w  d5,a5
00001B84 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B86 3C04                           move.w  d4,d6
00001B88 4646                           not.w   d6
00001B8A CC47                           and.w   d7,d6
00001B8C DC46                           add.w   d6,d6
00001B8E E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B90 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B94                            ; ---------------------------------------------------------------------------
00001B94                            @largecopy:
00001B94                                rept (1<<Kos_LoopUnroll)
00001B94                                move.b  (a5)+,(a1)+
00001B94 12DD 12DD 12DD 12DD 12DD+      endr
00001BA4 51CC FFEE                      dbra    d4,@largecopy
00001BA8 6000 FE92                      bra.w   @FetchNewCode
00001BAC                            ; ---------------------------------------------------------------------------
00001BAC                            @StreamCopy:
00001BAC DAC5                           adda.w  d5,a5
00001BAE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB0 BF44                           eor.w   d7,d4
00001BB2 D844                           add.w   d4,d4
00001BB4 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BB8                            ; ---------------------------------------------------------------------------
00001BB8                            @mediumcopy:
00001BB8                                rept 8
00001BB8                                move.b  (a5)+,(a1)+
00001BB8 12DD 12DD 12DD 12DD 12DD+      endr
00001BC8 6000 FE72                      bra.w   @FetchNewCode
00001BCC                            ; ---------------------------------------------------------------------------
00001BCC                            @Quit:
00001BCC 4E75                           rts                             ; End of function KosDec.
00001BCE                            ; ===========================================================================
00001BCE                            KosDec_ByteMap:
00001BCE 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BDE 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BEE 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001BFE 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C0E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C1E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C2E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C3E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C4E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C5E 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C6E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C7E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C8E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001C9E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CAE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CBE 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CCE                            ; ===========================================================================
00001CCE                            ; ===========================================================================
00001CCE                            
00001CCE                            		include	"_inc\PaletteCycle.asm"
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            ; Palette cycling routine loading subroutine
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            
00001CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCE                            
00001CCE                            
00001CCE                            PaletteCycle:
00001CCE 7400                       		moveq	#0,d2
00001CD0 7000                       		moveq	#0,d0
00001CD2 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CD6 D040                       		add.w	d0,d0
00001CD8 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CDC 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE0                            ; End of function PaletteCycle
00001CE0                            
00001CE0                            ; ===========================================================================
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0                            ; Palette cycling routines
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE2 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE4 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CE6 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CE8 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CEC 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CEE                            
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            PCycle_Title:
00001CEE 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF4 6000                       		bra.s	PCycGHZ_Go
00001CF6                            ; ===========================================================================
00001CF6                            
00001CF6                            PCycle_GHZ:
00001CF6 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001CFC                            
00001CFC                            PCycGHZ_Go:
00001CFC 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D00 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D02                            
00001D02 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D08 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D0C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D10 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D14 E748                       		lsl.w	#3,d0
00001D16 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D22                            
00001D22                            PCycGHZ_Skip:
00001D22 4E75                       		rts	
00001D24                            ; End of function PCycle_GHZ
00001D24                            
00001D24                            
00001D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D24                            
00001D24                            
00001D24                            PCycle_LZ:
00001D24                            ; Waterfalls
00001D24 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D28 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2A                            
00001D2A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D30 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D34 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D38 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D3C E748                       		lsl.w	#3,d0
00001D3E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D4C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D52                            
00001D52                            	PCycLZ_NotSBZ3:
00001D52 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D5E 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D66 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            PCycLZ_Skip1:
00001D6A                            ; Conveyor belts
00001D6A                            		;move.w	(v_framecount).w,d0
00001D6A                            		;andi.w	#7,d0
00001D6A                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6A                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6A                            		;moveq	#1,d1
00001D6A                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6A                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6A                            		;neg.w	d1
00001D6A                            
00001D6A                            	;PCycLZ_NoRev:
00001D6A                            		;move.w	(v_pal_buffer).w,d0
00001D6A                            		;andi.w	#3,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;cmpi.w	#3,d0
00001D6A                            		;bcs.s	loc_1A0A
00001D6A                            		;move.w	d0,d1
00001D6A                            		;moveq	#0,d0
00001D6A                            		;tst.w	d1
00001D6A                            		;bpl.s	loc_1A0A
00001D6A                            		;moveq	#2,d0
00001D6A                            
00001D6A                            ;loc_1A0A:
00001D6A                            		;move.w	d0,(v_pal_buffer).w
00001D6A                            		;add.w	d0,d0
00001D6A                            		;move.w	d0,d1
00001D6A                            		;add.w	d0,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;lea	(Pal_LZCyc2).l,a0
00001D6A                            		;lea	(v_pal_dry+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            		;lea	(Pal_LZCyc3).l,a0
00001D6A                            		;lea	(v_pal_water+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            ;PCycLZ_Skip2:
00001D6A 4E75                       		rts	
00001D6C                            ; End of function PCycle_LZ
00001D6C                            
00001D6C                            ; ===========================================================================
00001D6C 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D74                            ; ===========================================================================
00001D74                            
00001D74                            PCycle_MZ:
00001D74 4E75                       		rts	
00001D76                            
00001D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D76                            
00001D76                            
00001D76                            PalCycle_SLZ:
00001D76 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7A 6A00                       		bpl.s	locret_1A80
00001D7C 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D82 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D86 5240                       		addq.w	#1,d0
00001D88 0C40 0006                  		cmpi.w	#6,d0
00001D8C 6500                       		bcs.s	loc_1A60
00001D8E 7000                       		moveq	#0,d0
00001D90                            
00001D90                            loc_1A60:
00001D90 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D94 3200                       		move.w	d0,d1
00001D96 D241                       		add.w	d1,d1
00001D98 D041                       		add.w	d1,d0
00001D9A D040                       		add.w	d0,d0
00001D9C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB0                            
00001DB0                            locret_1A80:
00001DB0 4E75                       		rts	
00001DB2                            ; End of function PalCycle_SLZ
00001DB2                            
00001DB2                            
00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            
00001DB2                            
00001DB2                            PalCycle_SYZ:
00001DB2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DB6 6A00                       		bpl.s	locret_1AC6
00001DB8 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DBE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC2 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DC6 0240 0003                  		andi.w	#3,d0
00001DCA E548                       		lsl.w	#2,d0
00001DCC 3200                       		move.w	d0,d1
00001DCE D040                       		add.w	d0,d0
00001DD0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DD6 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DE8 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DEC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DF6                            
00001DF6                            locret_1AC6:
00001DF6 4E75                       		rts	
00001DF8                            ; End of function PalCycle_SYZ
00001DF8                            
00001DF8                            
00001DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DF8                            
00001DF8                            
00001DF8                            PalCycle_SBZ:
00001DF8 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001DFE 4A38 FE11                  		tst.b	(v_act).w
00001E02 6700                       		beq.s	loc_1ADA
00001E04 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0A                            
00001E0A                            loc_1ADA:
00001E0A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E0E 321A                       		move.w	(a2)+,d1
00001E10                            
00001E10                            loc_1AE0:
00001E10 5311                       		subq.b	#1,(a1)
00001E12 6B00                       		bmi.s	loc_1AEA
00001E14 5489                       		addq.l	#2,a1
00001E16 5C8A                       		addq.l	#6,a2
00001E18 6000                       		bra.s	loc_1B06
00001E1A                            ; ===========================================================================
00001E1A                            
00001E1A                            loc_1AEA:
00001E1A 12DA                       		move.b	(a2)+,(a1)+
00001E1C 1011                       		move.b	(a1),d0
00001E1E 5200                       		addq.b	#1,d0
00001E20 B01A                       		cmp.b	(a2)+,d0
00001E22 6500                       		bcs.s	loc_1AF6
00001E24 7000                       		moveq	#0,d0
00001E26                            
00001E26                            loc_1AF6:
00001E26 12C0                       		move.b	d0,(a1)+
00001E28 0240 000F                  		andi.w	#$F,d0
00001E2C D040                       		add.w	d0,d0
00001E2E 305A                       		movea.w	(a2)+,a0
00001E30 365A                       		movea.w	(a2)+,a3
00001E32 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E36                            
00001E36                            loc_1B06:
00001E36 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E3E 6A00                       		bpl.s	locret_1B64
00001E40 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E46 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E4C 4A38 FE11                  		tst.b	(v_act).w
00001E50 6700                       		beq.s	loc_1B2E
00001E52 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E58 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E5E                            
00001E5E                            loc_1B2E:
00001E5E 72FF                       		moveq	#-1,d1
00001E60 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E64 6700                       		beq.s	loc_1B38
00001E66 4441                       		neg.w	d1
00001E68                            
00001E68                            loc_1B38:
00001E68 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E6C 0240 0003                  		andi.w	#3,d0
00001E70 D041                       		add.w	d1,d0
00001E72 0C40 0003                  		cmpi.w	#3,d0
00001E76 6500                       		bcs.s	loc_1B52
00001E78 3200                       		move.w	d0,d1
00001E7A 7000                       		moveq	#0,d0
00001E7C 4A41                       		tst.w	d1
00001E7E 6A00                       		bpl.s	loc_1B52
00001E80 7002                       		moveq	#2,d0
00001E82                            
00001E82                            loc_1B52:
00001E82 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E86 D040                       		add.w	d0,d0
00001E88 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E94                            
00001E94                            locret_1B64:
00001E94 4E75                       		rts	
00001E96                            ; End of function PalCycle_SBZ
00001E96                            ; End of function PalCycle_SBZ
00001E96                            
00001E96                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EB6                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001ED6                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EF6                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F08                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F82                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FA6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FC6                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FD6                            
00001FD6                            		include	"_inc\SBZ Palette Scripts.asm"
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            ; Scrap Brain Zone palette cycling script
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            
00001FD6                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FD6                            	dc.b duration, colors
00001FD6                            	dc.w paladdress, ramaddress
00001FD6                            	endm
00001FD6                            
00001FD6                            ; duration in frames, number of colors, palette address, RAM address
00001FD6                            
00001FD6                            Pal_SBZCycList1:
00001FD6 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FD8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FDE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE4 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEA 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FF6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001FFC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002002 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002008 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000200E                            end_SBZCycList1:
0000200E                            	even
0000200E                            
0000200E                            Pal_SBZCycList2:
0000200E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002010 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002016 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000201C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002022 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002028 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000202E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002034 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203A                            end_SBZCycList2:
0000203A                            	even
0000203A                            	even
0000203A                            
0000203A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002076                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002086                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002096                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020B6                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C0                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D0                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            ; Subroutine to	fade in from black
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            
000020DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DC                            
000020DC                            
000020DC                            PaletteFadeIn:
000020DC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E2                            
000020E2                            PalFadeIn_Alt:				; start position and size are already set
000020E2 7000                       		moveq	#0,d0
000020E4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000020EC D0C0                       		adda.w	d0,a0
000020EE 7200                       		moveq	#cBlack,d1
000020F0 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F4                            
000020F4                            	@fill:
000020F4 30C1                       		move.w	d1,(a0)+
000020F6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FA                            
000020FA 383C 0015                  		move.w	#$15,d4
000020FE                            
000020FE                            	@mainloop:
000020FE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002104 6100 0000                  		bsr.w	WaitForVBla
00002108 6100                       		bsr.s	FadeIn_FromBlack
0000210A 6100 F64A                  		bsr.w	RunPLC
0000210E 51CC FFEE                  		dbf	d4,@mainloop
00002112 4E75                       		rts	
00002114                            ; End of function PaletteFadeIn
00002114                            
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            FadeIn_FromBlack:
00002114 7000                       		moveq	#0,d0
00002116 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000211E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212A                            
0000212A                            	@addcolour:
0000212A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000212C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002130                            
00002130 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002136 6600                       		bne.s	@exit		; if not, branch
00002138                            
00002138 7000                       		moveq	#0,d0
0000213A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000213E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002142 1038 F626                  		move.b	(v_pfade_start).w,d0
00002146 D0C0                       		adda.w	d0,a0
00002148 D2C0                       		adda.w	d0,a1
0000214A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000214E                            
0000214E                            	@addcolour2:
0000214E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002150 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002154                            
00002154                            @exit:
00002154 4E75                       		rts	
00002156                            ; End of function FadeIn_FromBlack
00002156                            
00002156                            
00002156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002156                            
00002156                            
00002156                            FadeIn_AddColour:
00002156                            @addblue:
00002156 3419                       		move.w	(a1)+,d2
00002158 3610                       		move.w	(a0),d3
0000215A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000215C 6700                       		beq.s	@next		; if yes, branch
0000215E 3203                       		move.w	d3,d1
00002160 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002164 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002166 6200                       		bhi.s	@addgreen	; if yes, branch
00002168 30C1                       		move.w	d1,(a0)+	; update palette
0000216A 4E75                       		rts	
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            @addgreen:
0000216C 3203                       		move.w	d3,d1
0000216E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002172 B242                       		cmp.w	d2,d1
00002174 6200                       		bhi.s	@addred
00002176 30C1                       		move.w	d1,(a0)+	; update palette
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            @addred:
0000217A 5458                       		addq.w	#2,(a0)+	; increase red value
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @next:
0000217E 5448                       		addq.w	#2,a0		; next colour
00002180 4E75                       		rts	
00002182                            ; End of function FadeIn_AddColour
00002182                            
00002182                            
00002182                            ; ---------------------------------------------------------------------------
00002182                            ; Subroutine to fade out to black
00002182                            ; ---------------------------------------------------------------------------
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            PaletteFadeOut:
00002182 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002188 383C 0015                  		move.w	#$15,d4
0000218C                            
0000218C                            	@mainloop:
0000218C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002192 6100 0000                  		bsr.w	WaitForVBla
00002196 6100                       		bsr.s	FadeOut_ToBlack
00002198 6100 F5BC                  		bsr.w	RunPLC
0000219C 51CC FFEE                  		dbf	d4,@mainloop
000021A0 4E75                       		rts	
000021A2                            ; End of function PaletteFadeOut
000021A2                            
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            FadeOut_ToBlack:
000021A2 7000                       		moveq	#0,d0
000021A4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021A8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021AC D0C0                       		adda.w	d0,a0
000021AE 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B2                            
000021B2                            	@decolour:
000021B2 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B4 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021B8                            
000021B8 7000                       		moveq	#0,d0
000021BA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021BE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C2 D0C0                       		adda.w	d0,a0
000021C4 1038 F627                  		move.b	(v_pfade_size).w,d0
000021C8                            
000021C8                            	@decolour2:
000021C8 6100                       		bsr.s	FadeOut_DecColour
000021CA 51C8 FFFC                  		dbf	d0,@decolour2
000021CE 4E75                       		rts	
000021D0                            ; End of function FadeOut_ToBlack
000021D0                            
000021D0                            
000021D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D0                            
000021D0                            
000021D0                            FadeOut_DecColour:
000021D0                            @dered:
000021D0 3410                       		move.w	(a0),d2
000021D2 6700                       		beq.s	@next
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 6700                       		beq.s	@degreen
000021DC 5558                       		subq.w	#2,(a0)+	; decrease red value
000021DE 4E75                       		rts	
000021E0                            ; ===========================================================================
000021E0                            
000021E0                            @degreen:
000021E0 3202                       		move.w	d2,d1
000021E2 0241 00E0                  		andi.w	#$E0,d1
000021E6 6700                       		beq.s	@deblue
000021E8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021EC 4E75                       		rts	
000021EE                            ; ===========================================================================
000021EE                            
000021EE                            @deblue:
000021EE 3202                       		move.w	d2,d1
000021F0 0241 0E00                  		andi.w	#$E00,d1
000021F4 6700                       		beq.s	@next
000021F6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FA 4E75                       		rts	
000021FC                            ; ===========================================================================
000021FC                            
000021FC                            @next:
000021FC 5448                       		addq.w	#2,a0
000021FE 4E75                       		rts	
00002200                            ; End of function FadeOut_DecColour
00002200                            
00002200                            ; ---------------------------------------------------------------------------
00002200                            ; Subroutine to	fade in from white (Special Stage)
00002200                            ; ---------------------------------------------------------------------------
00002200                            
00002200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002200                            
00002200                            
00002200                            PaletteWhiteIn:
00002200 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002206 7000                       		moveq	#0,d0
00002208 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000220C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002210 D0C0                       		adda.w	d0,a0
00002212 323C 0EEE                  		move.w	#cWhite,d1
00002216 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221A                            
0000221A                            	@fill:
0000221A 30C1                       		move.w	d1,(a0)+
0000221C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002220                            
00002220 383C 0015                  		move.w	#$15,d4
00002224                            
00002224                            	@mainloop:
00002224 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222A 6100 0000                  		bsr.w	WaitForVBla
0000222E 6100                       		bsr.s	WhiteIn_FromWhite
00002230 6100 F524                  		bsr.w	RunPLC
00002234 51CC FFEE                  		dbf	d4,@mainloop
00002238 4E75                       		rts	
0000223A                            ; End of function PaletteWhiteIn
0000223A                            
0000223A                            
0000223A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223A                            
0000223A                            
0000223A                            WhiteIn_FromWhite:
0000223A 7000                       		moveq	#0,d0
0000223C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002240 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002244 1038 F626                  		move.b	(v_pfade_start).w,d0
00002248 D0C0                       		adda.w	d0,a0
0000224A D2C0                       		adda.w	d0,a1
0000224C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002250                            
00002250                            	@decolour:
00002250 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002252 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002256                            
00002256 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000225C 6600                       		bne.s	@exit		; if not, branch
0000225E 7000                       		moveq	#0,d0
00002260 41F8 FA80                  		lea	(v_pal_water).w,a0
00002264 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002268 1038 F626                  		move.b	(v_pfade_start).w,d0
0000226C D0C0                       		adda.w	d0,a0
0000226E D2C0                       		adda.w	d0,a1
00002270 1038 F627                  		move.b	(v_pfade_size).w,d0
00002274                            
00002274                            	@decolour2:
00002274 6100                       		bsr.s	WhiteIn_DecColour
00002276 51C8 FFFC                  		dbf	d0,@decolour2
0000227A                            
0000227A                            	@exit:
0000227A 4E75                       		rts	
0000227C                            ; End of function WhiteIn_FromWhite
0000227C                            
0000227C                            
0000227C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227C                            
0000227C                            
0000227C                            WhiteIn_DecColour:
0000227C                            @deblue:
0000227C 3419                       		move.w	(a1)+,d2
0000227E 3610                       		move.w	(a0),d3
00002280 B642                       		cmp.w	d2,d3
00002282 6700                       		beq.s	@next
00002284 3203                       		move.w	d3,d1
00002286 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228A 6500                       		blo.s	@degreen
0000228C B242                       		cmp.w	d2,d1
0000228E 6500                       		blo.s	@degreen
00002290 30C1                       		move.w	d1,(a0)+
00002292 4E75                       		rts	
00002294                            ; ===========================================================================
00002294                            
00002294                            @degreen:
00002294 3203                       		move.w	d3,d1
00002296 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229A 6500                       		blo.s	@dered
0000229C B242                       		cmp.w	d2,d1
0000229E 6500                       		blo.s	@dered
000022A0 30C1                       		move.w	d1,(a0)+
000022A2 4E75                       		rts	
000022A4                            ; ===========================================================================
000022A4                            
000022A4                            @dered:
000022A4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @next:
000022A8 5448                       		addq.w	#2,a0
000022AA 4E75                       		rts	
000022AC                            ; End of function WhiteIn_DecColour
000022AC                            
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            ; Subroutine to fade to white (Special Stage)
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            
000022AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AC                            
000022AC                            
000022AC                            PaletteWhiteOut:
000022AC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B2 383C 0015                  		move.w	#$15,d4
000022B6                            
000022B6                            	@mainloop:
000022B6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022BC 6100 0000                  		bsr.w	WaitForVBla
000022C0 6100                       		bsr.s	WhiteOut_ToWhite
000022C2 6100 F492                  		bsr.w	RunPLC
000022C6 51CC FFEE                  		dbf	d4,@mainloop
000022CA 4E75                       		rts	
000022CC                            ; End of function PaletteWhiteOut
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteOut_ToWhite:
000022CC 7000                       		moveq	#0,d0
000022CE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D2 1038 F626                  		move.b	(v_pfade_start).w,d0
000022D6 D0C0                       		adda.w	d0,a0
000022D8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022DC                            
000022DC                            	@addcolour:
000022DC 6100                       		bsr.s	WhiteOut_AddColour
000022DE 51C8 FFFC                  		dbf	d0,@addcolour
000022E2                            
000022E2 7000                       		moveq	#0,d0
000022E4 41F8 FA80                  		lea	(v_pal_water).w,a0
000022E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022EC D0C0                       		adda.w	d0,a0
000022EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F2                            
000022F2                            	@addcolour2:
000022F2 6100                       		bsr.s	WhiteOut_AddColour
000022F4 51C8 FFFC                  		dbf	d0,@addcolour2
000022F8 4E75                       		rts	
000022FA                            ; End of function WhiteOut_ToWhite
000022FA                            
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            WhiteOut_AddColour:
000022FA                            @addred:
000022FA 3410                       		move.w	(a0),d2
000022FC 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002300 6700                       		beq.s	@next
00002302 3202                       		move.w	d2,d1
00002304 0241 000E                  		andi.w	#$E,d1
00002308 0C41 000E                  		cmpi.w	#cRed,d1
0000230C 6700                       		beq.s	@addgreen
0000230E 5458                       		addq.w	#2,(a0)+	; increase red value
00002310 4E75                       		rts	
00002312                            ; ===========================================================================
00002312                            
00002312                            @addgreen:
00002312 3202                       		move.w	d2,d1
00002314 0241 00E0                  		andi.w	#$E0,d1
00002318 0C41 00E0                  		cmpi.w	#cGreen,d1
0000231C 6700                       		beq.s	@addblue
0000231E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002322 4E75                       		rts	
00002324                            ; ===========================================================================
00002324                            
00002324                            @addblue:
00002324 3202                       		move.w	d2,d1
00002326 0241 0E00                  		andi.w	#$E00,d1
0000232A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000232E 6700                       		beq.s	@next
00002330 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002334 4E75                       		rts	
00002336                            ; ===========================================================================
00002336                            
00002336                            @next:
00002336 5448                       		addq.w	#2,a0
00002338 4E75                       		rts	
0000233A                            ; End of function WhiteOut_AddColour
0000233A                            
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Palette cycling routine - Sega logo
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            
0000233A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233A                            
0000233A                            
0000233A                            PalCycle_Sega:
0000233A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000233E 6600                       		bne.s	loc_206A
00002340 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002344 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234A 7205                       		moveq	#5,d1
0000234C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002350                            
00002350                            loc_2020:
00002350 6A00                       		bpl.s	loc_202A
00002352 5448                       		addq.w	#2,a0
00002354 5341                       		subq.w	#1,d1
00002356 5440                       		addq.w	#2,d0
00002358 60F6                       		bra.s	loc_2020
0000235A                            ; ===========================================================================
0000235A                            
0000235A                            loc_202A:
0000235A 3400                       		move.w	d0,d2
0000235C 0242 001E                  		andi.w	#$1E,d2
00002360 6600                       		bne.s	loc_2034
00002362 5440                       		addq.w	#2,d0
00002364                            
00002364                            loc_2034:
00002364 0C40 0060                  		cmpi.w	#$60,d0
00002368 6400                       		bhs.s	loc_203E
0000236A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000236E                            
0000236E                            loc_203E:
0000236E 5440                       		addq.w	#2,d0
00002370 51C9 FFE8                  		dbf	d1,loc_202A
00002374                            
00002374 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002378 5440                       		addq.w	#2,d0
0000237A 3400                       		move.w	d0,d2
0000237C 0242 001E                  		andi.w	#$1E,d2
00002380 6600                       		bne.s	loc_2054
00002382 5440                       		addq.w	#2,d0
00002384                            
00002384                            loc_2054:
00002384 0C40 0064                  		cmpi.w	#$64,d0
00002388 6D00                       		blt.s	loc_2062
0000238A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002390 70F4                       		moveq	#-$C,d0
00002392                            
00002392                            loc_2062:
00002392 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002396 7001                       		moveq	#1,d0
00002398 4E75                       		rts	
0000239A                            ; ===========================================================================
0000239A                            
0000239A                            loc_206A:
0000239A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000239E 6A00                       		bpl.s	loc_20BC
000023A0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023A6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AA 0640 000C                  		addi.w	#$C,d0
000023AE 0C40 0030                  		cmpi.w	#$30,d0
000023B2 6500                       		blo.s	loc_2088
000023B4 7000                       		moveq	#0,d0
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            loc_2088:
000023B8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023BC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C2 41F0 0000                  		lea	(a0,d0.w),a0
000023C6 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CA 22D8                       		move.l	(a0)+,(a1)+
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 3298                       		move.w	(a0)+,(a1)
000023D0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D4 7000                       		moveq	#0,d0
000023D6 722C                       		moveq	#$2C,d1
000023D8                            
000023D8                            loc_20A8:
000023D8 3400                       		move.w	d0,d2
000023DA 0242 001E                  		andi.w	#$1E,d2
000023DE 6600                       		bne.s	loc_20B2
000023E0 5440                       		addq.w	#2,d0
000023E2                            
000023E2                            loc_20B2:
000023E2 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E6 5440                       		addq.w	#2,d0
000023E8 51C9 FFEE                  		dbf	d1,loc_20A8
000023EC                            
000023EC                            loc_20BC:
000023EC 7001                       		moveq	#1,d0
000023EE 4E75                       		rts	
000023F0                            ; End of function PalCycle_Sega
000023F0                            
000023F0                            ; ===========================================================================
000023F0                            
000023F0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000023FC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load palettes
0000242C                            
0000242C                            ; input:
0000242C                            ;	d0 = index number for palette
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load pallets
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            PalLoad1:
0000242C 1238 FE11                  		move.b ($FFFFFE11),d1
00002430 43F9 0000 0000             		lea (PalPointers).l,a1
00002436 0C01 0000                  		cmp.b #0,d1
0000243A 6700 0000                  		beq.w PalLoad1_Continue
0000243E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002444 0C01 0001                  		cmp.b #1,d1
00002448 6700 0000                  		beq.w PalLoad1_Continue
0000244C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002452                            
00002452                            PalLoad1_Continue:
00002452 E748                       		lsl.w #3,d0
00002454 D2C0                       		adda.w d0,a1
00002456 2459                       		movea.l (a1)+,a2
00002458 3659                       		movea.w (a1)+,a3
0000245A D6FC 0080                  		adda.w #$80,a3
0000245E 3E19                       		move.w (a1)+,d7
00002460                            
00002460                            loc_2110:
00002460 26DA                       		move.l (a2)+,(a3)+
00002462 51CF FFFC                  		dbf d7,loc_2110
00002466 4E75                       		rts
00002468                             ; End of function PalLoad1
00002468                            
00002468                            
00002468                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002468                            
00002468                            PalLoad2:
00002468 1238 FE11                  		move.b ($FFFFFE11),d1
0000246C 43F9 0000 0000             		lea (PalPointers).l,a1
00002472 0C01 0000                  		cmp.b #0,d1
00002476 6700 0000                  		beq.w PalLoad2_Continue
0000247A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002480 0C01 0001                  		cmp.b #1,d1
00002484 6700 0000                  		beq.w PalLoad2_Continue
00002488 43F9 0000 0000             		lea (PalPointers3).l,a1
0000248E                            
0000248E                            
0000248E                            PalLoad2_Continue:
0000248E E748                       		lsl.w #3,d0
00002490 D2C0                       		adda.w d0,a1
00002492 2459                       		movea.l (a1)+,a2
00002494 3659                       		movea.w (a1)+,a3
00002496 3E19                       		move.w (a1)+,d7
00002498                            
00002498                            loc_2128:
00002498 26DA                       		move.l (a2)+,(a3)+
0000249A 51CF FFFC                  		dbf d7,loc_2128
0000249E 4E75                       		rts
000024A0                            ; End of function PalLoad2
000024A0                            
000024A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A0                            
000024A0                            
000024A0                            PalLoad_Loop: ;Quick load - TIS
000024A0                                    
000024A0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024A6 4E75                               rts
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            
00002520                            		include	"_inc\Palette Pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Palette pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            
00002520                            palp:	macro paladdress,ramaddress,colors
00002520                            	dc.l paladdress
00002520                            	dc.w ramaddress, (colors>>1)-1
00002520                            	endm
00002520                            
00002520                            PalPointers:
00002520                            
00002520                            ; palette address, RAM address, colors
00002520                            
00002520 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002528 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002530 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002538 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002540                            Pal_Levels:
00002540 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002548 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002550 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002558 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002560 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002568 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002570 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002578 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002580 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002588 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002590 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002598 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025A8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B0 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025B8 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C0 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025C8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025D8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025F8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002600 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002608 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002610 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002618 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002620 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002628 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002630 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002638 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002640 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002648 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002650 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
00002658 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002660 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
00002668 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002670 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
00002678 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002680 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002688 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002690 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002698 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A0                            			even
000026A0                            
000026A0                            PalPointers2:
000026A0                            
000026A0                            ; palette address, RAM address, colors
000026A0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026A8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B0 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026B8 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C0                            Pal_Levels_2:
000026C0 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026C8 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026D8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026E8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026F8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002700 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002708 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002710 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002718 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002728 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002730 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002738 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002740 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002748 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002750 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002758 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002760 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002768 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002770 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002778 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002780 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002788 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002790 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002798 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027A8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B0 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027B8 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027C8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002800 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002808 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002810 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002818 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002820                            			even
00002820                            			
00002820                            PalPointers3:
00002820                            			
00002820                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002820 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002828 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002830 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002838 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002840                            Pal_Levels_3:
00002840 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002848 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002850 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002858 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002860 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002868 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002870 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002878 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002880 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002888 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002890 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002898 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028A8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028C8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028D8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E0 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028E8 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F0 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028F8 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002900 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002908 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002910 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002918 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002920 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002928 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002930 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002938 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002940 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002948 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002950 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002958 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002960 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002968 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002970 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002978 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002980 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002988 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002998 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A0                            			even
000029A0                            
000029A0                            
000029A0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers2.asm"
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers3.asm"
000029A0                            		
000029A0                            
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            ; Palette data
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A20                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B20                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B40                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C00                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C60                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D20                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D80                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E00                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E80                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F00                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F60                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003020                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003080                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003140                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003200                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003260                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003320                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003400                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003480                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003560                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003620                            Pal_Options:	incbin	"palette\Options.bin"
000036A0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003700                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003720                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003740                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003760                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003780                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003800                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003820                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003840                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003860                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003880                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003900                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003920                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003940                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003960                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003980                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            ; Subroutine to	wait for VBlank routines to complete
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            
00003A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A00                            
00003A00                            
00003A00                            WaitForVBla:
00003A00 46FC 2300                  		enable_ints
00003A04                            
00003A04                            	@wait:
00003A04 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A08 66FA                       		bne.s	@wait		; if not, branch
00003A0A 4E75                       		rts	
00003A0C                            ; End of function WaitForVBla
00003A0C                            
00003A0C                            		include	"_incObj\sub RandomNumber.asm"
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            
00003A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A0C                            
00003A0C                            
00003A0C                            RandomNumber:
00003A0C 2238 F636                  		move.l	(v_random).w,d1
00003A10 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A12 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A18                            
00003A18                            	@scramble:
00003A18 2001                       		move.l	d1,d0
00003A1A E581                       		asl.l	#2,d1
00003A1C D280                       		add.l	d0,d1
00003A1E E781                       		asl.l	#3,d1
00003A20 D280                       		add.l	d0,d1
00003A22 3001                       		move.w	d1,d0
00003A24 4841                       		swap	d1
00003A26 D041                       		add.w	d1,d0
00003A28 3200                       		move.w	d0,d1
00003A2A 4841                       		swap	d1
00003A2C 21C1 F636                  		move.l	d1,(v_random).w
00003A30 4E75                       		rts	
00003A30 4E75                       		rts	
00003A32                            		include	"_incObj\sub CalcSine.asm"
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            ; Subroutine calculate a sine
00003A32                            
00003A32                            ; input:
00003A32                            ;	d0 = angle
00003A32                            
00003A32                            ; output:
00003A32                            ;	d0 = sine
00003A32                            ;	d1 = cosine
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            
00003A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A32                            
00003A32                            
00003A32                            CalcSine:
00003A32 0240 00FF                          andi.w  #$FF,d0
00003A36 5040                               addq.w  #8,d0
00003A38 D040                               add.w   d0,d0
00003A3A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A3E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A42 4E75                               rts
00003A44                            ; End of function CalcSine
00003A44                            
00003A44                            ; ===========================================================================
00003A44                            
00003A44                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC4                            
00003CC4                            ; ===========================================================================
00003CC4                            ; ===========================================================================
00003CC4                            		include	"_incObj\sub CalcAngle.asm"
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            ; Subroutine calculate an angle
00003CC4                            
00003CC4                            ; input:
00003CC4                            ;	d1 = x-axis distance
00003CC4                            ;	d2 = y-axis distance
00003CC4                            
00003CC4                            ; output:
00003CC4                            ;	d0 = angle
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            
00003CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC4                            
00003CC4                            
00003CC4                            CalcAngle:
00003CC4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CC8 7600                       		moveq	#0,d3
00003CCA 7800                       		moveq	#0,d4
00003CCC 3601                       		move.w	d1,d3
00003CCE 3802                       		move.w	d2,d4
00003CD0 8843                       		or.w	d3,d4
00003CD2 6700                       		beq.s	loc_2D04
00003CD4 3802                       		move.w	d2,d4
00003CD6 4A43                       		tst.w	d3
00003CD8 6A00 0000                  		bpl.w	loc_2CC2
00003CDC 4443                       		neg.w	d3
00003CDE                            
00003CDE                            loc_2CC2:
00003CDE 4A44                       		tst.w	d4
00003CE0 6A00 0000                  		bpl.w	loc_2CCA
00003CE4 4444                       		neg.w	d4
00003CE6                            
00003CE6                            loc_2CCA:
00003CE6 B843                       		cmp.w	d3,d4
00003CE8 6400 0000                  		bcc.w	loc_2CDC
00003CEC E18C                       		lsl.l	#8,d4
00003CEE 88C3                       		divu.w	d3,d4
00003CF0 7000                       		moveq	#0,d0
00003CF2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CF6 6000                       		bra.s	loc_2CE6
00003CF8                            ; ===========================================================================
00003CF8                            
00003CF8                            loc_2CDC:
00003CF8 E18B                       		lsl.l	#8,d3
00003CFA 86C4                       		divu.w	d4,d3
00003CFC 7040                       		moveq	#$40,d0
00003CFE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D02                            
00003D02                            loc_2CE6:
00003D02 4A41                       		tst.w	d1
00003D04 6A00 0000                  		bpl.w	loc_2CF2
00003D08 4440                       		neg.w	d0
00003D0A 0640 0080                  		addi.w	#$80,d0
00003D0E                            
00003D0E                            loc_2CF2:
00003D0E 4A42                       		tst.w	d2
00003D10 6A00 0000                  		bpl.w	loc_2CFE
00003D14 4440                       		neg.w	d0
00003D16 0640 0100                  		addi.w	#$100,d0
00003D1A                            
00003D1A                            loc_2CFE:
00003D1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D1E 4E75                       		rts	
00003D20                            ; ===========================================================================
00003D20                            
00003D20                            loc_2D04:
00003D20 303C 0040                  		move.w	#$40,d0
00003D24 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D28 4E75                       		rts	
00003D2A                            ; End of function CalcAngle
00003D2A                            
00003D2A                            ; ===========================================================================
00003D2A                            
00003D2A                            Angle_Data:	incbin	"misc\angles.bin"
00003E2C                            
00003E2C                            ; ===========================================================================
00003E2C                            ; ===========================================================================
00003E2C                            
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            ; Sega screen
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            
00003E2C                            GM_Sega:
00003E34 6100 D912                  		bsr.w	ClearPLC
00003E38 6100 E348                  		bsr.w	PaletteFadeOut
00003E3C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E42 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E46 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E4E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E52 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E56 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5A 46FC 2700                  		disable_ints
00003E5E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E62 0200 00BF                  		andi.b	#$BF,d0
00003E66 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E6C 6100 D312                  		bsr.w	ClearScreen
00003E7A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E80 6100 D47C                  		bsr.w	NemDec
00003E84 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E90 303C 0000                  		move.w	#0,d0
00003E94 6100 D9F2                  		bsr.w	EniDec
00003E98                            
00003E98 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EAC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC0                            
00003EC0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC4 6B00                       			bmi.s   @loadpal
00003EC6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDA                            
00003EDA                            	@loadpal:
00003EDA 7000                       		moveq	#palid_SegaBG,d0
00003EDC 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EE6 7E3F                               moveq    #$3F,d7
00003EE8                             
00003EE8                                .loop:
00003EE8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EEC 51CF FFFA                          dbf        d7,.loop
00003EF0 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF4 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F00 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F06 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F0C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F10 0000 0040                  		ori.b	#$40,d0
00003F14 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1A                            
00003F1A                            Sega_WaitPal:
00003F1A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F20 6100 FADE                  		bsr.w	WaitForVBla
00003F24 6100 E414                  		bsr.w	PalCycle_Sega
00003F28 66F0                       		bne.s	Sega_WaitPal
00003F2A                            
00003F32 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F38 6100 FAC6                  		bsr.w	WaitForVBla
00003F3C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F42                            
00003F42                            Sega_WaitEnd:
00003F42 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F48 6100 FAB6                  		bsr.w	WaitForVBla
00003F4C 4A78 F614                  		tst.w	(v_demolength).w
00003F50 6700                       		beq.s	Sega_GotoTitle
00003F52 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F58 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5A                            
00003F5A                            Sega_GotoTitle:
00003F5A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F60 4E75                       		rts	
00003F62                            ; ===========================================================================
00003F62                            
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            ; Title	screen
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            
00003F62                            GM_Title:
00003F6A 6100 D7DC                  		bsr.w	ClearPLC
00003F6E 6100 E212                  		bsr.w	PaletteFadeOut
00003F72 46FC 2700                  		disable_ints
00003F76 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F80 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F84 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F88 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F8C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F90 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F94 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F98 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003F9C 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA0 6100 D1DE                  		bsr.w	ClearScreen
00003FA4 4EB9 0000 0000             		jsr		SHC2022 
00003FAA                            
00003FAA 43F8 D000                  		lea	(v_objspace).w,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 323C 07FF                  		move.w	#$7FF,d1
00003FB4                            
00003FB4                            	Tit_ClrObj1:
00003FB4 22C0                       		move.l	d0,(a1)+
00003FB6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBA                            
00003FC4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCA 6100 D332                  		bsr.w	NemDec
00003FD8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FDE 6100 D31E                  		bsr.w	NemDec
00003FE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FE8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FEE 303C 0000                  		move.w	#0,d0
00003FF2 6100 D894                  		bsr.w	EniDec
00003FF6                            
00003FF6 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400A                            
0000400A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000400E 7000                       		moveq	#cBlack,d0
00004010 323C 001F                  		move.w	#$1F,d1
00004014                            
00004014                            	Tit_ClrPal:
00004014 22C0                       		move.l	d0,(a1)+
00004016 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401A                            
0000401A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004020 6100 E40A                  		bsr.w	PalLoad1
00004024 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004030 4EB9 0000 0000             		jsr	(BuildSprites).l
00004036 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403A 46FC 2700                  		disable_ints
00004048 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000404E 6100 D2AE                  		bsr.w	NemDec
0000405C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004062 6100 D29A                  		bsr.w	NemDec
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004074 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
0000407A 323C 028F                  		move.w	#$28F,d1
0000407E                            
0000407E                            	Tit_LoadText:
0000407E 3C9D                       		move.w	(a5)+,(a6)
00004080 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004084                            
00004084 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
0000408A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004090 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00004096 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
0000409C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040A2 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040A8 6100 0000                  		bsr.w	LevelSizeLoad
000040AC 6100 0000                  		bsr.w	DeformLayers
000040B0 43F8 B000                  		lea	(v_16x16).w,a1
000040B4 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040BA 303C 0000                  		move.w	#0,d0
000040BE 6100 D7C8                  		bsr.w	EniDec
000040C2 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040C8 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040CE 6100 D936                  		bsr.w	KosDec
000040D2 6100 0000                  		bsr.w	LevelLayoutLoad
000040D6 6100 E0AA                  		bsr.w	PaletteFadeOut
000040DA 46FC 2700                  		disable_ints
000040DE 6100 D0A0                  		bsr.w	ClearScreen
000040E2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000040E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000040EE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000040F2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000040F6 343C 6000                  		move.w	#$6000,d2
000040FA 6100 0000                  		bsr.w	DrawChunks
000040FE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004104 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000410A 303C 0000                  		move.w	#0,d0
0000410E 6100 D778                  		bsr.w	EniDec
00004112                            
00004112 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004126                            
00004130 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004136 6100 D1C6                  		bsr.w	NemDec
0000413A 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000413C 6100 E2EE                  		bsr.w	PalLoad1
00004148 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
0000414E 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004154 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004158 7000                       		moveq	#0,d0
0000415A 323C 0007                  		move.w	#7,d1
0000415E                            
0000415E                            	Tit_ClrObj2:
0000415E 22C0                       		move.l	d0,(a1)+
00004160 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004164                            
00004164 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
0000416A 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004170 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004174                            
00004174 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004178 6A00                       			bpl.s   @isjap		; if yes, branch
0000417A                            
0000417A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004180 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00004186                            	@isjap:
00004186 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
0000418C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00004192 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004198 6100 0000                  		bsr.w	DeformLayers
0000419C 4EB9 0000 0000             		jsr	(BuildSprites).l
000041A2 7000                       		moveq	#plcid_Main,d0
000041A4 6100 D576                  		bsr.w	NewPLC
000041A8 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041AE 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041B4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041B8 0000 0040                  		ori.b	#$40,d0
000041BC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041C2 6100 DF18                  		bsr.w	PaletteFadeIn
000041C6                            
000041C6                            Tit_MainLoop:
000041C6 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041CC 6100 F832                  		bsr.w	WaitForVBla
000041D0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041D6 6100 0000                  		bsr.w	DeformLayers
000041DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000041E0 6100 DB0C                  		bsr.w	PCycle_Title
000041E4 6100 D570                  		bsr.w	RunPLC
000041E8 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041EC 5440                       		addq.w	#2,d0
000041EE 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
000041F2 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
000041F6 6500                       		blo.s	Tit_ChkRegion	; if not, branch
000041F8                            
000041F8 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000041FE 4E75                       		rts	
00004200                            ; ===========================================================================
00004200                            
00004200                            Tit_ChkRegion:
00004200 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004204 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004206                            
00004206 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000420C 6000                       		bra.s	Tit_EnterCheat
0000420E                            
0000420E                            	Tit_RegionJap:
0000420E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004214                            
00004214                            Tit_EnterCheat:
00004214 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004218 D0C0                       		adda.w	d0,a0
0000421A 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000421E 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004222 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004224 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004226 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000422A 4A00                       		tst.b	d0
0000422C 6600                       		bne.s	Tit_CountC
0000422E 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004232 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004236 E249                       		lsr.w	#1,d1
00004238 0241 0003                  		andi.w	#3,d1
0000423C 6700                       		beq.s	Tit_PlayRing
0000423E 4A38 FFF8                  		tst.b	(v_megadrive).w
00004242 6A00                       		bpl.s	Tit_PlayRing
00004244 7201                       		moveq	#1,d1
00004246 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
0000424A                            
0000424A                            	Tit_PlayRing:
0000424A 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004258 6000                       		bra.s	Tit_CountC
0000425A                            ; ===========================================================================
0000425A                            
0000425A                            Tit_ResetCheat:
0000425A 4A00                       		tst.b	d0
0000425C 6700                       		beq.s	Tit_CountC
0000425E 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004264 6700                       		beq.s	Tit_CountC
00004266 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000426C                            
0000426C                            Tit_CountC:
0000426C 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004270 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004274 6700                       		beq.s	loc_3230	; if not, branch
00004276 4EF9 0000 0000             		jmp		MenuScreen ; increment C counter
0000427C                            
0000427C                            loc_3230:
0000427C 4A78 F614                  		tst.w	(v_demolength).w
00004280 6700 0000                  		beq.w	GotoDemo
00004284 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000428A 6700 FF3A                  		beq.w	Tit_MainLoop	; if not, branch
0000428E                            
0000428E                            Tit_ChkLevSel:
0000428E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004292 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004296 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
0000429C 6700 0000                  		beq.w	PlayLevel	; if not, play level
000042A0                            
000042A0 7002                       		moveq	#palid_LevelSel,d0
000042A2 6100 E1C4                  		bsr.w	PalLoad2	; load level select palette
000042A6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042AA 7000                       		moveq	#0,d0
000042AC 323C 00DF                  		move.w	#$DF,d1
000042B0                            
000042B0                            	Tit_ClrScroll1:
000042B0 22C0                       		move.l	d0,(a1)+
000042B2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042B6                            
000042B6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042BA 46FC 2700                  		disable_ints
000042BE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042CE 323C 03FF                  		move.w	#$3FF,d1
000042D2                            
000042D2                            	Tit_ClrScroll2:
000042D2 2C80                       		move.l	d0,(a6)
000042D4 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
000042D8                            
000042D8 6100 0000                  		bsr.w	LevSelTextLoad
000042DC                            
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            ; Level	Select
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            
000042DC                            LevelSelect:
000042DC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042E2 6100 F71C                  		bsr.w	WaitForVBla
000042E6 6100 0000                  		bsr.w	LevSelControls
000042EA 6100 D46A                  		bsr.w	RunPLC
000042EE 4AB8 F680                  		tst.l	(v_plc_buffer).w
000042F2 66E8                       		bne.s	LevelSelect
000042F4 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000042FA 67E0                       		beq.s	LevelSelect	; if not, branch
000042FC 3038 FF82                  		move.w	(v_levselitem).w,d0
00004300 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004304 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004306 3038 FF84                  		move.w	(v_levselsound).w,d0
0000430A 0640 0080                  		addi.w	#$80,d0
0000430E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004312 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004314 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004318 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000431A                            
0000431A                            LevSel_PlaySnd:
0000431A 6100 CF34                  		bsr.w	PlaySound_Special
0000431E 60BC                       		bra.s	LevelSelect
00004320                            ; ===========================================================================
00004320                            
00004320                            LevSel_Ending:
00004320 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004326 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000432C 4E75                       		rts	
0000432E                            ; ===========================================================================
0000432E                            
0000432E                            LevSel_Credits:
0000432E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000433C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004342 4E75                       		rts	
00004344                            ; ===========================================================================
00004344                            
00004344                            LevSel_Level_SS:
00004344 D040                       		add.w	d0,d0
00004346 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000434A 6B00 FF90                  		bmi.w	LevelSelect
0000434E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004352 6600                       		bne.s	LevSel_Level	; if not, branch
00004354 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000435A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000435E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004364 7000                       		moveq	#0,d0
00004366 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000436A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000436E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004372 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000437A 4E75                       		rts	
0000437C                            ; ===========================================================================
0000437C                            
0000437C                            LevSel_Level:
0000437C 0240 3FFF                  		andi.w	#$3FFF,d0
00004380 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004384                            
00004384                            PlayLevel:
00004384 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000438A 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004390 7000                       		moveq	#0,d0
00004392 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004396 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439A 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000439E 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043A2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043A6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043AA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043AE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043B4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043C4 4E75                       		rts	
000043C6                            ; ===========================================================================
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            ; Level	select - level pointers
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            		; correct level order
000043C6 0000                       		dc.b id_GHZ, 0
000043C8 0001                       		dc.b id_GHZ, 1
000043CA 0002                       		dc.b id_GHZ, 2
000043CC 0200                       		dc.b id_MZ, 0
000043CE 0201                       		dc.b id_MZ, 1
000043D0 0202                       		dc.b id_MZ, 2
000043D2 0400                       		dc.b id_SYZ, 0
000043D4 0401                       		dc.b id_SYZ, 1
000043D6 0402                       		dc.b id_SYZ, 2
000043D8 0100                       		dc.b id_LZ, 0
000043DA 0101                       		dc.b id_LZ, 1
000043DC 0102                       		dc.b id_LZ, 2
000043DE 0300                       		dc.b id_SLZ, 0
000043E0 0301                       		dc.b id_SLZ, 1
000043E2 0302                       		dc.b id_SLZ, 2
000043E4 0500                       		dc.b id_SBZ, 0
000043E6 0501                       		dc.b id_SBZ, 1
000043E8 0103                       		dc.b id_LZ, 3
000043EA 0502                       		dc.b id_SBZ, 2
000043EC 0700                       		dc.b id_SS, 0		; Special Stage
000043EE 8000                       		dc.w $8000		; Sound Test
000043F0                            		even
000043F0                            ; ---------------------------------------------------------------------------
000043F0                            ; Level	select codes
000043F0                            ; ---------------------------------------------------------------------------
000043F0 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000043F8                            		even
000043F8                            
000043F8 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000043FE                            		even
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            ; Demo mode
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            
000043FE                            GotoDemo:
000043FE 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004404                            
00004404                            loc_33B6:
00004404 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000440A 6100 F5F4                  		bsr.w	WaitForVBla
0000440E 6100 0000                  		bsr.w	DeformLayers
00004412 6100 D8BA                  		bsr.w	PaletteCycle
00004416 6100 D33E                  		bsr.w	RunPLC
0000441A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000441E 5440                       		addq.w	#2,d0
00004420 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004424 0C40 1C00                  		cmpi.w	#$1C00,d0
00004428 6500                       		blo.s	loc_33E4
0000442A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004430 4E75                       		rts	
00004432                            ; ===========================================================================
00004432                            
00004432                            loc_33E4:
00004432 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004438 6600 FE54                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000443C 4A78 F614                  		tst.w	(v_demolength).w
00004440 6600 FFC2                  		bne.w	loc_33B6
0000444C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004450 0240 0007                  		andi.w	#7,d0
00004454 D040                       		add.w	d0,d0
00004456 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000445A 31C0 FE10                  		move.w	d0,(v_zone).w
0000445E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004462 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004468 6500                       		blo.s	loc_3422	; if yes, branch
0000446A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004470                            
00004470                            loc_3422:
00004470 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004476 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
0000447C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004480 6600                       		bne.s	Demo_Level	; if not, branch
00004482 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004488 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
0000448C 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004490                            
00004490                            Demo_Level:
00004490 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004496 7000                       		moveq	#0,d0
00004498 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000449C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044A0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044A4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044AC 4E75                       		rts	
000044AE                            ; ===========================================================================
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            ; Levels used in demos
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044B6                            		even
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Subroutine to	change what you're selecting in the level select
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            LevSelControls:
000044B6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044BA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044BE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044C0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044C4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044C6                            
000044C6                            LevSel_UpDown:
000044C6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044CC 1238 F604                  		move.b	(v_jpadhold1).w,d1
000044D0 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
000044D4 6700                       		beq.s	LevSel_SndTest	; if not, branch
000044D6 3038 FF82                  		move.w	(v_levselitem).w,d0
000044DA 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
000044DE 6700                       		beq.s	LevSel_Down	; if not, branch
000044E0 5340                       		subq.w	#1,d0		; move up 1 selection
000044E2 6400                       		bhs.s	LevSel_Down
000044E4 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
000044E6                            
000044E6                            LevSel_Down:
000044E6 0801 0001                  		btst	#bitDn,d1	; is down pressed?
000044EA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000044EC 5240                       		addq.w	#1,d0		; move down 1 selection
000044EE 0C40 0015                  		cmpi.w	#$15,d0
000044F2 6500                       		blo.s	LevSel_Refresh
000044F4 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000044F6                            
000044F6                            LevSel_Refresh:
000044F6 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000044FA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000044FE 4E75                       		rts	
00004500                            ; ===========================================================================
00004500                            
00004500                            LevSel_SndTest:
00004500 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004506 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004508 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000450C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004510 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004512 3038 FF84                  		move.w	(v_levselsound).w,d0
00004516 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000451A 6700                       		beq.s	LevSel_Right	; if not, branch
0000451C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000451E 6400                       		bhs.s	LevSel_Right
00004520 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004522                            
00004522                            LevSel_Right:
00004522 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004526 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004528 5240                       		addq.w	#1,d0		; add 1	to sound test
0000452A 0C40 0050                  		cmpi.w	#$50,d0
0000452E 6500                       		blo.s	LevSel_Refresh2
00004530 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004532                            
00004532                            LevSel_Refresh2:
00004532 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004536 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000453A                            
0000453A                            LevSel_NoMove:
0000453A 4E75                       		rts	
0000453C                            ; End of function LevSelControls
0000453C                            
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            ; Subroutine to load level select text
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            
0000453C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000453C                            
0000453C                            
0000453C                            LevSelTextLoad:
0000453C                            
0000453C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000453C                            					; $E210 is a VRAM address
0000453C                            
0000453C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004542 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004548 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000454E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004552 7214                       		moveq	#$14,d1		; number of lines of text
00004554                            
00004554                            	LevSel_DrawAll:
00004554 2D44 0004                  		move.l	d4,4(a6)
00004558 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000455C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004562 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004566                            
00004566 7000                       		moveq	#0,d0
00004568 3038 FF82                  		move.w	(v_levselitem).w,d0
0000456C 3200                       		move.w	d0,d1
0000456E 283C 6210 0003             		move.l	#textpos,d4
00004574 EF48                       		lsl.w	#7,d0
00004576 4840                       		swap	d0
00004578 D880                       		add.l	d0,d4
0000457A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004580 E749                       		lsl.w	#3,d1
00004582 3001                       		move.w	d1,d0
00004584 D241                       		add.w	d1,d1
00004586 D240                       		add.w	d0,d1
00004588 D2C1                       		adda.w	d1,a1
0000458A 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
0000458E 2D44 0004                  		move.l	d4,4(a6)
00004592 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004596 363C E680                  		move.w	#$E680,d3
0000459A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045A0 6600                       		bne.s	LevSel_DrawSnd
000045A2 363C C680                  		move.w	#$C680,d3
000045A6                            
000045A6                            LevSel_DrawSnd:
000045B0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045B4 0640 0080                  		addi.w	#$80,d0
000045B8 1400                       		move.b	d0,d2
000045BA E808                       		lsr.b	#4,d0
000045BC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045C0 1002                       		move.b	d2,d0
000045C2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045C6 4E75                       		rts	
000045C8                            ; End of function LevSelTextLoad
000045C8                            
000045C8                            
000045C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C8                            
000045C8                            
000045C8                            LevSel_ChgSnd:
000045C8 0240 000F                  		andi.w	#$F,d0
000045CC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
000045D0 6500                       		blo.s	LevSel_Numb	; if not, branch
000045D2 5E00                       		addi.b	#7,d0		; use alpha characters
000045D4                            
000045D4                            	LevSel_Numb:
000045D4 D043                       		add.w	d3,d0
000045D6 3C80                       		move.w	d0,(a6)
000045D8 4E75                       		rts	
000045DA                            ; End of function LevSel_ChgSnd
000045DA                            
000045DA                            
000045DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045DA                            
000045DA                            
000045DA                            LevSel_ChgLine:
000045DA 7417                       		moveq	#$17,d2		; number of characters per line
000045DC                            
000045DC                            	LevSel_LineLoop:
000045DC 7000                       		moveq	#0,d0
000045DE 1019                       		move.b	(a1)+,d0	; get character
000045E0 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
000045E2 3CBC 0000                  		move.w	#0,(a6)		; use blank character
000045E6 51CA FFF4                  		dbf	d2,LevSel_LineLoop
000045EA 4E75                       		rts	
000045EC                            
000045EC                            
000045EC                            	LevSel_CharOk:
000045EC D043                       		add.w	d3,d0		; combine char with VRAM setting
000045EE 3C80                       		move.w	d0,(a6)		; send to VRAM
000045F0 51CA FFEA                  		dbf	d2,LevSel_LineLoop
000045F4 4E75                       		rts	
000045F6                            ; End of function LevSel_ChgLine
000045F6                            
000045F6                            ; ===========================================================================
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            ; Level	select menu text
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            		incbin	"misc\Level Select Text (JP1).bin"
000047EE                            		even
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            ; Music	playlist
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            MusicList:
000047EE 00                         		dc.b bgm_GHZ    ; GHZ1
000047EF 00                                 	dc.b bgm_LZ    ; GHZ2
000047F0 00                                 	dc.b bgm_LZ   ; GHZ3
000047F1 00                                 	dc.b bgm_LZ    ; GHZ4
000047F2 00                                 	dc.b bgm_Stop    ; LZ1
000047F3 00                                 	dc.b bgm_Stop   ; LZ2
000047F4 00                                 	dc.b bgm_Stop    ; LZ3
000047F5 00                                 	dc.b bgm_SBZ3    ; LZ4
000047F6 00                                 	dc.b bgm_MZ    ; MZ1
000047F7 00                                 	dc.b bgm_SBZ    ; MZ2
000047F8 00                                 	dc.b bgm_SBZ    ; MZ3
000047F9 00                                 	dc.b bgm_SBZ    ; MZ4
000047FA 00                                 	dc.b bgm_LZ    ; SLZ1
000047FB 00                                 	dc.b bgm_LZ    ; SLZ2
000047FC 00                                 	dc.b bgm_LZ    ; SLZ3
000047FD 00                                 	dc.b bgm_LZ    ; SLZ4
000047FE 00                                 	dc.b bgm_SYZ    ; SYZ1
000047FF 00                                 	dc.b bgm_SLZ    ; SYZ2
00004800 00                                 	dc.b bgm_SLZ    ; SYZ3
00004801 00                                 	dc.b bgm_SLZ    ; SYZ4
00004802 00                                 	dc.b bgm_SBZ    ; SBZ1
00004803 00                                 	dc.b bgm_SBZ    ; SBZ2
00004804 00                                 	dc.b bgm_FZ		; SBZ3
00004805 00                                 	dc.b bgm_SBZ    ; SBZ4
00004806 00                                 	dc.b bgm_GHZ    ; GHZ1
00004807 00                                 	dc.b bgm_GHZ    ; GHZ1
00004808 00                                 	dc.b bgm_GHZ    ; GHZ1
00004809 00                                 	dc.b bgm_GHZ    ; GHZ1
0000480A                                    	even
0000480A                            ; ===========================================================================
0000480A                            
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            ; Level
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            
0000480A                            GM_Level:
0000480A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004810 4A78 FFF0                  		tst.w	(f_demo).w
00004814 6B00                       		bmi.s	Level_NoMusicFade
0000481E                            
0000481E                            	Level_NoMusicFade:
0000481E 6100 CF28                  		bsr.w	ClearPLC
00004822 6100 D95E                  		bsr.w	PaletteFadeOut
00004826 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000482A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000482C 46FC 2700                  		disable_ints
0000483A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004840 6100 CABC                  		bsr.w	NemDec
00004844 46FC 2300                  		enable_ints
00004848 7000                       		moveq	#0,d0
0000484A 1038 FE10                  		move.b	(v_zone).w,d0
0000484E E948                       		lsl.w	#4,d0
00004850 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004856 45F2 0000                  		lea	(a2,d0.w),a2
0000485A 7000                       		moveq	#0,d0
0000485C 1012                       		move.b	(a2),d0
0000485E 6700                       		beq.s	loc_37FC
00004860 6100 CE88                  		bsr.w	AddPLC		; load level patterns
00004864                            
00004864                            loc_37FC:
00004864 7000                       		moveq	#plcid_Main2,d0
00004866 6100 CE82                  		bsr.w	AddPLC		; load standard	patterns
0000486A                            
0000486A                            Level_ClrRam:
0000486A 43F8 D000                  		lea	(v_objspace).w,a1
0000486E 7000                       		moveq	#0,d0
00004870 323C 07FF                  		move.w	#$7FF,d1
00004874                            
00004874                            	Level_ClrObjRam:
00004874 22C0                       		move.l	d0,(a1)+
00004876 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000487A                            
0000487A 43F8 F628                  		lea	($FFFFF628).w,a1
0000487E 7000                       		moveq	#0,d0
00004880 323C 0015                  		move.w	#$15,d1
00004884                            
00004884                            	Level_ClrVars1:
00004884 22C0                       		move.l	d0,(a1)+
00004886 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
0000488A                            
0000488A 43F8 F700                  		lea	(v_screenposx).w,a1
0000488E 7000                       		moveq	#0,d0
00004890 323C 003F                  		move.w	#$3F,d1
00004894                            
00004894                            	Level_ClrVars2:
00004894 22C0                       		move.l	d0,(a1)+
00004896 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000489A                            
0000489A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 0047                  		move.w	#$47,d1
000048A4                            
000048A4                            	Level_ClrVars3:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048AA                            
000048AA 46FC 2700                  		disable_ints
000048AE 6100 C8D0                  		bsr.w	ClearScreen
000048B2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048B8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048C4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048C8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048CC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000048D0 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000048D4 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000048DA 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000048DE 31FC C800 C8FC             		ResetDMAQueue	
000048E4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000048EA 6600                       		bne.s	Level_LoadPal	; if not, branch
000048EC                            
000048EC 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
000048F0 7000                       		moveq	#0,d0
000048F2 1038 FE11                  		move.b	(v_act).w,d0
000048F6 D040                       		add.w	d0,d0
000048F8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000048FE 3031 0000                  		move.w	(a1,d0.w),d0
00004902 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004906 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000490A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000490E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004912 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004916 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000491C                            
0000491C                            Level_LoadPal:
0000491C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004922 46FC 2300                  		move	#$2300,sr
00004926 4EB9 0000 0000             		jsr		LoadPlayerPal
0000492C 6100 DB3A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004930 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004936 6600                       		bne.s	Level_GetBgm	; if not, branch
00004938 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000493E 6100 DB68                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004942 4A38 FE30                  		tst.b	($FFFFFE30).w
00004946 6700                       		beq.s	Level_GetBgm
00004948 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000494E                            
0000494E                            	Level_GetBgm:
0000494E 4A78 FFF0                  		tst.w	(f_demo).w
00004952 6B00                               	bmi.s	Level_SkipTtlCard
00004954 7000                               	moveq	#0,d0
00004956 3038 FE10                  		move.w	(v_zone).w,d0
0000495A E418                       		ror.b	#2,d0
0000495C EC48                       		lsr.w   #6,d0
0000495E 43F9 0000 47EE                     	lea	(MusicList).l,a1 ; load    music playlist
00004964 1031 0000                          	move.b	(a1,d0.w),d0
00004968 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000496C 6100 C8DC                          	bsr.w	PlaySound    ; play music
00004970 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004976                            
00004976                            
00004976                            Level_TtlCardLoop:
00004976 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
0000497C 6100 F082                  		bsr.w	WaitForVBla
00004980 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004986 4EB9 0000 0000             		jsr	(BuildSprites).l
0000498C 6100 CDC8                  		bsr.w	RunPLC
00004990 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004994 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004998 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
0000499A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
0000499E 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049A0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049A6                            
000049A6                            	Level_SkipTtlCard:
000049A6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049AC 6100 DA7E                  		bsr.w	PalLoad1	; load Sonic's palette
000049B0 6100 0000                  		bsr.w	LevelSizeLoad
000049B4 6100 0000                  		bsr.w	DeformLayers
000049B8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049BE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049C2 6100 0000                  		bsr.w	LoadTilesFromStart
000049C6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049CC 6100 0000                  		bsr.w	ColIndexLoad
000049D0 6100 0000                  		bsr.w	LZWaterFeatures
000049D4 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000049DA 4A78 FFF0                  		tst.w	(f_demo).w
000049DE 6B00                       		bmi.s	Level_ChkDebug
000049E0 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000049E6                            
000049E6                            Level_ChkDebug:
000049E6 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000049EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000049EC 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
000049F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000049F4 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000049FA                            
000049FA                            Level_ChkWater:
000049FA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A00 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A06 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A0C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A0E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A14 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A1A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A20 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A26                            
00004A26                            Level_LoadObj:
00004A26 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A2C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A32 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A38 7000                       		moveq	#0,d0
00004A3A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A3E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A40 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A44 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A48 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A4C                            
00004A4C                            	Level_SkipClr:
00004A4C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A50 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A54 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A58 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A5C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A60 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A64 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A68 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A6C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004A70 31C0 FE02                  		move.w	d0,(f_restart).w
00004A74 31C0 FE04                  		move.w	d0,(v_framecount).w
00004A78 6100 0000                  		bsr.w	OscillateNumInit
00004A7C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004A82 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004A88 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004A8E 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004A94 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004A9A 7000                       		moveq	#0,d0
00004A9C 1038 FE10                  		move.b	(v_zone).w,d0
00004AA0 E548                       		lsl.w	#2,d0
00004AA2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004AAA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004AAC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AB2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AB6 5340                       		subq.w	#1,d0
00004AB8 E548                       		lsl.w	#2,d0
00004ABA 2271 0000                  		movea.l	(a1,d0.w),a1
00004ABE                            
00004ABE                            Level_Demo:
00004ABE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AC4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AC8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004ACE 4A78 FFF0                  		tst.w	(f_demo).w
00004AD2 6A00                       		bpl.s	Level_ChkWaterPal
00004AD4 31FC 021C F614             		move.w	#540,(v_demolength).w
00004ADA 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004AE0 6600                       		bne.s	Level_ChkWaterPal
00004AE2 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004AE8                            
00004AE8                            Level_ChkWaterPal:
00004AE8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004AEE 6600                       		bne.s	Level_Delay	; if not, branch
00004AF0 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004AF2 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004AF8 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004AFA 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004AFC                            
00004AFC                            	Level_WtrNotSbz:
00004AFC 6100 D9E6                  		bsr.w	PalLoad4_Water
00004B00                            
00004B00                            Level_Delay:
00004B00 323C 0003                  		move.w	#3,d1
00004B04                            
00004B04                            	Level_DelayLoop:
00004B04 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B0A 6100 EEF4                  		bsr.w	WaitForVBla
00004B0E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B12                            
00004B12 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B18 6100 D5C8                  		bsr.w	PalFadeIn_Alt
00004B1C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B20 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B22 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B26 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B2A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B2E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B32 6000                       		bra.s	Level_StartGame
00004B34                            ; ===========================================================================
00004B34                            
00004B34                            Level_ClrCardArt:
00004B34 7000                       		moveq	#plcid_Explode,d0
00004B36 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion gfx
00004B3C 7000                       		moveq	#0,d0
00004B3E 1038 FE10                  		move.b	(v_zone).w,d0
00004B42 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B46 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B4C                            
00004B4C                            Level_StartGame:
00004B4C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B52                            
00004B52                            ; ---------------------------------------------------------------------------
00004B52                            ; Main level loop (when	all title card and loading sequences are finished)
00004B52                            ; ---------------------------------------------------------------------------
00004B52                            
00004B52                            Level_MainLoop:
00004B52 6100 C708                  		bsr.w	PauseGame
00004B56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B5C 6100 EEA2                  		bsr.w	WaitForVBla
00004B60 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B64 6100 0000                  		bsr.w	MoveSonicInDemo
00004B68 6100 0000                  		bsr.w	LZWaterFeatures
00004B6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B72 4A78 FE02                  			tst.w   (f_restart).w
00004B76 6600 FC92                  			bne     GM_Level
00004B7A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004B7E 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004B80 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004B86 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004B88                            
00004B88                            	Level_DoScroll:
00004B88 6100 0000                  		bsr.w	DeformLayers
00004B8C                            
00004B8C                            	Level_SkipScroll:
00004B8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B92 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B98 6100 D134                  		bsr.w	PaletteCycle
00004B9C 6100 CBB8                  		bsr.w	RunPLC
00004BA0 6100 0000                  		bsr.w	OscillateNumDo
00004BA4 6100 0000                  		bsr.w	SynchroAnimate
00004BA8 6100 0000                  		bsr.w	SignpostArtLoad
00004BAC                            
00004BAC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BB2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BB4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BBA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BBE 4E75                       		rts	
00004BC0                            ; ===========================================================================
00004BC0                            
00004BC0                            Level_ChkDemo:
00004BC0 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BC4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BC6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BCA 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BCC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BD2 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004BD6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BDC 4E75                       		rts	
00004BDE                            ; ===========================================================================
00004BDE                            
00004BDE                            Level_EndDemo:
00004BDE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE4 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004BE6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BEC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004BF0 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004BF2 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004BF8                            
00004BF8                            Level_FadeDemo:
00004BF8 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004BFE 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C04 4278 F794                  		clr.w	(v_palchgspeed).w
00004C08                            
00004C08                            	Level_FDLoop:
00004C08 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C0E 6100 EDF0                  		bsr.w	WaitForVBla
00004C12 6100 0000                  		bsr.w	MoveSonicInDemo
00004C16 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C1C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C22 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C28 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C2C 6A00                       		bpl.s	loc_3BC8
00004C2E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C34 6100 D56C                  		bsr.w	FadeOut_ToBlack
00004C38                            
00004C38                            loc_3BC8:
00004C38 4A78 F614                  		tst.w	(v_demolength).w
00004C3C 66CA                       		bne.s	Level_FDLoop
00004C3E 4E75                       		rts	
00004C40                            ; ===========================================================================
00004C40                            
00004C40                            		include	"_inc\LZWaterFeatures.asm"
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            
00004C40                            LZWaterFeatures:
00004C40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C46 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C48 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C4C 6600                       			bne.s	@setheight
00004C4E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C54 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C56                            
00004C56 6100 0000                  		bsr.w	LZWindTunnels
00004C5A 6100 0000                  		bsr.w	LZWaterSlides
00004C5E 6100 0000                  		bsr.w	LZDynamicWater
00004C62                            
00004C62                            @setheight:
00004C62 4238 F64E                  		clr.b	(f_wtr_state).w
00004C66 7000                       		moveq	#0,d0
00004C68 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C6C E248                       		lsr.w	#1,d0
00004C6E D078 F648                  		add.w	(v_waterpos2).w,d0
00004C72 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004C76 3038 F646                  		move.w	(v_waterpos1).w,d0
00004C7A 9078 F704                  		sub.w	(v_screenposy).w,d0
00004C7E 6400                       		bcc.s	@isbelow
00004C80 4A40                       		tst.w	d0
00004C82 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004C84                            
00004C84 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004C8A 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004C90                            
00004C90                            	@isbelow:
00004C90 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004C94 6500                       		bcs.s	@isvisible	; if yes, branch
00004C96 303C 00DF                  		move.w	#223,d0
00004C9A                            
00004C9A                            	@isvisible:
00004C9A 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004C9E                            
00004C9E                            @notlabyrinth:
00004C9E 4E75                       		rts	
00004CA0                            ; ===========================================================================
00004CA0                            ; ---------------------------------------------------------------------------
00004CA0                            ; Initial water heights
00004CA0                            ; ---------------------------------------------------------------------------
00004CA0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CA2 0328                       		dc.w $328	; Labyrinth 2
00004CA4 0900                       		dc.w $900	; Labyrinth 3
00004CA6 0228                       		dc.w $228	; Scrap Brain 3
00004CA8                            		even
00004CA8                            ; ===========================================================================
00004CA8                            
00004CA8                            ; ---------------------------------------------------------------------------
00004CA8                            ; Labyrinth dynamic water routines
00004CA8                            ; ---------------------------------------------------------------------------
00004CA8                            
00004CA8                            LZDynamicWater:
00004CA8 7000                       		moveq	#0,d0
00004CAA 1038 FE11                  		move.b	(v_act).w,d0
00004CAE D040                       		add.w	d0,d0
00004CB0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CB4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CB8 7200                       		moveq	#0,d1
00004CBA 1238 F64C                  		move.b	(f_water).w,d1
00004CBE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CC2 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CC6 6700                       		beq.s	@exit		; if water level is correct, branch
00004CC8 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CCA 4441                       		neg.w	d1		; set water to move up instead
00004CCC                            
00004CCC                            	@movewater:
00004CCC D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004CD0                            
00004CD0                            	@exit:
00004CD0 4E75                       		rts	
00004CD2                            ; ===========================================================================
00004CD2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004CD4 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004CD6 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004CD8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004CDA                            ; ===========================================================================
00004CDA                            
00004CDA                            DynWater_LZ1:
00004CDA 4E75                       		rts	
00004CDC                            ; ===========================================================================
00004CDC                            
00004CDC                            DynWater_LZ2:
00004CDC 3038 F700                  		move.w	(v_screenposx).w,d0
00004CE0 323C 0328                  		move.w	#$328,d1
00004CE4 0C40 0500                  		cmpi.w	#$500,d0
00004CE8 6500                       		bcs.s	@setwater
00004CEA 323C 03C8                  		move.w	#$3C8,d1
00004CEE 0C40 0B00                  		cmpi.w	#$B00,d0
00004CF2 6500                       		bcs.s	@setwater
00004CF4 323C 0428                  		move.w	#$428,d1
00004CF8                            
00004CF8                            	@setwater:
00004CF8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004CFC 4E75                       		rts	
00004CFE                            ; ===========================================================================
00004CFE                            
00004CFE                            DynWater_LZ3:
00004CFE 3038 F700                  		move.w	(v_screenposx).w,d0
00004D02 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D06 6600                       		bne.s	@routine2
00004D08                            
00004D08 323C 0900                  		move.w	#$900,d1
00004D0C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D10 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D12 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D18 6500                       		bcs.s	@setwaterlz3
00004D1A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D20 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D22                            
00004D22 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D26 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D2C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D3A                            
00004D3A                            	@setwaterlz3:
00004D3A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D3E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D42 4E75                       		rts	
00004D44                            ; ===========================================================================
00004D44                            
00004D44                            @routine2:
00004D44 5302                       		subq.b	#1,d2
00004D46 6600                       		bne.s	@routine3
00004D48 323C 04C8                  		move.w	#$4C8,d1
00004D4C 0C40 0770                  		cmpi.w	#$770,d0
00004D50 6500                       		bcs.s	@setwater2
00004D52 323C 0308                  		move.w	#$308,d1
00004D56 0C40 1400                  		cmpi.w	#$1400,d0
00004D5A 6500                       		bcs.s	@setwater2
00004D5C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D62 6700                       		beq.s	@sonicislow
00004D64 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D6A 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D6C 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004D72 6400                       		bcc.s	@setwater2
00004D74                            
00004D74                            @sonicislow:
00004D74 323C 0508                  		move.w	#$508,d1
00004D78 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004D7C 0C40 1770                  		cmpi.w	#$1770,d0
00004D80 6500                       		bcs.s	@setwater2
00004D82 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004D88                            
00004D88                            	@setwater2:
00004D88 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D8C 4E75                       		rts	
00004D8E                            ; ===========================================================================
00004D8E                            
00004D8E                            @routine3:
00004D8E 5302                       		subq.b	#1,d2
00004D90 6600                       		bne.s	@routine4
00004D92 323C 0508                  		move.w	#$508,d1
00004D96 0C40 1860                  		cmpi.w	#$1860,d0
00004D9A 6500                       		bcs.s	@setwater3
00004D9C 323C 0188                  		move.w	#$188,d1
00004DA0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DA4 6400                       		bcc.s	@loc_3DC6
00004DA6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DAA 6600                       		bne.s	@setwater3
00004DAC                            
00004DAC                            	@loc_3DC6:
00004DAC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DB2                            
00004DB2                            	@setwater3:
00004DB2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DB6 4E75                       		rts	
00004DB8                            ; ===========================================================================
00004DB8                            
00004DB8                            @routine4:
00004DB8 5302                       		subq.b	#1,d2
00004DBA 6600                       		bne.s	@routine5
00004DBC 323C 0188                  		move.w	#$188,d1
00004DC0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DC4 6500                       		bcs.s	@setwater4
00004DC6 323C 0900                  		move.w	#$900,d1
00004DCA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DCE 6500                       		bcs.s	@setwater4
00004DD0 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004DD6 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004DDC 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004DE2 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004DE8 4E75                       		rts	
00004DEA                            ; ===========================================================================
00004DEA                            
00004DEA                            @setwater4:
00004DEA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DEE 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DF2 4E75                       		rts	
00004DF4                            ; ===========================================================================
00004DF4                            
00004DF4                            @routine5:
00004DF4 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004DF8 6500                       		bcs.s	@dontset	; if not, branch
00004DFA 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E00                            
00004E00                            	@dontset:
00004E00 4E75                       		rts	
00004E02                            ; ===========================================================================
00004E02                            
00004E02                            DynWater_SBZ3:
00004E02 323C 0228                  		move.w	#$228,d1
00004E06 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E0C 6500                       		bcs.s	@setwater
00004E0E 323C 04C8                  		move.w	#$4C8,d1
00004E12                            
00004E12                            	@setwater:
00004E12 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E16 4E75                       		rts
00004E18                            
00004E18                            ; ---------------------------------------------------------------------------
00004E18                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E18                            ; ---------------------------------------------------------------------------
00004E18                            
00004E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E18                            
00004E18                            
00004E18                            LZWindTunnels:
00004E18 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E1C 6600 0000                  		bne.w	@quit	; if yes, branch
00004E20 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E26 7000                       		moveq	#0,d0
00004E28 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E2C E748                       		lsl.w	#3,d0		; multiply by 8
00004E2E D4C0                       		adda.w	d0,a2		; add to address for data
00004E30 7200                       		moveq	#0,d1
00004E32 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E36 6600                       		bne.s	@notact1	; if not, branch
00004E38 7201                       		moveq	#1,d1
00004E3A 514A                       		subq.w	#8,a2		; use different data for act 1
00004E3C                            
00004E3C                            	@notact1:
00004E3C 43F8 D000                  		lea	(v_player).w,a1
00004E40                            
00004E40                            @chksonic:
00004E40 3029 0008                  		move.w	obX(a1),d0
00004E44 B052                       		cmp.w	(a2),d0
00004E46 6500 0000                  		bcs.w	@chknext
00004E4A B06A 0004                  		cmp.w	4(a2),d0
00004E4E 6400 0000                  		bcc.w	@chknext
00004E52 3429 000C                  		move.w	obY(a1),d2
00004E56 B46A 0002                  		cmp.w	2(a2),d2
00004E5A 6500                       		bcs.s	@chknext
00004E5C B46A 0006                  		cmp.w	6(a2),d2
00004E60 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E62 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E66 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E6A 6600                       		bne.s	@skipsound	; if not, branch
00004E76                            
00004E76                            	@skipsound:
00004E76 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004E7A 6600 0000                  		bne.w	@quit	; if yes, branch
00004E7E 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004E84 6400                       		bcc.s	@clrquit	; if yes, branch
00004E86 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004E8C 0440 0080                  		subi.w	#$80,d0
00004E90 B052                       		cmp.w	(a2),d0
00004E92 6400                       		bcc.s	@movesonic
00004E94 7002                       		moveq	#2,d0
00004E96 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004E9C 6600                       		bne.s	@notact2	; if not, branch
00004E9E 4440                       		neg.w	d0
00004EA0                            
00004EA0                            	@notact2:
00004EA0 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004EA4                            
00004EA4                            @movesonic:
00004EA4 5869 0008                  		addq.w	#4,obX(a1)
00004EA8 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EAE 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EB4 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EBA 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EC0 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EC6 6700                       		beq.s	@down		; if not, branch
00004EC8 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004ECC                            
00004ECC                            	@down:
00004ECC 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004ED2 6700                       		beq.s	@end		; if not, branch
00004ED4 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004ED8                            
00004ED8                            	@end:
00004ED8 4E75                       		rts	
00004EDA                            ; ===========================================================================
00004EDA                            
00004EDA                            @chknext:
00004EDA 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004EDC 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004EE0 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004EE4 6700                       		beq.s	@quit		; if yes, branch
00004EE6 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004EEC                            
00004EEC                            @clrquit:
00004EEC 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004EF0                            
00004EF0                            @quit:
00004EF0 4E75                       		rts	
00004EF2                            ; End of function LZWindTunnels
00004EF2                            
00004EF2                            ; ===========================================================================
00004EF2                            
00004EF2                            		;    left, top,  right, bottom boundaries
00004EF2 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004EFA 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F02 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F0A 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F12 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F1A                            		even
00004F1A                            
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            ; Labyrinth Zone water slide subroutine
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            
00004F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F1A                            
00004F1A                            
00004F1A                            LZWaterSlides:
00004F1A 43F8 D000                  		lea	(v_player).w,a1
00004F1E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F24 6600                       		bne.s	loc_3F6A	; if not, branch
00004F26 3029 000C                  		move.w	obY(a1),d0
00004F2A E248                       		lsr.w	#1,d0
00004F2C 0240 0380                  		andi.w	#$380,d0
00004F30 1229 0008                  		move.b	obX(a1),d1
00004F34 0241 007F                  		andi.w	#$7F,d1
00004F38 D041                       		add.w	d1,d0
00004F3A 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F3E 1032 0000                  		move.b	(a2,d0.w),d0
00004F42 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F46 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F48                            
00004F48                            loc_3F62:
00004F48 B022                       		cmp.b	-(a2),d0
00004F4A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F4E 6700                       		beq.s	LZSlide_Move
00004F50                            
00004F50                            loc_3F6A:
00004F50 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F54 6700                       		beq.s	locret_3F7A
00004F56 337C 0005 003E             		move.w	#5,$3E(a1)
00004F5C 4238 F7CA                  		clr.b	(f_jumponly).w
00004F60                            
00004F60                            locret_3F7A:
00004F60 4E75                       		rts	
00004F62                            ; ===========================================================================
00004F62                            
00004F62                            LZSlide_Move:
00004F62 0C41 0003                  		cmpi.w	#3,d1
00004F66 6400                       		bcc.s	loc_3F84
00004F68 4E71                       		nop	
00004F6A                            
00004F6A                            loc_3F84:
00004F6A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004F70 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004F74 1340 0020                  		move.b	d0,obInertia(a1)
00004F78 6A00                       		bpl.s	loc_3F9A
00004F7A 08E9 0000 0022             		bset	#0,obStatus(a1)
00004F80                            
00004F80                            loc_3F9A:
00004F80 4229 0021                  		clr.b	obInertia+1(a1)
00004F84 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004F8A 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004F90 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F94 0200 001F                  		andi.b	#$1F,d0
00004F98 6600                       		bne.s	locret_3FBE
00004FA4                            
00004FA4                            locret_3FBE:
00004FA4 4E75                       		rts	
00004FA6                            ; End of function LZWaterSlides
00004FA6                            
00004FA6                            ; ===========================================================================
00004FA6                            ; byte_3FC0:
00004FA6                            Slide_Speeds:
00004FA6 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FAE 00                         		even
00004FAE                            
00004FAE                            Slide_Chunks:
00004FAE 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FAF                            ; byte_3FCF
00004FAF                            Slide_Chunks_End
00004FB0 00                         		even
00004FB0 00                         		even
00004FB0                            		include	"_inc\MoveSonicInDemo.asm"
00004FB0                            ; ---------------------------------------------------------------------------
00004FB0                            ; Subroutine to	move Sonic in demo mode
00004FB0                            ; ---------------------------------------------------------------------------
00004FB0                            
00004FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FB0                            
00004FB0                            
00004FB0                            MoveSonicInDemo:
00004FB0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FB4 6600                       		bne.s	MDemo_On	; if yes, branch
00004FB6 4E75                       		rts	
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            ; This is an unused subroutine for recording a demo
00004FB8                            
00004FB8                            DemoRecorder:
00004FB8 43F9 0008 0000             		lea	($80000).l,a1
00004FBE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FC2 D2C0                       		adda.w	d0,a1
00004FC4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FC8 B011                       		cmp.b	(a1),d0
00004FCA 6600                       		bne.s	@next
00004FCC 5229 0001                  		addq.b	#1,1(a1)
00004FD0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004FD6 6700                       		beq.s	@next
00004FD8 4E75                       		rts	
00004FDA                            
00004FDA                            	@next:
00004FDA 1340 0002                  		move.b	d0,2(a1)
00004FDE 137C 0000 0003             		move.b	#0,3(a1)
00004FE4 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004FE8 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004FEE 4E75                       		rts	
00004FF0                            ; ===========================================================================
00004FF0                            
00004FF0                            MDemo_On:
00004FF0 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004FF4 6A00                       		bpl.s	@dontquit	; if not, branch
00004FF6 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004FFA 6B00                       		bmi.s	@dontquit	; if yes, branch
00004FFC 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005002                            
00005002                            	@dontquit:
00005002 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005008 7000                       		moveq	#0,d0
0000500A 1038 FE10                  		move.b	(v_zone).w,d0
0000500E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005014 6600                       		bne.s	@notspecial	; if not, branch
00005016 7006                       		moveq	#6,d0		; use demo #6
00005018                            
00005018                            	@notspecial:
00005018 E548                       		lsl.w	#2,d0
0000501A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000501E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005022 6A00                       		bpl.s	@notcredits	; if not, branch
00005024 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000502A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000502E 5340                       		subq.w	#1,d0
00005030 E548                       		lsl.w	#2,d0
00005032 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005036                            
00005036                            	@notcredits:
00005036 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000503A D2C0                       		adda.w	d0,a1
0000503C 1011                       		move.b	(a1),d0
0000503E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005042 1200                       		move.b	d0,d1
00005044 7400                       			moveq	#0,d2
00005046 B500                       		eor.b	d2,d0
00005048 10C1                       		move.b	d1,(a0)+
0000504A C001                       		and.b	d1,d0
0000504C 10C0                       		move.b	d0,(a0)+
0000504E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005052 6400                       		bcc.s	@end
00005054 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000505A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000505E                            
0000505E                            	@end:
0000505E 4E75                       		rts	
00005060                            ; End of function MoveSonicInDemo
00005060                            
00005060                            ; ===========================================================================
00005060                            ; ---------------------------------------------------------------------------
00005060                            ; Demo sequence	pointers
00005060                            ; ---------------------------------------------------------------------------
00005060 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005064 0000 0000                  		dc.l Demo_GHZ
00005068 0000 0000                  		dc.l Demo_MZ
0000506C 0000 0000                  		dc.l Demo_MZ
00005070 0000 0000                  		dc.l Demo_SYZ
00005074 0000 0000                  		dc.l Demo_SYZ
00005078 0000 0000                  		dc.l Demo_SS
0000507C 0000 0000                  		dc.l Demo_SS
00005080                            
00005080 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005084 0000 0000                  		dc.l Demo_EndMZ
00005088 0000 0000                  		dc.l Demo_EndSYZ
0000508C 0000 0000                  		dc.l Demo_EndLZ
00005090 0000 0000                  		dc.l Demo_EndSLZ
00005094 0000 0000                  		dc.l Demo_EndSBZ1
00005098 0000 0000                  		dc.l Demo_EndSBZ2
0000509C 0000 0000                  		dc.l Demo_EndGHZ2
000050A0                            
000050A0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050B0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050C0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000050D0                            		even
000050D0                            		even
000050D0                            
000050D0                            ; ---------------------------------------------------------------------------
000050D0                            ; Collision index pointer loading subroutine
000050D0                            ; ---------------------------------------------------------------------------
000050D0                            
000050D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050D0                            
000050D0                            
000050D0                            ColIndexLoad:
000050D0 7000                       		moveq	#0,d0
000050D2 1038 FE10                  		move.b	(v_zone).w,d0
000050D6 E548                       		lsl.w	#2,d0
000050D8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
000050DE 4E75                       		rts	
000050E0                            ; End of function ColIndexLoad
000050E0                            
000050E0                            ; ===========================================================================
000050E0                            ; ---------------------------------------------------------------------------
000050E0                            ; Collision index pointers
000050E0                            ; ---------------------------------------------------------------------------
000050E0 0000 0000                  ColPointers:	dc.l Col_GHZ
000050E4 0000 0000                  		dc.l Col_LZ
000050E8 0000 0000                  		dc.l Col_MZ
000050EC 0000 0000                  		dc.l Col_SLZ
000050F0 0000 0000                  		dc.l Col_SYZ
000050F4 0000 0000                  		dc.l Col_SBZ
000050F8                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
000050F8                            
000050F8                            		include	"_inc\Oscillatory Routines.asm"
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            ; Oscillating number subroutines
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            
000050F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050F8                            
000050F8                            ; Initialise the values
000050F8                            
000050F8                            OscillateNumInit:
000050F8 43F8 FE5E                  		lea	(v_oscillate).w,a1
000050FC 45F9 0000 0000             		lea	(@baselines).l,a2
00005102 7220                       		moveq	#$20,d1
00005104                            
00005104                            	@loop:
00005104 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005106 51C9 FFFC                  		dbf	d1,@loop
0000510A 4E75                       		rts	
0000510C                            
0000510C                            
0000510C                            ; ===========================================================================
0000510C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000510E 0080 0000                  		dc.w $80, 0
00005112 0080 0000                  		dc.w $80, 0
00005116 0080 0000                  		dc.w $80, 0
0000511A 0080 0000                  		dc.w $80, 0
0000511E 0080 0000                  		dc.w $80, 0
00005122 0080 0000                  		dc.w $80, 0
00005126 0080 0000                  		dc.w $80, 0
0000512A 0080 0000                  		dc.w $80, 0
0000512E 0080 0000                  		dc.w $80, 0
00005132 50F0 011E                  		dc.w $50F0, $11E
00005136 2080 00B4                  		dc.w $2080, $B4
0000513A 3080 010E                  		dc.w $3080, $10E
0000513E 5080 01C2                  		dc.w $5080, $1C2
00005142 7080 0276                  		dc.w $7080, $276
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E                            		even
0000514E                            
0000514E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000514E                            
0000514E                            ; Oscillate values
0000514E                            
0000514E                            OscillateNumDo:
0000514E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005154 6400                       		bcc.s	@end		; if yes, branch
00005156 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000515A 45F9 0000 0000             		lea	(@settings).l,a2
00005160 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005162 720F                       		moveq	#$F,d1
00005164                            
00005164                            @loop:
00005164 341A                       		move.w	(a2)+,d2	; get frequency
00005166 381A                       		move.w	(a2)+,d4	; get amplitude
00005168 0303                       		btst	d1,d3		; check oscillation direction
0000516A 6600                       		bne.s	@down		; branch if 1
0000516C                            
0000516C                            	@up:
0000516C 3029 0002                  		move.w	2(a1),d0	; get current rate
00005170 D042                       		add.w	d2,d0		; add frequency
00005172 3340 0002                  		move.w	d0,2(a1)
00005176 D151                       		add.w	d0,0(a1)	; add rate to value
00005178 B811                       		cmp.b	0(a1),d4
0000517A 6200                       		bhi.s	@next
0000517C 03C3                       		bset	d1,d3
0000517E 6000                       		bra.s	@next
00005180                            
00005180                            	@down:
00005180 3029 0002                  		move.w	2(a1),d0
00005184 9042                       		sub.w	d2,d0
00005186 3340 0002                  		move.w	d0,2(a1)
0000518A D151                       		add.w	d0,0(a1)
0000518C B811                       		cmp.b	0(a1),d4
0000518E 6300                       		bls.s	@next
00005190 0383                       		bclr	d1,d3
00005192                            
00005192                            	@next:
00005192 5849                       		addq.w	#4,a1
00005194 51C9 FFCE                  		dbf	d1,@loop
00005198 31C3 FE5E                  		move.w	d3,(v_oscillate).w
0000519C                            
0000519C                            @end:
0000519C 4E75                       		rts	
0000519E                            ; End of function OscillateNumDo
0000519E                            
0000519E                            ; ===========================================================================
0000519E 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051A2 0002 0018                  		dc.w 2,	$18
000051A6 0002 0020                  		dc.w 2,	$20
000051AA 0002 0030                  		dc.w 2,	$30
000051AE 0004 0020                  		dc.w 4,	$20
000051B2 0008 0008                  		dc.w 8,	8
000051B6 0008 0040                  		dc.w 8,	$40
000051BA 0004 0040                  		dc.w 4,	$40
000051BE 0002 0050                  		dc.w 2,	$50
000051C2 0002 0050                  		dc.w 2,	$50
000051C6 0002 0020                  		dc.w 2,	$20
000051CA 0003 0030                  		dc.w 3,	$30
000051CE 0005 0050                  		dc.w 5,	$50
000051D2 0007 0070                  		dc.w 7,	$70
000051D6 0002 0010                  		dc.w 2,	$10
000051DA 0002 0010                  		dc.w 2,	$10
000051DE                            		even
000051DE                            		even
000051DE                            
000051DE                            ; ---------------------------------------------------------------------------
000051DE                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
000051DE                            ; ---------------------------------------------------------------------------
000051DE                            
000051DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051DE                            
000051DE                            
000051DE                            SynchroAnimate:
000051DE                            
000051DE                            ; Used for GHZ spiked log
000051DE                            Sync1:
000051DE 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
000051E2 6A00                       		bpl.s	Sync2		; if not, branch
000051E4 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
000051EA 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
000051EE 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
000051F4                            
000051F4                            ; Used for rings and giant rings
000051F4                            Sync2:
000051F4 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
000051F8 6A00                       		bpl.s	Sync3
000051FA 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005200 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005204 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000520A                            
0000520A                            ; Used for nothing
0000520A                            Sync3:
0000520A 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000520E 6A00                       		bpl.s	Sync4
00005210 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005216 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000521A 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005220 6500                       		blo.s	Sync4
00005222 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005228                            
00005228                            ; Used for bouncing rings
00005228                            Sync4:
00005228 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000522C 6700                       		beq.s	SyncEnd
0000522E 7000                       		moveq	#0,d0
00005230 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005234 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005238 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000523C EF58                       		rol.w	#7,d0
0000523E 0240 0003                  		andi.w	#3,d0
00005242 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005246 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0000524A                            
0000524A                            SyncEnd:
0000524A 4E75                       		rts	
0000524C                            ; End of function SynchroAnimate
0000524C                            
0000524C                            ; ---------------------------------------------------------------------------
0000524C                            ; End-of-act signpost pattern loading subroutine
0000524C                            ; ---------------------------------------------------------------------------
0000524C                            
0000524C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000524C                            
0000524C                            
0000524C                            SignpostArtLoad:
0000524C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005250 6600 0000                  		bne.w	@exit		; if yes, branch
00005254 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
0000525A 6700                       		beq.s	@exit		; if yes, branch
0000525C                            
0000525C 3038 F700                  		move.w	(v_screenposx).w,d0
00005260 3238 F72A                  		move.w	(v_limitright2).w,d1
00005264 0441 0100                  		subi.w	#$100,d1
00005268 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000526A 6D00                       		blt.s	@exit		; if not, branch
0000526C 4A38 FE1E                  		tst.b	(f_timecount).w
00005270 6700                       		beq.s	@exit
00005272 B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005276 6700                       		beq.s	@exit
00005278 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
0000527C 7000                       		moveq	#plcid_Signpost,d0
0000527E 6000 C49C                  		bra.w	NewPLC		; load signpost	patterns
00005282                            
00005282                            	@exit:
00005282 4E75                       		rts	
00005284                            ; End of function SignpostArtLoad
00005284                            
00005284                            ; ===========================================================================
00005284                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005304                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005434                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054B4                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055B4                            ; ===========================================================================
000055B4                            
000055B4                            ; ---------------------------------------------------------------------------
000055B4                            ; Special Stage
000055B4                            ; ---------------------------------------------------------------------------
000055B4                            
000055B4                            GM_Special:
000055BC 6100 CCEE                  		bsr.w	PaletteWhiteOut
000055C0 46FC 2700                  		disable_ints
000055C4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055CA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055CE 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000055D2 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
000055D8 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
000055DC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000055E0 0200 00BF                  		andi.b	#$BF,d0
000055E4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000055EA 6100 BB94                  		bsr.w	ClearScreen
000055EE 46FC 2300                  		enable_ints
000055F2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005614                            
00005614                            	SS_WaitForDMA:
00005614 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005616 0801 0001                  		btst	#1,d1		; is DMA running?
0000561A 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000561C 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005620 6100 0000                  		bsr.w	SS_BGLoad
00005624 7000                       		moveq	#plcid_SpecialStage,d0
00005626 6100 C22E                  		bsr.w	QuickPLC	; load special stage patterns
0000562A                            
0000562A 43F8 D000                  		lea	(v_objspace).w,a1
0000562E 7000                       		moveq	#0,d0
00005630 323C 07FF                  		move.w	#$7FF,d1
00005634                            	SS_ClrObjRam:
00005634 22C0                       		move.l	d0,(a1)+
00005636 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000563A                            
0000563A 43F8 F700                  		lea	(v_screenposx).w,a1
0000563E 7000                       		moveq	#0,d0
00005640 323C 003F                  		move.w	#$3F,d1
00005644                            	SS_ClrRam1:
00005644 22C0                       		move.l	d0,(a1)+
00005646 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
0000564A                            
0000564A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000564E 7000                       		moveq	#0,d0
00005650 323C 0027                  		move.w	#$27,d1
00005654                            	SS_ClrRam2:
00005654 22C0                       		move.l	d0,(a1)+
00005656 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000565A                            
0000565A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000565E 7000                       		moveq	#0,d0
00005660 323C 007F                  		move.w	#$7F,d1
00005664                            	SS_ClrNemRam:
00005664 22C0                       		move.l	d0,(a1)+
00005666 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000566A                            
0000566A 4238 F64E                  		clr.b	(f_wtr_state).w
0000566E 4278 FE02                  		clr.w	(f_restart).w
00005672 700A                       		moveq	#palid_Special,d0
00005674 6100 CDB6                  		bsr.w	PalLoad1	; load special stage palette
00005678 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
0000567E 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005686 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
0000568E 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005694 6100 0000                  		bsr.w	PalCycle_SS
00005698 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
0000569C 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056AA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056B0 43F9 0000 5060             		lea	(DemoDataPtr).l,a1
000056B6 7006                       		moveq	#6,d0
000056B8 E548                       		lsl.w	#2,d0
000056BA 2271 0000                  		movea.l	(a1,d0.w),a1
000056BE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056C4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056C8 4278 FE20                  		clr.w	(v_rings).w
000056CC 4238 FE1B                  		clr.b	(v_lifecount).w
000056D0 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
000056D6 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000056DC 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000056E0 6700                       		beq.s	SS_NoDebug	; if not, branch
000056E2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
000056E8 6700                       		beq.s	SS_NoDebug	; if not, branch
000056EA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000056F0                            
000056F0                            	SS_NoDebug:
000056F0 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000056F4 0000 0040                  		ori.b	#$40,d0
000056F8 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000056FE 6100 CB00                  		bsr.w	PaletteWhiteIn
00005702                            
00005702                            ; ---------------------------------------------------------------------------
00005702                            ; Main Special Stage loop
00005702                            ; ---------------------------------------------------------------------------
00005702                            
00005702                            SS_MainLoop:
00005702 6100 BB58                  		bsr.w	PauseGame
00005706 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000570C 6100 E2F2                  		bsr.w	WaitForVBla
00005710 6100 F89E                  		bsr.w	MoveSonicInDemo
00005714 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000571A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005720 4EB9 0000 0000             		jsr	(BuildSprites).l
00005726 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000572C 6100 0000                  		bsr.w	SS_BGAnimate
00005730 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005734 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005736 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
0000573A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000573E                            
0000573E                            	SS_ChkEnd:
0000573E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005744 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005748                            
00005748 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000574C 6600 0000                  		bne.w	SS_ToLevel
00005750 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005756 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000575C 6500                       		blo.s	SS_Finish	; if not, branch
0000575E 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005762                            
00005762                            SS_Finish:
00005762 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005768 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000576E 4278 F794                  		clr.w	(v_palchgspeed).w
00005772                            
00005772                            	SS_FinLoop:
00005772 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005778 6100 E286                  		bsr.w	WaitForVBla
0000577C 6100 F832                  		bsr.w	MoveSonicInDemo
00005780 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005786 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000578C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005792 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005798 6100 0000                  		bsr.w	SS_BGAnimate
0000579C 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057A0 6A00                       		bpl.s	loc_47D4
000057A2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057A8 6100 CB22                  		bsr.w	WhiteOut_ToWhite
000057AC                            
000057AC                            loc_47D4:
000057AC 4A78 F614                  		tst.w	(v_demolength).w
000057B0 66C0                       		bne.s	SS_FinLoop
000057B2                            
000057B2 46FC 2700                  		disable_ints
000057B6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057C4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057C8 6100 B9B6                  		bsr.w	ClearScreen
000057D6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000057DC 6100 BB20                  		bsr.w	NemDec
000057E0 4EB9 0000 0000             		jsr	(Hud_Base).l
000057E6 31FC C800 C8FC             		ResetDMAQueue	
000057EC 46FC 2300                  		enable_ints
000057F0 7011                       		moveq	#palid_SSResult,d0
000057F2 6100 CC74                  		bsr.w	PalLoad2	; load results screen palette
000057F6 7000                       		moveq	#plcid_Main,d0
000057F8 6100 BF22                  		bsr.w	NewPLC
000057FC 7000                       		moveq	#plcid_SSResult,d0
000057FE 6100 BEEA                  		bsr.w	AddPLC		; load results screen patterns
00005802 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005808 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000580E 3038 FE20                  		move.w	(v_rings).w,d0
00005812 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005816 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005824                            
00005824 43F8 D000                  		lea	(v_objspace).w,a1
00005828 7000                       		moveq	#0,d0
0000582A 323C 07FF                  		move.w	#$7FF,d1
0000582E                            	SS_EndClrObjRam:
0000582E 22C0                       		move.l	d0,(a1)+
00005830 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005834                            
00005834 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
0000583A                            
0000583A                            SS_NormalExit:
0000583A 6100 BA20                  		bsr.w	PauseGame
0000583E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005844 6100 E1BA                  		bsr.w	WaitForVBla
00005848 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000584E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005854 6100 BF00                  		bsr.w	RunPLC
00005858 4A78 FE02                  		tst.w	(f_restart).w
0000585C 67DC                       		beq.s	SS_NormalExit
0000585E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005862 66D6                       		bne.s	SS_NormalExit
0000586C 6100 CA3E                  		bsr.w	PaletteWhiteOut
00005870 4E75                       		rts	
00005872                            ; ===========================================================================
00005872                            
00005872                            SS_ToSegaScreen:
00005872 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005878 4E75                       		rts
0000587A                            
0000587A 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005880 67F0                       		beq.s	SS_ToSegaScreen
00005882 4E75                       		rts
00005884                            
00005884                            ; ---------------------------------------------------------------------------
00005884                            ; Special stage	background loading subroutine
00005884                            ; ---------------------------------------------------------------------------
00005884                            
00005884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005884                            
00005884                            
00005884                            SS_BGLoad:
00005884 43F9 00FF 0000             		lea	($FF0000).l,a1
0000588A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005890 303C 4051                  		move.w	#$4051,d0
00005894 6100 BFF2                  		bsr.w	EniDec
00005898 263C 5000 0001             		move.l	#$50000001,d3
0000589E 45F9 00FF 0080             		lea	($FF0080).l,a2
000058A4 7E06                       		moveq	#6,d7
000058A6                            
000058A6                            loc_48BE:
000058A6 2003                       		move.l	d3,d0
000058A8 7C03                       		moveq	#3,d6
000058AA 7800                       		moveq	#0,d4
000058AC 0C47 0003                  		cmpi.w	#3,d7
000058B0 6400                       		bhs.s	loc_48CC
000058B2 7801                       		moveq	#1,d4
000058B4                            
000058B4                            loc_48CC:
000058B4 7A07                       		moveq	#7,d5
000058B6                            
000058B6                            loc_48CE:
000058B6 224A                       		movea.l	a2,a1
000058B8 0A04 0001                  		eori.b	#1,d4
000058BC 6600                       		bne.s	loc_48E2
000058BE 0C47 0006                  		cmpi.w	#6,d7
000058C2 6600                       		bne.s	loc_48F2
000058C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058CA                            
000058CA                            loc_48E2:
000058CA 48E7 F800                  		movem.l	d0-d4,-(sp)
000058CE 7207                       		moveq	#7,d1
000058D0 7407                       		moveq	#7,d2
000058D2 6100 BA00                  		bsr.w	TilemapToVRAM
000058D6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000058DA                            
000058DA                            loc_48F2:
000058DA 0680 0010 0000             		addi.l	#$100000,d0
000058E0 51CD FFD4                  		dbf	d5,loc_48CE
000058E4 0680 0380 0000             		addi.l	#$3800000,d0
000058EA 0A04 0001                  		eori.b	#1,d4
000058EE 51CE FFC4                  		dbf	d6,loc_48CC
000058F2 0683 1000 0000             		addi.l	#$10000000,d3
000058F8 6A00                       		bpl.s	loc_491C
000058FA 4843                       		swap	d3
000058FC 0683 0000 C000             		addi.l	#$C000,d3
00005902 4843                       		swap	d3
00005904                            
00005904                            loc_491C:
00005904 D4FC 0080                  		adda.w	#$80,a2
00005908 51CF FF9C                  		dbf	d7,loc_48BE
0000590C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005912 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005918 303C 4000                  		move.w	#$4000,d0
0000591C 6100 BF6A                  		bsr.w	EniDec
00005920 43F9 00FF 0000             		lea	($FF0000).l,a1
00005926 203C 4000 0003             		move.l	#$40000003,d0
0000592C 723F                       		moveq	#$3F,d1
0000592E 741F                       		moveq	#$1F,d2
00005930 6100 B9A2                  		bsr.w	TilemapToVRAM
00005934 43F9 00FF 0000             		lea	($FF0000).l,a1
0000593A 203C 5000 0003             		move.l	#$50000003,d0
00005940 723F                       		moveq	#$3F,d1
00005942 743F                       		moveq	#$3F,d2
00005944 6100 B98E                  		bsr.w	TilemapToVRAM
00005948 4E75                       		rts	
0000594A                            ; End of function SS_BGLoad
0000594A                            
0000594A                            ; ---------------------------------------------------------------------------
0000594A                            ; Palette cycling routine - special stage
0000594A                            ; ---------------------------------------------------------------------------
0000594A                            
0000594A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000594A                            
0000594A                            
0000594A                            PalCycle_SS:
0000594A 4A78 F63A                  		tst.w	(f_pause).w
0000594E 6600                       		bne.s	locret_49E6
00005950 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005954 6A00                       		bpl.s	locret_49E6
00005956 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000595C 3038 F79A                  		move.w	(v_palss_num).w,d0
00005960 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005964 0240 001F                  		andi.w	#$1F,d0
00005968 E548                       		lsl.w	#2,d0
0000596A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005970 D0C0                       		adda.w	d0,a0
00005972 1018                       		move.b	(a0)+,d0
00005974 6A00                       		bpl.s	loc_4992
00005976 303C 01FF                  		move.w	#$1FF,d0
0000597A                            
0000597A                            loc_4992:
0000597A 31C0 F79C                  		move.w	d0,(v_palss_time).w
0000597E 7000                       		moveq	#0,d0
00005980 1018                       		move.b	(a0)+,d0
00005982 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005986 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000598C 43F1 0000                  		lea	(a1,d0.w),a1
00005990 303C 8200                  		move.w	#-$7E00,d0
00005994 1019                       		move.b	(a1)+,d0
00005996 3C80                       		move.w	d0,(a6)
00005998 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
0000599C 303C 8400                  		move.w	#-$7C00,d0
000059A0 1018                       		move.b	(a0)+,d0
000059A2 3C80                       		move.w	d0,(a6)
000059A4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059AE 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059B6 7000                       		moveq	#0,d0
000059B8 1018                       		move.b	(a0)+,d0
000059BA 6B00                       		bmi.s	loc_49E8
000059BC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059C2 D2C0                       		adda.w	d0,a1
000059C4 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059C8 24D9                       		move.l	(a1)+,(a2)+
000059CA 24D9                       		move.l	(a1)+,(a2)+
000059CC 24D9                       		move.l	(a1)+,(a2)+
000059CE                            
000059CE                            locret_49E6:
000059CE 4E75                       		rts	
000059D0                            ; ===========================================================================
000059D0                            
000059D0                            loc_49E8:
000059D0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000059D4 0C40 008A                  		cmpi.w	#$8A,d0
000059D8 6500                       		blo.s	loc_49F4
000059DA 5241                       		addq.w	#1,d1
000059DC                            
000059DC                            loc_49F4:
000059DC C2FC 002A                  		mulu.w	#$2A,d1
000059E0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000059E6 D2C1                       		adda.w	d1,a1
000059E8 0240 007F                  		andi.w	#$7F,d0
000059EC 0880 0000                  		bclr	#0,d0
000059F0 6700                       		beq.s	loc_4A18
000059F2 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
000059F6 24D1                       		move.l	(a1),(a2)+
000059F8 24E9 0004                  		move.l	4(a1),(a2)+
000059FC 24E9 0008                  		move.l	8(a1),(a2)+
00005A00                            
00005A00                            loc_4A18:
00005A00 D2FC 000C                  		adda.w	#$C,a1
00005A04 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A08 0C40 000A                  		cmpi.w	#$A,d0
00005A0C 6500                       		blo.s	loc_4A2E
00005A0E 0440 000A                  		subi.w	#$A,d0
00005A12 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A16                            
00005A16                            loc_4A2E:
00005A16 3200                       		move.w	d0,d1
00005A18 D040                       		add.w	d0,d0
00005A1A D041                       		add.w	d1,d0
00005A1C D2C0                       		adda.w	d0,a1
00005A1E 24D9                       		move.l	(a1)+,(a2)+
00005A20 34D9                       		move.w	(a1)+,(a2)+
00005A22 4E75                       		rts	
00005A24                            ; End of function PalCycle_SS
00005A24                            
00005A24                            ; ===========================================================================
00005A24 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A34                            
00005A34 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A44 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A54 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A64 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005A74 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005A84 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005A94 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AA4                            		even
00005AA4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AB2                            		even
00005AB2                            
00005AB2                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005AFA                            		even
00005AFA                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BCC                            		even
00005BCC                            
00005BCC                            ; ---------------------------------------------------------------------------
00005BCC                            ; Subroutine to	make the special stage background animated
00005BCC                            ; ---------------------------------------------------------------------------
00005BCC                            
00005BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BCC                            
00005BCC                            
00005BCC                            SS_BGAnimate:
00005BCC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005BD0 6600                       		bne.s	loc_4BF6
00005BD2 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005BD8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BDE                            
00005BDE                            loc_4BF6:
00005BDE 0C40 0008                  		cmpi.w	#8,d0
00005BE2 6400                       		bhs.s	loc_4C4E
00005BE4 0C40 0006                  		cmpi.w	#6,d0
00005BE8 6600                       		bne.s	loc_4C10
00005BEA 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005BEE 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005BF2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BF8                            
00005BF8                            loc_4C10:
00005BF8 7000                       		moveq	#0,d0
00005BFA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005BFE 4440                       		neg.w	d0
00005C00 4840                       		swap	d0
00005C02 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C08 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C0C 7609                       		moveq	#9,d3
00005C0E                            
00005C0E                            loc_4C26:
00005C0E 302B 0002                  		move.w	2(a3),d0
00005C12 6100 DE1E                  		bsr.w	CalcSine
00005C16 7400                       		moveq	#0,d2
00005C18 1419                       		move.b	(a1)+,d2
00005C1A C1C2                       		muls.w	d2,d0
00005C1C E080                       		asr.l	#8,d0
00005C1E 36C0                       		move.w	d0,(a3)+
00005C20 1419                       		move.b	(a1)+,d2
00005C22 4882                       		ext.w	d2
00005C24 D55B                       		add.w	d2,(a3)+
00005C26 51CB FFE6                  		dbf	d3,loc_4C26
00005C2A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C2E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C34 6000                       		bra.s	loc_4C7E
00005C36                            ; ===========================================================================
00005C36                            
00005C36                            loc_4C4E:
00005C36 0C40 000C                  		cmpi.w	#$C,d0
00005C3A 6600                       		bne.s	loc_4C74
00005C3C 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C40 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C44 243C 0001 8000             		move.l	#$18000,d2
00005C4A 7206                       		moveq	#6,d1
00005C4C                            
00005C4C                            loc_4C64:
00005C4C 2013                       		move.l	(a3),d0
00005C4E 9082                       		sub.l	d2,d0
00005C50 26C0                       		move.l	d0,(a3)+
00005C52 0482 0000 2000             		subi.l	#$2000,d2
00005C58 51C9 FFF2                  		dbf	d1,loc_4C64
00005C5C                            
00005C5C                            loc_4C74:
00005C5C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C60 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C66                            
00005C66                            loc_4C7E:
00005C66 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C6A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C6E 4440                       		neg.w	d0
00005C70 4840                       		swap	d0
00005C72 7600                       		moveq	#0,d3
00005C74 161A                       		move.b	(a2)+,d3
00005C76 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005C7A 4442                       		neg.w	d2
00005C7C 0242 00FF                  		andi.w	#$FF,d2
00005C80 E54A                       		lsl.w	#2,d2
00005C82                            
00005C82                            loc_4C9A:
00005C82 301B                       		move.w	(a3)+,d0
00005C84 544B                       		addq.w	#2,a3
00005C86 7200                       		moveq	#0,d1
00005C88 121A                       		move.b	(a2)+,d1
00005C8A 5341                       		subq.w	#1,d1
00005C8C                            
00005C8C                            loc_4CA4:
00005C8C 2380 2000                  		move.l	d0,(a1,d2.w)
00005C90 5842                       		addq.w	#4,d2
00005C92 0242 03FC                  		andi.w	#$3FC,d2
00005C96 51C9 FFF4                  		dbf	d1,loc_4CA4
00005C9A 51CB FFE6                  		dbf	d3,loc_4C9A
00005C9E 4E75                       		rts	
00005CA0                            ; End of function SS_BGAnimate
00005CA0                            
00005CA0                            ; ===========================================================================
00005CA0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CAC                            		even
00005CAC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CB4                            		even
00005CB4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CC8                            		even
00005CC8                            
00005CC8                            ; ===========================================================================
00005CC8                            
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Continue screen
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            
00005CC8                            GM_Continue:
00005CC8 6100 C4B8                  		bsr.w	PaletteFadeOut
00005CCC 46FC 2700                  		disable_ints
00005CD0 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005CD4 0200 00BF                  		andi.b	#$BF,d0
00005CD8 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005CDE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005CE4 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005CE8 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005CEC 6100 B492                  		bsr.w	ClearScreen
00005CF0                            
00005CF0 43F8 D000                  		lea	(v_objspace).w,a1
00005CF4 7000                       		moveq	#0,d0
00005CF6 323C 07FF                  		move.w	#$7FF,d1
00005CFA                            	Cont_ClrObjRam:
00005CFA 22C0                       		move.l	d0,(a1)+
00005CFC 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D00                            
00005D0A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D10 6100 B5EC                  		bsr.w	NemDec
00005D1E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D24 6100 B5D8                  		bsr.w	NemDec
00005D32 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D38 6100 B5C4                  		bsr.w	NemDec
00005D3C 720A                       		moveq	#10,d1
00005D3E 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D44 7012                       		moveq	#palid_Continue,d0
00005D46 6100 C6E4                  		bsr.w	PalLoad1	; load continue	screen palette
00005D52 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D58 42B8 F700                  		clr.l	(v_screenposx).w
00005D5C 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D64 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005D6A 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005D70 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005D76 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005D7C 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005D82 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005D88 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005D8E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005D94 4EB9 0000 0000             		jsr	(BuildSprites).l
00005D9A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D9E 0000 0040                  		ori.b	#$40,d0
00005DA2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DA8 6100 C332                  		bsr.w	PaletteFadeIn
00005DAC                            
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            ; Continue screen main loop
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            
00005DAC                            Cont_MainLoop:
00005DAC 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DB2 6100 DC4C                  		bsr.w	WaitForVBla
00005DB6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DBC 6400                       		bhs.s	loc_4DF2
00005DBE 46FC 2700                  		disable_ints
00005DC2 3238 F614                  		move.w	(v_demolength).w,d1
00005DC6 82FC 003C                  		divu.w	#$3C,d1
00005DCA 0281 0000 000F             		andi.l	#$F,d1
00005DD0 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005DD6 46FC 2300                  		enable_ints
00005DDA                            
00005DDA                            loc_4DF2:
00005DDA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DE0 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DE6 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005DEC 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005DEE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DF4 64B6                       		bhs.s	Cont_MainLoop
00005DF6 4A78 F614                  		tst.w	(v_demolength).w
00005DFA 6600 FFB0                  		bne.w	Cont_MainLoop
00005DFE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E04 4E75                       		rts	
00005E06                            ; ===========================================================================
00005E06                            
00005E06                            Cont_GotoLevel:
00005E06 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E0C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E12 7000                       		moveq	#0,d0
00005E14 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E18 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E1C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E20 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E24 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E28 4E75                       		rts	
00005E2A                            ; ===========================================================================
00005E2A                            
00005E2A                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            ; Object 80 - Continue screen elements
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            
00005E2A                            ContScrItem:
00005E2A 7000                       		moveq	#0,d0
00005E2C 1028 0024                  		move.b	$24(a0),d0
00005E30 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E34 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E38                            ; ===========================================================================
00005E38 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E3A 0000                       		dc.w CSI_Display-CSI_Index
00005E3C 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E3E 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E40                            ; ===========================================================================
00005E40                            
00005E40                            CSI_Main:	; Routine 0
00005E40 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E44 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E4C 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E52 117C 0000 0001             		move.b	#0,obRender(a0)
00005E58 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E5E 317C 0120 0008             		move.w	#$120,obX(a0)
00005E64 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005E6A 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005E70                            
00005E70                            CSI_Display:	; Routine 2
00005E70 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005E76                            ; ===========================================================================
00005E76                            
00005E76                            	CSI_MiniSonicPos:
00005E76 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005E88 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005E94                            
00005E94                            CSI_MakeMiniSonic:
00005E94                            		; Routine 4
00005E94 2248                       		movea.l	a0,a1
00005E96 45F9 0000 5E76             		lea	(CSI_MiniSonicPos).l,a2
00005E9C 7200                       		moveq	#0,d1
00005E9E 1238 FE18                  		move.b	(v_continues).w,d1
00005EA2 5501                       		subq.b	#2,d1
00005EA4 6400                       		bcc.s	CSI_MoreThan1
00005EA6 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EAC                            
00005EAC                            	CSI_MoreThan1:
00005EAC 7601                       		moveq	#1,d3
00005EAE 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EB2 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EB4                            
00005EB4 7600                       		moveq	#0,d3
00005EB6 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EB8                            
00005EB8                            	CSI_FewerThan16:
00005EB8 1401                       		move.b	d1,d2
00005EBA 0202 0001                  		andi.b	#1,d2
00005EBE                            
00005EBE                            CSI_MiniSonicLoop:
00005EBE 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EC2 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005EC6 4A02                       		tst.b	d2		; do you have an even number of continues?
00005EC8 6700                       		beq.s	CSI_Even	; if yes, branch
00005ECA 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005ED0                            
00005ED0                            	CSI_Even:
00005ED0 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005ED6 137C 0006 001A             		move.b	#6,obFrame(a1)
00005EDC 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005EE2 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005EEA 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005EF0 137C 0000 0001             		move.b	#0,obRender(a1)
00005EF6 43E9 0040                  		lea	$40(a1),a1
00005EFA 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005EFE                            
00005EFE 43E9 FFC0                  		lea	-$40(a1),a1
00005F02 1343 0028                  		move.b	d3,obSubtype(a1)
00005F06                            
00005F06                            CSI_ChkDel:	; Routine 6
00005F06 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F0A 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F0C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F12 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F14 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F18 0200 0001                  		andi.b	#1,d0
00005F1C 6600                       		bne.s	CSI_Animate
00005F1E 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F22 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F24 4E75                       		rts	
00005F26                            
00005F26                            CSI_Animate:
00005F26 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F2A 0200 000F                  		andi.b	#$F,d0
00005F2E 6600                       		bne.s	CSI_Display2
00005F30 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F36                            
00005F36                            	CSI_Display2:
00005F36 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F3C                            ; ===========================================================================
00005F3C                            
00005F3C                            CSI_Delete:
00005F3C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F3C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F42                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            ; Object 81 - Sonic on the continue screen
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            
00005F42                            ContSonic:
00005F42 7000                       		moveq	#0,d0
00005F44 1028 0024                  		move.b	obRoutine(a0),d0
00005F48 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F4C 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F50 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F56                            ; ===========================================================================
00005F56 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F58 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F5A 0000                       		dc.w CSon_Animate-CSon_Index
00005F5C 0000                       		dc.w CSon_Run-CSon_Index
00005F5E                            ; ===========================================================================
00005F5E                            
00005F5E                            CSon_Main:	; Routine 0
00005F5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F62 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005F68 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005F6E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005F76 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005F7C 117C 0004 0001             		move.b	#4,obRender(a0)
00005F82 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005F88 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005F8E 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005F94                            
00005F94                            CSon_ChkLand:	; Routine 2
00005F94 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005F9A 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005F9C                            
00005F9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FA0 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FA4 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FAC 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FB2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FB8 6000                       		bra.s	CSon_Animate
00005FBA                            
00005FBA                            CSon_ShowFall:
00005FBA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FC0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005FC6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005FCC                            ; ===========================================================================
00005FCC                            
00005FCC                            CSon_Animate:	; Routine 4
00005FCC 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005FD0 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005FD2 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005FD8 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005FDE                            
00005FDE                            CSon_GetUp:
00005FDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FE2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FEA 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FF0 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005FF6 4268 0020                  		clr.w	obInertia(a0)
00005FFA 5168 000C                  		subq.w	#8,obY(a0)
00006006                            
00006006                            CSon_Run:	; Routine 6
00006006 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000600C 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000600E 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006014 6000                       		bra.s	CSon_ShowRun
00006016                            
00006016                            CSon_AddInertia:
00006016 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
0000601C                            
0000601C                            CSon_ShowRun:
0000601C 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006022 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006028 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006028 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000602E                            		include	"_anim\Continue Screen Sonic.asm"
0000602E                            ; ---------------------------------------------------------------------------
0000602E                            ; Animation script - Sonic on the continue screen
0000602E                            ; ---------------------------------------------------------------------------
0000602E 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006030 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
0000603C 00                         		even
0000603C 00                         		even
0000603C                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            ; Sprite mappings - Continue screen
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            Map_ContScr_internal:
0000603C 0000                       		dc.w M_Cont_text-Map_ContScr_internal
0000603E 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
00006040 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
00006042 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00006044 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006046 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006048 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
0000604A 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
0000604C 0B                         M_Cont_text:	dc.b $B
0000604D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006052 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006057 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000605C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006061 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006066 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000606B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006070 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006075 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000607A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000607F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006084 03                         M_Cont_Sonic1:	dc.b 3
00006085 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000608A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000608F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006094 03                         M_Cont_Sonic2:	dc.b 3
00006095 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000609A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000609F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060A4 03                         M_Cont_Sonic3:	dc.b 3
000060A5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060AA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060AF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060B4 02                         M_Cont_oval:	dc.b 2
000060B5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060BA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060BF 01                         M_Cont_Mini1:	dc.b 1
000060C0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060C5 01                         M_Cont_Mini2:	dc.b 1
000060C6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000060CC 00                         		even
000060CC 00                         		even
000060CC                            
000060CC                            ; ===========================================================================
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            ; Ending sequence in Green Hill	Zone
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            
000060CC                            GM_Ending:
000060D4 6100 C0AC                  		bsr.w	PaletteFadeOut
000060D8                            
000060D8 43F8 D000                  		lea	(v_objspace).w,a1
000060DC 7000                       		moveq	#0,d0
000060DE 323C 07FF                  		move.w	#$7FF,d1
000060E2                            	End_ClrObjRam:
000060E2 22C0                       		move.l	d0,(a1)+
000060E4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000060E8                            
000060E8 43F8 F628                  		lea	($FFFFF628).w,a1
000060EC 7000                       		moveq	#0,d0
000060EE 323C 0015                  		move.w	#$15,d1
000060F2                            	End_ClrRam1:
000060F2 22C0                       		move.l	d0,(a1)+
000060F4 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
000060F8                            
000060F8 43F8 F700                  		lea	(v_screenposx).w,a1
000060FC 7000                       		moveq	#0,d0
000060FE 323C 003F                  		move.w	#$3F,d1
00006102                            	End_ClrRam2:
00006102 22C0                       		move.l	d0,(a1)+
00006104 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006108                            
00006108 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000610C 7000                       		moveq	#0,d0
0000610E 323C 0047                  		move.w	#$47,d1
00006112                            	End_ClrRam3:
00006112 22C0                       		move.l	d0,(a1)+
00006114 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006118                            
00006118 46FC 2700                  		disable_ints
0000611C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006120 0200 00BF                  		andi.b	#$BF,d0
00006124 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000612A 6100 B054                  		bsr.w	ClearScreen
0000612E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006134 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006138 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000613C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006140 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006144 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006148 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000614C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006150 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006156 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000615A 31FC 001E FE14             		move.w	#30,(v_air).w
00006160 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006166 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
0000616C 6700                       		beq.s	End_LoadData	; if yes, branch
0000616E 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006174                            
00006174                            End_LoadData:
00006174 7000                       		moveq	#plcid_Ending,d0
00006176 6100 B6DE                  		bsr.w	QuickPLC	; load ending sequence patterns
0000617A 4EB9 0000 0000             		jsr	(Hud_Base).l
00006180 6100 0000                  		bsr.w	LevelSizeLoad
00006184 6100 0000                  		bsr.w	DeformLayers
00006188 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000618E 6100 0000                  		bsr.w	LevelDataLoad
00006192 6100 0000                  		bsr.w	LoadTilesFromStart
00006196 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000619E 46FC 2300                  		enable_ints
000061A2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061A8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061AC 6100 B858                  		bsr.w	KosDec
000061B0 4EB9 0000 0000             		jsr		LoadPlayerPal
000061B6 6100 C274                  		bsr.w	PalLoad1	; load Sonic's palette
000061C2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000061C8 6700                       		beq.s	End_LoadSonic	; if not, branch
000061CA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000061D0                            
000061D0                            End_LoadSonic:
000061D0 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000061D6 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
000061DC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
000061E2 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
000061E8 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
000061EE 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000061F4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000061FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006200 4EB9 0000 0000             		jsr	(BuildSprites).l
00006206 7000                       		moveq	#0,d0
00006208 31C0 FE20                  		move.w	d0,(v_rings).w
0000620C 21C0 FE22                  		move.l	d0,(v_time).w
00006210 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006214 11C0 FE2C                  		move.b	d0,(v_shield).w
00006218 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000621C 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006220 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006224 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006228 31C0 FE02                  		move.w	d0,(f_restart).w
0000622C 31C0 FE04                  		move.w	d0,(v_framecount).w
00006230 6100 EEC6                  		bsr.w	OscillateNumInit
00006234 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000623A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006240 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006246 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000624C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006252 6100 D7AC                  		bsr.w	WaitForVBla
00006256 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000625A 0000 0040                  		ori.b	#$40,d0
0000625E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006264 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000626A 6100 BE70                  		bsr.w	PaletteFadeIn
0000626E                            
0000626E                            ; ---------------------------------------------------------------------------
0000626E                            ; Main ending sequence loop
0000626E                            ; ---------------------------------------------------------------------------
0000626E                            
0000626E                            End_MainLoop:
0000626E 6100 AFEC                  		bsr.w	PauseGame
00006272 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006278 6100 D786                  		bsr.w	WaitForVBla
0000627C 5278 FE04                  		addq.w	#1,(v_framecount).w
00006280 6100 0000                  		bsr.w	End_MoveSonic
00006284 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000628A 6100 0000                  		bsr.w	DeformLayers
0000628E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006294 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000629A 6100 BA32                  		bsr.w	PaletteCycle
0000629E 6100 EEAE                  		bsr.w	OscillateNumDo
000062A2 6100 EF3A                  		bsr.w	SynchroAnimate
000062A6 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062AC 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062AE                            
000062AE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062BC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062C2 4E75                       		rts	
000062C4                            ; ===========================================================================
000062C4                            
000062C4                            End_ChkEmerald:
000062C4 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000062C8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000062CC                            
000062CC 4278 FE02                  		clr.w	(f_restart).w
000062D0 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062D6 4278 F794                  		clr.w	(v_palchgspeed).w
000062DA                            
000062DA                            	End_AllEmlds:
000062DA 6100 AF80                  		bsr.w	PauseGame
000062DE 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062E4 6100 D71A                  		bsr.w	WaitForVBla
000062E8 5278 FE04                  		addq.w	#1,(v_framecount).w
000062EC 6100 0000                  		bsr.w	End_MoveSonic
000062F0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062F6 6100 0000                  		bsr.w	DeformLayers
000062FA 4EB9 0000 0000             		jsr	(BuildSprites).l
00006300 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006306 6100 EE46                  		bsr.w	OscillateNumDo
0000630A 6100 EED2                  		bsr.w	SynchroAnimate
0000630E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006312 6A00                       		bpl.s	End_SlowFade
00006314 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000631A 6100 BFB0                  		bsr.w	WhiteOut_ToWhite
0000631E                            
0000631E                            	End_SlowFade:
0000631E 4A78 FE02                  		tst.w	(f_restart).w
00006322 6700 FFB6                  		beq.w	End_AllEmlds
00006326 4278 FE02                  		clr.w	(f_restart).w
0000632A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006330 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006336 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000633C 47F8 F700                  		lea	(v_screenposx).w,a3
00006340 49F8 A400                  		lea	(v_lvllayout).w,a4
00006344 343C 4000                  		move.w	#$4000,d2
00006348 6100 0000                  		bsr.w	DrawChunks
0000634C 7013                       		moveq	#palid_Ending,d0
0000634E 6100 C0DC                  		bsr.w	PalLoad1	; load ending palette
00006352 6100 BEAC                  		bsr.w	PaletteWhiteIn
00006356 6000 FF16                  		bra.w	End_MainLoop
0000635A                            
0000635A                            ; ---------------------------------------------------------------------------
0000635A                            ; Subroutine controlling Sonic on the ending sequence
0000635A                            ; ---------------------------------------------------------------------------
0000635A                            
0000635A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000635A                            
0000635A                            
0000635A                            End_MoveSonic:
0000635A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000635E 6600                       		bne.s	End_MoveSon2
00006360 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006366 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006368                            
00006368 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000636C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006372 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006378 4E75                       		rts	
0000637A                            ; ===========================================================================
0000637A                            
0000637A                            End_MoveSon2:
0000637A 5500                       		subq.b	#2,d0
0000637C 6600                       		bne.s	End_MoveSon3
0000637E 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006384 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006386                            
00006386 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000638A 7000                       		moveq	#0,d0
0000638C 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006390 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006394 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006398 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
0000639E 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063A4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063AA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063B0 4E75                       		rts	
000063B2                            ; ===========================================================================
000063B2                            
000063B2                            End_MoveSon3:
000063B2 5500                       		subq.b	#2,d0
000063B4 6600                       		bne.s	End_MoveSonExit
000063B6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063BA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063C0 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000063C6 4278 D024                  		clr.w	(v_player+obRoutine).w
000063CA                            
000063CA                            End_MoveSonExit:
000063CA 4E75                       		rts	
000063CC                            ; End of function End_MoveSonic
000063CC                            
000063CC                            ; ===========================================================================
000063CC                            
000063CC                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            ; Object 87 - Sonic on ending sequence
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            
000063CC                            EndSonic:
000063CC 7000                       		moveq	#0,d0
000063CE 1028 0025                  		move.b	ob2ndRout(a0),d0
000063D2 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
000063D6 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
000063DA 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063E0                            ; ===========================================================================
000063E0 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
000063E4 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
000063E8 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
000063EC 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000063F0 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000063F4                            
000063F4 =00000030                  eson_time:	equ $30	; time to wait between events
000063F4                            ; ===========================================================================
000063F4                            
000063F4                            ESon_Main:	; Routine 0
000063F4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000063FA 6700                       		beq.s	ESon_Main2	; if yes, branch
000063FC 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006402 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006408 4E75                       		rts	
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            ESon_Main2:
0000640A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000640E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006416 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000641C 117C 0004 0001             		move.b	#4,obRender(a0)
00006422 4228 0022                  		clr.b	obStatus(a0)
00006426 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000642C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006432 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006438                            
00006438                            ESon_MakeEmeralds:
00006438                            		; Routine 2
00006438 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000643C 6600                       		bne.s	ESon_Wait
0000643E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006442 317C 0001 001C             		move.w	#1,obAnim(a0)
00006448 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000644E                            
0000644E                            	ESon_Wait:
0000644E 4E75                       		rts	
00006450                            ; ===========================================================================
00006450                            
00006450                            Obj87_LookUp:	; Routine 6
00006450 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006458 6600                       		bne.s	locret_5480
0000645A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006460 317C 005A 0030             		move.w	#90,eson_time(a0)
00006466 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000646A                            
0000646A                            locret_5480:
0000646A 4E75                       		rts	
0000646C                            ; ===========================================================================
0000646C                            
0000646C                            Obj87_ClrObjRam:
0000646C                            		; Routine 8
0000646C 5368 0030                  		subq.w	#1,eson_time(a0)
00006470 6600                       		bne.s	ESon_Wait2
00006472 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006476 323C 00FF                  		move.w	#$FF,d1
0000647A                            
0000647A                            Obj87_ClrLoop:
0000647A 4299                       		clr.l	(a1)+
0000647C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006480 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006486 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000648A 117C 0001 001C             		move.b	#1,obAnim(a0)
00006490 317C 003C 0030             		move.w	#60,eson_time(a0)
00006496                            
00006496                            ESon_Wait2:
00006496 4E75                       		rts	
00006498                            ; ===========================================================================
00006498                            
00006498                            Obj87_MakeLogo:	; Routine $C
00006498 5368 0030                  		subq.w	#1,eson_time(a0)
0000649C 6600                       		bne.s	ESon_Wait3
0000649E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064A2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064A8 117C 0002 001C             		move.b	#2,obAnim(a0)
000064AE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064B4                            
000064B4                            ESon_Wait3:
000064B4 4E75                       		rts	
000064B6                            ; ===========================================================================
000064B6                            
000064B6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064B6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064BC 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064C2                            ; ===========================================================================
000064C2                            
000064C2                            Obj87_Leap:	; Routine $10
000064C2 5368 0030                  		subq.w	#1,eson_time(a0)
000064C6 6600                       		bne.s	ESon_Wait4
000064C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064CC 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000064D4 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000064DA 117C 0004 0001             		move.b	#4,obRender(a0)
000064E0 4228 0022                  		clr.b	obStatus(a0)
000064E4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000064EA 117C 0005 001A             		move.b	#5,obFrame(a0)
000064F0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000064F6 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064FC 60B8                       		bra.s	Obj87_Animate
000064FE                            ; ===========================================================================
000064FE                            
000064FE                            ESon_Wait4:
000064FE 4E75                       		rts	
000064FE 4E75                       		rts	
00006500                            		include "_anim\Ending Sequence Sonic.asm"
00006500                            ; ---------------------------------------------------------------------------
00006500                            ; Animation script - Sonic on the ending sequence
00006500                            ; ---------------------------------------------------------------------------
00006500 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006502 0000                       		dc.w byte_552A-AniScript_ESon
00006504 0000                       		dc.w byte_5534-AniScript_ESon
00006506 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006514 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000651E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006526                            		even
00006526                            		even
00006526                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006526                            ; ---------------------------------------------------------------------------
00006526                            ; Object 88 - chaos emeralds on	the ending sequence
00006526                            ; ---------------------------------------------------------------------------
00006526                            
00006526                            EndChaos:
00006526 7000                       		moveq	#0,d0
00006528 1028 0024                  		move.b	obRoutine(a0),d0
0000652C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006530 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006534 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000653A                            ; ===========================================================================
0000653A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000653C 0000                       		dc.w ECha_Move-ECha_Index
0000653E                            
0000653E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000653E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000653E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000653E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000653E                            ; ===========================================================================
0000653E                            
0000653E                            ECha_Main:	; Routine 0
0000653E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006544 6700                       		beq.s	ECha_CreateEms
00006546 588F                       		addq.l	#4,sp
00006548 4E75                       		rts	
0000654A                            ; ===========================================================================
0000654A                            
0000654A                            ECha_CreateEms:
0000654A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006550 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006556 2248                       		movea.l	a0,a1
00006558 7600                       		moveq	#0,d3
0000655A 7401                       		moveq	#1,d2
0000655C 7205                       		moveq	#5,d1
0000655E                            
0000655E                            	ECha_LoadLoop:
0000655E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006562 5429 0024                  		addq.b	#2,obRoutine(a1)
00006566 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000656E 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006574 137C 0004 0001             		move.b	#4,obRender(a1)
0000657A 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006580 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006586 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
0000658C 1342 001C                  		move.b	d2,obAnim(a1)
00006590 1342 001A                  		move.b	d2,obFrame(a1)
00006594 5202                       		addq.b	#1,d2
00006596 1343 0026                  		move.b	d3,obAngle(a1)
0000659A 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
0000659E 43E9 0040                  		lea	$40(a1),a1
000065A2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065A6                            
000065A6                            ECha_Move:	; Routine 2
000065A6 3028 003E                  		move.w	echa_angle(a0),d0
000065AA D168 0026                  		add.w	d0,obAngle(a0)
000065AE 1028 0026                  		move.b	obAngle(a0),d0
000065B2 4EB9 0000 3A32             		jsr	(CalcSine).l
000065B8 7800                       		moveq	#0,d4
000065BA 1828 003C                  		move.b	echa_radius(a0),d4
000065BE C3C4                       		muls.w	d4,d1
000065C0 E081                       		asr.l	#8,d1
000065C2 C1C4                       		muls.w	d4,d0
000065C4 E080                       		asr.l	#8,d0
000065C6 D268 0038                  		add.w	echa_origX(a0),d1
000065CA D068 003A                  		add.w	echa_origY(a0),d0
000065CE 3141 0008                  		move.w	d1,obX(a0)
000065D2 3140 000C                  		move.w	d0,obY(a0)
000065D6                            
000065D6                            	ECha_Expand:
000065D6 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
000065DC 6700                       		beq.s	ECha_Rotate
000065DE 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
000065E4                            
000065E4                            	ECha_Rotate:
000065E4 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
000065EA 6700                       		beq.s	ECha_Rise
000065EC 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000065F2                            
000065F2                            	ECha_Rise:
000065F2 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000065F8 6700                       		beq.s	ECha_End
000065FA 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000065FE                            
000065FE                            ECha_End:
000065FE 4E75                       		rts	
000065FE 4E75                       		rts	
00006600                            		include	"_incObj\89 Ending Sequence STH.asm"
00006600                            ; ---------------------------------------------------------------------------
00006600                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006600                            ; ---------------------------------------------------------------------------
00006600                            
00006600                            EndSTH:
00006600 7000                       		moveq	#0,d0
00006602 1028 0024                  		move.b	$24(a0),d0
00006606 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000660A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000660E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006614                            ; ===========================================================================
00006614 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006616 0000                       		dc.w ESth_Move-ESth_Index
00006618 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000661A                            
0000661A =00000030                  esth_time:	equ $30		; time until exit
0000661A                            ; ===========================================================================
0000661A                            
0000661A                            ESth_Main:	; Routine 0
0000661A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000661E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006624 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000662A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006632 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006638 117C 0000 0001             		move.b	#0,obRender(a0)
0000663E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006644                            
00006644                            ESth_Move:	; Routine 2
00006644 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000664A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000664C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006652 4E75                       		rts
00006654                            
00006654                            ESth_Delay:
00006654 5428 0024                  		addq.b	#2,obRoutine(a0)
00006658 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000665E                            
0000665E                            ESth_GotoCredits:
0000665E                            		; Routine 4
0000665E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006662 6A00                       		bpl.s	ESth_Wait
00006664 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000666A                            
0000666A                            	ESth_Wait:
0000666A 4E75                       		rts
0000666C                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; Sprite mappings - Sonic on the ending	sequence
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            Map_ESon_internal:
0000666C 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000666E 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
00006670 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006672 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006674 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006676 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
00006678 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
0000667A 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
0000667C 02                         M_ESon_Hold1:	dc.b 2
0000667D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006682 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006687 03                         M_ESon_Hold2:	dc.b 3
00006688 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000668D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006692 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006697 02                         M_ESon_Up:	dc.b 2
00006698 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000669D FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066A2 02                         M_ESon_Conf1:	dc.b 2
000066A3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066A8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066AD 02                         M_ESon_Conf2:	dc.b 2
000066AE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066B3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066B8 03                         M_ESon_Leap1:	dc.b 3
000066B9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066BE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066C3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000066C8 07                         M_ESon_Leap2:	dc.b 7
000066C9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000066CE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000066D3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000066D8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000066DD DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000066E2 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000066E7 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000066EC 18                         M_ESon_Leap3:	dc.b $18
000066ED 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000066F2 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000066F7 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000066FC 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006701 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006706 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000670B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006710 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006715 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000671A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000671F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006724 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006729 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000672E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006733 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006738 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000673D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006742 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006747 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000674C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006751 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006756 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000675B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006760 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006766 00                         		even
00006766 00                         		even
00006766                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006766                            ; --------------------------------------------------------------------------------
00006766                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006766                            ; --------------------------------------------------------------------------------
00006766                            
00006766                            SME_0ZTmS:	
00006766 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
0000676A 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000676E 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006772 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006774 01                         SME_0ZTmS_E:	dc.b 1	
00006775 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000677A 01                         SME_0ZTmS_14:	dc.b 1	
0000677B F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006780 01                         SME_0ZTmS_1A:	dc.b 1	
00006781 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006786 01                         SME_0ZTmS_20:	dc.b 1	
00006787 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
0000678C 01                         SME_0ZTmS_26:	dc.b 1	
0000678D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006792 01                         SME_0ZTmS_2C:	dc.b 1	
00006793 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006798 01                         SME_0ZTmS_32:	dc.b 1	
00006799 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0000679E                            		even
0000679E                            		even
0000679E                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
0000679E                            ; ---------------------------------------------------------------------------
0000679E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000679E                            ; ---------------------------------------------------------------------------
0000679E                            Map_ESth_internal:
0000679E 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067A0 03                         M_ESth_1:	dc.b 3
000067A1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067A6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067AB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067B0                            		even
000067B0                            		even
000067B0                            
000067B0                            ; ===========================================================================
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            ; Credits ending sequence
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            
000067B0                            GM_Credits:
000067B0                            		
000067B0 6100 AF96                  		bsr.w	ClearPLC
000067B4 6100 B9CC                  		bsr.w	PaletteFadeOut
000067B8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067BE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067C2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000067C6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000067CA 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000067CE 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000067D2 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000067D6 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
000067DA 4238 F64E                  		clr.b	(f_wtr_state).w
000067DE 6100 A9A0                  		bsr.w	ClearScreen
000067E2                            
000067E2 43F8 D000                  		lea	(v_objspace).w,a1
000067E6 7000                       		moveq	#0,d0
000067E8 323C 07FF                  		move.w	#$7FF,d1
000067EC                            	TryAg_ClrObjRam:
000067EC 22C0                       		move.l	d0,(a1)+
000067EE 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000067F2                            
000067F2 7000                       		moveq	#plcid_TryAgain,d0
000067F4 6100 B060                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000067F8                            
000067F8 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000067FC 7000                       		moveq	#0,d0
000067FE 323C 001F                  		move.w	#$1F,d1
00006802                            	TryAg_ClrPal:
00006802 22C0                       		move.l	d0,(a1)+
00006804 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006808                            
00006808 7013                       		moveq	#palid_Ending,d0
0000680A 6100 BC20                  		bsr.w	PalLoad1	; load ending palette
0000680E 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006812 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006818 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000681E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006824 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
0000682A 6100 B8B0                  		bsr.w	PaletteFadeIn
0000682E                            
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            ; "TRY AGAIN" and "END"	screen main loop
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            TryAg_MainLoop:
0000682E 6100 AA2C                  		bsr.w	PauseGame
00006832 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006838 6100 D1C6                  		bsr.w	WaitForVBla
0000683C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006842 4EB9 0000 0000             		jsr	(BuildSprites).l
00006848 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000684E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006850 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006854 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006856 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000685C 67D0                       		beq.s	TryAg_MainLoop
0000685E                            
0000685E                            TryAg_Exit:
0000685E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006864 4E75                       		rts	
00006866                            
00006866                            ; ===========================================================================
00006866                            
00006866                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006866                            ; ---------------------------------------------------------------------------
00006866                            
00006866                            EndEggman:
00006866 7000                       		moveq	#0,d0
00006868 1028 0024                  		move.b	obRoutine(a0),d0
0000686C 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006870 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006874 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000687A                            ; ===========================================================================
0000687A 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
0000687C 0000                       		dc.w EEgg_Animate-EEgg_Index
0000687E 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006880 0000                       		dc.w EEgg_Wait-EEgg_Index
00006882                            
00006882 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006882                            ; ===========================================================================
00006882                            
00006882                            EEgg_Main:	; Routine 0
00006882 5428 0024                  		addq.b	#2,obRoutine(a0)
00006886 317C 0120 0008             		move.w	#$120,obX(a0)
0000688C 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006892 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
0000689A 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068A0 117C 0000 0001             		move.b	#0,obRender(a0)
000068A6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068AC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068B2 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068B8 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068BA                            
000068BA 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068C0 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000068C6 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000068CC 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
000068D2                            
000068D2                            EEgg_Animate:	; Routine 2
000068D2 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
000068D8 4EF9 0000 0000             		jmp	(AnimateSprite).l
000068DE                            ; ===========================================================================
000068DE                            
000068DE                            EEgg_Juggle:	; Routine 4
000068DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000068E2 7002                       		moveq	#2,d0
000068E4 0828 0000 001C             		btst	#0,obAnim(a0)
000068EA 6700                       		beq.s	@noflip
000068EC 4440                       		neg.w	d0
000068EE                            
000068EE                            	@noflip:
000068EE 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000068F2 7205                       		moveq	#5,d1
000068F4                            
000068F4                            @emeraldloop:
000068F4 1340 003E                  		move.b	d0,$3E(a1)
000068F8 3400                       		move.w	d0,d2
000068FA E742                       		asl.w	#3,d2
000068FC D529 0026                  		add.b	d2,obAngle(a1)
00006900 43E9 0040                  		lea	$40(a1),a1
00006904 51C9 FFEE                  		dbf	d1,@emeraldloop
00006908 5228 001A                  		addq.b	#1,obFrame(a0)
0000690C 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006912                            
00006912                            EEgg_Wait:	; Routine 6
00006912 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006916 6A00                       		bpl.s	@nochg		; branch if time remains
00006918 0868 0000 001C             		bchg	#0,obAnim(a0)
0000691E 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006924                            
00006924                            	@nochg:
00006924 4E75                       		rts	
00006924 4E75                       		rts	
00006926                            		include "_anim\Try Again & End Eggman.asm"
00006926                            ; ---------------------------------------------------------------------------
00006926                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006926                            ; ---------------------------------------------------------------------------
00006926 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006928 0000                       		dc.w @tryagain2-Ani_EEgg
0000692A 0000                       		dc.w @end-Ani_EEgg
0000692C 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006930 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006934 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006946                            		even
00006946                            		even
00006946                            		include	"_incObj\8C Try Again Emeralds.asm"
00006946                            ; ---------------------------------------------------------------------------
00006946                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006946                            ; ---------------------------------------------------------------------------
00006946                            
00006946                            TryChaos:
00006946 7000                       		moveq	#0,d0
00006948 1028 0024                  		move.b	obRoutine(a0),d0
0000694C 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006950 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006954 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000695A                            ; ===========================================================================
0000695A 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000695C 0000                       		dc.w TCha_Move-TCha_Index
0000695E                            ; ===========================================================================
0000695E                            
0000695E                            TCha_Main:	; Routine 0
0000695E 2248                       		movea.l	a0,a1
00006960 7400                       		moveq	#0,d2
00006962 7600                       		moveq	#0,d3
00006964 7205                       		moveq	#5,d1
00006966 9238 FE57                  		sub.b	(v_emeralds).w,d1
0000696A                            
0000696A                            @makeemerald:
0000696A 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000696E 5429 0024                  		addq.b	#2,obRoutine(a1)
00006972 237C 0000 6766 0004        		move.l	#Map_ECha,obMap(a1)
0000697A 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006980 137C 0000 0001             		move.b	#0,obRender(a1)
00006986 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000698C 337C 0104 0008             		move.w	#$104,obX(a1)
00006992 337C 0120 0038             		move.w	#$120,$38(a1)
00006998 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
0000699E 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069A4 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069AA 47F8 FE58                  		lea	(v_emldlist).w,a3
000069AE                            
000069AE                            	@chkemerald:
000069AE 7000                       		moveq	#0,d0
000069B0 1038 FE57                  		move.b	(v_emeralds).w,d0
000069B4 5340                       		subq.w	#1,d0
000069B6 6500                       		bcs.s	@loc_5B42
000069B8                            
000069B8                            	@chkloop:
000069B8 B433 0000                  		cmp.b	(a3,d0.w),d2
000069BC 6600                       		bne.s	@notgot
000069BE 5202                       		addq.b	#1,d2
000069C0 60EC                       		bra.s	@chkemerald
000069C2                            ; ===========================================================================
000069C2                            
000069C2                            	@notgot:
000069C2 51C8 FFF4                  		dbf	d0,@chkloop
000069C6                            
000069C6                            @loc_5B42:
000069C6 1342 001A                  		move.b	d2,obFrame(a1)
000069CA 5229 001A                  		addq.b	#1,obFrame(a1)
000069CE 5202                       		addq.b	#1,d2
000069D0 137C 0080 0026             		move.b	#$80,obAngle(a1)
000069D6 1343 001E                  		move.b	d3,obTimeFrame(a1)
000069DA 1343 001F                  		move.b	d3,obDelayAni(a1)
000069DE 0643 000A                  		addi.w	#10,d3
000069E2 43E9 0040                  		lea	$40(a1),a1
000069E6 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
000069EA                            
000069EA                            TCha_Move:	; Routine 2
000069EA 4A68 003E                  		tst.w	$3E(a0)
000069EE 6700                       		beq.s	locret_5BBA
000069F0 4A28 001E                  		tst.b	obTimeFrame(a0)
000069F4 6700                       		beq.s	loc_5B78
000069F6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000069FA 6600                       		bne.s	loc_5B80
000069FC                            
000069FC                            loc_5B78:
000069FC 3028 003E                  		move.w	$3E(a0),d0
00006A00 D168 0026                  		add.w	d0,obAngle(a0)
00006A04                            
00006A04                            loc_5B80:
00006A04 1028 0026                  		move.b	obAngle(a0),d0
00006A08 6700                       		beq.s	loc_5B8C
00006A0A 0C00 0080                  		cmpi.b	#$80,d0
00006A0E 6600                       		bne.s	loc_5B96
00006A10                            
00006A10                            loc_5B8C:
00006A10 4268 003E                  		clr.w	$3E(a0)
00006A14 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A1A                            
00006A1A                            loc_5B96:
00006A1A 4EB9 0000 3A32             		jsr	(CalcSine).l
00006A20 7800                       		moveq	#0,d4
00006A22 1828 003C                  		move.b	$3C(a0),d4
00006A26 C3C4                       		muls.w	d4,d1
00006A28 E081                       		asr.l	#8,d1
00006A2A C1C4                       		muls.w	d4,d0
00006A2C E080                       		asr.l	#8,d0
00006A2E D268 0038                  		add.w	$38(a0),d1
00006A32 D068 003A                  		add.w	$3A(a0),d0
00006A36 3141 0008                  		move.w	d1,obX(a0)
00006A3A 3140 000A                  		move.w	d0,obScreenY(a0)
00006A3E                            
00006A3E                            locret_5BBA:
00006A3E 4E75                       		rts	
00006A3E 4E75                       		rts	
00006A40                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            Map_EEgg_internal:
00006A40 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A42 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A44 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A46 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A48 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A4A 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A4C 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A4E 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A50 08                         M_EEgg_Try1:	dc.b 8
00006A51 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A56 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A5B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A60 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A65 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A6A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A6F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A74 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A79 08                         M_EEgg_Try2:	dc.b 8
00006A7A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006A7F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006A84 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006A89 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006A8E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006A93 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006A98 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A9D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AA2 08                         M_EEgg_Try3:	dc.b 8
00006AA3 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AA8 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AAD E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AB2 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AB7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006ABC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AC1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AC6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006ACB 08                         M_EEgg_Try4:	dc.b 8
00006ACC E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006AD1 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006AD6 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006ADB F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006AE0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006AE5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AEA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AEF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AF4 0C                         M_EEgg_End1:	dc.b $C
00006AF5 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006AFA F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006AFF 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B04 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B09 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B0E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B13 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B18 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B1D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B22 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B27 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B2C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B31 0A                         M_EEgg_End2:	dc.b $A
00006B32 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B37 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B3C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B41 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B46 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B4B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B50 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B55 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B5A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B5F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B64 0A                         M_EEgg_End3:	dc.b $A
00006B65 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006B6A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006B6F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006B74 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006B79 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006B7E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006B83 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B88 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B8D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006B92 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006B97 0C                         M_EEgg_End4:	dc.b $C
00006B98 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006B9D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BA2 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BA7 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BAC F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BB1 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BB6 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BBB 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BC0 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BC5 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006BCA 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BCF 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006BD4                            		even
00006BD4                            		even
00006BD4                            
00006BD4                            ; ---------------------------------------------------------------------------
00006BD4                            ; Ending sequence demos
00006BD4                            ; ---------------------------------------------------------------------------
00006BD4                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C02                            		even
00006C02                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C42                            		even
00006C42                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006C72                            		even
00006C72                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CA2                            		even
00006CA2                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CC2                            		even
00006CC2                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006CE2                            		even
00006CE2                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D12                            		even
00006D12                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D42                            		even
00006D42                            
00006D42                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            ; Subroutine to	load level boundaries and start	locations
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            
00006D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D42                            
00006D42                            
00006D42                            LevelSizeLoad:
00006D42 7000                       		moveq	#0,d0
00006D44 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D48 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D4C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D50 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D54 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D58 3038 FE10                  		move.w	(v_zone).w,d0
00006D5C ED08                       		lsl.b	#6,d0
00006D5E E848                       		lsr.w	#4,d0
00006D60 3200                       		move.w	d0,d1
00006D62 D040                       		add.w	d0,d0
00006D64 D041                       		add.w	d1,d0
00006D66 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006D6A 3018                       		move.w	(a0)+,d0
00006D6C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006D70 2018                       		move.l	(a0)+,d0
00006D72 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006D76 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006D7A 2018                       		move.l	(a0)+,d0
00006D7C 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006D80 21C0 F724                  		move.l	d0,(v_limittop1).w
00006D84 3038 F728                  		move.w	(v_limitleft2).w,d0
00006D88 0640 0240                  		addi.w	#$240,d0
00006D8C 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006D90 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006D96 3018                       		move.w	(a0)+,d0
00006D98 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006D9C 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DA2 6000 0000                  		bra.w	LevSz_ChkLamp
00006DA6                            
00006DA6                            ; ===========================================================================
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            ; Level size array
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            LevelSizeArray:
00006DA6                            		; GHZ
00006DA6 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DB2 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DBE 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006DCA 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006DD6                            		; LZ
00006DD6 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006DE2 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006DEE 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006DFA 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E06                            		; MZ
00006E06 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E12 0004 0000 17BF 0000 0520+  		dc.w $0004, $0000, $17BF, $0000, $0520, $0060
00006E1E 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E2A 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E36                            		; SLZ
00006E36 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E42 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E4E 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E5A 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006E66                            		; SYZ
00006E66 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006E72 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006E7E 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006E8A 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006E96                            		; SBZ
00006E96 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006EA2 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EAE 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EBA 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EC6                            		; Ending
00006EC6 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006ED2 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006EDE 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EEA 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EF6                            
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Ending start location array
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            EndingStLocArray:
00006EF6                            		include	"_inc\Start Location Array - Ending.asm"
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Ending start location array
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            
00006EF6                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006EFA                            		incbin	"startpos\mz2 (Credits demo).bin"
00006EFE                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F02                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F06                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F0A                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F0E                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F12                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F16                            		even
00006F16                            		even
00006F16                            
00006F16                            ; ===========================================================================
00006F16                            
00006F16                            LevSz_ChkLamp:
00006F16 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F1A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F1C                            
00006F1C 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F22 3238 D008                  		move.w	(v_player+obX).w,d1
00006F26 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F2A 6000                       		bra.s	LevSz_SkipStartPos
00006F2C                            ; ===========================================================================
00006F2C                            
00006F2C                            LevSz_StartLoc:
00006F2C 3038 FE10                  		move.w	(v_zone).w,d0
00006F30 ED08                       		lsl.b	#6,d0
00006F32 E848                       		lsr.w	#4,d0
00006F34 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F38 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F3C 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F3E                            
00006F3E 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F42 5340                       		subq.w	#1,d0
00006F44 E548                       		lsl.w	#2,d0
00006F46 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F4A                            
00006F4A                            LevSz_SonicPos:
00006F4A 7200                       		moveq	#0,d1
00006F4C 3219                       		move.w	(a1)+,d1
00006F4E 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F52 7000                       		moveq	#0,d0
00006F54 3011                       		move.w	(a1),d0
00006F56 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F5A                            
00006F5A                            SetScreen:
00006F5A                            	LevSz_SkipStartPos:
00006F5A 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006F5E 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006F60 7200                       		moveq	#0,d1
00006F62                            
00006F62                            	SetScr_WithinLeft:
00006F62 3438 F72A                  		move.w	(v_limitright2).w,d2
00006F66 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006F68 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006F6A 3202                       		move.w	d2,d1
00006F6C                            
00006F6C                            	SetScr_WithinRight:
00006F6C 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006F70                            
00006F70 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006F74 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006F76 7000                       		moveq	#0,d0
00006F78                            
00006F78                            	SetScr_WithinTop:
00006F78 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006F7C 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006F7E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006F82                            
00006F82                            	SetScr_WithinBottom:
00006F82 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006F86 6100 0000                  		bsr.w	BgScrollSpeed
00006F8A 7000                       		moveq	#0,d0
00006F8C 1038 FE10                  		move.b	(v_zone).w,d0
00006F90 E508                       		lsl.b	#2,d0
00006F92 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006F98 4E75                       		rts
00006F9A                            ; ===========================================================================
00006F9A                            ; ---------------------------------------------------------------------------
00006F9A                            ; Sonic start location array
00006F9A                            ; ---------------------------------------------------------------------------
00006F9A                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006F9A                            ; ---------------------------------------------------------------------------
00006F9A                            ; Sonic start location array
00006F9A                            ; ---------------------------------------------------------------------------
00006F9A                            
00006F9A                            		incbin	"startpos\ghz1.bin"
00006F9E                            		incbin	"startpos\ghz2.bin"
00006FA2                            		incbin	"startpos\ghz3.bin"
00006FA6 0080 00A8                  		dc.w	$80,$A8
00006FAA                            
00006FAA                            		incbin	"startpos\lz1.bin"
00006FAE                            		incbin	"startpos\lz2.bin"
00006FB2                            		incbin	"startpos\lz3.bin"
00006FB6                            		incbin	"startpos\sbz3.bin"
00006FBA                            
00006FBA                            		incbin	"startpos\mz1.bin"
00006FBE                            		incbin	"startpos\mz2.bin"
00006FC2                            		incbin	"startpos\mz3.bin"
00006FC6 0080 00A8                  		dc.w	$80,$A8
00006FCA                            
00006FCA                            		incbin	"startpos\slz1.bin"
00006FCE                            		incbin	"startpos\slz2.bin"
00006FD2                            		incbin	"startpos\slz3.bin"
00006FD6 0080 00A8                  		dc.w	$80,$A8
00006FDA                            
00006FDA                            		incbin	"startpos\syz1.bin"
00006FDE                            		incbin	"startpos\syz2.bin"
00006FE2                            		incbin	"startpos\syz3.bin"
00006FE6 0080 00A8                  		dc.w	$80,$A8
00006FEA                            
00006FEA                            		incbin	"startpos\sbz1.bin"
00006FEE                            		incbin	"startpos\sbz2.bin"
00006FF2                            		incbin	"startpos\fz.bin"
00006FF6 0080 00A8                  		dc.w	$80,$A8
00006FFA                            
00006FFA                            
00006FFA                            		incbin	"startpos\end1.bin"
00006FFE                            		incbin	"startpos\end2.bin"
00007002 0080 00A8                  		dc.w	$80,$A8
00007006 0080 00A8                  		dc.w	$80,$A8
0000700A                            
0000700A                            		even
0000700A                            		even
0000700A                            
0000700A                            ; ---------------------------------------------------------------------------
0000700A                            ; Which	256x256	tiles contain loops or roll-tunnels
0000700A                            ; ---------------------------------------------------------------------------
0000700A                            
0000700A                            LoopTileNums:
0000700A                            
0000700A                            ; 		loop	loop	tunnel	tunnel
0000700A                            
0000700A B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000700E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007012 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007016 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000701A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000701E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007022 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007026                            
00007026                            		even
00007026                            
00007026                            ; ---------------------------------------------------------------------------
00007026                            ; Subroutine to	set scroll speed of some backgrounds
00007026                            ; ---------------------------------------------------------------------------
00007026                            
00007026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007026                            
00007026                            
00007026                            BgScrollSpeed:
00007026 4A38 FE30                  		tst.b	(v_lastlamp).w
0000702A 6600                       		bne.s	loc_6206
0000702C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007030 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007034 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007038 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000703C 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007040                            
00007040                            loc_6206:
00007040 7400                       		moveq	#0,d2
00007042 1438 FE10                  		move.b	(v_zone).w,d2
00007046 D442                       		add.w	d2,d2
00007048 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000704C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007050                            ; End of function BgScrollSpeed
00007050                            
00007050                            ; ===========================================================================
00007050 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007054 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007058 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000705C 0000                       		dc.w BgScroll_End-BgScroll_Index
0000705E                            ; ===========================================================================
0000705E                            
0000705E                            BgScroll_GHZ:
0000705E 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007062 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007066 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000706A 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000706E 45F8 A800                  		lea	($FFFFA800).w,a2
00007072 429A                       		clr.l	(a2)+
00007074 429A                       		clr.l	(a2)+
00007076 429A                       		clr.l	(a2)+
00007078 4E75                       		rts
0000707A                            ; ===========================================================================
0000707A                            
0000707A                            BgScroll_LZ:
0000707A E280                       		asr.l	#1,d0
0000707C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007080 4E75                       		rts	
00007082                            ; ===========================================================================
00007082                            
00007082                            BgScroll_MZ:
00007082 4E75                       		rts	
00007084                            ; ===========================================================================
00007084                            
00007084                            BgScroll_SLZ:
00007084 E280                       		asr.l	#1,d0
00007086 0640 00C0                  		addi.w	#$C0,d0
0000708A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000708E 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007092 4E75                       		rts	
00007094                            ; ===========================================================================
00007094                            
00007094                            BgScroll_SYZ:
00007094 E980                       		asl.l	#4,d0
00007096 2400                       		move.l	d0,d2
00007098 E380                       		asl.l	#1,d0
0000709A D082                       		add.l	d2,d0
0000709C E080                       		asr.l	#8,d0
0000709E 5240                       		addq.w	#1,d0
000070A0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070A4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070A8 4E75                       		rts	
000070AA                            ; ===========================================================================
000070AA                            
000070AA                            BgScroll_SBZ:
000070AA 0240 07F8                  		andi.w	#$7F8,d0
000070AE E640                       		asr.w	#3,d0
000070B0 5240                       		addq.w	#1,d0
000070B2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070B6 4E75                       		rts	
000070B8                            ; ===========================================================================
000070B8                            
000070B8                            BgScroll_End:
000070B8 3038 F700                  		move.w	(v_screenposx).w,d0
000070BC E240                       		asr.w	#1,d0
000070BE 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
000070C2 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
000070C6 E440                       		asr.w	#2,d0
000070C8 3200                       		move.w	d0,d1
000070CA D040                       		add.w	d0,d0
000070CC D041                       		add.w	d1,d0
000070CE 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
000070D2 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070D6 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070DA 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070DE 45F8 A800                  		lea	($FFFFA800).w,a2
000070E2 429A                       		clr.l	(a2)+
000070E4 429A                       		clr.l	(a2)+
000070E6 429A                       		clr.l	(a2)+
000070E8 4E75                       		rts
000070E8 4E75                       		rts
000070EA                            		include	"_inc\DeformLayers (JP1).asm"
000070EA                            ; ---------------------------------------------------------------------------
000070EA                            ; Background layer deformation subroutines
000070EA                            ; ---------------------------------------------------------------------------
000070EA                            
000070EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070EA                            
000070EA                            
000070EA                            DeformLayers:
000070EA 4A38 F744                  		tst.b	(f_nobgscroll).w
000070EE 6700                       		beq.s	@bgscroll
000070F0 4E75                       		rts	
000070F2                            ; ===========================================================================
000070F2                            
000070F2                            	@bgscroll:
000070F2 4278 F754                  		clr.w	(v_fg_scroll_flags).w
000070F6 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
000070FA 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
000070FE 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007102 6100 0000                  		bsr.w	ScrollHoriz
00007106 6100 0000                  		bsr.w	ScrollVertical
0000710A 6100 0000                  		bsr.w	DynamicLevelEvents
0000710E 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007114 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000711A 7000                       		moveq	#0,d0
0000711C 1038 FE10                  		move.b	(v_zone).w,d0
00007120 D040                       		add.w	d0,d0
00007122 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007126 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000712A                            ; End of function DeformLayers
0000712A                            
0000712A                            ; ===========================================================================
0000712A                            ; ---------------------------------------------------------------------------
0000712A                            ; Offset index for background layer deformation	code
0000712A                            ; ---------------------------------------------------------------------------
0000712A 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000712E 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007132 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007136 0000                       		dc.w Deform_GHZ-Deform_Index
00007138                            ; ---------------------------------------------------------------------------
00007138                            ; Green	Hill Zone background layer deformation code
00007138                            ; ---------------------------------------------------------------------------
00007138                            
00007138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007138                            
00007138                            
00007138                            Deform_GHZ:
00007138                            	;cmpi.b    #id_Title,(v_gamemode).w
00007138                            	;beq.w    Deform_Title
00007138                            
00007138                            ;Deform_GHZ_Stage:
00007138                            	; block 3 - distant mountains
00007138 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000713C 48C4                       		ext.l	d4
0000713E EB84                       		asl.l	#5,d4
00007140 2204                       		move.l	d4,d1
00007142 E384                       		asl.l	#1,d4
00007144 D881                       		add.l	d1,d4
00007146 7C00                       		moveq	#0,d6
00007148 6100 0000                  		bsr.w	BGScroll_Block3
0000714C                            	; block 2 - hills & waterfalls
0000714C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007150 48C4                       		ext.l	d4
00007152 EF84                       		asl.l	#7,d4
00007154 7C00                       		moveq	#0,d6
00007156 6100 0000                  		bsr.w	BGScroll_Block2
0000715A                            	; calculate Y position
0000715A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000715E 3038 F704                  		move.w	(v_screenposy).w,d0
00007162 0240 07FF                  		andi.w	#$7FF,d0
00007166 EA48                       		lsr.w	#5,d0
00007168 4440                       		neg.w	d0
0000716A 0640 0020                  		addi.w	#$20,d0
0000716E 6A00                       		bpl.s	@limitY
00007170 7000                       		moveq	#0,d0
00007172                            	@limitY:
00007172 3800                       		move.w	d0,d4
00007174 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007178 3038 F700                  		move.w	(v_screenposx).w,d0
0000717C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007182 6600                       		bne.s	@notTitle
00007184 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007186                            	@notTitle:
00007186 4440                       		neg.w	d0
00007188 4840                       		swap	d0
0000718A                            	; auto-scroll clouds
0000718A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000718E 069A 0001 0000             		addi.l	#$10000,(a2)+
00007194 069A 0000 C000             		addi.l	#$C000,(a2)+
0000719A 069A 0000 8000             		addi.l	#$8000,(a2)+
000071A0                            	; calculate background scroll	
000071A0 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071A4 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071A8 4440                       		neg.w	d0
000071AA 323C 001F                  		move.w	#$1F,d1
000071AE 9244                       		sub.w	d4,d1
000071B0 6500                       		bcs.s	@gotoCloud2
000071B2                            	@cloudLoop1:		; upper cloud (32px)
000071B2 22C0                       		move.l	d0,(a1)+
000071B4 51C9 FFFC                  		dbf	d1,@cloudLoop1
000071B8                            
000071B8                            	@gotoCloud2:
000071B8 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000071BC D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071C0 4440                       		neg.w	d0
000071C2 323C 000F                  		move.w	#$F,d1
000071C6                            	@cloudLoop2:		; middle cloud (16px)
000071C6 22C0                       		move.l	d0,(a1)+
000071C8 51C9 FFFC                  		dbf	d1,@cloudLoop2
000071CC                            
000071CC 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
000071D0 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071D4 4440                       		neg.w	d0
000071D6 323C 000F                  		move.w	#$F,d1
000071DA                            	@cloudLoop3:		; lower cloud (16px)
000071DA 22C0                       		move.l	d0,(a1)+
000071DC 51C9 FFFC                  		dbf	d1,@cloudLoop3
000071E0                            
000071E0 323C 002F                  		move.w	#$2F,d1
000071E4 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000071E8 4440                       		neg.w	d0
000071EA                            	@mountainLoop:		; distant mountains (48px)
000071EA 22C0                       		move.l	d0,(a1)+
000071EC 51C9 FFFC                  		dbf	d1,@mountainLoop
000071F0                            
000071F0 323C 0027                  		move.w	#$27,d1
000071F4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000071F8 4440                       		neg.w	d0
000071FA                            	@hillLoop:			; hills & waterfalls (40px)
000071FA 22C0                       		move.l	d0,(a1)+
000071FC 51C9 FFFC                  		dbf	d1,@hillLoop
00007200                            
00007200 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007204 3438 F700                  		move.w	(v_screenposx).w,d2
00007208 9440                       		sub.w	d0,d2
0000720A 48C2                       		ext.l	d2
0000720C E182                       		asl.l	#8,d2
0000720E 85FC 0068                  		divs.w	#$68,d2
00007212 48C2                       		ext.l	d2
00007214 E182                       		asl.l	#8,d2
00007216 7600                       		moveq	#0,d3
00007218 3600                       		move.w	d0,d3
0000721A 323C 0047                  		move.w	#$47,d1
0000721E D244                       		add.w	d4,d1
00007220                            	@waterLoop:			; water deformation
00007220 3003                       		move.w	d3,d0
00007222 4440                       		neg.w	d0
00007224 22C0                       		move.l	d0,(a1)+
00007226 4843                       		swap	d3
00007228 D682                       		add.l	d2,d3
0000722A 4843                       		swap	d3
0000722C 51C9 FFF2                  		dbf	d1,@waterLoop
00007230 4E75                       		rts
00007232                            ; End of function Deform_GHZ
00007232                            
00007232                            Deform_Title:
00007232 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007236 48C4                       		ext.l	d4
00007238 EB84                       		asl.l	#5,d4
0000723A 2204                       		move.l	d4,d1
0000723C E384                       		asl.l	#1,d4
0000723E D881                       		add.l	d1,d4
00007240 7A00                       		moveq	#0,d5
00007242 6100 0000                  		bsr.w	BGScroll_Block1
00007246 6100 0000                  		bsr.w	BGScroll_Block3
0000724A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000724E 3038 F704                  		move.w	(v_screenposy).w,d0
00007252 0240 07FF                  		andi.w	#$7FF,d0
00007256 EA48                       		lsr.w	#5,d0
00007258 4440                       		neg.w	d0
0000725A 0640 0026                  		addi.w	#$26,d0
0000725E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007262 3800                       		move.w	d0,d4
00007264 6100 0000                  		bsr.w	BGScroll_Block3
00007268 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000726E 323C 006F                  		move.w	#$6F,d1
00007272 9244                       		sub.w	d4,d1
00007274 3038 F700                  		move.w	(v_screenposx).w,d0
00007278 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000727E 6600                       		bne.s	loc_633C
00007280 7000                       		moveq	#0,d0
00007282                            
00007282                            loc_633C:
00007282 4440                       		neg.w	d0
00007284 4840                       		swap	d0
00007286 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000728A 4440                       		neg.w	d0
0000728C                            
0000728C                            loc_6346:
0000728C 22C0                       		move.l	d0,(a1)+
0000728E 51C9 FFFC                  		dbf	d1,loc_6346
00007292 323C 0027                  		move.w	#$27,d1
00007296 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000729A 4440                       		neg.w	d0
0000729C                            
0000729C                            loc_6356:
0000729C 22C0                       		move.l	d0,(a1)+
0000729E 51C9 FFFC                  		dbf	d1,loc_6356
000072A2 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072A6 0640 0000                  		addi.w	#0,d0
000072AA 3438 F700                  		move.w	(v_screenposx).w,d2
000072AE 0642 FE00                  		addi.w	#-$200,d2
000072B2 9440                       		sub.w	d0,d2
000072B4 48C2                       		ext.l	d2
000072B6 E182                       		asl.l	#8,d2
000072B8 85FC 0068                  		divs.w	#$68,d2
000072BC 48C2                       		ext.l	d2
000072BE E182                       		asl.l	#8,d2
000072C0 7600                       		moveq	#0,d3
000072C2 3600                       		move.w	d0,d3
000072C4 323C 0047                  		move.w	#$47,d1
000072C8 D244                       		add.w	d4,d1
000072CA                            
000072CA                            loc_6384:
000072CA 3003                       		move.w	d3,d0
000072CC 4440                       		neg.w	d0
000072CE 22C0                       		move.l	d0,(a1)+
000072D0 4843                       		swap	d3
000072D2 D682                       		add.l	d2,d3
000072D4 4843                       		swap	d3
000072D6 51C9 FFF2                  		dbf	d1,loc_6384
000072DA 4E75                       		rts	
000072DC                            
000072DC                            ; ===========================================================================
000072DC                            ; ---------------------------------------------------------------------------
000072DC                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000072DC                            ; ---------------------------------------------------------------------------
000072DC                             
000072DC                            Deform_LZ:
000072DC 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000072DE 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000072E2 48C4                       		ext.l	d4					; extend to long-word signed
000072E4 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000072E6 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000072EA 48C5                       		ext.l	d5					; extend to long-word signed
000072EC E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
000072EE 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
000072F2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
000072F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
000072FC 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
00007300 4440                       		neg.w	d0					; reverse
00007302 4840                       		swap	d0					; send to upper word
00007304 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
00007308 4440                       		neg.w	d0					; reverse
0000730A 7600                       		moveq	#$00,d3					; clear d3
0000730C 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
00007310 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007316 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000731A 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
0000731E 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
00007322 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007324 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007326 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00007328 3202                       		move.w	d2,d1					; set at maximum
0000732A                             
0000732A                            DLZ_NoWater:
0000732A 9441                       		sub.w	d1,d2					; subtract from water-line count
0000732C D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000732E 5301                       		subq.b	#$01,d1					; decrease above water count
00007330 6500                       		bcs.s	DLZ_Water				; if finished, branch
00007332                             
00007332                            DLZ_Above:
00007332 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007334 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00007338                             
00007338                            DLZ_Water:
00007338 5302                       		subq.b	#$01,d2					; decrease below water count
0000733A 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000733C 3200                       		move.w	d0,d1					; copy BG position back to d1
0000733E 4840                       		swap	d0					; move FG position back to lower word in d0
00007340 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007342 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007346 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000734A D643                       		add.w	d3,d3					; multiply by word size (2)
0000734C D844                       		add.w	d4,d4					; ''
0000734E 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007354 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007356 1813                       		move.b	(a3),d4					; get current position byte
00007358 E404                       		asr.b	#$02,d4					; get only the position bits
0000735A 4884                       		ext.w	d4					; extend to word
0000735C D244                       		add.w	d4,d1					; adjust BG's current position
0000735E 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007362 1812                       		move.b	(a2),d4					; get current position byte
00007364 E404                       		asr.b	#$02,d4					; get only the position bits
00007366 4884                       		ext.w	d4					; extend to word
00007368 D044                       		add.w	d4,d0					; adjust FG's current position
0000736A                             
0000736A                            DLZ_Below:
0000736A D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000736C 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000736E D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007370 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007372 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00007376                             
00007376                            DLZ_Finish:
00007376 4E75                       		rts						; return
00007378                             
00007378                            ; ---------------------------------------------------------------------------
00007378                            ; Scroll data for the FG
00007378                            ; ---------------------------------------------------------------------------
00007378                             
00007378                            DLZ_WaveFG:
00007378                            		rept	$02
00007378                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007378 0001 0400 0401 0800 0801+  		endr
00007778                             
00007778                            ; ---------------------------------------------------------------------------
00007778                            ; Scroll data for the BG
00007778                            ; ---------------------------------------------------------------------------
00007778                             
00007778                            DLZ_WaveBG:	rept	$04
00007778                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00007778                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00007778                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00007778                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00007778                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00007778                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00007778                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00007778                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00007778 FC01 0000 0000 0000 0000+  		endr
00007B78                             
00007B78                            ; ===========================================================================
00007B78                            ; End of function Deform_LZ
00007B78                            
00007B78                            ; ---------------------------------------------------------------------------
00007B78                            ; Marble Zone background layer deformation code
00007B78                            ; ---------------------------------------------------------------------------
00007B78                            
00007B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B78                            
00007B78                            
00007B78                            Deform_MZ:
00007B78                            	; block 1 - dungeon interior
00007B78 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B7C 48C4                       		ext.l	d4
00007B7E ED84                       		asl.l	#6,d4
00007B80 2204                       		move.l	d4,d1
00007B82 E384                       		asl.l	#1,d4
00007B84 D881                       		add.l	d1,d4
00007B86 7C02                       		moveq	#2,d6
00007B88 6100 0000                  		bsr.w	BGScroll_Block1
00007B8C                            	; block 3 - mountains
00007B8C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B90 48C4                       		ext.l	d4
00007B92 ED84                       		asl.l	#6,d4
00007B94 7C06                       		moveq	#6,d6
00007B96 6100 0000                  		bsr.w	BGScroll_Block3
00007B9A                            	; block 2 - bushes & antique buildings
00007B9A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B9E 48C4                       		ext.l	d4
00007BA0 EF84                       		asl.l	#7,d4
00007BA2 7C04                       		moveq	#4,d6
00007BA4 6100 0000                  		bsr.w	BGScroll_Block2
00007BA8                            	; calculate y-position of background
00007BA8 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BAC 3238 F704                  		move.w	(v_screenposy).w,d1
00007BB0 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007BB4 6500                       		bcs.s	@noYscroll
00007BB6 3401                       		move.w	d1,d2
00007BB8 D241                       		add.w	d1,d1
00007BBA D242                       		add.w	d2,d1
00007BBC E441                       		asr.w	#2,d1
00007BBE D041                       		add.w	d1,d0
00007BC0                            	@noYscroll:
00007BC0 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007BC4 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007BC8 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007BCC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BD2                            	; do something with redraw flags
00007BD2 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007BD6 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007BDA 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007BDE 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007BE2 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007BE6                            	; calculate background scroll buffer
00007BE6 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007BEA 3438 F700                  		move.w	(v_screenposx).w,d2
00007BEE 4442                       		neg.w	d2
00007BF0 3002                       		move.w	d2,d0
00007BF2 E440                       		asr.w	#2,d0
00007BF4 9042                       		sub.w	d2,d0
00007BF6 48C0                       		ext.l	d0
00007BF8 E780                       		asl.l	#3,d0
00007BFA 81FC 0005                  		divs.w	#5,d0
00007BFE 48C0                       		ext.l	d0
00007C00 E980                       		asl.l	#4,d0
00007C02 E180                       		asl.l	#8,d0
00007C04 7600                       		moveq	#0,d3
00007C06 3602                       		move.w	d2,d3
00007C08 E243                       		asr.w	#1,d3
00007C0A 323C 0004                  		move.w	#4,d1
00007C0E                            	@cloudLoop:		
00007C0E 32C3                       		move.w	d3,(a1)+
00007C10 4843                       		swap	d3
00007C12 D680                       		add.l	d0,d3
00007C14 4843                       		swap	d3
00007C16 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C1A                            
00007C1A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C1E 4440                       		neg.w	d0
00007C20 323C 0001                  		move.w	#1,d1
00007C24                            	@mountainLoop:		
00007C24 32C0                       		move.w	d0,(a1)+
00007C26 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C2A                            
00007C2A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C2E 4440                       		neg.w	d0
00007C30 323C 0008                  		move.w	#8,d1
00007C34                            	@bushLoop:		
00007C34 32C0                       		move.w	d0,(a1)+
00007C36 51C9 FFFC                  		dbf	d1,@bushLoop
00007C3A                            
00007C3A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C3E 4440                       		neg.w	d0
00007C40 323C 000F                  		move.w	#$F,d1
00007C44                            	@interiorLoop:		
00007C44 32C0                       		move.w	d0,(a1)+
00007C46 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C4A                            
00007C4A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C4E 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C52 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007C56 3400                       		move.w	d0,d2
00007C58 0C40 0100                  		cmpi.w	#$100,d0
00007C5C 6500                       		bcs.s	@limitY
00007C5E 303C 0100                  		move.w	#$100,d0
00007C62                            	@limitY:
00007C62 0240 01F0                  		andi.w	#$1F0,d0
00007C66 E648                       		lsr.w	#3,d0
00007C68 45F2 0000                  		lea	(a2,d0),a2
00007C6C 6000 0000                  		bra.w	Bg_Scroll_X
00007C70                            ; End of function Deform_MZ
00007C70                            
00007C70                            ; ---------------------------------------------------------------------------
00007C70                            ; Star Light Zone background layer deformation code
00007C70                            ; ---------------------------------------------------------------------------
00007C70                            
00007C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C70                            
00007C70                            
00007C70                            Deform_SLZ:
00007C70                            	; vertical scrolling
00007C70 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007C74 48C5                       		ext.l	d5
00007C76 EF85                       		asl.l	#7,d5
00007C78 6100 0000                  		bsr.w	Bg_Scroll_Y
00007C7C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C82                            	; calculate background scroll buffer
00007C82 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C86 3438 F700                  		move.w	(v_screenposx).w,d2
00007C8A 4442                       		neg.w	d2
00007C8C 3002                       		move.w	d2,d0
00007C8E E640                       		asr.w	#3,d0
00007C90 9042                       		sub.w	d2,d0
00007C92 48C0                       		ext.l	d0
00007C94 E980                       		asl.l	#4,d0
00007C96 81FC 001C                  		divs.w	#$1C,d0
00007C9A 48C0                       		ext.l	d0
00007C9C E980                       		asl.l	#4,d0
00007C9E E180                       		asl.l	#8,d0
00007CA0 7600                       		moveq	#0,d3
00007CA2 3602                       		move.w	d2,d3
00007CA4 323C 001B                  		move.w	#$1B,d1
00007CA8                            	@starLoop:		
00007CA8 32C3                       		move.w	d3,(a1)+
00007CAA 4843                       		swap	d3
00007CAC D680                       		add.l	d0,d3
00007CAE 4843                       		swap	d3
00007CB0 51C9 FFF6                  		dbf	d1,@starLoop
00007CB4                            
00007CB4 3002                       		move.w	d2,d0
00007CB6 E640                       		asr.w	#3,d0
00007CB8 3200                       		move.w	d0,d1
00007CBA E241                       		asr.w	#1,d1
00007CBC D041                       		add.w	d1,d0
00007CBE 323C 0004                  		move.w	#4,d1
00007CC2                            	@buildingLoop1:		; distant black buildings
00007CC2 32C0                       		move.w	d0,(a1)+
00007CC4 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007CC8                            
00007CC8 3002                       		move.w	d2,d0
00007CCA E440                       		asr.w	#2,d0
00007CCC 323C 0004                  		move.w	#4,d1
00007CD0                            	@buildingLoop2:		; closer buildings
00007CD0 32C0                       		move.w	d0,(a1)+
00007CD2 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007CD6                            
00007CD6 3002                       		move.w	d2,d0
00007CD8 E240                       		asr.w	#1,d0
00007CDA 323C 001D                  		move.w	#$1D,d1
00007CDE                            	@bottomLoop:		; bottom part of background
00007CDE 32C0                       		move.w	d0,(a1)+
00007CE0 51C9 FFFC                  		dbf	d1,@bottomLoop
00007CE4                            
00007CE4 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007CE8 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CEC 3400                       		move.w	d0,d2
00007CEE 0440 00C0                  		subi.w	#$C0,d0
00007CF2 0240 03F0                  		andi.w	#$3F0,d0
00007CF6 E648                       		lsr.w	#3,d0
00007CF8 45F2 0000                  		lea	(a2,d0),a2
00007CFC                            ;-------------------------------------------------------------------------------
00007CFC                            ;-------------------------------------------------------------------------------
00007CFC                            Bg_Scroll_X:
00007CFC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D00 323C 000E                  		move.w	#$E,d1
00007D04 3038 F700                  		move.w	(v_screenposx).w,d0
00007D08 4440                       		neg.w	d0
00007D0A 4840                       		swap	d0
00007D0C 0242 000F                  		andi.w	#$F,d2
00007D10 D442                       		add.w	d2,d2
00007D12 301A                       		move.w	(a2)+,d0
00007D14 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D18                            	@blockLoop:
00007D18 301A                       		move.w	(a2)+,d0
00007D1A                            	@pixelJump:		
00007D1A 22C0                       		move.l	d0,(a1)+
00007D1C 22C0                       		move.l	d0,(a1)+
00007D1E 22C0                       		move.l	d0,(a1)+
00007D20 22C0                       		move.l	d0,(a1)+
00007D22 22C0                       		move.l	d0,(a1)+
00007D24 22C0                       		move.l	d0,(a1)+
00007D26 22C0                       		move.l	d0,(a1)+
00007D28 22C0                       		move.l	d0,(a1)+
00007D2A 22C0                       		move.l	d0,(a1)+
00007D2C 22C0                       		move.l	d0,(a1)+
00007D2E 22C0                       		move.l	d0,(a1)+
00007D30 22C0                       		move.l	d0,(a1)+
00007D32 22C0                       		move.l	d0,(a1)+
00007D34 22C0                       		move.l	d0,(a1)+
00007D36 22C0                       		move.l	d0,(a1)+
00007D38 22C0                       		move.l	d0,(a1)+
00007D3A 51C9 FFDC                  		dbf	d1,@blockLoop
00007D3E 4E75                       		rts
00007D40                            
00007D40                            ; ---------------------------------------------------------------------------
00007D40                            ; Spring Yard Zone background layer deformation	code
00007D40                            ; ---------------------------------------------------------------------------
00007D40                            
00007D40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D40                            
00007D40                            
00007D40                            Deform_SYZ:
00007D40                            	; vertical scrolling
00007D40 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D44 48C5                       		ext.l	d5
00007D46 E985                       		asl.l	#4,d5
00007D48 2205                       		move.l	d5,d1
00007D4A E385                       		asl.l	#1,d5
00007D4C DA81                       		add.l	d1,d5
00007D4E 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D52 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D58                            	; calculate background scroll buffer
00007D58 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D5C 3438 F700                  		move.w	(v_screenposx).w,d2
00007D60 4442                       		neg.w	d2
00007D62 3002                       		move.w	d2,d0
00007D64 E640                       		asr.w	#3,d0
00007D66 9042                       		sub.w	d2,d0
00007D68 48C0                       		ext.l	d0
00007D6A E780                       		asl.l	#3,d0
00007D6C 81FC 0008                  		divs.w	#8,d0
00007D70 48C0                       		ext.l	d0
00007D72 E980                       		asl.l	#4,d0
00007D74 E180                       		asl.l	#8,d0
00007D76 7600                       		moveq	#0,d3
00007D78 3602                       		move.w	d2,d3
00007D7A E243                       		asr.w	#1,d3
00007D7C 323C 0007                  		move.w	#7,d1
00007D80                            	@cloudLoop:		
00007D80 32C3                       		move.w	d3,(a1)+
00007D82 4843                       		swap	d3
00007D84 D680                       		add.l	d0,d3
00007D86 4843                       		swap	d3
00007D88 51C9 FFF6                  		dbf	d1,@cloudLoop
00007D8C                            
00007D8C 3002                       		move.w	d2,d0
00007D8E E640                       		asr.w	#3,d0
00007D90 323C 0004                  		move.w	#4,d1
00007D94                            	@mountainLoop:		
00007D94 32C0                       		move.w	d0,(a1)+
00007D96 51C9 FFFC                  		dbf	d1,@mountainLoop
00007D9A                            
00007D9A 3002                       		move.w	d2,d0
00007D9C E440                       		asr.w	#2,d0
00007D9E 323C 0005                  		move.w	#5,d1
00007DA2                            	@buildingLoop:		
00007DA2 32C0                       		move.w	d0,(a1)+
00007DA4 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DA8                            
00007DA8 3002                       		move.w	d2,d0
00007DAA 3202                       		move.w	d2,d1
00007DAC E241                       		asr.w	#1,d1
00007DAE 9041                       		sub.w	d1,d0
00007DB0 48C0                       		ext.l	d0
00007DB2 E980                       		asl.l	#4,d0
00007DB4 81FC 000E                  		divs.w	#$E,d0
00007DB8 48C0                       		ext.l	d0
00007DBA E980                       		asl.l	#4,d0
00007DBC E180                       		asl.l	#8,d0
00007DBE 7600                       		moveq	#0,d3
00007DC0 3602                       		move.w	d2,d3
00007DC2 E243                       		asr.w	#1,d3
00007DC4 323C 000D                  		move.w	#$D,d1
00007DC8                            	@bushLoop:		
00007DC8 32C3                       		move.w	d3,(a1)+
00007DCA 4843                       		swap	d3
00007DCC D680                       		add.l	d0,d3
00007DCE 4843                       		swap	d3
00007DD0 51C9 FFF6                  		dbf	d1,@bushLoop
00007DD4                            
00007DD4 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007DD8 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007DDC 3400                       		move.w	d0,d2
00007DDE 0240 01F0                  		andi.w	#$1F0,d0
00007DE2 E648                       		lsr.w	#3,d0
00007DE4 45F2 0000                  		lea	(a2,d0),a2
00007DE8 6000 FF12                  		bra.w	Bg_Scroll_X
00007DEC                            ; End of function Deform_SYZ
00007DEC                            
00007DEC                            ; ---------------------------------------------------------------------------
00007DEC                            ; Scrap	Brain Zone background layer deformation	code
00007DEC                            ; ---------------------------------------------------------------------------
00007DEC                            
00007DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DEC                            
00007DEC                            
00007DEC                            Deform_SBZ:
00007DEC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007DF0 48C4                       		ext.l	d4
00007DF2 ED84                       		asl.l	#6,d4
00007DF4 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007DF8 48C5                       		ext.l	d5
00007DFA E985                       		asl.l	#4,d5
00007DFC E385                       		asl.l	#1,d5
00007DFE 6100 0000                  		bsr.w	BGScroll_XY
00007E02 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E08 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E0C 323C 00DF                  		move.w	#223,d1
00007E10 3038 F700                  		move.w	(v_screenposx).w,d0
00007E14 4440                       		neg.w	d0
00007E16 4840                       		swap	d0
00007E18 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E1C 4440                       		neg.w	d0
00007E1E                            
00007E1E                            loc_6576:
00007E1E 22C0                       		move.l	d0,(a1)+
00007E20 51C9 FFFC                  		dbf	d1,loc_6576
00007E24 4E75                       		rts	
00007E26                            ;-------------------------------------------------------------------------------
00007E26                            Deform_SBZ2:;loc_68A2:
00007E26 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E2A 48C4                       		ext.l	d4
00007E2C ED84                       		asl.l	#6,d4
00007E2E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E32 48C5                       		ext.l	d5
00007E34 E985                       		asl.l	#4,d5
00007E36 E385                       		asl.l	#1,d5
00007E38 6100 0000                  		bsr.w	BGScroll_XY
00007E3C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E42 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E46 323C 00DF                  		move.w	#223,d1
00007E4A 3038 F700                  		move.w	(v_screenposx).w,d0
00007E4E 4440                       		neg.w	d0
00007E50 4840                       		swap	d0
00007E52 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E56 4440                       		neg.w	d0
00007E58                            
00007E58                            loc_6577:
00007E58 22C0                       		move.l	d0,(a1)+
00007E5A 51C9 FFFC                  		dbf	d1,loc_6577
00007E5E 4E75                       		rts	
00007E60                            
00007E60                            ; ---------------------------------------------------------------------------
00007E60                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007E60                            ; ---------------------------------------------------------------------------
00007E60                            
00007E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E60                            
00007E60                            
00007E60                            ScrollHoriz:
00007E60 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007E64 6100                       		bsr.s	MoveScreenHoriz
00007E66 3038 F700                  		move.w	(v_screenposx).w,d0
00007E6A 0240 0010                  		andi.w	#$10,d0
00007E6E 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007E72 B300                       		eor.b	d1,d0
00007E74 6600                       		bne.s	@return
00007E76 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007E7C 3038 F700                  		move.w	(v_screenposx).w,d0
00007E80 9044                       		sub.w	d4,d0		; compare new with old screen position
00007E82 6A00                       		bpl.s	@scrollRight
00007E84                            
00007E84 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007E8A 4E75                       		rts	
00007E8C                            
00007E8C                            	@scrollRight:
00007E8C 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007E92                            
00007E92                            	@return:
00007E92 4E75                       		rts	
00007E94                            ; End of function ScrollHoriz
00007E94                            
00007E94                            
00007E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E94                            
00007E94                            MoveScreenHoriz:
00007E94 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007E98 6700 0000                  		beq.w	@cont		
00007E9C 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EA2                            		
00007EA2                            	@cont:		
00007EA2 3038 D008                          move.w    (v_player+obX).w,d0
00007EA6 9078 F700                          sub.w    (v_screenposx).w,d0 ; Sonic's distance from left edge of screen
00007EAA 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007EAE 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007EB0 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007EB4 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007EB6 4278 F73A                          clr.w    (v_scrshiftx).w
00007EBA 4E75                               rts 
00007EBC                            ; ===========================================================================
00007EBC                            
00007EBC                            SH_AheadOfMid:
00007EBC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007EC0 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007EC2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007EC6                            
00007EC6                                SH_Ahead16:
00007EC6 D078 F700                          add.w    (v_screenposx).w,d0
00007ECA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ECE 6D00                               blt.s    SH_SetScreen
00007ED0 3038 F72A                          move.w    (v_limitright2).w,d0
00007ED4                            
00007ED4                            SH_SetScreen:
00007ED4 3200                               move.w    d0,d1
00007ED6 9278 F700                          sub.w    (v_screenposx).w,d1
00007EDA E141                               asl.w    #8,d1
00007EDC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007EE0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007EE4 4E75                               rts 
00007EE6                            ; ===========================================================================
00007EE6                            
00007EE6                            SH_BehindMid:
00007EE6 D078 F700                          add.w    (v_screenposx).w,d0
00007EEA B078 F728                          cmp.w    (v_limitleft2).w,d0
00007EEE 6EE4                               bgt.s    SH_SetScreen
00007EF0 3038 F728                          move.w    (v_limitleft2).w,d0
00007EF4 60DE                               bra.s    SH_SetScreen
00007EF6                            ; End of function MoveScreenHoriz
00007EF6                            
00007EF6                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007EF6                            
00007EF6                            MoveScreenHorizEXT:
00007EF6 3038 D008                          move.w    (v_player+obX).w,d0
00007EFA 9078 F700                          sub.w    (v_screenposx).w,d0 ; Sonic's distance from left edge of screen
00007EFE 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007F02 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007F04 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007F06 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007F08                            ; ===========================================================================
00007F08                            
00007F08                            SHEXT_ProperlyFramed:
00007F08 4278 F73A                          clr.w    (v_scrshiftx).w
00007F0C 4E75                               rts 
00007F0E                            ; ===========================================================================
00007F0E                            
00007F0E                            SHEXT_AheadOfMid:
00007F0E 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F12 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007F14 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F18                            
00007F18                            SHEXT_Ahead16:
00007F18 D078 F700                          add.w    (v_screenposx).w,d0
00007F1C B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F20 6D00                               blt.s    SHEXT_SetScreen
00007F22 3038 F72A                          move.w    (v_limitright2).w,d0
00007F26                            
00007F26                            SHEXT_SetScreen:
00007F26 3200                               move.w    d0,d1
00007F28 9278 F700                          sub.w    (v_screenposx).w,d1
00007F2C E141                               asl.w    #8,d1
00007F2E 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F32 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F36 4E75                               rts
00007F38                            
00007F38                            ; ===========================================================================
00007F38                            
00007F38                            SHEXT_BehindMid:
00007F38 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007F3C 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007F3E 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007F42                            
00007F42                            SHEXT_Behind16:
00007F42 D078 F700                          add.w    (v_screenposx).w,d0
00007F46 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007F4A 6EDA                               bgt.s    SHEXT_SetScreen
00007F4C 3038 F728                          move.w    (v_limitleft2).w,d0
00007F50 60D4                               bra.s    SHEXT_SetScreen
00007F52                                  
00007F52                            ; End of function MoveScreenHoriz
00007F52                            
00007F52                            
00007F52                            ; ---------------------------------------------------------------------------
00007F52                            ; Subroutine to	scroll the level vertically as Sonic moves
00007F52                            ; ---------------------------------------------------------------------------
00007F52                            
00007F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F52                            
00007F52                            
00007F52                            ScrollVertical:
00007F52 7200                       		moveq	#0,d1
00007F54 3038 D00C                  		move.w	(v_player+obY).w,d0
00007F58 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007F5C 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007F62 6700                       		beq.s	SV_NotRolling	; if not, branch
00007F64 5B40                       		subq.w	#5,d0
00007F66                            
00007F66                            	SV_NotRolling:
00007F66 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007F6C 6700                       		beq.s	loc_664A	; if not, branch
00007F6E                            
00007F6E 0640 0020                  		addi.w	#32,d0
00007F72 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007F76 6500                       		bcs.s	loc_6696
00007F78 0440 0040                  		subi.w	#64,d0
00007F7C 6400                       		bcc.s	loc_6696
00007F7E 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007F82 6600                       		bne.s	loc_66A8
00007F84 6000                       		bra.s	loc_6656
00007F86                            ; ===========================================================================
00007F86                            
00007F86                            loc_664A:
00007F86 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007F8A 6600                       		bne.s	loc_665C
00007F8C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007F90 6600                       		bne.s	loc_66A8
00007F92                            
00007F92                            loc_6656:
00007F92 4278 F73C                  		clr.w	(v_scrshifty).w
00007F96 4E75                       		rts	
00007F98                            ; ===========================================================================
00007F98                            
00007F98                            loc_665C:
00007F98 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007F9E 6600                       		bne.s	loc_6684
00007FA0 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007FA4 6A00                       		bpl.s	loc_666C
00007FA6 4441                       		neg.w	d1
00007FA8                            
00007FA8                            loc_666C:
00007FA8 0C41 0800                  		cmpi.w	#$800,d1
00007FAC 6400                       		bcc.s	loc_6696
00007FAE 323C 0600                  		move.w	#$600,d1
00007FB2 0C40 0006                  		cmpi.w	#6,d0
00007FB6 6E00                       		bgt.s	loc_66F6
00007FB8 0C40 FFFA                  		cmpi.w	#-6,d0
00007FBC 6D00                       		blt.s	loc_66C0
00007FBE 6000                       		bra.s	loc_66AE
00007FC0                            ; ===========================================================================
00007FC0                            
00007FC0                            loc_6684:
00007FC0 323C 0200                  		move.w	#$200,d1
00007FC4 0C40 0002                  		cmpi.w	#2,d0
00007FC8 6E00                       		bgt.s	loc_66F6
00007FCA 0C40 FFFE                  		cmpi.w	#-2,d0
00007FCE 6D00                       		blt.s	loc_66C0
00007FD0 6000                       		bra.s	loc_66AE
00007FD2                            ; ===========================================================================
00007FD2                            
00007FD2                            loc_6696:
00007FD2 323C 1000                  		move.w	#$1000,d1
00007FD6 0C40 0010                  		cmpi.w	#$10,d0
00007FDA 6E00                       		bgt.s	loc_66F6
00007FDC 0C40 FFF0                  		cmpi.w	#-$10,d0
00007FE0 6D00                       		blt.s	loc_66C0
00007FE2 6000                       		bra.s	loc_66AE
00007FE4                            ; ===========================================================================
00007FE4                            
00007FE4                            loc_66A8:
00007FE4 7000                       		moveq	#0,d0
00007FE6 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007FEA                            
00007FEA                            loc_66AE:
00007FEA 7200                       		moveq	#0,d1
00007FEC 3200                       		move.w	d0,d1
00007FEE D278 F704                  		add.w	(v_screenposy).w,d1
00007FF2 4A40                       		tst.w	d0
00007FF4 6A00 0000                  		bpl.w	loc_6700
00007FF8 6000 0000                  		bra.w	loc_66CC
00007FFC                            ; ===========================================================================
00007FFC                            
00007FFC                            loc_66C0:
00007FFC 4441                       		neg.w	d1
00007FFE 48C1                       		ext.l	d1
00008000 E181                       		asl.l	#8,d1
00008002 D2B8 F704                  		add.l	(v_screenposy).w,d1
00008006 4841                       		swap	d1
00008008                            
00008008                            loc_66CC:
00008008 B278 F72C                  		cmp.w	(v_limittop2).w,d1
0000800C 6E00                       		bgt.s	loc_6724
0000800E 0C41 FF00                  		cmpi.w	#-$100,d1
00008012 6E00                       		bgt.s	loc_66F0
00008014 0241 07FF                  		andi.w	#$7FF,d1
00008018 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0000801E 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00008024 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000802A 6000                       		bra.s	loc_6724
0000802C                            ; ===========================================================================
0000802C                            
0000802C                            loc_66F0:
0000802C 3238 F72C                  		move.w	(v_limittop2).w,d1
00008030 6000                       		bra.s	loc_6724
00008032                            ; ===========================================================================
00008032                            
00008032                            loc_66F6:
00008032 48C1                       		ext.l	d1
00008034 E181                       		asl.l	#8,d1
00008036 D2B8 F704                  		add.l	(v_screenposy).w,d1
0000803A 4841                       		swap	d1
0000803C                            
0000803C                            loc_6700:
0000803C B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00008040 6D00                       		blt.s	loc_6724
00008042 0441 0800                  		subi.w	#$800,d1
00008046 6500                       		bcs.s	loc_6720
00008048 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0000804E 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00008054 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000805A 6000                       		bra.s	loc_6724
0000805C                            ; ===========================================================================
0000805C                            
0000805C                            loc_6720:
0000805C 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00008060                            
00008060                            loc_6724:
00008060 3838 F704                  		move.w	(v_screenposy).w,d4
00008064 4841                       		swap	d1
00008066 2601                       		move.l	d1,d3
00008068 96B8 F704                  		sub.l	(v_screenposy).w,d3
0000806C E09B                       		ror.l	#8,d3
0000806E 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00008072 21C1 F704                  		move.l	d1,(v_screenposy).w
00008076 3038 F704                  		move.w	(v_screenposy).w,d0
0000807A 0240 0010                  		andi.w	#$10,d0
0000807E 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00008082 B300                       		eor.b	d1,d0
00008084 6600                       		bne.s	@return
00008086 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
0000808C 3038 F704                  		move.w	(v_screenposy).w,d0
00008090 9044                       		sub.w	d4,d0
00008092 6A00                       		bpl.s	@scrollBottom
00008094 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000809A 4E75                       		rts	
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            	@scrollBottom:
0000809C 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
000080A2                            
000080A2                            	@return:
000080A2 4E75                       		rts	
000080A4                            ; End of function ScrollVertical
000080A4                            
000080A4                            
000080A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A4                            ; Scrolls background and sets redraw flags.
000080A4                            ; d4 - background x offset * $10000
000080A4                            ; d5 - background y offset * $10000
000080A4                            
000080A4                            BGScroll_XY:
000080A4 2438 F708                  		move.l	(v_bgscreenposx).w,d2
000080A8 2002                       		move.l	d2,d0
000080AA D084                       		add.l	d4,d0
000080AC 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
000080B0 2200                       		move.l	d0,d1
000080B2 4841                       		swap	d1
000080B4 0241 0010                  		andi.w	#$10,d1
000080B8 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
000080BC B701                       		eor.b	d3,d1
000080BE 6600                       		bne.s	BGScroll_YRelative	; no change in Y
000080C0 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
000080C6 9082                       		sub.l	d2,d0	; new - old
000080C8 6A00                       		bpl.s	@scrollRight
000080CA 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
000080D0 6000                       		bra.s	BGScroll_YRelative
000080D2                            	@scrollRight:
000080D2 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
000080D8                            BGScroll_YRelative:
000080D8 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000080DC 2003                       		move.l	d3,d0
000080DE D085                       		add.l	d5,d0
000080E0 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000080E4 2200                       		move.l	d0,d1
000080E6 4841                       		swap	d1
000080E8 0241 0010                  		andi.w	#$10,d1
000080EC 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000080F0 B501                       		eor.b	d2,d1
000080F2 6600                       		bne.s	@return
000080F4 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000080FA 9083                       		sub.l	d3,d0
000080FC 6A00                       		bpl.s	@scrollBottom
000080FE 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008104 4E75                       		rts
00008106                            	@scrollBottom:
00008106 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
0000810C                            	@return:
0000810C 4E75                       		rts
0000810E                            ; End of function BGScroll_XY
0000810E                            
0000810E                            Bg_Scroll_Y:
0000810E 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008112 2003                       		move.l	d3,d0
00008114 D085                       		add.l	d5,d0
00008116 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
0000811A 2200                       		move.l	d0,d1
0000811C 4841                       		swap	d1
0000811E 0241 0010                  		andi.w	#$10,d1
00008122 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008126 B501                       		eor.b	d2,d1
00008128 6600                       		bne.s	@return
0000812A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008130 9083                       		sub.l	d3,d0
00008132 6A00                       		bpl.s	@scrollBottom
00008134 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
0000813A 4E75                       		rts
0000813C                            	@scrollBottom:
0000813C 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00008142                            	@return:
00008142 4E75                       		rts
00008144                            
00008144                            
00008144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008144                            
00008144                            
00008144                            BGScroll_YAbsolute:
00008144 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00008148 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000814C 3200                       		move.w	d0,d1
0000814E 0241 0010                  		andi.w	#$10,d1
00008152 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008156 B501                       		eor.b	d2,d1
00008158 6600                       		bne.s	@return
0000815A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008160 9043                       		sub.w	d3,d0
00008162 6A00                       		bpl.s	@scrollBottom
00008164 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
0000816A 4E75                       		rts
0000816C                            	@scrollBottom:
0000816C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008172                            	@return:
00008172 4E75                       		rts
00008174                            ; End of function BGScroll_YAbsolute
00008174                            
00008174                            
00008174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008174                            ; d6 - bit to set for redraw
00008174                            
00008174                            BGScroll_Block1:
00008174 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008178 2002                       		move.l	d2,d0
0000817A D084                       		add.l	d4,d0
0000817C 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008180 2200                       		move.l	d0,d1
00008182 4841                       		swap	d1
00008184 0241 0010                  		andi.w	#$10,d1
00008188 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000818C B701                       		eor.b	d3,d1
0000818E 6600                       		bne.s	@return
00008190 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008196 9082                       		sub.l	d2,d0
00008198 6A00                       		bpl.s	@scrollRight
0000819A 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000819E 6000                       		bra.s	@return
000081A0                            	@scrollRight:
000081A0 5206                       		addq.b	#1,d6
000081A2 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
000081A6                            	@return:
000081A6 4E75                       		rts
000081A8                            ; End of function BGScroll_Block1
000081A8                            
000081A8                            
000081A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A8                            
000081A8                            
000081A8                            BGScroll_Block2:
000081A8 2438 F710                  		move.l	(v_bg2screenposx).w,d2
000081AC 2002                       		move.l	d2,d0
000081AE D084                       		add.l	d4,d0
000081B0 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
000081B4 2200                       		move.l	d0,d1
000081B6 4841                       		swap	d1
000081B8 0241 0010                  		andi.w	#$10,d1
000081BC 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
000081C0 B701                       		eor.b	d3,d1
000081C2 6600                       		bne.s	@return
000081C4 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
000081CA 9082                       		sub.l	d2,d0
000081CC 6A00                       		bpl.s	@scrollRight
000081CE 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000081D2 6000                       		bra.s	@return
000081D4                            	@scrollRight:
000081D4 5206                       		addq.b	#1,d6
000081D6 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000081DA                            	@return:
000081DA 4E75                       		rts
000081DC                            ;-------------------------------------------------------------------------------
000081DC                            BGScroll_Block3:
000081DC 2438 F718                  		move.l	(v_bg3screenposx).w,d2
000081E0 2002                       		move.l	d2,d0
000081E2 D084                       		add.l	d4,d0
000081E4 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
000081E8 2200                       		move.l	d0,d1
000081EA 4841                       		swap	d1
000081EC 0241 0010                  		andi.w	#$10,d1
000081F0 1638 F750                  		move.b	(v_bg3_xblock).w,d3
000081F4 B701                       		eor.b	d3,d1
000081F6 6600                       		bne.s	@return
000081F8 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
000081FE 9082                       		sub.l	d2,d0
00008200 6A00                       		bpl.s	@scrollRight
00008202 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008206 6000                       		bra.s	@return
00008208                            	@scrollRight:
00008208 5206                       		addq.b	#1,d6
0000820A 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000820E                            	@return:
0000820E 4E75                       		rts
0000820E 4E75                       		rts
00008210                            
00008210                            
00008210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008210                            
00008210                            ; sub_6886:
00008210                            LoadTilesAsYouMove_BGOnly:
00008210 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008216 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000821C 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008220 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008224 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008228 343C 6000                  		move.w	#$6000,d2
0000822C 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008230 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00008234 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00008238 6000 0000                  		bra.w	DrawBGScrollBlock2
0000823C                            ; End of function sub_6886
0000823C                            
0000823C                            ; ---------------------------------------------------------------------------
0000823C                            ; Subroutine to	display	correct	tiles as you move
0000823C                            ; ---------------------------------------------------------------------------
0000823C                            
0000823C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000823C                            
0000823C                            
0000823C                            LoadTilesAsYouMove:
0000823C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008242 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008248                            		; First, update the background
00008248 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
0000824C 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00008250 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008254 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00008258 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000825C 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008260 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008264 6100 0000                  		bsr.w	DrawBGScrollBlock2
00008268                            		; REV01 added a third scroll block, though, technically,
00008268                            		; the RAM for it was already there in REV00
00008268 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
0000826C 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008270 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008274                            		; Then, update the foreground
00008274 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00008278 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
0000827C 49F8 A400                  		lea	(v_lvllayout).w,a4
00008280 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008284                            		; The FG's update function is inlined here
00008284 4A12                       		tst.b	(a2)
00008286 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00008288 0892 0000                  		bclr	#0,(a2)
0000828C 6700                       		beq.s	loc_6908
0000828E                            		; Draw new tiles at the top
0000828E 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008290 7AF0                       		moveq	#-16,d5 ; X coordinate
00008292 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008296 78F0                       		moveq	#-16,d4 ; Y coordinate
00008298 7AF0                       		moveq	#-16,d5 ; X coordinate
0000829A 6100 0000                  		bsr.w	DrawBlocks_LR
0000829E                            
0000829E                            loc_6908:
0000829E 0892 0001                  		bclr	#1,(a2)
000082A2 6700                       		beq.s	loc_6922
000082A4                            		; Draw new tiles at the bottom
000082A4 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000082A8 7AF0                       		moveq	#-16,d5
000082AA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082AE 383C 00E0                  		move.w	#224,d4
000082B2 7AF0                       		moveq	#-16,d5
000082B4 6100 0000                  		bsr.w	DrawBlocks_LR
000082B8                            
000082B8                            loc_6922:
000082B8 0892 0002                  		bclr	#2,(a2)
000082BC 6700                       		beq.s	loc_6938
000082BE                            		; Draw new tiles on the left
000082BE 78F0                       		moveq	#-16,d4
000082C0 7AF0                       		moveq	#-16,d5
000082C2 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082C6 78F0                       		moveq	#-16,d4
000082C8 7AF0                       		moveq	#-16,d5
000082CA 6100 0000                  		bsr.w	DrawBlocks_TB
000082CE                            
000082CE                            loc_6938:
000082CE 0892 0003                  		bclr	#3,(a2)
000082D2 6700                       		beq.s	locret_6952
000082D4                            		; Draw new tiles on the right
000082D4 78F0                       		moveq	#-16,d4
000082D6 3A3C 0140                  		move.w	#320,d5
000082DA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082DE 78F0                       		moveq	#-16,d4
000082E0 3A3C 0140                  		move.w	#320,d5
000082E4 6100 0000                  		bsr.w	DrawBlocks_TB
000082E8                            
000082E8                            locret_6952:
000082E8 4E75                       		rts	
000082EA                            ; End of function LoadTilesAsYouMove
000082EA                            
000082EA                            
000082EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EA                            
000082EA                            ; sub_6954:
000082EA                            DrawBGScrollBlock1:
000082EA 4A12                       		tst.b	(a2)
000082EC 6700 0000                  		beq.w	locret_69F2
000082F0 0892 0000                  		bclr	#0,(a2)
000082F4 6700                       		beq.s	loc_6972
000082F6                            		; Draw new tiles at the top
000082F6 78F0                       		moveq	#-16,d4
000082F8 7AF0                       		moveq	#-16,d5
000082FA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082FE 78F0                       		moveq	#-16,d4
00008300 7AF0                       		moveq	#-16,d5
00008302 6100 0000                  			bsr.w	DrawBlocks_LR
00008306                            
00008306                            loc_6972:
00008306 0892 0001                  		bclr	#1,(a2)
0000830A 6700                       		beq.s	loc_698E
0000830C                            		; Draw new tiles at the top
0000830C 383C 00E0                  		move.w	#224,d4
00008310 7AF0                       		moveq	#-16,d5
00008312 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008316 383C 00E0                  		move.w	#224,d4
0000831A 7AF0                       		moveq	#-16,d5
0000831C 6100 0000                  			bsr.w	DrawBlocks_LR
00008320                            
00008320                            loc_698E:
00008320 0892 0002                  		bclr	#2,(a2)
00008324                            
00008324                            
00008324 6700                       			beq.s	locj_6D56
00008326                            			; Draw new tiles on the left
00008326 78F0                       			moveq	#-16,d4
00008328 7AF0                       			moveq	#-16,d5
0000832A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000832E 78F0                       			moveq	#-16,d4
00008330 7AF0                       			moveq	#-16,d5
00008332 6100 0000                  			bsr.w	DrawBlocks_TB
00008336                            	locj_6D56:
00008336                            
00008336 0892 0003                  			bclr	#3,(a2)
0000833A 6700                       			beq.s	locj_6D70
0000833C                            			; Draw new tiles on the right
0000833C 78F0                       			moveq	#-16,d4
0000833E 3A3C 0140                  			move.w	#320,d5
00008342 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008346 78F0                       			moveq	#-16,d4
00008348 3A3C 0140                  			move.w	#320,d5
0000834C 6100 0000                  			bsr.w	DrawBlocks_TB
00008350                            	locj_6D70:
00008350                            
00008350 0892 0004                  			bclr	#4,(a2)
00008354 6700                       			beq.s	locj_6D88
00008356                            			; Draw entire row at the top
00008356 78F0                       			moveq	#-16,d4
00008358 7A00                       			moveq	#0,d5
0000835A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000835E 78F0                       			moveq	#-16,d4
00008360 7A00                       			moveq	#0,d5
00008362 7C1F                       			moveq	#(512/16)-1,d6
00008364 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008368                            	locj_6D88:
00008368                            
00008368 0892 0005                  			bclr	#5,(a2)
0000836C 6700                       			beq.s	locret_69F2
0000836E                            			; Draw entire row at the bottom
0000836E 383C 00E0                  			move.w	#224,d4
00008372 7A00                       			moveq	#0,d5
00008374 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008378 383C 00E0                  			move.w	#224,d4
0000837C 7A00                       			moveq	#0,d5
0000837E 7C1F                       			moveq	#(512/16)-1,d6
00008380 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008384                            
00008384                            locret_69F2:
00008384 4E75                       		rts	
00008386                            ; End of function DrawBGScrollBlock1
00008386                            
00008386                            
00008386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008386                            
00008386                            ; Essentially, this draws everything that isn't scroll block 1
00008386                            ; sub_69F4:
00008386                            DrawBGScrollBlock2:
00008386                            
00008386 4A12                       			tst.b	(a2)
00008388 6700 0000                  			beq.w	locj_6DF2
0000838C 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008392 6700 0000                  			beq.w	Draw_SBz
00008396 0892 0000                  			bclr	#0,(a2)
0000839A 6700                       			beq.s	locj_6DD2
0000839C                            			; Draw new tiles on the left
0000839C 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
000083A0 7AF0                       			moveq	#-16,d5
000083A2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083A6 383C 0070                  			move.w	#224/2,d4
000083AA 7AF0                       			moveq	#-16,d5
000083AC 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000083AE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000083B2                            	locj_6DD2:
000083B2 0892 0001                  			bclr	#1,(a2)
000083B6 6700                       			beq.s	locj_6DF2
000083B8                            			; Draw new tiles on the right
000083B8 383C 0070                  			move.w	#224/2,d4
000083BC 3A3C 0140                  			move.w	#320,d5
000083C0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083C4 383C 0070                  			move.w	#224/2,d4
000083C8 3A3C 0140                  			move.w	#320,d5
000083CC 7C02                       			moveq	#3-1,d6
000083CE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000083D2                            	locj_6DF2:
000083D2 4E75                       			rts
000083D4                            ;===============================================================================
000083D4                            	locj_6DF4:
000083D4 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
000083E4 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000083F4 0200                       			dc.b $02,$00						
000083F6                            ;===============================================================================
000083F6                            	Draw_SBz:
000083F6 78F0                       			moveq	#-16,d4
000083F8 0892 0000                  			bclr	#0,(a2)
000083FC 6600                       			bne.s	locj_6E28
000083FE 0892 0001                  			bclr	#1,(a2)
00008402 6700                       			beq.s	locj_6E72
00008404 383C 00E0                  			move.w	#224,d4
00008408                            	locj_6E28:
00008408 41F9 0000 83D5             			lea	(locj_6DF4+1).l,a0
0000840E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008412 D044                       			add.w	d4,d0
00008414 0240 01F0                  			andi.w	#$1F0,d0
00008418 E848                       			lsr.w	#4,d0
0000841A 1030 0000                  			move.b	(a0,d0.w),d0
0000841E 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008424 3673 0000                  			movea.w	(a3,d0.w),a3
00008428 6700                       			beq.s	locj_6E5E
0000842A 7AF0                       			moveq	#-16,d5
0000842C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008430 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008434 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008438 6100 0000                  			bsr.w	DrawBlocks_LR
0000843C 6000                       			bra.s	locj_6E72
0000843E                            ;===============================================================================
0000843E                            	locj_6E5E:
0000843E 7A00                       			moveq	#0,d5
00008440 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008444 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008448 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000844C 7C1F                       			moveq	#(512/16)-1,d6
0000844E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008452                            	locj_6E72:
00008452 4A12                       			tst.b	(a2)
00008454 6600                       			bne.s	locj_6E78
00008456 4E75                       			rts
00008458                            ;===============================================================================			
00008458                            	locj_6E78:
00008458 78F0                       			moveq	#-16,d4
0000845A 7AF0                       			moveq	#-16,d5
0000845C 1012                       			move.b	(a2),d0
0000845E 0200 00A8                  			andi.b	#$A8,d0
00008462 6700                       			beq.s	locj_6E8C
00008464 E208                       			lsr.b	#1,d0
00008466 1480                       			move.b	d0,(a2)
00008468 3A3C 0140                  			move.w	#320,d5
0000846C                            	locj_6E8C:
0000846C 41F9 0000 83D4             			lea	(locj_6DF4).l,a0
00008472 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008476 0240 01F0                  			andi.w	#$1F0,d0
0000847A E848                       			lsr.w	#4,d0
0000847C 41F0 0000                  			lea	(a0,d0.w),a0
00008480 6000 0000                  			bra.w	locj_6FEC						
00008484                            ;===============================================================================
00008484                            
00008484                            
00008484                            	; locj_6EA4:
00008484                            	DrawBGScrollBlock3:
00008484 4A12                       			tst.b	(a2)
00008486 6700 0000                  			beq.w	locj_6EF0
0000848A 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008490 6700 0000                  			beq.w	Draw_Mz
00008494 0892 0000                  			bclr	#0,(a2)
00008498 6700                       			beq.s	locj_6ED0
0000849A                            			; Draw new tiles on the left
0000849A 383C 0040                  			move.w	#$40,d4
0000849E 7AF0                       			moveq	#-16,d5
000084A0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084A4 383C 0040                  			move.w	#$40,d4
000084A8 7AF0                       			moveq	#-16,d5
000084AA 7C02                       			moveq	#3-1,d6
000084AC 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084B0                            	locj_6ED0:
000084B0 0892 0001                  			bclr	#1,(a2)
000084B4 6700                       			beq.s	locj_6EF0
000084B6                            			; Draw new tiles on the right
000084B6 383C 0040                  			move.w	#$40,d4
000084BA 3A3C 0140                  			move.w	#320,d5
000084BE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084C2 383C 0040                  			move.w	#$40,d4
000084C6 3A3C 0140                  			move.w	#320,d5
000084CA 7C02                       			moveq	#3-1,d6
000084CC 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084D0                            	locj_6EF0:
000084D0 4E75                       			rts
000084D2                            	locj_6EF2:
000084D2 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000084E2 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084F2 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008502 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008512 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008522 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008532 0200                       			dc.b $02,$00
00008534                            ;===============================================================================
00008534                            	Draw_Mz:
00008534 78F0                       			moveq	#-16,d4
00008536 0892 0000                  			bclr	#0,(a2)
0000853A 6600                       			bne.s	locj_6F66
0000853C 0892 0001                  			bclr	#1,(a2)
00008540 6700                       			beq.s	locj_6FAE
00008542 383C 00E0                  			move.w	#224,d4
00008546                            	locj_6F66:
00008546 41F9 0000 84D3             			lea	(locj_6EF2+1).l,a0
0000854C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008550 0440 0200                  			subi.w	#$200,d0
00008554 D044                       			add.w	d4,d0
00008556 0240 07F0                  			andi.w	#$7F0,d0
0000855A E848                       			lsr.w	#4,d0
0000855C 1030 0000                  			move.b	(a0,d0.w),d0
00008560 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008564 6700                       			beq.s	locj_6F9A
00008566 7AF0                       			moveq	#-16,d5
00008568 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000856C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008570 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008574 6100 0000                  			bsr.w	DrawBlocks_LR
00008578 6000                       			bra.s	locj_6FAE
0000857A                            ;===============================================================================
0000857A                            	locj_6F9A:
0000857A 7A00                       			moveq	#0,d5
0000857C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008580 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008584 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008588 7C1F                       			moveq	#(512/16)-1,d6
0000858A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000858E                            	locj_6FAE:
0000858E 4A12                       			tst.b	(a2)
00008590 6600                       			bne.s	locj_6FB4
00008592 4E75                       			rts
00008594                            ;===============================================================================			
00008594                            	locj_6FB4:
00008594 78F0                       			moveq	#-16,d4
00008596 7AF0                       			moveq	#-16,d5
00008598 1012                       			move.b	(a2),d0
0000859A 0200 00A8                  			andi.b	#$A8,d0
0000859E 6700                       			beq.s	locj_6FC8
000085A0 E208                       			lsr.b	#1,d0
000085A2 1480                       			move.b	d0,(a2)
000085A4 3A3C 0140                  			move.w	#320,d5
000085A8                            	locj_6FC8:
000085A8 41F9 0000 84D2             			lea	(locj_6EF2).l,a0
000085AE 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085B2 0440 0200                  			subi.w	#$200,d0
000085B6 0240 07F0                  			andi.w	#$7F0,d0
000085BA E848                       			lsr.w	#4,d0
000085BC 41F0 0000                  			lea	(a0,d0.w),a0
000085C0 6000 0000                  			bra.w	locj_6FEC
000085C4                            ;===============================================================================			
000085C4                            	locj_6FE4:
000085C4 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000085CC                            	locj_6FEC:
000085CC 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000085CE 2E3C 0080 0000             			move.l	#$800000,d7
000085D4                            	locj_6FF4:			
000085D4 7000                       			moveq	#0,d0
000085D6 1018                       			move.b	(a0)+,d0
000085D8 0112                       			btst	d0,(a2)
000085DA 6700                       			beq.s	locj_701C
000085DC 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
000085E0 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000085E4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000085E8 6100 0000                  			bsr.w	GetBlockData
000085EC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000085F0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085F4 6100 0000                  			bsr.w	DrawBlock
000085F8 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000085FC                            	locj_701C:
000085FC 0644 0010                  			addi.w	#16,d4
00008600 51CE FFD2                  			dbf	d6,locj_6FF4
00008604 4212                       			clr.b	(a2)
00008606 4E75                       			rts			
00008608                            
00008608                            
00008608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008608                            
00008608                            ; Don't be fooled by the name: this function's for drawing from left to right
00008608                            ; when the camera's moving up or down
00008608                            ; DrawTiles_LR:
00008608                            DrawBlocks_LR:
00008608 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000860A                            ; DrawTiles_LR_2:
0000860A                            DrawBlocks_LR_2:
0000860A 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008610 2200                       		move.l	d0,d1
00008612                            
00008612                            	@loop:
00008612 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008616 6100 0000                  		bsr.w	GetBlockData
0000861A 2001                       		move.l	d1,d0
0000861C 6100 0000                  		bsr.w	DrawBlock
00008620 5801                       		addq.b	#4,d1		; Two tiles ahead
00008622 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008626 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000862A 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
0000862E 51CE FFE2                  		dbf	d6,@loop
00008632 4E75                       		rts
00008634                            ; End of function DrawBlocks_LR
00008634                            
00008634                            ; DrawTiles_LR_3:
00008634                            DrawBlocks_LR_3:
00008634 2E3C 0080 0000             		move.l	#$800000,d7
0000863A 2200                       		move.l	d0,d1
0000863C                            
0000863C                            	@loop:
0000863C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008640 6100 0000                  		bsr.w	GetBlockData_2
00008644 2001                       		move.l	d1,d0
00008646 6100 0000                  		bsr.w	DrawBlock
0000864A 5801                       		addq.b	#4,d1
0000864C 0201 007F                  		andi.b	#$7F,d1
00008650 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008654 0645 0010                  		addi.w	#16,d5
00008658 51CE FFE2                  		dbf	d6,@loop
0000865C 4E75                       		rts	
0000865E                            ; End of function DrawBlocks_LR_3
0000865E                            
0000865E                            
0000865E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000865E                            
0000865E                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000865E                            ; when the camera's moving left or right
0000865E                            ; DrawTiles_TB:
0000865E                            DrawBlocks_TB:
0000865E 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008660                            ; DrawTiles_TB_2:
00008660                            DrawBlocks_TB_2:
00008660 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008666 2200                       		move.l	d0,d1
00008668                            
00008668                            	@loop:
00008668 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000866C 6100 0000                  		bsr.w	GetBlockData
00008670 2001                       		move.l	d1,d0
00008672 6100 0000                  		bsr.w	DrawBlock
00008676 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000867A 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000867E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008682 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008686 51CE FFE0                  		dbf	d6,@loop
0000868A 4E75                       		rts	
0000868C                            ; End of function DrawBlocks_TB_2
0000868C                            
0000868C                            
0000868C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000868C                            
0000868C                            ; Draws a block's worth of tiles
0000868C                            ; Parameters:
0000868C                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000868C                            ; a1 = Pointer to block
0000868C                            ; a5 = Pointer to VDP command port
0000868C                            ; a6 = Pointer to VDP data port
0000868C                            ; d0 = VRAM command to access plane
0000868C                            ; d2 = VRAM plane A/B specifier
0000868C                            ; d7 = Plane row delta
0000868C                            ; DrawTiles:
0000868C                            DrawBlock:
0000868C 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000868E 4840                       		swap	d0
00008690 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008694 6600                       		bne.s	DrawFlipY
00008696 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000869A 6600                       		bne.s	DrawFlipX
0000869C 2A80                       		move.l	d0,(a5)
0000869E 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000086A0 D087                       		add.l	d7,d0		; Next row
000086A2 2A80                       		move.l	d0,(a5)
000086A4 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000086A6 4E75                       		rts	
000086A8                            ; ===========================================================================
000086A8                            
000086A8                            DrawFlipX:
000086A8 2A80                       		move.l	d0,(a5)
000086AA 2819                       		move.l	(a1)+,d4
000086AC 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000086B2 4844                       		swap	d4		; Swap the tiles around
000086B4 2C84                       		move.l	d4,(a6)		; Write top two tiles
000086B6 D087                       		add.l	d7,d0		; Next row
000086B8 2A80                       		move.l	d0,(a5)
000086BA 2819                       		move.l	(a1)+,d4
000086BC 0A84 0800 0800             		eori.l	#$8000800,d4
000086C2 4844                       		swap	d4
000086C4 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000086C6 4E75                       		rts	
000086C8                            ; ===========================================================================
000086C8                            
000086C8                            DrawFlipY:
000086C8 0810 0003                  		btst	#3,(a0)
000086CC 6600                       		bne.s	DrawFlipXY
000086CE 2A80                       		move.l	d0,(a5)
000086D0 2A19                       		move.l	(a1)+,d5
000086D2 2819                       		move.l	(a1)+,d4
000086D4 0A84 1000 1000             		eori.l	#$10001000,d4
000086DA 2C84                       		move.l	d4,(a6)
000086DC D087                       		add.l	d7,d0
000086DE 2A80                       		move.l	d0,(a5)
000086E0 0A85 1000 1000             		eori.l	#$10001000,d5
000086E6 2C85                       		move.l	d5,(a6)
000086E8 4E75                       		rts	
000086EA                            ; ===========================================================================
000086EA                            
000086EA                            DrawFlipXY:
000086EA 2A80                       		move.l	d0,(a5)
000086EC 2A19                       		move.l	(a1)+,d5
000086EE 2819                       		move.l	(a1)+,d4
000086F0 0A84 1800 1800             		eori.l	#$18001800,d4
000086F6 4844                       		swap	d4
000086F8 2C84                       		move.l	d4,(a6)
000086FA D087                       		add.l	d7,d0
000086FC 2A80                       		move.l	d0,(a5)
000086FE 0A85 1800 1800             		eori.l	#$18001800,d5
00008704 4845                       		swap	d5
00008706 2C85                       		move.l	d5,(a6)
00008708 4E75                       		rts	
0000870A                            ; End of function DrawBlocks
0000870A                            
0000870A                            ; ===========================================================================
0000870A                            ; unused garbage
0000870A                            
0000870A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000870A                            
0000870A                            ; Gets address of block at a certain coordinate
0000870A                            ; Parameters:
0000870A                            ; a4 = Pointer to level layout
0000870A                            ; d4 = Relative Y coordinate
0000870A                            ; d5 = Relative X coordinate
0000870A                            ; Returns:
0000870A                            ; a0 = Address of block metadata
0000870A                            ; a1 = Address of block
0000870A                            ; DrawBlocks:
0000870A                            GetBlockData:
0000870A DA53                       			add.w	(a3),d5
0000870C                            	GetBlockData_2:
0000870C D86B 0004                  			add.w	4(a3),d4
00008710 43F8 B000                  			lea	(v_16x16).w,a1
00008714                            		; Turn Y coordinate into index into level layout
00008714 3604                       		move.w	d4,d3
00008716 E24B                       		lsr.w	#1,d3
00008718 0243 0380                  		andi.w	#$380,d3
0000871C                            		; Turn X coordinate into index into level layout
0000871C E64D                       		lsr.w	#3,d5
0000871E 3005                       		move.w	d5,d0
00008720 EA48                       		lsr.w	#5,d0
00008722 0240 007F                  		andi.w	#$7F,d0
00008726                            		; Get chunk from level layout
00008726 D043                       		add.w	d3,d0
00008728 76FF                       		moveq	#-1,d3
0000872A 1634 0000                  		move.b	(a4,d0.w),d3
0000872E 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008730                            		; Turn chunk ID into index into chunk table
00008730 5303                       		subq.b	#1,d3
00008732 0243 007F                  		andi.w	#$7F,d3
00008736 EE5B                       		ror.w	#7,d3
00008738                            		; Turn Y coordinate into index into chunk
00008738 D844                       		add.w	d4,d4
0000873A 0244 01E0                  		andi.w	#$1E0,d4
0000873E                            		; Turn X coordinate into index into chunk
0000873E 0245 001E                  		andi.w	#$1E,d5
00008742                            		; Get block metadata from chunk
00008742 D644                       		add.w	d4,d3
00008744 D645                       		add.w	d5,d3
00008746 2043                       		movea.l	d3,a0
00008748 3610                       		move.w	(a0),d3
0000874A                            		; Turn block ID into address
0000874A 0243 03FF                  		andi.w	#$3FF,d3
0000874E E74B                       		lsl.w	#3,d3
00008750 D2C3                       		adda.w	d3,a1
00008752                            
00008752                            locret_6C1E:
00008752 4E75                       		rts	
00008754                            ; End of function GetBlockData
00008754                            
00008754                            
00008754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008754                            
00008754                            ; Produces a VRAM plane access command from coordinates
00008754                            ; Parameters:
00008754                            ; d4 = Relative Y coordinate
00008754                            ; d5 = Relative X coordinate
00008754                            ; Returns VDP command in d0
00008754                            Calc_VRAM_Pos:
00008754 DA53                       			add.w	(a3),d5
00008756                            	Calc_VRAM_Pos_2:
00008756 D86B 0004                  			add.w	4(a3),d4
0000875A                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
0000875A                            		; Also note that this wraps the value to the size of the plane:
0000875A                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
0000875A 0244 00F0                  		andi.w	#$F0,d4
0000875E 0245 01F0                  		andi.w	#$1F0,d5
00008762                            		; Transform the adjusted coordinates into a VDP command
00008762 E94C                       		lsl.w	#4,d4
00008764 E44D                       		lsr.w	#2,d5
00008766 D845                       		add.w	d5,d4
00008768 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000876A 4840                       		swap	d0
0000876C 3004                       		move.w	d4,d0
0000876E 4E75                       		rts	
00008770                            ; End of function Calc_VRAM_Pos
00008770                            
00008770                            
00008770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008770                            ; not used
00008770                            
00008770                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008770                            ; VRAM layout: the only difference is the high bits of the
00008770                            ; plane's VRAM address, which are 10 instead of 11.
00008770                            ; Both the foreground and background are at $C000 and $E000
00008770                            ; respectively, so this one starting at $8000 makes no sense.
00008770                            ; sub_6C3C:
00008770                            Calc_VRAM_Pos_Unknown:
00008770 D86B 0004                  		add.w	4(a3),d4
00008774 DA53                       		add.w	(a3),d5
00008776 0244 00F0                  		andi.w	#$F0,d4
0000877A 0245 01F0                  		andi.w	#$1F0,d5
0000877E E94C                       		lsl.w	#4,d4
00008780 E44D                       		lsr.w	#2,d5
00008782 D845                       		add.w	d5,d4
00008784 7002                       		moveq	#2,d0
00008786 4840                       		swap	d0
00008788 3004                       		move.w	d4,d0
0000878A 4E75                       		rts	
0000878C                            ; End of function Calc_VRAM_Pos_Unknown
0000878C                            
0000878C                            ; ---------------------------------------------------------------------------
0000878C                            ; Subroutine to	load tiles as soon as the level	appears
0000878C                            ; ---------------------------------------------------------------------------
0000878C                            
0000878C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000878C                            
0000878C                            
0000878C                            LoadTilesFromStart:
0000878C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008792 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008798 47F8 F700                  		lea	(v_screenposx).w,a3
0000879C 49F8 A400                  		lea	(v_lvllayout).w,a4
000087A0 343C 4000                  		move.w	#$4000,d2
000087A4 6100                       		bsr.s	DrawChunks
000087A6 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000087AA 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000087AE 343C 6000                  		move.w	#$6000,d2
000087B2 4A38 FE10                  			tst.b	(v_zone).w
000087B6 6700 0000                  			beq.w	Draw_GHz_Bg
000087BA 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000087C0 6700 0000                  			beq.w	Draw_Mz_Bg
000087C4 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000087CA 6700 0000                  			beq.w	Draw_SBz_Bg
000087CE 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000087D4 6700 0000                  			beq.w	Draw_GHz_Bg
000087D8                            ; End of function LoadTilesFromStart
000087D8                            
000087D8                            
000087D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087D8                            
000087D8                            
000087D8                            DrawChunks:
000087D8 78F0                       		moveq	#-16,d4
000087DA 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000087DC                            
000087DC                            	@loop:
000087DC 48E7 0E00                  		movem.l	d4-d6,-(sp)
000087E0 7A00                       		moveq	#0,d5
000087E2 3204                       		move.w	d4,d1
000087E4 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000087E8 3801                       		move.w	d1,d4
000087EA 7A00                       		moveq	#0,d5
000087EC 7C1F                       		moveq	#(512/16)-1,d6
000087EE 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000087F2 4CDF 0070                  		movem.l	(sp)+,d4-d6
000087F6 0644 0010                  		addi.w	#16,d4
000087FA 51CE FFE0                  		dbf	d6,@loop
000087FE 4E75                       		rts	
00008800                            ; End of function DrawChunks
00008800                            
00008800                            	Draw_GHz_Bg:
00008800 7800                       			moveq	#0,d4
00008802 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008804                            	locj_7224:			
00008804 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008808 41F9 0000 0000             			lea	(locj_724a),a0
0000880E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008812 D044                       			add.w	d4,d0
00008814 0240 00F0                  			andi.w	#$F0,d0
00008818 6100 0000                  			bsr.w	locj_72Ba
0000881C 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008820 0644 0010                  			addi.w	#16,d4
00008824 51CE FFDE                  			dbf	d6,locj_7224
00008828 4E75                       			rts
0000882A                            	locj_724a:
0000882A 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
0000883A                            ;-------------------------------------------------------------------------------
0000883A                            	Draw_Mz_Bg:;locj_725a:
0000883A 78F0                       			moveq	#-16,d4
0000883C 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000883E                            	locj_725E:			
0000883E 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008842 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008846 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000884A 0440 0200                  			subi.w	#$200,d0
0000884E D044                       			add.w	d4,d0
00008850 0240 07F0                  			andi.w	#$7F0,d0
00008854 6100 0000                  			bsr.w	locj_72Ba
00008858 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000885C 0644 0010                  			addi.w	#16,d4
00008860 51CE FFDC                  			dbf	d6,locj_725E
00008864 4E75                       			rts
00008866                            ;-------------------------------------------------------------------------------
00008866                            	Draw_SBz_Bg:;locj_7288:
00008866 78F0                       			moveq	#-16,d4
00008868 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000886A                            	locj_728C:			
0000886A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000886E 41FA FB65                  			lea	(locj_6DF4+1),a0
00008872 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008876 D044                       			add.w	d4,d0
00008878 0240 01F0                  			andi.w	#$1F0,d0
0000887C 6100 0000                  			bsr.w	locj_72Ba
00008880 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008884 0644 0010                  			addi.w	#16,d4
00008888 51CE FFE0                  			dbf	d6,locj_728C
0000888C 4E75                       			rts
0000888E                            ;-------------------------------------------------------------------------------
0000888E                            	locj_72B2:
0000888E F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008896                            	locj_72Ba:
00008896 E848                       			lsr.w	#4,d0
00008898 1030 0000                  			move.b	(a0,d0.w),d0
0000889C 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000088A0 6700                       			beq.s	locj_72da
000088A2 7AF0                       			moveq	#-16,d5
000088A4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000088A8 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000088AC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000088B0 6100 FD56                  			bsr.w	DrawBlocks_LR
000088B4 6000                       			bra.s	locj_72EE
000088B6                            	locj_72da:
000088B6 7A00                       			moveq	#0,d5
000088B8 48E7 0C00                  			movem.l	d4/d5,-(sp)
000088BC 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000088C0 4CDF 0030                  			movem.l	(sp)+,d4/d5
000088C4 7C1F                       			moveq	#(512/16)-1,d6
000088C6 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000088CA                            	locj_72EE:
000088CA 4E75                       			rts
000088CC                            
000088CC                            ; ---------------------------------------------------------------------------
000088CC                            ; Subroutine to load basic level data
000088CC                            ; ---------------------------------------------------------------------------
000088CC                            
000088CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088CC                            
000088CC                            
000088CC                            LevelDataLoad:
000088CC 7000                       		moveq	#0,d0
000088CE 1038 FE10                  		move.b	(v_zone).w,d0
000088D2 E948                       		lsl.w	#4,d0
000088D4 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000088DA 45F2 0000                  		lea	(a2,d0.w),a2
000088DE 2F0A                       		move.l	a2,-(sp)
000088E0 588A                       		addq.l	#4,a2
000088E2 205A                       		movea.l	(a2)+,a0
000088E4 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000088E8 303C 0000                  		move.w	#0,d0
000088EC 6100 8F9A                  		bsr.w	EniDec
000088F0 205A                       		movea.l	(a2)+,a0
000088F2 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000088F8 6100 910C                  		bsr.w	KosDec
000088FC 6100 0000                  		bsr.w	LevelLayoutLoad
00008900 301A                       		move.w	(a2)+,d0
00008902 3012                       		move.w	(a2),d0
00008904 0240 00FF                  		andi.w	#$FF,d0
00008908 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
0000890E 6600                       		bne.s	@notSBZ3	; if not, branch
00008910 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008912                            
00008912                            	@notSBZ3:
00008912 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
00008918 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000891A 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008920 6600                       		bne.s	@normalpal	; if not, branch
00008922                            
00008922                            	@isSBZorFZ:
00008922 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008924                            
00008924                            	@normalpal:
00008924 6100 9B06                  		bsr.w	PalLoad1	; load palette (based on d0)
00008928 245F                       		movea.l	(sp)+,a2
0000892A 584A                       		addq.w	#4,a2		; read number for 2nd PLC
0000892C 7000                       		moveq	#0,d0
0000892E 1012                       		move.b	(a2),d0
00008930 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008932 6100 8DB6                  		bsr.w	AddPLC		; load pattern load cues
00008936                            
00008936                            	@skipPLC:
00008936 4E75                       		rts	
00008938                            ; End of function LevelDataLoad
00008938                            
00008938                            ; ---------------------------------------------------------------------------
00008938                            ; Level	layout loading subroutine
00008938                            ; ---------------------------------------------------------------------------
00008938                            
00008938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008938                            
00008938                            
00008938                            LevelLayoutLoad:
00008938 47F8 A400                  		lea	(v_lvllayout).w,a3
0000893C 323C 01FF                  		move.w	#$1FF,d1
00008940 7000                       		moveq	#0,d0
00008942                            
00008942                            LevLoad_ClrRam:
00008942 26C0                       		move.l	d0,(a3)+
00008944 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008948                            
00008948 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000894C 7200                       		moveq	#0,d1
0000894E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008952 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008956 7202                       		moveq	#2,d1
00008958                            ; End of function LevelLayoutLoad
00008958                            
00008958                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008958                            
00008958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008958                            
00008958                            
00008958                            LevelLayoutLoad2:
00008958 3038 FE10                  		move.w	(v_zone).w,d0
0000895C ED08                       		lsl.b	#6,d0
0000895E EA48                       		lsr.w	#5,d0
00008960 3400                       		move.w	d0,d2
00008962 D040                       		add.w	d0,d0
00008964 D042                       		add.w	d2,d0
00008966 D041                       		add.w	d1,d0
00008968 43F9 0000 0000             		lea	(Level_Index).l,a1
0000896E 3031 0000                  		move.w	(a1,d0.w),d0
00008972 43F1 0000                  		lea	(a1,d0.w),a1
00008976 7200                       		moveq	#0,d1
00008978 3401                       		move.w	d1,d2
0000897A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000897C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000897E                            
0000897E                            LevLoad_NumRows:
0000897E 3001                       		move.w	d1,d0
00008980 204B                       		movea.l	a3,a0
00008982                            
00008982                            LevLoad_Row:
00008982 10D9                       		move.b	(a1)+,(a0)+
00008984 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008988 47EB 0080                  		lea	$80(a3),a3	; do next row
0000898C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008990 4E75                       		rts	
00008992                            ; End of function LevelLayoutLoad2
00008992                            
00008992                            		include	"_inc\DynamicLevelEvents.asm"
00008992                            ; ---------------------------------------------------------------------------
00008992                            ; Dynamic level events
00008992                            ; ---------------------------------------------------------------------------
00008992                            
00008992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008992                            
00008992                            
00008992                            DynamicLevelEvents:
00008992 7000                       		moveq	#0,d0
00008994 1038 FE10                  		move.b	(v_zone).w,d0
00008998 D040                       		add.w	d0,d0
0000899A 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000899E 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000089A2 7202                       		moveq	#2,d1
000089A4 3038 F726                  		move.w	(v_limitbtm1).w,d0
000089A8 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000089AC 6700                       		beq.s	DLE_NoChg	; if not, branch
000089AE 6400                       		bcc.s	loc_6DAC
000089B0                            
000089B0 4441                       		neg.w	d1
000089B2 3038 F704                  		move.w	(v_screenposy).w,d0
000089B6 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000089BA 6300                       		bls.s	loc_6DA0
000089BC 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000089C0 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000089C6                            
000089C6                            loc_6DA0:
000089C6 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000089CA 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000089D0                            
000089D0                            DLE_NoChg:
000089D0 4E75                       		rts	
000089D2                            ; ===========================================================================
000089D2                            
000089D2                            loc_6DAC:
000089D2 3038 F704                  		move.w	(v_screenposy).w,d0
000089D6 5040                       		addq.w	#8,d0
000089D8 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
000089DC 6500                       		bcs.s	loc_6DC4
000089DE 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000089E4 6700                       		beq.s	loc_6DC4
000089E6 D241                       		add.w	d1,d1
000089E8 D241                       		add.w	d1,d1
000089EA                            
000089EA                            loc_6DC4:
000089EA D378 F72E                  		add.w	d1,(v_limitbtm2).w
000089EE 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000089F4 4E75                       		rts	
000089F6                            ; End of function DynamicLevelEvents
000089F6                            
000089F6                            ; ===========================================================================
000089F6                            ; ---------------------------------------------------------------------------
000089F6                            ; Offset index for dynamic level events
000089F6                            ; ---------------------------------------------------------------------------
000089F6 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000089FA 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000089FE 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008A02 0000                       		dc.w DLE_Ending-DLE_Index
00008A04                            ; ===========================================================================
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Green	Hill Zone dynamic level events
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            
00008A04                            DLE_GHZ:
00008A04 7000                       		moveq	#0,d0
00008A06 1038 FE11                  		move.b	(v_act).w,d0
00008A0A D040                       		add.w	d0,d0
00008A0C 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008A10 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008A14                            ; ===========================================================================
00008A14 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008A16 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008A18 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008A1A                            ; ===========================================================================
00008A1A                            
00008A1A                            DLE_GHZ1:
00008A1A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008A20 6600                       		bne.s	gohere
00008A22 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008A28 4E75                       		rts
00008A2A                            gohere:
00008A2A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008A30 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008A36 6500                       		bcs.s	locret_6E08	; if not, branch
00008A38 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008A3E                            
00008A3E                            locret_6E08:
00008A3E 4E75                       		rts	
00008A40                            ; ===========================================================================
00008A40                            
00008A40                            DLE_GHZ2:
00008A40 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A46 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008A4C 6500                       		bcs.s	locret_6E3A
00008A4E 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008A54 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008A5A 6500                       		bcs.s	locret_6E3A
00008A5C 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008A62 6500                       		bcs.s	loc_6E9A
00008A64 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008A6A 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008A70 6400                       		bcc.s	loc_6E8F
00008A72 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008A78 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008A7E                            
00008A7E                            loc_6E8F:
00008A7E 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008A84 6400                       		bcc.s	loc_6E9A
00008A86                            
00008A86                            locret_6E3A:
00008A86 4E75                       		rts	
00008A88                            ; ===========================================================================
00008A88                            
00008A88                            loc_6E9A:
00008A88 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A8E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A92 4E75                       		rts		
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            DLE_GHZ3:
00008A94 7000                       		moveq	#0,d0
00008A96 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A9A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008A9E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008AA2                            ; ===========================================================================
00008AA2 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008AA4 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008AA6 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008AA8                            ; ===========================================================================
00008AA8                            
00008AA8                            DLE_GHZ3main:
00008AA8 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AAE 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008AB4 6500                       		bcs.s	locret_6E96
00008AB6 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008ABC 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008AC2 6500                       		bcs.s	locret_6E96
00008AC4 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008ACA 6500                       		bcs.s	loc_6E98
00008ACC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AD2 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008AD8 6400                       		bcc.s	loc_6E8E
00008ADA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AE0 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008AE6                            
00008AE6                            loc_6E8E:
00008AE6 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008AEC 6400                       		bcc.s	loc_6E98
00008AEE                            
00008AEE                            locret_6E96:
00008AEE 4E75                       		rts	
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            loc_6E98:
00008AF0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AF6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AFA 4E75                       		rts	
00008AFC                            ; ===========================================================================
00008AFC                            
00008AFC                            DLE_GHZ3boss:
00008AFC 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B02 6400                       		bcc.s	loc_6EB0
00008B04 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008B08                            
00008B08                            loc_6EB0:
00008B08 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008B0E 6500                       		bcs.s	locret_6EE8
00008B10 6100 0000                  		bsr.w	FindFreeObj
00008B14 6600                       		bne.s	loc_6ED0
00008B16 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008B1A 337C 1460 0008             		move.w	#$1460,obX(a1)
00008B20 337C 0280 000C             		move.w	#$280,obY(a1)
00008B26                            
00008B26                            loc_6ED0:
00008B2E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B34 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B38 7000                       		moveq	#plcid_Egg,d0
00008B3A 6000 8BAE                  		bra.w	AddPLC		; load boss patterns
00008B3E                            		
00008B3E                            ; ===========================================================================
00008B3E                            
00008B3E                            locret_6EE8:
00008B3E 4E75                       		rts	
00008B40                            ; ===========================================================================
00008B40                            
00008B40                            DLE_GHZ3end:
00008B40 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B46 337C 0280 000C             		move.w	#$280,obY(a1)
00008B4C 4E75                       		rts	
00008B4E                            ; ===========================================================================
00008B4E                            ; ---------------------------------------------------------------------------
00008B4E                            ; Labyrinth Zone dynamic level events
00008B4E                            ; ---------------------------------------------------------------------------
00008B4E                            
00008B4E                            DLE_LZ:
00008B4E 7000                       		moveq	#0,d0
00008B50 1038 FE11                  		move.b	(v_act).w,d0
00008B54 D040                       		add.w	d0,d0
00008B56 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008B5A 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008B5E                            ; ===========================================================================
00008B5E 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008B60 0000                       		dc.w DLE_LZ12-DLE_LZx
00008B62 0000                       		dc.w DLE_LZ3-DLE_LZx
00008B64 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008B66                            ; ===========================================================================
00008B66                            
00008B66                            DLE_LZ12:
00008B66 4E75                       		rts	
00008B68                            ; ===========================================================================
00008B68                            
00008B68                            DLE_LZ3:
00008B68 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008B6C 6700                       		beq.s	loc_6F28	; if not, branch
00008B6E 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008B72 0C11 0007                  		cmpi.b	#7,(a1)
00008B76 6700                       		beq.s	loc_6F28
00008B78 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008B84                            
00008B84                            loc_6F28:
00008B84 4A38 F742                  		tst.b	(v_dle_routine).w
00008B88 6600                       		bne.s	locret_6F64
00008B8A 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008B90 6500                       		bcs.s	locret_6F62
00008B92 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008B98 6400                       		bcc.s	locret_6F62
00008B9A 6100 0000                  		bsr.w	FindFreeObj
00008B9E 6600                       		bne.s	loc_6F4A
00008BA0 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008BA4                            
00008BA4                            loc_6F4A:
00008BAC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BB2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BB6 7000                       		moveq	#plcid_Boss,d0
00008BB8 6000 8B30                  		bra.w	AddPLC		; load boss patterns
00008BBC                            ; ===========================================================================
00008BBC                            
00008BBC                            locret_6F62:
00008BBC 4E75                       		rts	
00008BBE                            ; ===========================================================================
00008BBE                            
00008BBE                            locret_6F64:
00008BBE 4E75                       		rts	
00008BC0                            ; ===========================================================================
00008BC0                            
00008BC0                            DLE_SBZ3:
00008BC0 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008BC6 6500                       		bcs.s	locret_6F8C
00008BC8 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008BCE 6400                       		bcc.s	locret_6F8C	; if not, branch
00008BD0 4238 FE30                  		clr.b	(v_lastlamp).w
00008BD4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008BDA 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008BE0 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008BE6                            
00008BE6                            locret_6F8C:
00008BE6 4E75                       		rts	
00008BE8                            ; ===========================================================================
00008BE8                            ; ---------------------------------------------------------------------------
00008BE8                            ; Marble Zone dynamic level events
00008BE8                            ; ---------------------------------------------------------------------------
00008BE8                            
00008BE8                            DLE_MZ:
00008BE8 7000                       		moveq	#0,d0
00008BEA 1038 FE11                  		move.b	(v_act).w,d0
00008BEE D040                       		add.w	d0,d0
00008BF0 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008BF4 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008BF8                            ; ===========================================================================
00008BF8 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008BFA 0000                       		dc.w DLE_MZ2-DLE_MZx
00008BFC 0000                       		dc.w DLE_MZ3-DLE_MZx
00008BFE                            ; ===========================================================================
00008BFE                            
00008BFE                            DLE_MZ1:
00008BFE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C04 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008C0A 6500                       		bcs.s	locret_6FE8
00008C0C 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008C12                            
00008C12                            locret_6FE8:
00008C12 4E75                       		rts	
00008C14                            
00008C14                            ; ===========================================================================
00008C14                            
00008C14                            DLE_MZ2:
00008C14 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C1A 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008C20 6500                       		bcs.s	locret_6FE9
00008C22 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008C28                            		
00008C28                            locret_6FE9:
00008C28 4E75                       		rts	
00008C2A                            ; ===========================================================================
00008C2A                            
00008C2A                            DLE_MZ3:
00008C2A 7000                       		moveq	#0,d0
00008C2C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C30 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008C34 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008C38                            ; ===========================================================================
00008C38 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008C3A 0000                       		dc.w DLE_MZ3end-off_7098
00008C3C                            ; ===========================================================================
00008C3C                            
00008C3C                            DLE_MZ3boss:
00008C3C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008C42 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008C48 6500                       		bcs.s	locret_70E8
00008C4A 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008C50 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008C56 6500                       		bcs.s	locret_70E8
00008C58 6100 0000                  		bsr.w	FindFreeObj
00008C5C 6600                       		bne.s	loc_70D0
00008C5E 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008C62 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008C68 337C 022C 000C             		move.w	#$22C,obY(a1)
00008C6E                            
00008C6E                            loc_70D0:
00008C76 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C7C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C80 7000                       		moveq	#plcid_Boss,d0
00008C82 6000 8A66                  		bra.w	AddPLC		; load boss patterns
00008C86                            ; ===========================================================================
00008C86                            
00008C86                            locret_70E8:
00008C86 4E75                       		rts	
00008C88                            ; ===========================================================================
00008C88                            
00008C88                            DLE_MZ3end:
00008C88 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C8E 4E75                       		rts	
00008C90                            		
00008C90                            ; ===========================================================================
00008C90                            ; ---------------------------------------------------------------------------
00008C90                            ; Star Light Zone dynamic level events
00008C90                            ; ---------------------------------------------------------------------------
00008C90                            
00008C90                            DLE_SLZ:
00008C90 7000                       		moveq	#0,d0
00008C92 1038 FE11                  		move.b	(v_act).w,d0
00008C96 D040                       		add.w	d0,d0
00008C98 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008C9C 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008CA0                            ; ===========================================================================
00008CA0 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008CA2 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008CA4 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008CA6                            ; ===========================================================================
00008CA6                            
00008CA6                            DLE_SLZ12:
00008CA6 4E75                       		rts	
00008CA8                            ; ===========================================================================
00008CA8                            
00008CA8                            DLE_SLZ3:
00008CA8 7000                       		moveq	#0,d0
00008CAA 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CAE 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008CB2 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008CB6                            ; ===========================================================================
00008CB6 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008CB8 0000                       		dc.w DLE_SLZ3boss-off_7118
00008CBA 0000                       		dc.w DLE_SLZ3end-off_7118
00008CBC                            ; ===========================================================================
00008CBC                            
00008CBC                            DLE_SLZ3main:
00008CBC 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008CC2 6500                       		bcs.s	locret_7130
00008CC4 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CCA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CCE                            
00008CCE                            locret_7130:
00008CCE 4E75                       		rts	
00008CD0                            ; ===========================================================================
00008CD0                            
00008CD0                            DLE_SLZ3boss:
00008CD0 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008CD6 6500                       		bcs.s	locret_715C
00008CD8 6100 0000                  		bsr.w	FindFreeObj
00008CDC 6600                       		bne.s	loc_7144
00008CDE 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008CE2                            
00008CE2                            loc_7144:
00008CEA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CF0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CF4 7000                       		moveq	#plcid_Boss,d0
00008CF6 6000 89F2                  		bra.w	AddPLC		; load boss patterns
00008CFA                            ; ===========================================================================
00008CFA                            
00008CFA                            locret_715C:
00008CFA 4E75                       		rts	
00008CFC                            ; ===========================================================================
00008CFC                            
00008CFC                            DLE_SLZ3end:
00008CFC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D02 4E75                       		rts
00008D04 4E75                       		rts
00008D06                            ; ===========================================================================
00008D06                            ; ---------------------------------------------------------------------------
00008D06                            ; Spring Yard Zone dynamic level events
00008D06                            ; ---------------------------------------------------------------------------
00008D06                            
00008D06                            DLE_SYZ:
00008D06 7000                       		moveq	#0,d0
00008D08 1038 FE11                  		move.b	(v_act).w,d0
00008D0C D040                       		add.w	d0,d0
00008D0E 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008D12 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008D16                            ; ===========================================================================
00008D16 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008D18 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008D1A 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008D1C                            ; ===========================================================================
00008D1C                            
00008D1C                            DLE_SYZ1:
00008D1C 4E75                       		rts	
00008D1E                            ; ===========================================================================
00008D1E                            
00008D1E                            DLE_SYZ2:
00008D1E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D24 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008D2A 6500                       		bcs.s	locret_71A2
00008D2C 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008D32 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008D38 6500                       		bcs.s	locret_71A2
00008D3A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D40                            
00008D40                            locret_71A2:
00008D40 4E75                       		rts	
00008D42                            ; ===========================================================================
00008D42                            
00008D42                            DLE_SYZ3:
00008D42 7000                       		moveq	#0,d0
00008D44 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D48 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008D4C 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008D50                            ; ===========================================================================
00008D50 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008D52 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008D54 0000                       		dc.w DLE_SYZ3end-off_71B2
00008D56                            ; ===========================================================================
00008D56                            
00008D56                            DLE_SYZ3main:
00008D56 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008D5C 6500                       		bcs.s	locret_71CE
00008D5E 6100 0000                  		bsr.w	FindFreeObj
00008D62 6600                       		bne.s	locret_71CE
00008D64 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008D68 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D6C                            
00008D6C                            locret_71CE:
00008D6C 4E75                       		rts	
00008D6E                            ; ===========================================================================
00008D6E                            
00008D6E                            DLE_SYZ3boss:
00008D6E 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008D74 6500                       		bcs.s	locret_7200
00008D76 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008D7C 6100 0000                  		bsr.w	FindFreeObj
00008D80 6600                       		bne.s	loc_71EC
00008D82 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008D86 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D8A                            
00008D8A                            loc_71EC:
00008D92 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D98 7000                       		moveq	#plcid_Boss,d0
00008D9A 6000 894E                  		bra.w	AddPLC		; load boss patterns
00008D9E                            ; ===========================================================================
00008D9E                            
00008D9E                            locret_7200:
00008D9E 4E75                       		rts	
00008DA0                            ; ===========================================================================
00008DA0                            
00008DA0                            DLE_SYZ3end:
00008DA0 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DA6 4E75                       		rts	
00008DA8                            ; ===========================================================================
00008DA8                            ; ---------------------------------------------------------------------------
00008DA8                            ; Scrap	Brain Zone dynamic level events
00008DA8                            ; ---------------------------------------------------------------------------
00008DA8                            
00008DA8                            DLE_SBZ:
00008DA8 7000                       		moveq	#0,d0
00008DAA 1038 FE11                  		move.b	(v_act).w,d0
00008DAE D040                       		add.w	d0,d0
00008DB0 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008DB4 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008DB8                            ; ===========================================================================
00008DB8 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008DBA 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008DBC 0000                       		dc.w DLE_FZ-DLE_SBZx
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            DLE_SBZ1:
00008DBE 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008DC4 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008DCA 6500                       		bcs.s	locret_7242
00008DCC 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008DD2 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008DD8 6500                       		bcs.s	locret_7242
00008DDA 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008DE0                            
00008DE0                            locret_7242:
00008DE0 4E75                       		rts	
00008DE2                            ; ===========================================================================
00008DE2                            
00008DE2                            DLE_SBZ2:
00008DE2 7000                       		moveq	#0,d0
00008DE4 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DE8 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008DEC 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008DF0                            ; ===========================================================================
00008DF0 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008DF2 0000                       		dc.w DLE_SBZ2boss-off_7252
00008DF4 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008DF6 0000                       		dc.w DLE_SBZ2end-off_7252
00008DF8                            ; ===========================================================================
00008DF8                            
00008DF8                            DLE_SBZ2main:
00008DF8 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008DFE 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008E04 6500                       		bcs.s	locret_727A
00008E06 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008E0C 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008E12 6500                       		bcs.s	locret_727A
00008E14 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E18                            
00008E18                            locret_727A:
00008E18 4E75                       		rts	
00008E1A                            ; ===========================================================================
00008E1A                            
00008E1A                            DLE_SBZ2boss:
00008E1A 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008E20 6500                       		bcs.s	locret_7298
00008E22 6100 0000                  		bsr.w	FindFreeObj
00008E26 6600                       		bne.s	locret_7298
00008E28 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008E2C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E30 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008E32 6000 88B6                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008E36                            ; ===========================================================================
00008E36                            
00008E36                            locret_7298:
00008E36 4E75                       		rts	
00008E38                            ; ===========================================================================
00008E38                            
00008E38                            DLE_SBZ2boss2:
00008E38 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008E3E 6500                       		bcs.s	loc_72B6
00008E40 6100 0000                  		bsr.w	FindFreeObj
00008E44 6600                       		bne.s	loc_72B0
00008E46 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008E4A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E4E                            
00008E4E                            loc_72B0:
00008E4E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E54                            
00008E54                            loc_72B6:
00008E54 6000                       		bra.s	loc_72C2
00008E56                            ; ===========================================================================
00008E56                            
00008E56                            DLE_SBZ2end:
00008E56 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008E5C 6500                       		bcs.s	loc_72C2
00008E5E 4E75                       		rts	
00008E60                            ; ===========================================================================
00008E60                            
00008E60                            loc_72C2:
00008E60 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E66 4E75                       		rts	
00008E68                            ; ===========================================================================
00008E68                            
00008E68                            DLE_FZ:
00008E68 7000                       		moveq	#0,d0
00008E6A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E6E 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008E72 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008E76                            ; ===========================================================================
00008E76 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008E7A 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008E7E 0000                       		dc.w DLE_FZend2-off_72D8
00008E80                            ; ===========================================================================
00008E80                            
00008E80                            DLE_FZmain:
00008E80 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008E86 6500                       		bcs.s	loc_72F4
00008E88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E8C 7000                       		moveq	#plcid_FZBoss,d0
00008E8E 6100 885A                  		bsr.w	AddPLC		; load FZ boss patterns
00008E92                            
00008E92                            loc_72F4:
00008E92 60CC                       		bra.s	loc_72C2
00008E94                            ; ===========================================================================
00008E94                            
00008E94                            DLE_FZboss:
00008E94 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008E9A 6500                       		bcs.s	loc_7312
00008E9C 6100 0000                  		bsr.w	FindFreeObj
00008EA0 6600                       		bne.s	loc_7312
00008EA2 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008EA6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EAA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EB0                            
00008EB0                            loc_7312:
00008EB0 60AE                       		bra.s	loc_72C2
00008EB2                            ; ===========================================================================
00008EB2                            
00008EB2                            DLE_FZend:
00008EB2 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008EB8 6500                       		bcs.s	loc_7320
00008EBA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EBE                            
00008EBE                            loc_7320:
00008EBE 60A0                       		bra.s	loc_72C2
00008EC0                            ; ===========================================================================
00008EC0                            
00008EC0                            locret_7322:
00008EC0 4E75                       		rts	
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            DLE_FZend2:
00008EC2 609C                       		bra.s	loc_72C2
00008EC4                            ; ===========================================================================
00008EC4                            ; ---------------------------------------------------------------------------
00008EC4                            ; Ending sequence dynamic level events (empty)
00008EC4                            ; ---------------------------------------------------------------------------
00008EC4                            
00008EC4                            DLE_Ending:
00008EC4 4E75                       		rts	
00008EC4 4E75                       		rts	
00008EC6                            
00008EC6                            		include	"_incObj\11 Bridge (part 1).asm"
00008EC6                            ; ---------------------------------------------------------------------------
00008EC6                            ; Object 11 - GHZ bridge
00008EC6                            ; ---------------------------------------------------------------------------
00008EC6                            
00008EC6                            Bridge:
00008EC6 7000                       		moveq	#0,d0
00008EC8 1028 0024                  		move.b	obRoutine(a0),d0
00008ECC 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008ED0 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008ED4                            ; ===========================================================================
00008ED4 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008ED8 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008EDC 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008EE0                            ; ===========================================================================
00008EE0                            
00008EE0                            Bri_Main:	; Routine 0
00008EE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00008EE4 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008EEC 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008EF2 117C 0004 0001             		move.b	#4,obRender(a0)
00008EF8 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008EFE 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008F04 3428 000C                  		move.w	obY(a0),d2
00008F08 3628 0008                  		move.w	obX(a0),d3
00008F0C 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008F0E 45E8 0028                  		lea	obSubtype(a0),a2
00008F12 7200                       		moveq	#0,d1
00008F14 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008F16 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008F1A 3001                       		move.w	d1,d0
00008F1C E248                       		lsr.w	#1,d0
00008F1E E948                       		lsl.w	#4,d0
00008F20 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008F22 5501                       		subq.b	#2,d1
00008F24 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008F26                            
00008F26                            @buildloop:
00008F26 6100 0000                  		bsr.w	FindFreeObj
00008F2A 6600                       		bne.s	Bri_Action
00008F2C 5228 0028                  		addq.b	#1,obSubtype(a0)
00008F30 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008F34 6600                       		bne.s	@notleftmost	; if not, branch
00008F36                            
00008F36 0643 0010                  		addi.w	#$10,d3
00008F3A 3142 000C                  		move.w	d2,obY(a0)
00008F3E 3142 003C                  		move.w	d2,$3C(a0)
00008F42 3A08                       		move.w	a0,d5
00008F44 0445 D000                  		subi.w	#$D000,d5
00008F48 EC4D                       		lsr.w	#6,d5
00008F4A 0245 007F                  		andi.w	#$7F,d5
00008F4E 14C5                       		move.b	d5,(a2)+
00008F50 5228 0028                  		addq.b	#1,obSubtype(a0)
00008F54                            
00008F54                            	@notleftmost:
00008F54 3A09                       		move.w	a1,d5
00008F56 0445 D000                  		subi.w	#$D000,d5
00008F5A EC4D                       		lsr.w	#6,d5
00008F5C 0245 007F                  		andi.w	#$7F,d5
00008F60 14C5                       		move.b	d5,(a2)+
00008F62 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008F68 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008F6A 3342 000C                  		move.w	d2,obY(a1)
00008F6E 3342 003C                  		move.w	d2,$3C(a1)
00008F72 3343 0008                  		move.w	d3,obX(a1)
00008F76 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008F7E 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008F84 137C 0004 0001             		move.b	#4,obRender(a1)
00008F8A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008F90 137C 0008 0014             		move.b	#8,obActWid(a1)
00008F96 0643 0010                  		addi.w	#$10,d3
00008F9A 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008F9E                            
00008F9E                            Bri_Action:	; Routine 2
00008F9E 6100                       		bsr.s	Bri_Solid
00008FA0 4A28 003E                  		tst.b	$3E(a0)
00008FA4 6700                       		beq.s	@display
00008FA6 5928 003E                  		subq.b	#4,$3E(a0)
00008FAA 6100 0000                  		bsr.w	Bri_Bend
00008FAE                            
00008FAE                            	@display:
00008FAE 6100 0000                  		bsr.w	DisplaySprite
00008FB2 6000 0000                  		bra.w	Bri_ChkDel
00008FB6                            
00008FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB6                            
00008FB6                            
00008FB6                            Bri_Solid:
00008FB6 7200                       		moveq	#0,d1
00008FB8 1228 0028                  		move.b	obSubtype(a0),d1
00008FBC E749                       		lsl.w	#3,d1
00008FBE 3401                       		move.w	d1,d2
00008FC0 5041                       		addq.w	#8,d1
00008FC2 D442                       		add.w	d2,d2
00008FC4 43F8 D000                  		lea	(v_player).w,a1
00008FC8 4A69 0012                  		tst.w	obVelY(a1)
00008FCC 6B00 0000                  		bmi.w	Plat_Exit
00008FD0 3029 0008                  		move.w	obX(a1),d0
00008FD4 9068 0008                  		sub.w	obX(a0),d0
00008FD8 D041                       		add.w	d1,d0
00008FDA 6B00 0000                  		bmi.w	Plat_Exit
00008FDE B042                       		cmp.w	d2,d0
00008FE0 6400 0000                  		bcc.w	Plat_Exit
00008FE4 6000                       		bra.s	Plat_NoXCheck
00008FE6                            ; End of function Bri_Solid
00008FE6                            ; End of function Bri_Solid
00008FE6                            
00008FE6                            ; ---------------------------------------------------------------------------
00008FE6                            ; Platform subroutine
00008FE6                            ; ---------------------------------------------------------------------------
00008FE6                            
00008FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FE6                            
00008FE6                            PlatformObject:
00008FE6 43F8 D000                  		lea	(v_player).w,a1
00008FEA 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008FEE 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008FF2                            
00008FF2                            ;		perform x-axis range check
00008FF2 3029 0008                  		move.w	obX(a1),d0
00008FF6 9068 0008                  		sub.w	obX(a0),d0
00008FFA D041                       		add.w	d1,d0
00008FFC 6B00 0000                  		bmi.w	Plat_Exit
00009000 D241                       		add.w	d1,d1
00009002 B041                       		cmp.w	d1,d0
00009004 6400 0000                  		bhs.w	Plat_Exit
00009008                            
00009008                            	Plat_NoXCheck:
00009008 3028 000C                  		move.w	obY(a0),d0
0000900C 5140                       		subq.w	#8,d0
0000900E                            
0000900E                            Platform3:
0000900E                            ;		perform y-axis range check
0000900E 3429 000C                  		move.w	obY(a1),d2
00009012 1229 0016                  		move.b	obHeight(a1),d1
00009016 4881                       		ext.w	d1
00009018 D242                       		add.w	d2,d1
0000901A 5841                       		addq.w	#4,d1
0000901C 9041                       		sub.w	d1,d0
0000901E 6200 0000                  		bhi.w	Plat_Exit
00009022 0C40 FFF0                  		cmpi.w	#-$10,d0
00009026 6500 0000                  		blo.w	Plat_Exit
0000902A                            
0000902A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000902E 6B00 0000                  		bmi.w	Plat_Exit
00009032 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00009038 6400 0000                  		bhs.w	Plat_Exit
0000903C D440                       		add.w	d0,d2
0000903E 5642                       		addq.w	#3,d2
00009040 3342 000C                  		move.w	d2,obY(a1)
00009044 5428 0024                  		addq.b	#2,obRoutine(a0)
00009048                            
00009048                            loc_74AE:
00009048 0829 0003 0022             		btst	#3,obStatus(a1)
0000904E 6700                       		beq.s	loc_74DC
00009050 7000                       		moveq	#0,d0
00009052 1029 003D                  		move.b	$3D(a1),d0
00009056 ED48                       		lsl.w	#6,d0
00009058 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000905E 2440                       		movea.l	d0,a2
00009060 08AA 0003 0022             		bclr	#3,obStatus(a2)
00009066 422A 0025                  		clr.b	ob2ndRout(a2)
0000906A 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00009070 6600                       		bne.s	loc_74DC
00009072 552A 0024                  		subq.b	#2,obRoutine(a2)
00009076                            
00009076                            loc_74DC:
00009076 3008                       		move.w	a0,d0
00009078 0440 D000                  		subi.w	#-$3000,d0
0000907C EC48                       		lsr.w	#6,d0
0000907E 0240 007F                  		andi.w	#$7F,d0
00009082 1340 003D                  		move.b	d0,$3D(a1)
00009086 137C 0000 0026             		move.b	#0,obAngle(a1)
0000908C 337C 0000 0012             		move.w	#0,obVelY(a1)
00009092 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00009098 0829 0001 0022             		btst	#1,obStatus(a1)
0000909E 6700                       		beq.s	loc_7512
000090A0 2F08                       		move.l	a0,-(sp)
000090A2 2049                       		movea.l	a1,a0
000090A4 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
000090AA 205F                       		movea.l	(sp)+,a0
000090AC                            
000090AC                            loc_7512:
000090AC 08E9 0003 0022             		bset	#3,obStatus(a1)
000090B2 08E8 0003 0022             		bset	#3,obStatus(a0)
000090B8                            
000090B8                            Plat_Exit:
000090B8 4E75                       		rts	
000090BA                            ; End of function PlatformObject
000090BA                            
000090BA                            ; ---------------------------------------------------------------------------
000090BA                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000090BA                            ; ---------------------------------------------------------------------------
000090BA                            
000090BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090BA                            
000090BA                            
000090BA                            SlopeObject:
000090BA 43F8 D000                  		lea	(v_player).w,a1
000090BE 4A69 0012                  		tst.w	obVelY(a1)
000090C2 6B00 FFF4                  		bmi.w	Plat_Exit
000090C6 3029 0008                  		move.w	obX(a1),d0
000090CA 9068 0008                  		sub.w	obX(a0),d0
000090CE D041                       		add.w	d1,d0
000090D0 6BE6                       		bmi.s	Plat_Exit
000090D2 D241                       		add.w	d1,d1
000090D4 B041                       		cmp.w	d1,d0
000090D6 64E0                       		bhs.s	Plat_Exit
000090D8 0828 0000 0001             		btst	#0,obRender(a0)
000090DE 6700                       		beq.s	loc_754A
000090E0 4640                       		not.w	d0
000090E2 D041                       		add.w	d1,d0
000090E4                            
000090E4                            loc_754A:
000090E4 E248                       		lsr.w	#1,d0
000090E6 7600                       		moveq	#0,d3
000090E8 1632 0000                  		move.b	(a2,d0.w),d3
000090EC 3028 000C                  		move.w	obY(a0),d0
000090F0 9043                       		sub.w	d3,d0
000090F2 6000 FF1A                  		bra.w	Platform3
000090F6                            ; End of function SlopeObject
000090F6                            
000090F6                            
000090F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090F6                            
000090F6                            
000090F6                            Swing_Solid:
000090F6 43F8 D000                  		lea	(v_player).w,a1
000090FA 4A69 0012                  		tst.w	obVelY(a1)
000090FE 6B00 FFB8                  		bmi.w	Plat_Exit
00009102 3029 0008                  		move.w	obX(a1),d0
00009106 9068 0008                  		sub.w	obX(a0),d0
0000910A D041                       		add.w	d1,d0
0000910C 6B00 FFAA                  		bmi.w	Plat_Exit
00009110 D241                       		add.w	d1,d1
00009112 B041                       		cmp.w	d1,d0
00009114 6400 FFA2                  		bhs.w	Plat_Exit
00009118 3028 000C                  		move.w	obY(a0),d0
0000911C 9043                       		sub.w	d3,d0
0000911E 6000 FEEE                  		bra.w	Platform3
00009122                            ; End of function Obj15_Solid
00009122                            
00009122                            ; ===========================================================================
00009122                            
00009122                            		include	"_incObj\11 Bridge (part 2).asm"
00009122                            
00009122                            Bri_Platform:	; Routine 4
00009122 6100                       		bsr.s	Bri_WalkOff
00009124 6100 0000                  		bsr.w	DisplaySprite
00009128 6000 0000                  		bra.w	Bri_ChkDel
0000912C                            
0000912C                            ; ---------------------------------------------------------------------------
0000912C                            ; Subroutine allowing Sonic to walk off a bridge
0000912C                            ; ---------------------------------------------------------------------------
0000912C                            
0000912C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000912C                            
0000912C                            
0000912C                            Bri_WalkOff:
0000912C 7200                       		moveq	#0,d1
0000912E 1228 0028                  		move.b	obSubtype(a0),d1
00009132 E749                       		lsl.w	#3,d1
00009134 3401                       		move.w	d1,d2
00009136 5041                       		addq.w	#8,d1
00009138 6100                       		bsr.s	ExitPlatform2
0000913A 6400                       		bcc.s	locret_75BE
0000913C E848                       		lsr.w	#4,d0
0000913E 1140 003F                  		move.b	d0,$3F(a0)
00009142 1028 003E                  		move.b	$3E(a0),d0
00009146 0C00 0040                  		cmpi.b	#$40,d0
0000914A 6700                       		beq.s	loc_75B6
0000914C 5828 003E                  		addq.b	#4,$3E(a0)
00009150                            
00009150                            loc_75B6:
00009150 6100 0000                  		bsr.w	Bri_Bend
00009154 6100 0000                  		bsr.w	Bri_MoveSonic
00009158                            
00009158                            locret_75BE:
00009158 4E75                       		rts	
0000915A                            ; End of function Bri_WalkOff
0000915A                            ; End of function Bri_WalkOff
0000915A                            
0000915A                            ; ---------------------------------------------------------------------------
0000915A                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000915A                            ; ---------------------------------------------------------------------------
0000915A                            
0000915A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000915A                            
0000915A                            
0000915A                            ExitPlatform:
0000915A 3401                       		move.w	d1,d2
0000915C                            
0000915C                            ExitPlatform2:
0000915C D442                       		add.w	d2,d2
0000915E 43F8 D000                  		lea	(v_player).w,a1
00009162 0829 0001 0022             		btst	#1,obStatus(a1)
00009168 6600                       		bne.s	loc_75E0
0000916A 3029 0008                  		move.w	obX(a1),d0
0000916E 9068 0008                  		sub.w	obX(a0),d0
00009172 D041                       		add.w	d1,d0
00009174 6B00                       		bmi.s	loc_75E0
00009176 B042                       		cmp.w	d2,d0
00009178 6500                       		blo.s	locret_75F2
0000917A                            
0000917A                            loc_75E0:
0000917A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009180 117C 0002 0024             		move.b	#2,obRoutine(a0)
00009186 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000918C                            
0000918C                            locret_75F2:
0000918C 4E75                       		rts	
0000918E                            ; End of function ExitPlatform
0000918E                            
0000918E                            		include	"_incObj\11 Bridge (part 3).asm"
0000918E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000918E                            
0000918E                            
0000918E                            Bri_MoveSonic:
0000918E 7000                       		moveq	#0,d0
00009190 1028 003F                  		move.b	$3F(a0),d0
00009194 1030 0029                  		move.b	$29(a0,d0.w),d0
00009198 ED48                       		lsl.w	#6,d0
0000919A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000091A0 2440                       		movea.l	d0,a2
000091A2 43F8 D000                  		lea	(v_player).w,a1
000091A6 302A 000C                  		move.w	obY(a2),d0
000091AA 5140                       		subq.w	#8,d0
000091AC 7200                       		moveq	#0,d1
000091AE 1229 0016                  		move.b	obHeight(a1),d1
000091B2 9041                       		sub.w	d1,d0
000091B4 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
000091B8 4E75                       		rts	
000091BA                            ; End of function Bri_MoveSonic
000091BA                            
000091BA                            
000091BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091BA                            
000091BA                            
000091BA                            Bri_Bend:
000091BA 1028 003E                  		move.b	$3E(a0),d0
000091BE 6100 A872                  		bsr.w	CalcSine
000091C2 3800                       		move.w	d0,d4
000091C4 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000091CA 7000                       		moveq	#0,d0
000091CC 1028 0028                  		move.b	obSubtype(a0),d0
000091D0 E948                       		lsl.w	#4,d0
000091D2 7600                       		moveq	#0,d3
000091D4 1628 003F                  		move.b	$3F(a0),d3
000091D8 3403                       		move.w	d3,d2
000091DA D640                       		add.w	d0,d3
000091DC 7A00                       		moveq	#0,d5
000091DE 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000091E4 1A35 3000                  		move.b	(a5,d3.w),d5
000091E8 0243 000F                  		andi.w	#$F,d3
000091EC E94B                       		lsl.w	#4,d3
000091EE 47F4 3000                  		lea	(a4,d3.w),a3
000091F2 45E8 0029                  		lea	$29(a0),a2
000091F6                            
000091F6                            loc_765C:
000091F6 7000                       		moveq	#0,d0
000091F8 101A                       		move.b	(a2)+,d0
000091FA ED48                       		lsl.w	#6,d0
000091FC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009202 2240                       		movea.l	d0,a1
00009204 7000                       		moveq	#0,d0
00009206 101B                       		move.b	(a3)+,d0
00009208 5240                       		addq.w	#1,d0
0000920A C0C5                       		mulu.w	d5,d0
0000920C C0C4                       		mulu.w	d4,d0
0000920E 4840                       		swap	d0
00009210 D069 003C                  		add.w	$3C(a1),d0
00009214 3340 000C                  		move.w	d0,obY(a1)
00009218 51CA FFDC                  		dbf	d2,loc_765C
0000921C 7000                       		moveq	#0,d0
0000921E 1028 0028                  		move.b	obSubtype(a0),d0
00009222 7600                       		moveq	#0,d3
00009224 1628 003F                  		move.b	$3F(a0),d3
00009228 5203                       		addq.b	#1,d3
0000922A 9600                       		sub.b	d0,d3
0000922C 4403                       		neg.b	d3
0000922E 6B00                       		bmi.s	locret_76CA
00009230 3403                       		move.w	d3,d2
00009232 E94B                       		lsl.w	#4,d3
00009234 47F4 3000                  		lea	(a4,d3.w),a3
00009238 D6C2                       		adda.w	d2,a3
0000923A 5342                       		subq.w	#1,d2
0000923C 6500                       		bcs.s	locret_76CA
0000923E                            
0000923E                            loc_76A4:
0000923E 7000                       		moveq	#0,d0
00009240 101A                       		move.b	(a2)+,d0
00009242 ED48                       		lsl.w	#6,d0
00009244 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000924A 2240                       		movea.l	d0,a1
0000924C 7000                       		moveq	#0,d0
0000924E 1023                       		move.b	-(a3),d0
00009250 5240                       		addq.w	#1,d0
00009252 C0C5                       		mulu.w	d5,d0
00009254 C0C4                       		mulu.w	d4,d0
00009256 4840                       		swap	d0
00009258 D069 003C                  		add.w	$3C(a1),d0
0000925C 3340 000C                  		move.w	d0,obY(a1)
00009260 51CA FFDC                  		dbf	d2,loc_76A4
00009264                            
00009264                            locret_76CA:
00009264 4E75                       		rts	
00009266                            ; End of function Bri_Bend
00009266                            
00009266                            ; ===========================================================================
00009266                            ; ---------------------------------------------------------------------------
00009266                            ; GHZ bridge-bending data
00009266                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009266                            ; ---------------------------------------------------------------------------
00009266                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009376                            		even
00009376                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009476                            		even
00009476                            
00009476                            ; ===========================================================================
00009476                            
00009476                            Bri_ChkDel:
00009494 4E75                       		rts	
00009496                            ; ===========================================================================
00009496                            
00009496                            @deletebridge:
00009496 7400                       		moveq	#0,d2
00009498 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
0000949C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000949E 5302                       		subq.b	#1,d2		; subtract 1
000094A0 6500                       		bcs.s	@delparent
000094A2                            
000094A2                            	@loop:
000094A2 7000                       		moveq	#0,d0
000094A4 101A                       		move.b	(a2)+,d0
000094A6 ED48                       		lsl.w	#6,d0
000094A8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000094AE 2240                       		movea.l	d0,a1
000094B0 B048                       		cmp.w	a0,d0
000094B2 6700                       		beq.s	@skipdel
000094B4 6100 0000                  		bsr.w	DeleteChild
000094B8                            
000094B8                            	@skipdel:
000094B8 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000094BC                            
000094BC                            @delparent:
000094BC 6100 0000                  		bsr.w	DeleteObject
000094C0 4E75                       		rts	
000094C2                            ; ===========================================================================
000094C2                            
000094C2                            Bri_Delete:	; Routine 6, 8
000094C2 6100 0000                  		bsr.w	DeleteObject
000094C6 4E75                       		rts	
000094C8                            ; ===========================================================================
000094C8                            
000094C8                            Bri_Display:	; Routine $A
000094C8 6100 0000                  		bsr.w	DisplaySprite
000094CC 4E75                       		rts	
000094CC 4E75                       		rts	
000094CE                            Map_Bri:	include	"_maps\Bridge.asm"
000094CE                            ; ---------------------------------------------------------------------------
000094CE                            ; Sprite mappings - GHZ	bridge
000094CE                            ; ---------------------------------------------------------------------------
000094CE                            Map_Bri_internal:
000094CE 0000                       		dc.w M_Bri_Log-Map_Bri_internal
000094D0 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
000094D2 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
000094D4 01                         M_Bri_Log:	dc.b 1
000094D5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
000094DA 02                         M_Bri_Stump:	dc.b 2
000094DB F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
000094E0 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000094E5 01                         M_Bri_Rope:	dc.b 1
000094E6 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
000094EC 00                         		even
000094EC 00                         		even
000094EC                            
000094EC                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
000094EC                            ; ---------------------------------------------------------------------------
000094EC                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000094EC                            ;	    - spiked ball on a chain (SBZ)
000094EC                            ; ---------------------------------------------------------------------------
000094EC                            
000094EC                            SwingingPlatform:
000094EC 7000                       		moveq	#0,d0
000094EE 1028 0024                  		move.b	obRoutine(a0),d0
000094F2 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
000094F6 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
000094FA                            ; ===========================================================================
000094FA 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000094FE 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009502 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009506 0000                       		dc.w Swing_Action-Swing_Index
00009508                            
00009508 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009508 =00000038                  swing_origY:	equ $38		; original y-axis position
00009508                            ; ===========================================================================
00009508                            
00009508                            Swing_Main:	; Routine 0
00009508 5428 0024                  		addq.b	#2,obRoutine(a0)
0000950C 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009514 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000951A 117C 0004 0001             		move.b	#4,obRender(a0)
00009520 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009526 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000952C 117C 0008 0016             		move.b	#8,obHeight(a0)
00009532 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009538 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000953E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009544 6600                       		bne.s	@notSLZ
00009546                            
00009546 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000954E 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009554 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000955A 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009560 117C 0099 0020             		move.b	#$99,obColType(a0)
00009566                            
00009566                            	@notSLZ:
00009566 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000956C 6600                       		bne.s	@length
0000956E                            
0000956E 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009576 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000957C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009582 117C 0018 0016             		move.b	#$18,obHeight(a0)
00009588 117C 0086 0020             		move.b	#$86,obColType(a0)
0000958E 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009594                            
00009594                            @length:
00009594 1810                       		move.b	0(a0),d4
00009596 7200                       		moveq	#0,d1
00009598 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000959C 1212                       		move.b	(a2),d1		; move a2 to d1
0000959E 3F01                       		move.w	d1,-(sp)
000095A0 0241 000F                  		andi.w	#$F,d1
000095A4 14FC 0000                  		move.b	#0,(a2)+
000095A8 3601                       		move.w	d1,d3
000095AA E94B                       		lsl.w	#4,d3
000095AC 5003                       		addq.b	#8,d3
000095AE 1143 003C                  		move.b	d3,$3C(a0)
000095B2 5103                       		subq.b	#8,d3
000095B4 4A28 001A                  		tst.b	obFrame(a0)
000095B8 6700                       		beq.s	@makechain
000095BA 5003                       		addq.b	#8,d3
000095BC 5341                       		subq.w	#1,d1
000095BE                            
000095BE                            @makechain:
000095BE 6100 0000                  		bsr.w	FindFreeObj
000095C2 6600                       		bne.s	@fail
000095C4 5228 0028                  		addq.b	#1,obSubtype(a0)
000095C8 3A09                       		move.w	a1,d5
000095CA 0445 D000                  		subi.w	#$D000,d5
000095CE EC4D                       		lsr.w	#6,d5
000095D0 0245 007F                  		andi.w	#$7F,d5
000095D4 14C5                       		move.b	d5,(a2)+
000095D6 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000095DC 1284                       		move.b	d4,0(a1)	; load swinging	object
000095DE 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000095E4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000095EA 08A9 0006 0002             		bclr	#6,obGfx(a1)
000095F0 137C 0004 0001             		move.b	#4,obRender(a1)
000095F6 337C 0200 0018             		move.w	#$200,obPriority(a1)
000095FC 137C 0008 0014             		move.b	#8,obActWid(a1)
00009602 137C 0001 001A             		move.b	#1,obFrame(a1)
00009608 1343 003C                  		move.b	d3,$3C(a1)
0000960C 0403 0010                  		subi.b	#$10,d3
00009610 6400                       		bcc.s	@notanchor
00009612 137C 0002 001A             		move.b	#2,obFrame(a1)
00009618 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000961E 08E9 0006 0002             		bset	#6,obGfx(a1)
00009624                            
00009624                            	@notanchor:
00009624 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009628                            
00009628                            	@fail:
00009628 3A08                       		move.w	a0,d5
0000962A 0445 D000                  		subi.w	#$D000,d5
0000962E EC4D                       		lsr.w	#6,d5
00009630 0245 007F                  		andi.w	#$7F,d5
00009634 14C5                       		move.b	d5,(a2)+
00009636 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000963C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009642 321F                       		move.w	(sp)+,d1
00009644 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009648 6700                       		beq.s	@not1X	; if not, branch
0000964A 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009652 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009658 117C 0001 001A             		move.b	#1,obFrame(a0)
0000965E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009664 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000966A                            
0000966A                            	@not1X:
0000966A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009670 6700                       		beq.s	Swing_Action	; if yes, branch
00009672                            
00009672                            Swing_SetSolid:	; Routine 2
00009672 7200                       		moveq	#0,d1
00009674 1228 0014                  		move.b	obActWid(a0),d1
00009678 7600                       		moveq	#0,d3
0000967A 1628 0016                  		move.b	obHeight(a0),d3
0000967E 6100 FA76                  		bsr.w	Swing_Solid
00009682                            
00009682                            Swing_Action:	; Routine $C
00009682 6100 0000                  		bsr.w	Swing_Move
00009686 6100 0000                  		bsr.w	DisplaySprite
0000968A 6000 0000                  		bra.w	Swing_ChkDel
0000968E                            ; ===========================================================================
0000968E                            
0000968E                            Swing_Action2:	; Routine 4
0000968E 7200                       		moveq	#0,d1
00009690 1228 0014                  		move.b	obActWid(a0),d1
00009694 6100 FAC4                  		bsr.w	ExitPlatform
00009698 3F28 0008                  		move.w	obX(a0),-(sp)
0000969C 6100 0000                  		bsr.w	Swing_Move
000096A0 341F                       		move.w	(sp)+,d2
000096A2 7600                       		moveq	#0,d3
000096A4 1628 0016                  		move.b	obHeight(a0),d3
000096A8 5203                       		addq.b	#1,d3
000096AA 6100 0000                  		bsr.w	MvSonicOnPtfm
000096AE 6100 0000                  		bsr.w	DisplaySprite
000096B2 6000 0000                  		bra.w	Swing_ChkDel
000096B6                            
000096B6 4E75                       		rts
000096B6 4E75                       		rts
000096B8                            
000096B8                            ; ---------------------------------------------------------------------------
000096B8                            ; Subroutine to	change Sonic's position with a platform
000096B8                            ; ---------------------------------------------------------------------------
000096B8                            
000096B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096B8                            
000096B8                            
000096B8                            MvSonicOnPtfm:
000096B8 43F8 D000                  		lea	(v_player).w,a1
000096BC 3028 000C                  		move.w	obY(a0),d0
000096C0 9043                       		sub.w	d3,d0
000096C2 6000                       		bra.s	MvSonic2
000096C4                            ; End of function MvSonicOnPtfm
000096C4                            
000096C4                            ; ---------------------------------------------------------------------------
000096C4                            ; Subroutine to	change Sonic's position with a platform
000096C4                            ; ---------------------------------------------------------------------------
000096C4                            
000096C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096C4                            
000096C4                            
000096C4                            MvSonicOnPtfm2:
000096C4 43F8 D000                  		lea	(v_player).w,a1
000096C8 3028 000C                  		move.w	obY(a0),d0
000096CC 0440 0009                  		subi.w	#9,d0
000096D0                            
000096D0                            MvSonic2:
000096D0 4A38 F7C8                  		tst.b	(f_lockmulti).w
000096D4 6B00                       		bmi.s	locret_7B62
000096D6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000096DC 6400                       		bhs.s	locret_7B62
000096DE 4A78 FE08                  		tst.w	(v_debuguse).w
000096E2 6600                       		bne.s	locret_7B62
000096E4 7200                       		moveq	#0,d1
000096E6 1229 0016                  		move.b	obHeight(a1),d1
000096EA 9041                       		sub.w	d1,d0
000096EC 3340 000C                  		move.w	d0,obY(a1)
000096F0 9468 0008                  		sub.w	obX(a0),d2
000096F4 9569 0008                  		sub.w	d2,obX(a1)
000096F8                            
000096F8                            locret_7B62:
000096F8 4E75                       		rts	
000096FA                            ; End of function MvSonicOnPtfm2
000096FA                            
000096FA                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000096FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096FA                            
000096FA                            
000096FA                            Swing_Move:
000096FA 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000096FE 323C 0080                  		move.w	#$80,d1
00009702 0828 0000 0022             		btst	#0,obStatus(a0)
00009708 6700                       		beq.s	loc_7B78
0000970A 4440                       		neg.w	d0
0000970C D041                       		add.w	d1,d0
0000970E                            
0000970E                            loc_7B78:
0000970E 6000                       		bra.s	Swing_Move2
00009710                            ; End of function Swing_Move
00009710                            
00009710                            
00009710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009710                            
00009710                            
00009710                            Obj48_Move:
00009710 4A28 003D                  		tst.b	$3D(a0)
00009714 6600                       		bne.s	loc_7B9C
00009716 3028 003E                  		move.w	$3E(a0),d0
0000971A 5040                       		addq.w	#8,d0
0000971C 3140 003E                  		move.w	d0,$3E(a0)
00009720 D168 0026                  		add.w	d0,obAngle(a0)
00009724 0C40 0200                  		cmpi.w	#$200,d0
00009728 6600                       		bne.s	loc_7BB6
0000972A 117C 0001 003D             		move.b	#1,$3D(a0)
00009730 6000                       		bra.s	loc_7BB6
00009732                            ; ===========================================================================
00009732                            
00009732                            loc_7B9C:
00009732 3028 003E                  		move.w	$3E(a0),d0
00009736 5140                       		subq.w	#8,d0
00009738 3140 003E                  		move.w	d0,$3E(a0)
0000973C D168 0026                  		add.w	d0,obAngle(a0)
00009740 0C40 FE00                  		cmpi.w	#-$200,d0
00009744 6600                       		bne.s	loc_7BB6
00009746 117C 0000 003D             		move.b	#0,$3D(a0)
0000974C                            
0000974C                            loc_7BB6:
0000974C 1028 0026                  		move.b	obAngle(a0),d0
00009750                            ; End of function Obj48_Move
00009750                            
00009750                            
00009750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009750                            
00009750                            
00009750                            Swing_Move2:
00009750 6100 A2E0                  		bsr.w	CalcSine
00009754 3428 0038                  		move.w	$38(a0),d2
00009758 3628 003A                  		move.w	$3A(a0),d3
0000975C 45E8 0028                  		lea	obSubtype(a0),a2
00009760 7C00                       		moveq	#0,d6
00009762 1C1A                       		move.b	(a2)+,d6
00009764                            
00009764                            loc_7BCE:
00009764 7800                       		moveq	#0,d4
00009766 181A                       		move.b	(a2)+,d4
00009768 ED4C                       		lsl.w	#6,d4
0000976A 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009770 2244                       		movea.l	d4,a1
00009772 7800                       		moveq	#0,d4
00009774 1829 003C                  		move.b	$3C(a1),d4
00009778 2A04                       		move.l	d4,d5
0000977A C9C0                       		muls.w	d0,d4
0000977C E084                       		asr.l	#8,d4
0000977E CBC1                       		muls.w	d1,d5
00009780 E085                       		asr.l	#8,d5
00009782 D842                       		add.w	d2,d4
00009784 DA43                       		add.w	d3,d5
00009786 3344 000C                  		move.w	d4,obY(a1)
0000978A 3345 0008                  		move.w	d5,obX(a1)
0000978E 51CE FFD4                  		dbf	d6,loc_7BCE
00009792 4E75                       		rts	
00009794                            ; End of function Swing_Move2
00009794                            
00009794                            ; ===========================================================================
00009794                            
00009794                            Swing_ChkDel:
000097B2 4E75                       		rts	
000097B4                            ; ===========================================================================
000097B4                            
000097B4                            Swing_DelAll:
000097B4 7400                       		moveq	#0,d2
000097B6 45E8 0028                  		lea	obSubtype(a0),a2
000097BA 141A                       		move.b	(a2)+,d2
000097BC                            
000097BC                            Swing_DelLoop:
000097BC 7000                       		moveq	#0,d0
000097BE 101A                       		move.b	(a2)+,d0
000097C0 ED48                       		lsl.w	#6,d0
000097C2 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000097C8 2240                       		movea.l	d0,a1
000097CA 6100 0000                  		bsr.w	DeleteChild
000097CE 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000097D2 4E75                       		rts	
000097D4                            ; ===========================================================================
000097D4                            
000097D4                            Swing_Delete:	; Routine 6, 8
000097D4 6100 0000                  		bsr.w	DeleteObject
000097D8 4E75                       		rts	
000097DA                            ; ===========================================================================
000097DA                            
000097DA                            Swing_Display:	; Routine $A
000097DA 6000 0000                  		bra.w	DisplaySprite
000097DA 6000 0000                  		bra.w	DisplaySprite
000097DE                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000097DE                            ; ---------------------------------------------------------------------------
000097DE                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000097DE                            ; ---------------------------------------------------------------------------
000097DE                            Map_Swing_GHZ_internal:
000097DE 0000                       		dc.w @block-Map_Swing_GHZ_internal
000097E0 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000097E2 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000097E4 02                         @block:		dc.b 2
000097E5 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000097EA F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000097EF 01                         @chain:		dc.b 1
000097F0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000097F5 01                         @anchor:	dc.b 1
000097F6 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000097FC 00                         		even
000097FC 00                         		even
000097FC                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000097FC                            ; ---------------------------------------------------------------------------
000097FC                            ; Sprite mappings - SLZ	swinging platforms
000097FC                            ; ---------------------------------------------------------------------------
000097FC                            Map_Swing_SLZ_internal:
000097FC 0000                       		dc.w @block-Map_Swing_SLZ_internal
000097FE 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009800 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009802 08                         @block:		dc.b 8
00009803 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009808 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000980D F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009812 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009817 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000981C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009821 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009826 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000982B 01                         @chain:		dc.b 1
0000982C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009831 01                         @anchor:	dc.b 1
00009832 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009838 00                         		even
00009838 00                         		even
00009838                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009838                            ; ---------------------------------------------------------------------------
00009838                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009838                            ; ---------------------------------------------------------------------------
00009838                            
00009838                            Helix:
00009838 7000                       		moveq	#0,d0
0000983A 1028 0024                  		move.b	obRoutine(a0),d0
0000983E 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009842 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009846                            ; ===========================================================================
00009846 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009848 0000                       		dc.w Hel_Action-Hel_Index
0000984A 0000                       		dc.w Hel_Action-Hel_Index
0000984C 0000                       		dc.w Hel_Delete-Hel_Index
0000984E 0000                       		dc.w Hel_Display-Hel_Index
00009850                            
00009850 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009850                            
00009850                            ;		$29-38 are used for child object addresses
00009850                            ; ===========================================================================
00009850                            
00009850                            Hel_Main:	; Routine 0
00009850 5428 0024                  		addq.b	#2,obRoutine(a0)
00009854 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000985C 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009862 117C 0007 0022             		move.b	#7,obStatus(a0)
00009868 117C 0004 0001             		move.b	#4,obRender(a0)
0000986E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009874 117C 0008 0014             		move.b	#8,obActWid(a0)
0000987A 3428 000C                  		move.w	obY(a0),d2
0000987E 3628 0008                  		move.w	obX(a0),d3
00009882 1810                       		move.b	0(a0),d4
00009884 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009888 7200                       		moveq	#0,d1
0000988A 1212                       		move.b	(a2),d1		; move helix length to d1
0000988C 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009890 3001                       		move.w	d1,d0
00009892 E248                       		lsr.w	#1,d0
00009894 E948                       		lsl.w	#4,d0
00009896 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00009898 5501                       		subq.b	#2,d1
0000989A 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000989C 7C00                       		moveq	#0,d6
0000989E                            
0000989E                            Hel_Build:
0000989E 6100 0000                  		bsr.w	FindFreeObj
000098A2 6600                       		bne.s	Hel_Action
000098A4 5228 0028                  		addq.b	#1,obSubtype(a0)
000098A8 3A09                       		move.w	a1,d5
000098AA 0445 D000                  		subi.w	#$D000,d5
000098AE EC4D                       		lsr.w	#6,d5
000098B0 0245 007F                  		andi.w	#$7F,d5
000098B4 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000098B6 137C 0008 0024             		move.b	#8,obRoutine(a1)
000098BC 1284                       		move.b	d4,0(a1)
000098BE 3342 000C                  		move.w	d2,ObY(a1)
000098C2 3343 0008                  		move.w	d3,obX(a1)
000098C6 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000098CC 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000098D2 137C 0004 0001             		move.b	#4,obRender(a1)
000098D8 337C 0180 0018             		move.w	#$180,obPriority(a1)
000098DE 137C 0008 0014             		move.b	#8,obActWid(a1)
000098E4 1346 003E                  		move.b	d6,hel_frame(a1)
000098E8 5206                       		addq.b	#1,d6
000098EA 0206 0007                  		andi.b	#7,d6
000098EE 0643 0010                  		addi.w	#$10,d3
000098F2 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000098F6 6600                       		bne.s	Hel_NotCentre	; if not, branch
000098F8                            
000098F8 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000098FC 5206                       		addq.b	#1,d6
000098FE 0206 0007                  		andi.b	#7,d6
00009902 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009906 5228 0028                  		addq.b	#1,obSubtype(a0)
0000990A                            
0000990A                            	Hel_NotCentre:
0000990A 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000990E                            
0000990E                            Hel_Action:	; Routine 2, 4
0000990E 6100 0000                  		bsr.w	Hel_RotateSpikes
00009912 6100 0000                  		bsr.w	DisplaySprite
00009916 6000 0000                  		bra.w	Hel_ChkDel
0000991A                            
0000991A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000991A                            
0000991A                            
0000991A                            Hel_RotateSpikes:
0000991A 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000991E 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009924 D028 003E                  		add.b	hel_frame(a0),d0
00009928 0200 0007                  		andi.b	#7,d0
0000992C 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009930 6600                       		bne.s	locret_7DA6
00009932 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009938                            
00009938                            locret_7DA6:
00009938 4E75                       		rts	
0000993A                            ; End of function Hel_RotateSpikes
0000993A                            
0000993A                            ; ===========================================================================
0000993A                            
0000993A                            Hel_ChkDel:
00009958 4E75                       		rts	
0000995A                            ; ===========================================================================
0000995A                            
0000995A                            Hel_DelAll:
0000995A 7400                       		moveq	#0,d2
0000995C 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009960 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009962 5502                       		subq.b	#2,d2
00009964 6500                       		bcs.s	Hel_Delete
00009966                            
00009966                            	Hel_DelLoop:
00009966 7000                       		moveq	#0,d0
00009968 101A                       		move.b	(a2)+,d0
0000996A ED48                       		lsl.w	#6,d0
0000996C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009972 2240                       		movea.l	d0,a1		; get child address
00009974 6100 0000                  		bsr.w	DeleteChild	; delete object
00009978 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
0000997C                            
0000997C                            Hel_Delete:	; Routine 6
0000997C 6100 0000                  		bsr.w	DeleteObject
00009980 4E75                       		rts	
00009982                            ; ===========================================================================
00009982                            
00009982                            Hel_Display:	; Routine 8
00009982 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009986 6000 0000                  		bra.w	DisplaySprite
00009986 6000 0000                  		bra.w	DisplaySprite
0000998A                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
0000998A                            ; ---------------------------------------------------------------------------
0000998A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000998A                            ; ---------------------------------------------------------------------------
0000998A                            Map_Hel_internal:
0000998A 0000                       		dc.w byte_7E08-Map_Hel_internal
0000998C 0000                       		dc.w byte_7E0E-Map_Hel_internal
0000998E 0000                       		dc.w byte_7E14-Map_Hel_internal
00009990 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009992 0000                       		dc.w byte_7E20-Map_Hel_internal
00009994 0000                       		dc.w byte_7E26-Map_Hel_internal
00009996 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009998 0000                       		dc.w byte_7E2C-Map_Hel_internal
0000999A 01                         byte_7E08:	dc.b 1
0000999B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000099A0 01                         byte_7E0E:	dc.b 1
000099A1 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000099A6 01                         byte_7E14:	dc.b 1
000099A7 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000099AC 01                         byte_7E1A:	dc.b 1
000099AD FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000099B2 01                         byte_7E20:	dc.b 1
000099B3 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000099B8 01                         byte_7E26:	dc.b 1
000099B9 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000099BE 01                         byte_7E2C:	dc.b 1
000099BF F4                         		dc.b $F4
000099C0                            byte_7E2E:	; reads the 0 below	; not visible
000099C0 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000099C4                            		even
000099C4                            		even
000099C4                            		include	"_incObj\18 Platforms.asm"
000099C4                            ; ---------------------------------------------------------------------------
000099C4                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000099C4                            ; ---------------------------------------------------------------------------
000099C4                            
000099C4                            BasicPlatform:
000099C4 7000                       		moveq	#0,d0
000099C6 1028 0024                  		move.b	obRoutine(a0),d0
000099CA 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000099CE 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000099D2                            ; ===========================================================================
000099D2 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000099D4 0000                       		dc.w Plat_Solid-Plat_Index
000099D6 0000                       		dc.w Plat_Action2-Plat_Index
000099D8 0000                       		dc.w Plat_Delete-Plat_Index
000099DA 0000                       		dc.w Plat_Action-Plat_Index
000099DC                            ; ===========================================================================
000099DC                            
000099DC                            Plat_Main:	; Routine 0
000099DC 5428 0024                  		addq.b	#2,obRoutine(a0)
000099E0 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000099E6 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
000099EE 117C 0020 0014             		move.b	#$20,obActWid(a0)
000099F4 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
000099FA 6600                       		bne.s	@notSYZ
000099FC                            
000099FC 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009A04 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A0A                            
00009A0A                            	@notSYZ:
00009A0A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009A10 6600                       		bne.s	@notSLZ
00009A12 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009A1A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A20 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A26 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009A2C                            
00009A2C                            	@notSLZ:
00009A2C 117C 0004 0001             		move.b	#4,obRender(a0)
00009A32 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A38 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009A3E 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009A44 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009A4A 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009A50 7200                       		moveq	#0,d1
00009A52 1028 0028                  		move.b	obSubtype(a0),d0
00009A56 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009A5A 6600                       		bne.s	@setframe	; if not, branch
00009A5C 5201                       		addq.b	#1,d1		; use frame #1
00009A5E 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009A64                            
00009A64                            	@setframe:
00009A64 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009A68                            
00009A68                            Plat_Solid:	; Routine 2
00009A68 4A28 0038                  		tst.b	$38(a0)
00009A6C 6700                       		beq.s	loc_7EE0
00009A6E 5928 0038                  		subq.b	#4,$38(a0)
00009A72                            
00009A72                            	loc_7EE0:
00009A72 7200                       		moveq	#0,d1
00009A74 1228 0014                  		move.b	obActWid(a0),d1
00009A78 6100 F56C                  		bsr.w	PlatformObject
00009A7C                            
00009A7C                            Plat_Action:	; Routine 8
00009A7C 6100 0000                  		bsr.w	Plat_Move
00009A80 6100 0000                  		bsr.w	Plat_Nudge
00009A84 6100 0000                  		bsr.w	DisplaySprite
00009A88 6000 0000                  		bra.w	Plat_ChkDel
00009A8C                            ; ===========================================================================
00009A8C                            
00009A8C                            Plat_Action2:	; Routine 4
00009A8C 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009A92 6700                       		beq.s	loc_7F06
00009A94 5828 0038                  		addq.b	#4,$38(a0)
00009A98                            
00009A98                            	loc_7F06:
00009A98 7200                       		moveq	#0,d1
00009A9A 1228 0014                  		move.b	obActWid(a0),d1
00009A9E 6100 F6BA                  		bsr.w	ExitPlatform
00009AA2 3F28 0008                  		move.w	obX(a0),-(sp)
00009AA6 6100 0000                  		bsr.w	Plat_Move
00009AAA 6100 0000                  		bsr.w	Plat_Nudge
00009AAE 341F                       		move.w	(sp)+,d2
00009AB0 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009AB4 6100 0000                  		bsr.w	DisplaySprite
00009AB8 6000 0000                  		bra.w	Plat_ChkDel
00009ABC                            
00009ABC 4E75                       		rts
00009ABE                            
00009ABE                            ; ---------------------------------------------------------------------------
00009ABE                            ; Subroutine to	move platform slightly when you	stand on it
00009ABE                            ; ---------------------------------------------------------------------------
00009ABE                            
00009ABE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009ABE                            
00009ABE                            
00009ABE                            Plat_Nudge:
00009ABE 1028 0038                  		move.b	$38(a0),d0
00009AC2 6100 9F6E                  		bsr.w	CalcSine
00009AC6 323C 0400                  		move.w	#$400,d1
00009ACA C1C1                       		muls.w	d1,d0
00009ACC 4840                       		swap	d0
00009ACE D068 002C                  		add.w	$2C(a0),d0
00009AD2 3140 000C                  		move.w	d0,obY(a0)
00009AD6 4E75                       		rts	
00009AD8                            ; End of function Plat_Nudge
00009AD8                            
00009AD8                            ; ---------------------------------------------------------------------------
00009AD8                            ; Subroutine to	move platforms
00009AD8                            ; ---------------------------------------------------------------------------
00009AD8                            
00009AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AD8                            
00009AD8                            
00009AD8                            Plat_Move:
00009AD8 7000                       		moveq	#0,d0
00009ADA 1028 0028                  		move.b	obSubtype(a0),d0
00009ADE 0240 000F                  		andi.w	#$F,d0
00009AE2 D040                       		add.w	d0,d0
00009AE4 323B 0000                  		move.w	@index(pc,d0.w),d1
00009AE8 4EFB 1000                  		jmp	@index(pc,d1.w)
00009AEC                            ; End of function Plat_Move
00009AEC                            
00009AEC                            ; ===========================================================================
00009AEC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009AF0 0000 0000                  		dc.w @type02-@index, @type03-@index
00009AF4 0000 0000                  		dc.w @type04-@index, @type05-@index
00009AF8 0000 0000                  		dc.w @type06-@index, @type07-@index
00009AFC 0000 0000                  		dc.w @type08-@index, @type00-@index
00009B00 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009B04 0000                       		dc.w @type0C-@index
00009B06                            ; ===========================================================================
00009B06                            
00009B06                            @type00:
00009B06 4E75                       		rts			; platform 00 doesn't move
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            @type05:
00009B08 3028 0032                  		move.w	$32(a0),d0
00009B0C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B10 4401                       		neg.b	d1		; reverse platform-motion
00009B12 0601 0040                  		addi.b	#$40,d1
00009B16 6000                       		bra.s	@type01_move
00009B18                            ; ===========================================================================
00009B18                            
00009B18                            @type01:
00009B18 3028 0032                  		move.w	$32(a0),d0
00009B1C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B20 0401 0040                  		subi.b	#$40,d1
00009B24                            
00009B24                            	@type01_move:
00009B24 4881                       		ext.w	d1
00009B26 D041                       		add.w	d1,d0
00009B28 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009B2C 6000 0000                  		bra.w	@chgmotion
00009B30                            ; ===========================================================================
00009B30                            
00009B30                            @type0C:
00009B30 3028 0034                  		move.w	$34(a0),d0
00009B34 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009B38 4401                       		neg.b	d1		; reverse platform-motion
00009B3A 0601 0030                  		addi.b	#$30,d1
00009B3E 6000                       		bra.s	@type02_move
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            @type0B:
00009B40 3028 0034                  		move.w	$34(a0),d0
00009B44 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009B48 0401 0030                  		subi.b	#$30,d1
00009B4C 6000                       		bra.s	@type02_move
00009B4E                            ; ===========================================================================
00009B4E                            
00009B4E                            @type06:
00009B4E 3028 0034                  		move.w	$34(a0),d0
00009B52 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B56 4401                       		neg.b	d1		; reverse platform-motion
00009B58 0601 0040                  		addi.b	#$40,d1
00009B5C 6000                       		bra.s	@type02_move
00009B5E                            ; ===========================================================================
00009B5E                            
00009B5E                            @type02:
00009B5E 3028 0034                  		move.w	$34(a0),d0
00009B62 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B66 0401 0040                  		subi.b	#$40,d1
00009B6A                            
00009B6A                            	@type02_move:
00009B6A 4881                       		ext.w	d1
00009B6C D041                       		add.w	d1,d0
00009B6E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009B72 6000 0000                  		bra.w	@chgmotion
00009B76                            ; ===========================================================================
00009B76                            
00009B76                            @type03:
00009B76 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009B7A 6600                       		bne.s	@type03_wait	; if yes, branch
00009B7C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009B82 6700                       		beq.s	@type03_nomove	; if not, branch
00009B84 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009B8A                            
00009B8A                            	@type03_nomove:
00009B8A 4E75                       		rts	
00009B8C                            
00009B8C                            	@type03_wait:
00009B8C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009B90 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009B92 317C 0020 003A             		move.w	#32,$3A(a0)
00009B98 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            @type04:
00009B9E 4A68 003A                  		tst.w	$3A(a0)
00009BA2 6700                       		beq.s	@loc_8048
00009BA4 5368 003A                  		subq.w	#1,$3A(a0)
00009BA8 6600                       		bne.s	@loc_8048
00009BAA 0828 0003 0022             		btst	#3,obStatus(a0)
00009BB0 6700                       		beq.s	@loc_8042
00009BB2 08E9 0001 0022             		bset	#1,obStatus(a1)
00009BB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009BBE 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009BC4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009BCA 4228 0025                  		clr.b	$25(a0)
00009BCE 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009BD4                            
00009BD4                            	@loc_8042:
00009BD4 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009BDA                            
00009BDA                            	@loc_8048:
00009BDA 2628 002C                  		move.l	$2C(a0),d3
00009BDE 3028 0012                  		move.w	obVelY(a0),d0
00009BE2 48C0                       		ext.l	d0
00009BE4 E180                       		asl.l	#8,d0
00009BE6 D680                       		add.l	d0,d3
00009BE8 2143 002C                  		move.l	d3,$2C(a0)
00009BEC 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009BF2 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009BF6 0640 00E0                  		addi.w	#$E0,d0
00009BFA B068 002C                  		cmp.w	$2C(a0),d0
00009BFE 6400                       		bcc.s	@locret_8074
00009C00 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009C06                            
00009C06                            	@locret_8074:
00009C06 4E75                       		rts	
00009C08                            ; ===========================================================================
00009C08                            
00009C08                            @type07:
00009C08 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C0C 6600                       		bne.s	@type07_wait	; if yes, branch
00009C0E 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009C12 7000                       		moveq	#0,d0
00009C14 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009C18 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009C1A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009C1E 6700                       		beq.s	@type07_nomove	; if not, branch
00009C20 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009C26                            
00009C26                            	@type07_nomove:
00009C26 4E75                       		rts	
00009C28                            
00009C28                            	@type07_wait:
00009C28 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009C2C 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009C2E 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009C32 4E75                       		rts	
00009C34                            ; ===========================================================================
00009C34                            
00009C34                            @type08:
00009C34 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009C38 3028 0034                  		move.w	$34(a0),d0
00009C3C 0440 0200                  		subi.w	#$200,d0
00009C40 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009C44 6600                       		bne.s	@type08_nostop	; if not, branch
00009C46 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009C4A                            
00009C4A                            	@type08_nostop:
00009C4A 4E75                       		rts	
00009C4C                            ; ===========================================================================
00009C4C                            
00009C4C                            @type0A:
00009C4C 3028 0034                  		move.w	$34(a0),d0
00009C50 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C54 0401 0040                  		subi.b	#$40,d1
00009C58 4881                       		ext.w	d1
00009C5A E241                       		asr.w	#1,d1
00009C5C D041                       		add.w	d1,d0
00009C5E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009C62                            
00009C62                            @chgmotion:
00009C62 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009C68 4E75                       		rts	
00009C6A                            ; ===========================================================================
00009C6A                            
00009C6A                            Plat_ChkDel:
00009C86 4E75                       		rts	
00009C88                            ; ===========================================================================
00009C88                            
00009C88                            Plat_Delete:	; Routine 6
00009C88 6000 0000                  		bra.w	DeleteObject
00009C88 6000 0000                  		bra.w	DeleteObject
00009C8C                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009C8C                            ; ---------------------------------------------------------------------------
00009C8C                            ; Sprite mappings - unused
00009C8C                            ; ---------------------------------------------------------------------------
00009C8C                            Map_Plat_Unused_internal:
00009C8C 0000                       		dc.w @small-Map_Plat_Unused_internal
00009C8E 0000                       		dc.w @large-Map_Plat_Unused_internal
00009C90 02                         @small:		dc.b 2
00009C91 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009C96 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009C9B 0A                         @large:		dc.b $A
00009C9C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009CA1 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009CA6 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009CAB 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009CB0 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009CB5 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009CBA 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009CBF 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009CC4 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009CC9 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009CCE                            		even
00009CCE                            		even
00009CCE                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009CCE                            ; ---------------------------------------------------------------------------
00009CCE                            ; Sprite mappings - GHZ	platforms
00009CCE                            ; ---------------------------------------------------------------------------
00009CCE                            Map_Plat_GHZ_internal:
00009CCE 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009CD0 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009CD2 04                         @small:		dc.b 4
00009CD3 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009CD8 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009CDD F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009CE2 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009CE7 0A                         @large:		dc.b $A
00009CE8 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009CED 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009CF2 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009CF7 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009CFC 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009D01 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009D06 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009D0B 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009D10 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009D15 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009D1A                            		even
00009D1A                            		even
00009D1A                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009D1A                            ; ---------------------------------------------------------------------------
00009D1A                            ; Sprite mappings - SYZ	platforms
00009D1A                            ; ---------------------------------------------------------------------------
00009D1A                            Map_Plat_SYZ_internal:
00009D1A 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009D1C 03                         @platform:	dc.b 3
00009D1D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009D22 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009D27 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009D2C                            		even
00009D2C                            		even
00009D2C                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C                            ; Sprite mappings - SLZ	platforms
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C                            Map_Plat_SLZ_internal:
00009D2C 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009D2E 02                         @platform:	dc.b 2
00009D2F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009D34 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009D3A 00                         		even
00009D3A 00                         		even
00009D3A                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009D3A                            ; ---------------------------------------------------------------------------
00009D3A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009D3A                            ; ---------------------------------------------------------------------------
00009D3A                            Map_GBall_internal:
00009D3A 0000                       		dc.w @shiny-Map_GBall_internal
00009D3C 0000                       		dc.w @check1-Map_GBall_internal
00009D3E 0000                       		dc.w @check2-Map_GBall_internal
00009D40 0000                       		dc.w @check3-Map_GBall_internal
00009D42 06                         @shiny:		dc.b 6
00009D43 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009D48 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009D4D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009D52 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009D57 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009D5C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009D61 04                         @check1:	dc.b 4
00009D62 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009D67 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009D6C 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009D71 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009D76 04                         @check2:	dc.b 4
00009D77 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009D7C E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009D81 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009D86 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009D8B 04                         @check3:	dc.b 4
00009D8C E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009D91 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009D96 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009D9B 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009DA0                            		even
00009DA0                            		even
00009DA0                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            ; Object 1A - GHZ collapsing ledge
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            
00009DA0                            CollapseLedge:
00009DA0 7000                       		moveq	#0,d0
00009DA2 1028 0024                  		move.b	obRoutine(a0),d0
00009DA6 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009DAA 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009DAE                            ; ===========================================================================
00009DAE 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009DB2 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009DB6 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009DBA                            
00009DBA =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009DBA =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009DBA                            ; ===========================================================================
00009DBA                            
00009DBA                            Ledge_Main:	; Routine 0
00009DBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00009DBE 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009DC6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009DCC 0028 0004 0001             		ori.b	#4,obRender(a0)
00009DD2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009DD8 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009DDE 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009DE4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009DEA 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009DF0 08E8 0004 0001             		bset	#4,obRender(a0)
00009DF6                            
00009DF6                            Ledge_Touch:	; Routine 2
00009DF6 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009DFA 6700                       		beq.s	@slope		; if not, branch
00009DFC 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009E00 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009E04 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009E08                            
00009E08                            	@slope:
00009E08 323C 0030                  		move.w	#$30,d1
00009E0C 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009E12 6100 F2A6                  		bsr.w	SlopeObject
00009E16 6000 0000                  		bra.w	RememberState
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Ledge_Collapse:	; Routine 4
00009E1A 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009E1E 6700 0000                  		beq.w	loc_847A
00009E22 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009E28 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009E2C                            
00009E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E2C                            
00009E2C                            
00009E2C                            Ledge_WalkOff:	; Routine $A
00009E2C 323C 0030                  		move.w	#$30,d1
00009E30 6100 F328                  		bsr.w	ExitPlatform
00009E34 323C 0030                  		move.w	#$30,d1
00009E38 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009E3E 3428 0008                  		move.w	obX(a0),d2
00009E42 6100 0000                  		bsr.w	SlopeObject2
00009E46 6000 0000                  		bra.w	RememberState
00009E4A                            ; End of function Ledge_WalkOff
00009E4A                            
00009E4A                            ; ===========================================================================
00009E4A                            
00009E4A                            Ledge_Display:	; Routine 6
00009E4A 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009E4E 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009E50 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009E54 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009E58 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009E5C 6000 0000                  		bra.w	DisplaySprite
00009E60                            ; ===========================================================================
00009E60                            
00009E60                            loc_82D0:
00009E60 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009E64 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009E68 43F8 D000                  		lea	(v_player).w,a1
00009E6C 0829 0003 0022             		btst	#3,obStatus(a1)
00009E72 6700                       		beq.s	loc_82FC
00009E74 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009E78 6600                       		bne.s	locret_8308
00009E7A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009E80 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009E86 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009E8C                            
00009E8C                            loc_82FC:
00009E8C 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009E92 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009E98                            
00009E98                            locret_8308:
00009E98 4E75                       		rts	
00009E9A                            ; ===========================================================================
00009E9A                            
00009E9A                            Ledge_TimeZero:
00009E9A 6100 0000                  		bsr.w	ObjectFall
00009E9E 6100 0000                  		bsr.w	DisplaySprite
00009EA2 4A28 0001                  		tst.b	obRender(a0)
00009EA6 6A00                       		bpl.s	Ledge_Delete
00009EA8 4E75                       		rts	
00009EAA                            ; ===========================================================================
00009EAA                            
00009EAA                            Ledge_Delete:	; Routine 8
00009EAA 6100 0000                  		bsr.w	DeleteObject
00009EAE 4E75                       		rts	
00009EAE 4E75                       		rts	
00009EB0                            		include	"_incObj\53 Collapsing Floors.asm"
00009EB0                            ; ---------------------------------------------------------------------------
00009EB0                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009EB0                            ; ---------------------------------------------------------------------------
00009EB0                            
00009EB0                            CollapseFloor:
00009EB0 7000                       		moveq	#0,d0
00009EB2 1028 0024                  		move.b	obRoutine(a0),d0
00009EB6 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009EBA 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009EBE                            ; ===========================================================================
00009EBE 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009EC2 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009EC6 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009ECA                            
00009ECA =00000038                  cflo_timedelay:		equ $38
00009ECA =0000003A                  cflo_collapse_flag:	equ $3A
00009ECA                            ; ===========================================================================
00009ECA                            
00009ECA                            CFlo_Main:	; Routine 0
00009ECA 5428 0024                  		addq.b	#2,obRoutine(a0)
00009ECE 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009ED6 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009EDC 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009EE2 6600                       		bne.s	@notSLZ
00009EE4                            
00009EE4 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009EEA 5428 001A                  		addq.b	#2,obFrame(a0)
00009EEE                            
00009EEE                            	@notSLZ:
00009EEE 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009EF4 6600                       		bne.s	@notSBZ
00009EF6 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009EFC                            
00009EFC                            	@notSBZ:
00009EFC 0028 0004 0001             		ori.b	#4,obRender(a0)
00009F02 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009F08 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009F0E 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009F14                            
00009F14                            CFlo_Touch:	; Routine 2
00009F14 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009F18 6700                       		beq.s	@solid		; if not, branch
00009F1A 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009F1E 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009F22 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009F26                            
00009F26                            	@solid:
00009F26 323C 0020                  		move.w	#$20,d1
00009F2A 6100 F0BA                  		bsr.w	PlatformObject
00009F2E 4A28 0028                  		tst.b	obSubtype(a0)
00009F32 6A00                       		bpl.s	@remstate
00009F34 0829 0003 0022             		btst	#3,obStatus(a1)
00009F3A 6700                       		beq.s	@remstate
00009F3C 08A8 0000 0001             		bclr	#0,obRender(a0)
00009F42 3029 0008                  		move.w	obX(a1),d0
00009F46 9068 0008                  		sub.w	obX(a0),d0
00009F4A 6400                       		bcc.s	@remstate
00009F4C 08E8 0000 0001             		bset	#0,obRender(a0)
00009F52                            
00009F52                            	@remstate:
00009F52 6000 0000                  		bra.w	RememberState
00009F56                            ; ===========================================================================
00009F56                            
00009F56                            CFlo_Collapse:	; Routine 4
00009F56 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009F5A 6700 0000                  		beq.w	loc_8458
00009F5E 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009F64 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009F68                            
00009F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F68                            
00009F68                            
00009F68                            CFlo_WalkOff:	; Routine $A
00009F68 323C 0020                  		move.w	#$20,d1
00009F6C 6100 F1EC                  		bsr.w	ExitPlatform
00009F70 3428 0008                  		move.w	obX(a0),d2
00009F74 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009F78 6000 0000                  		bra.w	RememberState
00009F7C                            ; End of function CFlo_WalkOff
00009F7C                            
00009F7C                            ; ===========================================================================
00009F7C                            
00009F7C                            CFlo_Display:	; Routine 6
00009F7C 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009F80 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009F82 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009F86 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009F8A 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009F8E 6000 0000                  		bra.w	DisplaySprite
00009F92                            ; ===========================================================================
00009F92                            
00009F92                            loc_8402:
00009F92 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009F96 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009F9A 43F8 D000                  		lea	(v_player).w,a1
00009F9E 0829 0003 0022             		btst	#3,obStatus(a1)
00009FA4 6700                       		beq.s	loc_842E
00009FA6 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009FAA 6600                       		bne.s	locret_843A
00009FAC 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009FB2 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009FB8 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009FBE                            
00009FBE                            loc_842E:
00009FBE 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009FC4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009FCA                            
00009FCA                            locret_843A:
00009FCA 4E75                       		rts	
00009FCC                            ; ===========================================================================
00009FCC                            
00009FCC                            CFlo_TimeZero:
00009FCC 6100 0000                  		bsr.w	ObjectFall
00009FD0 6100 0000                  		bsr.w	DisplaySprite
00009FD4 4A28 0001                  		tst.b	obRender(a0)
00009FD8 6A00                       		bpl.s	CFlo_Delete
00009FDA 4E75                       		rts	
00009FDC                            ; ===========================================================================
00009FDC                            
00009FDC                            CFlo_Delete:	; Routine 8
00009FDC 6100 0000                  		bsr.w	DeleteObject
00009FE0 4E75                       		rts	
00009FE2                            ; ===========================================================================
00009FE2                            
00009FE2                            CFlo_Fragment:
00009FE2 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009FE8                            
00009FE8                            loc_8458:
00009FE8 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009FEE 0828 0000 0028             		btst	#0,obSubtype(a0)
00009FF4 6700                       		beq.s	loc_846C
00009FF6 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009FFC                            
00009FFC                            loc_846C:
00009FFC 7207                       		moveq	#7,d1
00009FFE 5228 001A                  		addq.b	#1,obFrame(a0)
0000A002 6000                       		bra.s	loc_8486
0000A002 6000                       		bra.s	loc_8486
0000A004                            
0000A004                            ; ===========================================================================
0000A004                            
0000A004                            Ledge_Fragment:
0000A004 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A00A                            
0000A00A                            loc_847A:
0000A00A 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A010 7218                       		moveq	#$18,d1
0000A012 5428 001A                  		addq.b	#2,obFrame(a0)
0000A016                            
0000A016                            loc_8486:
0000A016 7000                       		moveq	#0,d0
0000A018 1028 001A                  		move.b	obFrame(a0),d0
0000A01C D040                       		add.w	d0,d0
0000A01E 2668 0004                  		movea.l	obMap(a0),a3
0000A022 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A026 524B                       		addq.w	#1,a3
0000A028 08E8 0005 0001             		bset	#5,obRender(a0)
0000A02E 1810                       		move.b	0(a0),d4
0000A030 1A28 0001                  		move.b	obRender(a0),d5
0000A034 2248                       		movea.l	a0,a1
0000A036 6000                       		bra.s	loc_84B2
0000A038                            ; ===========================================================================
0000A038                            
0000A038                            loc_84AA:
0000A038 6100 0000                  		bsr.w	FindFreeObj
0000A03C 6600                       		bne.s	loc_84F2
0000A03E 5A4B                       		addq.w	#5,a3
0000A040                            
0000A040                            loc_84B2:
0000A040 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A046 1284                       		move.b	d4,0(a1)
0000A048 234B 0004                  		move.l	a3,obMap(a1)
0000A04C 1345 0001                  		move.b	d5,obRender(a1)
0000A050 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A056 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A05C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A062 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A068 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A06E 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A072 B3C8                       		cmpa.l	a0,a1
0000A074 6400                       		bhs.s	loc_84EE
0000A076 6100 0000                  		bsr.w	DisplaySprite1
0000A07A                            
0000A07A                            loc_84EE:
0000A07A 51C9 FFBC                  		dbf	d1,loc_84AA
0000A07E                            
0000A07E                            loc_84F2:
0000A07E 6100 0000                  		bsr.w	DisplaySprite
0000A08C                            ; ===========================================================================
0000A08C                            ; ---------------------------------------------------------------------------
0000A08C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A08C                            ; ---------------------------------------------------------------------------
0000A08C 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A09C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A0A6 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A0AE 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A0B6                            
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            
0000A0B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0B6                            
0000A0B6                            
0000A0B6                            SlopeObject2:
0000A0B6 43F8 D000                  		lea	(v_player).w,a1
0000A0BA 0829 0003 0022             		btst	#3,obStatus(a1)
0000A0C0 6700                       		beq.s	locret_856E
0000A0C2 3029 0008                  		move.w	obX(a1),d0
0000A0C6 9068 0008                  		sub.w	obX(a0),d0
0000A0CA D041                       		add.w	d1,d0
0000A0CC E248                       		lsr.w	#1,d0
0000A0CE 0828 0000 0001             		btst	#0,obRender(a0)
0000A0D4 6700                       		beq.s	loc_854E
0000A0D6 4640                       		not.w	d0
0000A0D8 D041                       		add.w	d1,d0
0000A0DA                            
0000A0DA                            loc_854E:
0000A0DA 7200                       		moveq	#0,d1
0000A0DC 1232 0000                  		move.b	(a2,d0.w),d1
0000A0E0 3028 000C                  		move.w	obY(a0),d0
0000A0E4 9041                       		sub.w	d1,d0
0000A0E6 7200                       		moveq	#0,d1
0000A0E8 1229 0016                  		move.b	obHeight(a1),d1
0000A0EC 9041                       		sub.w	d1,d0
0000A0EE 3340 000C                  		move.w	d0,obY(a1)
0000A0F2 9468 0008                  		sub.w	obX(a0),d2
0000A0F6 9569 0008                  		sub.w	d2,obX(a1)
0000A0FA                            
0000A0FA                            locret_856E:
0000A0FA 4E75                       		rts	
0000A0FC                            ; End of function SlopeObject2
0000A0FC                            
0000A0FC                            ; ===========================================================================
0000A0FC                            ; ---------------------------------------------------------------------------
0000A0FC                            ; Collision data for GHZ collapsing ledge
0000A0FC                            ; ---------------------------------------------------------------------------
0000A0FC                            Ledge_SlopeData:
0000A0FC                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A12C                            		even
0000A12C                            
0000A12C                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            ; Sprite mappings - GHZ	collapsing ledge
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            Map_Ledge_internal:
0000A12C 0000                       		dc.w @left-Map_Ledge_internal
0000A12E 0000                       		dc.w @right-Map_Ledge_internal
0000A130 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A132 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A134 10                         @left:		dc.b $10
0000A135 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A13A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A13F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A144 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A149 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A14E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A153 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A158 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A15D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A162 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A167 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A16C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A171 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A176 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A17B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A180 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A185 10                         @right:		dc.b $10
0000A186 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A18B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A190 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A195 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A19A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A19F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A1A4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A1A9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A1AE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A1B3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A1B8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A1BD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A1C2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A1C7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A1CC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A1D1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A1D6 19                         @leftsmash:	dc.b $19
0000A1D7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A1DC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A1E1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A1E6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A1EB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A1F0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A1F5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A1FA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A1FF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A204 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A209 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A20E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A213 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A218 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A21D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A222 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A227 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A22C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A231 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A236 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A23B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A240 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A245 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A24A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A24F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A254 19                         @rightsmash:	dc.b $19
0000A255 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A25A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A25F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A264 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A269 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A26E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A273 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A278 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A27D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A282 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A287 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A28C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A291 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A296 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A29B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A2A0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A2A5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A2AA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A2AF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2B4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A2B9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A2BE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A2C3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A2C8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A2CD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A2D2                            		even
0000A2D2                            		even
0000A2D2                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A2D2                            ; ---------------------------------------------------------------------------
0000A2D2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A2D2                            ; ---------------------------------------------------------------------------
0000A2D2                            Map_CFlo_internal:
0000A2D2 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A2D4 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A2D6 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A2D8 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A2DA 04                         byte_874E:	dc.b 4
0000A2DB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A2E0 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A2E5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A2EA 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A2EF 08                         byte_8763:	dc.b 8
0000A2F0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A2F5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A2FA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A2FF F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A304 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A309 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A30E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A313 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A318 04                         byte_878C:	dc.b 4
0000A319 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A31E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A323 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A328 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A32D 08                         byte_87A1:	dc.b 8
0000A32E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A333 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A338 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A33D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A342 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A347 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A34C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A351 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A356                            		even
0000A356                            		even
0000A356                            
0000A356                            		include	"_incObj\1C Scenery.asm"
0000A356                            ; ---------------------------------------------------------------------------
0000A356                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A356                            ; ---------------------------------------------------------------------------
0000A356                            
0000A356                            Scenery:
0000A356 7000                       		moveq	#0,d0
0000A358 1028 0024                  		move.b	obRoutine(a0),d0
0000A35C 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A360 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A364                            ; ===========================================================================
0000A364 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A366 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A368                            ; ===========================================================================
0000A368                            
0000A368                            Scen_Main:	; Routine 0
0000A368 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A36C 7000                       		moveq	#0,d0
0000A36E 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A372 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A376 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A37A 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A37E 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A382 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A388 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A38C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A390 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A394 3028 0018                  		move.w obPriority(a0),d0 
0000A398 E248                       		lsr.w #1,d0 
0000A39A 0240 0380                  		andi.w #$380,d0 
0000A39E 3140 0018                  		move.w d0,obPriority(a0)		
0000A3A2 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A3A6                            
0000A3A6                            Scen_ChkDel:	; Routine 2
0000A3C4 6000 0000                  		bra.w	DisplaySprite
0000A3C8                            ; ===========================================================================
0000A3C8                            ; ---------------------------------------------------------------------------
0000A3C8                            ; Variables for	object $1C are stored in an array
0000A3C8                            ; ---------------------------------------------------------------------------
0000A3C8 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A3CC 44D8                       		dc.w $44D8		; VRAM setting
0000A3CE 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A3D2 0000 0000                  		dc.l Map_Scen
0000A3D6 44D8                       		dc.w $44D8
0000A3D8 0008 0200                  		dc.b 0,	8, 2, 0
0000A3DC 0000 0000                  		dc.l Map_Scen
0000A3E0 44D8                       		dc.w $44D8
0000A3E2 0008 0200                  		dc.b 0,	8, 2, 0
0000A3E6 0000 94CE                  		dc.l Map_Bri
0000A3EA 438E                       		dc.w $438E
0000A3EC 0110 0100                  		dc.b 1,	$10, 1,	0
0000A3F0                            		even
0000A3F0                            		even
0000A3F0                            Map_Scen:	include	"_maps\Scenery.asm"
0000A3F0                            ; ---------------------------------------------------------------------------
0000A3F0                            ; Sprite mappings - SLZ	lava thrower
0000A3F0                            ; ---------------------------------------------------------------------------
0000A3F0                            Map_Scen_internal:
0000A3F0 0000                       		dc.w byte_8858-Map_Scen_internal
0000A3F2 01                         byte_8858:	dc.b 1
0000A3F3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A3F8                            		even
0000A3F8                            		even
0000A3F8                            
0000A3F8                            		include	"_incObj\1D Unused Switch.asm"
0000A3F8                            ; ---------------------------------------------------------------------------
0000A3F8                            ; Object 1D - switch that activates when Sonic touches it
0000A3F8                            ; (this	is not used anywhere in	the game)
0000A3F8                            ; ---------------------------------------------------------------------------
0000A3F8                            
0000A3F8                            MagicSwitch:
0000A3F8 7000                       		moveq	#0,d0
0000A3FA 1028 0024                  		move.b	obRoutine(a0),d0
0000A3FE 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A402 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A406                            ; ===========================================================================
0000A406 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A408 0000                       		dc.w Swi_Action-Swi_Index
0000A40A 0000                       		dc.w Swi_Delete-Swi_Index
0000A40C                            
0000A40C =00000030                  swi_origY:	equ $30		; original y-axis position
0000A40C                            ; ===========================================================================
0000A40C                            
0000A40C                            Swi_Main:	; Routine 0
0000A40C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A410 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A418 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A41E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A424 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A42A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A430 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A436                            
0000A436                            Swi_Action:	; Routine 2
0000A436 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A43C 323C 0010                  		move.w	#$10,d1
0000A440 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A444 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A446                            
0000A446 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A44A 7001                       		moveq	#1,d0
0000A44C 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A450                            
0000A450                            Swi_ChkDel:
0000A450 6100 0000                  		bsr.w	DisplaySprite
0000A472 4E75                       		rts	
0000A474                            ; ===========================================================================
0000A474                            
0000A474                            Swi_Delete:	; Routine 4
0000A474 6100 0000                  		bsr.w	DeleteObject
0000A478 4E75                       		rts	
0000A47A                            
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            ; Subroutine to	check if Sonic touches the object
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            
0000A47A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A47A                            
0000A47A                            
0000A47A                            Swi_ChkTouch:
0000A47A 43F8 D000                  		lea	(v_player).w,a1
0000A47E 3029 0008                  		move.w	obX(a1),d0
0000A482 9068 0008                  		sub.w	obX(a0),d0
0000A486 D041                       		add.w	d1,d0
0000A488 6B00                       		bmi.s	Swi_NoTouch
0000A48A D241                       		add.w	d1,d1
0000A48C B041                       		cmp.w	d1,d0
0000A48E 6400                       		bcc.s	Swi_NoTouch
0000A490 3429 000C                  		move.w	obY(a1),d2
0000A494 1229 0016                  		move.b	obHeight(a1),d1
0000A498 4881                       		ext.w	d1
0000A49A D242                       		add.w	d2,d1
0000A49C 3028 000C                  		move.w	obY(a0),d0
0000A4A0 0440 0010                  		subi.w	#$10,d0
0000A4A4 9041                       		sub.w	d1,d0
0000A4A6 6200                       		bhi.s	Swi_NoTouch
0000A4A8 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A4AC 6500                       		bcs.s	Swi_NoTouch
0000A4AE 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A4B0 4E75                       		rts	
0000A4B2                            ; ===========================================================================
0000A4B2                            
0000A4B2                            Swi_NoTouch:
0000A4B2 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A4B4 4E75                       		rts	
0000A4B6                            ; End of function Swi_ChkTouch
0000A4B6                            ; End of function Swi_ChkTouch
0000A4B6                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A4B6                            ; ---------------------------------------------------------------------------
0000A4B6                            ; Sprite mappings - Unused switch thingy
0000A4B6                            ; ---------------------------------------------------------------------------
0000A4B6                            Map_Swi_internal:
0000A4B6 0000                       		dc.w byte_891E-Map_Swi_internal
0000A4B8 04                         byte_891E:	dc.b 4
0000A4B9 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A4BE 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A4C3 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A4C8 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A4CE 00                         		even
0000A4CE 00                         		even
0000A4CE                            
0000A4CE                            		include	"_incObj\2A SBZ Small Door.asm"
0000A4CE                            ; ---------------------------------------------------------------------------
0000A4CE                            ; Object 2A - small vertical door (SBZ)
0000A4CE                            ; ---------------------------------------------------------------------------
0000A4CE                            
0000A4CE                            AutoDoor:
0000A4CE 7000                       		moveq	#0,d0
0000A4D0 1028 0024                  		move.b	obRoutine(a0),d0
0000A4D4 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A4D8 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A4DC                            ; ===========================================================================
0000A4DC 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A4DE 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A4E0                            ; ===========================================================================
0000A4E0                            
0000A4E0                            ADoor_Main:	; Routine 0
0000A4E0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4E4 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A4EC 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A4F2 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A4F8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A4FE                            		;move.b	#4,obPriority(a0)
0000A4FE                            
0000A4FE                            ADoor_OpenShut:	; Routine 2
0000A4FE 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A502 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A506 3038 D008                  		move.w	(v_player+obX).w,d0
0000A50A D041                       		add.w	d1,d0
0000A50C B068 0008                  		cmp.w	obX(a0),d0
0000A510 6500                       		bcs.s	ADoor_Animate
0000A512 9041                       		sub.w	d1,d0
0000A514 9041                       		sub.w	d1,d0
0000A516 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A51A 6400                       		bcc.s	ADoor_Animate	; close door
0000A51C D041                       		add.w	d1,d0
0000A51E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A522 6400                       		bcc.s	loc_899A	; if yes, branch
0000A524 0828 0000 0022             		btst	#0,obStatus(a0)
0000A52A 6600                       		bne.s	ADoor_Animate
0000A52C 6000                       		bra.s	ADoor_Open
0000A52E                            ; ===========================================================================
0000A52E                            
0000A52E                            loc_899A:
0000A52E 0828 0000 0022             		btst	#0,obStatus(a0)
0000A534 6700                       		beq.s	ADoor_Animate
0000A536                            
0000A536                            ADoor_Open:
0000A536 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A53C                            
0000A53C                            ADoor_Animate:
0000A53C 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A542 6100 0000                  		bsr.w	AnimateSprite
0000A546 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A54A 6600                       		bne.s	@remember	; if yes, branch
0000A54C 323C 0011                  		move.w	#$11,d1
0000A550 343C 0020                  		move.w	#$20,d2
0000A554 3602                       		move.w	d2,d3
0000A556 5243                       		addq.w	#1,d3
0000A558 3828 0008                  		move.w	obX(a0),d4
0000A55C 6100 0000                  		bsr.w	SolidObject
0000A560                            
0000A560                            	@remember:
0000A560 6000 0000                  		bra.w	RememberState
0000A560 6000 0000                  		bra.w	RememberState
0000A564                            		include	"_anim\SBZ Small Door.asm"
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            ; Animation script - doors (SBZ)
0000A564                            ; ---------------------------------------------------------------------------
0000A564 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A566 0000                       		dc.w @open-Ani_ADoor
0000A568 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A574 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A580                            		even
0000A580                            		even
0000A580                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A580                            ; --------------------------------------------------------------------------------
0000A580                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A580                            ; --------------------------------------------------------------------------------
0000A580                            
0000A580                            SME_YnmwF:	
0000A580 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A584 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A588 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A58C 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A590 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A592 02                         SME_YnmwF_12:	dc.b 2	
0000A593 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A598 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A59D 02                         SME_YnmwF_1D:	dc.b 2	
0000A59E DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A5A3 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A5A8 02                         SME_YnmwF_28:	dc.b 2	
0000A5A9 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A5AE 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A5B3 02                         SME_YnmwF_33:	dc.b 2	
0000A5B4 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A5B9 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A5BE 02                         SME_YnmwF_3E:	dc.b 2	
0000A5BF D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A5C4 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A5C9 02                         SME_YnmwF_49:	dc.b 2	
0000A5CA CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A5CF 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A5D4 02                         SME_YnmwF_54:	dc.b 2	
0000A5D5 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A5DA 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A5DF 02                         SME_YnmwF_5F:	dc.b 2	
0000A5E0 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A5E5 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A5EA 02                         SME_YnmwF_6A:	dc.b 2	
0000A5EB C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A5F0 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A5F6 00                         		even
0000A5F6 00                         		even
0000A5F6                            
0000A5F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5F6                            
0000A5F6                            
0000A5F6                            Obj44_SolidWall:
0000A5F6 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A5FA 6700                       		beq.s	loc_8AA8
0000A5FC 6B00 0000                  		bmi.w	loc_8AC4
0000A600 4A40                       		tst.w	d0
0000A602 6700 0000                  		beq.w	loc_8A92
0000A606 6B00                       		bmi.s	loc_8A7C
0000A608 4A69 0010                  		tst.w	obVelX(a1)
0000A60C 6B00                       		bmi.s	loc_8A92
0000A60E 6000                       		bra.s	loc_8A82
0000A610                            ; ===========================================================================
0000A610                            
0000A610                            loc_8A7C:
0000A610 4A69 0010                  		tst.w	obVelX(a1)
0000A614 6A00                       		bpl.s	loc_8A92
0000A616                            
0000A616                            loc_8A82:
0000A616 9169 0008                  		sub.w	d0,obX(a1)
0000A61A 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A620 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A626                            
0000A626                            loc_8A92:
0000A626 0829 0001 0022             		btst	#1,obStatus(a1)
0000A62C 6600                       		bne.s	loc_8AB6
0000A62E 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A634 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A63A 4E75                       		rts	
0000A63C                            ; ===========================================================================
0000A63C                            
0000A63C                            loc_8AA8:
0000A63C 0828 0005 0022             		btst	#5,obStatus(a0)
0000A642 6700                       		beq.s	locret_8AC2
0000A644 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A64A                            
0000A64A                            loc_8AB6:
0000A64A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A650 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A656                            
0000A656                            locret_8AC2:
0000A656 4E75                       		rts	
0000A658                            ; ===========================================================================
0000A658                            
0000A658                            loc_8AC4:
0000A658 4A69 0012                  		tst.w	obVelY(a1)
0000A65C 6A00                       		bpl.s	locret_8AD8
0000A65E 4A43                       		tst.w	d3
0000A660 6A00                       		bpl.s	locret_8AD8
0000A662 9769 000C                  		sub.w	d3,obY(a1)
0000A666 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A66C                            
0000A66C                            locret_8AD8:
0000A66C 4E75                       		rts	
0000A66E                            ; End of function Obj44_SolidWall
0000A66E                            
0000A66E                            
0000A66E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A66E                            
0000A66E                            
0000A66E                            Obj44_SolidWall2:
0000A66E 43F8 D000                  		lea	(v_player).w,a1
0000A672 3029 0008                  		move.w	obX(a1),d0
0000A676 9068 0008                  		sub.w	obX(a0),d0
0000A67A D041                       		add.w	d1,d0
0000A67C 6B00                       		bmi.s	loc_8B48
0000A67E 3601                       		move.w	d1,d3
0000A680 D643                       		add.w	d3,d3
0000A682 B043                       		cmp.w	d3,d0
0000A684 6200                       		bhi.s	loc_8B48
0000A686 1629 0016                  		move.b	obHeight(a1),d3
0000A68A 4883                       		ext.w	d3
0000A68C D443                       		add.w	d3,d2
0000A68E 3629 000C                  		move.w	obY(a1),d3
0000A692 9668 000C                  		sub.w	obY(a0),d3
0000A696 D642                       		add.w	d2,d3
0000A698 6B00                       		bmi.s	loc_8B48
0000A69A 3802                       		move.w	d2,d4
0000A69C D844                       		add.w	d4,d4
0000A69E B644                       		cmp.w	d4,d3
0000A6A0 6400                       		bhs.s	loc_8B48
0000A6A2 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A6A6 6B00                       		bmi.s	loc_8B48
0000A6A8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A6AE 6400                       		bhs.s	loc_8B48
0000A6B0 4A78 FE08                  		tst.w	(v_debuguse).w
0000A6B4 6600                       		bne.s	loc_8B48
0000A6B6 3A00                       		move.w	d0,d5
0000A6B8 B240                       		cmp.w	d0,d1
0000A6BA 6400                       		bhs.s	loc_8B30
0000A6BC D241                       		add.w	d1,d1
0000A6BE 9041                       		sub.w	d1,d0
0000A6C0 3A00                       		move.w	d0,d5
0000A6C2 4445                       		neg.w	d5
0000A6C4                            
0000A6C4                            loc_8B30:
0000A6C4 3203                       		move.w	d3,d1
0000A6C6 B443                       		cmp.w	d3,d2
0000A6C8 6400                       		bhs.s	loc_8B3C
0000A6CA 9644                       		sub.w	d4,d3
0000A6CC 3203                       		move.w	d3,d1
0000A6CE 4441                       		neg.w	d1
0000A6D0                            
0000A6D0                            loc_8B3C:
0000A6D0 BA41                       		cmp.w	d1,d5
0000A6D2 6200                       		bhi.s	loc_8B44
0000A6D4 7801                       		moveq	#1,d4
0000A6D6 4E75                       		rts	
0000A6D8                            ; ===========================================================================
0000A6D8                            
0000A6D8                            loc_8B44:
0000A6D8 78FF                       		moveq	#-1,d4
0000A6DA 4E75                       		rts	
0000A6DC                            ; ===========================================================================
0000A6DC                            
0000A6DC                            loc_8B48:
0000A6DC 7800                       		moveq	#0,d4
0000A6DE 4E75                       		rts	
0000A6E0                            ; End of function Obj44_SolidWall2
0000A6E0                            
0000A6E0                            ; ===========================================================================
0000A6E0                            
0000A6E0                            		include	"_incObj\1E Ball Hog.asm"
0000A6E0                            ; ---------------------------------------------------------------------------
0000A6E0                            ; Object 1E - Ball Hog enemy (SBZ)
0000A6E0                            ; ---------------------------------------------------------------------------
0000A6E0                            
0000A6E0                            BallHog:
0000A6E0 7000                       		moveq	#0,d0
0000A6E2 1028 0024                  		move.b	obRoutine(a0),d0
0000A6E6 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A6EA 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A6EE                            ; ===========================================================================
0000A6EE 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A6F0 0000                       		dc.w Hog_Action-Hog_Index
0000A6F2                            
0000A6F2 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Hog_Main:	; Routine 0
0000A6F2 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A6F8 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A6FE 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A706 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A70C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A712 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A718 117C 0005 0020             		move.b	#5,obColType(a0)
0000A71E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A724 6100 0000                  		bsr.w	ObjectFall
0000A728 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A72E 4A41                       		tst.w	d1
0000A730 6A00                       		bpl.s	@floornotfound
0000A732 D368 000C                  		add.w	d1,obY(a0)
0000A736 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A73C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A740                            
0000A740                            	@floornotfound:
0000A740 4E75                       		rts	
0000A742                            ; ===========================================================================
0000A742                            
0000A742                            Hog_Action:	; Routine 2
0000A742 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A748 6100 0000                  		bsr.w	AnimateSprite
0000A74C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A752 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A754 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A758 6700                       		beq.s	@makeball	; if yes, branch
0000A75A 6000                       		bra.s	@remember
0000A75C                            ; ===========================================================================
0000A75C                            
0000A75C                            @setlaunchflag:
0000A75C 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A760                            
0000A760                            @remember:
0000A760 6000 0000                  		bra.w	RememberState
0000A764                            ; ===========================================================================
0000A764                            
0000A764                            @makeball:
0000A764 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A76A 6100 0000                  		bsr.w	FindFreeObj
0000A76E 6600                       		bne.s	@fail
0000A770 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A774 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A77A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A780 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A786 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A78C 70FC                       		moveq	#-4,d0
0000A78E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A794 6700                       		beq.s	@noflip		; if not, branch
0000A796 4440                       		neg.w	d0
0000A798 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A79C                            
0000A79C                            	@noflip:
0000A79C D169 0008                  		add.w	d0,obX(a1)
0000A7A0 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A7A6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A7AC                            
0000A7AC                            	@fail:
0000A7AC 60B2                       		bra.s	@remember
0000A7AC 60B2                       		bra.s	@remember
0000A7AE                            		include	"_incObj\20 Cannonball.asm"
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            
0000A7AE                            Cannonball:
0000A7AE 7000                       		moveq	#0,d0
0000A7B0 1028 0024                  		move.b	obRoutine(a0),d0
0000A7B4 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A7B8 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A7BC                            ; ===========================================================================
0000A7BC 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A7BE 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A7C0                            
0000A7C0 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A7C0                            ; ===========================================================================
0000A7C0                            
0000A7C0                            Cbal_Main:	; Routine 0
0000A7C0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C4 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A7CA 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7D2 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A7D8 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7DE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A7E4 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A7EA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A7F0 7000                       		moveq	#0,d0
0000A7F2 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A7F6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A7FA 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A7FE 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A804                            
0000A804                            Cbal_Bounce:	; Routine 2
0000A804 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A80A 4A68 0012                  		tst.w	obVelY(a0)
0000A80E 6B00                       		bmi.s	Cbal_ChkExplode
0000A810 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A816 4A41                       		tst.w	d1		; has ball hit the floor?
0000A818 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A81A                            
0000A81A D368 000C                  		add.w	d1,obY(a0)
0000A81E 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A824 4A03                       		tst.b	d3
0000A826 6700                       		beq.s	Cbal_ChkExplode
0000A828 6B00                       		bmi.s	loc_8CA4
0000A82A 4A68 0010                  		tst.w	obVelX(a0)
0000A82E 6A00                       		bpl.s	Cbal_ChkExplode
0000A830 4468 0010                  		neg.w	obVelX(a0)
0000A834 6000                       		bra.s	Cbal_ChkExplode
0000A836                            ; ===========================================================================
0000A836                            
0000A836                            loc_8CA4:
0000A836 4A68 0010                  		tst.w	obVelX(a0)
0000A83A 6B00                       		bmi.s	Cbal_ChkExplode
0000A83C 4468 0010                  		neg.w	obVelX(a0)
0000A840                            
0000A840                            Cbal_ChkExplode:
0000A840 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A844 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A846                            
0000A846                            	Cbal_Explode:
0000A846 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A84A 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A84E 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A854 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A858                            ; ===========================================================================
0000A858                            
0000A858                            Cbal_Animate:
0000A858 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A85C 6A00                       		bpl.s	Cbal_Display
0000A85E 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A864 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A86A                            
0000A86A                            Cbal_Display:
0000A86A 6100 0000                  		bsr.w	DisplaySprite
0000A86E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A872 0640 00E0                  		addi.w	#$E0,d0
0000A876 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A87A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A87E 4E75                       		rts	
0000A87E 4E75                       		rts	
0000A880                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A880                            ; ---------------------------------------------------------------------------
0000A880                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A880                            ; ---------------------------------------------------------------------------
0000A880                            
0000A880                            MissileDissolve:
0000A880 7000                       		moveq	#0,d0
0000A882 1028 0024                  		move.b	obRoutine(a0),d0
0000A886 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A88A 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A88E                            ; ===========================================================================
0000A88E 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A890 0000                       		dc.w MDis_Animate-MDis_Index
0000A892                            ; ===========================================================================
0000A892                            
0000A892                            MDis_Main:	; Routine 0
0000A892 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A896 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A89E 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A8A4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8AA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A8B0 117C 0000 0020             		move.b	#0,obColType(a0)
0000A8B6 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A8BC 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A8C2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A8D2                            
0000A8D2                            MDis_Animate:	; Routine 2
0000A8D2 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A8D6 6A00                       		bpl.s	@display
0000A8D8 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A8DE 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A8E2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A8E8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A8EC                            
0000A8EC                            	@display:
0000A8EC 6000 0000                  		bra.w	DisplaySprite
0000A8F0                            ; ===========================================================================
0000A8F0                            
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            
0000A8F0                            ExplosionItem:
0000A8F0 7000                       		moveq	#0,d0
0000A8F2 1028 0024                  		move.b	obRoutine(a0),d0
0000A8F6 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A8FA 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A8FE                            ; ===========================================================================
0000A8FE 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A900 0000                       		dc.w ExItem_Main-ExItem_Index
0000A902 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A904                            ; ===========================================================================
0000A904                            
0000A904                            ExItem_Animal:	; Routine 0
0000A904 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A908 6100 0000                  		bsr.w	FindFreeObj
0000A90C 6600                       		bne.s	ExItem_Main
0000A90E 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A912 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A918 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A91E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A924                            
0000A924                            ExItem_Main:	; Routine 2
0000A924 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A928 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A930 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A936 117C 0004 0001             		move.b	#4,obRender(a0)
0000A93C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A942 117C 0000 0020             		move.b	#0,obColType(a0)
0000A948 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A94E 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A954 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A964                            
0000A964                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A964 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A968 6A00                       		bpl.s	@display
0000A96A 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A970 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A974 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A97A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A97E                            
0000A97E                            	@display:
0000A97E 6000 0000                  		bra.w	DisplaySprite
0000A982                            ; ===========================================================================
0000A982                            ; ---------------------------------------------------------------------------
0000A982                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A982                            ; ---------------------------------------------------------------------------
0000A982                            
0000A982                            ExplosionBomb:
0000A982 7000                       		moveq	#0,d0
0000A984 1028 0024                  		move.b	obRoutine(a0),d0
0000A988 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A98C 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A990                            ; ===========================================================================
0000A990 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A992 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A994                            ; ===========================================================================
0000A994                            
0000A994                            ExBom_Main:	; Routine 0
0000A994 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A998 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A9A0 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A9A6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A9AC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A9B2 117C 0000 0020             		move.b	#0,obColType(a0)
0000A9B8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A9BE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A9C4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9D4                            		include	"_anim\Ball Hog.asm"
0000A9D4                            ; ---------------------------------------------------------------------------
0000A9D4                            ; Animation script - doors (SBZ)
0000A9D4                            ; ---------------------------------------------------------------------------
0000A9D4 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A9D6 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A9EE 00                         		even
0000A9EE 00                         		even
0000A9EE                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A9EE                            ; --------------------------------------------------------------------------------
0000A9EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A9EE                            ; --------------------------------------------------------------------------------
0000A9EE                            
0000A9EE                            SME_ZER01:	
0000A9EE 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A9F2 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A9F6 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A9FA 02                         SME_ZER01_C:	dc.b 2	
0000A9FB EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AA00 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AA05 02                         SME_ZER01_17:	dc.b 2	
0000AA06 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AA0B FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AA10 02                         SME_ZER01_22:	dc.b 2	
0000AA11 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AA16 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AA1B 02                         SME_ZER01_2D:	dc.b 2	
0000AA1C E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AA21 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AA26 01                         SME_ZER01_38:	dc.b 1	
0000AA27 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AA2C 01                         SME_ZER01_3E:	dc.b 1	
0000AA2D F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AA32                            		even
0000AA32                            		even
0000AA32                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AA32                            ; ---------------------------------------------------------------------------
0000AA32                            ; Sprite mappings - buzz bomber missile vanishing
0000AA32                            ; ---------------------------------------------------------------------------
0000AA32                            Map_MisDissolve_internal:
0000AA32 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AA34 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AA36 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AA38 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AA3A 01                         byte_8EAE:	dc.b 1
0000AA3B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AA40 01                         byte_8EB4:	dc.b 1
0000AA41 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AA46 01                         byte_8EBA:	dc.b 1
0000AA47 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AA4C 01                         byte_8EC0:	dc.b 1
0000AA4D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AA52                            		even
0000AA52                            		even
0000AA52                            		include	"_maps\Explosions.asm"
0000AA52                            ; ---------------------------------------------------------------------------
0000AA52                            ; Sprite mappings - explosion from a badnik or monitor
0000AA52                            ; ---------------------------------------------------------------------------
0000AA52 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AA56 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AA5A 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AA5C 01                         byte_8ED0:	dc.b 1
0000AA5D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AA62 01                         byte_8ED6:	dc.b 1
0000AA63 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AA68 01                         byte_8EDC:	dc.b 1
0000AA69 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AA6E 04                         byte_8EE2:	dc.b 4
0000AA6F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AA74 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AA79 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AA7E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AA83 04                         byte_8EF7:	dc.b 4
0000AA84 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AA89 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AA8E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AA93 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AA98                            		even
0000AA98                            ; ---------------------------------------------------------------------------
0000AA98                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AA98                            ; ---------------------------------------------------------------------------
0000AA98 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AA9A 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AA9C 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AA9E FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AAA0 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AAA2 01                         byte_8F16:	dc.b 1
0000AAA3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AAA8 01                         byte_8F1C:	dc.b 1
0000AAA9 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AAAE                            		even
0000AAAE                            		even
0000AAAE                            
0000AAAE                            		include	"_incObj\28 Animals.asm"
0000AAAE                            ; ---------------------------------------------------------------------------
0000AAAE                            ; Object 28 - animals
0000AAAE                            ; ---------------------------------------------------------------------------
0000AAAE                            
0000AAAE                            Animals:
0000AAAE 7000                       		moveq	#0,d0
0000AAB0 1028 0024                  		move.b	obRoutine(a0),d0
0000AAB4 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AAB8 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AABC                            ; ===========================================================================
0000AABC 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AAC0 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AAC4 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AAC8 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AACC 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AAD0 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AAD4 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AAD8 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AADC 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AAE0 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AAE4 0000                       		dc.w loc_92D6-Anml_Index
0000AAE6                            
0000AAE6 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AAF2                            
0000AAF2 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000AAF6 0000 0000                  		dc.l Map_Animal1
0000AAFA FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000AAFE 0000 0000                  		dc.l Map_Animal2	; mappings address
0000AB02 FE80 FD00                  		dc.w $FE80, $FD00
0000AB06 0000 0000                  		dc.l Map_Animal1
0000AB0A FEC0 FE80                  		dc.w $FEC0, $FE80
0000AB0E 0000 0000                  		dc.l Map_Animal2
0000AB12 FE40 FD00                  		dc.w $FE40, $FD00
0000AB16 0000 0000                  		dc.l Map_Animal3
0000AB1A FD00 FC00                  		dc.w $FD00, $FC00
0000AB1E 0000 0000                  		dc.l Map_Animal2
0000AB22 FD80 FC80                  		dc.w $FD80, $FC80
0000AB26 0000 0000                  		dc.l Map_Animal3
0000AB2A                            
0000AB2A FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AB3A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AB4A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AB56                            
0000AB56 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AB6A 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AB7E 0000 0000                  		dc.l Map_Animal3
0000AB82                            
0000AB82 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AB94 0565 05B3                  		dc.w $565, $5B3
0000AB98                            ; ===========================================================================
0000AB98                            
0000AB98                            Anml_Ending:	; Routine 0
0000AB98 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AB9C 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000ABA0 7000                       		moveq	#0,d0
0000ABA2 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000ABA6 D040                       		add.w	d0,d0		; multiply d0 by 2
0000ABA8 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000ABAC 0440 0014                  		subi.w	#$14,d0
0000ABB0 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000ABB6 D040                       		add.w	d0,d0
0000ABB8 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000ABBE 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000ABC2 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000ABC8 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000ABCE 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000ABD4 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000ABDA 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ABE0 117C 0004 0001             		move.b	#4,obRender(a0)
0000ABE6 08E8 0000 0001             		bset	#0,obRender(a0)
0000ABEC 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ABF2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ABF8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ABFE 6000 0000                  		bra.w	DisplaySprite
0000AC02                            ; ===========================================================================
0000AC02                            
0000AC02                            Anml_FromEnemy:
0000AC02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AC06 6100 8E04                  		bsr.w	RandomNumber
0000AC0A 0240 0001                  		andi.w	#1,d0
0000AC0E 7200                       		moveq	#0,d1
0000AC10 1238 FE10                  		move.b	(v_zone).w,d1
0000AC14 D241                       		add.w	d1,d1
0000AC16 D240                       		add.w	d0,d1
0000AC18 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AC1C 1031 1000                  		move.b	(a1,d1.w),d0
0000AC20 1140 0030                  		move.b	d0,$30(a0)
0000AC24 E748                       		lsl.w	#3,d0
0000AC26 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AC2A D2C0                       		adda.w	d0,a1
0000AC2C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AC30 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AC34 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AC38 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AC3E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AC44 6700                       		beq.s	loc_90C0	; if yes, branch
0000AC46 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AC4C                            
0000AC4C                            loc_90C0:
0000AC4C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AC52 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC58 08E8 0000 0001             		bset	#0,obRender(a0)
0000AC5E 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AC64 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AC6A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AC70 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AC76 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AC7C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AC80 6600                       		bne.s	loc_911C
0000AC82 6100 0000                  		bsr.w	FindFreeObj
0000AC86 6600                       		bne.s	Anml_Display
0000AC88 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AC8C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AC92 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AC98 3028 003E                  		move.w	$3E(a0),d0
0000AC9C E248                       		lsr.w	#1,d0
0000AC9E 1340 001A                  		move.b	d0,obFrame(a1)
0000ACA2                            
0000ACA2                            Anml_Display:
0000ACA2 6000 0000                  		bra.w	DisplaySprite
0000ACA6                            ; ===========================================================================
0000ACA6                            
0000ACA6                            loc_911C:
0000ACA6 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000ACAC 4268 0010                  		clr.w	obVelX(a0)
0000ACB0 6000 0000                  		bra.w	DisplaySprite
0000ACB4                            ; ===========================================================================
0000ACB4                            
0000ACB4                            loc_912A:
0000ACB4 4A28 0001                  		tst.b	obRender(a0)
0000ACB8 6A00 0000                  		bpl.w	DeleteObject
0000ACBC 6100 0000                  		bsr.w	ObjectFall
0000ACC0 4A68 0012                  		tst.w	obVelY(a0)
0000ACC4 6B00                       		bmi.s	loc_9180
0000ACC6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ACCC 4A41                       		tst.w	d1
0000ACCE 6A00                       		bpl.s	loc_9180
0000ACD0 D368 000C                  		add.w	d1,obY(a0)
0000ACD4 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACDA 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACE0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ACE6 1028 0030                  		move.b	$30(a0),d0
0000ACEA D000                       		add.b	d0,d0
0000ACEC 5800                       		addq.b	#4,d0
0000ACEE 1140 0024                  		move.b	d0,obRoutine(a0)
0000ACF2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ACF6 6700                       		beq.s	loc_9180
0000ACF8 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ACFE 6700                       		beq.s	loc_9180
0000AD00 4468 0010                  		neg.w	obVelX(a0)
0000AD04 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD0A                            
0000AD0A                            loc_9180:
0000AD0A 6000 0000                  		bra.w	DisplaySprite
0000AD0E                            ; ===========================================================================
0000AD0E                            
0000AD0E                            loc_9184:
0000AD0E 6100 0000                  		bsr.w	ObjectFall
0000AD12 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD18 4A68 0012                  		tst.w	obVelY(a0)
0000AD1C 6B00                       		bmi.s	loc_91AE
0000AD1E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD24 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD2A 4A41                       		tst.w	d1
0000AD2C 6A00                       		bpl.s	loc_91AE
0000AD2E D368 000C                  		add.w	d1,obY(a0)
0000AD32 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD38                            
0000AD38                            loc_91AE:
0000AD38 4A28 0028                  		tst.b	obSubtype(a0)
0000AD3C 6600                       		bne.s	loc_9224
0000AD3E 4A28 0001                  		tst.b	obRender(a0)
0000AD42 6A00 0000                  		bpl.w	DeleteObject
0000AD46 6000 0000                  		bra.w	DisplaySprite
0000AD4A                            ; ===========================================================================
0000AD4A                            
0000AD4A                            loc_91C0:
0000AD4A 6100 0000                  		bsr.w	SpeedToPos
0000AD4E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AD54 4A68 0012                  		tst.w	obVelY(a0)
0000AD58 6B00                       		bmi.s	loc_91FC
0000AD5A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD60 4A41                       		tst.w	d1
0000AD62 6A00                       		bpl.s	loc_91FC
0000AD64 D368 000C                  		add.w	d1,obY(a0)
0000AD68 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD6E 4A28 0028                  		tst.b	obSubtype(a0)
0000AD72 6700                       		beq.s	loc_91FC
0000AD74 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AD7A 6700                       		beq.s	loc_91FC
0000AD7C 4468 0010                  		neg.w	obVelX(a0)
0000AD80 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD86                            
0000AD86                            loc_91FC:
0000AD86 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AD8A 6A00                       		bpl.s	loc_9212
0000AD8C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AD92 5228 001A                  		addq.b	#1,obFrame(a0)
0000AD96 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AD9C                            
0000AD9C                            loc_9212:
0000AD9C 4A28 0028                  		tst.b	obSubtype(a0)
0000ADA0 6600                       		bne.s	loc_9224
0000ADA2 4A28 0001                  		tst.b	obRender(a0)
0000ADA6 6A00 0000                  		bpl.w	DeleteObject
0000ADAA 6000 0000                  		bra.w	DisplaySprite
0000ADAE                            ; ===========================================================================
0000ADAE                            
0000ADAE                            loc_9224:
0000ADAE 3028 0008                  		move.w	obX(a0),d0
0000ADB2 9078 D008                  		sub.w	(v_player+obX).w,d0
0000ADB6 6500                       		bcs.s	loc_923C
0000ADB8 0440 0180                  		subi.w	#$180,d0
0000ADBC 6A00                       		bpl.s	loc_923C
0000ADBE 4A28 0001                  		tst.b	obRender(a0)
0000ADC2 6A00 0000                  		bpl.w	DeleteObject
0000ADC6                            
0000ADC6                            loc_923C:
0000ADC6 6000 0000                  		bra.w	DisplaySprite
0000ADCA                            ; ===========================================================================
0000ADCA                            
0000ADCA                            loc_9240:
0000ADCA 4A28 0001                  		tst.b	obRender(a0)
0000ADCE 6A00 0000                  		bpl.w	DeleteObject
0000ADD2 5368 0036                  		subq.w	#1,$36(a0)
0000ADD6 6600 0000                  		bne.w	loc_925C
0000ADDA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000ADE0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ADE6                            
0000ADE6                            loc_925C:
0000ADE6 6000 0000                  		bra.w	DisplaySprite
0000ADEA                            ; ===========================================================================
0000ADEA                            
0000ADEA                            loc_9260:
0000ADEA 6100 0000                  		bsr.w	sub_9404
0000ADEE 6400                       		bcc.s	loc_927C
0000ADF0 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ADF6 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADFC 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AE02 6000 FF46                  		bra.w	loc_91C0
0000AE06                            ; ===========================================================================
0000AE06                            
0000AE06                            loc_927C:
0000AE06 6000 FFA6                  		bra.w	loc_9224
0000AE0A                            ; ===========================================================================
0000AE0A                            
0000AE0A                            loc_9280:
0000AE0A 6100 0000                  		bsr.w	sub_9404
0000AE0E 6A00                       		bpl.s	loc_92B6
0000AE10 4268 0010                  		clr.w	obVelX(a0)
0000AE14 4268 0032                  		clr.w	$32(a0)
0000AE18 6100 0000                  		bsr.w	SpeedToPos
0000AE1C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE22 6100 0000                  		bsr.w	loc_93C4
0000AE26 6100 0000                  		bsr.w	loc_93EC
0000AE2A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE2E 6A00                       		bpl.s	loc_92B6
0000AE30 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE36 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE3A 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE40                            
0000AE40                            loc_92B6:
0000AE40 6000 FF6C                  		bra.w	loc_9224
0000AE44                            ; ===========================================================================
0000AE44                            
0000AE44                            loc_92BA:
0000AE44 6100 0000                  		bsr.w	sub_9404
0000AE48 6A00                       		bpl.s	loc_9310
0000AE4A 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AE50 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE56 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AE5C 6000 FEB0                  		bra.w	loc_9184
0000AE60                            ; ===========================================================================
0000AE60                            
0000AE60                            loc_92D6:
0000AE60 6100 0000                  		bsr.w	ObjectFall
0000AE64 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE6A 4A68 0012                  		tst.w	obVelY(a0)
0000AE6E 6B00                       		bmi.s	loc_9310
0000AE70 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE76 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE7C 4A41                       		tst.w	d1
0000AE7E 6A00                       		bpl.s	loc_9310
0000AE80 4628 0029                  		not.b	$29(a0)
0000AE84 6600                       		bne.s	loc_9306
0000AE86 4468 0010                  		neg.w	obVelX(a0)
0000AE8A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE90                            
0000AE90                            loc_9306:
0000AE90 D368 000C                  		add.w	d1,obY(a0)
0000AE94 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE9A                            
0000AE9A                            loc_9310:
0000AE9A 6000 FF12                  		bra.w	loc_9224
0000AE9E                            ; ===========================================================================
0000AE9E                            
0000AE9E                            loc_9314:
0000AE9E 6100 0000                  		bsr.w	sub_9404
0000AEA2 6A00                       		bpl.s	loc_932E
0000AEA4 4268 0010                  		clr.w	obVelX(a0)
0000AEA8 4268 0032                  		clr.w	$32(a0)
0000AEAC 6100 0000                  		bsr.w	ObjectFall
0000AEB0 6100 0000                  		bsr.w	loc_93C4
0000AEB4 6100 0000                  		bsr.w	loc_93EC
0000AEB8                            
0000AEB8                            loc_932E:
0000AEB8 6000 FEF4                  		bra.w	loc_9224
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            loc_9332:
0000AEBC 6100 0000                  		bsr.w	sub_9404
0000AEC0 6A00                       		bpl.s	loc_936C
0000AEC2 6100 0000                  		bsr.w	ObjectFall
0000AEC6 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AECC 4A68 0012                  		tst.w	obVelY(a0)
0000AED0 6B00                       		bmi.s	loc_936C
0000AED2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AED8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AEDE 4A41                       		tst.w	d1
0000AEE0 6A00                       		bpl.s	loc_936C
0000AEE2 4468 0010                  		neg.w	obVelX(a0)
0000AEE6 0868 0000 0001             		bchg	#0,obRender(a0)
0000AEEC D368 000C                  		add.w	d1,obY(a0)
0000AEF0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEF6                            
0000AEF6                            loc_936C:
0000AEF6 6000 FEB6                  		bra.w	loc_9224
0000AEFA                            ; ===========================================================================
0000AEFA                            
0000AEFA                            loc_9370:
0000AEFA 6100 0000                  		bsr.w	sub_9404
0000AEFE 6A00                       		bpl.s	loc_93C0
0000AF00 6100 0000                  		bsr.w	SpeedToPos
0000AF04 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AF0A 4A68 0012                  		tst.w	obVelY(a0)
0000AF0E 6B00                       		bmi.s	loc_93AA
0000AF10 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF16 4A41                       		tst.w	d1
0000AF18 6A00                       		bpl.s	loc_93AA
0000AF1A 4628 0029                  		not.b	$29(a0)
0000AF1E 6600                       		bne.s	loc_93A0
0000AF20 4468 0010                  		neg.w	obVelX(a0)
0000AF24 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF2A                            
0000AF2A                            loc_93A0:
0000AF2A D368 000C                  		add.w	d1,obY(a0)
0000AF2E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF34                            
0000AF34                            loc_93AA:
0000AF34 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF38 6A00                       		bpl.s	loc_93C0
0000AF3A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF40 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF44 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF4A                            
0000AF4A                            loc_93C0:
0000AF4A 6000 FE62                  		bra.w	loc_9224
0000AF4E                            ; ===========================================================================
0000AF4E                            
0000AF4E                            loc_93C4:
0000AF4E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF54 4A68 0012                  		tst.w	obVelY(a0)
0000AF58 6B00                       		bmi.s	locret_93EA
0000AF5A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF60 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF66 4A41                       		tst.w	d1
0000AF68 6A00                       		bpl.s	locret_93EA
0000AF6A D368 000C                  		add.w	d1,obY(a0)
0000AF6E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF74                            
0000AF74                            locret_93EA:
0000AF74 4E75                       		rts	
0000AF76                            ; ===========================================================================
0000AF76                            
0000AF76                            loc_93EC:
0000AF76 08E8 0000 0001             		bset	#0,obRender(a0)
0000AF7C 3028 0008                  		move.w	obX(a0),d0
0000AF80 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AF84 6400                       		bcc.s	locret_9402
0000AF86 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AF8C                            
0000AF8C                            locret_9402:
0000AF8C 4E75                       		rts	
0000AF8E                            
0000AF8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF8E                            
0000AF8E                            
0000AF8E                            sub_9404:
0000AF8E 3038 D008                  		move.w	(v_player+obX).w,d0
0000AF92 9068 0008                  		sub.w	obX(a0),d0
0000AF96 0440 00B8                  		subi.w	#$B8,d0
0000AF9A 4E75                       		rts	
0000AF9C                            ; End of function sub_9404
0000AF9C                            ; End of function sub_9404
0000AF9C                            		include	"_incObj\29 Points.asm"
0000AF9C                            ; ---------------------------------------------------------------------------
0000AF9C                            ; Object 29 - points that appear when you destroy something
0000AF9C                            ; ---------------------------------------------------------------------------
0000AF9C                            
0000AF9C                            Points:
0000AF9C 7000                       		moveq	#0,d0
0000AF9E 1028 0024                  		move.b	obRoutine(a0),d0
0000AFA2 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AFA6 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AFAA 6000 0000                  		bra.w	DisplaySprite
0000AFAE                            ; ===========================================================================
0000AFAE 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AFB0 0000                       		dc.w Poi_Slower-Poi_Index
0000AFB2                            ; ===========================================================================
0000AFB2                            
0000AFB2                            Poi_Main:	; Routine 0
0000AFB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AFB6 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AFBE 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000AFC4 117C 0004 0001             		move.b	#4,obRender(a0)
0000AFCA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AFD0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AFD6 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AFDC                            
0000AFDC                            Poi_Slower:	; Routine 2
0000AFDC 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AFE0 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AFE4 6100 0000                  		bsr.w	SpeedToPos
0000AFE8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AFEE 4E75                       		rts	
0000AFEE 4E75                       		rts	
0000AFF0                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AFF0                            ; ---------------------------------------------------------------------------
0000AFF0                            ; Sprite mappings - animals
0000AFF0                            ; ---------------------------------------------------------------------------
0000AFF0                            Map_Animal1_internal:
0000AFF0 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AFF2 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AFF4 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AFF6 01                         byte_946C:	dc.b 1
0000AFF7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AFFC 01                         byte_9472:	dc.b 1
0000AFFD F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B002 01                         byte_9478:	dc.b 1
0000B003 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B008                            		even
0000B008                            		even
0000B008                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B008                            ; ---------------------------------------------------------------------------
0000B008                            ; Sprite mappings - animals
0000B008                            ; ---------------------------------------------------------------------------
0000B008                            Map_Animal2_internal:
0000B008 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B00A 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B00C 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B00E 01                         byte_9484:	dc.b 1
0000B00F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B014 01                         byte_948A:	dc.b 1
0000B015 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B01A 01                         byte_9490:	dc.b 1
0000B01B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B020                            		even
0000B020                            		even
0000B020                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B020                            ; ---------------------------------------------------------------------------
0000B020                            ; Sprite mappings - animals
0000B020                            ; ---------------------------------------------------------------------------
0000B020                            Map_Animal3_internal:
0000B020 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B022 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B024 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B026 01                         byte_949C:	dc.b 1
0000B027 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B02C 01                         byte_94A2:	dc.b 1
0000B02D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B032 01                         byte_94A8:	dc.b 1
0000B033 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B038                            		even
0000B038                            		even
0000B038                            Map_Poi:	include	"_maps\Points.asm"
0000B038                            ; --------------------------------------------------------------------------------
0000B038                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B038                            ; --------------------------------------------------------------------------------
0000B038                            
0000B038                            SME_qLvsg:	
0000B038 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B03C 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B040 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B044 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B046 01                         SME_qLvsg_E:	dc.b 1	
0000B047 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B04C 01                         SME_qLvsg_14:	dc.b 1	
0000B04D FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B052 01                         SME_qLvsg_1A:	dc.b 1	
0000B053 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B058 01                         SME_qLvsg_20:	dc.b 1	
0000B059 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B05E 01                         SME_qLvsg_26:	dc.b 1	
0000B05F FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B064 02                         SME_qLvsg_2C:	dc.b 2	
0000B065 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B06A FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B06F 02                         SME_qLvsg_37:	dc.b 2	
0000B070 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B075 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B07A                            		even
0000B07A                            		even
0000B07A                            
0000B07A                            		include	"_incObj\1F Crabmeat.asm"
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            
0000B07A                            Crabmeat:
0000B07A 7000                       		moveq	#0,d0
0000B07C 1028 0024                  		move.b	obRoutine(a0),d0
0000B080 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B084 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B088                            ; ===========================================================================
0000B088                            Crab_Index:
0000B088 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B08A 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B08C 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B08E 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B090 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B092                            
0000B092 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B092 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B092 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B092 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B092 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B092                            
0000B092 =00000030                  crab_timedelay:	equ $30
0000B092 =00000032                  crab_mode:	equ $32
0000B092                            ; ===========================================================================
0000B092                            
0000B092                            Crab_Main:	; Routine 0
0000B092 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B098 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B09E 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B0A6 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B0AC 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0B2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B0B8 117C 0006 0020             		move.b	#6,obColType(a0)
0000B0BE 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B0C4 6100 0000                  		bsr.w	ObjectFall
0000B0C8 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B0CE 4A41                       		tst.w	d1
0000B0D0 6A00                       		bpl.s	@floornotfound
0000B0D2 D368 000C                  		add.w	d1,obY(a0)
0000B0D6 1143 0026                  		move.b	d3,obAngle(a0)
0000B0DA 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B0E0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B0E4                            
0000B0E4                            	@floornotfound:
0000B0E4 4E75                       		rts	
0000B0E6                            ; ===========================================================================
0000B0E6                            
0000B0E6                            Crab_Action:	; Routine 2
0000B0E6 7000                       		moveq	#0,d0
0000B0E8 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B0EC 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B0F0 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B0F4 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B0FA 6100 0000                  		bsr.w	AnimateSprite
0000B0FE 6000 0000                  		bra.w	RememberState
0000B102                            ; ===========================================================================
0000B102 0000                       @index:		dc.w @waittofire-@index
0000B104 0000                       		dc.w @walkonfloor-@index
0000B106                            ; ===========================================================================
0000B106                            
0000B106                            @waittofire:
0000B106 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B10A 6A00                       		bpl.s	@dontmove
0000B10C 4A28 0001                  		tst.b	obRender(a0)
0000B110 6A00                       		bpl.s	@movecrab
0000B112 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B118 6600                       		bne.s	@fire
0000B11A                            
0000B11A                            	@movecrab:
0000B11A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B11E 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B124 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B12A 6100 0000                  		bsr.w	Crab_SetAni
0000B12E 5600                       		addq.b	#3,d0
0000B130 1140 001C                  		move.b	d0,obAnim(a0)
0000B134 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B13A 6600                       		bne.s	@noflip
0000B13C 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B140                            
0000B140                            	@dontmove:
0000B140                            	@noflip:
0000B140 4E75                       		rts	
0000B142                            ; ===========================================================================
0000B142                            
0000B142                            @fire:
0000B142 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B148 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B14E 6100 0000                  		bsr.w	FindFreeObj
0000B152 6600                       		bne.s	@failleft
0000B154 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B158 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B15E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B164 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B16A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B170 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B176                            
0000B176                            	@failleft:
0000B176 6100 0000                  		bsr.w	FindFreeObj
0000B17A 6600                       		bne.s	@failright
0000B17C 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B180 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B186 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B18C 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B192 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B198 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B19E                            
0000B19E                            	@failright:
0000B19E 4E75                       		rts	
0000B1A0                            ; ===========================================================================
0000B1A0                            
0000B1A0                            @walkonfloor:
0000B1A0 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B1A4 6B00                       		bmi.s	loc_966E
0000B1A6 6100 0000                  		bsr.w	SpeedToPos
0000B1AA 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B1B0 6600                       		bne.s	loc_9654
0000B1B2 3628 0008                  		move.w	obX(a0),d3
0000B1B6 0643 0010                  		addi.w	#$10,d3
0000B1BA 0828 0000 0022             		btst	#0,obStatus(a0)
0000B1C0 6700                       		beq.s	loc_9640
0000B1C2 0443 0020                  		subi.w	#$20,d3
0000B1C6                            
0000B1C6                            loc_9640:
0000B1C6 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B1CC 0C41 FFF8                  		cmpi.w	#-8,d1
0000B1D0 6D00                       		blt.s	loc_966E
0000B1D2 0C41 000C                  		cmpi.w	#$C,d1
0000B1D6 6C00                       		bge.s	loc_966E
0000B1D8 4E75                       		rts	
0000B1DA                            ; ===========================================================================
0000B1DA                            
0000B1DA                            loc_9654:
0000B1DA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B1E0 D368 000C                  		add.w	d1,obY(a0)
0000B1E4 1143 0026                  		move.b	d3,obAngle(a0)
0000B1E8 6100 0000                  		bsr.w	Crab_SetAni
0000B1EC 5600                       		addq.b	#3,d0
0000B1EE 1140 001C                  		move.b	d0,obAnim(a0)
0000B1F2 4E75                       		rts	
0000B1F4                            ; ===========================================================================
0000B1F4                            
0000B1F4                            loc_966E:
0000B1F4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B1F8 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B1FE 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B204 6100 0000                  		bsr.w	Crab_SetAni
0000B208 1140 001C                  		move.b	d0,obAnim(a0)
0000B20C 4E75                       		rts	
0000B20E                            ; ---------------------------------------------------------------------------
0000B20E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B20E                            ; ---------------------------------------------------------------------------
0000B20E                            
0000B20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B20E                            
0000B20E                            
0000B20E                            Crab_SetAni:
0000B20E 7000                       		moveq	#0,d0
0000B210 1628 0026                  		move.b	obAngle(a0),d3
0000B214 6B00                       		bmi.s	loc_96A4
0000B216 0C03 0006                  		cmpi.b	#6,d3
0000B21A 6500                       		bcs.s	locret_96A2
0000B21C 7001                       		moveq	#1,d0
0000B21E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B224 6600                       		bne.s	locret_96A2
0000B226 7002                       		moveq	#2,d0
0000B228                            
0000B228                            locret_96A2:
0000B228 4E75                       		rts	
0000B22A                            ; ===========================================================================
0000B22A                            
0000B22A                            loc_96A4:
0000B22A 0C03 00FA                  		cmpi.b	#-6,d3
0000B22E 6200                       		bhi.s	locret_96B6
0000B230 7002                       		moveq	#2,d0
0000B232 0828 0000 0022             		btst	#0,obStatus(a0)
0000B238 6600                       		bne.s	locret_96B6
0000B23A 7001                       		moveq	#1,d0
0000B23C                            
0000B23C                            locret_96B6:
0000B23C 4E75                       		rts	
0000B23E                            ; End of function Crab_SetAni
0000B23E                            
0000B23E                            ; ===========================================================================
0000B23E                            
0000B23E                            Crab_Delete:	; Routine 4
0000B23E 6100 0000                  		bsr.w	DeleteObject
0000B242 4E75                       		rts	
0000B244                            ; ===========================================================================
0000B244                            ; ---------------------------------------------------------------------------
0000B244                            ; Sub-object - missile that the	Crabmeat throws
0000B244                            ; ---------------------------------------------------------------------------
0000B244                            
0000B244                            Crab_BallMain:	; Routine 6
0000B244 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B248 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B250 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B256 117C 0004 0001             		move.b	#4,obRender(a0)
0000B25C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B262 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B268 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B26E 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B274 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B27A                            
0000B27A                            Crab_BallMove:	; Routine 8
0000B27A 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B280 6100 0000                  		bsr.w	AnimateSprite
0000B284 6100 0000                  		bsr.w	ObjectFall
0000B288 6100 0000                  		bsr.w	DisplaySprite
0000B28C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B290 0640 00E0                  		addi.w	#$E0,d0
0000B294 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B298 6500                       		bcs.s	@delete		; if yes, branch
0000B29A 4E75                       		rts	
0000B29C                            
0000B29C                            	@delete:
0000B29C 6000 0000                  		bra.w	DeleteObject
0000B29C 6000 0000                  		bra.w	DeleteObject
0000B2A0                            		include	"_anim\Crabmeat.asm"
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0                            ; Animation script - Crabmeat enemy
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B2A6 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B2AC 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B2B0 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B2B4 00                         		even
0000B2B4 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B2B8 00                         		even
0000B2B8 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B2BC 00                         		even
0000B2BC 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B2C2 00                         		even
0000B2C2 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B2C8 00                         		even
0000B2C8 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B2CE 00                         		even
0000B2CE 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B2D2 00                         		even
0000B2D2 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B2D6                            		even
0000B2D6                            		even
0000B2D6                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B2D6                            ; ---------------------------------------------------------------------------
0000B2D6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B2D6                            ; ---------------------------------------------------------------------------
0000B2D6                            Map_Crab_internal:
0000B2D6 0000                       		dc.w @stand-Map_Crab_internal
0000B2D8 0000                       		dc.w @walk-Map_Crab_internal
0000B2DA 0000                       		dc.w @slope1-Map_Crab_internal
0000B2DC 0000                       		dc.w @slope2-Map_Crab_internal
0000B2DE 0000                       		dc.w @firing-Map_Crab_internal
0000B2E0 0000                       		dc.w @ball1-Map_Crab_internal
0000B2E2 0000                       		dc.w @ball2-Map_Crab_internal
0000B2E4 04                         @stand:		dc.b 4
0000B2E5 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B2EA F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B2EF 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B2F4 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B2F9 04                         @walk:		dc.b 4
0000B2FA F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B2FF F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B304 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B309 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B30E 04                         @slope1:	dc.b 4
0000B30F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B314 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B319 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B31E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B323 04                         @slope2:	dc.b 4
0000B324 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B329 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B32E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B333 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B338 06                         @firing:	dc.b 6
0000B339 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B33E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B343 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B348 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B34D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B352 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B357 01                         @ball1:		dc.b 1
0000B358 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B35D 01                         @ball2:		dc.b 1
0000B35E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B364 00                         		even
0000B364 00                         		even
0000B364                            		include	"_incObj\06 Mozzietron.asm"
0000B364                            ; ===========================================================================
0000B364                            ; ---------------------------------------------------------------------------
0000B364                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B364                            ; ---------------------------------------------------------------------------
0000B364                            
0000B364                            Mozzietron:					; XREF: Obj_Index
0000B364 7000                       		moveq	#0,d0
0000B366 1028 0024                  		move.b	$24(a0),d0
0000B36A 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B36E 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B372                            ; ===========================================================================
0000B372 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B374 0000                       		dc.w MozAction-MozIndex
0000B376 0000                       		dc.w MozDelete-MozIndex
0000B378                            ; ===========================================================================
0000B378                            
0000B378                            MozMain:				; XREF: MozIndex
0000B378 5428 0024                  		addq.b	#2,$24(a0)
0000B37C 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B384 317C 0444 0002             		move.w	#$444,2(a0)
0000B38A 117C 0004 0001             		move.b	#4,1(a0)
0000B390 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B396 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B39C 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B3A2                            MozAction:				; XREF: MozIndex
0000B3A2 7000                       		moveq	#0,d0
0000B3A4 1028 0025                  		move.b	$25(a0),d0
0000B3A8 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B3AC 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B3B0 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B3B6 6100 0000                  		bsr.w	AnimateSprite
0000B3BA 6000 0000                  		bra.w	RememberState
0000B3BE                            ; ===========================================================================
0000B3BE 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B3C0 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B3C2 0000                       		dc.w MozPinned-MozIndex2
0000B3C4                            ; ===========================================================================
0000B3C4                            
0000B3C4                            MozMove:				; XREF: MozIndex2
0000B3C4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B3C8 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B3CA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B3D0 6600                       		bne.s	MozFire	; if yes, branch
0000B3D2 5428 0025                  		addq.b	#2,$25(a0)
0000B3D6 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B3DC 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B3E2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B3E8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B3EE 6600                       		bne.s	locret_986C	; if not, branch
0000B3F0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B3F4                            
0000B3F4                            locret_986C:
0000B3F4 4E75                       		rts	
0000B3F6                            ; ===========================================================================
0000B3F6                            
0000B3F6                            MozFire:				; XREF: MozMove
0000B3F6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B3FC 6100 0000                  		bsr.w	ObjectFall
0000B400 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B406 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B408 6A00                       		bpl.s   @return ; if yes, branch 
0000B40A 303C 00B6                  		move.w    #$B6,d0
0000B40E 4EB9 0000 1250             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B414 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B41A D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B41E 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B422 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B426                            		@return:
0000B426 4E75                       	    		rts
0000B428                            		
0000B428                            
0000B428                            ; ===========================================================================
0000B428                            
0000B428                            MozPinned:
0000B428 4E75                               rts
0000B42A                                    
0000B42A                            ; ===========================================================================
0000B42A                            
0000B42A                            MozChkDel:				; XREF: Obj55_DropFly
0000B42A 4A28 0001                  		tst.b	1(a0)
0000B42E 6A00 0000                  		bpl.w	DeleteObject
0000B432 4E75                       		rts	
0000B434                            ; ===========================================================================
0000B434                            
0000B434                            MozChkNrSonic:			; XREF: MozIndex2
0000B434                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B434 6B00                       		bmi.s	MozChgDir
0000B436 6100 0000                  		bsr.w	SpeedToPos
0000B43A 4A28 0034                  		tst.b	$34(a0)
0000B43E 6600                       		bne.s	locret_992A
0000B440 3038 D008                  		move.w	($FFFFD008).w,d0
0000B444 9068 0008                  		sub.w	8(a0),d0
0000B448 6A00                       		bpl.s	MozSetNrSonic
0000B44A 4440                       		neg.w	d0
0000B44C                            
0000B44C                            MozSetNrSonic:
0000B44C 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B450 6400                       		bcc.s	locret_992A	; if not, branch
0000B452 4A28 0001                  		tst.b	1(a0)
0000B456 6A00                       		bpl.s	locret_992A
0000B458 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B45E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B464 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B46A 6000                       		bra.s	MozStop
0000B46C                            ; ===========================================================================
0000B46C                            
0000B46C                            MozChgDir:				; XREF: MozChkNrSonic
0000B46C 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B472 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B478 317C 003B 0032             		move.w	#59,$32(a0)
0000B47E                            
0000B47E                            MozStop:				; XREF: MozSetNrSonic
0000B47E 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B482 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B488 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B48E                            
0000B48E                            locret_992A:
0000B48E 4E75                       		rts	
0000B490                            ; ===========================================================================
0000B490                            
0000B490                            MozDelete:				; XREF: MozIndex
0000B490 6100 0000                  		bsr.w	DeleteObject
0000B494 4E75                       		rts	
0000B494 4E75                       		rts	
0000B496                            		include	"_incObj\22 Buzz Bomber.asm"
0000B496                            ; ===========================================================================
0000B496                            ; ---------------------------------------------------------------------------
0000B496                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B496                            ; ---------------------------------------------------------------------------
0000B496                            
0000B496                            BuzzBomber:
0000B496 7000                       		moveq	#0,d0
0000B498 1028 0024                  		move.b	obRoutine(a0),d0
0000B49C 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B4A0 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B4A4                            ; ===========================================================================
0000B4A4 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B4A6 0000                       		dc.w Buzz_Action-Buzz_Index
0000B4A8 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B4AA                            
0000B4AA =00000032                  buzz_timedelay:	equ $32
0000B4AA =00000034                  buzz_buzzstatus:	equ $34
0000B4AA =0000003C                  buzz_parent:	equ $3C
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            Buzz_Main:	; Routine 0
0000B4AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B4AE 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B4B6 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B4BC 117C 0004 0001             		move.b	#4,obRender(a0)
0000B4C2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B4C8 117C 0008 0020             		move.b	#8,obColType(a0)
0000B4CE 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B4D4                            
0000B4D4                            Buzz_Action:	; Routine 2
0000B4D4 7000                       		moveq	#0,d0
0000B4D6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B4DA 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B4DE 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B4E2 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B4E8 6100 0000                  		bsr.w	AnimateSprite
0000B4EC 6000 0000                  		bra.w	RememberState
0000B4F0                            ; ===========================================================================
0000B4F0 0000                       @index:		dc.w @move-@index
0000B4F2 0000                       		dc.w @chknearsonic-@index
0000B4F4                            ; ===========================================================================
0000B4F4                            
0000B4F4                            @move:
0000B4F4 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B4F8 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B4FA 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B500 6600                       		bne.s	@fire		; if yes, branch
0000B502 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B506 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B50C 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B512 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B518 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B51E 6600                       		bne.s	@noflip		; if not, branch
0000B520 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B524                            
0000B524                            	@noflip:
0000B524 4E75                       		rts	
0000B526                            ; ===========================================================================
0000B526                            
0000B526                            	@fire:
0000B526 6100 0000                  		bsr.w	FindFreeObj
0000B52A 6600                       		bne.s	@fail
0000B52C 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B530 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B536 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B53C 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B542 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B548 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B54E 303C 0018                  		move.w	#$18,d0
0000B552 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B558 6600                       		bne.s	@noflip2	; if not, branch
0000B55A 4440                       		neg.w	d0
0000B55C 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B560                            
0000B560                            	@noflip2:
0000B560 D169 0008                  		add.w	d0,obX(a1)
0000B564 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B56A 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B570 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B574 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B57A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B580 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B586                            
0000B586                            	@fail:
0000B586 4E75                       		rts	
0000B588                            ; ===========================================================================
0000B588                            
0000B588                            @chknearsonic:
0000B588 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B58C 6B00                       		bmi.s	@chgdirection
0000B58E 6100 0000                  		bsr.w	SpeedToPos
0000B592 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B596 6600                       		bne.s	@keepgoing
0000B598 3038 D008                  		move.w	(v_player+obX).w,d0
0000B59C 9068 0008                  		sub.w	obX(a0),d0
0000B5A0 6A00                       		bpl.s	@isleft
0000B5A2 4440                       		neg.w	d0
0000B5A4                            
0000B5A4                            	@isleft:
0000B5A4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B5A8 6400                       		bcc.s	@keepgoing	; if not, branch
0000B5AA 4A28 0001                  		tst.b	obRender(a0)
0000B5AE 6A00                       		bpl.s	@keepgoing
0000B5B0 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B5B6 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B5BC 6000                       		bra.s	@stop
0000B5BE                            ; ===========================================================================
0000B5BE                            
0000B5BE                            	@chgdirection:
0000B5BE 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B5C4 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B5CA 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B5D0                            
0000B5D0                            	@stop:
0000B5D0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B5D4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B5DA 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B5E0                            
0000B5E0                            @keepgoing:
0000B5E0 4E75                       		rts	
0000B5E2                            ; ===========================================================================
0000B5E2                            
0000B5E2                            Buzz_Delete:	; Routine 4
0000B5E2 6100 0000                  		bsr.w	DeleteObject
0000B5E6 4E75                       		rts	
0000B5E6 4E75                       		rts	
0000B5E8                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B5E8                            ; ---------------------------------------------------------------------------
0000B5E8                            ; Object 23 - missile that Buzz	Bomber throws
0000B5E8                            ; ---------------------------------------------------------------------------
0000B5E8                            
0000B5E8                            Missile:
0000B5E8 7000                       		moveq	#0,d0
0000B5EA 1028 0024                  		move.b	obRoutine(a0),d0
0000B5EE 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B5F2 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B5F6                            ; ===========================================================================
0000B5F6 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B5F8 0000                       		dc.w Msl_Animate-Msl_Index
0000B5FA 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B5FC 0000                       		dc.w Msl_Delete-Msl_Index
0000B5FE 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B600                            
0000B600 =0000003C                  msl_parent:	equ $3C
0000B600                            ; ===========================================================================
0000B600                            
0000B600                            Msl_Main:	; Routine 0
0000B600 5368 0032                  		subq.w	#1,$32(a0)
0000B604 6A00                       		bpl.s	Msl_ChkCancel
0000B606 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B60A 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B612 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B618 117C 0004 0001             		move.b	#4,obRender(a0)
0000B61E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B624 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B62A 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B630 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B634 6700                       		beq.s	Msl_Animate	; if not, branch
0000B636                            
0000B636 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B63C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B642 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B648 6000                       		bra.s	Msl_Animate2
0000B64A                            ; ===========================================================================
0000B64A                            
0000B64A                            Msl_Animate:	; Routine 2
0000B64A 6100                       		bsr.s	Msl_ChkCancel
0000B64C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B652 6100 0000                  		bsr.w	AnimateSprite
0000B656 6000 0000                  		bra.w	DisplaySprite
0000B65A                            
0000B65A                            ; ---------------------------------------------------------------------------
0000B65A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B65A                            ; destroyed, and if it has, then cancel	the missile
0000B65A                            ; ---------------------------------------------------------------------------
0000B65A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B65A                            
0000B65A                            
0000B65A                            Msl_ChkCancel:
0000B65A 2268 003C                  		movea.l	msl_parent(a0),a1
0000B65E 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B662 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B664 4E75                       		rts	
0000B666                            ; End of function Msl_ChkCancel
0000B666                            
0000B666                            ; ===========================================================================
0000B666                            
0000B666                            Msl_FromBuzz:	; Routine 4
0000B666 0828 0007 0022             		btst	#7,obStatus(a0)
0000B66C 6600                       		bne.s	@explode
0000B66E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B674 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B67A 6100 0000                  		bsr.w	SpeedToPos
0000B67E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B684 6100 0000                  		bsr.w	AnimateSprite
0000B688 6100 0000                  		bsr.w	DisplaySprite
0000B68C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B690 0640 00E0                  		addi.w	#$E0,d0
0000B694 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B698 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B69A 4E75                       		rts	
0000B69C                            ; ===========================================================================
0000B69C                            
0000B69C                            	@explode:
0000B69C 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B6A0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B6A6 6000 F1D8                  		bra.w	MissileDissolve
0000B6AA                            ; ===========================================================================
0000B6AA                            
0000B6AA                            Msl_Delete:	; Routine 6
0000B6AA 6100 0000                  		bsr.w	DeleteObject
0000B6AE 4E75                       		rts	
0000B6B0                            ; ===========================================================================
0000B6B0                            
0000B6B0                            Msl_FromNewt:	; Routine 8
0000B6B0 4A28 0001                  		tst.b	obRender(a0)
0000B6B4 6AF4                       		bpl.s	Msl_Delete
0000B6B6 6100 0000                  		bsr.w	SpeedToPos
0000B6BA                            
0000B6BA                            Msl_Animate2:
0000B6BA 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B6C0 6100 0000                  		bsr.w	AnimateSprite
0000B6C4 6100 0000                  		bsr.w	DisplaySprite
0000B6C8 4E75                       		rts	
0000B6C8 4E75                       		rts	
0000B6CA                            		include	"_anim\Mozzietron.asm"
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA                            ; Animation script - Buzz Bomber enemy
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B6CC 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B6CE 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B6D0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B6D4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B6D8 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B6E0 00                         		even
0000B6E0 00                         		even
0000B6E0                            		include	"_anim\Buzz Bomber.asm"
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            ; Animation script - Buzz Bomber enemy
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B6E2 0000                       		dc.w @fly2-Ani_Buzz
0000B6E4 0000                       		dc.w @fires-Ani_Buzz
0000B6E6 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B6EA 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B6EE 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B6F2                            		even
0000B6F2                            		even
0000B6F2                            		include	"_anim\Buzz Bomber Missile.asm"
0000B6F2                            ; ---------------------------------------------------------------------------
0000B6F2                            ; Animation script - missile that Buzz Bomber throws
0000B6F2                            ; ---------------------------------------------------------------------------
0000B6F2 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B6F4 0000                       		dc.w @missile-Ani_Missile
0000B6F6 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B6FA 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B6FE                            		even
0000B6FE                            		even
0000B6FE                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B6FE                            ; --------------------------------------------------------------------------------
0000B6FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B6FE                            ; --------------------------------------------------------------------------------
0000B6FE                            
0000B6FE                            SME_qvHIs:	
0000B6FE 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B702 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B706 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B70A 02                         SME_qvHIs_C:	dc.b 2	
0000B70B FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B710 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B715 01                         SME_qvHIs_17:	dc.b 1	
0000B716 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B71B 02                         SME_qvHIs_1D:	dc.b 2	
0000B71C E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B721 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B726 03                         SME_qvHIs_28:	dc.b 3	
0000B727 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B72C E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B731 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B736 04                         SME_qvHIs_38:	dc.b 4	
0000B737 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B73C F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B741 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B746 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B74B 04                         SME_qvHIs_4D:	dc.b 4	
0000B74C E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B751 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B756 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B75B F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B760                            		even
0000B760                            		even
0000B760                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B760                            ; --------------------------------------------------------------------------------
0000B760                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B760                            ; --------------------------------------------------------------------------------
0000B760                            
0000B760                            SME_yccqJ:	
0000B760 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B764 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B768 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B76C 06                         SME_yccqJ_C:	dc.b 6	
0000B76D F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B772 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B777 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B77C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B781 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B786 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B78B 06                         SME_yccqJ_2B:	dc.b 6	
0000B78C F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B791 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B796 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B79B 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B7A0 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B7A5 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B7AA 06                         SME_yccqJ_4A:	dc.b 6	
0000B7AB F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B7B0 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B7B5 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B7BA 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B7BF EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B7C4 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B7C9 06                         SME_yccqJ_69:	dc.b 6	
0000B7CA F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B7CF F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B7D4 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B7D9 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B7DE F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B7E3 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B7E8 07                         SME_yccqJ_88:	dc.b 7	
0000B7E9 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B7EE 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B7F3 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B7F8 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B7FD 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B802 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B807 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B80C 04                         SME_yccqJ_AC:	dc.b 4	
0000B80D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B812 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B817 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B81C 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B822 00                         		even
0000B822 00                         		even
0000B822                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B822                            ; ---------------------------------------------------------------------------
0000B822                            ; Sprite mappings - missile that Buzz Bomber throws
0000B822                            ; ---------------------------------------------------------------------------
0000B822                            Map_Missile_internal:
0000B822 0000                       		dc.w @Flare1-Map_Missile_internal
0000B824 0000                       		dc.w @Flare2-Map_Missile_internal
0000B826 0000                       		dc.w @Ball1-Map_Missile_internal
0000B828 0000                       		dc.w @Ball2-Map_Missile_internal
0000B82A 01                         @Flare1:	dc.b 1
0000B82B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B830 01                         @Flare2:	dc.b 1
0000B831 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B836 01                         @Ball1:		dc.b 1
0000B837 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B83C 01                         @Ball2:		dc.b 1
0000B83D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B842                            		even
0000B842                            		even
0000B842                            
0000B842                            		include	"_incObj\25 & 37 Rings.asm"
0000B842                            ; ---------------------------------------------------------------------------
0000B842                            ; Object 25 - rings
0000B842                            ; ---------------------------------------------------------------------------
0000B842                            
0000B842                            Rings:
0000B842 7000                       		moveq	#0,d0
0000B844 1028 0024                  		move.b	obRoutine(a0),d0
0000B848 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B84C 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B850                            ; ===========================================================================
0000B850                            Ring_Index:
0000B850 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B852 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B854 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B856 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B858 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B85A 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B85C 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B85E 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B860 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B862                            
0000B862 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B862 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B862 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B862 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B862 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B862 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B862 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B862 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B862 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B862                            ; ---------------------------------------------------------------------------
0000B862                            ; Distances between rings (format: horizontal, vertical)
0000B862                            ; ---------------------------------------------------------------------------
0000B862 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B864 1800                       		dc.b $18, 0		; horizontal normal
0000B866 2000                       		dc.b $20, 0		; horizontal wide
0000B868 0010                       		dc.b 0,	$10		; vertical tight
0000B86A 0018                       		dc.b 0,	$18		; vertical normal
0000B86C 0020                       		dc.b 0,	$20		; vertical wide
0000B86E 1010                       		dc.b $10, $10		; diagonal
0000B870 1818                       		dc.b $18, $18
0000B872 2020                       		dc.b $20, $20
0000B874 F010                       		dc.b $F0, $10
0000B876 E818                       		dc.b $E8, $18
0000B878 E020                       		dc.b $E0, $20
0000B87A 1008                       		dc.b $10, 8
0000B87C 1810                       		dc.b $18, $10
0000B87E F008                       		dc.b $F0, 8
0000B880 E810                       		dc.b $E8, $10
0000B882                            ; ===========================================================================
0000B882                            
0000B882                            Ring_Main:	; Routine 0
0000B882 45F8 FC00                  		lea	(v_objstate).w,a2
0000B886 7000                       		moveq	#0,d0
0000B888 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B88C 45F2 0002                  		lea	2(a2,d0.w),a2
0000B890 1812                       		move.b	(a2),d4
0000B892 1228 0028                  		move.b	obSubtype(a0),d1
0000B896 1001                       		move.b	d1,d0
0000B898 0241 0007                  		andi.w	#7,d1
0000B89C 0C41 0007                  		cmpi.w	#7,d1
0000B8A0 6600                       		bne.s	loc_9B80
0000B8A2 7206                       		moveq	#6,d1
0000B8A4                            
0000B8A4                            	loc_9B80:
0000B8A4 4841                       		swap	d1
0000B8A6 323C 0000                  		move.w	#0,d1
0000B8AA E808                       		lsr.b	#4,d0
0000B8AC D040                       		add.w	d0,d0
0000B8AE 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B8B2 4885                       		ext.w	d5
0000B8B4 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B8B8 4886                       		ext.w	d6
0000B8BA 2248                       		movea.l	a0,a1
0000B8BC 3428 0008                  		move.w	obX(a0),d2
0000B8C0 3628 000C                  		move.w	obY(a0),d3
0000B8C4 E20C                       		lsr.b	#1,d4
0000B8C6 6500                       		bcs.s	loc_9C02
0000B8C8 0892 0007                  		bclr	#7,(a2)
0000B8CC 6000                       		bra.s	loc_9BBA
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            Ring_MakeRings:
0000B8CE 4841                       		swap	d1
0000B8D0 E20C                       		lsr.b	#1,d4
0000B8D2 6500                       		bcs.s	loc_9C02
0000B8D4 0892 0007                  		bclr	#7,(a2)
0000B8D8 6100 0000                  		bsr.w	FindFreeObj
0000B8DC 6600                       		bne.s	loc_9C0E
0000B8DE                            
0000B8DE                            loc_9BBA:
0000B8DE 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B8E2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B8E6 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B8EA 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B8F0 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B8F4 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B8FC 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B902 137C 0004 0001             		move.b	#4,obRender(a1)
0000B908 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B90E 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B914 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B91A 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B920 1341 0034                  		move.b	d1,$34(a1)
0000B924                            
0000B924                            loc_9C02:
0000B924 5241                       		addq.w	#1,d1
0000B926 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B928 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B92A 4841                       		swap	d1
0000B92C 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B930                            
0000B930                            loc_9C0E:
0000B930 0812 0000                  		btst	#0,(a2)
0000B934 6600 0000                  		bne.w	DeleteObject
0000B938                            
0000B938                            Ring_Animate:	; Routine 2
0000B938 4A38 F5C9                  		tst.b	(v_gshield).w
0000B93C 6700                       		beq.s	@skip
0000B93E 4A28 0001                  		tst.b	obRender(a0)
0000B942 6A00                       		bpl.s	@skip
0000B944                            		
0000B944 43F8 D000                  		lea (v_player).w,a1
0000B948                            		
0000B948 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B94C 9068 0008                  		sub.w	obX(a0),d0
0000B950 6A00                       		bpl.s	@a1
0000B952 4440                       		neg.w	d0
0000B954                            		
0000B954                            	@a1:
0000B954 0C40 0040                  		cmpi.w	#$40,d0
0000B958 6200                       		bhi.s	@skip
0000B95A                            		
0000B95A 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B95E 9068 000C                  		sub.w	obY(a0),d0
0000B962 6A00                       		bpl.s	@a2
0000B964 4440                       		neg.w	d0
0000B966                            		
0000B966                            	@a2:
0000B966 0C40 0040                  		cmpi.w	#$40,d0
0000B96A 6200                       		bhi.s	@skip
0000B96C                            		
0000B96C 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B972 45F8 FC00                  		lea	(v_objstate).w,a2
0000B976 7000                       		moveq	#0,d0
0000B978 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B97C 1228 0034                  		move.b	$34(a0),d1
0000B980 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B984                            		
0000B984                            	@skip:
0000B984 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B98A 6100 0000                  		bsr.w	DisplaySprite
0000B9AA 4E75                       		rts	
0000B9AC                            ; ===========================================================================
0000B9AC                            
0000B9AC                            Ring_Collect:	; Routine 4
0000B9AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B9B0 117C 0000 0020             		move.b	#0,obColType(a0)
0000B9B6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B9BC 6100 0000                  		bsr.w	CollectRing
0000B9C0 45F8 FC00                  		lea	(v_objstate).w,a2
0000B9C4 7000                       		moveq	#0,d0
0000B9C6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B9CA 1228 0034                  		move.b	$34(a0),d1
0000B9CE 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B9D2                            
0000B9D2                            Ring_Sparkle:	; Routine 6
0000B9D2 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B9D8 6100 0000                  		bsr.w	AnimateSprite
0000B9DC 6000 0000                  		bra.w	DisplaySprite
0000B9E0                            ; ===========================================================================
0000B9E0                            
0000B9E0                            Ring_Delete:	; Routine 8
0000B9E0 6000 0000                  		bra.w	DeleteObject
0000B9E4                            
0000B9E4                            Ring_Attract:	; Routine $A
0000B9E4 4A38 F5C9                  		tst.b	(v_gshield).w
0000B9E8 6600                       		bne.s	@skip
0000B9EA 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B9EE 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B9F4 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B9FA 6000                       		bra.s	@display
0000B9FC                            		
0000B9FC                            	@skip:
0000B9FC 323C 0030                  		move.w	#$30,d1	; horizontal
0000BA00 3038 D008                  		move.w	(v_player+obX).w,d0
0000BA04 B068 0008                  		cmp.w	obX(a0),d0
0000BA08 6400                       		bcc.s	@a1
0000BA0A 4441                       		neg.w	d1
0000BA0C 4A68 0010                  		tst.w	obVelX(a0)
0000BA10 6B00                       		bmi.s	@a2
0000BA12 D241                       		add.w	d1,d1
0000BA14 D241                       		add.w	d1,d1
0000BA16 6000                       		bra.s	@a2
0000BA18                            
0000BA18                            	@a1:
0000BA18 4A68 0010                  		tst.w	obVelX(a0)
0000BA1C 6A00                       		bpl.s	@a2
0000BA1E D241                       		add.w	d1,d1
0000BA20 D241                       		add.w	d1,d1
0000BA22                            
0000BA22                            	@a2:
0000BA22 D368 0010                  		add.w	d1,obVelX(a0)
0000BA26 323C 0030                  		move.w	#$30,d1	; vertical
0000BA2A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BA2E B068 000C                  		cmp.w	obY(a0),d0
0000BA32 6400                       		bcc.s	@a3
0000BA34 4441                       		neg.w	d1
0000BA36 4A68 0012                  		tst.w	obVelY(a0)
0000BA3A 6B00                       		bmi.s	@a4
0000BA3C D241                       		add.w	d1,d1
0000BA3E D241                       		add.w	d1,d1
0000BA40 6000                       		bra.s	@a4
0000BA42                            
0000BA42                            	@a3:
0000BA42 4A68 0012                  		tst.w	obVelY(a0)
0000BA46 6A00                       		bpl.s	@a4
0000BA48 D241                       		add.w	d1,d1
0000BA4A D241                       		add.w	d1,d1
0000BA4C                            
0000BA4C                            	@a4:
0000BA4C D368 0012                  		add.w	d1,obVelY(a0)
0000BA50 6100 0000                  		bsr.w	SpeedToPos
0000BA54                            		
0000BA54                            	@display:
0000BA54 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BA5A 6000 0000                  		bra.w	DisplaySprite
0000BA5E                            
0000BA5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA5E                            
0000BA5E                            
0000BA5E                            CollectRing:
0000BA5E 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BA62 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BA68 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BA6C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BA72 6500                       		bcs.s	@playsnd	; if yes, branch
0000BA74 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BA7A 6700                       		beq.s	@got100
0000BA7C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BA82 6500                       		bcs.s	@playsnd	; if yes, branch
0000BA84 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BA8A 6600                       		bne.s	@playsnd
0000BA8C                            
0000BA8C                            	@got100:
0000BA8C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BA90 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BA94 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BA98                            		
0000BA98                            
0000BA98                            	@playsnd:
0000BA98 4EF9 0000 1250             		jmp	(PlaySound_Special).l
0000BA9E                            ; End of function CollectRing
0000BA9E                            
0000BA9E                            ; ===========================================================================
0000BA9E                            ; ---------------------------------------------------------------------------
0000BA9E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BA9E                            ; ---------------------------------------------------------------------------
0000BA9E                            
0000BA9E                            RingLoss:
0000BA9E 7000                       		moveq	#0,d0
0000BAA0 1028 0024                  		move.b	obRoutine(a0),d0
0000BAA4 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BAA8 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BAAC                            ; ===========================================================================
0000BAAC 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BAAE 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BAB0 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BAB2 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BAB4 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BAB6                            ; ===========================================================================
0000BAB6                            
0000BAB6                            RLoss_Count:	; Routine 0
0000BAB6 2248                       		movea.l	a0,a1
0000BAB8 7A00                       		moveq	#0,d5
0000BABA 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BABE 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BAC4 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BAC6 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BACA 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BAD0 6700                               beq.s   @cont                       ; if not, branch
0000BAD2 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BAD8 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BADA                            @cont:
0000BADA BA40                               cmp.w   d0,d5
0000BADC 6500                               bcs.s   @belowmax
0000BADE 3A00                               move.w  d0,d5
0000BAE0                            
0000BAE0                            @belowmax:
0000BAE0 5345                               subq.w  #1,d5
0000BAE2 383C 0288                          move.w  #$288,d4
0000BAE6 6000                       		bra.s	@makerings
0000BAE8                            ; ===========================================================================
0000BAE8                            
0000BAE8                            	@loop:
0000BAE8 6100 0000                  		bsr.w	FindFreeObj
0000BAEC 6600 0000                  		bne.w	@resetcounter
0000BAF0                            
0000BAF0                            @makerings:
0000BAF0 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BAF4 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BAF8 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BAFE 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BB04 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BB0A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BB10 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BB18 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BB1E 137C 0004 0001             		move.b	#4,obRender(a1)
0000BB24 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BB2A 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BB30 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BB34 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BB36 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BB3A BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BB3E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BB40 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BB42 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BB44                            @skiphalvingvel:
0000BB44 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BB48 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BB4C 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BB50                            
0000BB50                            @resetcounter:
0000BB50 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BB56 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BB5C 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BB62 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BB64 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BB68 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BB76                            
0000BB76                            RLoss_Bounce:	; Routine 2
0000BB76 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BB7C 6100 0000                  		bsr.w	SpeedToPos
0000BB80 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BB86 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BB8A 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BB8C 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BB90 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BB94 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BB96 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BB9C                            	@skipbounceslow:
0000BB9C 6B00                       		bmi.s	@chkdel
0000BB9E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BBA2 D007                       		add.b	d7,d0
0000BBA4 0200 0003                  		andi.b	#3,d0
0000BBA8 6600                       		bne.s	@chkdel
0000BBAA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BBB0 4A41                       		tst.w	d1
0000BBB2 6A00                       		bpl.s	@chkdel
0000BBB4 D368 000C                  		add.w	d1,obY(a0)
0000BBB8 3028 0012                  		move.w	obVelY(a0),d0
0000BBBC E440                       		asr.w	#2,d0
0000BBBE 9168 0012                  		sub.w	d0,obVelY(a0)
0000BBC2 4468 0012                  		neg.w	obVelY(a0)
0000BBC6                            
0000BBC6                            	@chkdel:
0000BBC6 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BBCA 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BBCE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BBD2 0640 00E0                  		addi.w	#$E0,d0
0000BBD6 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BBDA 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BBDE 4A38 F5C9                  		tst.b	(v_gshield).w
0000BBE2 6700                       		beq.s	@skip
0000BBE4 4A28 0001                  		tst.b	obRender(a0)
0000BBE8 6A00                       		bpl.s	@skip
0000BBEA                            		
0000BBEA 43F8 D000                  		lea (v_player).w,a1
0000BBEE                            		
0000BBEE 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BBF2 9068 0008                  		sub.w	obX(a0),d0
0000BBF6 6A00                       		bpl.s	@a1
0000BBF8 4440                       		neg.w	d0
0000BBFA                            		
0000BBFA                            	@a1:
0000BBFA 0C40 00A0                  		cmpi.w	#$A0,d0
0000BBFE 6200                       		bhi.s	@skip
0000BC00                            		
0000BC00 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BC04 9068 000C                  		sub.w	obY(a0),d0
0000BC08 6A00                       		bpl.s	@a2
0000BC0A 4440                       		neg.w	d0
0000BC0C                            		
0000BC0C                            	@a2:
0000BC0C 0C40 00A0                  		cmpi.w	#$A0,d0
0000BC10 6200                       		bhi.s	@skip
0000BC12                            		
0000BC12 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BC18 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BC1C                            		
0000BC1C                            	@skip:		
0000BC1C 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BC20 D2FC 0080                          adda.w  #$80,a1
0000BC24 0C51 007E                          cmpi.w  #$7E,(a1)
0000BC28 6400                               bcc.s   @cont
0000BC2A 5451                               addq.w  #2,(a1)
0000BC2C D2D1                               adda.w  (a1),a1
0000BC2E 3288                               move.w  a0,(a1)
0000BC30                            		
0000BC30                            	@cont:
0000BC30 4E75                               rts		
0000BC32                            ; ===========================================================================
0000BC32                            
0000BC32                            RLoss_Collect:	; Routine 4
0000BC32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC36 117C 0000 0020             		move.b	#0,obColType(a0)
0000BC3C 6100 FE20                  		bsr.w	CollectRing
0000BC40                            
0000BC40                            RLoss_Sparkle:	; Routine 6
0000BC40 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BC46 6100 0000                  		bsr.w	AnimateSprite
0000BC4A 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BC4E 0C51 007E                          cmpi.w  #$7E,(a1)
0000BC52 6400                               bcc.s   @cont
0000BC54 5451                               addq.w  #2,(a1)
0000BC56 D2D1                               adda.w  (a1),a1
0000BC58 3288                               move.w  a0,(a1)
0000BC5A                            			
0000BC5A                            	@cont:
0000BC5A 4E75                               rts
0000BC5C                            ; ===========================================================================
0000BC5C                            
0000BC5C                            RLoss_Delete:	; Routine 8
0000BC5C 6000 0000                  		bra.w	DeleteObject
0000BC60                            
0000BC60                            ; ----------------------------------------------------------------------------------------------
0000BC60                            ; Ring Spawn Array 
0000BC60                            ; ----------------------------------------------------------------------------------------------
0000BC60                            
0000BC60 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BC70 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BC80 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BC90 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BCA0 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BCB0 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BCC0 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BCD0 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BCE0                                            even
0000BCE0                            ; ===========================================================================
0000BCE0                            ; -------------------------------------------------------------------------------------
0000BCE0                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BCE0                            ; -------------------------------------------------------------------------------------
0000BCE0                            
0000BCE0                            SpillRingData_Water:
0000BCE0 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BCF0 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BD00 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BD10 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BD20 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BD30 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BD40 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BD50 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BD60                                            even
0000BD60                            ; ===========================================================================				
0000BD60                            ; ===========================================================================				
0000BD60                            		include	"_incObj\4B Giant Ring.asm"
0000BD60                            ; ---------------------------------------------------------------------------
0000BD60                            ; Object 4B - giant ring for entry to special stage
0000BD60                            ; ---------------------------------------------------------------------------
0000BD60                            
0000BD60                            GiantRing:
0000BD60 7000                       		moveq	#0,d0
0000BD62 1028 0024                  		move.b	obRoutine(a0),d0
0000BD66 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BD6A 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BD6E                            ; ===========================================================================
0000BD6E 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BD70 0000                       		dc.w GRing_Animate-GRing_Index
0000BD72 0000                       		dc.w GRing_Collect-GRing_Index
0000BD74 0000                       		dc.w GRing_Delete-GRing_Index
0000BD76                            ; ===========================================================================
0000BD76                            
0000BD76                            GRing_Main:    ; Routine 0
0000BD76 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BD7E 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BD84 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BD8A 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BD90 4A28 0001                  		tst.b	obRender(a0)
0000BD94 6A00                       		bpl.s	GRing_Animate
0000BD96 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BD9C 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BDA0 0C38 0001 F5C3             		cmpi.b	#1,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BDA6 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BDA8                            
0000BDA8 4E75                       		rts    
0000BDAA                            ; ===========================================================================
0000BDAA                            
0000BDAA                            GRing_Okay:
0000BDAA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDAE 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BDB4 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BDBA 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BDC0                            
0000BDC0                            GRing_Animate:	; Routine 2
0000BDC0 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BDE4 6000 0000                  		bra.w	DisplaySprite
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            GRing_Collect:	; Routine 4
0000BDE8 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BDEC 117C 0000 0020             		move.b	#0,obColType(a0)
0000BDF2 6100 0000                  		bsr.w	FindFreeObj
0000BDF6 6600 0000                  		bne.w	GRing_PlaySnd
0000BDFA 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BDFE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BE04 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BE0A 2348 003C                  		move.l	a0,$3C(a1)
0000BE0E 3038 D008                  		move.w	(v_player+obX).w,d0
0000BE12 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BE16 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BE18 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BE1E 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BE24 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BE2A                            		
0000BE2A                            GRing_PlaySnd:
0000BE34 608A                       		bra.s	GRing_Animate
0000BE36                            ; ===========================================================================
0000BE36                            
0000BE36                            GRing_Delete:	; Routine 6
0000BE36 6000 0000                  		bra.w	DeleteObject
0000BE36 6000 0000                  		bra.w	DeleteObject
0000BE3A                            		include	"_incObj\7C Ring Flash.asm"
0000BE3A                            ; ---------------------------------------------------------------------------
0000BE3A                            ; Object 7C - flash effect when	you collect the	giant ring
0000BE3A                            ; ---------------------------------------------------------------------------
0000BE3A                            
0000BE3A                            RingFlash:
0000BE3A 7000                       		moveq	#0,d0
0000BE3C 1028 0024                  		move.b	obRoutine(a0),d0
0000BE40 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BE44 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BE48                            ; ===========================================================================
0000BE48 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BE4A 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BE4C 0000                       		dc.w Flash_Delete-Flash_Index
0000BE4E                            ; ===========================================================================
0000BE4E                            
0000BE4E                            Flash_Main:	; Routine 0
0000BE4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE52 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BE5A 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BE60 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE66 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BE6C 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BE72 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BE78                            
0000BE78                            Flash_ChkDel:	; Routine 2
0000BE78 6100                       		bsr.s	Flash_Collect
0000BE98 6000 0000                  		bra.w	DisplaySprite
0000BE9C                            
0000BE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE9C                            
0000BE9C                            
0000BE9C                            Flash_Collect:
0000BE9C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BEA0 6A00                       		bpl.s	locret_9F76
0000BEA2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BEA8 5228 001A                  		addq.b	#1,obFrame(a0)
0000BEAC 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BEB2 6400                       		bcc.s	Flash_End	; if yes, branch
0000BEB4 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BEBA 6600                       		bne.s	locret_9F76	; if not, branch
0000BEBC 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BEC0 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BEC6 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BECC 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BED2 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BED6 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BEDA                            
0000BEDA                            locret_9F76:
0000BEDA 4E75                       		rts	
0000BEDC                            ; ===========================================================================
0000BEDC                            
0000BEDC                            Flash_End:
0000BEDC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BEE0 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BEE6 588F                       		addq.l	#4,sp
0000BEE8 4E75                       		rts	
0000BEEA                            ; End of function Flash_Collect
0000BEEA                            
0000BEEA                            ; ===========================================================================
0000BEEA                            
0000BEEA                            Flash_Delete:	; Routine 4
0000BEEA 6000 0000                  		bra.w	DeleteObject
0000BEEA 6000 0000                  		bra.w	DeleteObject
0000BEEE                            
0000BEEE                            		include	"_anim\Rings.asm"
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            ; Animation script - ring
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BEF0 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BEF6                            		even
0000BEF6                            		even
0000BEF6                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BEF6                            ; --------------------------------------------------------------------------------
0000BEF6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BEF6                            ; --------------------------------------------------------------------------------
0000BEF6                            
0000BEF6                            SME_aSMQh:	
0000BEF6 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BEFA 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BEFE 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BF02 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BF06 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BF0A 01                         SME_aSMQh_14:	dc.b 1	
0000BF0B F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BF10 01                         SME_aSMQh_1A:	dc.b 1	
0000BF11 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BF16 01                         SME_aSMQh_20:	dc.b 1	
0000BF17 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BF1C 01                         SME_aSMQh_26:	dc.b 1	
0000BF1D F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BF22 01                         SME_aSMQh_2C:	dc.b 1	
0000BF23 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BF28 01                         SME_aSMQh_32:	dc.b 1	
0000BF29 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BF2E 01                         SME_aSMQh_38:	dc.b 1	
0000BF2F F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BF34 01                         SME_aSMQh_3E:	dc.b 1	
0000BF35 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BF3A 01                         SME_aSMQh_44:	dc.b 1	
0000BF3B F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BF40 01                         SME_aSMQh_4A:	dc.b 1	
0000BF41 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BF46                            		even
0000BF46                            		even
0000BF46                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BF46                            ; ---------------------------------------------------------------------------
0000BF46                            ; Sprite mappings - giant ring
0000BF46                            ; ---------------------------------------------------------------------------
0000BF46                            Map_GRing_internal:
0000BF46 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BF48 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BF4A 0000                       		dc.w byte_A036-Map_GRing_internal
0000BF4C 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BF4E 0A                         byte_9FDA:	dc.b $A
0000BF4F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BF54 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BF59 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BF5E E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BF63 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BF68 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BF6D 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BF72 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BF77 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BF7C 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BF81 08                         byte_A00D:	dc.b 8
0000BF82 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BF87 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BF8C E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BF91 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BF96 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BF9B 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BFA0 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BFA5 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BFAA 04                         byte_A036:	dc.b 4
0000BFAB E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BFB0 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BFB5 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BFBA 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BFBF 08                         byte_A04B:	dc.b 8
0000BFC0 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BFC5 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BFCA E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BFCF F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BFD4 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BFD9 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BFDE 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BFE3 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BFE8                            		even
0000BFE8                            		even
0000BFE8                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BFE8                            ; ---------------------------------------------------------------------------
0000BFE8                            ; Sprite mappings - flash effect when you collect the giant ring
0000BFE8                            ; ---------------------------------------------------------------------------
0000BFE8                            Map_Flash_internal:
0000BFE8 0000                       		dc.w byte_A084-Map_Flash_internal
0000BFEA 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BFEC 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BFEE 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BFF0 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BFF2 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BFF4 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BFF6 0000                       		dc.w byte_A103-Map_Flash_internal
0000BFF8 02                         byte_A084:	dc.b 2
0000BFF9 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BFFE 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C003 04                         byte_A08F:	dc.b 4
0000C004 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C009 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C00E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C013 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C018 04                         byte_A0A4:	dc.b 4
0000C019 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C01E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C023 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C028 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C02D 04                         byte_A0B9:	dc.b 4
0000C02E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C033 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C038 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C03D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C042 04                         byte_A0CE:	dc.b 4
0000C043 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C048 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C04D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C052 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C057 04                         byte_A0E3:	dc.b 4
0000C058 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C05D E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C062 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C067 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C06C 02                         byte_A0F8:	dc.b 2
0000C06D E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C072 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C077 04                         byte_A103:	dc.b 4
0000C078 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C07D E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C082 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C087 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C08C                            		even
0000C08C                            		even
0000C08C                            		include	"_incObj\26 Monitor.asm"
0000C08C                            ; ---------------------------------------------------------------------------
0000C08C                            ; Object 26 - monitors
0000C08C                            ; ---------------------------------------------------------------------------
0000C08C                            
0000C08C                            Monitor:
0000C08C 7000                       		moveq	#0,d0
0000C08E 1028 0024                  		move.b	obRoutine(a0),d0
0000C092 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C096 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C09A                            ; ===========================================================================
0000C09A 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C09C 0000                       		dc.w Mon_Solid-Mon_Index
0000C09E 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C0A0 0000                       		dc.w Mon_Animate-Mon_Index
0000C0A2 0000                       		dc.w Mon_Display-Mon_Index
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            Mon_Main:	; Routine 0
0000C0A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C0A8 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C0AE 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C0B4 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C0BC 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C0C2 117C 0004 0001             		move.b	#4,obRender(a0)
0000C0C8 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C0CE 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C0D4 45F8 FC00                  		lea	(v_objstate).w,a2
0000C0D8 7000                       		moveq	#0,d0
0000C0DA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C0DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C0E4 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C0EA 6700                       		beq.s	@notbroken	; if not, branch
0000C0EC 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C0F2 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C0F8 4E75                       		rts	
0000C0FA                            ; ===========================================================================
0000C0FA                            
0000C0FA                            	@notbroken:
0000C0FA 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C100 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C106                            
0000C106                            Mon_Solid:	; Routine 2
0000C106 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C10A 6700                       		beq.s	@normal		; if not, branch
0000C10C 5500                       		subq.b	#2,d0
0000C10E 6600                       		bne.s	@fall
0000C110                            
0000C110                            		; 2nd Routine 2
0000C110 7200                       		moveq	#0,d1
0000C112 1228 0014                  		move.b	obActWid(a0),d1
0000C116 0641 000B                  		addi.w	#$B,d1
0000C11A 6100 D03E                  		bsr.w	ExitPlatform
0000C11E 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C124 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C128 4228 0025                  		clr.b	ob2ndRout(a0)
0000C12C 6000 0000                  		bra.w	Mon_Animate
0000C130                            ; ===========================================================================
0000C130                            
0000C130                            	@ontop:
0000C130 363C 0010                  		move.w	#$10,d3
0000C134 3428 0008                  		move.w	obX(a0),d2
0000C138 6100 D57E                  		bsr.w	MvSonicOnPtfm
0000C13C 6000 0000                  		bra.w	Mon_Animate
0000C140                            ; ===========================================================================
0000C140                            
0000C140                            @fall:		; 2nd Routine 4
0000C140 6100 0000                  		bsr.w	ObjectFall
0000C144 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C14A 4A41                       		tst.w	d1
0000C14C 6A00 0000                  		bpl.w	Mon_Animate
0000C150 D368 000C                  		add.w	d1,obY(a0)
0000C154 4268 0012                  		clr.w	obVelY(a0)
0000C158 4228 0025                  		clr.b	ob2ndRout(a0)
0000C15C 6000 0000                  		bra.w	Mon_Animate
0000C160                            ; ===========================================================================
0000C160                            
0000C160                            @normal:	; 2nd Routine 0
0000C160 323C 001A                  		move.w	#$1A,d1
0000C164 343C 000F                  		move.w	#$F,d2
0000C168 6100 0000                  		bsr.w	Mon_SolidSides
0000C16C 6700 0000                  		beq.w	loc_A25C
0000C170 4A69 0012                  		tst.w	obVelY(a1)
0000C174 6B00                       		bmi.s	loc_A20A
0000C176 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C17C 6700                       		beq.s	loc_A25C	; if yes, branch
0000C17E 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C184 6700                       		beq.s	loc_A25C	; if yes, branch
0000C186 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C18C 6700                       		beq.s	loc_A25C	; if yes, branch
0000C18E                            
0000C18E                            loc_A20A:
0000C18E 4A41                       		tst.w	d1
0000C190 6A00                       		bpl.s	loc_A220
0000C192 9769 000C                  		sub.w	d3,obY(a1)
0000C196 6100 CEB0                  		bsr.w	loc_74AE
0000C19A 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C1A0 6000 0000                  		bra.w	Mon_Animate
0000C1A4                            ; ===========================================================================
0000C1A4                            
0000C1A4                            loc_A220:
0000C1A4 4A40                       		tst.w	d0
0000C1A6 6700 0000                  		beq.w	loc_A246
0000C1AA 6B00                       		bmi.s	loc_A230
0000C1AC 4A69 0010                  		tst.w	obVelX(a1)
0000C1B0 6B00                       		bmi.s	loc_A246
0000C1B2 6000                       		bra.s	loc_A236
0000C1B4                            ; ===========================================================================
0000C1B4                            
0000C1B4                            loc_A230:
0000C1B4 4A69 0010                  		tst.w	obVelX(a1)
0000C1B8 6A00                       		bpl.s	loc_A246
0000C1BA                            
0000C1BA                            loc_A236:
0000C1BA 9169 0008                  		sub.w	d0,obX(a1)
0000C1BE 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C1C4 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C1CA                            
0000C1CA                            loc_A246:
0000C1CA 0829 0001 0022             		btst	#1,obStatus(a1)
0000C1D0 6600                       		bne.s	loc_A26A
0000C1D2 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C1D8 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C1DE 6000                       		bra.s	Mon_Animate
0000C1E0                            ; ===========================================================================
0000C1E0                            
0000C1E0                            loc_A25C:
0000C1E0 0828 0005 0022             		btst	#5,obStatus(a0)
0000C1E6 6700                       		beq.s	Mon_Animate
0000C1E8 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C1EE 6700                       		beq.s	loc_A26A	; if so, branch
0000C1F0 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C1F6                            
0000C1F6                            loc_A26A:
0000C1F6 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C1FC 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C202                            
0000C202                            Mon_Animate:	; Routine 6
0000C202 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C208 6100 0000                  		bsr.w	AnimateSprite
0000C20C                            
0000C20C                            Mon_Display:	; Routine 8
0000C20C 6100 0000                  		bsr.w	DisplaySprite
0000C22E 4E75                       		rts	
0000C230                            ; ===========================================================================
0000C230                            
0000C230                            Mon_BreakOpen:	; Routine 4
0000C230 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C234 117C 0000 0020             		move.b	#0,obColType(a0)
0000C23A 6100 0000                  		bsr.w	FindFreeObj
0000C23E 6600                       		bne.s	Mon_Explode
0000C240 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C244 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C24A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C250 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C256                            
0000C256                            Mon_Explode:
0000C256 6100 0000                  		bsr.w	FindFreeObj
0000C25A 6600                       		bne.s	@fail
0000C25C 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C260 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C264 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C26A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C270                            
0000C270                            	@fail:
0000C270 45F8 FC00                  		lea	(v_objstate).w,a2
0000C274 7000                       		moveq	#0,d0
0000C276 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C27A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C280 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C286 6000 0000                  		bra.w	DisplaySprite
0000C286 6000 0000                  		bra.w	DisplaySprite
0000C28A                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C28A                            ; ---------------------------------------------------------------------------
0000C28A                            ; Object 2E - contents of monitors
0000C28A                            ; ---------------------------------------------------------------------------
0000C28A                            
0000C28A                            PowerUp:
0000C28A 7000                       		moveq	#0,d0
0000C28C 1028 0024                  		move.b	obRoutine(a0),d0
0000C290 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C294 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C298 6000 0000                  		bra.w	DisplaySprite
0000C29C                            ; ===========================================================================
0000C29C 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C29E 0000                       		dc.w Pow_Move-Pow_Index
0000C2A0 0000                       		dc.w Pow_Delete-Pow_Index
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            Pow_Main:	; Routine 0
0000C2A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2A6 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C2AC 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C2B2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C2B8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C2BE 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C2C4 7000                       		moveq	#0,d0
0000C2C6 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C2CA 5400                       		addq.b	#2,d0
0000C2CC 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C2D0 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C2D6 D000                       		add.b	d0,d0
0000C2D8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C2DC 5249                       		addq.w	#1,a1
0000C2DE 2149 0004                  		move.l	a1,obMap(a0)
0000C2E2                            
0000C2E2                            Pow_Move:	; Routine 2
0000C2E2 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C2E6 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C2EA 6100 0000                  		bsr.w	SpeedToPos
0000C2EE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C2F4 4E75                       		rts	
0000C2F6                            ; ===========================================================================
0000C2F6                            
0000C2F6                            Pow_Checks:
0000C2F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2FA 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C300                            
0000C300                            Pow_ChkEggman:
0000C300 1028 001C                  		move.b	obAnim(a0),d0
0000C304 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C308 6600                       		bne.s	Pow_ChkSonic
0000C30A                            		
0000C30A 4EF9 0000 0000             		jmp	Spik_Hurt
0000C310                            		
0000C310 4E75                       		rts
0000C312                            ; ===========================================================================
0000C312                            
0000C312                            Pow_ChkSonic:
0000C312 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C316 6600                       		bne.s	Pow_ChkShoes
0000C318                            
0000C318                            	ExtraLife:
0000C318 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C31C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C32A                            
0000C32A                            ; ===========================================================================
0000C32A                            
0000C32A                            Pow_ChkShoes:
0000C32A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C32E 6600                       		bne.s	Pow_ChkShield
0000C330                            
0000C330 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C336 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C33C 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C342 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C348 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C34E 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C352 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C354 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C35A 6300                       			bls.s	Pow_NoMus
0000C366                            ; ===========================================================================
0000C366                            
0000C366                            Pow_NoMus:
0000C366 4E75                       		rts	
0000C368                            ; ===========================================================================
0000C368                            
0000C368                            Pow_ChkShield:
0000C368 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C36C 6600                       		bne.s	Pow_ChkInvinc
0000C36E                            
0000C36E 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C374 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C37A 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C380 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C386 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C396                            ; ===========================================================================
0000C396                            
0000C396                            Pow_ChkInvinc:
0000C396 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C39A 6600                       		bne.s	Pow_ChkRings
0000C39C                            
0000C39C 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C3A2 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C3A8 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C3AE 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C3B4 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C3BA 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C3C0 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C3C6 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C3CC 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C3D2 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C3D8 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C3DC 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C3DE 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C3E4 6300                       			bls.s	Pow_NoMusic
0000C3F0                            ; ===========================================================================
0000C3F0                            
0000C3F0                            Pow_NoMusic:
0000C3F0 4E75                       		rts	
0000C3F2                            ; ===========================================================================
0000C3F2                            
0000C3F2                            Pow_ChkRings:
0000C3F2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C3F6 6600                       		bne.s	Pow_ChkS
0000C3F8                            
0000C3F8 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C3FE 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C404 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C40A 6500                       		bcs.s	Pow_RingSound
0000C40C 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C412 6700 FF04                  		beq.w	ExtraLife
0000C416 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C41C 6500                       		bcs.s	Pow_RingSound
0000C41E 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C424 6700 FEF2                  		beq.w	ExtraLife
0000C428                            
0000C428                            	Pow_RingSound:
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            Pow_ChkS:
0000C432 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C436 6600                       		bne.s	Pow_ChkSRing
0000C438                            		
0000C438 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C43E 6700                       		beq.s	PowS2	; if yes, branch
0000C440 0404 003B                  		subi.b	#$3B,d4
0000C444 7000                       		moveq	#0,d0
0000C446 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C44C 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C452 6000                       		bra.s	PowSPlay
0000C454                            
0000C454                            PowS2:
0000C454 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C45A 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C460 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C466 6500                       		bcs.s	PowSPlay
0000C468 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C46E 6700 FEA8                  		beq.w	ExtraLife
0000C472 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C478 6500                       		bcs.s	PowSPlay
0000C47A 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C480 6700 FE96                  		beq.w	ExtraLife	
0000C484                            
0000C484                            PowSPlay:
0000C48E                            
0000C48E                            		
0000C48E                            
0000C48E                            
0000C48E                            Pow_ChkSRing:
0000C48E 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C492 6600                       		bne.s	Pow_ChkRShield
0000C494                            
0000C494                            		
0000C494 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C49A 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C4A0 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4A6 6500                       		bcs.s	Pow_ChkSRingSound
0000C4A8 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4AE 6700 FE68                  		beq.w	ExtraLife
0000C4B2 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C4B8 6500                       		bcs.s	Pow_ChkSRingSound
0000C4BA 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C4C0 6700 FE56                  		beq.w	ExtraLife	
0000C4C4                            
0000C4C4                            Pow_ChkSRingSound:
0000C4CE                            
0000C4CE                            
0000C4CE                            Pow_ChkRShield:
0000C4CE 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C4D2 6600                       		bne.s	Pow_ChkGShield
0000C4D4                            
0000C4D4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C4DA 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C4E0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C4E6 11FC 0001 F5C8             		move.b	#1,(v_rshield).w ; give Sonic a red shield
0000C4EC 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C4FC                            
0000C4FC                            Pow_ChkGShield:
0000C4FC 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C500 6600                       		bne.s	Pow_ChkSpShield
0000C502                            
0000C502                            
0000C502 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C508 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C50E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C514 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C51A 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)	
0000C52A                            
0000C52A                            Pow_ChkSpShield:
0000C52A 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C52E 6600                       		bne.s	Pow_ChkEnd
0000C530                            
0000C530 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C536 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C53C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C542 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C548 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C558 4E71                       		nop
0000C55A                            
0000C55A                            Pow_ChkEnd:
0000C55A 4E75                       		rts
0000C55C                            ; ===========================================================================
0000C55C                            
0000C55C                            Pow_Delete:	; Routine 4
0000C55C 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C560 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C564 4E75                       		rts	
0000C564 4E75                       		rts	
0000C566                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C566                            ; ---------------------------------------------------------------------------
0000C566                            ; Subroutine to	make the sides of a monitor solid
0000C566                            ; ---------------------------------------------------------------------------
0000C566                            
0000C566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C566                            
0000C566                            
0000C566                            Mon_SolidSides:
0000C566 43F8 D000                  		lea	(v_player).w,a1
0000C56A 3029 0008                  		move.w	obX(a1),d0
0000C56E 9068 0008                  		sub.w	obX(a0),d0
0000C572 D041                       		add.w	d1,d0
0000C574 6B00                       		bmi.s	loc_A4E6
0000C576 3601                       		move.w	d1,d3
0000C578 D643                       		add.w	d3,d3
0000C57A B043                       		cmp.w	d3,d0
0000C57C 6200                       		bhi.s	loc_A4E6
0000C57E 1629 0016                  		move.b	obHeight(a1),d3
0000C582 4883                       		ext.w	d3
0000C584 D443                       		add.w	d3,d2
0000C586 3629 000C                  		move.w	obY(a1),d3
0000C58A 9668 000C                  		sub.w	obY(a0),d3
0000C58E D642                       		add.w	d2,d3
0000C590 6B00                       		bmi.s	loc_A4E6
0000C592 D442                       		add.w	d2,d2
0000C594 B642                       		cmp.w	d2,d3
0000C596 6400                       		bcc.s	loc_A4E6
0000C598 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C59C 6B00                       		bmi.s	loc_A4E6
0000C59E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C5A4 6400                       		bcc.s	loc_A4E6
0000C5A6 4A78 FE08                  		tst.w	(v_debuguse).w
0000C5AA 6600                       		bne.s	loc_A4E6
0000C5AC B240                       		cmp.w	d0,d1
0000C5AE 6400                       		bcc.s	loc_A4DC
0000C5B0 D241                       		add.w	d1,d1
0000C5B2 9041                       		sub.w	d1,d0
0000C5B4                            
0000C5B4                            loc_A4DC:
0000C5B4 0C43 0010                  		cmpi.w	#$10,d3
0000C5B8 6500                       		bcs.s	loc_A4EA
0000C5BA                            
0000C5BA                            loc_A4E2:
0000C5BA 7201                       		moveq	#1,d1
0000C5BC 4E75                       		rts	
0000C5BE                            ; ===========================================================================
0000C5BE                            
0000C5BE                            loc_A4E6:
0000C5BE 7200                       		moveq	#0,d1
0000C5C0 4E75                       		rts	
0000C5C2                            ; ===========================================================================
0000C5C2                            
0000C5C2                            loc_A4EA:
0000C5C2 7200                       		moveq	#0,d1
0000C5C4 1228 0014                  		move.b	obActWid(a0),d1
0000C5C8 5841                       		addq.w	#4,d1
0000C5CA 3401                       		move.w	d1,d2
0000C5CC D442                       		add.w	d2,d2
0000C5CE D269 0008                  		add.w	obX(a1),d1
0000C5D2 9268 0008                  		sub.w	obX(a0),d1
0000C5D6 6BE2                       		bmi.s	loc_A4E2
0000C5D8 B242                       		cmp.w	d2,d1
0000C5DA 64DE                       		bcc.s	loc_A4E2
0000C5DC 72FF                       		moveq	#-1,d1
0000C5DE 4E75                       		rts	
0000C5E0                            ; End of function Obj26_SolidSides
0000C5E0                            ; End of function Obj26_SolidSides
0000C5E0                            		include	"_anim\Monitor.asm"
0000C5E0                            ; ---------------------------------------------------------------------------
0000C5E0                            ; Animation script - monitors
0000C5E0                            ; ---------------------------------------------------------------------------
0000C5E0 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C5E6 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C5EC 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C5F2 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C5F8 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C5FE 00                         		even
0000C5FE 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C60A 00                         		even
0000C60A 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C616 00                         		even
0000C616 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C622 00                         		even
0000C622 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C62E 00                         		even
0000C62E 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C63A 00                         		even
0000C63A 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C646 00                         		even
0000C646 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C652 00                         		even
0000C652 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C65E 00                         		even
0000C65E 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C666 00                         		even
0000C666 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C672 00                         		even
0000C672 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C67E 00                         		even
0000C67E 00                         		even
0000C67E                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C67E                            ; --------------------------------------------------------------------------------
0000C67E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C67E                            ; --------------------------------------------------------------------------------
0000C67E                            
0000C67E                            SME_VSEMD:	
0000C67E 0000 0000                  		dc.w SME_VSEMD_1E-SME_VSEMD, SME_VSEMD_24-SME_VSEMD	
0000C682 0000 0000                  		dc.w SME_VSEMD_2F-SME_VSEMD, SME_VSEMD_3A-SME_VSEMD	
0000C686 0000 0000                  		dc.w SME_VSEMD_45-SME_VSEMD, SME_VSEMD_50-SME_VSEMD	
0000C68A 0000 0000                  		dc.w SME_VSEMD_5B-SME_VSEMD, SME_VSEMD_66-SME_VSEMD	
0000C68E 0000 0000                  		dc.w SME_VSEMD_71-SME_VSEMD, SME_VSEMD_7C-SME_VSEMD	
0000C692 0000 0000                  		dc.w SME_VSEMD_87-SME_VSEMD, SME_VSEMD_92-SME_VSEMD	
0000C696 0000 0000                  		dc.w SME_VSEMD_AC-SME_VSEMD, SME_VSEMD_B7-SME_VSEMD	
0000C69A 0000                       		dc.w SME_VSEMD_C2-SME_VSEMD	
0000C69C 01                         SME_VSEMD_1E:	dc.b 1	
0000C69D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6A2 02                         SME_VSEMD_24:	dc.b 2	
0000C6A3 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C6A8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6AD 02                         SME_VSEMD_2F:	dc.b 2	
0000C6AE F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C6B3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6B8 02                         SME_VSEMD_3A:	dc.b 2	
0000C6B9 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C6BE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6C3 02                         SME_VSEMD_45:	dc.b 2	
0000C6C4 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C6C9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6CE 02                         SME_VSEMD_50:	dc.b 2	
0000C6CF F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C6D4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6D9 02                         SME_VSEMD_5B:	dc.b 2	
0000C6DA F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C6DF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6E4 02                         SME_VSEMD_66:	dc.b 2	
0000C6E5 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C6EA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6EF 02                         SME_VSEMD_71:	dc.b 2	
0000C6F0 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C6F5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6FA 02                         SME_VSEMD_7C:	dc.b 2	
0000C6FB F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C700 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C705 02                         SME_VSEMD_87:	dc.b 2	
0000C706 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C70B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C710 05                         SME_VSEMD_92:	dc.b 5	
0000C711 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C716 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C71B 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C720 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C725 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C72A 02                         SME_VSEMD_AC:	dc.b 2	
0000C72B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C730 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C735 02                         SME_VSEMD_B7:	dc.b 2	
0000C736 F505 2040 F8               		dc.b $F5, 5, $20, $40, $F8	
0000C73B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C740 02                         SME_VSEMD_C2:	dc.b 2	
0000C741 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C746 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C74C 00                         		even
0000C74C 00                         		even
0000C74C                            
0000C74C                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C74C                            ; ---------------------------------------------------------------------------
0000C74C                            ; Object 0E - Sonic on the title screen
0000C74C                            ; ---------------------------------------------------------------------------
0000C74C                            
0000C74C                            TitleSonic:
0000C74C 7000                       		moveq	#0,d0
0000C74E 1028 0024                  		move.b	obRoutine(a0),d0
0000C752 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C756 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C75A                            ; ===========================================================================
0000C75A 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C75C 0000                       		dc.w TSon_Delay-TSon_Index
0000C75E 0000                       		dc.w TSon_Move-TSon_Index
0000C760 0000                       		dc.w TSon_Animate-TSon_Index
0000C762                            ; ===========================================================================
0000C762                            
0000C762                            TSon_Main:	; Routine 0
0000C762 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C766 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C76C 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C772 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C77A 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C780 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C786 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C78C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C792 6100 0000                  		bsr.w	AnimateSprite
0000C796                            
0000C796                            TSon_Delay:	;Routine 2
0000C796 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C79A 6A00                       		bpl.s	@wait		; if time remains, branch
0000C79C 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C7A0 6000 0000                  		bra.w	DisplaySprite
0000C7A4                            
0000C7A4                            	@wait:
0000C7A4 4E75                       		rts	
0000C7A6                            ; ===========================================================================
0000C7A6                            
0000C7A6                            TSon_Move:	; Routine 4
0000C7A6 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C7AA 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C7B0 6600                       		bne.s	@display	; if not, branch
0000C7B2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C7B6                            
0000C7B6                            	@display:
0000C7B6 6000 0000                  		bra.w	DisplaySprite
0000C7BA                            
0000C7BA 4E75                       		rts	
0000C7BC                            ; ===========================================================================
0000C7BC                            
0000C7BC                            TSon_Animate:	; Routine 6
0000C7BC 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C7C2 6100 0000                  		bsr.w	AnimateSprite
0000C7C6 6000 0000                  		bra.w	DisplaySprite
0000C7CA                            
0000C7CA 4E75                       		rts	
0000C7CA 4E75                       		rts	
0000C7CC                            		include	"_incObj\0F Press Start and TM.asm"
0000C7CC                            ; ---------------------------------------------------------------------------
0000C7CC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C7CC                            ; ---------------------------------------------------------------------------
0000C7CC                            
0000C7CC                            PSBTM:
0000C7CC 7000                       		moveq	#0,d0
0000C7CE 1028 0024                  		move.b	obRoutine(a0),d0
0000C7D2 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C7D6 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C7DA 6000 0000                  		bra.w	DisplaySprite
0000C7DE                            ; ===========================================================================
0000C7DE 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C7E0 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C7E2 0000                       		dc.w PSB_Exit-PSB_Index
0000C7E4                            ; ===========================================================================
0000C7E4                            
0000C7E4                            PSB_Main:	; Routine 0
0000C7E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C7E8 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C7EE 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C7F4 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C7FC 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C802 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C808 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C80A                            
0000C80A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C80E 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C814 6600                       		bne.s	PSB_Exit	; if not, branch
0000C816                            
0000C816 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C81C 317C 0170 0008             		move.w	#$170,obX(a0)
0000C822 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C828                            
0000C828                            PSB_Exit:	; Routine 4
0000C828 4E75                       		rts	
0000C82A                            ; ===========================================================================
0000C82A                            
0000C82A                            PSB_PrsStart:	; Routine 2
0000C82A 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C830 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C830 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C834                            
0000C834                            		include	"_anim\Title Screen Sonic.asm"
0000C834                            ; ---------------------------------------------------------------------------
0000C834                            ; Animation script - Sonic on the title screen
0000C834                            ; ---------------------------------------------------------------------------
0000C834 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C836 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C842 00                         		even
0000C842 00                         		even
0000C842                            		include	"_anim\Press Start and TM.asm"
0000C842                            ; ---------------------------------------------------------------------------
0000C842                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C842                            ; ---------------------------------------------------------------------------
0000C842 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C844 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C848                            		even
0000C848                            		even
0000C848                            
0000C848                            		include	"_incObj\sub AnimateSprite.asm"
0000C848                            ; ---------------------------------------------------------------------------
0000C848                            ; Subroutine to	animate	a sprite using an animation script
0000C848                            ; ---------------------------------------------------------------------------
0000C848                            
0000C848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C848                            
0000C848                            
0000C848                            AnimateSprite:
0000C848 7000                       		moveq	#0,d0
0000C84A 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C84E B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C852 6700                       		beq.s	Anim_Run	; if not, branch
0000C854                            
0000C854 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C858 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C85E 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C864                            
0000C864                            Anim_Run:
0000C864 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C868 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C86A D040                       		add.w	d0,d0
0000C86C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C870 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C874 7200                       		moveq	#0,d1
0000C876 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C87A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C87E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C880                            
0000C880                            Anim_Next:
0000C880 1200                       		move.b	d0,d1
0000C882 0200 001F                  		andi.b	#$1F,d0
0000C886 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C88A 1028 0022                  		move.b	obStatus(a0),d0
0000C88E E719                       		rol.b	#3,d1
0000C890 B101                       		eor.b	d0,d1
0000C892 0201 0003                  		andi.b	#3,d1
0000C896 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C89C 8328 0001                  		or.b	d1,obRender(a0)
0000C8A0 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C8A4                            
0000C8A4                            Anim_Wait:
0000C8A4 4E75                       		rts	
0000C8A6                            ; ===========================================================================
0000C8A6                            
0000C8A6                            Anim_End_FF:
0000C8A6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C8A8 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C8AA 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C8B0 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C8B4 60CA                       		bra.s	Anim_Next
0000C8B6                            ; ===========================================================================
0000C8B6                            
0000C8B6                            Anim_End_FE:
0000C8B6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C8B8 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C8BA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C8BE 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C8C2 9200                       		sub.b	d0,d1
0000C8C4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C8C8 60B6                       		bra.s	Anim_Next
0000C8CA                            ; ===========================================================================
0000C8CA                            
0000C8CA                            Anim_End_FD:
0000C8CA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C8CC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C8CE 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C8D4                            
0000C8D4                            Anim_End_FC:
0000C8D4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C8D6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C8D8 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C8DC                            
0000C8DC                            Anim_End_FB:
0000C8DC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C8DE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C8E0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C8E6 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C8EA                            
0000C8EA                            Anim_End_FA:
0000C8EA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C8EC 6600                       		bne.s	Anim_End	; if not, branch
0000C8EE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C8F2                            
0000C8F2                            Anim_End:
0000C8F2 4E75                       		rts	
0000C8F4                            ; End of function AnimateSprite
0000C8F4                            ; End of function AnimateSprite
0000C8F4                            
0000C8F4                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4                            Map_PSB_internal:
0000C8F4 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C8F6 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C8F8 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C8FA 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C8FC 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C8FD 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C902 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C907 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C90C 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C911 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C916 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C91B 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C91C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C921 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C926 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C92B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C930 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C935 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C93A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C93F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C944 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C949 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C94E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C953 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C958 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C95D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C962 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C967 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C96C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C971 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C976 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C97B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C980 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C985 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C98A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C98F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C994 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C999 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C99E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9A3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9A8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9AD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9B2 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C9B3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C9B8                            		even
0000C9B8                            		even
0000C9B8                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C9B8                            ; ---------------------------------------------------------------------------
0000C9B8                            ; Sprite mappings - Sonic on the title screen
0000C9B8                            ; ---------------------------------------------------------------------------
0000C9B8                            Map_TSon_internal:
0000C9B8 0000                       		dc.w byte_A898-Map_TSon_internal
0000C9BA 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C9BC 0000                       		dc.w byte_A917-Map_TSon_internal
0000C9BE 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C9C0 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C9C2 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C9C4 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C9C6 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C9C8 0A                         byte_A898:	dc.b $A
0000C9C9 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C9CE 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C9D3 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C9D8 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C9DD 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C9E2 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C9E7 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C9EC 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C9F1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C9F6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C9FB 0F                         byte_A8CB:	dc.b $F
0000C9FC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CA01 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CA06 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CA0B 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CA10 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CA15 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA1A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA1F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA24 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA29 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA2E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA33 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA38 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA3D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA42 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA47 11                         byte_A917:	dc.b $11
0000CA48 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CA4D 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CA52 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CA57 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CA5C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CA61 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CA66 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CA6B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA70 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA75 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA7A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA7F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA84 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA89 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA8E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA93 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA98 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA9D 0D                         byte_A96D:	dc.b $D
0000CA9E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CAA3 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CAA8 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CAAD 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CAB2 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CAB7 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CABC 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CAC1 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CAC6 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CACB 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CAD0 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CAD5 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CADA 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CADF 0B                         byte_A9AF:	dc.b $B
0000CAE0 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CAE5 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CAEA 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CAEF 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CAF4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CAF9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CAFE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CB03 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CB08 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CB0D 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CB12 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CB17 13                         byte_A9E7:	dc.b $13
0000CB18 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB1D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB22 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB27 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB2C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB31 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB36 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB3B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB40 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB45 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB4A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB4F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB54 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB59 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB5E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB63 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB68 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB6D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB72 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB77 15                         byte_AA47:	dc.b $15
0000CB78 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB7D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB82 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB87 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB8C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CB91 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CB96 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB9B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBA0 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBA5 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBAA 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBAF 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBB4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBB9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBBE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBC3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CBC8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CBCD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBD2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBD7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBDC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBE1 16                         byte_AAB1:	dc.b $16
0000CBE2 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CBE7 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CBEC 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CBF1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CBF6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CBFB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC00 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC05 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC0A 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC0F 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC14 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC19 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC1E 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC23 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC28 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC2D 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC32 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC37 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC3C 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC41 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC46 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC4B 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC50                            		even
0000CC50                            		even
0000CC50                            
0000CC50                            		include	"_incObj\2B Chopper.asm"
0000CC50                            ; ---------------------------------------------------------------------------
0000CC50                            ; Object 2B - Chopper enemy (GHZ)
0000CC50                            ; ---------------------------------------------------------------------------
0000CC50                            
0000CC50                            Chopper:
0000CC50 7000                       		moveq	#0,d0
0000CC52 1028 0024                  		move.b	obRoutine(a0),d0
0000CC56 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CC5A 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CC5E 6000 0000                  		bra.w	RememberState
0000CC62                            ; ===========================================================================
0000CC62 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CC64 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CC66                            
0000CC66 =00000030                  chop_origY:	equ $30
0000CC66                            ; ===========================================================================
0000CC66                            
0000CC66                            Chop_Main:	; Routine 0
0000CC66 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC6A 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CC72 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CC78 117C 0004 0001             		move.b	#4,obRender(a0)
0000CC7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CC84 117C 0009 0020             		move.b	#9,obColType(a0)
0000CC8A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CC90 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC96 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CC9C                            
0000CC9C                            Chop_ChgSpeed:	; Routine 2
0000CC9C 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CCA2 6100 FBA4                  		bsr.w	AnimateSprite
0000CCA6 6100 0000                  		bsr.w	SpeedToPos
0000CCAA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CCB0 3028 0030                  		move.w	chop_origY(a0),d0
0000CCB4 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CCB8 6400                       		bcc.s	@chganimation	; if not, branch
0000CCBA 3140 000C                  		move.w	d0,obY(a0)
0000CCBE 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCC4                            
0000CCC4                            	@chganimation:
0000CCC4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CCCA 0440 00C0                  		subi.w	#$C0,d0
0000CCCE B068 000C                  		cmp.w	obY(a0),d0
0000CCD2 6400                       		bcc.s	@nochg
0000CCD4 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CCDA 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CCDE 6B00                       		bmi.s	@nochg		; if not, branch
0000CCE0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CCE6                            
0000CCE6                            	@nochg:
0000CCE6 4E75                       		rts	
0000CCE6 4E75                       		rts	
0000CCE8                            		include	"_anim\Chopper.asm"
0000CCE8                            ; ---------------------------------------------------------------------------
0000CCE8                            ; Animation script - Chopper enemy
0000CCE8                            ; ---------------------------------------------------------------------------
0000CCE8 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CCEA 0000                       		dc.w @fast-Ani_Chop
0000CCEC 0000                       		dc.w @still-Ani_Chop
0000CCEE 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CCF2 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CCF6 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CCFA 00                         		even
0000CCFA 00                         		even
0000CCFA                            Map_Chop:	include	"_maps\Chopper.asm"
0000CCFA                            ; ---------------------------------------------------------------------------
0000CCFA                            ; Sprite mappings - Chopper enemy (GHZ)
0000CCFA                            ; ---------------------------------------------------------------------------
0000CCFA                            Map_Chop_internal:
0000CCFA 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CCFC 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CCFE 01                         @mouthshut:	dc.b 1
0000CCFF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CD04 01                         @mouthopen:	dc.b 1
0000CD05 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CD0A                            		even
0000CD0A                            		even
0000CD0A                            		include	"_incObj\2C Jaws.asm"
0000CD0A                            ; ---------------------------------------------------------------------------
0000CD0A                            ; Object 2C - Jaws enemy (LZ)
0000CD0A                            ; ---------------------------------------------------------------------------
0000CD0A                            
0000CD0A                            Jaws:
0000CD0A 7000                       		moveq	#0,d0
0000CD0C 1028 0024                  		move.b	obRoutine(a0),d0
0000CD10 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CD14 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CD18                            ; ===========================================================================
0000CD18 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CD1A 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CD1C                            
0000CD1C =00000030                  jaws_timecount:	equ $30
0000CD1C =00000032                  jaws_timedelay:	equ $32
0000CD1C                            ; ===========================================================================
0000CD1C                            
0000CD1C                            Jaws_Main:	; Routine 0
0000CD1C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD20 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CD28 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CD2E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CD34 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CD3A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD40 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD46 7000                       		moveq	#0,d0
0000CD48 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CD4C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CD4E 5340                       		subq.w	#1,d0
0000CD50 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CD54 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CD58 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CD5E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CD64 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CD66 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CD6A                            
0000CD6A                            Jaws_Turn:	; Routine 2
0000CD6A 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CD6E 6A00                       		bpl.s	@animate	; if time remains, branch
0000CD70 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CD76 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CD7A 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CD80 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CD86                            
0000CD86                            	@animate:
0000CD86 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CD8C 6100 FABA                  		bsr.w	AnimateSprite
0000CD90 6100 0000                  		bsr.w	SpeedToPos
0000CD94 6000 0000                  		bra.w	RememberState
0000CD94 6000 0000                  		bra.w	RememberState
0000CD98                            		include	"_anim\Jaws.asm"
0000CD98                            ; ---------------------------------------------------------------------------
0000CD98                            ; Animation script - Jaws enemy
0000CD98                            ; ---------------------------------------------------------------------------
0000CD98 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CD9A 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CDA0                            		even
0000CDA0                            		even
0000CDA0                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CDA0                            ; --------------------------------------------------------------------------------
0000CDA0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CDA0                            ; --------------------------------------------------------------------------------
0000CDA0                            
0000CDA0                            SME_O5C0c:	
0000CDA0 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CDA4 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CDA8 02                         SME_O5C0c_8:	dc.b 2	
0000CDA9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDAE F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDB3 02                         SME_O5C0c_13:	dc.b 2	
0000CDB4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDB9 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDBE 02                         SME_O5C0c_1E:	dc.b 2	
0000CDBF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDC4 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDC9 02                         SME_O5C0c_29:	dc.b 2	
0000CDCA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDCF F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDD4                            		even
0000CDD4                            		even
0000CDD4                            		include	"_incObj\2D Burrobot.asm"
0000CDD4                            ; ---------------------------------------------------------------------------
0000CDD4                            ; Object 2D - Burrobot enemy (LZ)
0000CDD4                            ; ---------------------------------------------------------------------------
0000CDD4                            
0000CDD4                            Burrobot:
0000CDD4 7000                       		moveq	#0,d0
0000CDD6 1028 0024                  		move.b	obRoutine(a0),d0
0000CDDA 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CDDE 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CDE2                            ; ===========================================================================
0000CDE2 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CDE4 0000                       		dc.w Burro_Action-Burro_Index
0000CDE6                            
0000CDE6 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CDE6                            ; ===========================================================================
0000CDE6                            
0000CDE6                            Burro_Main:	; Routine 0
0000CDE6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDEA 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CDF0 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CDF6 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CDFE 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CE04 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CE0A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE10 117C 0005 0020             		move.b	#5,obColType(a0)
0000CE16 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CE1C 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CE20 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE26                            
0000CE26                            Burro_Action:	; Routine 2
0000CE26 7000                       		moveq	#0,d0
0000CE28 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CE2C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CE30 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CE34 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CE3A 6100 FA0C                  		bsr.w	AnimateSprite
0000CE3E 6000 0000                  		bra.w	RememberState
0000CE42                            ; ===========================================================================
0000CE42 0000                       @index:		dc.w @changedir-@index
0000CE44 0000                       		dc.w Burro_Move-@index
0000CE46 0000                       		dc.w Burro_Jump-@index
0000CE48 0000                       		dc.w Burro_ChkSonic-@index
0000CE4A                            ; ===========================================================================
0000CE4A                            
0000CE4A                            @changedir:
0000CE4A 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE4E 6A00                       		bpl.s	@nochg
0000CE50 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE54 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE5A 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CE60 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE66 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CE6C 6700                       		beq.s	@nochg
0000CE6E 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CE72                            
0000CE72                            	@nochg:
0000CE72 4E75                       		rts	
0000CE74                            ; ===========================================================================
0000CE74                            
0000CE74                            Burro_Move:
0000CE74 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE78 6B00                       		bmi.s	loc_AD84
0000CE7A 6100 0000                  		bsr.w	SpeedToPos
0000CE7E 0868 0000 0032             		bchg	#0,$32(a0)
0000CE84 6600                       		bne.s	loc_AD78
0000CE86 3628 0008                  		move.w	obX(a0),d3
0000CE8A 0643 000C                  		addi.w	#$C,d3
0000CE8E 0828 0000 0022             		btst	#0,obStatus(a0)
0000CE94 6600                       		bne.s	loc_AD6A
0000CE96 0443 0018                  		subi.w	#$18,d3
0000CE9A                            
0000CE9A                            loc_AD6A:
0000CE9A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CEA0 0C41 000C                  		cmpi.w	#$C,d1
0000CEA4 6C00                       		bge.s	loc_AD84
0000CEA6 4E75                       		rts	
0000CEA8                            ; ===========================================================================
0000CEA8                            
0000CEA8                            loc_AD78:
0000CEA8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEAE D368 000C                  		add.w	d1,obY(a0)
0000CEB2 4E75                       		rts	
0000CEB4                            ; ===========================================================================
0000CEB4                            
0000CEB4                            loc_AD84:
0000CEB4 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CEBA 6700                       		beq.s	loc_ADA4
0000CEBC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEC0 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CEC6 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CECC 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CED2 4E75                       		rts	
0000CED4                            ; ===========================================================================
0000CED4                            
0000CED4                            loc_ADA4:
0000CED4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CED8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CEDE 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CEE4 4E75                       		rts	
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            Burro_Jump:
0000CEE6 6100 0000                  		bsr.w	SpeedToPos
0000CEEA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CEF0 6B00                       		bmi.s	locret_ADF0
0000CEF2 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CEF8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEFE 4A41                       		tst.w	d1
0000CF00 6A00                       		bpl.s	locret_ADF0
0000CF02 D368 000C                  		add.w	d1,obY(a0)
0000CF06 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CF0C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF12 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF18 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF1C 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF20                            
0000CF20                            locret_ADF0:
0000CF20 4E75                       		rts	
0000CF22                            ; ===========================================================================
0000CF22                            
0000CF22                            Burro_ChkSonic:
0000CF22 343C 0060                  		move.w	#$60,d2
0000CF26 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF2A 6400                       		bcc.s	locret_AE20
0000CF2C 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CF30 9068 000C                  		sub.w	obY(a0),d0
0000CF34 6400                       		bcc.s	locret_AE20
0000CF36 0C40 FF80                  		cmpi.w	#-$80,d0
0000CF3A 6500                       		bcs.s	locret_AE20
0000CF3C 4A78 FE08                  		tst.w	(v_debuguse).w
0000CF40 6600                       		bne.s	locret_AE20
0000CF42 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF46 3141 0010                  		move.w	d1,obVelX(a0)
0000CF4A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF50                            
0000CF50                            locret_AE20:
0000CF50 4E75                       		rts	
0000CF52                            
0000CF52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF52                            
0000CF52                            
0000CF52                            Burro_ChkSonic2:
0000CF52 323C 0080                  		move.w	#$80,d1
0000CF56 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CF5C 3038 D008                  		move.w	(v_player+obX).w,d0
0000CF60 9068 0008                  		sub.w	obX(a0),d0
0000CF64 6400                       		bcc.s	loc_AE40
0000CF66 4440                       		neg.w	d0
0000CF68 4441                       		neg.w	d1
0000CF6A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CF70                            
0000CF70                            loc_AE40:
0000CF70 B042                       		cmp.w	d2,d0
0000CF72 4E75                       		rts	
0000CF74                            ; End of function Burro_ChkSonic2
0000CF74                            ; End of function Burro_ChkSonic2
0000CF74                            		include	"_anim\Burrobot.asm"
0000CF74                            ; ---------------------------------------------------------------------------
0000CF74                            ; Animation script - Burrobot enemy
0000CF74                            ; ---------------------------------------------------------------------------
0000CF74 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CF76 0000                       		dc.w @walk2-Ani_Burro
0000CF78 0000                       		dc.w @digging-Ani_Burro
0000CF7A 0000                       		dc.w @fall-Ani_Burro
0000CF7C 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CF80 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CF84 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CF88 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CF8C 00                         		even
0000CF8C 00                         		even
0000CF8C                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CF8C                            ; --------------------------------------------------------------------------------
0000CF8C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF8C                            ; --------------------------------------------------------------------------------
0000CF8C                            
0000CF8C                            SME_Ag_86:	
0000CF8C 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CF90 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CF94 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CF98 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CF9A 02                         SME_Ag_86_E:	dc.b 2	
0000CF9B EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CFA0 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFA5 02                         SME_Ag_86_19:	dc.b 2	
0000CFA6 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFAB 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CFB0 02                         SME_Ag_86_24:	dc.b 2	
0000CFB1 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CFB6 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CFBB 02                         SME_Ag_86_2F:	dc.b 2	
0000CFBC E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CFC1 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CFC6 02                         SME_Ag_86_3A:	dc.b 2	
0000CFC7 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CFCC 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CFD1 02                         SME_Ag_86_45:	dc.b 2	
0000CFD2 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CFD7 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CFDC 02                         SME_Ag_86_50:	dc.b 2	
0000CFDD EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFE2 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFE8 00                         		even
0000CFE8 00                         		even
0000CFE8                            
0000CFE8                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CFE8                            ; ---------------------------------------------------------------------------
0000CFE8                            ; Object 2F - large grass-covered platforms (MZ)
0000CFE8                            ; ---------------------------------------------------------------------------
0000CFE8                            
0000CFE8                            LargeGrass:
0000CFE8 7000                       		moveq	#0,d0
0000CFEA 1028 0024                  		move.b	obRoutine(a0),d0
0000CFEE 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CFF2 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CFF6                            ; ===========================================================================
0000CFF6 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CFF8 0000                       		dc.w LGrass_Action-LGrass_Index
0000CFFA                            
0000CFFA =0000002A                  lgrass_origX:	equ $2A
0000CFFA =0000002C                  lgrass_origY:	equ $2C
0000CFFA                            
0000CFFA 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CFFC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CFFE 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D000 0140                       		dc.b 1,	$40
0000D002 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D004 0220                       		dc.b 2,	$20
0000D006                            ; ===========================================================================
0000D006                            
0000D006                            LGrass_Main:	; Routine 0
0000D006 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D00A 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D012 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D018 117C 0004 0001             		move.b	#4,obRender(a0)
0000D01E 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000D024 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D02A 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D030 7000                       		moveq	#0,d0
0000D032 1028 0028                  		move.b	obSubtype(a0),d0
0000D036 E448                       		lsr.w	#2,d0
0000D038 0240 001C                  		andi.w	#$1C,d0
0000D03C 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D040 3019                       		move.w	(a1)+,d0
0000D042 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D046 214A 0030                  		move.l	a2,$30(a0)
0000D04A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D04E 1151 0014                  		move.b	(a1),obActWid(a0)
0000D052 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D058 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D05E 08E8 0004 0001             		bset	#4,1(a0)
0000D064                            
0000D064                            LGrass_Action:	; Routine 2
0000D064 6100 0000                  		bsr.w	LGrass_Types
0000D068 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D06C 6700                       		beq.s	LGrass_Solid
0000D06E 7200                       		moveq	#0,d1
0000D070 1228 0014                  		move.b	obActWid(a0),d1
0000D074 0641 000B                  		addi.w	#$B,d1
0000D078 6100 C0E0                  		bsr.w	ExitPlatform
0000D07C 0829 0003 0022             		btst	#3,obStatus(a1)
0000D082 6600 0000                  		bne.w	LGrass_Slope
0000D086 4228 0025                  		clr.b	ob2ndRout(a0)
0000D08A 6000                       		bra.s	LGrass_Display
0000D08C                            ; ===========================================================================
0000D08C                            
0000D08C                            LGrass_Slope:
0000D08C 7200                       		moveq	#0,d1
0000D08E 1228 0014                  		move.b	obActWid(a0),d1
0000D092 0641 000B                  		addi.w	#$B,d1
0000D096 2468 0030                  		movea.l	$30(a0),a2
0000D09A 3428 0008                  		move.w	obX(a0),d2
0000D09E 6100 D016                  		bsr.w	SlopeObject2
0000D0A2 6000                       		bra.s	LGrass_Display
0000D0A4                            ; ===========================================================================
0000D0A4                            
0000D0A4                            LGrass_Solid:
0000D0A4 7200                       		moveq	#0,d1
0000D0A6 1228 0014                  		move.b	obActWid(a0),d1
0000D0AA 0641 000B                  		addi.w	#$B,d1
0000D0AE 343C 0020                  		move.w	#$20,d2
0000D0B2 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D0B8 6600                       		bne.s	loc_AF8E
0000D0BA 343C 0030                  		move.w	#$30,d2
0000D0BE                            
0000D0BE                            loc_AF8E:
0000D0BE 2468 0030                  		movea.l	$30(a0),a2
0000D0C2 6100 0000                  		bsr.w	SolidObject2F
0000D0C6                            
0000D0C6                            LGrass_Display:
0000D0C6 6100 0000                  		bsr.w	DisplaySprite
0000D0CA 6000 0000                  		bra.w	LGrass_ChkDel
0000D0CE                            
0000D0CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D0CE                            
0000D0CE                            
0000D0CE                            LGrass_Types:
0000D0CE 7000                       		moveq	#0,d0
0000D0D0 1028 0028                  		move.b	obSubtype(a0),d0
0000D0D4 0240 0007                  		andi.w	#7,d0
0000D0D8 D040                       		add.w	d0,d0
0000D0DA 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D0DE 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D0E2                            ; End of function LGrass_Types
0000D0E2                            
0000D0E2                            ; ===========================================================================
0000D0E2 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D0E4 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D0E6 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D0E8 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D0EA 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D0EC 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D0EE                            ; ===========================================================================
0000D0EE                            
0000D0EE                            LGrass_Type00:
0000D0EE 4E75                       		rts			; type 00 platform doesn't move
0000D0F0                            ; ===========================================================================
0000D0F0                            
0000D0F0                            LGrass_Type01:
0000D0F0 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D0F4 323C 0020                  		move.w	#$20,d1
0000D0F8 6000                       		bra.s	LGrass_Move
0000D0FA                            ; ===========================================================================
0000D0FA                            
0000D0FA                            LGrass_Type02:
0000D0FA 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D0FE 323C 0030                  		move.w	#$30,d1
0000D102 6000                       		bra.s	LGrass_Move
0000D104                            ; ===========================================================================
0000D104                            
0000D104                            LGrass_Type03:
0000D104 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D108 323C 0040                  		move.w	#$40,d1
0000D10C 6000                       		bra.s	LGrass_Move
0000D10E                            ; ===========================================================================
0000D10E                            
0000D10E                            LGrass_Type04:
0000D10E 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D112 323C 0060                  		move.w	#$60,d1
0000D116                            
0000D116                            LGrass_Move:
0000D116 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D11C 6700                       		beq.s	loc_AFF2
0000D11E 4440                       		neg.w	d0
0000D120 D041                       		add.w	d1,d0
0000D122                            
0000D122                            loc_AFF2:
0000D122 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D126 9240                       		sub.w	d0,d1
0000D128 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D12C 4E75                       		rts	
0000D12E                            ; ===========================================================================
0000D12E                            
0000D12E                            LGrass_Type05:
0000D12E 1028 0034                  		move.b	$34(a0),d0
0000D132 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D136 6600                       		bne.s	loc_B010
0000D138 5500                       		subq.b	#2,d0
0000D13A 6400                       		bcc.s	loc_B01C
0000D13C 7000                       		moveq	#0,d0
0000D13E 6000                       		bra.s	loc_B01C
0000D140                            ; ===========================================================================
0000D140                            
0000D140                            loc_B010:
0000D140 5800                       		addq.b	#4,d0
0000D142 0C00 0040                  		cmpi.b	#$40,d0
0000D146 6500                       		bcs.s	loc_B01C
0000D148 103C 0040                  		move.b	#$40,d0
0000D14C                            
0000D14C                            loc_B01C:
0000D14C 1140 0034                  		move.b	d0,$34(a0)
0000D150 4EB9 0000 3A32             		jsr	(CalcSine).l
0000D156 E848                       		lsr.w	#4,d0
0000D158 3200                       		move.w	d0,d1
0000D15A D068 002C                  		add.w	lgrass_origY(a0),d0
0000D15E 3140 000C                  		move.w	d0,obY(a0)
0000D162 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D168 6600                       		bne.s	loc_B07A
0000D16A 4A28 0035                  		tst.b	$35(a0)
0000D16E 6600                       		bne.s	loc_B07A
0000D170 117C 0001 0035             		move.b	#1,$35(a0)
0000D176 6100 0000                  		bsr.w	FindNextFreeObj
0000D17A 6600                       		bne.s	loc_B07A
0000D17C 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D180 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D186 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D18C 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D190 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D194 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D19A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D1A0 2348 0038                  		move.l	a0,$38(a1)
0000D1A4 2448                       		movea.l	a0,a2
0000D1A6 6100                       		bsr.s	sub_B09C
0000D1A8                            
0000D1A8                            loc_B07A:
0000D1A8 7400                       		moveq	#0,d2
0000D1AA 45E8 0036                  		lea	$36(a0),a2
0000D1AE 141A                       		move.b	(a2)+,d2
0000D1B0 5302                       		subq.b	#1,d2
0000D1B2 6500                       		bcs.s	locret_B09A
0000D1B4                            
0000D1B4                            loc_B086:
0000D1B4 7000                       		moveq	#0,d0
0000D1B6 101A                       		move.b	(a2)+,d0
0000D1B8 ED48                       		lsl.w	#6,d0
0000D1BA 0640 D000                  		addi.w	#$D000,d0
0000D1BE 3240                       		movea.w	d0,a1
0000D1C0 3341 003C                  		move.w	d1,$3C(a1)
0000D1C4 51CA FFEE                  		dbf	d2,loc_B086
0000D1C8                            
0000D1C8                            locret_B09A:
0000D1C8 4E75                       		rts	
0000D1CA                            
0000D1CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D1CA                            
0000D1CA                            
0000D1CA                            sub_B09C:
0000D1CA 45EA 0036                  		lea	$36(a2),a2
0000D1CE 7000                       		moveq	#0,d0
0000D1D0 1012                       		move.b	(a2),d0
0000D1D2 5212                       		addq.b	#1,(a2)
0000D1D4 45F2 0001                  		lea	1(a2,d0.w),a2
0000D1D8 3009                       		move.w	a1,d0
0000D1DA 0440 D000                  		subi.w	#$D000,d0
0000D1DE EC48                       		lsr.w	#6,d0
0000D1E0 0240 007F                  		andi.w	#$7F,d0
0000D1E4 1480                       		move.b	d0,(a2)
0000D1E6 4E75                       		rts	
0000D1E8                            ; End of function sub_B09C
0000D1E8                            
0000D1E8                            ; ===========================================================================
0000D1E8                            
0000D1E8                            LGrass_ChkDel:
0000D1E8 4A28 0035                  		tst.b	$35(a0)
0000D1EC 6700                       		beq.s	loc_B0C6
0000D1EE 4A28 0001                  		tst.b	obRender(a0)
0000D1F2 6A00                       		bpl.s	LGrass_DelFlames
0000D1F4                            
0000D1F4                            loc_B0C6:
0000D212 4E75                       		rts	
0000D214                            ; ===========================================================================
0000D214                            
0000D214                            LGrass_DelFlames:
0000D214 7400                       		moveq	#0,d2
0000D216                            
0000D216                            loc_B0E8:
0000D216 45E8 0036                  		lea	$36(a0),a2
0000D21A 1412                       		move.b	(a2),d2
0000D21C 421A                       		clr.b	(a2)+
0000D21E 5302                       		subq.b	#1,d2
0000D220 6500                       		bcs.s	locret_B116
0000D222                            
0000D222                            loc_B0F4:
0000D222 7000                       		moveq	#0,d0
0000D224 1012                       		move.b	(a2),d0
0000D226 421A                       		clr.b	(a2)+
0000D228 ED48                       		lsl.w	#6,d0
0000D22A 0640 D000                  		addi.w	#$D000,d0
0000D22E 3240                       		movea.w	d0,a1
0000D230 6100 0000                  		bsr.w	DeleteChild
0000D234 51CA FFEC                  		dbf	d2,loc_B0F4
0000D238 117C 0000 0035             		move.b	#0,$35(a0)
0000D23E 117C 0000 0034             		move.b	#0,$34(a0)
0000D244                            
0000D244                            locret_B116:
0000D244 4E75                       		rts	
0000D246                            ; ===========================================================================
0000D246                            ; ---------------------------------------------------------------------------
0000D246                            ; Collision data for large moving platforms (MZ)
0000D246                            ; ---------------------------------------------------------------------------
0000D246                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D292                            		even
0000D292                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D2BE                            		even
0000D2BE                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D30A                            		even
0000D30A                            		even
0000D30A                            		include	"_incObj\35 Burning Grass.asm"
0000D30A                            ; ---------------------------------------------------------------------------
0000D30A                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D30A                            ; (appears when	you walk on sinking platforms)
0000D30A                            ; ---------------------------------------------------------------------------
0000D30A                            
0000D30A                            GrassFire:
0000D30A 7000                       		moveq	#0,d0
0000D30C 1028 0024                  		move.b	obRoutine(a0),d0
0000D310 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D314 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D318                            ; ===========================================================================
0000D318 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D31A 0000                       		dc.w loc_B238-GFire_Index
0000D31C 0000                       		dc.w GFire_Move-GFire_Index
0000D31E                            
0000D31E =0000002A                  gfire_origX:	equ $2A
0000D31E                            ; ===========================================================================
0000D31E                            
0000D31E                            GFire_Main:	; Routine 0
0000D31E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D322 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D32A 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D330 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D336 117C 0004 0001             		move.b	#4,obRender(a0)
0000D33C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D342 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D348 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D358 4A28 0028                  		tst.b	obSubtype(a0)
0000D35C 6700                       		beq.s	loc_B238
0000D35E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D362 6000 0000                  		bra.w	GFire_Move
0000D366                            ; ===========================================================================
0000D366                            
0000D366                            loc_B238:	; Routine 2
0000D366 2268 0030                  		movea.l	$30(a0),a1
0000D36A 3228 0008                  		move.w	obX(a0),d1
0000D36E 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D372 0641 000C                  		addi.w	#$C,d1
0000D376 3001                       		move.w	d1,d0
0000D378 E248                       		lsr.w	#1,d0
0000D37A 1031 0000                  		move.b	(a1,d0.w),d0
0000D37E 4440                       		neg.w	d0
0000D380 D068 002C                  		add.w	$2C(a0),d0
0000D384 3400                       		move.w	d0,d2
0000D386 D068 003C                  		add.w	$3C(a0),d0
0000D38A 3140 000C                  		move.w	d0,obY(a0)
0000D38E 0C41 0084                  		cmpi.w	#$84,d1
0000D392 6400                       		bcc.s	loc_B2B0
0000D394 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D39C 0C41 0080                  		cmpi.w	#$80,d1
0000D3A0 6400                       		bcc.s	loc_B2B0
0000D3A2 2028 0008                  		move.l	obX(a0),d0
0000D3A6 0680 0008 0000             		addi.l	#$80000,d0
0000D3AC 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D3B2 6600                       		bne.s	loc_B2B0
0000D3B4 6100 0000                  		bsr.w	FindNextFreeObj
0000D3B8 6600                       		bne.s	loc_B2B0
0000D3BA 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D3BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D3C4 3342 002C                  		move.w	d2,$2C(a1)
0000D3C8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D3CE 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D3D4 2468 0038                  		movea.l	$38(a0),a2
0000D3D8 6100 FDF0                  		bsr.w	sub_B09C
0000D3DC                            
0000D3DC                            loc_B2B0:
0000D3DC 6000                       		bra.s	GFire_Animate
0000D3DE                            ; ===========================================================================
0000D3DE                            
0000D3DE                            GFire_Move:	; Routine 4
0000D3DE 3028 002C                  		move.w	$2C(a0),d0
0000D3E2 D068 003C                  		add.w	$3C(a0),d0
0000D3E6 3140 000C                  		move.w	d0,obY(a0)
0000D3EA                            
0000D3EA                            GFire_Animate:
0000D3EA 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D3F0 6100 F456                  		bsr.w	AnimateSprite
0000D3F4 6000 0000                  		bra.w	DisplaySprite
0000D3F4 6000 0000                  		bra.w	DisplaySprite
0000D3F8                            		include	"_anim\Burning Grass.asm"
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8                            ; Animation script - burning grass that sits on the floor (MZ)
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D3FA 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D400                            		even
0000D400                            		even
0000D400                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D400                            ; ---------------------------------------------------------------------------
0000D400                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D400                            ; ---------------------------------------------------------------------------
0000D400                            Map_LGrass_internal:
0000D400 0000                       		dc.w @wide-Map_LGrass_internal
0000D402 0000                       		dc.w @sloped-Map_LGrass_internal
0000D404 0000                       		dc.w @narrow-Map_LGrass_internal
0000D406 0D                         @wide:		dc.b $D
0000D407 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D40C F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D411 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D416 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D41B F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D420 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D425 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D42A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D42F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D434 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D439 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D43E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D443 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D448 0A                         @sloped:	dc.b $A
0000D449 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D44E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D453 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D458 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D45D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D462 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D467 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D46C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D471 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D476 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D47B 06                         @narrow:	dc.b 6
0000D47C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D481 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D486 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D48B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D490 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D495 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D49A                            		even
0000D49A                            		even
0000D49A                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D49A                            ; --------------------------------------------------------------------------------
0000D49A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D49A                            ; --------------------------------------------------------------------------------
0000D49A                            
0000D49A                            SME_gyvTV:	
0000D49A 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D49E 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D4A2 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D4A6 01                         SME_gyvTV_C:	dc.b 1	
0000D4A7 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D4AC 01                         SME_gyvTV_12:	dc.b 1	
0000D4AD E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D4B2 01                         SME_gyvTV_18:	dc.b 1	
0000D4B3 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D4B8 01                         SME_gyvTV_1E:	dc.b 1	
0000D4B9 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D4BE 01                         SME_gyvTV_24:	dc.b 1	
0000D4BF F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D4C4 01                         SME_gyvTV_2A:	dc.b 1	
0000D4C5 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D4CA                            		even
0000D4CA                            		even
0000D4CA                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D4CA                            ; ---------------------------------------------------------------------------
0000D4CA                            ; Object 30 - large green glass blocks (MZ)
0000D4CA                            ; ---------------------------------------------------------------------------
0000D4CA                            
0000D4CA                            GlassBlock:
0000D4CA 7000                       		moveq	#0,d0
0000D4CC 1028 0024                  		move.b	obRoutine(a0),d0
0000D4D0 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D4D4 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D4F6 6000 0000                  		bra.w	DisplaySprite
0000D4FA                            ; ===========================================================================
0000D4FA                            
0000D4FA                            Glass_Delete:
0000D4FA 6000 0000                  		bra.w	DeleteObject
0000D4FE                            ; ===========================================================================
0000D4FE 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D500 0000                       		dc.w Glass_Block012-Glass_Index
0000D502 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D504 0000                       		dc.w Glass_Block34-Glass_Index
0000D506 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D508                            
0000D508 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D508 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D508                            
0000D508 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D50B 0400 01                    		dc.b 4,	0, 1
0000D50E 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D511 0800 01                    		dc.b 8,	0, 1
0000D514                            ; ===========================================================================
0000D514                            
0000D514                            Glass_Main:	; Routine 0
0000D514 45F9 0000 D508             		lea	(Glass_Vars1).l,a2
0000D51A 7201                       		moveq	#1,d1
0000D51C 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D522 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D528 6500                       		bcs.s	@IsType012	; if yes, branch
0000D52A                            
0000D52A 45F9 0000 D50E             		lea	(Glass_Vars2).l,a2
0000D530 7201                       		moveq	#1,d1
0000D532 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D538                            
0000D538                            	@IsType012:
0000D538 2248                       		movea.l	a0,a1
0000D53A 6000                       		bra.s	@Load		; load main object
0000D53C                            ; ===========================================================================
0000D53C                            
0000D53C                            	@Repeat:
0000D53C 6100 0000                  		bsr.w	FindNextFreeObj
0000D540 6600                       		bne.s	@Fail
0000D542                            
0000D542                            @Load:
0000D542 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D546 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D54A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D550 101A                       		move.b	(a2)+,d0
0000D552 4880                       		ext.w	d0
0000D554 D068 000C                  		add.w	obY(a0),d0
0000D558 3340 000C                  		move.w	d0,obY(a1)
0000D55C 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D564 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D56A 137C 0004 0001             		move.b	#4,obRender(a1)
0000D570 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D576 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D57C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D582 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D588 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D58C 2348 003C                  		move.l	a0,glass_parent(a1)
0000D590 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D594                            
0000D594 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D59A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D5A0 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D5A4 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D5AA                            
0000D5AA                            	@Fail:
0000D5AA 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D5B0 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5B6                            
0000D5B6                            Glass_Block012:	; Routine 2
0000D5B6 6100 0000                  		bsr.w	Glass_Types
0000D5BA 323C 002B                  		move.w	#$2B,d1
0000D5BE 343C 0048                  		move.w	#$48,d2
0000D5C2 363C 0049                  		move.w	#$49,d3
0000D5C6 3828 0008                  		move.w	obX(a0),d4
0000D5CA 6000 0000                  		bra.w	SolidObject
0000D5CE                            ; ===========================================================================
0000D5CE                            
0000D5CE                            Glass_Reflect012:
0000D5CE                            		; Routine 4
0000D5CE 2268 003C                  		movea.l	$3C(a0),a1
0000D5D2 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D5D8 6000 0000                  		bra.w	Glass_Types
0000D5DC                            ; ===========================================================================
0000D5DC                            
0000D5DC                            Glass_Block34:	; Routine 6
0000D5DC 6100 0000                  		bsr.w	Glass_Types
0000D5E0 323C 002B                  		move.w	#$2B,d1
0000D5E4 343C 0038                  		move.w	#$38,d2
0000D5E8 363C 0039                  		move.w	#$39,d3
0000D5EC 3828 0008                  		move.w	obX(a0),d4
0000D5F0 6000 0000                  		bra.w	SolidObject
0000D5F4                            ; ===========================================================================
0000D5F4                            
0000D5F4                            Glass_Reflect34:
0000D5F4                            		; Routine 8
0000D5F4 2268 003C                  		movea.l	$3C(a0),a1
0000D5F8 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D5FE 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D604 6000 0000                  		bra.w	Glass_Types
0000D608                            
0000D608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D608                            
0000D608                            
0000D608                            Glass_Types:
0000D608 7000                       		moveq	#0,d0
0000D60A 1028 0028                  		move.b	obSubtype(a0),d0
0000D60E 0240 0007                  		andi.w	#7,d0
0000D612 D040                       		add.w	d0,d0
0000D614 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D618 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D61C                            ; End of function Glass_Types
0000D61C                            
0000D61C                            ; ===========================================================================
0000D61C 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D61E 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D620 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D622 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D624 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D626                            ; ===========================================================================
0000D626                            
0000D626                            Glass_Type00:
0000D626 4E75                       		rts	
0000D628                            ; ===========================================================================
0000D628                            
0000D628                            Glass_Type01:
0000D628 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D62C 323C 0040                  		move.w	#$40,d1
0000D630 6000                       		bra.s	loc_B514
0000D632                            ; ===========================================================================
0000D632                            
0000D632                            Glass_Type02:
0000D632 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D636 323C 0040                  		move.w	#$40,d1
0000D63A 4440                       		neg.w	d0
0000D63C D041                       		add.w	d1,d0
0000D63E                            
0000D63E                            loc_B514:
0000D63E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D644 6700                       		beq.s	loc_B526
0000D646 4440                       		neg.w	d0
0000D648 D041                       		add.w	d1,d0
0000D64A E208                       		lsr.b	#1,d0
0000D64C 0640 0020                  		addi.w	#$20,d0
0000D650                            
0000D650                            loc_B526:
0000D650 6000 0000                  		bra.w	loc_B5EE
0000D654                            ; ===========================================================================
0000D654                            
0000D654                            Glass_Type03:
0000D654 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D65A 6700                       		beq.s	loc_B53E
0000D65C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D660 0440 0010                  		subi.w	#$10,d0
0000D664 6000 0000                  		bra.w	loc_B5EE
0000D668                            ; ===========================================================================
0000D668                            
0000D668                            loc_B53E:
0000D668 0828 0003 0022             		btst	#3,obStatus(a0)
0000D66E 6600                       		bne.s	loc_B54E
0000D670 08A8 0000 0034             		bclr	#0,$34(a0)
0000D676 6000                       		bra.s	loc_B582
0000D678                            ; ===========================================================================
0000D678                            
0000D678                            loc_B54E:
0000D678 4A28 0034                  		tst.b	$34(a0)
0000D67C 6600                       		bne.s	loc_B582
0000D67E 117C 0001 0034             		move.b	#1,$34(a0)
0000D684 08E8 0000 0035             		bset	#0,$35(a0)
0000D68A 6700                       		beq.s	loc_B582
0000D68C 08E8 0007 0034             		bset	#7,$34(a0)
0000D692 317C 0010 0036             		move.w	#$10,$36(a0)
0000D698 117C 000A 0038             		move.b	#$A,$38(a0)
0000D69E 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D6A4 6600                       		bne.s	loc_B582
0000D6A6 317C 0040 0036             		move.w	#$40,$36(a0)
0000D6AC                            
0000D6AC                            loc_B582:
0000D6AC 4A28 0034                  		tst.b	$34(a0)
0000D6B0 6A00                       		bpl.s	loc_B5AA
0000D6B2 4A28 0038                  		tst.b	$38(a0)
0000D6B6 6700                       		beq.s	loc_B594
0000D6B8 5328 0038                  		subq.b	#1,$38(a0)
0000D6BC 6600                       		bne.s	loc_B5AA
0000D6BE                            
0000D6BE                            loc_B594:
0000D6BE 4A68 0032                  		tst.w	glass_dist(a0)
0000D6C2 6700                       		beq.s	loc_B5A4
0000D6C4 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D6C8 5368 0036                  		subq.w	#1,$36(a0)
0000D6CC 6600                       		bne.s	loc_B5AA
0000D6CE                            
0000D6CE                            loc_B5A4:
0000D6CE 08A8 0007 0034             		bclr	#7,$34(a0)
0000D6D4                            
0000D6D4                            loc_B5AA:
0000D6D4 3028 0032                  		move.w	glass_dist(a0),d0
0000D6D8 6000                       		bra.s	loc_B5EE
0000D6DA                            ; ===========================================================================
0000D6DA                            
0000D6DA                            Glass_Type04:
0000D6DA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D6E0 6700                       		beq.s	Glass_ChkSwitch
0000D6E2 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6E6 0440 0010                  		subi.w	#$10,d0
0000D6EA 6000                       		bra.s	loc_B5EE
0000D6EC                            ; ===========================================================================
0000D6EC                            
0000D6EC                            Glass_ChkSwitch:
0000D6EC 4A28 0034                  		tst.b	$34(a0)
0000D6F0 6600                       		bne.s	loc_B5E0
0000D6F2 45F8 F7E0                  		lea	(f_switch).w,a2
0000D6F6 7000                       		moveq	#0,d0
0000D6F8 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D6FC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D6FE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D702 6700                       		beq.s	loc_B5EA	; if not, branch
0000D704 117C 0001 0034             		move.b	#1,$34(a0)
0000D70A                            
0000D70A                            loc_B5E0:
0000D70A 4A68 0032                  		tst.w	glass_dist(a0)
0000D70E 6700                       		beq.s	loc_B5EA
0000D710 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D714                            
0000D714                            loc_B5EA:
0000D714 3028 0032                  		move.w	glass_dist(a0),d0
0000D718                            
0000D718                            loc_B5EE:
0000D718 3228 0030                  		move.w	$30(a0),d1
0000D71C 9240                       		sub.w	d0,d1
0000D71E 3141 000C                  		move.w	d1,obY(a0)
0000D722 4E75                       		rts	
0000D722 4E75                       		rts	
0000D724                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D724                            ; --------------------------------------------------------------------------------
0000D724                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D724                            ; --------------------------------------------------------------------------------
0000D724                            
0000D724                            SME_NEyTf:	
0000D724 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D728 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D72A 0C                         SME_NEyTf_6:	dc.b $C	
0000D72B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D730 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D735 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D73A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D73F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D744 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D749 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D74E 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D753 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D758 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D75D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D762 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D767 02                         SME_NEyTf_43:	dc.b 2	
0000D768 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D76D 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D772 0A                         SME_NEyTf_4E:	dc.b $A	
0000D773 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D778 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D77D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D782 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D787 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D78C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D791 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D796 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D79B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D7A0 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D7A6 00                         		even
0000D7A6 00                         		even
0000D7A6                            		include	"_incObj\31 Chained Stompers.asm"
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            
0000D7A6                            ChainStomp:
0000D7A6 7000                       		moveq	#0,d0
0000D7A8 1028 0024                  		move.b	obRoutine(a0),d0
0000D7AC 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D7B0 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D7B4                            ; ===========================================================================
0000D7B4 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D7B6 0000                       		dc.w loc_B798-CStom_Index
0000D7B8 0000                       		dc.w loc_B7FE-CStom_Index
0000D7BA 0000                       		dc.w CStom_Display2-CStom_Index
0000D7BC 0000                       		dc.w loc_B7E2-CStom_Index
0000D7BE                            
0000D7BE =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D7BE                            
0000D7BE 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D7C0 0100                       		dc.b 1,	0
0000D7C2                            
0000D7C2 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D7C5 041C 01                    		dc.b 4,	$1C, 1
0000D7C8 08CC 03                    		dc.b 8,	$CC, 3
0000D7CB 06F0 02                    		dc.b 6,	$F0, 2
0000D7CE                            
0000D7CE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D7D2 5000 7800                  		dc.w $5000, $7800
0000D7D6 3800 5800                  		dc.w $3800, $5800
0000D7DA B800                       		dc.w $B800
0000D7DC                            ; ===========================================================================
0000D7DC                            
0000D7DC                            CStom_Main:	; Routine 0
0000D7DC 7000                       		moveq	#0,d0
0000D7DE 1028 0028                  		move.b	obSubtype(a0),d0
0000D7E2 6A00                       		bpl.s	loc_B6CE
0000D7E4 0240 007F                  		andi.w	#$7F,d0
0000D7E8 D040                       		add.w	d0,d0
0000D7EA 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D7EE 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D7F2 101A                       		move.b	(a2)+,d0
0000D7F4 1140 0028                  		move.b	d0,obSubtype(a0)
0000D7F8                            
0000D7F8                            loc_B6CE:
0000D7F8 0200 000F                  		andi.b	#$F,d0
0000D7FC D040                       		add.w	d0,d0
0000D7FE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D802 4A40                       		tst.w	d0
0000D804 6600                       		bne.s	loc_B6E0
0000D806 3142 0032                  		move.w	d2,$32(a0)
0000D80A                            
0000D80A                            loc_B6E0:
0000D80A 45F9 0000 D7C2             		lea	(CStom_Var).l,a2
0000D810 2248                       		movea.l	a0,a1
0000D812 7203                       		moveq	#3,d1
0000D814 6000                       		bra.s	CStom_MakeStomper
0000D816                            ; ===========================================================================
0000D816                            
0000D816                            CStom_Loop:
0000D816 6100 0000                  		bsr.w	FindNextFreeObj
0000D81A 6600 0000                  		bne.w	CStom_SetSize
0000D81E                            
0000D81E                            CStom_MakeStomper:
0000D81E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D822 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D826 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D82C 101A                       		move.b	(a2)+,d0
0000D82E 4880                       		ext.w	d0
0000D830 D068 000C                  		add.w	obY(a0),d0
0000D834 3340 000C                  		move.w	d0,obY(a1)
0000D838 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D840 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D846 137C 0004 0001             		move.b	#4,obRender(a1)
0000D84C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D852 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D858 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D85E 3342 0034                  		move.w	d2,$34(a1)
0000D862 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D868 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D86C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D872 6600                       		bne.s	loc_B76A
0000D874 5341                       		subq.w	#1,d1
0000D876 1028 0028                  		move.b	obSubtype(a0),d0
0000D87A 0240 00F0                  		andi.w	#$F0,d0
0000D87E 0C40 0020                  		cmpi.w	#$20,d0
0000D882 679A                       		beq.s	CStom_MakeStomper
0000D884 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D88A 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D890 5241                       		addq.w	#1,d1
0000D892                            
0000D892                            loc_B76A:
0000D892 2348 003C                  		move.l	a0,$3C(a1)
0000D896 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D89A                            
0000D89A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D8A0                            
0000D8A0                            CStom_SetSize:
0000D8A0 7000                       		moveq	#0,d0
0000D8A2 1028 0028                  		move.b	obSubtype(a0),d0
0000D8A6 E648                       		lsr.w	#3,d0
0000D8A8 0200 000E                  		andi.b	#$E,d0
0000D8AC 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D8B0 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D8B4 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D8B8 6000                       		bra.s	loc_B798
0000D8BA                            ; ===========================================================================
0000D8BA 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D8BC 3009                       		dc.b $30, 9
0000D8BE 100A                       		dc.b $10, $A
0000D8C0                            ; ===========================================================================
0000D8C0                            
0000D8C0                            loc_B798:	; Routine 2
0000D8C0 6100 0000                  		bsr.w	CStom_Types
0000D8C4 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D8CA 7200                       		moveq	#0,d1
0000D8CC 1228 0014                  		move.b	obActWid(a0),d1
0000D8D0 0641 000B                  		addi.w	#$B,d1
0000D8D4 343C 000C                  		move.w	#$C,d2
0000D8D8 363C 000D                  		move.w	#$D,d3
0000D8DC 3828 0008                  		move.w	obX(a0),d4
0000D8E0 6100 0000                  		bsr.w	SolidObject
0000D8E4 0828 0003 0022             		btst	#3,obStatus(a0)
0000D8EA 6700                       		beq.s	CStom_Display
0000D8EC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D8F2 6400                       		bcc.s	CStom_Display
0000D8F4 2448                       		movea.l	a0,a2
0000D8F6 41F8 D000                  		lea	(v_player).w,a0
0000D8FA 4EB9 0000 0000             		jsr	(KillSonic).l
0000D900 204A                       		movea.l	a2,a0
0000D902                            
0000D902                            CStom_Display:
0000D902 6100 0000                  		bsr.w	DisplaySprite
0000D906 6000 0000                  		bra.w	CStom_ChkDel
0000D90A                            ; ===========================================================================
0000D90A                            
0000D90A                            loc_B7E2:	; Routine 8
0000D90A 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D910 08E8 0004 0001             		bset	#4,obRender(a0)
0000D916 2268 003C                  		movea.l	$3C(a0),a1
0000D91A 1029 0032                  		move.b	$32(a1),d0
0000D91E EA08                       		lsr.b	#5,d0
0000D920 5600                       		addq.b	#3,d0
0000D922 1140 001A                  		move.b	d0,obFrame(a0)
0000D926                            
0000D926                            loc_B7FE:	; Routine 4
0000D926 2268 003C                  		movea.l	$3C(a0),a1
0000D92A 7000                       		moveq	#0,d0
0000D92C 1029 0032                  		move.b	$32(a1),d0
0000D930 D068 0030                  		add.w	$30(a0),d0
0000D934 3140 000C                  		move.w	d0,obY(a0)
0000D938                            
0000D938                            CStom_Display2:	; Routine 6
0000D938 6100 0000                  		bsr.w	DisplaySprite
0000D93C                            
0000D93C                            CStom_ChkDel:
0000D95A 4E75                       		rts	
0000D95C                            ; ===========================================================================
0000D95C                            
0000D95C                            CStom_Types:
0000D95C 1028 0028                  		move.b	obSubtype(a0),d0
0000D960 0240 000F                  		andi.w	#$F,d0
0000D964 D040                       		add.w	d0,d0
0000D966 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D96A 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D96E                            ; ===========================================================================
0000D96E 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D970 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D972 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D974 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D976 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D978 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D97A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D97C                            ; ===========================================================================
0000D97C                            
0000D97C                            CStom_Type00:
0000D97C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D980 7000                       		moveq	#0,d0
0000D982 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D986 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D98A 6700                       		beq.s	loc_B8A8	; if not, branch
0000D98C 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D990 6A00                       		bpl.s	loc_B872
0000D992 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D998 6700                       		beq.s	loc_B8A0
0000D99A                            
0000D99A                            loc_B872:
0000D99A 4A68 0032                  		tst.w	$32(a0)
0000D99E 6700                       		beq.s	loc_B8A0
0000D9A0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D9A4 0200 000F                  		andi.b	#$F,d0
0000D9A8 6600                       		bne.s	loc_B892
0000D9AA 4A28 0001                  		tst.b	1(a0)
0000D9AE 6A00                       		bpl.s	loc_B892
0000D9BA                            
0000D9BA                            loc_B892:
0000D9BA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9C0 6400                       		bcc.s	CStom_Restart
0000D9C2 317C 0000 0032             		move.w	#0,$32(a0)
0000D9C8                            
0000D9C8                            loc_B8A0:
0000D9C8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D9CE 6000                       		bra.s	CStom_Restart
0000D9D0                            ; ===========================================================================
0000D9D0                            
0000D9D0                            loc_B8A8:
0000D9D0 3228 0034                  		move.w	$34(a0),d1
0000D9D4 B268 0032                  		cmp.w	$32(a0),d1
0000D9D8 6700                       		beq.s	CStom_Restart
0000D9DA 3028 0012                  		move.w	obVelY(a0),d0
0000D9DE 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D9E4 D168 0032                  		add.w	d0,$32(a0)
0000D9E8 B268 0032                  		cmp.w	$32(a0),d1
0000D9EC 6200                       		bhi.s	CStom_Restart
0000D9EE 3141 0032                  		move.w	d1,$32(a0)
0000D9F2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D9F8 4A28 0001                  		tst.b	obRender(a0)
0000D9FC 6A00                       		bpl.s	CStom_Restart
0000DA08                            
0000DA08                            CStom_Restart:
0000DA08 7000                       		moveq	#0,d0
0000DA0A 1028 0032                  		move.b	$32(a0),d0
0000DA0E D068 0030                  		add.w	$30(a0),d0
0000DA12 3140 000C                  		move.w	d0,obY(a0)
0000DA16 4E75                       		rts	
0000DA18                            ; ===========================================================================
0000DA18                            
0000DA18                            CStom_Type01:
0000DA18 4A68 0036                  		tst.w	$36(a0)
0000DA1C 6700                       		beq.s	loc_B938
0000DA1E 4A68 0038                  		tst.w	$38(a0)
0000DA22 6700                       		beq.s	loc_B902
0000DA24 5368 0038                  		subq.w	#1,$38(a0)
0000DA28 6000                       		bra.s	loc_B97C
0000DA2A                            ; ===========================================================================
0000DA2A                            
0000DA2A                            loc_B902:
0000DA2A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA2E 0200 000F                  		andi.b	#$F,d0
0000DA32 6600                       		bne.s	loc_B91C
0000DA34 4A28 0001                  		tst.b	obRender(a0)
0000DA38 6A00                       		bpl.s	loc_B91C
0000DA44                            
0000DA44                            loc_B91C:
0000DA44 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA4A 6400                       		bcc.s	loc_B97C
0000DA4C 317C 0000 0032             		move.w	#0,$32(a0)
0000DA52 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA58 317C 0000 0036             		move.w	#0,$36(a0)
0000DA5E 6000                       		bra.s	loc_B97C
0000DA60                            ; ===========================================================================
0000DA60                            
0000DA60                            loc_B938:
0000DA60 3228 0034                  		move.w	$34(a0),d1
0000DA64 B268 0032                  		cmp.w	$32(a0),d1
0000DA68 6700                       		beq.s	loc_B97C
0000DA6A 3028 0012                  		move.w	obVelY(a0),d0
0000DA6E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA74 D168 0032                  		add.w	d0,$32(a0)
0000DA78 B268 0032                  		cmp.w	$32(a0),d1
0000DA7C 6200                       		bhi.s	loc_B97C
0000DA7E 3141 0032                  		move.w	d1,$32(a0)
0000DA82 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA88 317C 0001 0036             		move.w	#1,$36(a0)
0000DA8E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DA94 4A28 0001                  		tst.b	obRender(a0)
0000DA98 6A00                       		bpl.s	loc_B97C
0000DAA4                            
0000DAA4                            loc_B97C:
0000DAA4 6000 FF62                  		bra.w	CStom_Restart
0000DAA8                            ; ===========================================================================
0000DAA8                            
0000DAA8                            CStom_Type03:
0000DAA8 3038 D008                  		move.w	(v_player+obX).w,d0
0000DAAC 9068 0008                  		sub.w	obX(a0),d0
0000DAB0 6400                       		bcc.s	loc_B98C
0000DAB2 4440                       		neg.w	d0
0000DAB4                            
0000DAB4                            loc_B98C:
0000DAB4 0C40 0090                  		cmpi.w	#$90,d0
0000DAB8 6400                       		bcc.s	loc_B996
0000DABA 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DABE                            
0000DABE                            loc_B996:
0000DABE 6000 FF48                  		bra.w	CStom_Restart
0000DABE 6000 FF48                  		bra.w	CStom_Restart
0000DAC2                            		include	"_incObj\45 Sideways Stomper.asm"
0000DAC2                            ; ---------------------------------------------------------------------------
0000DAC2                            ; Object 45 - spiked metal block from beta version (MZ)
0000DAC2                            ; ---------------------------------------------------------------------------
0000DAC2                            
0000DAC2                            SideStomp:
0000DAC2 7000                       		moveq	#0,d0
0000DAC4 1028 0024                  		move.b	obRoutine(a0),d0
0000DAC8 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DACC 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DAD0                            ; ===========================================================================
0000DAD0 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DAD2 0000                       		dc.w SStom_Solid-SStom_Index
0000DAD4 0000                       		dc.w loc_BA8E-SStom_Index
0000DAD6 0000                       		dc.w SStom_Display-SStom_Index
0000DAD8 0000                       		dc.w SStom_Pole-SStom_Index
0000DADA                            
0000DADA                            		;	routine		frame
0000DADA                            		;		 xpos
0000DADA 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DADD 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DAE0 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DAE3 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DAE6                            
0000DAE6                            ;word_B9BE:	; Note that this indicates three subtypes
0000DAE6 3800                       SStom_Len:	dc.w $3800	; short
0000DAE8 A000                       		dc.w $A000	; long
0000DAEA 5000                       		dc.w $5000	; medium
0000DAEC                            ; ===========================================================================
0000DAEC                            
0000DAEC                            SStom_Main:	; Routine 0
0000DAEC 7000                       		moveq	#0,d0
0000DAEE 1028 0028                  		move.b	obSubtype(a0),d0
0000DAF2 D040                       		add.w	d0,d0
0000DAF4 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DAF8 45F9 0000 DADA             		lea	(SStom_Var).l,a2
0000DAFE 2248                       		movea.l	a0,a1
0000DB00 7203                       		moveq	#3,d1
0000DB02 6000                       		bra.s	@load
0000DB04                            
0000DB04                            	@loop:
0000DB04 6100 0000                  		bsr.w	FindNextFreeObj
0000DB08 6600                       		bne.s	@fail
0000DB0A                            
0000DB0A                            	@load:
0000DB0A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DB0E 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DB12 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DB18 101A                       		move.b	(a2)+,d0
0000DB1A 4880                       		ext.w	d0
0000DB1C D068 0008                  		add.w	obX(a0),d0
0000DB20 3340 0008                  		move.w	d0,obX(a1)
0000DB24 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DB2C 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DB32 137C 0004 0001             		move.b	#4,obRender(a1)
0000DB38 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DB3E 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DB44 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DB4A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DB50 3342 0034                  		move.w	d2,$34(a1)
0000DB54 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB5A 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DB5E 6600                       		bne.s	@notspikes	; if not, branch
0000DB60 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DB66                            
0000DB66                            	@notspikes:
0000DB66 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB6A 2348 003C                  		move.l	a0,$3C(a1)
0000DB6E 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DB72                            
0000DB72 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DB78                            
0000DB78                            	@fail:
0000DB78 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB7E                            
0000DB7E                            SStom_Solid:	; Routine 2
0000DB7E 3F28 0008                  		move.w	obX(a0),-(sp)
0000DB82 6100 0000                  		bsr.w	SStom_Move
0000DB86 323C 0017                  		move.w	#$17,d1
0000DB8A 343C 0020                  		move.w	#$20,d2
0000DB8E 363C 0020                  		move.w	#$20,d3
0000DB92 381F                       		move.w	(sp)+,d4
0000DB94 6100 0000                  		bsr.w	SolidObject
0000DB98 6100 0000                  		bsr.w	DisplaySprite
0000DB9C 6000 0000                  		bra.w	SStom_ChkDel
0000DBA0                            ; ===========================================================================
0000DBA0                            
0000DBA0                            SStom_Pole:	; Routine 8
0000DBA0 2268 003C                  		movea.l	$3C(a0),a1
0000DBA4 1029 0032                  		move.b	$32(a1),d0
0000DBA8 0600 0010                  		addi.b	#$10,d0
0000DBAC EA08                       		lsr.b	#5,d0
0000DBAE 5600                       		addq.b	#3,d0
0000DBB0 1140 001A                  		move.b	d0,obFrame(a0)
0000DBB4                            
0000DBB4                            loc_BA8E:	; Routine 4
0000DBB4 2268 003C                  		movea.l	$3C(a0),a1
0000DBB8 7000                       		moveq	#0,d0
0000DBBA 1029 0032                  		move.b	$32(a1),d0
0000DBBE 4440                       		neg.w	d0
0000DBC0 D068 0030                  		add.w	$30(a0),d0
0000DBC4 3140 0008                  		move.w	d0,obX(a0)
0000DBC8                            
0000DBC8                            SStom_Display:	; Routine 6
0000DBC8 6100 0000                  		bsr.w	DisplaySprite
0000DBCC                            
0000DBCC                            SStom_ChkDel:
0000DBEA 4E75                       		rts	
0000DBEC                            
0000DBEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBEC                            
0000DBEC                            
0000DBEC                            SStom_Move:
0000DBEC 7000                       		moveq	#0,d0
0000DBEE 1028 0028                  		move.b	obSubtype(a0),d0
0000DBF2 D040                       		add.w	d0,d0
0000DBF4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DBF8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DBFC                            ; End of function SStom_Move
0000DBFC                            
0000DBFC                            ; ===========================================================================
0000DBFC                            		; This indicates only two subtypes... that do the same thing
0000DBFC                            		; Compare to SStom_Len. This breaks subtype 02
0000DBFC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DBFE 0000                       		dc.w loc_BADA-off_BAD6
0000DC00                            ; ===========================================================================
0000DC00                            
0000DC00                            loc_BADA:
0000DC00 4A68 0036                  		tst.w	$36(a0)
0000DC04 6700                       		beq.s	loc_BB08
0000DC06 4A68 0038                  		tst.w	$38(a0)
0000DC0A 6700                       		beq.s	loc_BAEC
0000DC0C 5368 0038                  		subq.w	#1,$38(a0)
0000DC10 6000                       		bra.s	loc_BB3C
0000DC12                            ; ===========================================================================
0000DC12                            
0000DC12                            loc_BAEC:
0000DC12 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC18 6400                       		bcc.s	loc_BB3C
0000DC1A 317C 0000 0032             		move.w	#0,$32(a0)
0000DC20 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC26 317C 0000 0036             		move.w	#0,$36(a0)
0000DC2C 6000                       		bra.s	loc_BB3C
0000DC2E                            ; ===========================================================================
0000DC2E                            
0000DC2E                            loc_BB08:
0000DC2E 3228 0034                  		move.w	$34(a0),d1
0000DC32 B268 0032                  		cmp.w	$32(a0),d1
0000DC36 6700                       		beq.s	loc_BB3C
0000DC38 3028 0010                  		move.w	obVelX(a0),d0
0000DC3C 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DC42 D168 0032                  		add.w	d0,$32(a0)
0000DC46 B268 0032                  		cmp.w	$32(a0),d1
0000DC4A 6200                       		bhi.s	loc_BB3C
0000DC4C 3141 0032                  		move.w	d1,$32(a0)
0000DC50 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC56 317C 0001 0036             		move.w	#1,$36(a0)
0000DC5C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC62                            
0000DC62                            loc_BB3C:
0000DC62 7000                       		moveq	#0,d0
0000DC64 1028 0032                  		move.b	$32(a0),d0
0000DC68 4440                       		neg.w	d0
0000DC6A D068 0030                  		add.w	$30(a0),d0
0000DC6E 3140 0008                  		move.w	d0,obX(a0)
0000DC72 4E75                       		rts	
0000DC72 4E75                       		rts	
0000DC74                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DC74                            ; ---------------------------------------------------------------------------
0000DC74                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DC74                            ; ---------------------------------------------------------------------------
0000DC74                            Map_CStom_internal:
0000DC74 0000                       		dc.w @wideblock-Map_CStom_internal
0000DC76 0000                       		dc.w @spikes-Map_CStom_internal
0000DC78 0000                       		dc.w @ceiling-Map_CStom_internal
0000DC7A 0000                       		dc.w @chain1-Map_CStom_internal
0000DC7C 0000                       		dc.w @chain2-Map_CStom_internal
0000DC7E 0000                       		dc.w @chain3-Map_CStom_internal
0000DC80 0000                       		dc.w @chain4-Map_CStom_internal
0000DC82 0000                       		dc.w @chain5-Map_CStom_internal
0000DC84 0000                       		dc.w @chain5-Map_CStom_internal
0000DC86 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DC88 0000                       		dc.w @smallblock-Map_CStom_internal
0000DC8A 05                         @wideblock:	dc.b 5
0000DC8B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DC90 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DC95 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DC9A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DC9F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DCA4 05                         @spikes:	dc.b 5
0000DCA5 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DCAA F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DCAF F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DCB4 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DCB9 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DCBE 01                         @ceiling:	dc.b 1
0000DCBF DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DCC4 02                         @chain1:	dc.b 2
0000DCC5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCCA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCCF 04                         @chain2:	dc.b 4
0000DCD0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCD5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCDA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCDF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCE4 06                         @chain3:	dc.b 6
0000DCE5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCEA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCEF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCF4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCF9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCFE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD03 08                         @chain4:	dc.b 8
0000DD04 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD09 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD0E C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD13 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD18 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD1D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD22 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD27 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD2C 0A                         @chain5:	dc.b $A
0000DD2D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DD32 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DD37 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD3C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD41 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD46 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD4B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD50 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD55 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD5A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD5F 05                         @mediumblock:	dc.b 5
0000DD60 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DD65 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DD6A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DD6F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DD74 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD79 01                         @smallblock:	dc.b 1
0000DD7A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DD80 00                         		even
0000DD80 00                         		even
0000DD80                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            Map_SStom_internal:
0000DD80 0000                       		dc.w @block-Map_SStom_internal
0000DD82 0000                       		dc.w @spikes-Map_SStom_internal
0000DD84 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DD86 0000                       		dc.w @pole1-Map_SStom_internal
0000DD88 0000                       		dc.w @pole2-Map_SStom_internal
0000DD8A 0000                       		dc.w @pole3-Map_SStom_internal
0000DD8C 0000                       		dc.w @pole4-Map_SStom_internal
0000DD8E 0000                       		dc.w @pole5-Map_SStom_internal
0000DD90 0000                       		dc.w @pole5-Map_SStom_internal
0000DD92 03                         @block:		dc.b 3
0000DD93 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DD98 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DD9D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DDA2 03                         @spikes:	dc.b 3
0000DDA3 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DDA8 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DDAD 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DDB2 01                         @wallbracket:	dc.b 1
0000DDB3 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DDB8 02                         @pole1:		dc.b 2
0000DDB9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DDBE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDC3 04                         @pole2:		dc.b 4
0000DDC4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDC9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDCE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDD3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDD8 06                         @pole3:		dc.b 6
0000DDD9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDDE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDE3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDE8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDED F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DDF2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDF7 08                         @pole4:		dc.b 8
0000DDF8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDFD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE02 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE07 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE0C F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE11 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE16 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE1B F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE20 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DE21 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE26 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE2B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE30 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE35 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE3A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE3F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE44 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE49 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DE4E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DE53                            		; @pole6 should be here, but it isn't...
0000DE54 00                         		even
0000DE54 00                         		even
0000DE54                            
0000DE54                            		include	"_incObj\32 Button.asm"
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            
0000DE54                            Button:
0000DE54 7000                       		moveq	#0,d0
0000DE56 1028 0024                  		move.b	obRoutine(a0),d0
0000DE5A 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DE5E 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DE62                            ; ===========================================================================
0000DE62 0000                       But_Index:	dc.w But_Main-But_Index
0000DE64 0000                       		dc.w But_Pressed-But_Index
0000DE66                            ; ===========================================================================
0000DE66                            
0000DE66                            But_Main:	; Routine 0
0000DE66 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DE6A 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DE72 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DE78 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DE7E 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DE80                            
0000DE80 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DE86                            
0000DE86                            	But_IsMZ:
0000DE86 117C 0004 0001             		move.b	#4,obRender(a0)
0000DE8C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DE92 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DE98 5668 000C                  		addq.w	#3,obY(a0)
0000DE9C                            
0000DE9C                            But_Pressed:	; Routine 2
0000DE9C 4A28 0001                  		tst.b	obRender(a0)
0000DEA0 6A00                       		bpl.s	But_Display
0000DEA2 323C 001B                  		move.w	#$1B,d1
0000DEA6 343C 0005                  		move.w	#5,d2
0000DEAA 363C 0005                  		move.w	#5,d3
0000DEAE 3828 0008                  		move.w	obX(a0),d4
0000DEB2 6100 0000                  		bsr.w	SolidObject
0000DEB6 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DEBC 1028 0028                  		move.b	obSubtype(a0),d0
0000DEC0 0240 000F                  		andi.w	#$F,d0
0000DEC4 47F8 F7E0                  		lea	(f_switch).w,a3
0000DEC8 47F3 0000                  		lea	(a3,d0.w),a3
0000DECC 7600                       		moveq	#0,d3
0000DECE 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DED4 6700                       		beq.s	loc_BDB2
0000DED6 7607                       		moveq	#7,d3
0000DED8                            
0000DED8                            loc_BDB2:
0000DED8 4A28 0028                  		tst.b	obSubtype(a0)
0000DEDC 6A00                       		bpl.s	loc_BDBE
0000DEDE 6100 0000                  		bsr.w	But_MZBlock
0000DEE2 6600                       		bne.s	loc_BDC8
0000DEE4                            
0000DEE4                            loc_BDBE:
0000DEE4 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DEE8 6600                       		bne.s	loc_BDC8
0000DEEA 0793                       		bclr	d3,(a3)
0000DEEC 6000                       		bra.s	loc_BDDE
0000DEEE                            ; ===========================================================================
0000DEEE                            
0000DEEE                            loc_BDC8:
0000DEEE 4A13                       		tst.b	(a3)
0000DEF0 6600                       		bne.s	loc_BDD6
0000DEFC                            
0000DEFC                            loc_BDD6:
0000DEFC 07D3                       		bset	d3,(a3)
0000DEFE 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DF04                            
0000DF04                            loc_BDDE:
0000DF04 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DF0A 6700                       		beq.s	But_Display
0000DF0C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DF10 6A00                       		bpl.s	But_Display
0000DF12 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DF18 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DF1E                            
0000DF1E                            But_Display:
0000DF1E 6100 0000                  		bsr.w	DisplaySprite
0000DF40 4E75                       		rts	
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            But_Delete:
0000DF42 6100 0000                  		bsr.w	DeleteObject
0000DF46 4E75                       		rts	
0000DF48                            
0000DF48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF48                            
0000DF48                            
0000DF48                            But_MZBlock:
0000DF48 3F03                       		move.w	d3,-(sp)
0000DF4A 3428 0008                  		move.w	obX(a0),d2
0000DF4E 3628 000C                  		move.w	obY(a0),d3
0000DF52 0442 0010                  		subi.w	#$10,d2
0000DF56 5143                       		subq.w	#8,d3
0000DF58 383C 0020                  		move.w	#$20,d4
0000DF5C 3A3C 0010                  		move.w	#$10,d5
0000DF60 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DF64 3C3C 005F                  		move.w	#$5F,d6
0000DF68                            
0000DF68                            But_MZLoop:
0000DF68 4A29 0001                  		tst.b	obRender(a1)
0000DF6C 6A00                       		bpl.s	loc_BE4E
0000DF6E 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DF72 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DF74                            
0000DF74                            loc_BE4E:
0000DF74 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DF78 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DF7C                            
0000DF7C 361F                       		move.w	(sp)+,d3
0000DF7E 7000                       		moveq	#0,d0
0000DF80                            
0000DF80                            locret_BE5A:
0000DF80 4E75                       		rts	
0000DF82                            ; ===========================================================================
0000DF82 1010                       But_MZData:	dc.b $10, $10
0000DF84                            ; ===========================================================================
0000DF84                            
0000DF84                            loc_BE5E:
0000DF84 7001                       		moveq	#1,d0
0000DF86 0240 003F                  		andi.w	#$3F,d0
0000DF8A D040                       		add.w	d0,d0
0000DF8C 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DF90 121A                       		move.b	(a2)+,d1
0000DF92 4881                       		ext.w	d1
0000DF94 3029 0008                  		move.w	obX(a1),d0
0000DF98 9041                       		sub.w	d1,d0
0000DF9A 9042                       		sub.w	d2,d0
0000DF9C 6400                       		bcc.s	loc_BE80
0000DF9E D241                       		add.w	d1,d1
0000DFA0 D041                       		add.w	d1,d0
0000DFA2 6500                       		bcs.s	loc_BE84
0000DFA4 60CE                       		bra.s	loc_BE4E
0000DFA6                            ; ===========================================================================
0000DFA6                            
0000DFA6                            loc_BE80:
0000DFA6 B044                       		cmp.w	d4,d0
0000DFA8 62CA                       		bhi.s	loc_BE4E
0000DFAA                            
0000DFAA                            loc_BE84:
0000DFAA 121A                       		move.b	(a2)+,d1
0000DFAC 4881                       		ext.w	d1
0000DFAE 3029 000C                  		move.w	obY(a1),d0
0000DFB2 9041                       		sub.w	d1,d0
0000DFB4 9043                       		sub.w	d3,d0
0000DFB6 6400                       		bcc.s	loc_BE9A
0000DFB8 D241                       		add.w	d1,d1
0000DFBA D041                       		add.w	d1,d0
0000DFBC 6500                       		bcs.s	loc_BE9E
0000DFBE 60B4                       		bra.s	loc_BE4E
0000DFC0                            ; ===========================================================================
0000DFC0                            
0000DFC0                            loc_BE9A:
0000DFC0 B045                       		cmp.w	d5,d0
0000DFC2 62B0                       		bhi.s	loc_BE4E
0000DFC4                            
0000DFC4                            loc_BE9E:
0000DFC4 361F                       		move.w	(sp)+,d3
0000DFC6 7001                       		moveq	#1,d0
0000DFC8 4E75                       		rts	
0000DFCA                            ; End of function But_MZBlock
0000DFCA                            ; End of function But_MZBlock
0000DFCA                            Map_But:	include	"_maps\Button.asm"
0000DFCA                            ; ---------------------------------------------------------------------------
0000DFCA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DFCA                            ; ---------------------------------------------------------------------------
0000DFCA                            Map_But_internal:
0000DFCA 0000                       		dc.w byte_BEAC-Map_But_internal
0000DFCC 0000                       		dc.w byte_BEB7-Map_But_internal
0000DFCE 0000                       		dc.w byte_BEC2-Map_But_internal
0000DFD0 0000                       		dc.w byte_BEB7-Map_But_internal
0000DFD2 02                         byte_BEAC:	dc.b 2
0000DFD3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DFD8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DFDD 02                         byte_BEB7:	dc.b 2
0000DFDE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DFE3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DFE8 02                         byte_BEC2:	dc.b 2
0000DFE9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DFEE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DFF3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DFF8                            		even
0000DFF8                            		even
0000DFF8                            
0000DFF8                            		include	"_incObj\33 Pushable Blocks.asm"
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            ; Object 33 - pushable blocks (MZ, LZ)
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            
0000DFF8                            PushBlock:
0000DFF8 7000                       		moveq	#0,d0
0000DFFA 1028 0024                  		move.b	obRoutine(a0),d0
0000DFFE 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E002 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E006                            ; ===========================================================================
0000E006 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E008 0000                       		dc.w loc_BF6E-PushB_Index
0000E00A 0000                       		dc.w loc_C02C-PushB_Index
0000E00C                            
0000E00C 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E00E 4001                       		dc.b $40, 1
0000E010                            ; ===========================================================================
0000E010                            
0000E010                            PushB_Main:	; Routine 0
0000E010 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E014 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E01A 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E020 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E028 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E02E 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E034 6600                       		bne.s	@notLZ
0000E036 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E03C                            
0000E03C                            	@notLZ:
0000E03C 117C 0004 0001             		move.b	#4,obRender(a0)
0000E042 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E048 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E04E 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E054 7000                       		moveq	#0,d0
0000E056 1028 0028                  		move.b	obSubtype(a0),d0
0000E05A D040                       		add.w	d0,d0
0000E05C 0240 000E                  		andi.w	#$E,d0
0000E060 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E064 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E068 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E06C 4A28 0028                  		tst.b	obSubtype(a0)
0000E070 6700                       		beq.s	@chkgone
0000E072 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E078                            
0000E078                            	@chkgone:
0000E078 45F8 FC00                  		lea	(v_objstate).w,a2
0000E07C 7000                       		moveq	#0,d0
0000E07E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E082 6700                       		beq.s	loc_BF6E
0000E084 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E08A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E090 6600 0000                  		bne.w	DeleteObject
0000E094                            
0000E094                            loc_BF6E:	; Routine 2
0000E094 4A28 0032                  		tst.b	$32(a0)
0000E098 6600 0000                  		bne.w	loc_C046
0000E09C 7200                       		moveq	#0,d1
0000E09E 1228 0014                  		move.b	obActWid(a0),d1
0000E0A2 0641 000B                  		addi.w	#$B,d1
0000E0A6 343C 0010                  		move.w	#$10,d2
0000E0AA 363C 0011                  		move.w	#$11,d3
0000E0AE 3828 0008                  		move.w	obX(a0),d4
0000E0B2 6100 0000                  		bsr.w	loc_C186
0000E0B6 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E0BC 6600                       		bne.s	loc_BFC6	; if not, branch
0000E0BE 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E0C4 3028 0008                  		move.w	obX(a0),d0
0000E0C8 0C40 0A20                  		cmpi.w	#$A20,d0
0000E0CC 6500                       		bcs.s	loc_BFC6
0000E0CE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E0D2 6400                       		bcc.s	loc_BFC6
0000E0D4 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E0D8 0440 001C                  		subi.w	#$1C,d0
0000E0DC 3140 000C                  		move.w	d0,obY(a0)
0000E0E0 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E0E6 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E0EC                            
0000E0EC                            	loc_BFC6:
0000E108 6000 0000                  		bra.w	DisplaySprite
0000E10C                            ; ===========================================================================
0000E10C                            
0000E10C                            loc_ppppp:
0000E128 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E12E 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E134 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E13A 6000                       		bra.s	loc_C02C
0000E13C                            ; ===========================================================================
0000E13C                            
0000E13C                            loc_C016:
0000E13C 45F8 FC00                  		lea	(v_objstate).w,a2
0000E140 7000                       		moveq	#0,d0
0000E142 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E146 6700                       		beq.s	loc_C028
0000E148 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E14E                            
0000E14E                            loc_C028:
0000E14E 6000 0000                  		bra.w	DeleteObject
0000E152                            ; ===========================================================================
0000E152                            
0000E152                            loc_C02C:	; Routine 4
0000E152 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E156 6700                       		beq.s	locret_C044
0000E158 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E15E 4228 0032                  		clr.b	$32(a0)
0000E162 4268 0010                  		clr.w	obVelX(a0)
0000E166 4268 0012                  		clr.w	obVelY(a0)
0000E16A                            
0000E16A                            locret_C044:
0000E16A 4E75                       		rts	
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            loc_C046:
0000E16C 3F28 0008                  		move.w	obX(a0),-(sp)
0000E170 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E176 6400                       		bcc.s	loc_C056
0000E178 6100 0000                  		bsr.w	SpeedToPos
0000E17C                            
0000E17C                            loc_C056:
0000E17C 0828 0001 0022             		btst	#1,obStatus(a0)
0000E182 6700                       		beq.s	loc_C0A0
0000E184 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E18A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E190 4A41                       		tst.w	d1
0000E192 6A00 0000                  		bpl.w	loc_C09E
0000E196 D368 000C                  		add.w	d1,obY(a0)
0000E19A 4268 0012                  		clr.w	obVelY(a0)
0000E19E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E1A4 3011                       		move.w	(a1),d0
0000E1A6 0240 03FF                  		andi.w	#$3FF,d0
0000E1AA 0C40 016A                  		cmpi.w	#$16A,d0
0000E1AE 6500                       		bcs.s	loc_C09E
0000E1B0 3028 0030                  		move.w	$30(a0),d0
0000E1B4 E640                       		asr.w	#3,d0
0000E1B6 3140 0010                  		move.w	d0,obVelX(a0)
0000E1BA 117C 0001 0032             		move.b	#1,$32(a0)
0000E1C0 4268 000E                  		clr.w	$E(a0)
0000E1C4                            
0000E1C4                            loc_C09E:
0000E1C4 6000                       		bra.s	loc_C0E6
0000E1C6                            ; ===========================================================================
0000E1C6                            
0000E1C6                            loc_C0A0:
0000E1C6 4A68 0010                  		tst.w	obVelX(a0)
0000E1CA 6700 0000                  		beq.w	loc_C0D6
0000E1CE 6B00                       		bmi.s	loc_C0BC
0000E1D0 7600                       		moveq	#0,d3
0000E1D2 1628 0014                  		move.b	obActWid(a0),d3
0000E1D6 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E1DC 4A41                       		tst.w	d1		; has block touched a wall?
0000E1DE 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E1E0 6000                       		bra.s	loc_C0E6
0000E1E2                            ; ===========================================================================
0000E1E2                            
0000E1E2                            loc_C0BC:
0000E1E2 7600                       		moveq	#0,d3
0000E1E4 1628 0014                  		move.b	obActWid(a0),d3
0000E1E8 4643                       		not.w	d3
0000E1EA 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E1F0 4A41                       		tst.w	d1		; has block touched a wall?
0000E1F2 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E1F4 6000                       		bra.s	loc_C0E6
0000E1F6                            ; ===========================================================================
0000E1F6                            
0000E1F6                            PushB_StopPush:
0000E1F6 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E1FA 6000                       		bra.s	loc_C0E6
0000E1FC                            ; ===========================================================================
0000E1FC                            
0000E1FC                            loc_C0D6:
0000E1FC 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E204 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E20A 6400                       		bcc.s	loc_C104
0000E20C                            
0000E20C                            loc_C0E6:
0000E20C 7200                       		moveq	#0,d1
0000E20E 1228 0014                  		move.b	obActWid(a0),d1
0000E212 0641 000B                  		addi.w	#$B,d1
0000E216 343C 0010                  		move.w	#$10,d2
0000E21A 363C 0011                  		move.w	#$11,d3
0000E21E 381F                       		move.w	(sp)+,d4
0000E220 6100 0000                  		bsr.w	loc_C186
0000E224 6100                       		bsr.s	PushB_ChkLava
0000E226 6000 FEC4                  		bra.w	loc_BFC6
0000E22A                            ; ===========================================================================
0000E22A                            
0000E22A                            loc_C104:
0000E22A 381F                       		move.w	(sp)+,d4
0000E22C 43F8 D000                  		lea	(v_player).w,a1
0000E230 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E236 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E23C 6000 FECE                  		bra.w	loc_ppppp
0000E240                            ; ===========================================================================
0000E240                            
0000E240                            PushB_ChkLava:
0000E240 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E246 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E248 343C FFE0                  		move.w	#-$20,d2
0000E24C 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E252 6700                       		beq.s	PushB_LoadLava
0000E254 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E25A 6700                       		beq.s	PushB_LoadLava
0000E25C 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E262 6700                       		beq.s	PushB_LoadLava
0000E264 4E75                       		rts	
0000E266                            ; ===========================================================================
0000E266                            
0000E266                            PushB_ChkLava2:
0000E266 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E26C 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E26E 343C 0020                  		move.w	#$20,d2
0000E272 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E278 6700                       		beq.s	PushB_LoadLava
0000E27A 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E280 6700                       		beq.s	PushB_LoadLava
0000E282                            
0000E282                            PushB_NoLava:
0000E282 4E75                       		rts	
0000E284                            ; ===========================================================================
0000E284                            
0000E284                            PushB_LoadLava:
0000E284 6100 0000                  		bsr.w	FindFreeObj
0000E288 6600                       		bne.s	locret_C184
0000E28A 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E28E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E294 D569 0008                  		add.w	d2,obX(a1)
0000E298 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E29E 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E2A4 2348 003C                  		move.l	a0,$3C(a1)
0000E2A8                            
0000E2A8                            locret_C184:
0000E2A8 4E75                       		rts	
0000E2AA                            ; ===========================================================================
0000E2AA                            
0000E2AA                            loc_C186:
0000E2AA 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E2AE 6700 0000                  		beq.w	loc_C218
0000E2B2 5500                       		subq.b	#2,d0
0000E2B4 6600                       		bne.s	loc_C1AA
0000E2B6 6100 AEA2                  		bsr.w	ExitPlatform
0000E2BA 0829 0003 0022             		btst	#3,obStatus(a1)
0000E2C0 6600                       		bne.s	loc_C1A4
0000E2C2 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2C6 4E75                       		rts	
0000E2C8                            ; ===========================================================================
0000E2C8                            
0000E2C8                            loc_C1A4:
0000E2C8 3404                       		move.w	d4,d2
0000E2CA 6000 B3EC                  		bra.w	MvSonicOnPtfm
0000E2CE                            ; ===========================================================================
0000E2CE                            
0000E2CE                            loc_C1AA:
0000E2CE 5500                       		subq.b	#2,d0
0000E2D0 6600                       		bne.s	loc_C1F2
0000E2D2 6100 0000                  		bsr.w	SpeedToPos
0000E2D6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E2DC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E2E2 4A41                       		tst.w	d1
0000E2E4 6A00 0000                  		bpl.w	locret_C1F0
0000E2E8 D368 000C                  		add.w	d1,obY(a0)
0000E2EC 4268 0012                  		clr.w	obVelY(a0)
0000E2F0 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2F4 3011                       		move.w	(a1),d0
0000E2F6 0240 03FF                  		andi.w	#$3FF,d0
0000E2FA 0C40 016A                  		cmpi.w	#$16A,d0
0000E2FE 6500                       		bcs.s	locret_C1F0
0000E300 3028 0030                  		move.w	$30(a0),d0
0000E304 E640                       		asr.w	#3,d0
0000E306 3140 0010                  		move.w	d0,obVelX(a0)
0000E30A 117C 0001 0032             		move.b	#1,$32(a0)
0000E310 4268 000E                  		clr.w	obY+2(a0)
0000E314                            
0000E314                            locret_C1F0:
0000E314 4E75                       		rts	
0000E316                            ; ===========================================================================
0000E316                            
0000E316                            loc_C1F2:
0000E316 6100 0000                  		bsr.w	SpeedToPos
0000E31A 3028 0008                  		move.w	obX(a0),d0
0000E31E 0240 000C                  		andi.w	#$C,d0
0000E322 6600 0000                  		bne.w	locret_C2E4
0000E326 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E32C 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E332 4268 0010                  		clr.w	obVelX(a0)
0000E336 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E33A 4E75                       		rts	
0000E33C                            ; ===========================================================================
0000E33C                            
0000E33C                            loc_C218:
0000E33C 6100 0000                  		bsr.w	Solid_ChkEnter
0000E340 4A44                       		tst.w	d4
0000E342 6700 0000                  		beq.w	locret_C2E4
0000E346 6B00 0000                  		bmi.w	locret_C2E4
0000E34A 4A28 0032                  		tst.b	$32(a0)
0000E34E 6700                       		beq.s	loc_C230
0000E350 6000 0000                  		bra.w	locret_C2E4
0000E354                            ; ===========================================================================
0000E354                            
0000E354                            loc_C230:
0000E354 4A40                       		tst.w	d0
0000E356 6700 0000                  		beq.w	locret_C2E4
0000E35A 6B00                       		bmi.s	loc_C268
0000E35C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E362 6600 0000                  		bne.w	locret_C2E4
0000E366 3F00                       		move.w	d0,-(sp)
0000E368 7600                       		moveq	#0,d3
0000E36A 1628 0014                  		move.b	obActWid(a0),d3
0000E36E 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E374 301F                       		move.w	(sp)+,d0
0000E376 4A41                       		tst.w	d1
0000E378 6B00 0000                  		bmi.w	locret_C2E4
0000E37C 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E384 7001                       		moveq	#1,d0
0000E386 323C 0040                  		move.w	#$40,d1
0000E38A 6000                       		bra.s	loc_C294
0000E38C                            ; ===========================================================================
0000E38C                            
0000E38C                            loc_C268:
0000E38C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E392 6700                       		beq.s	locret_C2E4
0000E394 3F00                       		move.w	d0,-(sp)
0000E396 7600                       		moveq	#0,d3
0000E398 1628 0014                  		move.b	obActWid(a0),d3
0000E39C 4643                       		not.w	d3
0000E39E 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3A4 301F                       		move.w	(sp)+,d0
0000E3A6 4A41                       		tst.w	d1
0000E3A8 6B00                       		bmi.s	locret_C2E4
0000E3AA 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E3B2 70FF                       		moveq	#-1,d0
0000E3B4 323C FFC0                  		move.w	#-$40,d1
0000E3B8                            
0000E3B8                            loc_C294:
0000E3B8 43F8 D000                  		lea	(v_player).w,a1
0000E3BC D169 0008                  		add.w	d0,obX(a1)
0000E3C0 3341 0020                  		move.w	d1,obInertia(a1)
0000E3C4 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E3CA 3F00                       		move.w	d0,-(sp)
0000E3D6 301F                       		move.w	(sp)+,d0
0000E3D8 4A28 0028                  		tst.b	obSubtype(a0)
0000E3DC 6B00                       		bmi.s	locret_C2E4
0000E3DE 3F00                       		move.w	d0,-(sp)
0000E3E0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E3E6 301F                       		move.w	(sp)+,d0
0000E3E8 0C41 0004                  		cmpi.w	#4,d1
0000E3EC 6F00                       		ble.s	loc_C2E0
0000E3EE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E3F4 4A40                       		tst.w	d0
0000E3F6 6A00                       		bpl.s	loc_C2D8
0000E3F8 4468 0010                  		neg.w	obVelX(a0)
0000E3FC                            
0000E3FC                            loc_C2D8:
0000E3FC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E402 6000                       		bra.s	locret_C2E4
0000E404                            ; ===========================================================================
0000E404                            
0000E404                            loc_C2E0:
0000E404 D368 000C                  		add.w	d1,obY(a0)
0000E408                            
0000E408                            locret_C2E4:
0000E408 4E75                       		rts	
0000E408 4E75                       		rts	
0000E40A                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E40A                            ; ---------------------------------------------------------------------------
0000E40A                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E40A                            ; ---------------------------------------------------------------------------
0000E40A                            Map_Push_internal:
0000E40A 0000                       		dc.w @single-Map_Push_internal
0000E40C 0000                       		dc.w @four-Map_Push_internal
0000E40E 01                         @single:	dc.b 1
0000E40F F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E414 04                         @four:		dc.b 4
0000E415 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E41A F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E41F F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E424 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E42A 00                         		even
0000E42A 00                         		even
0000E42A                            
0000E42A                            		include	"_incObj\34 Title Cards.asm"
0000E42A                            ; ---------------------------------------------------------------------------
0000E42A                            ; Object 34 - zone title cards
0000E42A                            ; ---------------------------------------------------------------------------
0000E42A                            
0000E42A                            TitleCard:
0000E42A 7000                       		moveq	#0,d0
0000E42C 1028 0024                  		move.b	obRoutine(a0),d0
0000E430 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E434 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E438                            ; ===========================================================================
0000E438 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E43A 0000                       		dc.w Card_ChkPos-Card_Index
0000E43C 0000                       		dc.w Card_Wait-Card_Index
0000E43E 0000                       		dc.w Card_Wait-Card_Index
0000E440                            
0000E440 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E440 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E440                            ; ===========================================================================
0000E440                            
0000E440                            Card_CheckSBZ3:	; Routine 0
0000E440 2248                       		movea.l	a0,a1
0000E442 7000                       		moveq	#0,d0
0000E444 1038 FE10                  		move.b	(v_zone).w,d0
0000E448 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E44E 6600                       		bne.s	Card_CheckFZ
0000E450 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E452                            
0000E452                            	Card_CheckFZ:
0000E452 3400                       		move.w	d0,d2
0000E454 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E45A 6600                       		bne.s	Card_LoadConfig
0000E45C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E45E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E460                            
0000E460                            	Card_LoadConfig:
0000E460 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E466 E948                       		lsl.w	#4,d0
0000E468 D6C0                       		adda.w	d0,a3
0000E46A 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E470 7203                       		moveq	#3,d1
0000E472                            
0000E472                            Card_Loop:
0000E472 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E476 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E47A 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E47E 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E482 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E486 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E48A 101A                       		move.b	(a2)+,d0
0000E48C 6600                       		bne.s	Card_ActNumber
0000E48E 1002                       		move.b	d2,d0
0000E490                            
0000E490                            	Card_ActNumber:
0000E490 0C00 0007                  		cmpi.b	#7,d0
0000E494 6600                       		bne.s	Card_MakeSprite
0000E496 D038 FE11                  		add.b	(v_act).w,d0
0000E49A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E4A0 6600                       		bne.s	Card_MakeSprite
0000E4A2 5300                       		subq.b	#1,d0
0000E4A4                            
0000E4A4                            	Card_MakeSprite:
0000E4A4 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E4A8 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E4B0 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E4B6 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E4BC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E4C2 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E4C8 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E4CE 43E9 0040                  		lea	$40(a1),a1	; next object
0000E4D2 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E4D6                            
0000E4D6                            Card_ChkPos:	; Routine 2
0000E4D6 7210                       		moveq	#$10,d1		; set horizontal speed
0000E4D8 3028 0030                  		move.w	card_mainX(a0),d0
0000E4DC B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E4E0 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E4E2 6C00                       		bge.s	Card_Move
0000E4E4 4441                       		neg.w	d1
0000E4E6                            
0000E4E6                            Card_Move:
0000E4E6 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E4EA                            
0000E4EA                            Card_NoMove:
0000E4EA 3028 0008                  		move.w	obX(a0),d0
0000E4EE 6B00                       		bmi.s	locret_C3D8
0000E4F0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E4F4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E4F6 6000 0000                  		bra.w	DisplaySprite
0000E4FA                            ; ===========================================================================
0000E4FA                            
0000E4FA                            locret_C3D8:
0000E4FA 4E75                       		rts	
0000E4FC                            ; ===========================================================================
0000E4FC                            
0000E4FC                            Card_Wait:	; Routine 4/6
0000E4FC 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E500 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E502 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E506 6000 0000                  		bra.w	DisplaySprite
0000E50A                            ; ===========================================================================
0000E50A                            
0000E50A                            Card_ChkPos2:
0000E50A 4A28 0001                  		tst.b	obRender(a0)
0000E50E 6A00                       		bpl.s	Card_ChangeArt
0000E510 7220                       		moveq	#$20,d1
0000E512 3028 0032                  		move.w	card_finalX(a0),d0
0000E516 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E51A 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E51C 6C00                       		bge.s	Card_Move2
0000E51E 4441                       		neg.w	d1
0000E520                            
0000E520                            Card_Move2:
0000E520 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E524 3028 0008                  		move.w	obX(a0),d0
0000E528 6B00                       		bmi.s	locret_C412
0000E52A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E52E 6400                       		bcc.s	locret_C412	; if yes, branch
0000E530 6000 0000                  		bra.w	DisplaySprite
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            locret_C412:
0000E534 4E75                       		rts	
0000E536                            ; ===========================================================================
0000E536                            
0000E536                            Card_ChangeArt:
0000E536 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E53C 6600                       		bne.s	Card_Delete
0000E53E 7000                       		moveq	#plcid_Explode,d0
0000E540 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion patterns
0000E546 7000                       		moveq	#0,d0
0000E548 1038 FE10                  		move.b	(v_zone).w,d0
0000E54C 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E550 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal patterns
0000E556                            
0000E556                            Card_Delete:
0000E556 6000 0000                  		bra.w	DeleteObject
0000E55A                            ; ===========================================================================
0000E55A 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E55C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E55E 00E4                       		dc.w $E4
0000E560 0206                       		dc.b 2,	6
0000E562 00EA                       		dc.w $EA
0000E564 0207                       		dc.b 2,	7
0000E566 00E0                       		dc.w $E0
0000E568 020A                       		dc.b 2,	$A
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A                            ; Title	card configuration data
0000E56A                            ; Format:
0000E56A                            ; 4 bytes per item (YYYY XXXX)
0000E56A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E57A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E58A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E59A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E5AA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E5BA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E5CA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E5DA                            ; ===========================================================================
0000E5DA                            ; ===========================================================================
0000E5DA                            		include	"_incObj\39 Game Over.asm"
0000E5DA                            ; ---------------------------------------------------------------------------
0000E5DA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E5DA                            ; ---------------------------------------------------------------------------
0000E5DA                            
0000E5DA                            GameOverCard:
0000E5DA 7000                       		moveq	#0,d0
0000E5DC 1028 0024                  		move.b	obRoutine(a0),d0
0000E5E0 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E5E4 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E5E8                            ; ===========================================================================
0000E5E8 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E5EA 0000                       		dc.w Over_Move-Over_Index
0000E5EC 0000                       		dc.w Over_Wait-Over_Index
0000E5EE                            ; ===========================================================================
0000E5EE                            
0000E5EE                            Over_ChkPLC:	; Routine 0
0000E5EE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E5F2 6700                       		beq.s	Over_Main	; if yes, branch
0000E5F4 4E75                       		rts	
0000E5F6                            ; ===========================================================================
0000E5F6                            
0000E5F6                            Over_Main:
0000E5F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5FA 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E600 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E606 6700                       		beq.s	Over_1stWord	; if not, branch
0000E608 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E60E                            
0000E60E                            	Over_1stWord:
0000E60E 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E614 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E61C 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E622 117C 0000 0001             		move.b	#0,obRender(a0)
0000E628 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E62E                            
0000E62E                            Over_Move:	; Routine 2
0000E62E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E630 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E636 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E638 6500                       		bcs.s	Over_UpdatePos
0000E63A 4441                       		neg.w	d1
0000E63C                            
0000E63C                            	Over_UpdatePos:
0000E63C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E640 6000 0000                  		bra.w	DisplaySprite
0000E644                            ; ===========================================================================
0000E644                            
0000E644                            Over_SetWait:
0000E644 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E64A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E64E 4E75                       		rts	
0000E650                            ; ===========================================================================
0000E650                            
0000E650                            Over_Wait:	; Routine 4
0000E650 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E654 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E658 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E65A 0828 0000 001A             		btst	#0,obFrame(a0)
0000E660 6600                       		bne.s	Over_Display
0000E662 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E666 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E668 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E66C 6000 0000                  		bra.w	DisplaySprite
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            Over_ChgMode:
0000E670 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E674 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E676 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E67C 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E680 6600                       		bne.s	Over_Display	; if yes, branch
0000E682 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E688 6000                       		bra.s	Over_Display
0000E68A                            ; ===========================================================================
0000E68A                            
0000E68A                            Over_ResetLvl:
0000E68A 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E68E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E694                            
0000E694                            Over_Display:
0000E694 6000 0000                  		bra.w	DisplaySprite
0000E694 6000 0000                  		bra.w	DisplaySprite
0000E698                            		include	"_incObj\3A Got Through Card.asm"
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            
0000E698                            GotThroughCard:
0000E698 7000                       		moveq	#0,d0
0000E69A 1028 0024                  		move.b	obRoutine(a0),d0
0000E69E 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E6A2 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E6A6                            ; ===========================================================================
0000E6A6 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E6A8 0000                       		dc.w Got_Move-Got_Index
0000E6AA 0000                       		dc.w Got_Wait-Got_Index
0000E6AC 0000                       		dc.w Got_TimeBonus-Got_Index
0000E6AE 0000                       		dc.w Got_Wait-Got_Index
0000E6B0 0000                       		dc.w Got_NextLevel-Got_Index
0000E6B2 0000                       		dc.w Got_Wait-Got_Index
0000E6B4 0000                       		dc.w Got_Move2-Got_Index
0000E6B6 0000                       		dc.w loc_C766-Got_Index
0000E6B8                            
0000E6B8 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E6B8 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E6B8                            ; ===========================================================================
0000E6B8                            
0000E6B8                            Got_ChkPLC:	; Routine 0
0000E6B8 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6BC 6700                       		beq.s	Got_Main	; if yes, branch
0000E6BE 4E75                       		rts	
0000E6C0                            ; ===========================================================================
0000E6C0                            
0000E6C0                            Got_Main:
0000E6C0 2248                       		movea.l	a0,a1
0000E6C2 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E6C8 7206                       		moveq	#6,d1
0000E6CA                            
0000E6CA                            Got_Loop:
0000E6CA 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E6CE 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E6D2 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E6D6 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E6DA 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E6DE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E6E2 101A                       		move.b	(a2)+,d0
0000E6E4 0C00 0006                  		cmpi.b	#6,d0
0000E6E8 6600                       		bne.s	loc_C5CA
0000E6EA D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E6EE                            
0000E6EE                            	loc_C5CA:
0000E6EE 1340 001A                  		move.b	d0,obFrame(a1)
0000E6F2 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E6FA 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E700 137C 0000 0001             		move.b	#0,obRender(a1)
0000E706 43E9 0040                  		lea	$40(a1),a1
0000E70A 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E70E                            
0000E70E                            Got_Move:	; Routine 2
0000E70E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E710 3028 0030                  		move.w	got_mainX(a0),d0
0000E714 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E718 6700                       		beq.s	loc_C61A	; if yes, branch
0000E71A 6C00                       		bge.s	Got_ChgPos
0000E71C 4441                       		neg.w	d1
0000E71E                            
0000E71E                            	Got_ChgPos:
0000E71E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E722                            
0000E722                            	loc_C5FE:
0000E722 3028 0008                  		move.w	obX(a0),d0
0000E726 6B00                       		bmi.s	locret_C60E
0000E728 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E72C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E72E 6000 0000                  		bra.w	DisplaySprite
0000E732                            ; ===========================================================================
0000E732                            
0000E732                            locret_C60E:
0000E732 4E75                       		rts	
0000E734                            ; ===========================================================================
0000E734                            
0000E734                            loc_C610:
0000E734 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E73A 6000 0000                  		bra.w	Got_Move2
0000E73E                            ; ===========================================================================
0000E73E                            
0000E73E                            loc_C61A:
0000E73E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E744 67EE                       		beq.s	loc_C610
0000E746 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E74C 66D4                       		bne.s	loc_C5FE
0000E74E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E752 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E758                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E758                            
0000E758                            Got_Wait:	; Routine 4, 8, $C
0000E758 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E75C 6600                       		bne.s	Got_Display
0000E75E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E762                            
0000E762                            Got_Display:
0000E762 6000 0000                  		bra.w	DisplaySprite
0000E766                            ; ===========================================================================
0000E766                            
0000E766                            Got_TimeBonus:	; Routine 6
0000E766 6100 0000                  		bsr.w	DisplaySprite
0000E76A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E770 7000                       		moveq	#0,d0
0000E772 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E776 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E778 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E77C 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E782                            
0000E782                            Got_RingBonus:
0000E782 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E786 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E788 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E78C 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E792                            
0000E792                            Got_ChkBonus:
0000E792 4A40                       		tst.w	d0		; is there any bonus?
0000E794 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E7A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7A4 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E7AA 6600                       		bne.s	Got_SetDelay
0000E7AC 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E7B0                            
0000E7B0                            Got_SetDelay:
0000E7B0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E7B6                            
0000E7B6                            locret_C692:
0000E7B6 4E75                       		rts	
0000E7B8                            ; ===========================================================================
0000E7B8                            
0000E7B8                            Got_AddBonus:
0000E7B8 4EB9 0000 0000             		jsr	(AddPoints).l
0000E7BE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E7C2 0200 0003                  		andi.b	#3,d0
0000E7C6 66EE                       		bne.s	locret_C692
0000E7D2                            ; ===========================================================================
0000E7D2                            
0000E7D2                            Got_NextLevel:	; Routine $A
0000E7D2 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E7D8 1038 FE10                  		move.b	(v_zone).w,d0
0000E7DC 0240 0007                  		andi.w	#7,d0
0000E7E0 E748                       		lsl.w	#3,d0
0000E7E2 1238 FE11                  		move.b	(v_act).w,d1
0000E7E6 0241 0003                  		andi.w	#3,d1
0000E7EA D241                       		add.w	d1,d1
0000E7EC D041                       		add.w	d1,d0
0000E7EE 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E7F2 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E7F6 4A40                       		tst.w	d0
0000E7F8 6600                       		bne.s	Got_ChkSS
0000E7FA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E800 6000                       		bra.s	Got_Display2
0000E802                            ; ===========================================================================
0000E802                            
0000E802                            Got_ChkSS:
0000E802 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E806 4A38 F7CD                  		tst.b	(f_bigring).w	; has Sonic jumped into	a giant	ring?
0000E80A 6700                       		beq.s	VBla_08A	; if not, branch
0000E80C 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E812 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set game mode to Special Stage (10)
0000E818 6000                       		bra.s	Got_Display2
0000E81A 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E820                            ; ===========================================================================
0000E820                            
0000E820                            VBla_08A:
0000E820 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E826                            
0000E826                            Got_Display2:
0000E826 6000 0000                  		bra.w	DisplaySprite
0000E82A                            ; ===========================================================================
0000E82A                            ; ---------------------------------------------------------------------------
0000E82A                            ; Level	order array
0000E82A                            ; ---------------------------------------------------------------------------
0000E82A                            LevelOrder:
0000E82A                            		; Green Hill Zone
0000E82A 0001                       		dc.b id_GHZ, 1	; Act 2
0000E82C 0002                       		dc.b id_GHZ, 2	; Act 2
0000E82E 0200                       		dc.b id_MZ, 0	; Act 3
0000E830 0000                       		dc.b 0, 0
0000E832                            
0000E832                            		; Labyrinth Zone
0000E832 0101                       		dc.b id_LZ, 1	; Act 1
0000E834 0102                       		dc.b id_LZ, 2	; Act 2
0000E836 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E838 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E83A                            
0000E83A                            		; Marble Zone
0000E83A 0201                       		dc.b id_MZ, 1	; Act 1
0000E83C 0202                       		dc.b id_MZ, 2	; Act 2
0000E83E 0502                       		dc.b id_SBZ, 2	; Act 3
0000E840 0000                       		dc.b 0, 0
0000E842                            
0000E842                            		; Star Light Zone
0000E842 0301                       		dc.b id_SLZ, 1	; Act 1
0000E844 0302                       		dc.b id_SLZ, 2	; Act 2
0000E846 0500                       		dc.b id_SBZ, 0	; Act 3
0000E848 0000                       		dc.b 0, 0
0000E84A                            
0000E84A                            		; Spring Yard Zone
0000E84A 0502                       		dc.b id_SBZ, 2	; Act 1
0000E84C 0402                       		dc.b id_SYZ, 2	; Act 2
0000E84E 0200                       		dc.b id_MZ,	 0	; Act 3
0000E850 0000                       		dc.b 0, 0
0000E852                            
0000E852                            		; Scrap Brain Zone
0000E852 0501                       		dc.b id_SBZ, 1	; Act 1
0000E854 0103                       		dc.b id_LZ, 3	; Act 2
0000E856 0000                       		dc.b 0, 0	; Final Zone
0000E858 0000                       		dc.b 0, 0
0000E85A                            		even
0000E85A                            ; ===========================================================================
0000E85A                            
0000E85A                            Got_Move2:	; Routine $E
0000E85A 7220                       		moveq	#$20,d1		; set horizontal speed
0000E85C 3028 0032                  		move.w	got_finalX(a0),d0
0000E860 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E864 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E866 6C00                       		bge.s	Got_ChgPos2
0000E868 4441                       		neg.w	d1
0000E86A                            
0000E86A                            	Got_ChgPos2:
0000E86A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E86E 3028 0008                  		move.w	obX(a0),d0
0000E872 6B00                       		bmi.s	locret_C748
0000E874 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E878 6400                       		bcc.s	locret_C748	; if yes, branch
0000E87A 6000 0000                  		bra.w	DisplaySprite
0000E87E                            ; ===========================================================================
0000E87E                            
0000E87E                            locret_C748:
0000E87E 4E75                       		rts	
0000E880                            ; ===========================================================================
0000E880                            
0000E880                            Got_SBZ2:
0000E880 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E886 6600 0000                  		bne.w	DeleteObject
0000E88A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E88E 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E892 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E8A2                            ; ===========================================================================
0000E8A2                            
0000E8A2                            loc_C766:	; Routine $10
0000E8A2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E8A6 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E8AC 6700 0000                  		beq.w	DeleteObject
0000E8B0 4E75                       		rts	
0000E8B2                            ; ===========================================================================
0000E8B2                            		;    x-start,	x-main,	y-main,
0000E8B2                            		;				routine, frame number
0000E8B2                            
0000E8B2 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E8B8 0200                       		dc.b 				2,	0
0000E8BA                            
0000E8BA FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E8C0 0201                       		dc.b 				2,	1
0000E8C2                            
0000E8C2 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E8C8 0206                       		dc.b 				2,	6
0000E8CA                            
0000E8CA 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E8D0 0202                       		dc.b 				2,	2
0000E8D2                            
0000E8D2 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E8D8 0203                       		dc.b 				2,	3
0000E8DA                            
0000E8DA 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E8E0 0204                       		dc.b 				2,	4
0000E8E2                            
0000E8E2 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E8E8 0205                       		dc.b 				2,	5
0000E8E8 0205                       		dc.b 				2,	5
0000E8EA                            		include	"_incObj\7E Special Stage Results.asm"
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA                            ; Object 7E - special stage results screen
0000E8EA                            ; ---------------------------------------------------------------------------
0000E8EA                            
0000E8EA                            SSResult:
0000E8EA 7000                       		moveq	#0,d0
0000E8EC 1028 0024                  		move.b	obRoutine(a0),d0
0000E8F0 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E8F4 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E8F8                            ; ===========================================================================
0000E8F8 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E8FA 0000                       		dc.w SSR_Move-SSR_Index
0000E8FC 0000                       		dc.w SSR_Wait-SSR_Index
0000E8FE 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E900 0000                       		dc.w SSR_Wait-SSR_Index
0000E902 0000                       		dc.w SSR_Exit-SSR_Index
0000E904 0000                       		dc.w SSR_Wait-SSR_Index
0000E906 0000                       		dc.w SSR_Continue-SSR_Index
0000E908 0000                       		dc.w SSR_Wait-SSR_Index
0000E90A 0000                       		dc.w SSR_Exit-SSR_Index
0000E90C 0000                       		dc.w loc_C91A-SSR_Index
0000E90E                            
0000E90E =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E90E                            ; ===========================================================================
0000E90E                            
0000E90E                            SSR_ChkPLC:	; Routine 0
0000E90E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E912 6700                       		beq.s	SSR_Main	; if yes, branch
0000E914 4E75                       		rts	
0000E916                            ; ===========================================================================
0000E916                            
0000E916                            SSR_Main:
0000E916 2248                       		movea.l	a0,a1
0000E918 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E91E 7203                       		moveq	#3,d1
0000E920 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E926 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E928 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E92A                            
0000E92A                            	SSR_Loop:
0000E92A 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E92E 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E932 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E936 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E93A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E93E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E942 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E94A 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E950 137C 0000 0001             		move.b	#0,obRender(a1)
0000E956 43E9 0040                  		lea	$40(a1),a1
0000E95A 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E95E                            
0000E95E 7007                       		moveq	#7,d0
0000E960 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E964 6700                       		beq.s	loc_C842
0000E966 7000                       		moveq	#0,d0
0000E968 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E96C 6600                       		bne.s	loc_C842	; if not, branch
0000E96E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E970 317C 0018 0008             		move.w	#$18,obX(a0)
0000E976 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E97C                            
0000E97C                            loc_C842:
0000E97C 1140 001A                  		move.b	d0,obFrame(a0)
0000E980                            
0000E980                            SSR_Move:	; Routine 2
0000E980 7210                       		moveq	#$10,d1		; set horizontal speed
0000E982 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E986 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E98A 6700                       		beq.s	loc_C86C	; if yes, branch
0000E98C 6C00                       		bge.s	SSR_ChgPos
0000E98E 4441                       		neg.w	d1
0000E990                            
0000E990                            SSR_ChgPos:
0000E990 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E994                            
0000E994                            loc_C85A:
0000E994 3028 0008                  		move.w	obX(a0),d0
0000E998 6B00                       		bmi.s	locret_C86A
0000E99A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E99E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E9A0 6000 0000                  		bra.w	DisplaySprite
0000E9A4                            ; ===========================================================================
0000E9A4                            
0000E9A4                            locret_C86A:
0000E9A4 4E75                       		rts	
0000E9A6                            ; ===========================================================================
0000E9A6                            
0000E9A6                            loc_C86C:
0000E9A6 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E9AC 66E6                       		bne.s	loc_C85A
0000E9AE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9B2 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9B8 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E9BE                            
0000E9BE                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E9BE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E9C2 6600                       		bne.s	SSR_Display
0000E9C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9C8                            
0000E9C8                            SSR_Display:
0000E9C8 6000 0000                  		bra.w	DisplaySprite
0000E9CC                            ; ===========================================================================
0000E9CC                            
0000E9CC                            SSR_RingBonus:	; Routine 6
0000E9CC 6100 0000                  		bsr.w	DisplaySprite
0000E9D0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E9D6 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E9DA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E9DC 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E9E2 700A                       		moveq	#10,d0		; add 10 to score
0000E9E4 4EB9 0000 0000             		jsr	(AddPoints).l
0000E9EA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9EE 0200 0003                  		andi.b	#3,d0
0000E9F2 6600                       		bne.s	locret_C8EA
0000E9FE                            ; ===========================================================================
0000E9FE                            
0000E9FE                            loc_C8C4:
0000EA08 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA0C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA12 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EA18 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EA1A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EA20 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EA24                            
0000EA24                            locret_C8EA:
0000EA24 4E75                       		rts	
0000EA26                            ; ===========================================================================
0000EA26                            
0000EA26                            SSR_Exit:	; Routine $A, $12
0000EA26 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA2C 6000 0000                  		bra.w	DisplaySprite
0000EA30                            ; ===========================================================================
0000EA30                            
0000EA30                            SSR_Continue:	; Routine $E
0000EA30 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EA36 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EA46 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA4A 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EA50 6000 0000                  		bra.w	DisplaySprite
0000EA54                            ; ===========================================================================
0000EA54                            
0000EA54                            loc_C91A:	; Routine $14
0000EA54 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA58 0200 000F                  		andi.b	#$F,d0
0000EA5C 6600                       		bne.s	SSR_Display2
0000EA5E 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EA64                            
0000EA64                            SSR_Display2:
0000EA64 6000 0000                  		bra.w	DisplaySprite
0000EA68                            ; ===========================================================================
0000EA68 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EA6E 0200                       		dc.b 2,	0		; rountine number, frame number
0000EA70 0320 0120 0118             		dc.w $320, $120, $118
0000EA76 0201                       		dc.b 2,	1
0000EA78 0360 0120 0128             		dc.w $360, $120, $128
0000EA7E 0202                       		dc.b 2,	2
0000EA80 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EA86 0203                       		dc.b 2,	3
0000EA88 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EA8E 0206                       		dc.b 2,	6
0000EA8E 0206                       		dc.b 2,	6
0000EA90                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            ; Object 7F - chaos emeralds from the special stage results screen
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            
0000EA90                            SSRChaos:
0000EA90 7000                       		moveq	#0,d0
0000EA92 1028 0024                  		move.b	obRoutine(a0),d0
0000EA96 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA9A 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EA9E                            ; ===========================================================================
0000EA9E 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EAA0 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EAA2                            
0000EAA2                            ; ---------------------------------------------------------------------------
0000EAA2                            ; X-axis positions for chaos emeralds
0000EAA2                            ; ---------------------------------------------------------------------------
0000EAA2 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EAAE                            ; ===========================================================================
0000EAAE                            
0000EAAE                            SSRC_Main:	; Routine 0
0000EAAE 2248                       		movea.l	a0,a1
0000EAB0 45F9 0000 EAA2             		lea	(SSRC_PosData).l,a2
0000EAB6 7400                       		moveq	#0,d2
0000EAB8 7200                       		moveq	#0,d1
0000EABA 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EABE 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EAC0 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EAC4                            
0000EAC4                            	SSRC_Loop:
0000EAC4 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EAC8 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EACC 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EAD2 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EAD6 1633 2000                  		move.b	(a3,d2.w),d3
0000EADA 1343 001A                  		move.b	d3,obFrame(a1)
0000EADE 1343 001C                  		move.b	d3,obAnim(a1)
0000EAE2 5202                       		addq.b	#1,d2
0000EAE4 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EAE8 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EAF0 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EAF6 137C 0000 0001             		move.b	#0,obRender(a1)
0000EAFC 43E9 0040                  		lea	$40(a1),a1	; next object
0000EB00 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EB04                            
0000EB04                            SSRC_Flash:	; Routine 2
0000EB04 1028 001A                  		move.b	obFrame(a0),d0
0000EB08 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EB0E 0C00 0006                  		cmpi.b	#6,d0
0000EB12 6600                       		bne.s	SSRC_Display
0000EB14 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EB1A                            
0000EB1A                            	SSRC_Display:
0000EB1A 6000 0000                  		bra.w	DisplaySprite
0000EB1A 6000 0000                  		bra.w	DisplaySprite
0000EB1E                            
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            ; Sprite mappings - zone title cards
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EB20 0000                       		dc.w M_Card_LZ-Map_Card
0000EB22 0000                       		dc.w M_Card_MZ-Map_Card
0000EB24 0000                       		dc.w M_Card_SLZ-Map_Card
0000EB26 0000                       		dc.w M_Card_SYZ-Map_Card
0000EB28 0000                       		dc.w M_Card_SBZ-Map_Card
0000EB2A 0000                       		dc.w M_Card_Zone-Map_Card
0000EB2C 0000                       		dc.w M_Card_Act1-Map_Card
0000EB2E 0000                       		dc.w M_Card_Act2-Map_Card
0000EB30 0000                       		dc.w M_Card_Act3-Map_Card
0000EB32 0000                       		dc.w M_Card_Oval-Map_Card
0000EB34 0000                       		dc.w M_Card_FZ-Map_Card
0000EB36 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EB37 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EB3C F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EB41 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EB46 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EB4B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EB50 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EB55 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EB5A F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EB5F F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EB64                            		even
0000EB64 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EB65 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EB6A F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EB6F F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EB74 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EB79 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EB7E F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EB83 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EB88 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EB8D F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EB92                            		even
0000EB92 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EB93 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EB98 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EB9D F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EBA2 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EBA7 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EBAC F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EBB1 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EBB6 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EBBB F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EBC0 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EBC5 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EBCA 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EBCB F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EBD0 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EBD5 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EBDA F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EBDF F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EBE4 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EBE9 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EBEE F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EBF3 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EBF8                            		even
0000EBF8 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EBF9 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EBFE F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EC03 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EC08 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EC0D F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EC12 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EC17 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EC1C F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EC21 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EC26 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EC2C 00                         		even
0000EC2C 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EC2D F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EC32 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EC37 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EC3C F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EC41 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EC46 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EC4B F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EC50 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EC55 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EC5A F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EC60 00                         		even
0000EC60 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EC61 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EC66 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EC6B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EC70 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EC76 00                         		even
0000EC76 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EC77 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC7C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EC81 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EC82 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC87 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EC8C 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EC8D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC92 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EC97 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EC98 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EC9D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ECA2 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ECA7 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ECAC 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ECB1 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ECB6 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ECBB FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ECC0 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ECC5 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ECCA FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ECCF 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ECD4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ECDA 00                         		even
0000ECDA 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ECDB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000ECE0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000ECE5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ECEA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000ECEF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ECF4                            		even
0000ECF4                            
0000ECF4                            Map_Over:	include	"_maps\Game Over.asm"
0000ECF4                            ; ---------------------------------------------------------------------------
0000ECF4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ECF4                            ; ---------------------------------------------------------------------------
0000ECF4                            Map_Over_internal:
0000ECF4 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ECF6 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ECF8 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ECFA 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ECFC 02                         byte_CBAC:	dc.b 2			; GAME
0000ECFD F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ED02 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ED07 02                         byte_CBB7:	dc.b 2			; OVER
0000ED08 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000ED0D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000ED12 02                         byte_CBC2:	dc.b 2			; TIME
0000ED13 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000ED18 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000ED1D 02                         byte_CBCD:	dc.b 2			; OVER
0000ED1E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000ED23 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000ED28                            		even
0000ED28                            		even
0000ED28                            
0000ED28                            ; ---------------------------------------------------------------------------
0000ED28                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000ED28                            ; ---------------------------------------------------------------------------
0000ED28 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000ED2A 0000                       		dc.w M_Got_Passed-Map_Got
0000ED2C 0000                       		dc.w M_Got_Score-Map_Got
0000ED2E 0000                       		dc.w M_Got_TBonus-Map_Got
0000ED30 0000                       		dc.w M_Got_RBonus-Map_Got
0000ED32 FF6F                       		dc.w M_Card_Oval-Map_Got
0000ED34 FF4E                       		dc.w M_Card_Act1-Map_Got
0000ED36 FF59                       		dc.w M_Card_Act2-Map_Got
0000ED38 FF64                       		dc.w M_Card_Act3-Map_Got
0000ED3A 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ED3B F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ED40 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ED45 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ED4A F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ED4F F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ED54 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ED59 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ED5E F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ED63 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ED64 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ED69 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ED6E F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ED73 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ED78 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED7D F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ED82 06                         M_Got_Score:	dc.b 6			; SCORE
0000ED83 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ED88 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ED8D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000ED92 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000ED97 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ED9C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EDA1 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EDA2 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EDA7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDAC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDB1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDB6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDBB F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EDC0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDC5 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EDC6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EDCB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDD0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDD5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDDA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDDF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EDE4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDEA 00                         		even
0000EDEA                            ; ---------------------------------------------------------------------------
0000EDEA                            ; Sprite mappings - special stage results screen
0000EDEA                            ; ---------------------------------------------------------------------------
0000EDEA 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EDEC 0000                       		dc.w M_SSR_Score-Map_SSR
0000EDEE 0000                       		dc.w byte_CD0D-Map_SSR
0000EDF0 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EDF2 0000                       		dc.w byte_CD31-Map_SSR
0000EDF4 0000                       		dc.w byte_CD46-Map_SSR
0000EDF6 0000                       		dc.w byte_CD5B-Map_SSR
0000EDF8 0000                       		dc.w byte_CD6B-Map_SSR
0000EDFA 0000                       		dc.w byte_CDA8-Map_SSR
0000EDFC 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EDFD F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EE02 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EE07 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EE0C F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EE11 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EE16 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EE1B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EE20 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE25 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EE2A F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EE2F F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EE34 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EE39 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EE3E 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EE3F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE44 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE49 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE4E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE53 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE58 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE5D 07                         byte_CD0D:	dc.b 7
0000EE5E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE63 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE68 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE6D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE72 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE77 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE7C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE81 04                         byte_CD31:	dc.b 4
0000EE82 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE87 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE8C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE91 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EE96 04                         byte_CD46:	dc.b 4
0000EE97 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE9C F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEA1 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEA6 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EEAB 03                         byte_CD5B:	dc.b 3
0000EEAC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEB1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEB6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEBB 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EEBC F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EEC1 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EEC6 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EECB F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EED0 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EED5 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EEDA F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EEDF F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EEE4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EEE9 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EEEE F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EEF3 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EEF8 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EEF9 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EEFE F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EF03 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EF08 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EF0D F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EF12 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EF17 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EF1C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EF21 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EF26 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EF2B F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EF30 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EF35 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EF3A F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EF3F F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EF44                            		even
0000EF44                            
0000EF44                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44                            Map_SSRC_internal:
0000EF44 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EF46 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EF48 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EF4A 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EF4C 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EF4E 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EF50 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EF52 01                         byte_CE02:	dc.b 1
0000EF53 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EF58 01                         byte_CE08:	dc.b 1
0000EF59 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EF5E 01                         byte_CE0E:	dc.b 1
0000EF5F F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EF64 01                         byte_CE14:	dc.b 1
0000EF65 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EF6A 01                         byte_CE1A:	dc.b 1
0000EF6B F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EF70 01                         byte_CE20:	dc.b 1
0000EF71 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EF76 00                         byte_CE26:	dc.b 0			; Blank frame
0000EF78 00                         		even
0000EF78 00                         		even
0000EF78                            
0000EF78                            		include	"_incObj\36 Spikes.asm"
0000EF78                            ; ---------------------------------------------------------------------------
0000EF78                            ; Object 36 - spikes
0000EF78                            ; ---------------------------------------------------------------------------
0000EF78                            
0000EF78                            Spikes:
0000EF78 7000                       		moveq	#0,d0
0000EF7A 1028 0024                  		move.b	obRoutine(a0),d0
0000EF7E 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EF82 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EF86                            ; ===========================================================================
0000EF86 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EF88 0000                       		dc.w Spik_Solid-Spik_Index
0000EF8A                            
0000EF8A =00000030                  spik_origX:	equ $30		; start X position
0000EF8A =00000032                  spik_origY:	equ $32		; start Y position
0000EF8A                            
0000EF8A 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EF8C 0110                       		dc.b 1,	$10
0000EF8E 0204                       		dc.b 2,	4
0000EF90 031C                       		dc.b 3,	$1C
0000EF92 0440                       		dc.b 4,	$40
0000EF94 0510                       		dc.b 5,	$10
0000EF96                            ; ===========================================================================
0000EF96                            
0000EF96                            Spik_Main:	; Routine 0
0000EF96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF9A 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EFA2 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EFA8 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EFAE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EFB4 1028 0028                  		move.b	obSubtype(a0),d0
0000EFB8 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EFBE 0240 00F0                  		andi.w	#$F0,d0
0000EFC2 43F9 0000 EF8A             		lea	(Spik_Var).l,a1
0000EFC8 E648                       		lsr.w	#3,d0
0000EFCA D2C0                       		adda.w	d0,a1
0000EFCC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EFD0 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EFD4 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EFDA 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EFE0                            
0000EFE0                            Spik_Solid:	; Routine 2
0000EFE0 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EFE4 343C 0004                  		move.w	#4,d2
0000EFE8 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EFEE 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EFF0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EFF6 6600                       		bne.s	Spik_Upright	; if not, branch
0000EFF8 343C 0014                  		move.w	#$14,d2
0000EFFC                            
0000EFFC                            ; Spikes types $1x and $5x face	sideways
0000EFFC                            
0000EFFC                            Spik_SideWays:
0000EFFC 323C 001B                  		move.w	#$1B,d1
0000F000 3602                       		move.w	d2,d3
0000F002 5243                       		addq.w	#1,d3
0000F004 3828 0008                  		move.w	obX(a0),d4
0000F008 6100 0000                  		bsr.w	SolidObject
0000F00C 0828 0003 0022             		btst	#3,obStatus(a0)
0000F012 6600                       		bne.s	Spik_Display
0000F014 0C44 0001                  		cmpi.w	#1,d4
0000F018 6700                       		beq.s	Spik_Hurt
0000F01A 6000                       		bra.s	Spik_Display
0000F01C                            ; ===========================================================================
0000F01C                            
0000F01C                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F01C                            
0000F01C                            Spik_Upright:
0000F01C 7200                       		moveq	#0,d1
0000F01E 1228 0014                  		move.b	obActWid(a0),d1
0000F022 0641 000B                  		addi.w	#$B,d1
0000F026 343C 0010                  		move.w	#$10,d2
0000F02A 363C 0011                  		move.w	#$11,d3
0000F02E 3828 0008                  		move.w	obX(a0),d4
0000F032 6100 0000                  		bsr.w	SolidObject
0000F036 0828 0003 0022             		btst	#3,obStatus(a0)
0000F03C 6600                       		bne.s	Spik_Hurt
0000F03E 4A44                       		tst.w	d4
0000F040 6A00                       		bpl.s	Spik_Display
0000F042                            
0000F042                            Spik_Hurt:
0000F042 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F046 6600                       		bne.s	Spik_Display	; if yes, branch
0000F048 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F04C 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F04E 2F08                       		move.l	a0,-(sp)
0000F050 2448                       		movea.l	a0,a2
0000F052 41F8 D000                  		lea	(v_player).w,a0
0000F056 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F05C 6400                       		bcc.s	loc_CF20
0000F05E                            		; This fixes the infamous "spike bug"
0000F05E 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F062 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F064 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F06A                            loc_D5A2:
0000F06A 9680                       		sub.l	d0,d3
0000F06C 2143 000C                  		move.l	d3,obY(a0)
0000F070 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F076                            
0000F076                            loc_CF20:
0000F076 205F                       		movea.l	(sp)+,a0
0000F078                            
0000F078                            Spik_Display:
0000F078 6100 0000                  		bsr.w	DisplaySprite
0000F09A 4E75                       		rts	
0000F09C                            ; ===========================================================================
0000F09C                            
0000F09C                            Spik_Type0x:
0000F09C 7000                       		moveq	#0,d0
0000F09E 1028 0028                  		move.b	obSubtype(a0),d0
0000F0A2 D040                       		add.w	d0,d0
0000F0A4 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F0A8 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F0AC                            ; ===========================================================================
0000F0AC 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F0AE 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F0B0 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F0B2                            ; ===========================================================================
0000F0B2                            
0000F0B2                            Spik_Type00:
0000F0B2 4E75                       		rts			; don't move the object
0000F0B4                            ; ===========================================================================
0000F0B4                            
0000F0B4                            Spik_Type01:
0000F0B4 6100 0000                  		bsr.w	Spik_Wait
0000F0B8 7000                       		moveq	#0,d0
0000F0BA 1028 0034                  		move.b	$34(a0),d0
0000F0BE D068 0032                  		add.w	spik_origY(a0),d0
0000F0C2 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F0C6 4E75                       		rts	
0000F0C8                            ; ===========================================================================
0000F0C8                            
0000F0C8                            Spik_Type02:
0000F0C8 6100 0000                  		bsr.w	Spik_Wait
0000F0CC 7000                       		moveq	#0,d0
0000F0CE 1028 0034                  		move.b	$34(a0),d0
0000F0D2 D068 0030                  		add.w	spik_origX(a0),d0
0000F0D6 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F0DA 4E75                       		rts	
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            Spik_Wait:
0000F0DC 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F0E0 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F0E2 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F0E6 6600                       		bne.s	locret_CFE6
0000F0E8 4A28 0001                  		tst.b	obRender(a0)
0000F0EC 6A00                       		bpl.s	locret_CFE6
0000F0F8 6000                       		bra.s	locret_CFE6
0000F0FA                            ; ===========================================================================
0000F0FA                            
0000F0FA                            loc_CFA4:
0000F0FA 4A68 0036                  		tst.w	$36(a0)
0000F0FE 6700                       		beq.s	loc_CFC6
0000F100 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F106 6400                       		bcc.s	locret_CFE6
0000F108 317C 0000 0034             		move.w	#0,$34(a0)
0000F10E 317C 0000 0036             		move.w	#0,$36(a0)
0000F114 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F11A 6000                       		bra.s	locret_CFE6
0000F11C                            ; ===========================================================================
0000F11C                            
0000F11C                            loc_CFC6:
0000F11C 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F122 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F128 6500                       		bcs.s	locret_CFE6
0000F12A 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F130 317C 0001 0036             		move.w	#1,$36(a0)
0000F136 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F13C                            
0000F13C                            locret_CFE6:
0000F13C 4E75                       		rts	
0000F13C 4E75                       		rts	
0000F13E                            Map_Spike:	include	"_maps\Spikes.asm"
0000F13E                            ; --------------------------------------------------------------------------------
0000F13E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F13E                            ; --------------------------------------------------------------------------------
0000F13E                            
0000F13E                            SME_XgeaQ:	
0000F13E 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F142 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F146 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F14A 03                         SME_XgeaQ_C:	dc.b 3	
0000F14B F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F150 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F155 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F15A 03                         SME_XgeaQ_1C:	dc.b 3	
0000F15B EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F160 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F165 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F16A 01                         SME_XgeaQ_2C:	dc.b 1	
0000F16B F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F170 03                         SME_XgeaQ_32:	dc.b 3	
0000F171 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F176 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F17B F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F180 06                         SME_XgeaQ_42:	dc.b 6	
0000F181 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F186 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F18B F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F190 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F195 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F19A F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F19F 01                         SME_XgeaQ_61:	dc.b 1	
0000F1A0 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F1A6 00                         		even
0000F1A6 00                         		even
0000F1A6                            		include	"_incObj\3B Purple Rock.asm"
0000F1A6                            ; ---------------------------------------------------------------------------
0000F1A6                            ; Object 3B - purple rock (GHZ)
0000F1A6                            ; ---------------------------------------------------------------------------
0000F1A6                            
0000F1A6                            PurpleRock:
0000F1A6 7000                       		moveq	#0,d0
0000F1A8 1028 0024                  		move.b	obRoutine(a0),d0
0000F1AC 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F1B0 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F1B4                            ; ===========================================================================
0000F1B4 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F1B6 0000                       		dc.w Rock_Solid-Rock_Index
0000F1B8                            ; ===========================================================================
0000F1B8                            
0000F1B8                            Rock_Main:	; Routine 0
0000F1B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1BC 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F1C4 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F1CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000F1D0 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F1D6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F1DC                            
0000F1DC                            Rock_Solid:	; Routine 2
0000F1DC 323C 001B                  		move.w	#$1B,d1
0000F1E0 343C 0010                  		move.w	#$10,d2
0000F1E4 363C 0010                  		move.w	#$10,d3
0000F1E8 3828 0008                  		move.w	obX(a0),d4
0000F1EC 6100 0000                  		bsr.w	SolidObject
0000F1F0 6100 0000                  		bsr.w	DisplaySprite
0000F212 4E75                       		rts	
0000F212 4E75                       		rts	
0000F214                            		include	"_incObj\49 Waterfall Sound.asm"
0000F214                            ; ---------------------------------------------------------------------------
0000F214                            ; Object 49 - waterfall	sound effect (GHZ)
0000F214                            ; ---------------------------------------------------------------------------
0000F214                            
0000F214                            WaterSound:
0000F214 7000                       		moveq	#0,d0
0000F216 1028 0024                  		move.b	obRoutine(a0),d0
0000F21A 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F21E 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F222                            ; ===========================================================================
0000F222 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F224 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F226                            ; ===========================================================================
0000F226                            
0000F226                            WSnd_Main:	; Routine 0
0000F226 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F22A 117C 0004 0001             		move.b	#4,obRender(a0)
0000F230                            
0000F230                            WSnd_PlaySnd:	; Routine 2
0000F230 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F234 0200 003F                  		andi.b	#$3F,d0
0000F238 6600                       		bne.s	WSnd_ChkDel
0000F244                            
0000F244                            	WSnd_ChkDel:
0000F262 4E75                       		rts	
0000F262 4E75                       		rts	
0000F264                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F264                            ; ---------------------------------------------------------------------------
0000F264                            ; Sprite mappings - purple rock	(GHZ)
0000F264                            ; ---------------------------------------------------------------------------
0000F264                            Map_PRock_internal:
0000F264 0000                       		dc.w byte_D110-Map_PRock_internal
0000F266 02                         byte_D110:	dc.b 2
0000F267 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F26C F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F272 00                         		even
0000F272 00                         		even
0000F272                            		include	"_incObj\3C Smashable Wall.asm"
0000F272                            ; ---------------------------------------------------------------------------
0000F272                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F272                            ; ---------------------------------------------------------------------------
0000F272                            
0000F272                            SmashWall:
0000F272 7000                       		moveq	#0,d0
0000F274 1028 0024                  		move.b	obRoutine(a0),d0
0000F278 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F27C 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F280 6000 0000                  		bra.w	RememberState
0000F284                            ; ===========================================================================
0000F284 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F286 0000                       		dc.w Smash_Solid-Smash_Index
0000F288 0000                       		dc.w Smash_FragMove-Smash_Index
0000F28A                            
0000F28A =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F28A                            ; ===========================================================================
0000F28A                            
0000F28A                            Smash_Main:	; Routine 0
0000F28A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F28E 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F296 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F29C 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2A2 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F2A8 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F2AE 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F2B4                            
0000F2B4                            Smash_Solid:	; Routine 2
0000F2B4 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F2BA 323C 001B                  		move.w	#$1B,d1
0000F2BE 343C 0020                  		move.w	#$20,d2
0000F2C2 363C 0020                  		move.w	#$20,d3
0000F2C6 3828 0008                  		move.w	obX(a0),d4
0000F2CA 6100 0000                  		bsr.w	SolidObject
0000F2CE 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F2D4 6600                       		bne.s	@chkroll	; if yes, branch
0000F2D6                            
0000F2D6                            @donothing:
0000F2D6 4E75                       		rts	
0000F2D8                            ; ===========================================================================
0000F2D8                            
0000F2D8                            @chkroll:
0000F2D8 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F2DE 66F6                       		bne.s	@donothing	; if not, branch
0000F2E0 3028 0030                  		move.w	smash_speed(a0),d0
0000F2E4 6A00                       		bpl.s	@chkspeed
0000F2E6 4440                       		neg.w	d0
0000F2E8                            
0000F2E8                            	@chkspeed:
0000F2E8 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F2EC 65E8                       		bcs.s	@donothing	; if not, branch
0000F2EE 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F2F4 5869 0008                  		addq.w	#4,obX(a1)
0000F2F8 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F2FE 3028 0008                  		move.w	obX(a0),d0
0000F302 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F306 6500                       		bcs.s	@smash		; if yes, branch
0000F308 5169 0008                  		subq.w	#8,obX(a1)
0000F30C 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F312                            
0000F312                            	@smash:
0000F312 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F318 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F31E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F324 7207                       		moveq	#7,d1		; load 8 fragments
0000F326 343C 0070                  		move.w	#$70,d2
0000F32A 6100                       		bsr.s	SmashObject
0000F32C                            
0000F32C                            Smash_FragMove:	; Routine 4
0000F32C 6100 0000                  		bsr.w	SpeedToPos
0000F330 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F336 6100 0000                  		bsr.w	DisplaySprite
0000F33A 4A28 0001                  		tst.b	obRender(a0)
0000F33E 6A00 0000                  		bpl.w	DeleteObject
0000F342 4E75                       		rts	
0000F342 4E75                       		rts	
0000F344                            
0000F344                            		include	"_incObj\sub SmashObject.asm"
0000F344                            ; ---------------------------------------------------------------------------
0000F344                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F344                            ; ---------------------------------------------------------------------------
0000F344                            
0000F344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F344                            
0000F344                            
0000F344                            SmashObject:
0000F344 7000                       		moveq	#0,d0
0000F346 1028 001A                  		move.b	obFrame(a0),d0
0000F34A D040                       		add.w	d0,d0
0000F34C 2668 0004                  		movea.l	obMap(a0),a3
0000F350 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F354 524B                       		addq.w	#1,a3
0000F356 08E8 0005 0001             		bset	#5,obRender(a0)
0000F35C 1810                       		move.b	0(a0),d4
0000F35E 1A28 0001                  		move.b	obRender(a0),d5
0000F362 2248                       		movea.l	a0,a1
0000F364 6000                       		bra.s	@loadfrag
0000F366                            ; ===========================================================================
0000F366                            
0000F366                            	@loop:
0000F366 6100 0000                  		bsr.w	FindFreeObj
0000F36A 6600                       		bne.s	@playsnd
0000F36C 5A4B                       		addq.w	#5,a3
0000F36E                            
0000F36E                            @loadfrag:
0000F36E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F374 1284                       		move.b	d4,0(a1)
0000F376 234B 0004                  		move.l	a3,obMap(a1)
0000F37A 1345 0001                  		move.b	d5,obRender(a1)
0000F37E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F384 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F38A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F390 1368 0018 0018             		move.b	obPriority(a0),obPriority(a1)
0000F396 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F39C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F3A0 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F3A4 B3C8                       		cmpa.l	a0,a1
0000F3A6 6400                       		bcc.s	@loc_D268
0000F3A8 2F08                       		move.l	a0,-(sp)
0000F3AA 2049                       		movea.l	a1,a0
0000F3AC 6100 0000                  		bsr.w	SpeedToPos
0000F3B0 D568 0012                  		add.w	d2,obVelY(a0)
0000F3B4 205F                       		movea.l	(sp)+,a0
0000F3B6 6100 0000                  		bsr.w	DisplaySprite1
0000F3BA                            
0000F3BA                            	@loc_D268:
0000F3BA 51C9 FFAA                  		dbf	d1,@loop
0000F3BE                            
0000F3BE                            	@playsnd:
0000F3C8                            
0000F3C8                            ; End of function SmashObject
0000F3C8                            ; End of function SmashObject
0000F3C8                            
0000F3C8                            ; ===========================================================================
0000F3C8                            ; Smashed block	fragment speeds
0000F3C8                            ;
0000F3C8 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F3CC 0600 FF00                  		dc.w $600, -$100
0000F3D0 0600 0100                  		dc.w $600, $100
0000F3D4 0400 0500                  		dc.w $400, $500
0000F3D8 0600 FA00                  		dc.w $600, -$600
0000F3DC 0800 FE00                  		dc.w $800, -$200
0000F3E0 0800 0200                  		dc.w $800, $200
0000F3E4 0600 0600                  		dc.w $600, $600
0000F3E8                            
0000F3E8 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F3EC F800 FE00                  		dc.w -$800, -$200
0000F3F0 F800 0200                  		dc.w -$800, $200
0000F3F4 FA00 0600                  		dc.w -$600, $600
0000F3F8 FC00 FB00                  		dc.w -$400, -$500
0000F3FC FA00 FF00                  		dc.w -$600, -$100
0000F400 FA00 0100                  		dc.w -$600, $100
0000F404 FC00 0500                  		dc.w -$400, $500
0000F408                            
0000F408                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F408                            ; ---------------------------------------------------------------------------
0000F408                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F408                            ; ---------------------------------------------------------------------------
0000F408                            Map_Smash_internal:
0000F408 0000                       		dc.w @left-Map_Smash_internal
0000F40A 0000                       		dc.w @middle-Map_Smash_internal
0000F40C 0000                       		dc.w @right-Map_Smash_internal
0000F40E 08                         @left:		dc.b 8
0000F40F E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F414 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F419 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F41E 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F423 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F428 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F42D 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F432 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F437 08                         @middle:	dc.b 8
0000F438 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F43D F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F442 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F447 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F44C E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F451 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F456 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F45B 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F460 08                         @right:		dc.b 8
0000F461 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F466 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F46B 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F470 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F475 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F47A F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F47F 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F484 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F48A 00                         		even
0000F48A 00                         		even
0000F48A                            
0000F48A                            ; ---------------------------------------------------------------------------
0000F48A                            ; Object code execution subroutine
0000F48A                            ; ---------------------------------------------------------------------------
0000F48A                            
0000F48A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F48A                            
0000F48A                            
0000F48A                            
0000F48A                            ExecuteObjects: ; XREF: GM_Title; et al
0000F48A 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F48E 7E7F                       		moveq #$7F,d7
0000F490 7000                       		moveq #0,d0
0000F492 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F498 6400                       		bcc.s loc_D362
0000F49A                            
0000F49A                            loc_D348:
0000F49A 1010                       		move.b (a0),d0 ; load object number from RAM
0000F49C 6700                       		beq.s loc_D358
0000F49E D040                       		add.w d0,d0
0000F4A0 D040                       		add.w d0,d0
0000F4A2 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F4A6 4E91                       		jsr (a1) ; run the object's code
0000F4A8 7000                       		moveq #0,d0
0000F4AA                            
0000F4AA                            loc_D358:
0000F4AA 41E8 0040                  		lea $40(a0),a0 ; next object
0000F4AE 51CF FFEA                  		dbf d7,loc_D348
0000F4B2 4E75                       		rts
0000F4B4                            ; ===========================================================================
0000F4B4                            
0000F4B4                            loc_D362:
0000F4B4 7E1F                       		moveq #$1F,d7
0000F4B6 61E2                       		bsr.s loc_D348
0000F4B8 7E5F                       		moveq #$5F,d7
0000F4BA                            
0000F4BA                            loc_D368:
0000F4BA 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F4BC 1010                       		move.b (a0),d0 ; get the object's ID
0000F4BE 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F4C0 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F4C4 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F4C6 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F4CA 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F4D0 6700                       		beq.s loc_D378 ; if not, branch
0000F4D2 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F4D6                            
0000F4D6                            loc_D378:
0000F4D6 6100 0000                  		bsr.w DisplaySprite2
0000F4DA                            		
0000F4DA                            loc_D37C:
0000F4DA 41E8 0040                  		lea $40(a0),a0
0000F4DE 51CF FFDA                  		dbf d7,loc_D368
0000F4E2 4E75                       		rts
0000F4E4                            ; End of function ExecuteObjects
0000F4E4                            
0000F4E4                            ; ===========================================================================
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            ; Object pointers
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            Obj_Index:
0000F4E4                            		include	"_inc\Object Pointers.asm"
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            ; Object pointers
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F4E8 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F4EC 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F4F0 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F4F4 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F4F8 0000 B364                  ptr_Mozzietron:		dc.l Mozzietron
0000F4FC 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F500 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F504 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F508 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F50C 0000 0000                  ptr_Pole:		dc.l Pole
0000F510 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F514 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F518 0000 C74C                  ptr_TitleSonic:		dc.l TitleSonic
0000F51C 0000 C7CC                  ptr_PSBTM:		dc.l PSBTM
0000F520 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F524 0000 8EC6                  ptr_Bridge:		dc.l Bridge
0000F528 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F52C 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F530 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F534 0000 94EC                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F538 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F53C 0000 9838                  ptr_Helix:		dc.l Helix
0000F540 0000 99C4                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F544 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F548 0000 9DA0                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F54C 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F550 0000 A356                  ptr_Scenery:		dc.l Scenery
0000F554 0000 A3F8                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F558 0000 A6E0                  ptr_BallHog:		dc.l BallHog
0000F55C 0000 B07A                  ptr_Crabmeat:		dc.l Crabmeat
0000F560 0000 A7AE                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F564 0000 0000                  ptr_HUD:		dc.l HUD
0000F568 0000 B496                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F56C 0000 B5E8                  ptr_Missile:		dc.l Missile
0000F570 0000 A880                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F574 0000 B842                  ptr_Rings:		dc.l Rings
0000F578 0000 C08C                  ptr_Monitor:		dc.l Monitor
0000F57C 0000 A8F0                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F580 0000 AAAE                  ptr_Animals:		dc.l Animals		; $28
0000F584 0000 AF9C                  ptr_Points:		dc.l Points
0000F588 0000 A4CE                  ptr_AutoDoor:		dc.l AutoDoor
0000F58C 0000 CC50                  ptr_Chopper:		dc.l Chopper
0000F590 0000 CD0A                  ptr_Jaws:		dc.l Jaws
0000F594 0000 CDD4                  ptr_Burrobot:		dc.l Burrobot
0000F598 0000 C28A                  ptr_PowerUp:		dc.l PowerUp
0000F59C 0000 CFE8                  ptr_LargeGrass:		dc.l LargeGrass
0000F5A0 0000 D4CA                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F5A4 0000 D7A6                  ptr_ChainStomp:		dc.l ChainStomp
0000F5A8 0000 DE54                  ptr_Button:		dc.l Button
0000F5AC 0000 DFF8                  ptr_PushBlock:		dc.l PushBlock
0000F5B0 0000 E42A                  ptr_TitleCard:		dc.l TitleCard
0000F5B4 0000 D30A                  ptr_GrassFire:		dc.l GrassFire
0000F5B8 0000 EF78                  ptr_Spikes:		dc.l Spikes
0000F5BC 0000 BA9E                  ptr_RingLoss:		dc.l RingLoss
0000F5C0 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F5C4 0000 E5DA                  ptr_GameOverCard:	dc.l GameOverCard
0000F5C8 0000 E698                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F5CC 0000 F1A6                  ptr_PurpleRock:		dc.l PurpleRock
0000F5D0 0000 F272                  ptr_SmashWall:		dc.l SmashWall
0000F5D4 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F5D8 0000 0000                  ptr_Prison:		dc.l Prison
0000F5DC 0000 A982                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F5E0 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F5E4 0000 0000                  ptr_Springs:		dc.l Springs
0000F5E8 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F5EC 0000 0000                  ptr_Roller:		dc.l Roller
0000F5F0 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F5F4 0000 DAC2                  ptr_SideStomp:		dc.l SideStomp
0000F5F8 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F5FC 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F600 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F604 0000 F214                  ptr_WaterSound:		dc.l WaterSound
0000F608 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F60C 0000 BD60                  ptr_GiantRing:		dc.l GiantRing
0000F610 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F614 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F618 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F61C 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F620 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F624 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F628 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F62C 0000 9EB0                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F630 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F634 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F638 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F63C 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F640 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F644 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F648 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F64C 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F650 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F654 0000 0000                  ptr_Fan:		dc.l Fan
0000F658 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F65C 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F660 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F664 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F668 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F66C 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F670 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F674 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F678 0000 0000                  ptr_Junction:		dc.l Junction
0000F67C 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F680 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F684 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F688 0000 0000                  ptr_Saws:		dc.l Saws
0000F68C 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F690 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F694 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F698 0000 0000                  ptr_Electro:		dc.l Electro
0000F69C 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F6A0 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F6A4 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F6A8 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F6AC 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F6B0 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F6B4 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F6B8 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F6BC 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F6C0 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F6C4 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F6C8 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F6CC 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F6D0 0000 BE3A                  ptr_RingFlash:		dc.l RingFlash
0000F6D4 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F6D8 0000 E8EA                  ptr_SSResult:		dc.l SSResult
0000F6DC 0000 EA90                  ptr_SSRChaos:		dc.l SSRChaos
0000F6E0 0000 5E2A                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F6E4 0000 5F42                  ptr_ContSonic:		dc.l ContSonic
0000F6E8 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F6EC 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F6F0 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F6F4 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F6F8 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F6FC 0000 63CC                  ptr_EndSonic:		dc.l EndSonic
0000F700 0000 6526                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F704 0000 6600                  ptr_EndSTH:		dc.l EndSTH
0000F708 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F70C 0000 6866                  ptr_EndEggman:		dc.l EndEggman
0000F710 0000 6946                  ptr_TryChaos:		dc.l TryChaos
0000F714                            
0000F714                            NullObject:
0000F714                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F714                            
0000F714 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F714 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F714 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F714 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F714 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F714 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F714 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F714 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F714 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F714 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F714 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F714 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F714 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F714 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F714 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F714 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F714 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F714 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F714 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F714 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F714 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F714 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F714 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F714 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F714 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F714 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F714 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F714 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F714 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F714 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F714 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F714 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F714 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F714 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F714 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F714 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F714 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F714 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F714 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F714 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F714 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F714 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F714 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F714 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F714 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F714 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F714 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F714 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F714 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F714 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F714 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F714 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F714 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F714 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F714 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F714 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F714 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F714 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F714 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F714 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F714 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F714 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F714 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F714 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F714 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F714 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F714 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F714 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F714 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F714 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F714 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F714 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F714 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F714 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F714 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F714 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F714 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F714 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F714 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F714 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F714 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F714 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F714 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F714 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F714 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F714 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F714 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F714 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F714 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F714 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F714 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F714 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F714 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F714 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F714 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F714 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F714 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F714 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F714 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F714 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F714 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F714 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F714 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F714 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F714 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F714 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F714 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F714 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F714 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F714 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F714 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F714 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F714 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F714 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F714 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F714 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F714 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F714 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F714 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F714 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F714 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F714 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F714 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F714 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F714 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F714 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F714 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F714 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F714 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F714 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F714 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F714 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F714 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F714 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F714 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F714 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F714 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F714 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F714 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F714 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F714 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F714                            
0000F714                            		include	"_incObj\sub ObjectFall.asm"
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            
0000F714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F714                            
0000F714                            
0000F714                            ObjectFall:
0000F714 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F71A 6700                       		beq.s	@donothing
0000F71C 3028 0010                  		move.w	obVelX(a0),d0
0000F720 48C0                       		ext.l	d0
0000F722 E188                       		lsl.l	#8,d0
0000F724 D1A8 0008                  		add.l	d0,obX(a0)
0000F728 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F72E 6F00                               ble.s   @skipline       ; if yes, branch
0000F730 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F736                                @skipline:		
0000F736 3028 0012                  		move.w	obVelY(a0),d0
0000F73A 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F740 48C0                       		ext.l	d0
0000F742 E188                       		lsl.l	#8,d0
0000F744 D1A8 000C                  		add.l	d0,obY(a0)
0000F748 4E75                       		rts	
0000F74A                            	
0000F74A                            	@donothing:
0000F74A 4E75                       		rts
0000F74C                            
0000F74C                            ; End of function ObjectFall
0000F74C                            ; End of function ObjectFall
0000F74C                            		include	"_incObj\sub SpeedToPos.asm"
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            ; Subroutine translating object	speed to update	object position
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            
0000F74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F74C                            
0000F74C                            
0000F74C                            SpeedToPos:
0000F74C 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F752 E188                       		lsl.l	#8,d0
0000F754 D1A8 0008                  		add.l	d0,obX(a0)
0000F758 E18A                       		lsl.l	#8,d2
0000F75A D5A8 000C                  		add.l	d2,obY(a0)
0000F75E 4E75                       		rts
0000F760                            ; End of function SpeedToPos
0000F760                            ; End of function SpeedToPos
0000F760                            		include	"_incObj\sub DisplaySprite.asm"
0000F760                            ; ---------------------------------------------------------------------------
0000F760                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F760                            ; ---------------------------------------------------------------------------
0000F760                            
0000F760                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F760                            
0000F760                            
0000F760                            DisplaySprite:
0000F760 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F764 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F768 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F76C 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F76E 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F770 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F772 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F774                            
0000F774                                DSpr_Full:
0000F774 4E75                               rts    
0000F776                            
0000F776                            ; End of function DisplaySprite
0000F776                            
0000F776                            
0000F776                            ; ---------------------------------------------------------------------------
0000F776                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F776                            ; ---------------------------------------------------------------------------
0000F776                            
0000F776                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F776                            
0000F776                            
0000F776                            DisplaySprite1:
0000F776 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F77A D4E9 0018                          adda.w  obpriority(a1),a2
0000F77E 0C52 007E                          cmpi.w    #$7E,(a2)
0000F782 6400                               bcc.s    DSpr1_Full
0000F784 5452                               addq.w    #2,(a2)
0000F786 D4D2                               adda.w    (a2),a2
0000F788 3489                               move.w    a1,(a2)
0000F78A                            
0000F78A                                DSpr1_Full:
0000F78A 4E75                               rts    
0000F78C                            
0000F78C                            ; End of function DisplaySprite1
0000F78C                            
0000F78C                            ; ---------------------------------------------------------------------------
0000F78C                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F78C                            ; and d0 is already (priority/2)&$380
0000F78C                            ; ---------------------------------------------------------------------------
0000F78C                            
0000F78C                            ; loc_16530:
0000F78C                            DisplaySprite2:
0000F78C 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F790 D2C0                           adda.w    d0,a1
0000F792 0C51 007E                      cmpi.w    #$7E,(a1)
0000F796 6400                           bhs.s    return_16542
0000F798 5451                           addq.w    #2,(a1)
0000F79A D2D1                           adda.w    (a1),a1
0000F79C 3288                           move.w    a0,(a1)
0000F79E                            
0000F79E                            return_16542:
0000F79E 4E75                           rts
0000F79E 4E75                           rts
0000F7A0                            		include	"_incObj\sub DeleteObject.asm"
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            ; Subroutine to	delete an object
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            
0000F7A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7A0                            
0000F7A0                            
0000F7A0                            DeleteObject:
0000F7A0 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F7A2                            
0000F7A2                            DeleteChild:				; child objects are already in (a1)
0000F7A2 7200                       		moveq	#0,d1
0000F7A4 700F                       		moveq	#$F,d0
0000F7A6                            
0000F7A6                            	DelObj_Loop:
0000F7A6 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F7A8 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F7AC 4E75                       		rts	
0000F7AE                            
0000F7AE                            ; End of function DeleteObject
0000F7AE                            ; End of function DeleteObject
0000F7AE                            
0000F7AE                            ; ===========================================================================
0000F7AE 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F7B2 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F7B6 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F7BA 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            
0000F7BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7BE                            
0000F7BE                            
0000F7BE                            BuildSprites:
0000F7BE 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F7C2 7A00                       		moveq	#0,d5
0000F7C4 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F7C8 7E07                       		moveq	#7,d7
0000F7CA                            
0000F7CA                            	@priorityLoop:
0000F7CA 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F7CC 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F7D0 7C02                       		moveq	#2,d6
0000F7D2                            
0000F7D2                            	@objectLoop:
0000F7D2 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F7D6 4A10                       		tst.b	(a0)		; if null, branch
0000F7D8 6700 0000                  		beq.w	@skipObject
0000F7DC 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F7E2                            
0000F7E2 1028 0001                  		move.b	obRender(a0),d0
0000F7E6 1800                       		move.b	d0,d4
0000F7E8 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F7EC 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F7EE 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F7F2                            	; check object bounds
0000F7F2 7000                       		moveq	#0,d0
0000F7F4 1028 0014                  		move.b	obActWid(a0),d0
0000F7F8 3628 0008                  		move.w	obX(a0),d3
0000F7FC 9651                       		sub.w	(a1),d3
0000F7FE 3203                       		move.w	d3,d1
0000F800 D240                       		add.w	d0,d1
0000F802 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F806 3203                       		move.w	d3,d1
0000F808 9240                       		sub.w	d0,d1
0000F80A 0C41 0140                  		cmpi.w	#320,d1
0000F80E 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F810 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F814                            
0000F814 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F818 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F81A 7000                       		moveq	#0,d0
0000F81C 1028 0016                  		move.b	obHeight(a0),d0
0000F820 3428 000C                  		move.w	obY(a0),d2
0000F824 9469 0004                  		sub.w	4(a1),d2
0000F828 3202                       		move.w	d2,d1
0000F82A D240                       		add.w	d0,d1
0000F82C 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F82E 3202                       		move.w	d2,d1
0000F830 9240                       		sub.w	d0,d1
0000F832 0C41 00E0                  		cmpi.w	#224,d1
0000F836 6C00                       		bge.s	@skipObject
0000F838 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F83C 6000                       		bra.s	@drawObject
0000F83E                            ; ===========================================================================
0000F83E                            
0000F83E                            	@screenCoords:
0000F83E 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F842 3628 0008                  		move.w	obX(a0),d3
0000F846 6000                       		bra.s	@drawObject
0000F848                            ; ===========================================================================
0000F848                            
0000F848                            	@assumeHeight:
0000F848 3428 000C                  		move.w	obY(a0),d2
0000F84C 9469 0004                  		sub.w	obMap(a1),d2
0000F850 0642 0080                  		addi.w	#$80,d2
0000F854 0C42 0060                  		cmpi.w	#$60,d2
0000F858 6500                       		blo.s	@skipObject
0000F85A 0C42 0180                  		cmpi.w	#$180,d2
0000F85E 6400                       		bhs.s	@skipObject
0000F860                            
0000F860                            	@drawObject:
0000F860 2268 0004                  		movea.l	obMap(a0),a1
0000F864 7200                       		moveq	#0,d1
0000F866 0804 0005                  		btst	#5,d4
0000F86A 6600                       		bne.s	@drawFrame
0000F86C 1228 001A                  		move.b	$1A(a0),d1
0000F870 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F872 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F876 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F878 1219                       		move.b	(a1)+,d1
0000F87A 5301                       		subq.b	#1,d1
0000F87C 6B00                       		bmi.s	@setVisible
0000F87E                            
0000F87E                            	@drawFrame:
0000F87E 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F882                            
0000F882                            	@setVisible:
0000F882 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F888                            
0000F888                            	@skipObject:
0000F888 5446                       		addq.w	#2,d6
0000F88A 5554                       		subq.w	#2,(a4)			; number of objects left
0000F88C 6600 FF44                  		bne.w	@objectLoop
0000F890                            
0000F890                            	@nextPriority:
0000F890 49EC 0080                  		lea	$80(a4),a4
0000F894 51CF FF34                  		dbf	d7,@priorityLoop
0000F898 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F89C 0C05 0050                  		cmpi.b	#$50,d5
0000F8A0 6700                       		beq.s	@spriteLimit
0000F8A2 24BC 0000 0000             		move.l	#0,(a2)
0000F8A8 4E75                       		rts	
0000F8AA                            ; ===========================================================================
0000F8AA                            
0000F8AA                            	@spriteLimit:
0000F8AA 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F8B0 4E75                       		rts	
0000F8B2                            ; End of function BuildSprites
0000F8B2                            
0000F8B2                            
0000F8B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8B2                            
0000F8B2                            
0000F8B2                            BuildSpr_Draw:
0000F8B2 3668 0002                  		movea.w	obGfx(a0),a3
0000F8B6 0804 0000                  		btst	#0,d4
0000F8BA 6600                       		bne.s	BuildSpr_FlipX
0000F8BC 0804 0001                  		btst	#1,d4
0000F8C0 6600 0000                  		bne.w	BuildSpr_FlipY
0000F8C4                            ; End of function BuildSpr_Draw
0000F8C4                            
0000F8C4                            
0000F8C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8C4                            
0000F8C4                            
0000F8C4                            BuildSpr_Normal:
0000F8C4 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8C8 6700                       		beq.s	@return
0000F8CA 1019                       		move.b	(a1)+,d0	; get y-offset
0000F8CC 4880                       		ext.w	d0
0000F8CE D042                       		add.w	d2,d0		; add y-position
0000F8D0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8D2 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000F8D4 5205                       		addq.b	#1,d5		; increase sprite counter
0000F8D6 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000F8D8 1019                       		move.b	(a1)+,d0	; get art tile
0000F8DA E148                       		lsl.w	#8,d0
0000F8DC 1019                       		move.b	(a1)+,d0
0000F8DE D04B                       		add.w	a3,d0		; add art tile offset
0000F8E0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8E2 1019                       		move.b	(a1)+,d0	; get x-offset
0000F8E4 4880                       		ext.w	d0
0000F8E6 D043                       		add.w	d3,d0		; add x-position
0000F8E8 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F8EC 6600                       		bne.s	@writeX
0000F8EE 5240                       		addq.w	#1,d0
0000F8F0                            
0000F8F0                            	@writeX:
0000F8F0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8F2 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000F8F6                            
0000F8F6                            	@return:
0000F8F6 4E75                       		rts	
0000F8F8                            ; End of function BuildSpr_Normal
0000F8F8                            
0000F8F8                            ; ===========================================================================
0000F8F8                            
0000F8F8                            BuildSpr_FlipX:
0000F8F8 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000F8FC 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000F900                            
0000F900                            	@loop:
0000F900 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F904 6700                       		beq.s	@return
0000F906 1019                       		move.b	(a1)+,d0	; y position
0000F908 4880                       		ext.w	d0
0000F90A D042                       		add.w	d2,d0
0000F90C 34C0                       		move.w	d0,(a2)+
0000F90E 1819                       		move.b	(a1)+,d4	; size
0000F910 14C4                       		move.b	d4,(a2)+	
0000F912 5205                       		addq.b	#1,d5		; link
0000F914 14C5                       		move.b	d5,(a2)+
0000F916 1019                       		move.b	(a1)+,d0	; art tile
0000F918 E148                       		lsl.w	#8,d0
0000F91A 1019                       		move.b	(a1)+,d0	
0000F91C D04B                       		add.w	a3,d0
0000F91E 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000F922 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F924 1019                       		move.b	(a1)+,d0	; get x-offset
0000F926 4880                       		ext.w	d0
0000F928 4440                       		neg.w	d0			; negate it
0000F92A D804                       		add.b	d4,d4		; calculate flipped position by size
0000F92C 0244 0018                  		andi.w	#$18,d4
0000F930 5044                       		addq.w	#8,d4
0000F932 9044                       		sub.w	d4,d0
0000F934 D043                       		add.w	d3,d0
0000F936 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F93A 6600                       		bne.s	@writeX
0000F93C 5240                       		addq.w	#1,d0
0000F93E                            
0000F93E                            	@writeX:
0000F93E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F940 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000F944                            
0000F944                            	@return:
0000F944 4E75                       		rts	
0000F946                            ; ===========================================================================
0000F946                            
0000F946                            BuildSpr_FlipY:
0000F946 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F94A 6700                       		beq.s	@return
0000F94C 1019                       		move.b	(a1)+,d0	; get y-offset
0000F94E 1811                       		move.b	(a1),d4		; get size
0000F950 4880                       		ext.w	d0
0000F952 4440                       		neg.w	d0		; negate y-offset
0000F954 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000F956 0244 0018                  		andi.w	#$18,d4
0000F95A 5044                       		addq.w	#8,d4
0000F95C 9044                       		sub.w	d4,d0
0000F95E D042                       		add.w	d2,d0	; add y-position
0000F960 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F962 14D9                       		move.b	(a1)+,(a2)+	; size
0000F964 5205                       		addq.b	#1,d5
0000F966 14C5                       		move.b	d5,(a2)+	; link
0000F968 1019                       		move.b	(a1)+,d0	; art tile
0000F96A E148                       		lsl.w	#8,d0
0000F96C 1019                       		move.b	(a1)+,d0
0000F96E D04B                       		add.w	a3,d0
0000F970 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000F974 34C0                       		move.w	d0,(a2)+
0000F976 1019                       		move.b	(a1)+,d0	; x-position
0000F978 4880                       		ext.w	d0
0000F97A D043                       		add.w	d3,d0
0000F97C 0240 01FF                  		andi.w	#$1FF,d0
0000F980 6600                       		bne.s	@writeX
0000F982 5240                       		addq.w	#1,d0
0000F984                            
0000F984                            	@writeX:
0000F984 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F986 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000F98A                            
0000F98A                            	@return:
0000F98A 4E75                       		rts	
0000F98C                            ; ===========================================================================
0000F98C                            
0000F98C                            BuildSpr_FlipXY:
0000F98C 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F990 6700                       		beq.s	@return
0000F992 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000F994 1811                       		move.b	(a1),d4
0000F996 4880                       		ext.w	d0
0000F998 4440                       		neg.w	d0
0000F99A E70C                       		lsl.b	#3,d4
0000F99C 0244 0018                  		andi.w	#$18,d4
0000F9A0 5044                       		addq.w	#8,d4
0000F9A2 9044                       		sub.w	d4,d0
0000F9A4 D042                       		add.w	d2,d0
0000F9A6 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9A8 1819                       		move.b	(a1)+,d4	; size
0000F9AA 14C4                       		move.b	d4,(a2)+	; link
0000F9AC 5205                       		addq.b	#1,d5
0000F9AE 14C5                       		move.b	d5,(a2)+	; art tile
0000F9B0 1019                       		move.b	(a1)+,d0
0000F9B2 E148                       		lsl.w	#8,d0
0000F9B4 1019                       		move.b	(a1)+,d0
0000F9B6 D04B                       		add.w	a3,d0
0000F9B8 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000F9BC 34C0                       		move.w	d0,(a2)+
0000F9BE 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000F9C0 4880                       		ext.w	d0
0000F9C2 4440                       		neg.w	d0
0000F9C4 D804                       		add.b	d4,d4
0000F9C6 0244 0018                  		andi.w	#$18,d4
0000F9CA 5044                       		addq.w	#8,d4
0000F9CC 9044                       		sub.w	d4,d0
0000F9CE D043                       		add.w	d3,d0
0000F9D0 0240 01FF                  		andi.w	#$1FF,d0
0000F9D4 6600                       		bne.s	@writeX
0000F9D6 5240                       		addq.w	#1,d0
0000F9D8                            
0000F9D8                            	@writeX:
0000F9D8 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9DA 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000F9DE                            
0000F9DE                            	@return:
0000F9DE 4E75                       		rts	
0000F9E0                            
0000F9E0                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F9E0                            ; ---------------------------------------------------------------------------
0000F9E0                            ; Subroutine to	check if an object is off screen
0000F9E0                            
0000F9E0                            ; output:
0000F9E0                            ;	d0 = flag set if object is off screen
0000F9E0                            ; ---------------------------------------------------------------------------
0000F9E0                            
0000F9E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9E0                            
0000F9E0                            
0000F9E0                            ChkObjectVisible:
0000F9E0 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F9E4 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F9E8 6B00                       		bmi.s	@offscreen
0000F9EA 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F9EE 6C00                       		bge.s	@offscreen	; if not, branch
0000F9F0                            
0000F9F0 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F9F4 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F9F8 6B00                       		bmi.s	@offscreen
0000F9FA 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F9FE 6C00                       		bge.s	@offscreen	; if not, branch
0000FA00                            
0000FA00 7000                       		moveq	#0,d0		; set flag to 0
0000FA02 4E75                       		rts	
0000FA04                            
0000FA04                            	@offscreen:
0000FA04 7001                       		moveq	#1,d0		; set flag to 1
0000FA06 4E75                       		rts	
0000FA08                            ; End of function ChkObjectVisible
0000FA08                            
0000FA08                            ; ---------------------------------------------------------------------------
0000FA08                            ; Subroutine to	check if an object is off screen
0000FA08                            ; More precise than above subroutine, taking width into account
0000FA08                            
0000FA08                            ; output:
0000FA08                            ;	d0 = flag set if object is off screen
0000FA08                            ; ---------------------------------------------------------------------------
0000FA08                            
0000FA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA08                            
0000FA08                            
0000FA08                            ChkPartiallyVisible:
0000FA08 7200                       		moveq	#0,d1
0000FA0A 1228 0014                  		move.b	obActWid(a0),d1
0000FA0E 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FA12 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FA16 D041                       		add.w	d1,d0		; add object width
0000FA18 6B00                       		bmi.s	@offscreen2
0000FA1A D241                       		add.w	d1,d1
0000FA1C 9041                       		sub.w	d1,d0
0000FA1E 0C40 0140                  		cmpi.w	#320,d0
0000FA22 6C00                       		bge.s	@offscreen2
0000FA24                            
0000FA24 3228 000C                  		move.w	obY(a0),d1
0000FA28 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FA2C 6B00                       		bmi.s	@offscreen2
0000FA2E 0C41 00E0                  		cmpi.w	#224,d1
0000FA32 6C00                       		bge.s	@offscreen2
0000FA34                            
0000FA34 7000                       		moveq	#0,d0
0000FA36 4E75                       		rts	
0000FA38                            
0000FA38                            	@offscreen2:
0000FA38 7001                       		moveq	#1,d0
0000FA3A 4E75                       		rts	
0000FA3C                            ; End of function ChkPartiallyVisible
0000FA3C                            ; End of function ChkPartiallyVisible
0000FA3C                            
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            ; Subroutine to	load a level's objects
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            
0000FA3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA3C                            
0000FA3C                            
0000FA3C                            ObjPosLoad:
0000FA3C 7000                       		moveq	#0,d0
0000FA3E 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FA42 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FA46 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FA4A                            ; End of function ObjPosLoad
0000FA4A                            
0000FA4A                            ; ===========================================================================
0000FA4A 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FA4C 0000                       		dc.w OPL_Next-OPL_Index
0000FA4E                            ; ===========================================================================
0000FA4E                            
0000FA4E                            OPL_Main:
0000FA4E 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FA52 3038 FE10                  		move.w	(v_zone).w,d0
0000FA56 ED08                       		lsl.b	#6,d0
0000FA58 E848                       		lsr.w	#4,d0
0000FA5A 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FA60 2248                       		movea.l	a0,a1
0000FA62 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FA66 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA6A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA6E D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FA72 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FA76 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FA7A 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA7E 34FC 0101                  		move.w	#$101,(a2)+
0000FA82 303C 005E                  		move.w	#$5E,d0
0000FA86                            
0000FA86                            OPL_ClrList:
0000FA86 429A                       		clr.l	(a2)+
0000FA88 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FA8C                            
0000FA8C 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA90 7400                       		moveq	#0,d2
0000FA92 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA96 0446 0080                  		subi.w	#$80,d6
0000FA9A 6400                       		bhs.s	loc_D93C
0000FA9C 7C00                       		moveq	#0,d6
0000FA9E                            
0000FA9E                            loc_D93C:
0000FA9E 0246 FF80                  		andi.w	#$FF80,d6
0000FAA2 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FAA6                            
0000FAA6                            loc_D944:
0000FAA6 BC50                       		cmp.w	(a0),d6
0000FAA8 6300                       		bls.s	loc_D956
0000FAAA 4A28 0004                  		tst.b	4(a0)
0000FAAE 6A00                       		bpl.s	loc_D952
0000FAB0 1412                       		move.b	(a2),d2
0000FAB2 5212                       		addq.b	#1,(a2)
0000FAB4                            
0000FAB4                            loc_D952:
0000FAB4 5C48                       		addq.w	#6,a0
0000FAB6 60EE                       		bra.s	loc_D944
0000FAB8                            ; ===========================================================================
0000FAB8                            
0000FAB8                            loc_D956:
0000FAB8 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FABC 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FAC0 0446 0080                  		subi.w	#$80,d6
0000FAC4 6500                       		blo.s	loc_D976
0000FAC6                            
0000FAC6                            loc_D964:
0000FAC6 BC50                       		cmp.w	(a0),d6
0000FAC8 6300                       		bls.s	loc_D976
0000FACA 4A28 0004                  		tst.b	4(a0)
0000FACE 6A00                       		bpl.s	loc_D972
0000FAD0 522A 0001                  		addq.b	#1,1(a2)
0000FAD4                            
0000FAD4                            loc_D972:
0000FAD4 5C48                       		addq.w	#6,a0
0000FAD6 60EE                       		bra.s	loc_D964
0000FAD8                            ; ===========================================================================
0000FAD8                            
0000FAD8                            loc_D976:
0000FAD8 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FADC 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FAE2                            
0000FAE2                            OPL_Next:
0000FAE2 45F8 FC00                  		lea	(v_objstate).w,a2
0000FAE6 7400                       		moveq	#0,d2
0000FAE8 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FAEC 0246 FF80                  		andi.w	#$FF80,d6
0000FAF0 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FAF4 6700 0000                  		beq.w	locret_DA3A
0000FAF8 6C00                       		bge.s	loc_D9F6
0000FAFA 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FAFE 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FB02 0446 0080                  		subi.w	#$80,d6
0000FB06 6500                       		blo.s	loc_D9D2
0000FB08                            
0000FB08                            loc_D9A6:
0000FB08 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FB0C 6C00                       		bge.s	loc_D9D2
0000FB0E 5D48                       		subq.w	#6,a0
0000FB10 4A28 0004                  		tst.b	4(a0)
0000FB14 6A00                       		bpl.s	loc_D9BC
0000FB16 532A 0001                  		subq.b	#1,1(a2)
0000FB1A 142A 0001                  		move.b	1(a2),d2
0000FB1E                            
0000FB1E                            loc_D9BC:
0000FB1E 6100 0000                  		bsr.w	loc_DA3C
0000FB22 6600                       		bne.s	loc_D9C6
0000FB24 5D48                       		subq.w	#6,a0
0000FB26 60E0                       		bra.s	loc_D9A6
0000FB28                            ; ===========================================================================
0000FB28                            
0000FB28                            loc_D9C6:
0000FB28 4A28 0004                  		tst.b	4(a0)
0000FB2C 6A00                       		bpl.s	loc_D9D0
0000FB2E 522A 0001                  		addq.b	#1,1(a2)
0000FB32                            
0000FB32                            loc_D9D0:
0000FB32 5C48                       		addq.w	#6,a0
0000FB34                            
0000FB34                            loc_D9D2:
0000FB34 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB38 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FB3C 0646 0300                  		addi.w	#$300,d6
0000FB40                            
0000FB40                            loc_D9DE:
0000FB40 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FB44 6E00                       		bgt.s	loc_D9F0
0000FB46 4A28 FFFE                  		tst.b	-2(a0)
0000FB4A 6A00                       		bpl.s	loc_D9EC
0000FB4C 5312                       		subq.b	#1,(a2)
0000FB4E                            
0000FB4E                            loc_D9EC:
0000FB4E 5D48                       		subq.w	#6,a0
0000FB50 60EE                       		bra.s	loc_D9DE
0000FB52                            ; ===========================================================================
0000FB52                            
0000FB52                            loc_D9F0:
0000FB52 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB56 4E75                       		rts	
0000FB58                            ; ===========================================================================
0000FB58                            
0000FB58                            loc_D9F6:
0000FB58 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FB5C 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FB60 0646 0280                  		addi.w	#$280,d6
0000FB64                            
0000FB64                            loc_DA02:
0000FB64 BC50                       		cmp.w	(a0),d6
0000FB66 6300                       		bls.s	loc_DA16
0000FB68 4A28 0004                  		tst.b	4(a0)
0000FB6C 6A00                       		bpl.s	loc_DA10
0000FB6E 1412                       		move.b	(a2),d2
0000FB70 5212                       		addq.b	#1,(a2)
0000FB72                            
0000FB72                            loc_DA10:
0000FB72 6100 0000                  		bsr.w	loc_DA3C
0000FB76 67EC                       		beq.s	loc_DA02
0000FB78                            
0000FB78                            loc_DA16:
0000FB78 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB7C 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FB80 0446 0300                  		subi.w	#$300,d6
0000FB84 6500                       		blo.s	loc_DA36
0000FB86                            
0000FB86                            loc_DA24:
0000FB86 BC50                       		cmp.w	(a0),d6
0000FB88 6300                       		bls.s	loc_DA36
0000FB8A 4A28 0004                  		tst.b	4(a0)
0000FB8E 6A00                       		bpl.s	loc_DA32
0000FB90 522A 0001                  		addq.b	#1,1(a2)
0000FB94                            
0000FB94                            loc_DA32:
0000FB94 5C48                       		addq.w	#6,a0
0000FB96 60EE                       		bra.s	loc_DA24
0000FB98                            ; ===========================================================================
0000FB98                            
0000FB98                            loc_DA36:
0000FB98 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB9C                            
0000FB9C                            locret_DA3A:
0000FB9C 4E75                       		rts	
0000FB9E                            ; ===========================================================================
0000FB9E                            
0000FB9E                            loc_DA3C:
0000FB9E 4A28 0004                  		tst.b	4(a0)
0000FBA2 6A00                       		bpl.s	OPL_MakeItem
0000FBA4 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FBAA 6700                       		beq.s	OPL_MakeItem
0000FBAC 5C48                       		addq.w	#6,a0
0000FBAE 7000                       		moveq	#0,d0
0000FBB0 4E75                       		rts	
0000FBB2                            ; ===========================================================================
0000FBB2                            
0000FBB2                            OPL_MakeItem:
0000FBB2 6100 0000                  		bsr.w	FindFreeObj
0000FBB6 6600                       		bne.s	locret_DA8A
0000FBB8 3358 0008                  		move.w	(a0)+,obX(a1)
0000FBBC 3018                       		move.w	(a0)+,d0
0000FBBE 3200                       		move.w	d0,d1
0000FBC0 0240 0FFF                  		andi.w	#$FFF,d0
0000FBC4 3340 000C                  		move.w	d0,obY(a1)
0000FBC8 E559                       		rol.w	#2,d1
0000FBCA 0201 0003                  		andi.b	#3,d1
0000FBCE 1341 0001                  		move.b	d1,obRender(a1)
0000FBD2 1341 0022                  		move.b	d1,obStatus(a1)
0000FBD6 1018                       		move.b	(a0)+,d0
0000FBD8 6A00                       		bpl.s	loc_DA80
0000FBDA 0200 007F                  		andi.b	#$7F,d0
0000FBDE 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FBE2                            
0000FBE2                            loc_DA80:
0000FBE2 1280                       		move.b	d0,0(a1)
0000FBE4 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FBE8 7000                       		moveq	#0,d0
0000FBEA                            
0000FBEA                            locret_DA8A:
0000FBEA 4E75                       		rts	
0000FBEC                            
0000FBEC                            		include	"_incObj\sub FindFreeObj.asm"
0000FBEC                            ; ---------------------------------------------------------------------------
0000FBEC                            ; Subroutine to find a free object space
0000FBEC                            
0000FBEC                            ; output:
0000FBEC                            ;	a1 = free position in object RAM
0000FBEC                            ; ---------------------------------------------------------------------------
0000FBEC                            
0000FBEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBEC                            
0000FBEC                            
0000FBEC                            FindFreeObj:
0000FBEC 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FBF0 303C 005F                  		move.w	#$5F,d0
0000FBF4                            
0000FBF4                            	FFree_Loop:
0000FBF4 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FBF6 6700                       		beq.s	FFree_Found	; if yes, branch
0000FBF8 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FBFC 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FC00                            
0000FC00                            	FFree_Found:
0000FC00 4E75                       		rts	
0000FC02                            
0000FC02                            ; End of function FindFreeObj
0000FC02                            
0000FC02                            
0000FC02                            ; ---------------------------------------------------------------------------
0000FC02                            ; Subroutine to find a free object space AFTER the current one
0000FC02                            
0000FC02                            ; output:
0000FC02                            ;	a1 = free position in object RAM
0000FC02                            ; ---------------------------------------------------------------------------
0000FC02                            
0000FC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC02                            
0000FC02                            
0000FC02                            FindNextFreeObj:
0000FC02 2248                       		movea.l	a0,a1
0000FC04 303C F000                  		move.w	#$F000,d0
0000FC08 9048                       		sub.w	a0,d0
0000FC0A EC48                       		lsr.w	#6,d0
0000FC0C 5340                       		subq.w	#1,d0
0000FC0E 6500                       		bcs.s	NFree_Found
0000FC10                            
0000FC10                            	NFree_Loop:
0000FC10 4A11                       		tst.b	(a1)
0000FC12 6700                       		beq.s	NFree_Found
0000FC14 43E9 0040                  		lea	$40(a1),a1
0000FC18 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FC1C                            
0000FC1C                            	NFree_Found:
0000FC1C 4E75                       		rts	
0000FC1E                            
0000FC1E                            ; End of function FindNextFreeObj
0000FC1E                            ; End of function FindNextFreeObj
0000FC1E                            		include	"_incObj\41 Springs.asm"
0000FC1E                            ; ---------------------------------------------------------------------------
0000FC1E                            ; Object 41 - springs
0000FC1E                            ; ---------------------------------------------------------------------------
0000FC1E                            
0000FC1E                            Springs:
0000FC1E 7000                       		moveq	#0,d0
0000FC20 1028 0024                  		move.b	obRoutine(a0),d0
0000FC24 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FC28 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FC2C 6100 FB32                  		bsr.w	DisplaySprite
0000FC4E 4E75                       		rts	
0000FC50                            ; ===========================================================================
0000FC50 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FC52 0000                       		dc.w Spring_Up-Spring_Index
0000FC54 0000                       		dc.w Spring_AniUp-Spring_Index
0000FC56 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FC58 0000                       		dc.w Spring_LR-Spring_Index
0000FC5A 0000                       		dc.w Spring_AniLR-Spring_Index
0000FC5C 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FC5E 0000                       		dc.w Spring_Dwn-Spring_Index
0000FC60 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FC62 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FC64                            
0000FC64 =00000030                  spring_pow:	equ $30			; power of current spring
0000FC64                            
0000FC64 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FC66 F600                       		dc.w -$A00		; power	of yellow spring
0000FC68                            ; ===========================================================================
0000FC68                            
0000FC68                            Spring_Main:	; Routine 0
0000FC68 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC6C 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FC74 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FC7A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FC80 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FC86 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FC8C 1028 0028                  		move.b	obSubtype(a0),d0
0000FC90 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FC94 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FC96                            
0000FC96 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FC9C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FCA2 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FCA8 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FCAE 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FCB4                            
0000FCB4                            	Spring_NotLR:
0000FCB4 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FCB8 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FCBA                            
0000FCBA 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FCC0 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FCC6                            
0000FCC6                            	Spring_NotDwn:
0000FCC6 0800 0001                  		btst	#1,d0
0000FCCA 6700                       		beq.s	loc_DB72
0000FCCC 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FCD2                            
0000FCD2                            loc_DB72:
0000FCD2 0240 000F                  		andi.w	#$F,d0
0000FCD6 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FCDC 4E75                       		rts	
0000FCDE                            ; ===========================================================================
0000FCDE                            
0000FCDE                            Spring_Up:	; Routine 2
0000FCDE 323C 001B                  		move.w	#$1B,d1
0000FCE2 343C 0008                  		move.w	#8,d2
0000FCE6 363C 0010                  		move.w	#$10,d3
0000FCEA 3828 0008                  		move.w	obX(a0),d4
0000FCEE 6100 0000                  		bsr.w	SolidObject
0000FCF2 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FCF6 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FCF8 4E75                       		rts	
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            Spring_BounceUp:
0000FCFA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCFE 5069 000C                  		addq.w	#8,obY(a1)
0000FD02 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FD08 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FD0E 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FD14 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FD1A 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FD20 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FD26 4228 0025                  		clr.b	obSolid(a0)
0000FD34                            
0000FD34                            Spring_AniUp:	; Routine 4
0000FD34 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD3A 6000 CB0C                  		bra.w	AnimateSprite
0000FD3E                            ; ===========================================================================
0000FD3E                            
0000FD3E                            Spring_ResetUp:	; Routine 6
0000FD3E 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FD44 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FD48 4E75                       		rts	
0000FD4A                            ; ===========================================================================
0000FD4A                            
0000FD4A                            Spring_LR:	; Routine 8
0000FD4A 323C 0013                  		move.w	#$13,d1
0000FD4E 343C 000E                  		move.w	#$E,d2
0000FD52 363C 000F                  		move.w	#$F,d3
0000FD56 3828 0008                  		move.w	obX(a0),d4
0000FD5A 6100 0000                  		bsr.w	SolidObject
0000FD5E 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD64 6600                       		bne.s	loc_DC0C
0000FD66 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FD6C                            
0000FD6C                            loc_DC0C:
0000FD6C 0828 0005 0022             		btst	#5,obStatus(a0)
0000FD72 6600                       		bne.s	Spring_BounceLR
0000FD74 4E75                       		rts	
0000FD76                            ; ===========================================================================
0000FD76                            
0000FD76                            Spring_BounceLR:
0000FD76 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD7A 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FD80 5069 0008                  		addq.w	#8,obX(a1)
0000FD84 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FD8A 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FD8C 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FD92 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FD96                            
0000FD96                            	Spring_Flipped:
0000FD96 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FD9C 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FDA2 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FDA8 0829 0002 0022             		btst	#2,obStatus(a1)
0000FDAE 6600                       		bne.s	loc_DC56
0000FDB0 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FDB6                            
0000FDB6                            loc_DC56:
0000FDB6 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FDBC 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FDCC                            
0000FDCC                            Spring_AniLR:	; Routine $A
0000FDCC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FDD2 6000 CA74                  		bra.w	AnimateSprite
0000FDD6                            ; ===========================================================================
0000FDD6                            
0000FDD6                            Spring_ResetLR:	; Routine $C
0000FDD6 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FDDC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FDE0 4E75                       		rts	
0000FDE2                            ; ===========================================================================
0000FDE2                            
0000FDE2                            Spring_Dwn:	; Routine $E
0000FDE2 323C 001B                  		move.w	#$1B,d1
0000FDE6 343C 0008                  		move.w	#8,d2
0000FDEA 363C 0010                  		move.w	#$10,d3
0000FDEE 3828 0008                  		move.w	obX(a0),d4
0000FDF2 6100 0000                  		bsr.w	SolidObject
0000FDF6 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FDFC 6600                       		bne.s	loc_DCA4
0000FDFE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FE04                            
0000FE04                            loc_DCA4:
0000FE04 4A28 0025                  		tst.b	obSolid(a0)
0000FE08 6600                       		bne.s	locret_DCAE
0000FE0A 4A44                       		tst.w	d4
0000FE0C 6B00                       		bmi.s	Spring_BounceDwn
0000FE0E                            
0000FE0E                            locret_DCAE:
0000FE0E 4E75                       		rts	
0000FE10                            ; ===========================================================================
0000FE10                            
0000FE10                            Spring_BounceDwn:
0000FE10 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE14 5169 000C                  		subq.w	#8,obY(a1)
0000FE18 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FE1E 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FE22 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FE28 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FE2E 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE34 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE3A 4228 0025                  		clr.b	obSolid(a0)
0000FE48                            
0000FE48                            Spring_AniDwn:	; Routine $10
0000FE48 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FE4E 6000 C9F8                  		bra.w	AnimateSprite
0000FE52                            ; ===========================================================================
0000FE52                            
0000FE52                            Spring_ResetDwn:
0000FE52                            		; Routine $12
0000FE52 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE58 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FE5C 4E75                       		rts	
0000FE5C 4E75                       		rts	
0000FE5E                            		include	"_anim\Springs.asm"
0000FE5E                            ; ---------------------------------------------------------------------------
0000FE5E                            ; Animation script - springs
0000FE5E                            ; ---------------------------------------------------------------------------
0000FE5E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FE60 0000                       		dc.w byte_DD0E-Ani_Spring
0000FE62 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FE6E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FE7A                            		even
0000FE7A                            		even
0000FE7A                            Map_Spring:	include	"_maps\Springs.asm"
0000FE7A                            ; ---------------------------------------------------------------------------
0000FE7A                            ; Sprite mappings - springs
0000FE7A                            ; ---------------------------------------------------------------------------
0000FE7A                            Map_Spring_internal:
0000FE7A 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FE7C 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FE7E 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FE80 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FE82 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FE84 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FE86 02                         M_Spg_Up:	dc.b 2			; facing up
0000FE87 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FE8C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FE91 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FE92 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FE97 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FE98 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FE9D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FEA2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FEA7 01                         M_Spg_Left:	dc.b 1			; facing left
0000FEA8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FEAD 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FEAE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FEB3 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FEB4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FEB9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FEBE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FEC3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FEC8                            		even
0000FEC8                            		even
0000FEC8                            
0000FEC8                            		include	"_incObj\42 Newtron.asm"
0000FEC8                            ; ---------------------------------------------------------------------------
0000FEC8                            ; Object 42 - Newtron enemy (GHZ)
0000FEC8                            ; ---------------------------------------------------------------------------
0000FEC8                            
0000FEC8                            Newtron:
0000FEC8 7000                       		moveq	#0,d0
0000FECA 1028 0024                  		move.b	obRoutine(a0),d0
0000FECE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FED2 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FED6                            ; ===========================================================================
0000FED6 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FED8 0000                       		dc.w Newt_Action-Newt_Index
0000FEDA 0000                       		dc.w Newt_Delete-Newt_Index
0000FEDC                            ; ===========================================================================
0000FEDC                            
0000FEDC                            Newt_Main:	; Routine 0
0000FEDC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FEE0 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FEE8 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FEEE 117C 0004 0001             		move.b	#4,obRender(a0)
0000FEF4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEFA 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FF00 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FF06 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FF0C                            
0000FF0C                            Newt_Action:	; Routine 2
0000FF0C 7000                       		moveq	#0,d0
0000FF0E 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FF12 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FF16 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FF1A 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FF20 6100 C926                  		bsr.w	AnimateSprite
0000FF24 6000 0000                  		bra.w	RememberState
0000FF28                            ; ===========================================================================
0000FF28 0000                       @index:		dc.w @chkdistance-@index
0000FF2A 0000                       		dc.w @type00-@index
0000FF2C 0000                       		dc.w @matchfloor-@index
0000FF2E 0000                       		dc.w @speed-@index
0000FF30 0000                       		dc.w @type01-@index
0000FF32                            ; ===========================================================================
0000FF32                            
0000FF32                            @chkdistance:
0000FF32 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF38 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF3C 9068 0008                  		sub.w	obX(a0),d0
0000FF40 6400                       		bcc.s	@sonicisright
0000FF42 4440                       		neg.w	d0
0000FF44 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF4A                            
0000FF4A                            	@sonicisright:
0000FF4A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FF4E 6400                       		bcc.s	@outofrange	; if not, branch
0000FF50 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FF54 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FF5A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FF5E 6700                       		beq.s	@istype00	; if type is 00, branch
0000FF60                            
0000FF60 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FF66 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FF6C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FF72                            
0000FF72                            	@outofrange:
0000FF72                            	@istype00:
0000FF72 4E75                       		rts	
0000FF74                            ; ===========================================================================
0000FF74                            
0000FF74                            @type00:
0000FF74 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FF7A 6400                       		bcc.s	@fall		; is yes, branch
0000FF7C 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF82 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF86 9068 0008                  		sub.w	obX(a0),d0
0000FF8A 6400                       		bcc.s	@sonicisright2
0000FF8C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF92                            
0000FF92                            	@sonicisright2:
0000FF92 4E75                       		rts	
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            	@fall:
0000FF94 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FF9A 6600                       		bne.s	@loc_DE42
0000FF9C 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FFA2                            
0000FFA2                            	@loc_DE42:
0000FFA2 6100 F770                  		bsr.w	ObjectFall
0000FFA6 6100 0000                  		bsr.w	ObjFloorDist
0000FFAA 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FFAC 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FFAE                            
0000FFAE D368 000C                  		add.w	d1,obY(a0)
0000FFB2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FFB8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FFBC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FFC2 0828 0005 0002             		btst	#5,obGfx(a0)
0000FFC8 6700                       		beq.s	@pppppppp
0000FFCA 5228 001C                  		addq.b	#1,obAnim(a0)
0000FFCE                            
0000FFCE                            	@pppppppp:
0000FFCE 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FFD4 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FFDA 0828 0000 0022             		btst	#0,obStatus(a0)
0000FFE0 6600                       		bne.s	@keepfalling
0000FFE2 4468 0010                  		neg.w	obVelX(a0)
0000FFE6                            
0000FFE6                            	@keepfalling:
0000FFE6 4E75                       		rts	
0000FFE8                            ; ===========================================================================
0000FFE8                            
0000FFE8                            @matchfloor:
0000FFE8 6100 F762                  		bsr.w	SpeedToPos
0000FFEC 6100 0000                  		bsr.w	ObjFloorDist
0000FFF0 0C41 FFF8                  		cmpi.w	#-8,d1
0000FFF4 6D00                       		blt.s	@nextroutine
0000FFF6 0C41 000C                  		cmpi.w	#$C,d1
0000FFFA 6C00                       		bge.s	@nextroutine
0000FFFC D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
00010000 4E75                       		rts	
00010002                            ; ===========================================================================
00010002                            
00010002                            	@nextroutine:
00010002 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010006 4E75                       		rts	
00010008                            ; ===========================================================================
00010008                            
00010008                            @speed:
00010008 6100 F742                  		bsr.w	SpeedToPos
0001000C 4E75                       		rts	
0001000E                            ; ===========================================================================
0001000E                            
0001000E                            @type01:
0001000E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010014 6600                       		bne.s	@firemissile
00010016 117C 000C 0020             		move.b	#$C,obColType(a0)
0001001C                            
0001001C                            	@firemissile:
0001001C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010022 6600                       		bne.s	@fail
00010024 4A28 0032                  		tst.b	$32(a0)
00010028 6600                       		bne.s	@fail
0001002A 117C 0001 0032             		move.b	#1,$32(a0)
00010030 6100 FBBA                  		bsr.w	FindFreeObj
00010034 6600                       		bne.s	@fail
00010036 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0001003A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010040 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010046 5169 000C                  		subq.w	#8,obY(a1)
0001004A 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010050 303C 0014                  		move.w	#$14,d0
00010054 0828 0000 0022             		btst	#0,obStatus(a0)
0001005A 6600                       		bne.s	@noflip
0001005C 4440                       		neg.w	d0
0001005E 4469 0010                  		neg.w	obVelX(a1)
00010062                            
00010062                            	@noflip:
00010062 D169 0008                  		add.w	d0,obX(a1)
00010066 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001006C 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010072                            
00010072                            	@fail:
00010072 4E75                       		rts	
00010074                            ; ===========================================================================
00010074                            
00010074                            Newt_Delete:	; Routine 4
00010074 6000 F72A                  		bra.w	DeleteObject
00010074 6000 F72A                  		bra.w	DeleteObject
00010078                            		include	"_anim\Newtron.asm"
00010078                            ; ---------------------------------------------------------------------------
00010078                            ; Animation script - Newtron enemy
00010078                            ; ---------------------------------------------------------------------------
00010078 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0001007A 0000                       		dc.w A_Newt_Drop-Ani_Newt
0001007C 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0001007E 0000                       		dc.w A_Newt_Fly2-Ani_Newt
00010080 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010082 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010086 00                         		even
00010086 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0001008E 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010092 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
00010096 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000100A0 00                         		even
000100A0 00                         		even
000100A0                            Map_Newt:	include	"_maps\Newtron.asm"
000100A0                            ; ---------------------------------------------------------------------------
000100A0                            ; Sprite mappings - Newtron enemy (GHZ)
000100A0                            ; ---------------------------------------------------------------------------
000100A0                            Map_Newt_internal:
000100A0 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000100A2 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000100A4 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000100A6 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000100A8 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000100AA 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000100AC 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000100AE 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000100B0 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000100B2 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000100B4 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000100B6 03                         M_Newt_Trans:	dc.b 3
000100B7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000100BC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000100C1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000100C6 03                         M_Newt_Norm:	dc.b 3
000100C7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000100CC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000100D1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000100D6 03                         M_Newt_Fires:	dc.b 3
000100D7 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000100DC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000100E1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000100E6 04                         M_Newt_Drop1:	dc.b 4
000100E7 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
000100EC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000100F1 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
000100F6 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
000100FB 03                         M_Newt_Drop2:	dc.b 3
000100FC F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010101 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010106 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001010B 02                         M_Newt_Drop3:	dc.b 2
0001010C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010111 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010116 03                         M_Newt_Fly1a:	dc.b 3
00010117 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001011C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010121 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010126 03                         M_Newt_Fly1b:	dc.b 3
00010127 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001012C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010131 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010136 03                         M_Newt_Fly2a:	dc.b 3
00010137 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001013C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010141 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010146 03                         M_Newt_Fly2b:	dc.b 3
00010147 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001014C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010151 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010156 00                         M_Newt_Blank:	dc.b 0
00010158 00                         		even
00010158 00                         		even
00010158                            		include	"_incObj\43 Roller.asm"
00010158                            ; ---------------------------------------------------------------------------
00010158                            ; Object 43 - Roller enemy (SYZ)
00010158                            ; ---------------------------------------------------------------------------
00010158                            
00010158                            Roller:
00010158 7000                       		moveq	#0,d0
0001015A 1028 0024                  		move.b	obRoutine(a0),d0
0001015E 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010162 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010166                            ; ===========================================================================
00010166 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010168 0000                       		dc.w Roll_Action-Roll_Index
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            Roll_Main:	; Routine 0
0001016A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00010170 117C 0008 0017             		move.b	#8,obWidth(a0)
00010176 6100 F59C                  		bsr.w	ObjectFall
0001017A 6100 0000                  		bsr.w	ObjFloorDist
0001017E 4A41                       		tst.w	d1
00010180 6A00                       		bpl.s	locret_E052
00010182 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010186 317C 0000 0012             		move.w	#0,obVelY(a0)
0001018C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010190 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
00010198 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0001019E 117C 0004 0001             		move.b	#4,obRender(a0)
000101A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000101AA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000101B0                            
000101B0                            	locret_E052:
000101B0 4E75                       		rts	
000101B2                            ; ===========================================================================
000101B2                            
000101B2                            Roll_Action:	; Routine 2
000101B2 7000                       		moveq	#0,d0
000101B4 1028 0025                  		move.b	ob2ndRout(a0),d0
000101B8 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000101BC 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000101C0 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000101C6 6100 C680                  		bsr.w	AnimateSprite
000101CA 3028 0008                  		move.w	obX(a0),d0
000101CE 0240 FF80                  		andi.w	#$FF80,d0
000101D2 3238 F700                  		move.w	(v_screenposx).w,d1
000101D6 0441 0080                  		subi.w	#$80,d1
000101DA 0241 FF80                  		andi.w	#$FF80,d1
000101DE 9041                       		sub.w	d1,d0
000101E0 0C40 0280                  		cmpi.w	#$280,d0
000101E4 6E00 0000                  		bgt.w	Roll_ChkGone
000101E8 6000 F576                  		bra.w	DisplaySprite
000101EC                            ; ===========================================================================
000101EC                            
000101EC                            Roll_ChkGone:
000101EC 45F8 FC00                  		lea	(v_objstate).w,a2
000101F0 7000                       		moveq	#0,d0
000101F2 1028 0023                  		move.b	obRespawnNo(a0),d0
000101F6 6700                       		beq.s	Roll_Delete
000101F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101FE                            
000101FE                            Roll_Delete:
000101FE 6000 F5A0                  		bra.w	DeleteObject
00010202                            ; ===========================================================================
00010202 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010204 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010206 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010208 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001020A                            ; ===========================================================================
0001020A                            
0001020A                            Roll_RollChk:
0001020A 3038 D008                  		move.w	(v_player+obX).w,d0
0001020E 0440 0100                  		subi.w	#$100,d0
00010212 6500                       		bcs.s	loc_E0D2
00010214 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010218 6500                       		bcs.s	loc_E0D2
0001021A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001021E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010224 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001022A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010230                            
00010230                            loc_E0D2:
00010230 588F                       		addq.l	#4,sp
00010232 4E75                       		rts	
00010234                            ; ===========================================================================
00010234                            
00010234                            Roll_RollNoChk:
00010234 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001023A 6700                       		beq.s	loc_E0F8
0001023C 5368 0030                  		subq.w	#1,$30(a0)
00010240 6A00                       		bpl.s	locret_E0F6
00010242 117C 0001 001C             		move.b	#1,obAnim(a0)
00010248 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001024E 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010254                            
00010254                            locret_E0F6:
00010254 4E75                       		rts	
00010256                            ; ===========================================================================
00010256                            
00010256                            loc_E0F8:
00010256 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001025A 4E75                       		rts	
0001025C                            ; ===========================================================================
0001025C                            
0001025C                            Roll_ChkJump:
0001025C 6100 0000                  		bsr.w	Roll_Stop
00010260 6100 F4EA                  		bsr.w	SpeedToPos
00010264 6100 0000                  		bsr.w	ObjFloorDist
00010268 0C41 FFF8                  		cmpi.w	#-8,d1
0001026C 6D00                       		blt.s	Roll_Jump
0001026E 0C41 000C                  		cmpi.w	#$C,d1
00010272 6C00                       		bge.s	Roll_Jump
00010274 D368 000C                  		add.w	d1,obY(a0)
00010278 4E75                       		rts	
0001027A                            ; ===========================================================================
0001027A                            
0001027A                            Roll_Jump:
0001027A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001027E 08E8 0000 0032             		bset	#0,$32(a0)
00010284 6700                       		beq.s	locret_E12E
00010286 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
0001028C                            
0001028C                            locret_E12E:
0001028C 4E75                       		rts	
0001028E                            ; ===========================================================================
0001028E                            
0001028E                            Roll_MatchFloor:
0001028E 6100 F484                  		bsr.w	ObjectFall
00010292 4A68 0012                  		tst.w	obVelY(a0)
00010296 6B00                       		bmi.s	locret_E150
00010298 6100 0000                  		bsr.w	ObjFloorDist
0001029C 4A41                       		tst.w	d1
0001029E 6A00                       		bpl.s	locret_E150
000102A0 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000102A4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000102A8 317C 0000 0012             		move.w	#0,obVelY(a0)
000102AE                            
000102AE                            locret_E150:
000102AE 4E75                       		rts	
000102B0                            
000102B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102B0                            
000102B0                            
000102B0                            Roll_Stop:
000102B0 4A28 0032                  		tst.b	$32(a0)
000102B4 6B00                       		bmi.s	locret_E188
000102B6 3038 D008                  		move.w	(v_player+obX).w,d0
000102BA 0440 0030                  		subi.w	#$30,d0
000102BE 9068 0008                  		sub.w	obX(a0),d0
000102C2 6400                       		bcc.s	locret_E188
000102C4 117C 0000 001C             		move.b	#0,obAnim(a0)
000102CA 117C 000E 0020             		move.b	#$E,obColType(a0)
000102D0 4268 0010                  		clr.w	obVelX(a0)
000102D4 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000102DA 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000102E0 08E8 0007 0032             		bset	#7,$32(a0)
000102E6                            
000102E6                            locret_E188:
000102E6 4E75                       		rts	
000102E8                            ; End of function Roll_Stop
000102E8                            ; End of function Roll_Stop
000102E8                            		include	"_anim\Roller.asm"
000102E8                            ; ---------------------------------------------------------------------------
000102E8                            ; Animation script - Roller enemy
000102E8                            ; ---------------------------------------------------------------------------
000102E8 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000102EA 0000                       		dc.w A_Roll_Fold-Ani_Roll
000102EC 0000                       		dc.w A_Roll_Roll-Ani_Roll
000102EE 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000102F4 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000102FA 00                         		even
000102FA 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010300 00                         		even
00010300 00                         		even
00010300                            Map_Roll:	include	"_maps\Roller.asm"
00010300                            ; --------------------------------------------------------------------------------
00010300                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010300                            ; --------------------------------------------------------------------------------
00010300                            
00010300                            SME_q3BmU:	
00010300 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010304 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010308 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001030A 02                         SME_q3BmU_A:	dc.b 2	
0001030B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010310 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010315 02                         SME_q3BmU_15:	dc.b 2	
00010316 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001031B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010320 01                         SME_q3BmU_20:	dc.b 1	
00010321 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010326 01                         SME_q3BmU_26:	dc.b 1	
00010327 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
0001032C 01                         SME_q3BmU_2C:	dc.b 1	
0001032D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010332                            		even
00010332                            		even
00010332                            
00010332                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010332                            ; ---------------------------------------------------------------------------
00010332                            ; Object 44 - edge walls (GHZ)
00010332                            ; ---------------------------------------------------------------------------
00010332                            
00010332                            EdgeWalls:
00010332 7000                       		moveq	#0,d0
00010334 1028 0024                  		move.b	obRoutine(a0),d0
00010338 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
0001033C 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010340                            ; ===========================================================================
00010340 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010342 0000                       		dc.w Edge_Solid-Edge_Index
00010344 0000                       		dc.w Edge_Display-Edge_Index
00010346                            ; ===========================================================================
00010346                            
00010346                            Edge_Main:	; Routine 0
00010346 5428 0024                  		addq.b	#2,obRoutine(a0)
0001034A 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010352 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010358 0028 0004 0001             		ori.b	#4,obRender(a0)
0001035E 117C 0008 0014             		move.b	#8,obActWid(a0)
00010364 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001036A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010370 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010376 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010378 5428 0024                  		addq.b	#2,obRoutine(a0)
0001037C 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0001037E                            ; ===========================================================================
0001037E                            
0001037E                            Edge_Solid:	; Routine 2
0001037E 323C 0013                  		move.w	#$13,d1
00010382 343C 0028                  		move.w	#$28,d2
00010386 6100 A26E                  		bsr.w	Obj44_SolidWall
0001038A                            
0001038A                            Edge_Display:	; Routine 4
0001038A 6100 F3D4                  		bsr.w	DisplaySprite
000103AC 4E75                       		rts	
000103AC 4E75                       		rts	
000103AE                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000103AE                            ; ---------------------------------------------------------------------------
000103AE                            ; Sprite mappings - walls (GHZ)
000103AE                            ; ---------------------------------------------------------------------------
000103AE                            Map_Edge_internal:
000103AE 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000103B0 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000103B2 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000103B4 04                         M_Edge_Shadow:	dc.b 4
000103B5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000103BA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000103BF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000103C4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000103C9 04                         M_Edge_Light:	dc.b 4
000103CA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000103CF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000103D4 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000103D9 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000103DE 04                         M_Edge_Dark:	dc.b 4
000103DF E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000103E4 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000103E9 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000103EE 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000103F4 00                         		even
000103F4 00                         		even
000103F4                            
000103F4                            		include	"_incObj\13 Lava Ball Maker.asm"
000103F4                            ; ---------------------------------------------------------------------------
000103F4                            ; Object 13 - lava ball	maker (MZ, SLZ)
000103F4                            ; ---------------------------------------------------------------------------
000103F4                            
000103F4                            LavaMaker:
000103F4 7000                       		moveq	#0,d0
000103F6 1028 0024                  		move.b	obRoutine(a0),d0
000103FA 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000103FE 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010402 6000 0000                  		bra.w	LBall_ChkDel
00010406                            ; ===========================================================================
00010406 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010408 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001040A                            ; ---------------------------------------------------------------------------
0001040A                            ;
0001040A                            ; Lava ball production rates
0001040A                            ;
0001040A 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010410                            ; ===========================================================================
00010410                            
00010410                            LavaM_Main:	; Routine 0
00010410 5428 0024                  		addq.b	#2,obRoutine(a0)
00010414 1028 0028                  		move.b	obSubtype(a0),d0
00010418 E848                       		lsr.w	#4,d0
0001041A 0240 000F                  		andi.w	#$F,d0
0001041E 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010424 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001042A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010430                            
00010430                            LavaM_MakeLava:	; Routine 2
00010430 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010434 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010436 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
0001043C 6100 F5A2                  		bsr.w	ChkObjectVisible
00010440 6600                       		bne.s	LavaM_Wait
00010442 6100 F7A8                  		bsr.w	FindFreeObj
00010446 6600                       		bne.s	LavaM_Wait
00010448 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001044C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010452 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010458 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001045E                            
0001045E                            	LavaM_Wait:
0001045E 4E75                       		rts	
0001045E 4E75                       		rts	
00010460                            		include	"_incObj\14 Lava Ball.asm"
00010460                            ; ---------------------------------------------------------------------------
00010460                            ; Object 14 - lava balls (MZ, SLZ)
00010460                            ; ---------------------------------------------------------------------------
00010460                            
00010460                            LavaBall:
00010460 7000                       		moveq	#0,d0
00010462 1028 0024                  		move.b	obRoutine(a0),d0
00010466 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001046A 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001046E 6000 F2F0                  		bra.w	DisplaySprite
00010472                            ; ===========================================================================
00010472 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010474 0000                       		dc.w LBall_Action-LBall_Index
00010476 0000                       		dc.w LBall_Delete-LBall_Index
00010478                            
00010478 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010482 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            LBall_Main:	; Routine 0
0001048A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001048E 117C 0008 0016             		move.b	#8,obHeight(a0)
00010494 117C 0008 0017             		move.b	#8,obWidth(a0)
0001049A 217C 0000 D49A 0004        		move.l	#Map_Fire,obMap(a0)
000104A2 317C 0345 0002             		move.w	#$345,obGfx(a0)
000104A8 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000104AE 6600                       		bne.s	@notSLZ
000104B0 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000104B6                            
000104B6                            	@notSLZ:
000104B6 117C 0004 0001             		move.b	#4,obRender(a0)
000104BC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000104C2 117C 008B 0020             		move.b	#$8B,obColType(a0)
000104C8 3168 000C 0030             		move.w	obY(a0),$30(a0)
000104CE 4A28 0029                  		tst.b	$29(a0)
000104D2 6700                       		beq.s	@speed
000104D4 5428 0018                  		addq.b	#2,obPriority(a0)
000104D8                            
000104D8                            	@speed:
000104D8 7000                       		moveq	#0,d0
000104DA 1028 0028                  		move.b	obSubtype(a0),d0
000104DE D040                       		add.w	d0,d0
000104E0 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000104E6 117C 0008 0014             		move.b	#8,obActWid(a0)
000104EC 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000104F2 6500                       		bcs.s	@sound		; if yes, branch
000104F4                            
000104F4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000104FA 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010500 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010506 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0001050C                            
0001050C                            	@sound:
00010516                            
00010516                            LBall_Action:	; Routine 2
00010516 7000                       		moveq	#0,d0
00010518 1028 0028                  		move.b	obSubtype(a0),d0
0001051C D040                       		add.w	d0,d0
0001051E 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010522 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010526 6100 F224                  		bsr.w	SpeedToPos
0001052A 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010530 6100 C316                  		bsr.w	AnimateSprite
00010534                            
00010534                            LBall_ChkDel:
00010552 4E75                       		rts	
00010554                            ; ===========================================================================
00010554 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010558 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001055C 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010560 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010564 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010566                            ; ===========================================================================
00010566                            ; lavaball types 00-03 fly up and fall back down
00010566                            
00010566                            LBall_Type00:
00010566 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001056C 3028 0030                  		move.w	$30(a0),d0
00010570 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010574 6400                       		bcc.s	loc_E41E	; if not, branch
00010576 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
0001057A                            
0001057A                            loc_E41E:
0001057A 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010580 4A68 0012                  		tst.w	obVelY(a0)
00010584 6A00                       		bpl.s	locret_E430
00010586 08E8 0001 0022             		bset	#1,obStatus(a0)
0001058C                            
0001058C                            locret_E430:
0001058C 4E75                       		rts	
0001058E                            ; ===========================================================================
0001058E                            ; lavaball type	04 flies up until it hits the ceiling
0001058E                            
0001058E                            LBall_Type04:
0001058E 08E8 0001 0022             		bset	#1,obStatus(a0)
00010594 6100 0000                  		bsr.w	ObjHitCeiling
00010598 4A41                       		tst.w	d1
0001059A 6A00                       		bpl.s	locret_E452
0001059C 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105A2 117C 0001 001C             		move.b	#1,obAnim(a0)
000105A8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000105AE                            
000105AE                            locret_E452:
000105AE 4E75                       		rts	
000105B0                            ; ===========================================================================
000105B0                            ; lavaball type	05 falls down until it hits the	floor
000105B0                            
000105B0                            LBall_Type05:
000105B0 08A8 0001 0022             		bclr	#1,obStatus(a0)
000105B6 6100 0000                  		bsr.w	ObjFloorDist
000105BA 4A41                       		tst.w	d1
000105BC 6A00                       		bpl.s	locret_E474
000105BE 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105C4 117C 0001 001C             		move.b	#1,obAnim(a0)
000105CA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000105D0                            
000105D0                            locret_E474:
000105D0 4E75                       		rts	
000105D2                            ; ===========================================================================
000105D2                            ; lavaball types 06-07 move sideways
000105D2                            
000105D2                            LBall_Type06:
000105D2 08E8 0000 0022             		bset	#0,obStatus(a0)
000105D8 76F8                       		moveq	#-8,d3
000105DA 6100 0000                  		bsr.w	ObjHitWallLeft
000105DE 4A41                       		tst.w	d1
000105E0 6A00                       		bpl.s	locret_E498
000105E2 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105E8 117C 0003 001C             		move.b	#3,obAnim(a0)
000105EE 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105F4                            
000105F4                            locret_E498:
000105F4 4E75                       		rts	
000105F6                            ; ===========================================================================
000105F6                            
000105F6                            LBall_Type07:
000105F6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000105FC 7608                       		moveq	#8,d3
000105FE 6100 0000                  		bsr.w	ObjHitWallRight
00010602 4A41                       		tst.w	d1
00010604 6A00                       		bpl.s	locret_E4BC
00010606 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001060C 117C 0003 001C             		move.b	#3,obAnim(a0)
00010612 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010618                            
00010618                            locret_E4BC:
00010618 4E75                       		rts	
0001061A                            ; ===========================================================================
0001061A                            
0001061A                            LBall_Type08:
0001061A 4E75                       		rts	
0001061C                            ; ===========================================================================
0001061C                            
0001061C                            LBall_Delete:
0001061C 6000 F182                  		bra.w	DeleteObject
0001061C 6000 F182                  		bra.w	DeleteObject
00010620                            		include	"_anim\Fireballs.asm"
00010620                            ; ---------------------------------------------------------------------------
00010620                            ; Animation script - lava balls
00010620                            ; ---------------------------------------------------------------------------
00010620 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010622 0000                       		dc.w @vertcollide-Ani_Fire
00010624 0000                       		dc.w @horizontal-Ani_Fire
00010626 0000                       		dc.w @horicollide-Ani_Fire
00010628 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001062E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010632 00                         		even
00010632 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010638 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001063C 00                         		even
0001063C 00                         		even
0001063C                            
0001063C                            		include	"_incObj\6D Flamethrower.asm"
0001063C                            ; ---------------------------------------------------------------------------
0001063C                            ; Object 6D - flame thrower (SBZ)
0001063C                            ; ---------------------------------------------------------------------------
0001063C                            
0001063C                            Flamethrower:
0001063C 7000                       		moveq	#0,d0
0001063E 1028 0024                  		move.b	obRoutine(a0),d0
00010642 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010646 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001064A                            ; ===========================================================================
0001064A 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001064C 0000                       		dc.w Flame_Action-Flame_Index
0001064E                            ; ===========================================================================
0001064E                            
0001064E                            Flame_Main:	; Routine 0
0001064E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010652 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001065A 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010660 0028 0004 0001             		ori.b	#4,obRender(a0)
00010666 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001066C 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010672 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010678 1028 0028                  		move.b	obSubtype(a0),d0
0001067C 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010680 D040                       		add.w	d0,d0		; multiply by 2
00010682 3140 0030                  		move.w	d0,$30(a0)
00010686 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0001068A 1028 0028                  		move.b	obSubtype(a0),d0
0001068E 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010692 EB48                       		lsl.w	#5,d0		; multiply by $20
00010694 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010698 117C 000A 0036             		move.b	#$A,$36(a0)
0001069E 0828 0001 0022             		btst	#1,obStatus(a0)
000106A4 6700                       		beq.s	Flame_Action
000106A6 117C 0002 001C             		move.b	#2,obAnim(a0)
000106AC 117C 0015 0036             		move.b	#$15,$36(a0)
000106B2                            
000106B2                            Flame_Action:	; Routine 2
000106B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000106B6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000106B8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000106BE 0868 0000 001C             		bchg	#0,obAnim(a0)
000106C4 6700                       		beq.s	loc_E57A
000106C6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000106D6                            
000106D6                            loc_E57A:
000106D6 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000106DC 6100 C16A                  		bsr.w	AnimateSprite
000106E0 117C 0000 0020             		move.b	#0,obColType(a0)
000106E6 1028 0036                  		move.b	$36(a0),d0
000106EA B028 001A                  		cmp.b	obFrame(a0),d0
000106EE 6600                       		bne.s	Flame_ChkDel
000106F0 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000106F6                            
000106F6                            Flame_ChkDel:
00010714 6000 F04A                  		bra.w	DisplaySprite
00010714 6000 F04A                  		bra.w	DisplaySprite
00010718                            		include	"_anim\Flamethrower.asm"
00010718                            ; ---------------------------------------------------------------------------
00010718                            ; Animation script - flamethrower (SBZ)
00010718                            ; ---------------------------------------------------------------------------
00010718 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001071A 0000                       		dc.w @pipe2-Ani_Flame
0001071C 0000                       		dc.w @valve1-Ani_Flame
0001071E 0000                       		dc.w @valve2-Ani_Flame
00010720 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001072E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010738 00                         		even
00010738 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010746 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010750 00                         		even
00010750 00                         		even
00010750                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010750                            ; ---------------------------------------------------------------------------
00010750                            ; Sprite mappings - flame thrower (SBZ)
00010750                            ; ---------------------------------------------------------------------------
00010750                            Map_Flame_internal:
00010750 0000                       		dc.w @pipe1-Map_Flame_internal
00010752 0000                       		dc.w @pipe2-Map_Flame_internal
00010754 0000                       		dc.w @pipe3-Map_Flame_internal
00010756 0000                       		dc.w @pipe4-Map_Flame_internal
00010758 0000                       		dc.w @pipe5-Map_Flame_internal
0001075A 0000                       		dc.w @pipe6-Map_Flame_internal
0001075C 0000                       		dc.w @pipe7-Map_Flame_internal
0001075E 0000                       		dc.w @pipe8-Map_Flame_internal
00010760 0000                       		dc.w @pipe9-Map_Flame_internal
00010762 0000                       		dc.w @pipe10-Map_Flame_internal
00010764 0000                       		dc.w @pipe11-Map_Flame_internal
00010766 0000                       		dc.w @valve1-Map_Flame_internal
00010768 0000                       		dc.w @valve2-Map_Flame_internal
0001076A 0000                       		dc.w @valve3-Map_Flame_internal
0001076C 0000                       		dc.w @valve4-Map_Flame_internal
0001076E 0000                       		dc.w @valve5-Map_Flame_internal
00010770 0000                       		dc.w @valve6-Map_Flame_internal
00010772 0000                       		dc.w @valve7-Map_Flame_internal
00010774 0000                       		dc.w @valve8-Map_Flame_internal
00010776 0000                       		dc.w @valve9-Map_Flame_internal
00010778 0000                       		dc.w @valve10-Map_Flame_internal
0001077A 0000                       		dc.w @valve11-Map_Flame_internal
0001077C 01                         @pipe1:		dc.b 1
0001077D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010782 02                         @pipe2:		dc.b 2
00010783 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010788 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001078D 02                         @pipe3:		dc.b 2
0001078E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010793 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010798 03                         @pipe4:		dc.b 3
00010799 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001079E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107A3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107A8 03                         @pipe5:		dc.b 3
000107A9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107AE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107B3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107B8 04                         @pipe6:		dc.b 4
000107B9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107BE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000107C3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107C8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107CD 04                         @pipe7:		dc.b 4
000107CE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107D3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107D8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107E2 05                         @pipe8:		dc.b 5
000107E3 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000107E8 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107ED 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000107F2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107F7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107FC 05                         @pipe9:		dc.b 5
000107FD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010802 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010807 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001080C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010811 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010816 06                         @pipe10:	dc.b 6
00010817 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001081C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010821 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010826 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001082B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010830 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010835 06                         @pipe11:	dc.b 6
00010836 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001083B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010840 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010845 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001084A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001084F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010854 01                         @valve1:	dc.b 1
00010855 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
0001085A 02                         @valve2:	dc.b 2
0001085B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010860 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010865 02                         @valve3:	dc.b 2
00010866 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001086B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010870 03                         @valve4:	dc.b 3
00010871 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010876 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001087B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010880 03                         @valve5:	dc.b 3
00010881 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010886 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001088B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010890 04                         @valve6:	dc.b 4
00010891 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010896 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001089B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108A0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108A5 04                         @valve7:	dc.b 4
000108A6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000108AB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108B5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108BA 05                         @valve8:	dc.b 5
000108BB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000108C0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108C5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000108CA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108CF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108D4 05                         @valve9:	dc.b 5
000108D5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108DA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000108DF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108E4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108E9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108EE 06                         @valve10:	dc.b 6
000108EF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000108F4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000108F9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108FE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010903 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010908 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001090D 06                         @valve11:	dc.b 6
0001090E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010913 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010918 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001091D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010922 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010927 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001092C                            		even
0001092C                            		even
0001092C                            
0001092C                            		include	"_incObj\46 MZ Bricks.asm"
0001092C                            ; ---------------------------------------------------------------------------
0001092C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001092C                            ; ---------------------------------------------------------------------------
0001092C                            
0001092C                            MarbleBrick:
0001092C 7000                       		moveq	#0,d0
0001092E 1028 0024                  		move.b	obRoutine(a0),d0
00010932 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010936 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
0001093A                            ; ===========================================================================
0001093A 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
0001093C 0000                       		dc.w Brick_Action-Brick_Index
0001093E                            
0001093E =00000030                  brick_origY:	equ $30
0001093E                            ; ===========================================================================
0001093E                            
0001093E                            Brick_Main:	; Routine 0
0001093E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010942 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010948 117C 000F 0017             		move.b	#$F,obWidth(a0)
0001094E 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010956 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001095C 117C 0004 0001             		move.b	#4,obRender(a0)
00010962 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010968 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001096E 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010974 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0001097A                            
0001097A                            Brick_Action:	; Routine 2
0001097A 4A28 0001                  		tst.b	obRender(a0)
0001097E 6A00                       		bpl.s	@chkdel
00010980 7000                       		moveq	#0,d0
00010982 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010986 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0001098A D040                       		add.w	d0,d0
0001098C 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010990 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010994 323C 001B                  		move.w	#$1B,d1
00010998 343C 0010                  		move.w	#$10,d2
0001099C 363C 0011                  		move.w	#$11,d3
000109A0 3828 0008                  		move.w	obX(a0),d4
000109A4 6100 0000                  		bsr.w	SolidObject
000109A8                            
000109A8                            	@chkdel:
000109C6 6000 ED98                  			bra.w	DisplaySprite
000109CA                            ; ===========================================================================
000109CA 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
000109CC 0000                       		dc.w Brick_Type01-Brick_TypeIndex
000109CE 0000                       		dc.w Brick_Type02-Brick_TypeIndex
000109D0 0000                       		dc.w Brick_Type03-Brick_TypeIndex
000109D2 0000                       		dc.w Brick_Type04-Brick_TypeIndex
000109D4                            ; ===========================================================================
000109D4                            
000109D4                            Brick_Type00:
000109D4 4E75                       		rts	
000109D6                            ; ===========================================================================
000109D6                            
000109D6                            Brick_Type02:
000109D6 3038 D008                  		move.w	(v_player+obX).w,d0
000109DA 9068 0008                  		sub.w	obX(a0),d0
000109DE 6400                       		bcc.s	loc_E888
000109E0 4440                       		neg.w	d0
000109E2                            
000109E2                            loc_E888:
000109E2 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
000109E6 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
000109E8 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
000109EE                            
000109EE                            Brick_Type01:
000109EE 7000                       		moveq	#0,d0
000109F0 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
000109F4 0828 0003 0028             		btst	#3,obSubtype(a0)
000109FA 6700                       		beq.s	loc_E8A8
000109FC 4440                       		neg.w	d0
000109FE 0640 0010                  		addi.w	#$10,d0
00010A02                            
00010A02                            loc_E8A8:
00010A02 3228 0030                  		move.w	brick_origY(a0),d1
00010A06 9240                       		sub.w	d0,d1
00010A08 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010A0C 4E75                       		rts	
00010A0E                            ; ===========================================================================
00010A0E                            
00010A0E                            Brick_Type03:
00010A0E 6100 ED3C                  		bsr.w	SpeedToPos
00010A12 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010A18 6100 0000                  		bsr.w	ObjFloorDist
00010A1C 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010A1E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010A22 D368 000C                  		add.w	d1,obY(a0)
00010A26 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010A2A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010A30 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010A36 3011                       		move.w	(a1),d0
00010A38 0240 03FF                  		andi.w	#$3FF,d0
00010A3C 0C40 016A                  			cmpi.w	#$16A,d0
00010A40 6400                       		bcc.s	locret_E8EE
00010A42 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010A48                            
00010A48                            locret_E8EE:
00010A48 4E75                       		rts	
00010A4A                            ; ===========================================================================
00010A4A                            
00010A4A                            Brick_Type04:
00010A4A 7000                       		moveq	#0,d0
00010A4C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010A50 E648                       		lsr.w	#3,d0
00010A52 3228 0030                  		move.w	brick_origY(a0),d1
00010A56 9240                       		sub.w	d0,d1
00010A58 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010A5C 4E75                       		rts	
00010A5C 4E75                       		rts	
00010A5E                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010A5E                            ; ---------------------------------------------------------------------------
00010A5E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010A5E                            ; ---------------------------------------------------------------------------
00010A5E                            Map_Brick_internal:
00010A5E 0000                       		dc.w @brick-Map_Brick_internal
00010A60 01                         @brick:		dc.b 1
00010A61 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010A66                            		even
00010A66                            		even
00010A66                            
00010A66                            		include	"_incObj\12 Light.asm"
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            ; Object 12 - lamp (SYZ)
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            
00010A66                            SpinningLight:
00010A66 7000                       		moveq	#0,d0
00010A68 1028 0024                  		move.b	obRoutine(a0),d0
00010A6C 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010A70 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010A74                            ; ===========================================================================
00010A74 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010A76 0000                       		dc.w Light_Animate-Light_Index
00010A78                            ; ===========================================================================
00010A78                            
00010A78                            Light_Main:	; Routine 0
00010A78 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A7C 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010A84 317C 0000 0002             		move.w	#0,obGfx(a0)
00010A8A 117C 0004 0001             		move.b	#4,obRender(a0)
00010A90 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A96 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010A9C                            
00010A9C                            Light_Animate:	; Routine 2
00010A9C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010AA0 6A00                       		bpl.s	@chkdel
00010AA2 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010AA8 5228 001A                  		addq.b	#1,obFrame(a0)
00010AAC 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010AB2 6500                       		bcs.s	@chkdel
00010AB4 117C 0000 001A             		move.b	#0,obFrame(a0)
00010ABA                            
00010ABA                            	@chkdel:
00010AD8 6000 EC86                  		bra.w	DisplaySprite
00010AD8 6000 EC86                  		bra.w	DisplaySprite
00010ADC                            Map_Light	include	"_maps\Light.asm"
00010ADC                            ; --------------------------------------------------------------------------------
00010ADC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010ADC                            ; --------------------------------------------------------------------------------
00010ADC                            
00010ADC                            SME_FBl1X:	
00010ADC 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010AE0 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010AE4 05                         SME_FBl1X_8:	dc.b 5	
00010AE5 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010AEA E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010AEF F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010AF4 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010AF9 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AFE 05                         SME_FBl1X_22:	dc.b 5	
00010AFF E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010B04 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010B09 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010B0E F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010B13 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010B18 06                         SME_FBl1X_3C:	dc.b 6	
00010B19 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010B1E E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010B23 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010B28 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010B2D F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010B32 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010B37 05                         SME_FBl1X_5B:	dc.b 5	
00010B38 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010B3D E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010B42 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010B47 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010B4C F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010B52 00                         		even
00010B52 00                         		even
00010B52                            		include	"_incObj\47 Bumper.asm"
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            ; Object 47 - pinball bumper (SYZ)
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            
00010B52                            Bumper:
00010B52 7000                       		moveq	#0,d0
00010B54 1028 0024                  		move.b	obRoutine(a0),d0
00010B58 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010B5C 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010B60                            ; ===========================================================================
00010B60 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010B62 0000                       		dc.w Bump_Hit-Bump_Index
00010B64                            ; ===========================================================================
00010B64                            
00010B64                            Bump_Main:	; Routine 0
00010B64 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B68 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010B70 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010B76 117C 0004 0001             		move.b	#4,obRender(a0)
00010B7C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B82 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010B88 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010B8E                            
00010B8E                            Bump_Hit:	; Routine 2
00010B8E 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010B92 6700 0000                  		beq.w	@display	; if not, branch
00010B96 4228 0021                  		clr.b	obColProp(a0)
00010B9A 43F8 D000                  		lea	(v_player).w,a1
00010B9E 3228 0008                  		move.w	obX(a0),d1
00010BA2 3428 000C                  		move.w	obY(a0),d2
00010BA6 9269 0008                  		sub.w	obX(a1),d1
00010BAA 9469 000C                  		sub.w	obY(a1),d2
00010BAE 4EB9 0000 3CC4             		jsr	(CalcAngle).l
00010BB4 4EB9 0000 3A32             		jsr	(CalcSine).l
00010BBA C3FC F900                  		muls.w	#-$700,d1
00010BBE E081                       		asr.l	#8,d1
00010BC0 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010BC4 C1FC F900                  		muls.w	#-$700,d0
00010BC8 E080                       		asr.l	#8,d0
00010BCA 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010BCE 08E9 0001 0022             		bset	#1,obStatus(a1)
00010BD4 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010BDA 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010BE0 4229 003C                  		clr.b	$3C(a1)
00010BE4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010BF4 45F8 FC00                  		lea	(v_objstate).w,a2
00010BF8 7000                       		moveq	#0,d0
00010BFA 1028 0023                  		move.b	obRespawnNo(a0),d0
00010BFE 6700                       		beq.s	@addscore
00010C00 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010C06 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010C08 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010C0C                            
00010C0C                            	@addscore:
00010C0C 7001                       		moveq	#1,d0
00010C0E 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010C14 6100 EFD6                  		bsr.w	FindFreeObj
00010C18 6600                       		bne.s	@display
00010C1A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010C1E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010C24 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010C2A 137C 0004 001A             		move.b	#4,obFrame(a1)
00010C30                            
00010C30                            	@display:
00010C30 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010C36 6100 BC10                  		bsr.w	AnimateSprite
00010C56 6000 EB08                  		bra.w	DisplaySprite
00010C5A                            ; ===========================================================================
00010C5A                            
00010C5A                            @resetcount:
00010C5A 45F8 FC00                  		lea	(v_objstate).w,a2
00010C5E 7000                       		moveq	#0,d0
00010C60 1028 0023                  		move.b	obRespawnNo(a0),d0
00010C64 6700                       		beq.s	@delete
00010C66 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C6C                            
00010C6C                            	@delete:
00010C6C 6000 EB32                  		bra.w	DeleteObject
00010C6C 6000 EB32                  		bra.w	DeleteObject
00010C70                            		include	"_anim\Bumper.asm"
00010C70                            ; ---------------------------------------------------------------------------
00010C70                            ; Animation script - flamethrower (SBZ)
00010C70                            ; ---------------------------------------------------------------------------
00010C70 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010C72 0000                       		dc.w byte_EAF8-Ani_Bump
00010C74 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010C78 00                         		even
00010C78 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010C80 00                         		even
00010C80 00                         		even
00010C80                            Map_Bump:	include	"_maps\Bumper.asm"
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            ; Sprite mappings - pinball bumper (SYZ)
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            Map_Bump_internal:
00010C80 0000                       		dc.w @normal-Map_Bump_internal
00010C82 0000                       		dc.w @bumped1-Map_Bump_internal
00010C84 0000                       		dc.w @bumped2-Map_Bump_internal
00010C86 02                         @normal:	dc.b 2
00010C87 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010C8C F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010C91 02                         @bumped1:	dc.b 2
00010C92 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010C97 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010C9C 02                         @bumped2:	dc.b 2
00010C9D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010CA2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010CA8 00                         		even
00010CA8 00                         		even
00010CA8                            
00010CA8                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            ; Object 0D - signpost at the end of a level
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            
00010CA8                            Signpost:
00010CA8 7000                       		moveq	#0,d0
00010CAA 1028 0024                  		move.b	obRoutine(a0),d0
00010CAE 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010CB2 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010CB6 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010CBC 6100 BB8A                  		bsr.w	AnimateSprite
00010CC0 6100 EA9E                  		bsr.w	DisplaySprite
00010CE2 4E75                       		rts	
00010CE4                            ; ===========================================================================
00010CE4 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010CE6 0000                       		dc.w Sign_Touch-Sign_Index
00010CE8 0000                       		dc.w Sign_Spin-Sign_Index
00010CEA 0000                       		dc.w Sign_SonicRun-Sign_Index
00010CEC 0000                       		dc.w Sign_Exit-Sign_Index
00010CEE                            
00010CEE =00000030                  spintime:	equ $30		; time for signpost to spin
00010CEE =00000032                  sparkletime:	equ $32		; time between sparkles
00010CEE =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010CEE                            ; ===========================================================================
00010CEE                            
00010CEE                            Sign_Main:	; Routine 0
00010CEE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CF2 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010CFA 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010D00 117C 0004 0001             		move.b	#4,obRender(a0)
00010D06 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010D0C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010D12                            
00010D12                            Sign_Touch:	; Routine 2
00010D12 3038 D008                  		move.w	(v_player+obX).w,d0
00010D16 9068 0008                  		sub.w	obX(a0),d0
00010D1A 6500                       		bcs.s	@notouch
00010D1C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010D20 6400                       		bcc.s	@notouch	; if not, branch
00010D22 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010D32 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010D36 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010D3C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D40 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010D46                            
00010D46                            	@notouch:
00010D46 4E75                       		rts	
00010D48                            	
00010D48                            ; ===========================================================================
00010D48                            
00010D48                            Sign_Spin:	; Routine 4
00010D48 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010D4C 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010D4E 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010D54 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010D58 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010D5E 6600                       		bne.s	@chksparkle	; if not, branch
00010D60 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D64                            
00010D64                            	@chksparkle:
00010D64 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010D68 6A00                       		bpl.s	@fail		; if time remains, branch
00010D6A 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010D70 7000                       		moveq	#0,d0
00010D72 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010D76 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010D7A 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010D80 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010D84 6100 EE66                  		bsr.w	FindFreeObj
00010D88 6600                       		bne.s	@fail
00010D8A 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010D8E 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010D94 101A                       		move.b	(a2)+,d0
00010D96 4880                       		ext.w	d0
00010D98 D068 0008                  		add.w	obX(a0),d0
00010D9C 3340 0008                  		move.w	d0,obX(a1)
00010DA0 101A                       		move.b	(a2)+,d0
00010DA2 4880                       		ext.w	d0
00010DA4 D068 000C                  		add.w	obY(a0),d0
00010DA8 3340 000C                  		move.w	d0,obY(a1)
00010DAC 237C 0000 BEF6 0004        		move.l	#Map_Ring,obMap(a1)
00010DB4 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010DBA 137C 0004 0001             		move.b	#4,obRender(a1)
00010DC0 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010DC6 137C 0008 0014             		move.b	#8,obActWid(a1)
00010DCC                            
00010DCC                            	@fail:
00010DCC 4E75                       		rts	
00010DCE                            ; ===========================================================================
00010DCE E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010DD0 0808                       		dc.b	8,   8
00010DD2 F000                       		dc.b -$10,   0
00010DD4 18F8                       		dc.b  $18,  -8
00010DD6 00F8                       		dc.b	0,  -8
00010DD8 1000                       		dc.b  $10,   0
00010DDA E808                       		dc.b -$18,   8
00010DDC 1810                       		dc.b  $18, $10
00010DDE                            ; ===========================================================================
00010DDE                            
00010DDE                            Sign_SonicRun:	; Routine 6
00010DDE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010DE2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010DE6 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010DEC                            		
00010DEC                            
00010DEC                            	loc_EC86:
00010DEC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DF0                            
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            ; Subroutine to	set up bonuses at the end of an	act
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            
00010DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010DF0                            
00010DF0                            
00010DF0                            GotThroughAct:
00010DF0 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010DF4 6600                       		bne.s	locret_ECEE
00010DF6 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010DFC 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E00 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010E04 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E08 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010E0E 7000                       		moveq	#plcid_TitleCard,d0
00010E10 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010E16 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010E1C 7000                       		moveq	#0,d0
00010E1E 1038 FE23                  		move.b	(v_timemin).w,d0
00010E22 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010E26 7200                       		moveq	#0,d1
00010E28 1238 FE24                  		move.b	(v_timesec).w,d1
00010E2C D041                       		add.w	d1,d0		; add up your time
00010E2E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010E32 7214                       		moveq	#$14,d1
00010E34 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010E36 6500                       		bcs.s	hastimebonus	; if not, branch
00010E38 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010E3A                            
00010E3A                            	hastimebonus:
00010E3A D040                       		add.w	d0,d0
00010E3C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010E42 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010E46 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010E4A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010E58 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E5E                            
00010E5E                            locret_ECEE:
00010E5E 4E75                       		rts	
00010E60                            
00010E60                            ; End of function GotThroughAct
00010E60                            
00010E60                            ; ===========================================================================
00010E60 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010E74 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E8A                            ; ===========================================================================
00010E8A                            
00010E8A                            Sign_Exit:	; Routine 8
00010E8A 4E75                       		rts	
00010E8C                            
00010E8C                            ; ---------------------------------------------------------------------------
00010E8C                            ; Subroutine to	set up bonuses at the end of an	zone
00010E8C                            ; ---------------------------------------------------------------------------
00010E8C                            
00010E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E8C                            
00010E8C                            
00010E8C                            GotThroughAct1:
00010E8C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010E90 6600                       		bne.s	locret_ECEE1
00010E92 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010E98 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E9C 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010EA0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010EA4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010EAA 7000                       		moveq	#plcid_TitleCard,d0
00010EAC 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010EB2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010EB8 7000                       		moveq	#0,d0
00010EBA 1038 FE23                  		move.b	(v_timemin).w,d0
00010EBE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010EC2 7200                       		moveq	#0,d1
00010EC4 1238 FE24                  		move.b	(v_timesec).w,d1
00010EC8 D041                       		add.w	d1,d0		; add up your time
00010ECA 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010ECE 7214                       		moveq	#$14,d1
00010ED0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010ED2 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010ED6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010ED8                            
00010ED8                            	hastimebonus2:
00010ED8 D040                       		add.w	d0,d0
00010EDA 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010EE0 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010EE4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010EE8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010EF6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010EFC                            
00010EFC                            locret_ECEE1:
00010EFC 4E75                       		rts	
00010EFE                            
00010EFE                            ; End of function GotThroughAct		
00010EFE                            
00010EFE 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010F12 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010F12 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010F28                            		include	"_anim\Signpost.asm"
00010F28                            ; ---------------------------------------------------------------------------
00010F28                            ; Animation script - signpost
00010F28                            ; ---------------------------------------------------------------------------
00010F28 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010F2A 0000                       		dc.w @spin1-Ani_Sign
00010F2C 0000                       		dc.w @spin2-Ani_Sign
00010F2E 0000                       		dc.w @sonic-Ani_Sign
00010F30 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010F34 00                         		even
00010F34 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010F3A 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010F40 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010F44 00                         		even
00010F44 00                         		even
00010F44                            Map_Sign:	include	"_maps\Signpost.asm"
00010F44                            ; --------------------------------------------------------------------------------
00010F44                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010F44                            ; --------------------------------------------------------------------------------
00010F44                            
00010F44                            SME_KvSue:	
00010F44 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010F48 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010F4C 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010F4E 04                         SME_KvSue_A:	dc.b 4	
00010F4F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010F54 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010F59 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F5E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F63 03                         SME_KvSue_1F:	dc.b 3	
00010F64 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010F69 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F6E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F73 03                         SME_KvSue_2F:	dc.b 3	
00010F74 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010F79 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F7E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F83 03                         SME_KvSue_3F:	dc.b 3	
00010F84 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010F89 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F8E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F93 04                         SME_KvSue_4F:	dc.b 4	
00010F94 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010F99 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010F9E 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010FA3 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010FA8                            		even
00010FA8                            		even
00010FA8                            
00010FA8                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010FA8                            ; ---------------------------------------------------------------------------
00010FA8                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010FA8                            ; ---------------------------------------------------------------------------
00010FA8                            
00010FA8                            GeyserMaker:
00010FA8 7000                       		moveq	#0,d0
00010FAA 1028 0024                  		move.b	obRoutine(a0),d0
00010FAE 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010FB2 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010FB6 6000 0000                  		bra.w	Geyser_ChkDel
00010FBA                            ; ===========================================================================
00010FBA 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010FBC 0000                       		dc.w GMake_Wait-GMake_Index
00010FBE 0000                       		dc.w GMake_ChkType-GMake_Index
00010FC0 0000                       		dc.w GMake_MakeLava-GMake_Index
00010FC2 0000                       		dc.w GMake_Display-GMake_Index
00010FC4 0000                       		dc.w GMake_Delete-GMake_Index
00010FC6                            
00010FC6 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010FC6 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010FC6 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010FC6                            ; ===========================================================================
00010FC6                            
00010FC6                            GMake_Main:	; Routine 0
00010FC6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FCA 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010FD2 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010FD8 117C 0004 0001             		move.b	#4,obRender(a0)
00010FDE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010FE4 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010FEA 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010FF0                            
00010FF0                            GMake_Wait:	; Routine 2
00010FF0 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010FF4 6A00                       		bpl.s	@cancel		; if time remains, branch
00010FF6                            
00010FF6 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010FFC 3038 D00C                  		move.w	(v_player+obY).w,d0
00011000 3228 000C                  		move.w	obY(a0),d1
00011004 B041                       		cmp.w	d1,d0
00011006 6400                       		bcc.s	@cancel
00011008 0441 0170                  		subi.w	#$170,d1
0001100C B041                       		cmp.w	d1,d0
0001100E 6500                       		bcs.s	@cancel
00011010 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011014                            
00011014                            	@cancel:
00011014 4E75                       		rts	
00011016                            ; ===========================================================================
00011016                            
00011016                            GMake_MakeLava:	; Routine 6
00011016 5428 0024                  		addq.b	#2,obRoutine(a0)
0001101A 6100 EBE6                  		bsr.w	FindNextFreeObj
0001101E 6600                       		bne.s	@fail
00011020 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011024 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001102A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011030 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011036 2348 003C                  		move.l	a0,gmake_parent(a1)
0001103A                            
0001103A                            	@fail:
0001103A 117C 0001 001C             		move.b	#1,obAnim(a0)
00011040 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011044 6700                       		beq.s	@isgeyser	; if yes, branch
00011046 117C 0004 001C             		move.b	#4,obAnim(a0)
0001104C 6000                       		bra.s	GMake_Display
0001104E                            ; ===========================================================================
0001104E                            
0001104E                            	@isgeyser:
0001104E 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00011052 08E9 0001 0022             		bset	#1,obStatus(a1)
00011058 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001105E 6000                       		bra.s	GMake_Display
00011060                            ; ===========================================================================
00011060                            
00011060                            GMake_ChkType:	; Routine 4
00011060 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011064 6700                       		beq.s	GMake_Display	; if yes, branch
00011066 5428 0024                  		addq.b	#2,obRoutine(a0)
0001106A 4E75                       		rts	
0001106C                            ; ===========================================================================
0001106C                            
0001106C                            GMake_Display:	; Routine 8
0001106C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011072 6100 B7D4                  		bsr.w	AnimateSprite
00011076 6100 E6E8                  		bsr.w	DisplaySprite
0001107A 4E75                       		rts	
0001107C                            ; ===========================================================================
0001107C                            
0001107C                            GMake_Delete:	; Routine $A
0001107C 117C 0000 001C             		move.b	#0,obAnim(a0)
00011082 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011088 4A28 0028                  		tst.b	obSubtype(a0)
0001108C 6700 E712                  		beq.w	DeleteObject
00011090 4E75                       		rts	
00011092                            
00011092                            
00011092                            ; ---------------------------------------------------------------------------
00011092                            ; Object 4D - lava geyser / lavafall (MZ)
00011092                            ; ---------------------------------------------------------------------------
00011092                            
00011092                            LavaGeyser:
00011092 7000                       		moveq	#0,d0
00011094 1028 0024                  		move.b	obRoutine(a0),d0
00011098 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
0001109C 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000110A0 6000 E6BE                  		bra.w	DisplaySprite
000110A4                            ; ===========================================================================
000110A4 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000110A6 0000                       		dc.w Geyser_Action-Geyser_Index
000110A8 0000                       		dc.w loc_EFFC-Geyser_Index
000110AA 0000                       		dc.w Geyser_Delete-Geyser_Index
000110AC                            
000110AC FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000110B0                            ; ===========================================================================
000110B0                            
000110B0                            Geyser_Main:	; Routine 0
000110B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000110B4 3168 000C 0030             		move.w	obY(a0),$30(a0)
000110BA 4A28 0028                  		tst.b	obSubtype(a0)
000110BE 6700                       		beq.s	@isgeyser
000110C0 0468 0250 000C             		subi.w	#$250,obY(a0)
000110C6                            
000110C6                            	@isgeyser:
000110C6 7000                       		moveq	#0,d0
000110C8 1028 0028                  		move.b	obSubtype(a0),d0
000110CC D040                       		add.w	d0,d0
000110CE 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000110D4 2248                       		movea.l	a0,a1
000110D6 7201                       		moveq	#1,d1
000110D8 6100                       		bsr.s	@makelava
000110DA 6000                       		bra.s	@activate
000110DC                            ; ===========================================================================
000110DC                            
000110DC                            	@loop:
000110DC 6100 EB24                  		bsr.w	FindNextFreeObj
000110E0 6600                       		bne.s	@fail
000110E2                            
000110E2                            @makelava:
000110E2 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
000110E6 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
000110EE 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
000110F4 137C 0004 0001             		move.b	#4,obRender(a1)
000110FA 137C 0020 0014             		move.b	#$20,obActWid(a1)
00011100 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011106 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001110C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011112 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011118 137C 0005 001C             		move.b	#5,obAnim(a1)
0001111E 4A28 0028                  		tst.b	obSubtype(a0)
00011122 6700                       		beq.s	@fail
00011124 137C 0002 001C             		move.b	#2,obAnim(a1)
0001112A                            
0001112A                            	@fail:
0001112A 51C9 FFB0                  		dbf	d1,@loop
0001112E 4E75                       		rts	
00011130                            ; ===========================================================================
00011130                            
00011130                            @activate:
00011130 0669 0060 000C             		addi.w	#$60,obY(a1)
00011136 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001113C 0669 0060 0030             		addi.w	#$60,$30(a1)
00011142 137C 0093 0020             		move.b	#$93,obColType(a1)
00011148 137C 0080 0016             		move.b	#$80,obHeight(a1)
0001114E 08E9 0004 0001             		bset	#4,obRender(a1)
00011154 5829 0024                  		addq.b	#4,obRoutine(a1)
00011158 2348 003C                  		move.l	a0,$3C(a1)
0001115C 4A28 0028                  		tst.b	obSubtype(a0)
00011160 6700                       		beq.s	@sound
00011162 7200                       		moveq	#0,d1
00011164 6100 FF76                  		bsr.w	@loop
00011168 5429 0024                  		addq.b	#2,obRoutine(a1)
0001116C 08E9 0004 0002             		bset	#4,obGfx(a1)
00011172 0669 0100 000C             		addi.w	#$100,obY(a1)
00011178 337C 0000 0018             		move.w	#0,obPriority(a1)
0001117E 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011184 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0001118A 117C 0000 0028             		move.b	#0,obSubtype(a0)
00011190                            
00011190                            	@sound:
0001119A                            
0001119A                            Geyser_Action:	; Routine 2
0001119A 7000                       		moveq	#0,d0
0001119C 1028 0028                  		move.b	obSubtype(a0),d0
000111A0 D040                       		add.w	d0,d0
000111A2 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000111A6 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000111AA 6100 E5A0                  		bsr.w	SpeedToPos
000111AE 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000111B4 6100 B692                  		bsr.w	AnimateSprite
000111B8                            
000111B8                            Geyser_ChkDel:
000111D6 4E75                       		rts	
000111D8                            ; ===========================================================================
000111D8 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000111DA 0000                       		dc.w Geyser_Type01-Geyser_Types
000111DC                            ; ===========================================================================
000111DC                            
000111DC                            Geyser_Type00:
000111DC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000111E2 3028 0030                  		move.w	$30(a0),d0
000111E6 B068 000C                  		cmp.w	obY(a0),d0
000111EA 6400                       		bcc.s	locret_EFDA
000111EC 5828 0024                  		addq.b	#4,obRoutine(a0)
000111F0 2268 003C                  		movea.l	$3C(a0),a1
000111F4 137C 0003 001C             		move.b	#3,obAnim(a1)
000111FA                            
000111FA                            locret_EFDA:
000111FA 4E75                       		rts	
000111FC                            ; ===========================================================================
000111FC                            
000111FC                            Geyser_Type01:
000111FC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011202 3028 0030                  		move.w	$30(a0),d0
00011206 B068 000C                  		cmp.w	obY(a0),d0
0001120A 6400                       		bcc.s	locret_EFFA
0001120C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011210 2268 003C                  		movea.l	$3C(a0),a1
00011214 137C 0001 001C             		move.b	#1,obAnim(a1)
0001121A                            
0001121A                            locret_EFFA:
0001121A 4E75                       		rts	
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            loc_EFFC:	; Routine 4
0001121C 2268 003C                  		movea.l	$3C(a0),a1
00011220 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011226 6700 0000                  		beq.w	Geyser_Delete
0001122A 3029 000C                  		move.w	obY(a1),d0
0001122E 0640 0060                  		addi.w	#$60,d0
00011232 3140 000C                  		move.w	d0,obY(a0)
00011236 9068 0030                  		sub.w	$30(a0),d0
0001123A 4440                       		neg.w	d0
0001123C 7208                       		moveq	#8,d1
0001123E 0C40 0040                  		cmpi.w	#$40,d0
00011242 6C00                       		bge.s	loc_F026
00011244 720B                       		moveq	#$B,d1
00011246                            
00011246                            loc_F026:
00011246 0C40 0080                  		cmpi.w	#$80,d0
0001124A 6F00                       		ble.s	loc_F02E
0001124C 720E                       		moveq	#$E,d1
0001124E                            
0001124E                            loc_F02E:
0001124E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011252 6A00                       		bpl.s	loc_F04C
00011254 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001125A 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001125E 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011264 6500                       		bcs.s	loc_F04C
00011266 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001126C                            
0001126C                            loc_F04C:
0001126C 1028 001B                  		move.b	obAniFrame(a0),d0
00011270 D001                       		add.b	d1,d0
00011272 1140 001A                  		move.b	d0,obFrame(a0)
00011276 6000 FF40                  		bra.w	Geyser_ChkDel
0001127A                            ; ===========================================================================
0001127A                            
0001127A                            Geyser_Delete:	; Routine 6
0001127A 6000 E524                  		bra.w	DeleteObject
0001127A 6000 E524                  		bra.w	DeleteObject
0001127E                            		include	"_incObj\54 Lava Tag.asm"
0001127E                            ; ---------------------------------------------------------------------------
0001127E                            ; Object 54 - invisible	lava tag (MZ)
0001127E                            ; ---------------------------------------------------------------------------
0001127E                            
0001127E                            LavaTag:
0001127E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011284 6E00 0000                  		bgt	WaterTag	;TIS
00011288 7000                       		moveq	#0,d0
0001128A 1028 0024                  		move.b	obRoutine(a0),d0
0001128E 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011292 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011296                            ; ===========================================================================
00011296 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011298 0000                       		dc.w LTag_ChkDel-LTag_Index
0001129A                            
0001129A 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0001129E 00                         		even
0001129E                            ; ===========================================================================
0001129E                            
0001129E                            LTag_Main:	; Routine 0
0001129E 5428 0024                  		addq.b	#2,obRoutine(a0)
000112A2 7000                       		moveq	#0,d0
000112A4 1028 0028                  		move.b	obSubtype(a0),d0
000112A8 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000112AE 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000112B6 117C 0084 0001             		move.b	#$84,obRender(a0)
000112BC                            
000112BC                            LTag_ChkDel:	; Routine 2
000112BC 3028 0008                  		move.w	obX(a0),d0
000112C0 0240 FF80                  		andi.w	#$FF80,d0
000112C4 3238 F700                  		move.w	(v_screenposx).w,d1
000112C8 0441 0080                  		subi.w	#$80,d1
000112CC 0241 FF80                  		andi.w	#$FF80,d1
000112D0 9041                       		sub.w	d1,d0
000112D2 6B00 E4CC                  		bmi.w	DeleteObject
000112D6 0C40 0280                  		cmpi.w	#$280,d0
000112DA 6200 E4C4                  		bhi.w	DeleteObject
000112DE 4E75                       		rts
000112E0                            
000112E0                            
000112E0                            ; ---------------------------------------------------------------------------
000112E0                            ; Object 54a - invisible	water tag (MZ) - TIS
000112E0                            ; ---------------------------------------------------------------------------
000112E0                            
000112E0                            WaterTag:	
000112E0 7000                       		moveq	#0,d0
000112E2 1028 0024                  		move.b	obRoutine(a0),d0
000112E6 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000112EA 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000112EE                            ; ===========================================================================
000112EE 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000112F0 0000                       		dc.w WTag_ChkDel-WTag_Index
000112F2                            
000112F2 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000112F6 00                         		even
000112F6                            ; ===========================================================================
000112F6                            
000112F6                            
000112F6                            WTag_Main:	; Routine 0
000112F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000112FA 7000                       		moveq	#0,d0
000112FC                            		;move.b	obSubtype(a0),d0
000112FC                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
000112FC 0400 00F0                  		sub.b	#$F0,d0
00011300 1178 0096 0020             		move.b	$96,obColType(a0)							
00011306                            		;move.l	#Map_LTag,obMap(a0)
00011306                            		;move.b	#$84,obRender(a0)
00011306                            
00011306                            WTag_ChkDel:	; Routine 2
00011306 3028 0008                  		move.w	obX(a0),d0
0001130A 0240 FF80                  		andi.w	#$FF80,d0
0001130E 3238 F700                  		move.w	(v_screenposx).w,d1
00011312 0441 0080                  		subi.w	#$80,d1
00011316 0241 FF80                  		andi.w	#$FF80,d1
0001131A 9041                       		sub.w	d1,d0
0001131C 6B00 E482                  		bmi.w	DeleteObject
00011320 0C40 0280                  		cmpi.w	#$280,d0
00011324 6200 E47A                  		bhi.w	DeleteObject
00011328 4E75                       		rts
0001132A                            
0001132A                            
0001132A                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            ; Sprite mappings - invisible lava tag (MZ)
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            Map_LTag_internal:
0001132A 0000                       		dc.w @0-Map_LTag_internal
0001132C 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001132E 00                         		even
0001132E 00                         		even
0001132E                            		include	"_anim\Lava Geyser.asm"
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Animation script - geyser of lava (MZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011330 0000                       		dc.w @bubble2-Ani_Geyser
00011332 0000                       		dc.w @end-Ani_Geyser
00011334 0000                       		dc.w @bubble3-Ani_Geyser
00011336 0000                       		dc.w @blank-Ani_Geyser
00011338 0000                       		dc.w @bubble4-Ani_Geyser
0001133A 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011344 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011348 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0001134C 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011354 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011358 00                         		even
00011358 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0001135C                            		even
0001135C                            		even
0001135C                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0001135C                            ; ---------------------------------------------------------------------------
0001135C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001135C                            ; ---------------------------------------------------------------------------
0001135C                            Map_Geyser_internal:
0001135C 0000                       		dc.w @bubble1-Map_Geyser_internal
0001135E 0000                       		dc.w @bubble2-Map_Geyser_internal
00011360 0000                       		dc.w @bubble3-Map_Geyser_internal
00011362 0000                       		dc.w @bubble4-Map_Geyser_internal
00011364 0000                       		dc.w @bubble5-Map_Geyser_internal
00011366 0000                       		dc.w @bubble6-Map_Geyser_internal
00011368 0000                       		dc.w @end1-Map_Geyser_internal
0001136A 0000                       		dc.w @end2-Map_Geyser_internal
0001136C 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001136E 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011370 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011372 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011374 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011376 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011378 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0001137A 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001137C 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001137E 0000                       		dc.w @bubble7-Map_Geyser_internal
00011380 0000                       		dc.w @bubble8-Map_Geyser_internal
00011382 0000                       		dc.w @blank-Map_Geyser_internal
00011384 02                         @bubble1:	dc.b 2
00011385 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001138A EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001138F 02                         @bubble2:	dc.b 2
00011390 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011395 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001139A 04                         @bubble3:	dc.b 4
0001139B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000113A0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000113A5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000113AA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000113AF 04                         @bubble4:	dc.b 4
000113B0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000113B5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000113BA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000113BF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000113C4 06                         @bubble5:	dc.b 6
000113C5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000113CA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000113CF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000113D4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000113D9 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000113DE E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000113E3 06                         @bubble6:	dc.b 6
000113E4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000113E9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000113EE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000113F3 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000113F8 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000113FD E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011402 02                         @end1:		dc.b 2
00011403 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011408 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001140D 02                         @end2:		dc.b 2
0001140E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011413 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011418 0A                         @medcolumn1:	dc.b $A
00011419 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001141E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011423 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011428 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001142D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011432 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011437 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001143C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011441 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011446 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001144B 0A                         @medcolumn2:	dc.b $A
0001144C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011451 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011456 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001145B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011460 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011465 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001146A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001146F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011474 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011479 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001147E 0A                         @medcolumn3:	dc.b $A
0001147F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011484 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011489 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001148E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011493 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011498 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001149D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000114A2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000114A7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000114AC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000114B1 06                         @shortcolumn1:	dc.b 6
000114B2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000114B7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000114BC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000114C1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000114C6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000114CB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000114D0 06                         @shortcolumn2:	dc.b 6
000114D1 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000114D6 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000114DB B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000114E0 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000114E5 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000114EA D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000114EF 06                         @shortcolumn3:	dc.b 6
000114F0 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000114F5 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000114FA B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000114FF B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011504 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011509 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001150E 10                         @longcolumn1:	dc.b $10
0001150F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011514 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011519 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001151E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011523 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011528 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001152D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011532 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011537 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001153C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011541 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011546 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001154B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011550 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011555 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001155A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001155F 10                         @longcolumn2:	dc.b $10
00011560 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011565 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001156A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001156F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011574 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011579 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001157E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011583 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011588 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001158D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011592 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011597 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001159C 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000115A1 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000115A6 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000115AB 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000115B0 10                         @longcolumn3:	dc.b $10
000115B1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000115B6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000115BB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000115C0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000115C5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000115CA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000115CF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000115D4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000115D9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000115DE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000115E3 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000115E8 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000115ED 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000115F2 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000115F7 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000115FC 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011601 06                         @bubble7:	dc.b 6
00011602 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011607 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001160C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011611 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011616 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001161B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011620 06                         @bubble8:	dc.b 6
00011621 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011626 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001162B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011630 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011635 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001163A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001163F 00                         @blank:	dc.b 0
00011640                            		even
00011640                            		even
00011640                            
00011640                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011640                            ; ---------------------------------------------------------------------------
00011640                            ; Object 40 - Moto Bug enemy (GHZ)
00011640                            ; ---------------------------------------------------------------------------
00011640                            
00011640                            MotoBug:
00011640 7000                       		moveq	#0,d0
00011642 1028 0024                  		move.b	obRoutine(a0),d0
00011646 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001164A 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001164E                            ; ===========================================================================
0001164E 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011650 0000                       		dc.w Moto_Action-Moto_Index
00011652 0000                       		dc.w Moto_Animate-Moto_Index
00011654 0000                       		dc.w Moto_Delete-Moto_Index
00011656                            ; ===========================================================================
00011656                            
00011656                            Moto_Main:	; Routine 0
00011656 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001165E 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011664 117C 0004 0001             		move.b	#4,obRender(a0)
0001166A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011670 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011676 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0001167A 6600                       		bne.s	@smoke		; if yes, branch
0001167C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011682 117C 0008 0017             		move.b	#8,obWidth(a0)
00011688 117C 000C 0020             		move.b	#$C,obColType(a0)
0001168E 6100 E084                  		bsr.w	ObjectFall
00011692 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011698 4A41                       		tst.w	d1
0001169A 6A00                       		bpl.s	@notonfloor
0001169C D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000116A0 317C 0000 0012             		move.w	#0,obVelY(a0)
000116A6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000116AA 0868 0000 0022             		bchg	#0,obStatus(a0)
000116B0                            
000116B0                            	@notonfloor:
000116B0 4E75                       		rts	
000116B2                            ; ===========================================================================
000116B2                            
000116B2                            @smoke:
000116B2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000116B6 6000 0000                  		bra.w	Moto_Animate
000116BA                            ; ===========================================================================
000116BA                            
000116BA                            Moto_Action:	; Routine 2
000116BA 7000                       		moveq	#0,d0
000116BC 1028 0025                  		move.b	ob2ndRout(a0),d0
000116C0 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000116C4 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000116C8 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000116CE 6100 B178                  		bsr.w	AnimateSprite
000116D2                            
000116D2                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000116D2                            ; ---------------------------------------------------------------------------
000116D2                            ; Subroutine to remember whether an object is destroyed/collected
000116D2                            ; ---------------------------------------------------------------------------
000116D2                            
000116D2                            RememberState:
000116F0 6000 E06E                  		bra.w	DisplaySprite
000116F4                            
000116F4                            	@offscreen:
000116F4 45F8 FC00                  		lea	(v_objstate).w,a2
000116F8 7000                       		moveq	#0,d0
000116FA 1028 0023                  		move.b	obRespawnNo(a0),d0
000116FE 6700                       		beq.s	@delete
00011700 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011706                            
00011706                            	@delete:
00011706 6000 E098                  		bra.w	DeleteObject
00011706 6000 E098                  		bra.w	DeleteObject
0001170A                            
0001170A                            ; ===========================================================================
0001170A 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001170C 0000                       		dc.w @findfloor-Moto_ActIndex
0001170E                            
0001170E =00000030                  @time:		equ $30
0001170E =00000033                  @smokedelay:	equ $33
0001170E                            ; ===========================================================================
0001170E                            
0001170E                            @move:
0001170E 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011712 6A00                       		bpl.s	@wait		; if time remains, branch
00011714 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011718 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001171E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011724 0868 0000 0022             		bchg	#0,obStatus(a0)
0001172A 6600                       		bne.s	@wait
0001172C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011730                            
00011730                            	@wait:
00011730 4E75                       		rts	
00011732                            ; ===========================================================================
00011732                            
00011732                            @findfloor:
00011732 6100 E018                  		bsr.w	SpeedToPos
00011736 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001173C 0C41 FFF8                  		cmpi.w	#-8,d1
00011740 6D00                       		blt.s	@pause
00011742 0C41 000C                  		cmpi.w	#$C,d1
00011746 6C00                       		bge.s	@pause
00011748 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001174C 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011750 6A00                       		bpl.s	@nosmoke
00011752 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011758 6100 E492                  		bsr.w	FindFreeObj
0001175C 6600                       		bne.s	@nosmoke
0001175E 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011762 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011768 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001176E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011774 137C 0002 001C             		move.b	#2,obAnim(a1)
0001177A                            
0001177A                            	@nosmoke:
0001177A 4E75                       		rts	
0001177C                            
0001177C                            @pause:
0001177C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011780 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011786 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001178C 117C 0000 001C             		move.b	#0,obAnim(a0)
00011792 4E75                       		rts	
00011794                            ; ===========================================================================
00011794                            
00011794                            Moto_Animate:	; Routine 4
00011794 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001179A 6100 B0AC                  		bsr.w	AnimateSprite
0001179E 6000 DFC0                  		bra.w	DisplaySprite
000117A2                            ; ===========================================================================
000117A2                            
000117A2                            Moto_Delete:	; Routine 6
000117A2 6000 DFFC                  		bra.w	DeleteObject
000117A2 6000 DFFC                  		bra.w	DeleteObject
000117A6                            		include	"_anim\Moto Bug.asm"
000117A6                            ; ---------------------------------------------------------------------------
000117A6                            ; Animation script - Motobug enemy
000117A6                            ; ---------------------------------------------------------------------------
000117A6 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000117A8 0000                       		dc.w @walk-Ani_Moto
000117AA 0000                       		dc.w @smoke-Ani_Moto
000117AC                            
000117AC 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000117B0 00                         		even
000117B0 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000117B6 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000117C4 00                         		even
000117C4 00                         		even
000117C4                            Map_Moto:	include	"_maps\Moto Bug.asm"
000117C4                            ; --------------------------------------------------------------------------------
000117C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000117C4                            ; --------------------------------------------------------------------------------
000117C4                            
000117C4                            SME_TTY9T:	
000117C4 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000117C8 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000117CC 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000117D0 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000117D2 04                         SME_TTY9T_E:	dc.b 4	
000117D3 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000117D8 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000117DD F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000117E2 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000117E7 04                         SME_TTY9T_23:	dc.b 4	
000117E8 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000117ED 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
000117F2 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000117F7 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
000117FC 05                         SME_TTY9T_38:	dc.b 5	
000117FD F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011802 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011807 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
0001180C 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011811 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011816 01                         SME_TTY9T_52:	dc.b 1	
00011817 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
0001181C 01                         SME_TTY9T_58:	dc.b 1	
0001181D FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011822 01                         SME_TTY9T_5E:	dc.b 1	
00011823 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011828 00                         SME_TTY9T_64:	dc.b 0	
0001182A 00                         		even
0001182A 00                         		even
0001182A                            		include	"_incObj\4F.asm"
0001182A                            ; ---------------------------------------------------------------------------
0001182A                            ; Object 4F - Splats
0001182A                            ; ---------------------------------------------------------------------------
0001182A                            
0001182A                            Obj4F:
0001182A 7000                                       moveq   #0,d0
0001182C 1028 0024                                  move.b  $24(a0),d0
00011830 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011834 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011838                            ; ---------------------------------------------------------------------------
00011838 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
0001183A 0000                                       dc.w loc_D246-ObjSplats_Index
0001183C 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
0001183E 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011840                            ; ---------------------------------------------------------------------------
00011840                            
00011840                            ObjSplats_Init:
00011840 5428 0024                                  addq.b  #2,$24(a0)
00011844 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
0001184C 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011852 117C 0004 0001                             move.b  #4,1(a0)
00011858 117C 0004 0014                             move.b  #4,obActWid(a0)
0001185E 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011864 117C 0014 0016                             move.b  #$14,$16(a0)
0001186A 117C 0002 0020                             move.b  #2,$20(a0)
00011870 4A28 0028                                  tst.b   $28(a0)
00011874 6700                                       beq.s   loc_D246
00011876 343C 0300                                  move.w  #$300,d2
0001187A 6000                                       bra.s   ObjSplats_FaceRight
0001187C                            ; ---------------------------------------------------------------------------
0001187C                            
0001187C                            loc_D246:
0001187C 343C 00E0                                  move.w  #$E0,d2
00011880                            
00011880                            ObjSplats_FaceRight:
00011880 323C 0100                                  move.w  #$100,d1
00011884 08E8 0000 0001                             bset    #0,1(a0)
0001188A 3038 D008                                  move.w  ($FFFFD008).w,d0
0001188E 9068 0008                                  sub.w   8(a0),d0
00011892 6400                                       bcc.s   ObjSplats_Move
00011894 4440                                       neg.w   d0
00011896 4441                                       neg.w   d1
00011898 08A8 0000 0001                             bclr    #0,1(a0)
0001189E                            
0001189E                            ObjSplats_Move:
0001189E B042                                       cmp.w   d2,d0
000118A0 6400                                       bcc.s   ObjSplats_Bounce
000118A2 3141 0010                                  move.w  d1,$10(a0)
000118A6 5428 0024                                  addq.b  #2,$24(a0)
000118AA                            
000118AA                            ObjSplats_Bounce:
000118AA 6100 DE68                                  bsr.w   ObjectFall
000118AE 117C 0001 001A                             move.b  #1,$1A(a0)
000118B4 4A68 0012                                  tst.w   $12(a0)
000118B8 6B00                                       bmi.s   ObjSplats_Turn
000118BA 117C 0000 001A                             move.b  #0,$1A(a0)
000118C0 6100 0000                                  bsr.w   ObjFloorDist
000118C4 4A41                                       tst.w   d1
000118C6 6A00                                       bpl.s   ObjSplats_Turn
000118C8 3011                                       move.w  (a1),d0
000118CA 0240 03FF                                  andi.w  #$3FF,d0
000118CE 0C40 02D2                                  cmpi.w  #$2D2,d0
000118D2 6500                                       bcs.s   ObjSplats_Fall
000118D4 5428 0024                                  addq.b  #2,$24(a0)
000118D8 6000                                       bra.s   ObjSplats_Turn
000118DA                            ; ---------------------------------------------------------------------------
000118DA                            
000118DA                            ObjSplats_Fall:
000118DA D368 000C                                  add.w   d1,$C(a0)
000118DE 317C FC00 0012                             move.w  #$FC00,$12(a0)
000118E4                            
000118E4                            ObjSplats_Turn:
000118E4 6100 0000                                  bsr.w   Yad_ChkWall
000118E8 6700                                       beq.s   loc_D2C4
000118EA 4468 0010                                  neg.w   $10(a0)
000118EE 0868 0000 0001                             bchg    #0,1(a0)
000118F4 0868 0000 0022                             bchg    #0,$22(a0)
000118FA                            
000118FA                            loc_D2C4:
000118FA 6000 FDD6                                  bra.w   RememberState
000118FE                            ; ---------------------------------------------------------------------------
000118FE                            
000118FE                            loc_D2C8:
000118FE 6100 DE14                                  bsr.w   ObjectFall
00011902 6100 DE5C                                  bsr.w   DisplaySprite
00011906 4A28 0001                                  tst.b   1(a0)
0001190A 6A00 DE94                                  bpl.w   DeleteObject
0001190E 4E75                                       rts
0001190E 4E75                                       rts
00011910                            Map_Splats:	include	"_maps\Splats.asm"
00011910 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011912 0000                                       dc.w unk_D31B-Map_Splats_internal
00011914 02                         unk_D310:       dc.b   2
00011915 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
0001191F 02                         unk_D31B:       dc.b   2
00011920 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011920 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
0001192A                            
0001192A                            		include	"_incObj\50 Yadrin.asm"
0001192A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001192A                            
0001192A                            
0001192A                            Yad_ChkWall:
0001192A 3038 FE04                  		move.w	(v_framecount).w,d0
0001192E D047                       		add.w	d7,d0
00011930 0240 0003                  		andi.w	#3,d0
00011934 6600                       		bne.s	loc_F836
00011936 7600                       		moveq	#0,d3
00011938 1628 0014                  		move.b	obActWid(a0),d3
0001193C 4A68 0010                  		tst.w	obVelX(a0)
00011940 6B00                       		bmi.s	loc_F82C
00011942 6100 0000                  		bsr.w	ObjHitWallRight
00011946 4A41                       		tst.w	d1
00011948 6A00                       		bpl.s	loc_F836
0001194A                            
0001194A                            loc_F828:
0001194A 7001                       		moveq	#1,d0
0001194C 4E75                       		rts	
0001194E                            ; ===========================================================================
0001194E                            
0001194E                            loc_F82C:
0001194E 4643                       		not.w	d3
00011950 6100 0000                  		bsr.w	ObjHitWallLeft
00011954 4A41                       		tst.w	d1
00011956 6BF2                       		bmi.s	loc_F828
00011958                            
00011958                            loc_F836:
00011958 7000                       		moveq	#0,d0
0001195A 4E75                       		rts	
0001195C                            ; End of function Yad_ChkWall
0001195C                            
0001195C                            ; ===========================================================================
0001195C                            ; ---------------------------------------------------------------------------
0001195C                            ; Object 50 - Yadrin enemy (SYZ)
0001195C                            ; ---------------------------------------------------------------------------
0001195C                            
0001195C                            Yadrin:
0001195C 7000                       		moveq	#0,d0
0001195E 1028 0024                  		move.b	obRoutine(a0),d0
00011962 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011966 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
0001196A                            ; ===========================================================================
0001196A 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
0001196C 0000                       		dc.w Yad_Action-Yad_Index
0001196E                            
0001196E =00000030                  yad_timedelay:	equ $30
0001196E                            ; ===========================================================================
0001196E                            
0001196E                            Yad_Main:	; Routine 0
0001196E 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011976 317C 247B 0002             		move.w	#$247B,obGfx(a0)
0001197C 117C 0004 0001             		move.b	#4,obRender(a0)
00011982 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011988 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001198E 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011994 117C 0008 0017             		move.b	#8,obWidth(a0)
0001199A 117C 00CC 0020             		move.b	#$CC,obColType(a0)
000119A0 6100 DD72                  		bsr.w	ObjectFall
000119A4 6100 0000                  		bsr.w	ObjFloorDist
000119A8 4A41                       		tst.w	d1
000119AA 6A00                       		bpl.s	locret_F89E
000119AC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000119B0 317C 0000 0012             		move.w	#0,obVelY(a0)
000119B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000119BA 0868 0000 0022             		bchg	#0,obStatus(a0)
000119C0                            
000119C0                            	locret_F89E:
000119C0 4E75                       		rts	
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Yad_Action:	; Routine 2
000119C2 7000                       		moveq	#0,d0
000119C4 1028 0025                  		move.b	ob2ndRout(a0),d0
000119C8 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
000119CC 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
000119D0 43F9 0000 0000             		lea	(Ani_Yad).l,a1
000119D6 6100 AE70                  		bsr.w	AnimateSprite
000119DA 6000 FCF6                  		bra.w	RememberState
000119DE                            ; ===========================================================================
000119DE 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
000119E0 0000                       		dc.w Yad_FixToFloor-Yad_Index2
000119E2                            ; ===========================================================================
000119E2                            
000119E2                            Yad_Move:
000119E2 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
000119E6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000119E8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000119EC 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
000119F2 117C 0001 001C             		move.b	#1,obAnim(a0)
000119F8 0868 0000 0022             		bchg	#0,obStatus(a0)
000119FE 6600                       		bne.s	locret_F8E2
00011A00 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011A04                            
00011A04                            	locret_F8E2:
00011A04 4E75                       		rts	
00011A06                            ; ===========================================================================
00011A06                            
00011A06                            Yad_FixToFloor:
00011A06 6100 DD44                  		bsr.w	SpeedToPos
00011A0A 6100 0000                  		bsr.w	ObjFloorDist
00011A0E 0C41 FFF8                  		cmpi.w	#-8,d1
00011A12 6D00                       		blt.s	Yad_Pause
00011A14 0C41 000C                  		cmpi.w	#$C,d1
00011A18 6C00                       		bge.s	Yad_Pause
00011A1A D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011A1E 6100 FF0A                  		bsr.w	Yad_ChkWall
00011A22 6600                       		bne.s	Yad_Pause
00011A24 4E75                       		rts	
00011A26                            ; ===========================================================================
00011A26                            
00011A26                            Yad_Pause:
00011A26 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011A2A 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011A30 317C 0000 0010             		move.w	#0,obVelX(a0)
00011A36 117C 0000 001C             		move.b	#0,obAnim(a0)
00011A3C 4E75                       		rts	
00011A3C 4E75                       		rts	
00011A3E                            		include	"_anim\Yadrin.asm"
00011A3E                            ; ---------------------------------------------------------------------------
00011A3E                            ; Animation script - Yadrin enemy
00011A3E                            ; ---------------------------------------------------------------------------
00011A3E 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011A40 0000                       		dc.w @walk-Ani_Yad
00011A42                            
00011A42 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011A46 00                         		even
00011A46 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011A54                            		even
00011A54                            		even
00011A54                            Map_Yad:	include	"_maps\Yadrin.asm"
00011A54                            ; --------------------------------------------------------------------------------
00011A54                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011A54                            ; --------------------------------------------------------------------------------
00011A54                            
00011A54                            SME_4WhIu:	
00011A54 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011A58 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011A5C 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011A60 09                         SME_4WhIu_C:	dc.b 9	
00011A61 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A66 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A6B 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A70 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A75 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A7A FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A7F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A84 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A89 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A8E 09                         SME_4WhIu_3A:	dc.b 9	
00011A8F F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A94 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A99 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A9E FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011AA3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011AA8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011AAD F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011AB2 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011AB7 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011ABC 0C                         SME_4WhIu_68:	dc.b $C	
00011ABD EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011AC2 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011AC7 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011ACC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011AD1 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011AD6 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011ADB EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011AE0 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011AE5 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011AEA F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011AEF 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011AF4 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011AF9 0C                         SME_4WhIu_A5:	dc.b $C	
00011AFA F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011AFF FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011B04 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011B09 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011B0E 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011B13 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011B18 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011B1D EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011B22 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011B27 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011B2C 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011B31 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011B36 05                         SME_4WhIu_E2:	dc.b 5	
00011B37 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011B3C 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011B41 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011B46 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011B4B 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011B50 05                         SME_4WhIu_FC:	dc.b 5	
00011B51 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011B56 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011B5B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011B60 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011B65 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011B6A                            		even
00011B6A                            		even
00011B6A                            
00011B6A                            		include	"_incObj\sub SolidObject.asm"
00011B6A                            ; ---------------------------------------------------------------------------
00011B6A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011B6A                            ;
00011B6A                            ; input:
00011B6A                            ;	d1 = width
00011B6A                            ;	d2 = height / 2 (when jumping)
00011B6A                            ;	d3 = height / 2 (when walking)
00011B6A                            ;	d4 = x-axis position
00011B6A                            ; ---------------------------------------------------------------------------
00011B6A                            
00011B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B6A                            
00011B6A                            
00011B6A                            SolidObject:
00011B6A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011B6E 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011B72 3401                       		move.w	d1,d2
00011B74 D442                       		add.w	d2,d2
00011B76 43F8 D000                  		lea	(v_player).w,a1
00011B7A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B80 6600                       		bne.s	@leave		; if yes, branch
00011B82 3029 0008                  		move.w	obX(a1),d0
00011B86 9068 0008                  		sub.w	obX(a0),d0
00011B8A D041                       		add.w	d1,d0
00011B8C 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011B8E B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011B90 6500                       		bcs.s	@stand		; if not, branch
00011B92                            
00011B92                            	@leave:
00011B92 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011B98 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011B9E 4228 0025                  		clr.b	obSolid(a0)
00011BA2 7800                       		moveq	#0,d4
00011BA4 4E75                       		rts	
00011BA6                            
00011BA6                            	@stand:
00011BA6 3404                       		move.w	d4,d2
00011BA8 4EB9 0000 96B8             		jsr	MvSonicOnPtfm
00011BAE 7800                       		moveq	#0,d4
00011BB0 4E75                       		rts	
00011BB2                            ; ===========================================================================
00011BB2                            
00011BB2                            SolidObject71:
00011BB2 4A28 0025                  		tst.b	obSolid(a0)
00011BB6 6700 0000                  		beq.w	loc_FAD0
00011BBA 3401                       		move.w	d1,d2
00011BBC D442                       		add.w	d2,d2
00011BBE 43F8 D000                  		lea	(v_player).w,a1
00011BC2 0829 0001 0022             		btst	#1,obStatus(a1)
00011BC8 6600                       		bne.s	@leave
00011BCA 3029 0008                  		move.w	obX(a1),d0
00011BCE 9068 0008                  		sub.w	obX(a0),d0
00011BD2 D041                       		add.w	d1,d0
00011BD4 6B00                       		bmi.s	@leave
00011BD6 B042                       		cmp.w	d2,d0
00011BD8 6500                       		bcs.s	@stand
00011BDA                            
00011BDA                            	@leave:
00011BDA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011BE0 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011BE6 4228 0025                  		clr.b	obSolid(a0)
00011BEA 7800                       		moveq	#0,d4
00011BEC 4E75                       		rts	
00011BEE                            
00011BEE                            	@stand:
00011BEE 3404                       		move.w	d4,d2
00011BF0 4EB9 0000 96B8             		jsr	MvSonicOnPtfm
00011BF6 7800                       		moveq	#0,d4
00011BF8 4E75                       		rts	
00011BFA                            ; ===========================================================================
00011BFA                            
00011BFA                            SolidObject2F:
00011BFA 43F8 D000                  		lea	(v_player).w,a1
00011BFE 4A28 0001                  		tst.b	obRender(a0)
00011C02 6A00 0000                  		bpl.w	Solid_Ignore
00011C06 3029 0008                  		move.w	obX(a1),d0
00011C0A 9068 0008                  		sub.w	obX(a0),d0
00011C0E D041                       		add.w	d1,d0
00011C10 6B00 0000                  		bmi.w	Solid_Ignore
00011C14 3601                       		move.w	d1,d3
00011C16 D643                       		add.w	d3,d3
00011C18 B043                       		cmp.w	d3,d0
00011C1A 6200 0000                  		bhi.w	Solid_Ignore
00011C1E 3A00                       		move.w	d0,d5
00011C20 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011C26 6700                       		beq.s	@notflipped	; if not, branch
00011C28 4645                       		not.w	d5
00011C2A DA43                       		add.w	d3,d5
00011C2C                            
00011C2C                            	@notflipped:
00011C2C E24D                       		lsr.w	#1,d5
00011C2E 7600                       		moveq	#0,d3
00011C30 1632 5000                  		move.b	(a2,d5.w),d3
00011C34 9612                       		sub.b	(a2),d3
00011C36 3A28 000C                  		move.w	obY(a0),d5
00011C3A 9A43                       		sub.w	d3,d5
00011C3C 1629 0016                  		move.b	obHeight(a1),d3
00011C40 4883                       		ext.w	d3
00011C42 D443                       		add.w	d3,d2
00011C44 3629 000C                  		move.w	obY(a1),d3
00011C48 9645                       		sub.w	d5,d3
00011C4A 5843                       		addq.w	#4,d3
00011C4C D642                       		add.w	d2,d3
00011C4E 6B00 0000                  		bmi.w	Solid_Ignore
00011C52 3802                       		move.w	d2,d4
00011C54 D844                       		add.w	d4,d4
00011C56 B644                       		cmp.w	d4,d3
00011C58 6400 0000                  		bcc.w	Solid_Ignore
00011C5C 6000 0000                  		bra.w	loc_FB0E
00011C60                            ; ===========================================================================
00011C60                            
00011C60                            Solid_ChkEnter:
00011C60 4A28 0001                  		tst.b	obRender(a0)
00011C64 6A00 0000                  		bpl.w	Solid_Ignore
00011C68                            
00011C68                            loc_FAD0:
00011C68 43F8 D000                  		lea	(v_player).w,a1
00011C6C 3029 0008                  		move.w	obX(a1),d0
00011C70 9068 0008                  		sub.w	obX(a0),d0
00011C74 D041                       		add.w	d1,d0
00011C76 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011C7A 3601                       		move.w	d1,d3
00011C7C D643                       		add.w	d3,d3
00011C7E B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011C80 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011C84 1629 0016                  		move.b	obHeight(a1),d3
00011C88 4883                       		ext.w	d3
00011C8A D443                       		add.w	d3,d2
00011C8C 3629 000C                  		move.w	obY(a1),d3
00011C90 9668 000C                  		sub.w	obY(a0),d3
00011C94 5843                       		addq.w	#4,d3
00011C96 D642                       		add.w	d2,d3
00011C98 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011C9C 3802                       		move.w	d2,d4
00011C9E D844                       		add.w	d4,d4
00011CA0 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011CA2 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011CA6                            
00011CA6                            loc_FB0E:
00011CA6 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011CAA 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011CAE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011CB4 6400 0000                  			bcc.w	Solid_Debug
00011CB8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011CBC 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011CC0 3A00                       		move.w	d0,d5
00011CC2 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011CC4 6400                       		bcc.s	@isright	; if yes, branch
00011CC6 D241                       		add.w	d1,d1
00011CC8 9041                       		sub.w	d1,d0
00011CCA 3A00                       		move.w	d0,d5
00011CCC 4445                       		neg.w	d5
00011CCE                            
00011CCE                            	@isright:
00011CCE 3203                       		move.w	d3,d1
00011CD0 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011CD2 6400                       		bcc.s	@isbelow	; if yes, branch
00011CD4                            
00011CD4 5943                       		subq.w	#4,d3
00011CD6 9644                       		sub.w	d4,d3
00011CD8 3203                       		move.w	d3,d1
00011CDA 4441                       		neg.w	d1
00011CDC                            
00011CDC                            	@isbelow:
00011CDC BA41                       		cmp.w	d1,d5
00011CDE 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011CE2 0C41 0004                  		cmpi.w	#4,d1
00011CE6 6300                       		bls.s	Solid_SideAir
00011CE8 4A40                       		tst.w	d0		; where is Sonic?
00011CEA 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011CEC 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011CEE 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011CF2 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011CF4 6000                       		bra.s	Solid_Left
00011CF6                            ; ===========================================================================
00011CF6                            
00011CF6                            Solid_Right:
00011CF6 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011CFA 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011CFC                            
00011CFC                            Solid_Left:
00011CFC 337C 0000 0020             		move.w	#0,obInertia(a1)
00011D02 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011D08                            
00011D08                            Solid_Centre:
00011D08 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011D0C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D12 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011D14 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011D1A 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011D20 7801                       		moveq	#1,d4		; return side collision
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            Solid_SideAir:
00011D24 6100                       		bsr.s	Solid_NotPushing
00011D26 7801                       		moveq	#1,d4		; return side collision
00011D28 4E75                       		rts	
00011D2A                            ; ===========================================================================
00011D2A                            
00011D2A                            Solid_Ignore:
00011D2A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011D30 6700                       		beq.s	Solid_Debug	; if not, branch
00011D32 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011D38 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011D3A 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011D40 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011D42 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011D48 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011D4A 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011D50                            
00011D50                            
00011D50                            Solid_NotPushing:
00011D50 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011D56 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011D5C                            
00011D5C                            Solid_Debug:
00011D5C 7800                       		moveq	#0,d4		; return no collision
00011D5E 4E75                       		rts	
00011D60                            ; ===========================================================================
00011D60                            
00011D60                            Solid_TopBottom:
00011D60 4A43                       		tst.w	d3		; is Sonic below the object?
00011D62 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011D64 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011D68 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011D6A 60BE                       		bra.s	Solid_Ignore
00011D6C                            ; ===========================================================================
00011D6C                            
00011D6C                            Solid_Below:
00011D6C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011D70 6700                       		beq.s	Solid_Squash	; if not, branch
00011D72 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011D74 4A43                       		tst.w	d3		; is Sonic above the object?
00011D76 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011D78 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D7C 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011D82                            
00011D82                            Solid_TopBtmAir:
00011D82 78FF                       		moveq	#-1,d4
00011D84 4E75                       		rts	
00011D86                            ; ===========================================================================
00011D86                            
00011D86                            Solid_Squash:
00011D86 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D8C 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011D8E 2F08                       		move.l	a0,-(sp)
00011D90 2049                       		movea.l	a1,a0
00011D92 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011D98 205F                       		movea.l	(sp)+,a0
00011D9A 78FF                       		moveq	#-1,d4
00011D9C 4E75                       		rts	
00011D9E                            ; ===========================================================================
00011D9E                            
00011D9E                            Solid_Landed:
00011D9E 5943                       		subq.w	#4,d3
00011DA0 7200                       		moveq	#0,d1
00011DA2 1228 0014                  		move.b	obActWid(a0),d1
00011DA6 3401                       		move.w	d1,d2
00011DA8 D442                       		add.w	d2,d2
00011DAA D269 0008                  		add.w	obX(a1),d1
00011DAE 9268 0008                  		sub.w	obX(a0),d1
00011DB2 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011DB4 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011DB6 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011DB8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011DBC 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011DBE 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011DC2 5369 000C                  		subq.w	#1,obY(a1)
00011DC6 6100                       		bsr.s	Solid_ResetFloor
00011DC8 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011DCE 08E8 0003 0022             		bset	#3,obStatus(a0)
00011DD4 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011DD6 4E75                       		rts	
00011DD8                            ; ===========================================================================
00011DD8                            
00011DD8                            Solid_Miss:
00011DD8 7800                       		moveq	#0,d4
00011DDA 4E75                       		rts	
00011DDC                            ; End of function SolidObject
00011DDC                            
00011DDC                            
00011DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DDC                            
00011DDC                            
00011DDC                            Solid_ResetFloor:
00011DDC 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011DE2 6700                       		beq.s	@notonobj	; if not, branch
00011DE4                            
00011DE4 7000                       		moveq	#0,d0
00011DE6 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011DEA ED48                       		lsl.w	#6,d0
00011DEC 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011DF2 2440                       		movea.l	d0,a2
00011DF4 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011DFA 422A 0025                  		clr.b	obSolid(a2)
00011DFE                            
00011DFE                            	@notonobj:
00011DFE 3008                       		move.w	a0,d0
00011E00 0440 D000                  		subi.w	#$D000,d0
00011E04 EC48                       		lsr.w	#6,d0
00011E06 0240 007F                  		andi.w	#$7F,d0
00011E0A 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011E0E 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011E14 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011E1A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011E20 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011E26 6700                       		beq.s	@notinair	; if not, branch
00011E28 2F08                       		move.l	a0,-(sp)
00011E2A 2049                       		movea.l	a1,a0
00011E2C 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011E32 205F                       		movea.l	(sp)+,a0
00011E34                            
00011E34                            	@notinair:
00011E34 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011E3A 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011E40 4E75                       		rts	
00011E42                            ; End of function Solid_ResetFloor
00011E42                            ; End of function Solid_ResetFloor
00011E42                            
00011E42                            		include	"_incObj\51 Smashable Green Block.asm"
00011E42                            ; ---------------------------------------------------------------------------
00011E42                            ; Object 51 - smashable	green block (MZ)
00011E42                            ; ---------------------------------------------------------------------------
00011E42                            
00011E42                            SmashBlock:
00011E42 7000                       		moveq	#0,d0
00011E44 1028 0024                  		move.b	obRoutine(a0),d0
00011E48 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011E4C 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011E50 6000 F880                  		bra.w	RememberState
00011E54                            ; ===========================================================================
00011E54 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011E56 0000                       		dc.w Smab_Solid-Smab_Index
00011E58 0000                       		dc.w Smab_Points-Smab_Index
00011E5A                            ; ===========================================================================
00011E5A                            
00011E5A                            Smab_Main:	; Routine 0
00011E5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00011E5E 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011E66 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011E6C 117C 0004 0001             		move.b	#4,obRender(a0)
00011E72 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011E78 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E7E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011E84                            
00011E84                            Smab_Solid:	; Routine 2
00011E84                            
00011E84 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011E84 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011E84                            
00011E84 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011E8A 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011E90 323C 001B                  		move.w	#$1B,d1
00011E94 343C 0010                  		move.w	#$10,d2
00011E98 363C 0011                  		move.w	#$11,d3
00011E9C 3828 0008                  		move.w	obX(a0),d4
00011EA0 6100 FCC8                  		bsr.w	SolidObject
00011EA4 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011EAA 6600                       		bne.s	@smash		; if yes, branch
00011EAC                            
00011EAC                            	@notspinning:
00011EAC 4E75                       		rts	
00011EAE                            ; ===========================================================================
00011EAE                            
00011EAE                            @smash:
00011EAE 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011EB4 66F6                       		bne.s	@notspinning	; if not, branch
00011EB6 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011EBC 08E9 0002 0022             		bset	#2,obStatus(a1)
00011EC2 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011EC8 137C 0007 0017             		move.b	#7,obWidth(a1)
00011ECE 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011ED4 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011EDA 08E9 0001 0022             		bset	#1,obStatus(a1)
00011EE0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011EE6 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011EEC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011EF2 4228 0025                  		clr.b	obSolid(a0)
00011EF6 117C 0001 001A             		move.b	#1,obFrame(a0)
00011EFC 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011F02 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011F04 343C 0038                  		move.w	#$38,d2
00011F08 6100 D43A                  		bsr.w	SmashObject
00011F0C 6100 DCDE                  		bsr.w	FindFreeObj
00011F10 6600                       		bne.s	Smab_Points
00011F12 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011F16 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011F1C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011F22 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011F26 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011F2A 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011F2E 6500                       		bcs.s	@bonus		; if yes, branch
00011F30 7406                       		moveq	#6,d2		; set cap for points
00011F32                            
00011F32                            	@bonus:
00011F32 7000                       		moveq	#0,d0
00011F34 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011F38 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011F3E 6500                       		bcs.s	@givepoints	; if not, branch
00011F40 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011F44 740A                       		moveq	#10,d2
00011F46                            
00011F46                            	@givepoints:
00011F46 4EB9 0000 0000             		jsr	(AddPoints).l
00011F4C E24A                       		lsr.w	#1,d2
00011F4E 1342 001A                  		move.b	d2,obFrame(a1)
00011F52                            
00011F52                            Smab_Points:	; Routine 4
00011F52 6100 D7F8                  		bsr.w	SpeedToPos
00011F56 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011F5C 6100 D802                  		bsr.w	DisplaySprite
00011F60 4A28 0001                  		tst.b	obRender(a0)
00011F64 6A00 D83A                  		bpl.w	DeleteObject
00011F68 4E75                       		rts	
00011F6A                            ; ===========================================================================
00011F6A FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011F6E FF00 FF00                  		dc.w -$100, -$100
00011F72 0200 FE00                  		dc.w $200, -$200
00011F76 0100 FF00                  		dc.w $100, -$100
00011F7A                            
00011F7A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F7A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F82                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011F82                            ; ---------------------------------------------------------------------------
00011F82                            ; Sprite mappings - smashable green block (MZ)
00011F82                            ; ---------------------------------------------------------------------------
00011F82                            Map_Smab_internal:
00011F82 0000                       		dc.w @two-Map_Smab_internal
00011F84 0000                       		dc.w @four-Map_Smab_internal
00011F86 02                         @two:		dc.b 2
00011F87 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
00011F8C 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00011F91 04                         @four:		dc.b 4
00011F92 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
00011F97 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00011F9C F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00011FA1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011FA6                            		even
00011FA6                            		even
00011FA6                            
00011FA6                            		include	"_incObj\52 Moving Blocks.asm"
00011FA6                            ; ---------------------------------------------------------------------------
00011FA6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011FA6                            ; ---------------------------------------------------------------------------
00011FA6                            
00011FA6                            MovingBlock:
00011FA6 7000                       		moveq	#0,d0
00011FA8 1028 0024                  		move.b	obRoutine(a0),d0
00011FAC 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011FB0 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011FB4                            ; ===========================================================================
00011FB4 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011FB6 0000                       		dc.w MBlock_Platform-MBlock_Index
00011FB8 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011FBA                            
00011FBA =00000030                  mblock_origX:	equ $30
00011FBA =00000032                  mblock_origY:	equ $32
00011FBA                            
00011FBA 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011FBC 2001                       		dc.b $20, 1
00011FBE 2002                       		dc.b $20, 2
00011FC0 4003                       		dc.b $40, 3
00011FC2 3004                       		dc.b $30, 4
00011FC4                            ; ===========================================================================
00011FC4                            
00011FC4                            MBlock_Main:	; Routine 0
00011FC4 5428 0024                  		addq.b	#2,obRoutine(a0)
00011FC8 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011FD0 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011FD6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011FDC 6600                       		bne.s	loc_FE44
00011FDE 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011FE6 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011FEC 117C 0007 0016             		move.b	#7,obHeight(a0)
00011FF2                            
00011FF2                            loc_FE44:
00011FF2 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011FF8 6600                       		bne.s	loc_FE60
00011FFA 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00012000 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012006 6700                       		beq.s	loc_FE60	; if yes, branch
00012008 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
0001200E                            
0001200E                            loc_FE60:
0001200E 117C 0004 0001             		move.b	#4,obRender(a0)
00012014 7000                       		moveq	#0,d0
00012016 1028 0028                  		move.b	obSubtype(a0),d0
0001201A E648                       		lsr.w	#3,d0
0001201C 0240 001E                  		andi.w	#$1E,d0
00012020 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012024 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012028 115A 001A                  		move.b	(a2)+,obFrame(a0)
0001202C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012032 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012038 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001203E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012044                            
00012044                            MBlock_Platform: ; Routine 2
00012044 6100 0000                  		bsr.w	MBlock_Move
00012048 7200                       		moveq	#0,d1
0001204A 1228 0014                  		move.b	obActWid(a0),d1
0001204E 4EB9 0000 8FE6             		jsr	(PlatformObject).l
00012054 6000                       		bra.s	MBlock_ChkDel
00012056                            ; ===========================================================================
00012056                            
00012056                            MBlock_StandOn:	; Routine 4
00012056 7200                       		moveq	#0,d1
00012058 1228 0014                  		move.b	obActWid(a0),d1
0001205C 4EB9 0000 915A             		jsr	(ExitPlatform).l
00012062 3F28 0008                  		move.w	obX(a0),-(sp)
00012066 6100 0000                  		bsr.w	MBlock_Move
0001206A 341F                       		move.w	(sp)+,d2
0001206C 4EB9 0000 96C4             		jsr	(MvSonicOnPtfm2).l
00012072                            
00012072                            MBlock_ChkDel:
00012090 6000 D6CE                  		bra.w	DisplaySprite
00012094                            ; ===========================================================================
00012094                            
00012094                            MBlock_Move:
00012094 7000                       		moveq	#0,d0
00012096 1028 0028                  		move.b	obSubtype(a0),d0
0001209A 0240 000F                  		andi.w	#$F,d0
0001209E D040                       		add.w	d0,d0
000120A0 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000120A4 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000120A8                            ; ===========================================================================
000120A8 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000120AC 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000120B0 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000120B4 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000120B8 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000120BC 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000120BE                            ; ===========================================================================
000120BE                            
000120BE                            MBlock_Type00:
000120BE 4E75                       		rts	
000120C0                            ; ===========================================================================
000120C0                            
000120C0                            MBlock_Type01:
000120C0 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000120C4 323C 0060                  		move.w	#$60,d1
000120C8 0828 0000 0022             		btst	#0,obStatus(a0)
000120CE 6700                       		beq.s	loc_FF26
000120D0 4440                       		neg.w	d0
000120D2 D041                       		add.w	d1,d0
000120D4                            
000120D4                            loc_FF26:
000120D4 3228 0030                  		move.w	mblock_origX(a0),d1
000120D8 9240                       		sub.w	d0,d1
000120DA 3141 0008                  		move.w	d1,obX(a0)
000120DE 4E75                       		rts	
000120E0                            ; ===========================================================================
000120E0                            
000120E0                            MBlock_Type02:
000120E0 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000120E6 6600                       		bne.s	MBlock_02_Wait
000120E8 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000120EC                            
000120EC                            MBlock_02_Wait:
000120EC 4E75                       		rts	
000120EE                            ; ===========================================================================
000120EE                            
000120EE                            MBlock_Type03:
000120EE 7600                       		moveq	#0,d3
000120F0 1628 0014                  		move.b	obActWid(a0),d3
000120F4 6100 0000                  		bsr.w	ObjHitWallRight
000120F8 4A41                       		tst.w	d1		; has the platform hit a wall?
000120FA 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000120FC 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012100 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012106 4E75                       		rts	
00012108                            ; ===========================================================================
00012108                            
00012108                            MBlock_03_End:
00012108 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001210C 4E75                       		rts	
0001210E                            ; ===========================================================================
0001210E                            
0001210E                            MBlock_Type05:
0001210E 7600                       		moveq	#0,d3
00012110 1628 0014                  		move.b	obActWid(a0),d3
00012114 6100 0000                  		bsr.w	ObjHitWallRight
00012118 4A41                       		tst.w	d1		; has the platform hit a wall?
0001211A 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001211C 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012120 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012126 4E75                       		rts	
00012128                            ; ===========================================================================
00012128                            
00012128                            MBlock_05_End:
00012128 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
0001212C 4E75                       		rts	
0001212E                            ; ===========================================================================
0001212E                            
0001212E                            MBlock_Type06:
0001212E 6100 D61C                  		bsr.w	SpeedToPos
00012132 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012138 6100 0000                  		bsr.w	ObjFloorDist
0001213C 4A41                       		tst.w	d1		; has platform hit the floor?
0001213E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012142 D368 000C                  		add.w	d1,obY(a0)
00012146 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
0001214A 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001214E                            
0001214E                            locret_FFA0:
0001214E 4E75                       		rts	
00012150                            ; ===========================================================================
00012150                            
00012150                            MBlock_Type07:
00012150 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012154 6700                       		beq.s	MBlock_07_ChkDel
00012156 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
0001215A                            
0001215A                            MBlock_07_ChkDel:
0001215A 588F                       		addq.l	#4,sp
0001217A 4E75                       		rts	
0001217C                            ; ===========================================================================
0001217C                            
0001217C                            MBlock_Type08:
0001217C 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012180 323C 0080                  		move.w	#$80,d1
00012184 0828 0000 0022             		btst	#0,obStatus(a0)
0001218A 6700                       		beq.s	loc_FFE2
0001218C 4440                       		neg.w	d0
0001218E D041                       		add.w	d1,d0
00012190                            
00012190                            loc_FFE2:
00012190 3228 0032                  		move.w	mblock_origY(a0),d1
00012194 9240                       		sub.w	d0,d1
00012196 3141 000C                  		move.w	d1,obY(a0)
0001219A 4E75                       		rts	
0001219C                            ; ===========================================================================
0001219C                            
0001219C                            MBlock_Type0A:
0001219C 7600                       		moveq	#0,d3
0001219E 1628 0014                  		move.b	obActWid(a0),d3
000121A2 D643                       		add.w	d3,d3
000121A4 7208                       		moveq	#8,d1
000121A6 0828 0000 0022             		btst	#0,obStatus(a0)
000121AC 6700                       		beq.s	loc_10004
000121AE 4441                       		neg.w	d1
000121B0 4443                       		neg.w	d3
000121B2                            
000121B2                            loc_10004:
000121B2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000121B6 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000121B8 3028 0008                  		move.w	obX(a0),d0
000121BC 9068 0030                  		sub.w	mblock_origX(a0),d0
000121C0 B043                       		cmp.w	d3,d0
000121C2 6700                       		beq.s	MBlock_0A_Wait
000121C4 D368 0008                  		add.w	d1,obX(a0)	; move platform
000121C8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000121CE 4E75                       		rts	
000121D0                            ; ===========================================================================
000121D0                            
000121D0                            MBlock_0A_Wait:
000121D0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000121D4 6600                       		bne.s	locret_1002E	; if time remains, branch
000121D6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000121DC                            
000121DC                            locret_1002E:
000121DC 4E75                       		rts	
000121DE                            ; ===========================================================================
000121DE                            
000121DE                            MBlock_0A_Back:
000121DE 3028 0008                  		move.w	obX(a0),d0
000121E2 9068 0030                  		sub.w	mblock_origX(a0),d0
000121E6 6700                       		beq.s	MBlock_0A_Reset
000121E8 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000121EC 4E75                       		rts	
000121EE                            ; ===========================================================================
000121EE                            
000121EE                            MBlock_0A_Reset:
000121EE 4268 0036                  		clr.w	$36(a0)
000121F2 5328 0028                  		subq.b	#1,obSubtype(a0)
000121F6 4E75                       		rts	
000121F6 4E75                       		rts	
000121F8                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000121F8                            ; ---------------------------------------------------------------------------
000121F8                            ; Sprite mappings - moving blocks (MZ, SBZ)
000121F8                            ; ---------------------------------------------------------------------------
000121F8                            Map_MBlock_internal:
000121F8 0000                       		dc.w @mz1-Map_MBlock_internal
000121FA 0000                       		dc.w @mz2-Map_MBlock_internal
000121FC 0000                       		dc.w @sbz-Map_MBlock_internal
000121FE 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012200 0000                       		dc.w @mz3-Map_MBlock_internal
00012202 01                         @mz1:		dc.b 1
00012203 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012208 02                         @mz2:		dc.b 2
00012209 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001220E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012213 04                         @sbz:		dc.b 4
00012214 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012219 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001221E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012223 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012228 04                         @sbzwide:	dc.b 4
00012229 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001222E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012233 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012238 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001223D 03                         @mz3:		dc.b 3
0001223E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012243 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012248 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001224E 00                         		even
0001224E 00                         		even
0001224E                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001224E                            ; ---------------------------------------------------------------------------
0001224E                            ; Sprite mappings - moving block (LZ)
0001224E                            ; ---------------------------------------------------------------------------
0001224E                            Map_MBlockLZ_internal:
0001224E 0000                       		dc.w @0-Map_MBlockLZ_internal
00012250 01                         @0:		dc.b 1
00012251 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012256                            		even
00012256                            		even
00012256                            
00012256                            		include	"_incObj\55 Basaran.asm"
00012256                            ; ---------------------------------------------------------------------------
00012256                            ; Object 55 - Basaran enemy (MZ)
00012256                            ; ---------------------------------------------------------------------------
00012256                            
00012256                            Basaran:
00012256 7000                       		moveq	#0,d0
00012258 1028 0024                  		move.b	obRoutine(a0),d0
0001225C 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012260 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012264                            ; ===========================================================================
00012264 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012266 0000                       		dc.w Bas_Action-Bas_Index
00012268                            ; ===========================================================================
00012268                            
00012268                            Bas_Main:	; Routine 0
00012268 5428 0024                  		addq.b	#2,obRoutine(a0)
0001226C 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012274 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
0001227A 117C 0004 0001             		move.b	#4,obRender(a0)
00012280 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012286 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001228C 117C 000B 0020             		move.b	#$B,obColType(a0)
00012292 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012298                            
00012298                            Bas_Action:	; Routine 2
00012298 7000                       		moveq	#0,d0
0001229A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001229E 323B 0000                  		move.w	@index(pc,d0.w),d1
000122A2 4EBB 1000                  		jsr	@index(pc,d1.w)
000122A6 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000122AC 6100 A59A                  		bsr.w	AnimateSprite
000122B0 6000 F420                  		bra.w	RememberState
000122B4                            ; ===========================================================================
000122B4 0000                       @index:		dc.w @dropcheck-@index
000122B6 0000                       		dc.w @dropfly-@index
000122B8 0000                       		dc.w @flapsound-@index
000122BA 0000                       		dc.w @flyup-@index
000122BC                            ; ===========================================================================
000122BC                            
000122BC                            @dropcheck:
000122BC 343C 0080                  		move.w	#$80,d2
000122C0 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000122C4 6400                       		bcc.s	@nodrop		; if not, branch
000122C6 3038 D00C                  		move.w	(v_player+obY).w,d0
000122CA 3140 0036                  		move.w	d0,$36(a0)
000122CE 9068 000C                  		sub.w	obY(a0),d0
000122D2 6500                       		bcs.s	@nodrop
000122D4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000122D8 6400                       		bcc.s	@nodrop		; if not, branch
000122DA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000122DE 6600                       		bne.s	@nodrop		; if yes, branch
000122E0                            
000122E0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000122E4 D007                       		add.b	d7,d0
000122E6 0200 0007                  		andi.b	#7,d0
000122EA 6600                       		bne.s	@nodrop
000122EC 117C 0001 001C             		move.b	#1,obAnim(a0)
000122F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000122F6                            
000122F6                            	@nodrop:
000122F6 4E75                       		rts	
000122F8                            ; ===========================================================================
000122F8                            
000122F8                            @dropfly:
000122F8 6100 D452                  		bsr.w	SpeedToPos
000122FC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012302 343C 0080                  		move.w	#$80,d2
00012306 6100 0000                  		bsr.w	@chkdistance
0001230A 3028 0036                  		move.w	$36(a0),d0
0001230E 9068 000C                  		sub.w	obY(a0),d0
00012312 6500                       		bcs.s	@chkdel
00012314 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012318 6400                       		bcc.s	@dropmore	; if not, branch
0001231A 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001231E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012324 117C 0002 001C             		move.b	#2,obAnim(a0)
0001232A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001232E                            
0001232E                            	@dropmore:
0001232E 4E75                       		rts	
00012330                            
00012330                            	@chkdel:
00012330 4A28 0001                  		tst.b	obRender(a0)
00012334 6A00 D46A                  		bpl.w	DeleteObject
00012338 4E75                       		rts	
0001233A                            ; ===========================================================================
0001233A                            
0001233A                            @flapsound:
0001233A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001233E 0200 000F                  		andi.b	#$F,d0
00012342 6600                       		bne.s	@nosound
0001234E                            
0001234E                            	@nosound:
0001234E 6100 D3FC                  		bsr.w	SpeedToPos
00012352 3038 D008                  		move.w	(v_player+obX).w,d0
00012356 9068 0008                  		sub.w	obX(a0),d0
0001235A 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001235C 4440                       		neg.w	d0
0001235E                            
0001235E                            	@isright:
0001235E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012362 6500                       		bcs.s	@dontflyup	; if yes, branch
00012364 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012368 D007                       		add.b	d7,d0
0001236A 0200 0007                  		andi.b	#7,d0
0001236E 6600                       		bne.s	@dontflyup
00012370 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012374                            
00012374                            @dontflyup:
00012374 4E75                       		rts	
00012376                            ; ===========================================================================
00012376                            
00012376                            @flyup:
00012376 6100 D3D4                  		bsr.w	SpeedToPos
0001237A 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012380 6100 0000                  		bsr.w	ObjHitCeiling
00012384 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012386 6A00                       		bpl.s	@noceiling	; if not, branch
00012388 9368 000C                  		sub.w	d1,obY(a0)
0001238C 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
00012392 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012396 4268 0012                  		clr.w	obVelY(a0)
0001239A 4228 001C                  		clr.b	obAnim(a0)
0001239E 4228 0025                  		clr.b	ob2ndRout(a0)
000123A2                            
000123A2                            	@noceiling:
000123A2 4E75                       		rts	
000123A4                            ; ===========================================================================
000123A4                            
000123A4                            ; Subroutine to check Sonic's distance from the basaran
000123A4                            
000123A4                            ; input:
000123A4                            ;	d2 = distance to compare
000123A4                            
000123A4                            ; output:
000123A4                            ;	d0 = distance between Sonic and basaran
000123A4                            ;	d1 = speed/direction for basaran to fly
000123A4                            
000123A4                            @chkdistance:
000123A4 323C 0100                  		move.w	#$100,d1
000123A8 08E8 0000 0022             		bset	#0,obStatus(a0)
000123AE 3038 D008                  		move.w	(v_player+obX).w,d0
000123B2 9068 0008                  		sub.w	obX(a0),d0
000123B6 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000123B8 4440                       		neg.w	d0
000123BA 4441                       		neg.w	d1
000123BC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000123C2                            
000123C2                            	@right:
000123C2 B042                       		cmp.w	d2,d0
000123C4 4E75                       		rts	
000123C6                            ; ===========================================================================
000123C6                            ; unused crap
000123C6 6100 D384                  		bsr.w	SpeedToPos
000123CA 6100 D394                  		bsr.w	DisplaySprite
000123CE 4A28 0001                  		tst.b	obRender(a0)
000123D2 6A00 D3CC                  		bpl.w	DeleteObject
000123D6 4E75                       		rts	
000123D6 4E75                       		rts	
000123D8                            		include	"_anim\Basaran.asm"
000123D8                            ; ---------------------------------------------------------------------------
000123D8                            ; Animation script - Basaran enemy
000123D8                            ; ---------------------------------------------------------------------------
000123D8 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000123DA 0000                       		dc.w @fall-Ani_Bas
000123DC 0000                       		dc.w @fly-Ani_Bas
000123DE 0F00 FF                    @still:		dc.b $F, 0, afEnd
000123E2 00                         		even
000123E2 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000123E6 00                         		even
000123E6 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000123EC                            		even
000123EC                            		even
000123EC                            Map_Bas:	include	"_maps\Basaran.asm"
000123EC                            ; --------------------------------------------------------------------------------
000123EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000123EC                            ; --------------------------------------------------------------------------------
000123EC                            
000123EC                            SME_RhYYA:	
000123EC 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000123F0 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000123F4 01                         SME_RhYYA_8:	dc.b 1	
000123F5 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000123FA 03                         SME_RhYYA_E:	dc.b 3	
000123FB F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012400 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012405 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
0001240A 04                         SME_RhYYA_1E:	dc.b 4	
0001240B F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012410 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012415 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
0001241A 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001241F 04                         SME_RhYYA_33:	dc.b 4	
00012420 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012425 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
0001242A 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001242F FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012434                            		even
00012434                            		even
00012434                            
00012434                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012434                            ; ---------------------------------------------------------------------------
00012434                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012434                            ; ---------------------------------------------------------------------------
00012434                            
00012434                            FloatingBlock:
00012434 7000                       		moveq	#0,d0
00012436 1028 0024                  		move.b	obRoutine(a0),d0
0001243A 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001243E 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012442                            ; ===========================================================================
00012442 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012444 0000                       		dc.w FBlock_Action-FBlock_Index
00012446                            
00012446 =00000034                  fb_origX:	equ $34		; original x-axis position
00012446 =00000030                  fb_origY:	equ $30		; original y-axis position
00012446 =0000003A                  fb_height:	equ $3A		; total object height
00012446 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012446                            
00012446                            FBlock_Var:	; width/2, height/2
00012446 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012448 2020                       		dc.b  $20, $20	; subtype 1x/9x
0001244A 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001244C 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001244E 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012450 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012452 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012454 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012456                            ; ===========================================================================
00012456                            
00012456                            FBlock_Main:	; Routine 0
00012456 5428 0024                  		addq.b	#2,obRoutine(a0)
0001245A 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012462 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012468 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001246E 6600                       		bne.s	@notLZ
00012470 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012476                            
00012476                            	@notLZ:
00012476 117C 0004 0001             		move.b	#4,obRender(a0)
0001247C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00012482 7000                       		moveq	#0,d0
00012484 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012488 E648                       		lsr.w	#3,d0
0001248A 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
0001248E 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
00012492 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012496 1152 0016                  		move.b	(a2),obHeight(a0)
0001249A E248                       		lsr.w	#1,d0
0001249C 1140 001A                  		move.b	d0,obFrame(a0)
000124A0 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000124A6 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000124AC 7000                       		moveq	#0,d0
000124AE 1012                       		move.b	(a2),d0
000124B0 D040                       		add.w	d0,d0
000124B2 3140 003A                  		move.w	d0,fb_height(a0)
000124B6 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000124BC 6600                       			bne.s	@dontdelete
000124BE 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000124C4 6600                       			bne.s	@notatpos
000124C6 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000124CA 6700                       			beq.s	@dontdelete
000124CC 4EF9 0000 F7A0             			jmp	(DeleteObject).l
000124D2                            	@notatpos:
000124D2 4228 0028                  			clr.b	obSubtype(a0)
000124D6 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000124DA 6600                       			bne.s	@dontdelete
000124DC 4EF9 0000 F7A0             			jmp	(DeleteObject).l
000124E2                            	@dontdelete:
000124E2 7000                       		moveq	#0,d0
000124E4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000124EA 6700                       		beq.s	@stillnotLZ
000124EC 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000124F0 0240 000F                  		andi.w	#$F,d0
000124F4 5140                       		subq.w	#8,d0
000124F6 6500                       		bcs.s	@stillnotLZ
000124F8 E548                       		lsl.w	#2,d0
000124FA 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000124FE 45F2 0000                  		lea	(a2,d0.w),a2
00012502 4A52                       		tst.w	(a2)
00012504 6A00                       		bpl.s	@stillnotLZ
00012506 0868 0000 0022             		bchg	#0,obStatus(a0)
0001250C                            
0001250C                            	@stillnotLZ:
0001250C 1028 0028                  		move.b	obSubtype(a0),d0
00012510 6A00                       		bpl.s	FBlock_Action
00012512 0200 000F                  		andi.b	#$F,d0
00012516 1140 003C                  		move.b	d0,fb_type(a0)
0001251A 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012520 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012526 6600                       		bne.s	@chkstate
00012528 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001252E 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012534                            
00012534                            @chkstate:
00012534 45F8 FC00                  		lea	(v_objstate).w,a2
00012538 7000                       		moveq	#0,d0
0001253A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001253E 6700                       		beq.s	FBlock_Action
00012540 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012546 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001254C 6700                       		beq.s	FBlock_Action
0001254E 5228 0028                  		addq.b	#1,obSubtype(a0)
00012552 4268 003A                  		clr.w	fb_height(a0)
00012556                            
00012556                            FBlock_Action:	; Routine 2
00012556 3F28 0008                  		move.w	obX(a0),-(sp)
0001255A 7000                       		moveq	#0,d0
0001255C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012560 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012564 D040                       		add.w	d0,d0
00012566 323B 0000                  		move.w	@index(pc,d0.w),d1
0001256A 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001256E 381F                       		move.w	(sp)+,d4
00012570 4A28 0001                  		tst.b	obRender(a0)
00012574 6A00                       		bpl.s	@chkdel
00012576 7200                       		moveq	#0,d1
00012578 1228 0014                  		move.b	obActWid(a0),d1
0001257C 0641 000B                  		addi.w	#$B,d1
00012580 7400                       		moveq	#0,d2
00012582 1428 0016                  		move.b	obHeight(a0),d2
00012586 3602                       		move.w	d2,d3
00012588 5243                       		addq.w	#1,d3
0001258A 6100 F5DE                  		bsr.w	SolidObject
0001258E                            
0001258E                            	@chkdel:
000125AA                            		@display:
000125AA 6000 D1B4                  			bra.w	DisplaySprite
000125AE                            		@chkdel2:
000125AE 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000125B4 6600                       			bne.s	@delete
000125B6 4A28 0038                  			tst.b	$38(a0)
000125BA 66EE                       			bne.s	@display
000125BC                            		@delete:
000125BC 4EF9 0000 F7A0             			jmp	(DeleteObject).l
000125C2                            ; ===========================================================================
000125C2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000125C6 0000 0000                  		dc.w @type02-@index, @type03-@index
000125CA 0000 0000                  		dc.w @type04-@index, @type05-@index
000125CE 0000 0000                  		dc.w @type06-@index, @type07-@index
000125D2 0000 0000                  		dc.w @type08-@index, @type09-@index
000125D6 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000125DA 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000125DE                            ; ===========================================================================
000125DE                            
000125DE                            @type00:
000125DE                            ; doesn't move
000125DE 4E75                       		rts	
000125E0                            ; ===========================================================================
000125E0                            
000125E0                            @type01:
000125E0                            ; moves side-to-side
000125E0 323C 0040                  		move.w	#$40,d1		; set move distance
000125E4 7000                       		moveq	#0,d0
000125E6 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000125EA 6000                       		bra.s	@moveLR
000125EC                            ; ===========================================================================
000125EC                            
000125EC                            @type02:
000125EC                            ; moves side-to-side
000125EC 323C 0080                  		move.w	#$80,d1		; set move distance
000125F0 7000                       		moveq	#0,d0
000125F2 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000125F6                            
000125F6                            	@moveLR:
000125F6 0828 0000 0022             		btst	#0,obStatus(a0)
000125FC 6700                       		beq.s	@noflip
000125FE 4440                       		neg.w	d0
00012600 D041                       		add.w	d1,d0
00012602                            
00012602                            	@noflip:
00012602 3228 0034                  		move.w	fb_origX(a0),d1
00012606 9240                       		sub.w	d0,d1
00012608 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001260C 4E75                       		rts	
0001260E                            ; ===========================================================================
0001260E                            
0001260E                            @type03:
0001260E                            ; moves up/down
0001260E 323C 0040                  		move.w	#$40,d1		; set move distance
00012612 7000                       		moveq	#0,d0
00012614 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012618 6000                       		bra.s	@moveUD
0001261A                            ; ===========================================================================
0001261A                            
0001261A                            @type04:
0001261A                            ; moves up/down
0001261A 323C 0080                  		move.w	#$80,d1		; set move distance
0001261E 7000                       		moveq	#0,d0
00012620 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012624                            
00012624                            	@moveUD:
00012624 0828 0000 0022             		btst	#0,obStatus(a0)
0001262A 6700                       		beq.s	@noflip04
0001262C 4440                       		neg.w	d0
0001262E D041                       		add.w	d1,d0
00012630                            
00012630                            	@noflip04:
00012630 3228 0030                  		move.w	fb_origY(a0),d1
00012634 9240                       		sub.w	d0,d1
00012636 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
0001263A 4E75                       		rts	
0001263C                            ; ===========================================================================
0001263C                            
0001263C                            @type05:
0001263C                            ; moves up when a switch is pressed
0001263C 4A28 0038                  		tst.b	$38(a0)
00012640 6600                       		bne.s	@loc_104A4
00012642 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012648 6600                       		bne.s	@aaa		; if not, branch
0001264A 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012650 6600                       		bne.s	@aaa
00012652 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012656 3038 D008                  		move.w	(v_player+obX).w,d0
0001265A B068 0008                  		cmp.w	obX(a0),d0
0001265E 6400                       		bcc.s	@aaa
00012660 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012666                            
00012666                            	@aaa:
00012666 45F8 F7E0                  		lea	(f_switch).w,a2
0001266A 7000                       		moveq	#0,d0
0001266C 1028 003C                  		move.b	fb_type(a0),d0
00012670 0832 0000 0000             		btst	#0,(a2,d0.w)
00012676 6700                       		beq.s	@loc_104AE
00012678 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001267E 6600                       		bne.s	@loc_1049E	; if not, branch
00012680 0C00 0003                  		cmpi.b	#3,d0
00012684 6600                       		bne.s	@loc_1049E
00012686 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001268A                            
0001268A                            @loc_1049E:
0001268A 117C 0001 0038             		move.b	#1,$38(a0)
00012690                            
00012690                            @loc_104A4:
00012690 4A68 003A                  		tst.w	fb_height(a0)
00012694 6700                       		beq.s	@loc_104C8
00012696 5568 003A                  		subq.w	#2,fb_height(a0)
0001269A                            
0001269A                            @loc_104AE:
0001269A 3028 003A                  		move.w	fb_height(a0),d0
0001269E 0828 0000 0022             		btst	#0,$22(a0)
000126A4 6700                       		beq.s	@loc_104BC
000126A6 4440                       		neg.w	d0
000126A8                            
000126A8                            @loc_104BC:
000126A8 3228 0030                  		move.w	fb_origY(a0),d1
000126AC D240                       		add.w	d0,d1
000126AE 3141 000C                  		move.w	d1,obY(a0)
000126B2 4E75                       		rts	
000126B4                            ; ===========================================================================
000126B4                            
000126B4                            @loc_104C8:
000126B4 5228 0028                  		addq.b	#1,$28(a0)
000126B8 4228 0038                  		clr.b	$38(a0)
000126BC 45F8 FC00                  		lea	(v_objstate).w,a2
000126C0 7000                       		moveq	#0,d0
000126C2 1028 0023                  		move.b	obRespawnNo(a0),d0
000126C6 67D2                       		beq.s	@loc_104AE
000126C8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000126CE 60CA                       		bra.s	@loc_104AE
000126D0                            ; ===========================================================================
000126D0                            
000126D0                            @type06:
000126D0 4A28 0038                  		tst.b	$38(a0)
000126D4 6600                       		bne.s	@loc_10500
000126D6 45F8 F7E0                  		lea	(f_switch).w,a2
000126DA 7000                       		moveq	#0,d0
000126DC 1028 003C                  		move.b	fb_type(a0),d0
000126E0 4A32 0000                  		tst.b	(a2,d0.w)
000126E4 6A00                       		bpl.s	@loc_10512
000126E6 117C 0001 0038             		move.b	#1,$38(a0)
000126EC                            
000126EC                            @loc_10500:
000126EC 7000                       		moveq	#0,d0
000126EE 1028 0016                  		move.b	obHeight(a0),d0
000126F2 D040                       		add.w	d0,d0
000126F4 B068 003A                  		cmp.w	fb_height(a0),d0
000126F8 6700                       		beq.s	@loc_1052C
000126FA 5468 003A                  		addq.w	#2,fb_height(a0)
000126FE                            
000126FE                            @loc_10512:
000126FE 3028 003A                  		move.w	fb_height(a0),d0
00012702 0828 0000 0022             		btst	#0,obStatus(a0)
00012708 6700                       		beq.s	@loc_10520
0001270A 4440                       		neg.w	d0
0001270C                            
0001270C                            @loc_10520:
0001270C 3228 0030                  		move.w	fb_origY(a0),d1
00012710 D240                       		add.w	d0,d1
00012712 3141 000C                  		move.w	d1,obY(a0)
00012716 4E75                       		rts	
00012718                            ; ===========================================================================
00012718                            
00012718                            @loc_1052C:
00012718 5328 0028                  		subq.b	#1,obSubtype(a0)
0001271C 4228 0038                  		clr.b	$38(a0)
00012720 45F8 FC00                  		lea	(v_objstate).w,a2
00012724 7000                       		moveq	#0,d0
00012726 1028 0023                  		move.b	obRespawnNo(a0),d0
0001272A 67D2                       		beq.s	@loc_10512
0001272C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012732 60CA                       		bra.s	@loc_10512
00012734                            ; ===========================================================================
00012734                            
00012734                            @type07:
00012734 4A28 0038                  		tst.b	$38(a0)
00012738 6600                       		bne.s	@loc_1055E
0001273A 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001273E 6700                       		beq.s	@locret_10578
00012740 117C 0001 0038             		move.b	#1,$38(a0)
00012746 4268 003A                  		clr.w	fb_height(a0)
0001274A                            
0001274A                            @loc_1055E:
0001274A 5268 0008                  		addq.w	#1,obX(a0)
0001274E 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012754 5268 003A                  		addq.w	#1,fb_height(a0)
00012758 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001275E 6600                       		bne.s	@locret_10578
00012760 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012766 4228 0038                  			clr.b	$38(a0)
0001276A 4228 0028                  		clr.b	obSubtype(a0)
0001276E                            
0001276E                            @locret_10578:
0001276E 4E75                       		rts	
00012770                            ; ===========================================================================
00012770                            
00012770                            @type0C:
00012770 4A28 0038                  		tst.b	$38(a0)
00012774 6600                       		bne.s	@loc_10598
00012776 45F8 F7E0                  		lea	(f_switch).w,a2
0001277A 7000                       		moveq	#0,d0
0001277C 1028 003C                  		move.b	fb_type(a0),d0
00012780 0832 0000 0000             		btst	#0,(a2,d0.w)
00012786 6700                       		beq.s	@loc_105A2
00012788 117C 0001 0038             		move.b	#1,$38(a0)
0001278E                            
0001278E                            @loc_10598:
0001278E 4A68 003A                  		tst.w	fb_height(a0)
00012792 6700                       		beq.s	@loc_105C0
00012794 5568 003A                  		subq.w	#2,fb_height(a0)
00012798                            
00012798                            @loc_105A2:
00012798 3028 003A                  		move.w	fb_height(a0),d0
0001279C 0828 0000 0022             		btst	#0,obStatus(a0)
000127A2 6700                       		beq.s	@loc_105B4
000127A4 4440                       		neg.w	d0
000127A6 0640 0080                  		addi.w	#$80,d0
000127AA                            
000127AA                            @loc_105B4:
000127AA 3228 0034                  		move.w	fb_origX(a0),d1
000127AE D240                       		add.w	d0,d1
000127B0 3141 0008                  		move.w	d1,obX(a0)
000127B4 4E75                       		rts	
000127B6                            ; ===========================================================================
000127B6                            
000127B6                            @loc_105C0:
000127B6 5228 0028                  		addq.b	#1,obSubtype(a0)
000127BA 4228 0038                  		clr.b	$38(a0)
000127BE 45F8 FC00                  		lea	(v_objstate).w,a2
000127C2 7000                       		moveq	#0,d0
000127C4 1028 0023                  		move.b	obRespawnNo(a0),d0
000127C8 67CE                       		beq.s	@loc_105A2
000127CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000127D0 60C6                       		bra.s	@loc_105A2
000127D2                            ; ===========================================================================
000127D2                            
000127D2                            @type0D:
000127D2 4A28 0038                  		tst.b	$38(a0)
000127D6 6600                       		bne.s	@loc_105F8
000127D8 45F8 F7E0                  		lea	(f_switch).w,a2
000127DC 7000                       		moveq	#0,d0
000127DE 1028 003C                  		move.b	fb_type(a0),d0
000127E2 4A32 0000                  		tst.b	(a2,d0.w)
000127E6 6A00                       		bpl.s	@wtf
000127E8 117C 0001 0038             		move.b	#1,$38(a0)
000127EE                            
000127EE                            @loc_105F8:
000127EE 303C 0080                  		move.w	#$80,d0
000127F2 B068 003A                  		cmp.w	fb_height(a0),d0
000127F6 6700                       		beq.s	@loc_10624
000127F8 5468 003A                  		addq.w	#2,fb_height(a0)
000127FC                            
000127FC                            @wtf:
000127FC 3028 003A                  		move.w	fb_height(a0),d0
00012800 0828 0000 0022             		btst	#0,obStatus(a0)
00012806 6700                       		beq.s	@loc_10618
00012808 4440                       		neg.w	d0
0001280A 0640 0080                  		addi.w	#$80,d0
0001280E                            
0001280E                            @loc_10618:
0001280E 3228 0034                  		move.w	fb_origX(a0),d1
00012812 D240                       		add.w	d0,d1
00012814 3141 0008                  		move.w	d1,obX(a0)
00012818 4E75                       		rts	
0001281A                            ; ===========================================================================
0001281A                            
0001281A                            @loc_10624:
0001281A 5328 0028                  		subq.b	#1,obSubtype(a0)
0001281E 4228 0038                  		clr.b	$38(a0)
00012822 45F8 FC00                  		lea	(v_objstate).w,a2
00012826 7000                       		moveq	#0,d0
00012828 1028 0023                  		move.b	obRespawnNo(a0),d0
0001282C 67CE                       		beq.s	@wtf
0001282E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012834 60C6                       		bra.s	@wtf
00012836                            ; ===========================================================================
00012836                            
00012836                            @type08:
00012836 323C 0010                  		move.w	#$10,d1
0001283A 7000                       		moveq	#0,d0
0001283C 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012840 E248                       		lsr.w	#1,d0
00012842 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012846 6000                       		bra.s	@square
00012848                            ; ===========================================================================
00012848                            
00012848                            @type09:
00012848 323C 0030                  		move.w	#$30,d1
0001284C 7000                       		moveq	#0,d0
0001284E 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012852 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012856 6000                       		bra.s	@square
00012858                            ; ===========================================================================
00012858                            
00012858                            @type0A:
00012858 323C 0050                  		move.w	#$50,d1
0001285C 7000                       		moveq	#0,d0
0001285E 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012862 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012866 6000                       		bra.s	@square
00012868                            ; ===========================================================================
00012868                            
00012868                            @type0B:
00012868 323C 0070                  		move.w	#$70,d1
0001286C 7000                       		moveq	#0,d0
0001286E 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012872 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012876                            
00012876                            @square:
00012876 4A43                       		tst.w	d3
00012878 6600                       		bne.s	@loc_1068E
0001287A 5228 0022                  		addq.b	#1,obStatus(a0)
0001287E 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012884                            
00012884                            @loc_1068E:
00012884 1428 0022                  		move.b	obStatus(a0),d2
00012888 0202 0003                  		andi.b	#3,d2
0001288C 6600                       		bne.s	@loc_106AE
0001288E 9041                       		sub.w	d1,d0
00012890 D068 0034                  		add.w	fb_origX(a0),d0
00012894 3140 0008                  		move.w	d0,obX(a0)
00012898 4441                       		neg.w	d1
0001289A D268 0030                  		add.w	fb_origY(a0),d1
0001289E 3141 000C                  		move.w	d1,obY(a0)
000128A2 4E75                       		rts	
000128A4                            ; ===========================================================================
000128A4                            
000128A4                            @loc_106AE:
000128A4 5302                       		subq.b	#1,d2
000128A6 6600                       		bne.s	@loc_106CC
000128A8 5341                       		subq.w	#1,d1
000128AA 9041                       		sub.w	d1,d0
000128AC 4440                       		neg.w	d0
000128AE D068 0030                  		add.w	fb_origY(a0),d0
000128B2 3140 000C                  		move.w	d0,obY(a0)
000128B6 5241                       		addq.w	#1,d1
000128B8 D268 0034                  		add.w	fb_origX(a0),d1
000128BC 3141 0008                  		move.w	d1,obX(a0)
000128C0 4E75                       		rts	
000128C2                            ; ===========================================================================
000128C2                            
000128C2                            @loc_106CC:
000128C2 5302                       		subq.b	#1,d2
000128C4 6600                       		bne.s	@loc_106EA
000128C6 5341                       		subq.w	#1,d1
000128C8 9041                       		sub.w	d1,d0
000128CA 4440                       		neg.w	d0
000128CC D068 0034                  		add.w	fb_origX(a0),d0
000128D0 3140 0008                  		move.w	d0,obX(a0)
000128D4 5241                       		addq.w	#1,d1
000128D6 D268 0030                  		add.w	fb_origY(a0),d1
000128DA 3141 000C                  		move.w	d1,obY(a0)
000128DE 4E75                       		rts	
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            @loc_106EA:
000128E0 9041                       		sub.w	d1,d0
000128E2 D068 0030                  		add.w	fb_origY(a0),d0
000128E6 3140 000C                  		move.w	d0,obY(a0)
000128EA 4441                       		neg.w	d1
000128EC D268 0034                  		add.w	fb_origX(a0),d1
000128F0 3141 0008                  		move.w	d1,obX(a0)
000128F4 4E75                       		rts	
000128F4 4E75                       		rts	
000128F6                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
000128F6                            ; ---------------------------------------------------------------------------
000128F6                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000128F6                            ; ---------------------------------------------------------------------------
000128F6                            Map_FBlock_internal:
000128F6 0000                       		dc.w @syz1x1-Map_FBlock_internal
000128F8 0000                       		dc.w @syz2x2-Map_FBlock_internal
000128FA 0000                       		dc.w @syz1x2-Map_FBlock_internal
000128FC 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
000128FE 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012900 0000                       		dc.w @slz-Map_FBlock_internal
00012902 0000                       		dc.w @lzvert-Map_FBlock_internal
00012904 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012906 01                         @syz1x1:	dc.b 1
00012907 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
0001290C 04                         @syz2x2:	dc.b 4
0001290D E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012912 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012917 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001291C 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012921 02                         @syz1x2:	dc.b 2
00012922 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012927 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001292C 04                         @syzrect2x2:	dc.b 4
0001292D E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012932 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012937 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001293C 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012941 03                         @syzrect1x3:	dc.b 3
00012942 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012947 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001294C 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012951 01                         @slz:		dc.b 1
00012952 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012957 02                         @lzvert:	dc.b 2
00012958 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
0001295D 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012962 04                         @lzhoriz:	dc.b 4
00012963 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012968 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001296D F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012972 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012978 00                         		even
00012978 00                         		even
00012978                            
00012978                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012978                            ; ---------------------------------------------------------------------------
00012978                            ; Object 57 - spiked balls (SYZ, LZ)
00012978                            ; ---------------------------------------------------------------------------
00012978                            
00012978                            SpikeBall:
00012978 7000                       		moveq	#0,d0
0001297A 1028 0024                  		move.b	obRoutine(a0),d0
0001297E 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012982 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012986                            ; ===========================================================================
00012986 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012988 0000                       		dc.w SBall_Move-SBall_Index
0001298A 0000                       		dc.w SBall_Display-SBall_Index
0001298C                            
0001298C =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
0001298C                            		; $30-$37	; object RAM numbers of childs (1 byte each)
0001298C =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
0001298C =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
0001298C =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
0001298C =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
0001298C                            ; ===========================================================================
0001298C                            
0001298C                            SBall_Main:	; Routine 0
0001298C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012990 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012998 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
0001299E 117C 0004 0001             		move.b	#4,obRender(a0)
000129A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000129AA 117C 0008 0014             		move.b	#8,obActWid(a0)
000129B0 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
000129B6 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
000129BC 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
000129C2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000129C8 6600                       		bne.s	@notlz
000129CA                            
000129CA 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
000129D0 317C 0310 0002             		move.w	#$310,obGfx(a0)
000129D6 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
000129DE                            
000129DE                            	@notlz:
000129DE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129E2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000129E6 4881                       		ext.w	d1
000129E8 E741                       		asl.w	#3,d1		; multiply by 8
000129EA 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
000129EE 1028 0022                  		move.b	obStatus(a0),d0
000129F2 E418                       		ror.b	#2,d0
000129F4 0200 00C0                  		andi.b	#$C0,d0
000129F8 1140 0026                  		move.b	d0,obAngle(a0)
000129FC 45E8 0029                  		lea	sball_childs(a0),a2
00012A00 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012A04 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012A08 14FC 0000                  		move.b	#0,(a2)+
00012A0C 3601                       		move.w	d1,d3
00012A0E E94B                       		lsl.w	#4,d3
00012A10 1143 003C                  		move.b	d3,sball_radius(a0)
00012A14 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012A16 6500                       		bcs.s	@fail
00012A18 0828 0003 0028             		btst	#3,obSubtype(a0)
00012A1E 6700                       		beq.s	@makechain
00012A20 5341                       		subq.w	#1,d1
00012A22 6500                       		bcs.s	@fail
00012A24                            
00012A24                            @makechain:
00012A24 6100 D1C6                  		bsr.w	FindFreeObj
00012A28 6600                       		bne.s	@fail
00012A2A 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012A2E 3A09                       		move.w	a1,d5		; get child object RAM address
00012A30 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012A34 EC4D                       		lsr.w	#6,d5		; divide by $40
00012A36 0245 007F                  		andi.w	#$7F,d5
00012A3A 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012A3C 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012A42 1290                       		move.b	0(a0),0(a1)
00012A44 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012A4A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012A50 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012A56 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012A5C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012A62 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012A68 0403 0010                  		subi.b	#$10,d3
00012A6C 1343 003C                  		move.b	d3,sball_radius(a1)
00012A70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A76 6600                       		bne.s	@notlzagain
00012A78                            
00012A78 4A03                       		tst.b	d3
00012A7A 6600                       		bne.s	@notlzagain
00012A7C 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012A82                            
00012A82                            	@notlzagain:
00012A82 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012A86                            
00012A86                            	@fail:
00012A86 3A08                       		move.w	a0,d5
00012A88 0445 D000                  		subi.w	#$D000,d5
00012A8C EC4D                       		lsr.w	#6,d5
00012A8E 0245 007F                  		andi.w	#$7F,d5
00012A92 14C5                       		move.b	d5,(a2)+
00012A94 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A9A 6600                       		bne.s	SBall_Move
00012A9C                            
00012A9C 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012AA2 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012AA8                            
00012AA8                            SBall_Move:	; Routine 2
00012AA8 6100 0000                  		bsr.w	@movesub
00012AAC 6000 0000                  		bra.w	@chkdel
00012AB0                            ; ===========================================================================
00012AB0                            
00012AB0                            @movesub:
00012AB0 3028 003E                  		move.w	sball_speed(a0),d0
00012AB4 D168 0026                  		add.w	d0,obAngle(a0)
00012AB8 1028 0026                  		move.b	obAngle(a0),d0
00012ABC 4EB9 0000 3A32             		jsr	(CalcSine).l
00012AC2 3428 0038                  		move.w	sball_origY(a0),d2
00012AC6 3628 003A                  		move.w	sball_origX(a0),d3
00012ACA 45E8 0029                  		lea	sball_childs(a0),a2
00012ACE 7C00                       		moveq	#0,d6
00012AD0 1C1A                       		move.b	(a2)+,d6
00012AD2                            
00012AD2                            	@loop:
00012AD2 7800                       		moveq	#0,d4
00012AD4 181A                       		move.b	(a2)+,d4
00012AD6 ED4C                       		lsl.w	#6,d4
00012AD8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012ADE 2244                       		movea.l	d4,a1
00012AE0 7800                       		moveq	#0,d4
00012AE2 1829 003C                  		move.b	sball_radius(a1),d4
00012AE6 2A04                       		move.l	d4,d5
00012AE8 C9C0                       		muls.w	d0,d4
00012AEA E084                       		asr.l	#8,d4
00012AEC CBC1                       		muls.w	d1,d5
00012AEE E085                       		asr.l	#8,d5
00012AF0 D842                       		add.w	d2,d4
00012AF2 DA43                       		add.w	d3,d5
00012AF4 3344 000C                  		move.w	d4,obY(a1)
00012AF8 3345 0008                  		move.w	d5,obX(a1)
00012AFC 51CE FFD4                  		dbf	d6,@loop
00012B00 4E75                       		rts	
00012B02                            ; ===========================================================================
00012B02                            
00012B02                            @chkdel:
00012B20 6000 CC3E                  		bra.w	DisplaySprite
00012B24                            ; ===========================================================================
00012B24                            
00012B24                            @delete:
00012B24 7400                       		moveq	#0,d2
00012B26 45E8 0029                  		lea	sball_childs(a0),a2
00012B2A 141A                       		move.b	(a2)+,d2
00012B2C                            
00012B2C                            	@deleteloop:
00012B2C 7000                       		moveq	#0,d0
00012B2E 101A                       		move.b	(a2)+,d0
00012B30 ED48                       		lsl.w	#6,d0
00012B32 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012B38 2240                       		movea.l	d0,a1
00012B3A 6100 CC66                  		bsr.w	DeleteChild
00012B3E 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012B42                            
00012B42 4E75                       		rts	
00012B44                            ; ===========================================================================
00012B44                            
00012B44                            SBall_Display:	; Routine 4
00012B44 6000 CC1A                  		bra.w	DisplaySprite
00012B44 6000 CC1A                  		bra.w	DisplaySprite
00012B48                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012B48                            ; ---------------------------------------------------------------------------
00012B48                            ; Sprite mappings - chain of spiked balls (SYZ)
00012B48                            ; ---------------------------------------------------------------------------
00012B48                            Map_SBall_internal:
00012B48 0000                       		dc.w @0-Map_SBall_internal
00012B4A 01                         @0:		dc.b 1
00012B4B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012B50                            		even
00012B50                            		even
00012B50                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012B50                            ; ---------------------------------------------------------------------------
00012B50                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012B50                            ; ---------------------------------------------------------------------------
00012B50                            Map_SBall2_internal:
00012B50 0000                       		dc.w @chain-Map_SBall2_internal
00012B52 0000                       		dc.w @spikeball-Map_SBall2_internal
00012B54 0000                       		dc.w @base-Map_SBall2_internal
00012B56 01                         @chain:		dc.b 1
00012B57 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012B5C 01                         @spikeball:	dc.b 1
00012B5D F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012B62 01                         @base:		dc.b 1
00012B63 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012B68                            		even
00012B68                            		even
00012B68                            		include	"_incObj\58 Big Spiked Ball.asm"
00012B68                            ; ---------------------------------------------------------------------------
00012B68                            ; Object 58 - giant spiked balls (SYZ)
00012B68                            ; ---------------------------------------------------------------------------
00012B68                            
00012B68                            BigSpikeBall:
00012B68 7000                       		moveq	#0,d0
00012B6A 1028 0024                  		move.b	obRoutine(a0),d0
00012B6E 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012B72 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012B76                            ; ===========================================================================
00012B76 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012B78 0000                       		dc.w BBall_Move-BBall_Index
00012B7A                            
00012B7A =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012B7A =00000038                  bball_origY:	equ $38		; original y-axis position
00012B7A =0000003C                  bball_radius:	equ $3C		; radius of circle
00012B7A =0000003E                  bball_speed:	equ $3E		; speed
00012B7A                            ; ===========================================================================
00012B7A                            
00012B7A                            BBall_Main:	; Routine 0
00012B7A 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B7E 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012B86 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012B8C 117C 0004 0001             		move.b	#4,obRender(a0)
00012B92 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B98 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012B9E 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012BA4 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012BAA 117C 0086 0020             		move.b	#$86,obColType(a0)
00012BB0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BB4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012BB8 4881                       		ext.w	d1
00012BBA E741                       		asl.w	#3,d1		; multiply by 8
00012BBC 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012BC0 1028 0022                  		move.b	obStatus(a0),d0
00012BC4 E418                       		ror.b	#2,d0
00012BC6 0200 00C0                  		andi.b	#$C0,d0
00012BCA 1140 0026                  		move.b	d0,obAngle(a0)
00012BCE 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012BD4                            
00012BD4                            BBall_Move:	; Routine 2
00012BD4 7000                       		moveq	#0,d0
00012BD6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012BDA 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012BDE D040                       		add.w	d0,d0
00012BE0 323B 0000                  		move.w	@index(pc,d0.w),d1
00012BE4 4EBB 1000                  		jsr	@index(pc,d1.w)
00012C06 6000 CB58                  		bra.w	DisplaySprite
00012C0A                            ; ===========================================================================
00012C0A 0000                       @index:		dc.w @type00-@index
00012C0C 0000                       		dc.w @type01-@index
00012C0E 0000                       		dc.w @type02-@index
00012C10 0000                       		dc.w @type03-@index
00012C12                            ; ===========================================================================
00012C12                            
00012C12                            @type00:
00012C12 4E75                       		rts	
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            @type01:
00012C14 323C 0060                  		move.w	#$60,d1
00012C18 7000                       		moveq	#0,d0
00012C1A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012C1E 0828 0000 0022             		btst	#0,obStatus(a0)
00012C24 6700                       		beq.s	@noflip1
00012C26 4440                       		neg.w	d0
00012C28 D041                       		add.w	d1,d0
00012C2A                            
00012C2A                            	@noflip1:
00012C2A 3228 003A                  		move.w	bball_origX(a0),d1
00012C2E 9240                       		sub.w	d0,d1
00012C30 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012C34 4E75                       		rts	
00012C36                            ; ===========================================================================
00012C36                            
00012C36                            @type02:
00012C36 323C 0060                  		move.w	#$60,d1
00012C3A 7000                       		moveq	#0,d0
00012C3C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012C40 0828 0000 0022             		btst	#0,obStatus(a0)
00012C46 6700                       		beq.s	@noflip2
00012C48 4440                       		neg.w	d0
00012C4A 0640 0080                  		addi.w	#$80,d0
00012C4E                            
00012C4E                            	@noflip2:
00012C4E 3228 0038                  		move.w	bball_origY(a0),d1
00012C52 9240                       		sub.w	d0,d1
00012C54 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012C58 4E75                       		rts	
00012C5A                            ; ===========================================================================
00012C5A                            
00012C5A                            @type03:
00012C5A 3028 003E                  		move.w	bball_speed(a0),d0
00012C5E D168 0026                  		add.w	d0,obAngle(a0)
00012C62 1028 0026                  		move.b	obAngle(a0),d0
00012C66 4EB9 0000 3A32             		jsr	(CalcSine).l
00012C6C 3428 0038                  		move.w	bball_origY(a0),d2
00012C70 3628 003A                  		move.w	bball_origX(a0),d3
00012C74 7800                       		moveq	#0,d4
00012C76 1828 003C                  		move.b	bball_radius(a0),d4
00012C7A 2A04                       		move.l	d4,d5
00012C7C C9C0                       		muls.w	d0,d4
00012C7E E084                       		asr.l	#8,d4
00012C80 CBC1                       		muls.w	d1,d5
00012C82 E085                       		asr.l	#8,d5
00012C84 D842                       		add.w	d2,d4
00012C86 DA43                       		add.w	d3,d5
00012C88 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012C8C 3145 0008                  		move.w	d5,obX(a0)
00012C90 4E75                       		rts	
00012C90 4E75                       		rts	
00012C92                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012C92                            ; --------------------------------------------------------------------------------
00012C92                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012C92                            ; --------------------------------------------------------------------------------
00012C92                            
00012C92                            SME_u_DKx:	
00012C92 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012C96 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012C98 05                         SME_u_DKx_6:	dc.b 5	
00012C99 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012C9E F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012CA3 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012CA8 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012CAD 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012CB2 01                         SME_u_DKx_20:	dc.b 1	
00012CB3 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012CB8 02                         SME_u_DKx_26:	dc.b 2	
00012CB9 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012CBE E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012CC4 00                         		even
00012CC4 00                         		even
00012CC4                            		include	"_incObj\59 SLZ Elevators.asm"
00012CC4                            ; ---------------------------------------------------------------------------
00012CC4                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012CC4                            ; ---------------------------------------------------------------------------
00012CC4                            
00012CC4                            Elevator:
00012CC4 7000                       		moveq	#0,d0
00012CC6 1028 0024                  		move.b	obRoutine(a0),d0
00012CCA 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012CCE 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012CF0 6000 CA6E                  		bra.w	DisplaySprite
00012CF4                            ; ===========================================================================
00012CF4 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012CF6 0000                       		dc.w Elev_Platform-Elev_Index
00012CF8 0000                       		dc.w Elev_Action-Elev_Index
00012CFA 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012CFC                            
00012CFC =00000032                  elev_origX:	equ $32		; original x-axis position
00012CFC =00000030                  elev_origY:	equ $30		; original y-axis position
00012CFC =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012CFC                            
00012CFC 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012CFE                            
00012CFE 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012D00 2001                       		dc.b $20, 1
00012D02 3401                       		dc.b $34, 1
00012D04 1003                       		dc.b $10, 3
00012D06 2003                       		dc.b $20, 3
00012D08 3403                       		dc.b $34, 3
00012D0A 1401                       		dc.b $14, 1
00012D0C 2401                       		dc.b $24, 1
00012D0E 2C01                       		dc.b $2C, 1
00012D10 1403                       		dc.b $14, 3
00012D12 2403                       		dc.b $24, 3
00012D14 2C03                       		dc.b $2C, 3
00012D16 2005                       		dc.b $20, 5
00012D18 2007                       		dc.b $20, 7
00012D1A 3009                       		dc.b $30, 9
00012D1C                            ; ===========================================================================
00012D1C                            
00012D1C                            Elev_Main:	; Routine 0
00012D1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D20 7000                       		moveq	#0,d0
00012D22 1028 0028                  		move.b	obSubtype(a0),d0
00012D26 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012D28 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012D2C 0240 007F                  		andi.w	#$7F,d0
00012D30 C0FC 0006                  		mulu.w	#6,d0
00012D34 3140 003C                  		move.w	d0,elev_dist(a0)
00012D38 3140 003E                  		move.w	d0,$3E(a0)
00012D3C 588F                       		addq.l	#4,sp
00012D3E 4E75                       		rts	
00012D40                            ; ===========================================================================
00012D40                            
00012D40                            	@normal:
00012D40 E648                       		lsr.w	#3,d0
00012D42 0240 001E                  		andi.w	#$1E,d0
00012D46 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012D4A 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012D4E 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012D52 7000                       		moveq	#0,d0
00012D54 1028 0028                  		move.b	obSubtype(a0),d0
00012D58 D040                       		add.w	d0,d0
00012D5A 0240 001E                  		andi.w	#$1E,d0
00012D5E 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012D62 101A                       		move.b	(a2)+,d0
00012D64 E548                       		lsl.w	#2,d0
00012D66 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012D6A 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012D6E 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012D76 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012D7C 117C 0004 0001             		move.b	#4,obRender(a0)
00012D82 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D88 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012D8E 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012D94                            
00012D94                            Elev_Platform:	; Routine 2
00012D94 7200                       		moveq	#0,d1
00012D96 1228 0014                  		move.b	obActWid(a0),d1
00012D9A 4EB9 0000 8FE6             		jsr	(PlatformObject).l
00012DA0 6000 0000                  		bra.w	Elev_Types
00012DA4                            ; ===========================================================================
00012DA4                            
00012DA4                            Elev_Action:	; Routine 4
00012DA4 7200                       		moveq	#0,d1
00012DA6 1228 0014                  		move.b	obActWid(a0),d1
00012DAA 4EB9 0000 915A             		jsr	(ExitPlatform).l
00012DB0 3F28 0008                  		move.w	obX(a0),-(sp)
00012DB4 6100 0000                  		bsr.w	Elev_Types
00012DB8 341F                       		move.w	(sp)+,d2
00012DBA 4A10                       		tst.b	0(a0)
00012DBC 6700                       		beq.s	@deleted
00012DBE 4EF9 0000 96C4             		jmp	(MvSonicOnPtfm2).l
00012DC4                            
00012DC4                            	@deleted:
00012DC4 4E75                       		rts	
00012DC6                            ; ===========================================================================
00012DC6                            
00012DC6                            Elev_Types:
00012DC6 7000                       		moveq	#0,d0
00012DC8 1028 0028                  		move.b	obSubtype(a0),d0
00012DCC 0240 000F                  		andi.w	#$F,d0
00012DD0 D040                       		add.w	d0,d0
00012DD2 323B 0000                  		move.w	@index(pc,d0.w),d1
00012DD6 4EFB 1000                  		jmp	@index(pc,d1.w)
00012DDA                            ; ===========================================================================
00012DDA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012DDE 0000 0000                  		dc.w @type02-@index, @type01-@index
00012DE2 0000 0000                  		dc.w @type04-@index, @type01-@index
00012DE6 0000 0000                  		dc.w @type06-@index, @type01-@index
00012DEA 0000 0000                  		dc.w @type08-@index, @type09-@index
00012DEE                            ; ===========================================================================
00012DEE                            
00012DEE                            @type00:
00012DEE 4E75                       		rts	
00012DF0                            ; ===========================================================================
00012DF0                            
00012DF0                            @type01:
00012DF0 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012DF6 6600                       		bne.s	@notstanding
00012DF8 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012DFC                            
00012DFC                            	@notstanding:
00012DFC 4E75                       		rts	
00012DFE                            ; ===========================================================================
00012DFE                            
00012DFE                            @type02:
00012DFE 6100 0000                  		bsr.w	Elev_Move
00012E02 3028 0034                  		move.w	$34(a0),d0
00012E06 4440                       		neg.w	d0
00012E08 D068 0030                  		add.w	elev_origY(a0),d0
00012E0C 3140 000C                  		move.w	d0,obY(a0)
00012E10 4E75                       		rts	
00012E12                            ; ===========================================================================
00012E12                            
00012E12                            @type04:
00012E12 6100 0000                  		bsr.w	Elev_Move
00012E16 3028 0034                  		move.w	$34(a0),d0
00012E1A D068 0030                  		add.w	elev_origY(a0),d0
00012E1E 3140 000C                  		move.w	d0,obY(a0)
00012E22 4E75                       		rts	
00012E24                            ; ===========================================================================
00012E24                            
00012E24                            @type06:
00012E24 6100 0000                  		bsr.w	Elev_Move
00012E28 3028 0034                  		move.w	$34(a0),d0
00012E2C E240                       		asr.w	#1,d0
00012E2E 4440                       		neg.w	d0
00012E30 D068 0030                  		add.w	elev_origY(a0),d0
00012E34 3140 000C                  		move.w	d0,obY(a0)
00012E38 3028 0034                  		move.w	$34(a0),d0
00012E3C D068 0032                  		add.w	elev_origX(a0),d0
00012E40 3140 0008                  		move.w	d0,obX(a0)
00012E44 4E75                       		rts	
00012E46                            ; ===========================================================================
00012E46                            
00012E46                            @type08:
00012E46 6100 0000                  		bsr.w	Elev_Move
00012E4A 3028 0034                  		move.w	$34(a0),d0
00012E4E E240                       		asr.w	#1,d0
00012E50 D068 0030                  		add.w	elev_origY(a0),d0
00012E54 3140 000C                  		move.w	d0,obY(a0)
00012E58 3028 0034                  		move.w	$34(a0),d0
00012E5C 4440                       		neg.w	d0
00012E5E D068 0032                  		add.w	elev_origX(a0),d0
00012E62 3140 0008                  		move.w	d0,obX(a0)
00012E66 4E75                       		rts	
00012E68                            ; ===========================================================================
00012E68                            
00012E68                            @type09:
00012E68 6100 0000                  		bsr.w	Elev_Move
00012E6C 3028 0034                  		move.w	$34(a0),d0
00012E70 4440                       		neg.w	d0
00012E72 D068 0030                  		add.w	elev_origY(a0),d0
00012E76 3140 000C                  		move.w	d0,obY(a0)
00012E7A 4A28 0028                  		tst.b	obSubtype(a0)
00012E7E 6700 0000                  		beq.w	@typereset
00012E82 4E75                       		rts	
00012E84                            ; ===========================================================================
00012E84                            
00012E84                            	@typereset:
00012E84 0828 0003 0022             		btst	#3,obStatus(a0)
00012E8A 6700                       		beq.s	@delete
00012E8C 08E9 0001 0022             		bset	#1,obStatus(a1)
00012E92 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012E98 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012E9E                            
00012E9E                            	@delete:
00012E9E 6000 C900                  		bra.w	DeleteObject
00012EA2                            
00012EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EA2                            
00012EA2                            
00012EA2                            Elev_Move:
00012EA2 3028 0038                  		move.w	$38(a0),d0
00012EA6 4A28 003A                  		tst.b	$3A(a0)
00012EAA 6600                       		bne.s	loc_10CC8
00012EAC 0C40 0800                  		cmpi.w	#$800,d0
00012EB0 6400                       		bcc.s	loc_10CD0
00012EB2 0640 0010                  		addi.w	#$10,d0
00012EB6 6000                       		bra.s	loc_10CD0
00012EB8                            ; ===========================================================================
00012EB8                            
00012EB8                            loc_10CC8:
00012EB8 4A40                       		tst.w	d0
00012EBA 6700                       		beq.s	loc_10CD0
00012EBC 0440 0010                  		subi.w	#$10,d0
00012EC0                            
00012EC0                            loc_10CD0:
00012EC0 3140 0038                  		move.w	d0,$38(a0)
00012EC4 48C0                       		ext.l	d0
00012EC6 E180                       		asl.l	#8,d0
00012EC8 D0A8 0034                  		add.l	$34(a0),d0
00012ECC 2140 0034                  		move.l	d0,$34(a0)
00012ED0 4840                       		swap	d0
00012ED2 3428 003C                  		move.w	elev_dist(a0),d2
00012ED6 B042                       		cmp.w	d2,d0
00012ED8 6300                       		bls.s	loc_10CF0
00012EDA 117C 0001 003A             		move.b	#1,$3A(a0)
00012EE0                            
00012EE0                            loc_10CF0:
00012EE0 D442                       		add.w	d2,d2
00012EE2 B042                       		cmp.w	d2,d0
00012EE4 6600                       		bne.s	locret_10CFA
00012EE6 4228 0028                  		clr.b	obSubtype(a0)
00012EEA                            
00012EEA                            locret_10CFA:
00012EEA 4E75                       		rts	
00012EEC                            ; End of function Elev_Move
00012EEC                            
00012EEC                            ; ===========================================================================
00012EEC                            
00012EEC                            Elev_MakeMulti:	; Routine 6
00012EEC 5368 003C                  		subq.w	#1,elev_dist(a0)
00012EF0 6600                       		bne.s	@chkdel
00012EF2 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012EF8 6100 CCF2                  		bsr.w	FindFreeObj
00012EFC 6600                       		bne.s	@chkdel
00012EFE 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012F02 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012F08 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012F0E 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012F14                            
00012F14                            @chkdel:
00012F14 588F                       		addq.l	#4,sp
00012F34 4E75                       		rts	
00012F34 4E75                       		rts	
00012F36                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012F36                            ; ---------------------------------------------------------------------------
00012F36                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012F36                            ; ---------------------------------------------------------------------------
00012F36                            Map_Elev_internal:
00012F36 0000                       		dc.w @elevator-Map_Elev_internal
00012F38 03                         @elevator:	dc.b 3
00012F39 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012F3E F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012F43 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012F48                            		even
00012F48                            		even
00012F48                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012F48                            ; ---------------------------------------------------------------------------
00012F48                            ; Object 5A - platforms	moving in circles (SLZ)
00012F48                            ; ---------------------------------------------------------------------------
00012F48                            
00012F48                            CirclingPlatform:
00012F48 7000                       		moveq	#0,d0
00012F4A 1028 0024                  		move.b	obRoutine(a0),d0
00012F4E 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012F52 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012F74 6000 C7EA                  		bra.w	DisplaySprite
00012F78                            ; ===========================================================================
00012F78 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012F7A 0000                       		dc.w Circ_Platform-Circ_Index
00012F7C 0000                       		dc.w Circ_Action-Circ_Index
00012F7E                            
00012F7E =00000032                  circ_origX:	equ $32		; original x-axis position
00012F7E =00000030                  circ_origY:	equ $30		; original y-axis position
00012F7E                            ; ===========================================================================
00012F7E                            
00012F7E                            Circ_Main:	; Routine 0
00012F7E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F82 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012F8A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F90 117C 0004 0001             		move.b	#4,obRender(a0)
00012F96 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F9C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012FA2 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012FA8 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012FAE                            
00012FAE                            Circ_Platform:	; Routine 2
00012FAE 7200                       		moveq	#0,d1
00012FB0 1228 0014                  		move.b	obActWid(a0),d1
00012FB4 4EB9 0000 8FE6             		jsr	(PlatformObject).l
00012FBA 6000 0000                  		bra.w	Circ_Types
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            Circ_Action:	; Routine 4
00012FBE 7200                       		moveq	#0,d1
00012FC0 1228 0014                  		move.b	obActWid(a0),d1
00012FC4 4EB9 0000 915A             		jsr	(ExitPlatform).l
00012FCA 3F28 0008                  		move.w	obX(a0),-(sp)
00012FCE 6100 0000                  		bsr.w	Circ_Types
00012FD2 341F                       		move.w	(sp)+,d2
00012FD4 4EF9 0000 96C4             		jmp	(MvSonicOnPtfm2).l
00012FDA                            ; ===========================================================================
00012FDA                            
00012FDA                            Circ_Types:
00012FDA 7000                       		moveq	#0,d0
00012FDC 1028 0028                  		move.b	obSubtype(a0),d0
00012FE0 0240 000C                  		andi.w	#$C,d0
00012FE4 E248                       		lsr.w	#1,d0
00012FE6 323B 0000                  		move.w	@index(pc,d0.w),d1
00012FEA 4EFB 1000                  		jmp	@index(pc,d1.w)
00012FEE                            ; ===========================================================================
00012FEE 0000                       @index:		dc.w @type00-@index
00012FF0 0000                       		dc.w @type04-@index
00012FF2                            ; ===========================================================================
00012FF2                            
00012FF2                            @type00:
00012FF2 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012FF6 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012FFA 4881                       		ext.w	d1
00012FFC 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013000 0402 0050                  		subi.b	#$50,d2
00013004 4882                       		ext.w	d2
00013006 0828 0000 0028             		btst	#0,obSubtype(a0)
0001300C 6700                       		beq.s	@noshift00a
0001300E 4441                       		neg.w	d1
00013010 4442                       		neg.w	d2
00013012                            
00013012                            	@noshift00a:
00013012 0828 0001 0028             		btst	#1,obSubtype(a0)
00013018 6700                       		beq.s	@noshift00b
0001301A 4441                       		neg.w	d1
0001301C C342                       		exg	d1,d2
0001301E                            
0001301E                            	@noshift00b:
0001301E D268 0032                  		add.w	circ_origX(a0),d1
00013022 3141 0008                  		move.w	d1,obX(a0)
00013026 D468 0030                  		add.w	circ_origY(a0),d2
0001302A 3142 000C                  		move.w	d2,obY(a0)
0001302E 4E75                       		rts	
00013030                            ; ===========================================================================
00013030                            
00013030                            @type04:
00013030 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013034 0401 0050                  		subi.b	#$50,d1
00013038 4881                       		ext.w	d1
0001303A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001303E 0402 0050                  		subi.b	#$50,d2
00013042 4882                       		ext.w	d2
00013044 0828 0000 0028             		btst	#0,obSubtype(a0)
0001304A 6700                       		beq.s	@noshift04a
0001304C 4441                       		neg.w	d1
0001304E 4442                       		neg.w	d2
00013050                            
00013050                            	@noshift04a:
00013050 0828 0001 0028             		btst	#1,obSubtype(a0)
00013056 6700                       		beq.s	@noshift04b
00013058 4441                       		neg.w	d1
0001305A C342                       		exg	d1,d2
0001305C                            
0001305C                            	@noshift04b:
0001305C 4441                       		neg.w	d1
0001305E D268 0032                  		add.w	circ_origX(a0),d1
00013062 3141 0008                  		move.w	d1,obX(a0)
00013066 D468 0030                  		add.w	circ_origY(a0),d2
0001306A 3142 000C                  		move.w	d2,obY(a0)
0001306E 4E75                       		rts	
0001306E 4E75                       		rts	
00013070                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00013070                            ; ---------------------------------------------------------------------------
00013070                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013070                            ; ---------------------------------------------------------------------------
00013070                            Map_Circ_internal:
00013070 0000                       		dc.w @platform-Map_Circ_internal
00013072 02                         @platform:	dc.b 2
00013073 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013078 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001307E 00                         		even
0001307E 00                         		even
0001307E                            		include	"_incObj\5B Staircase.asm"
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            ; Object 5B - blocks that form a staircase (SLZ)
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            
0001307E                            Staircase:
0001307E 7000                       		moveq	#0,d0
00013080 1028 0024                  		move.b	obRoutine(a0),d0
00013084 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013088 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000130AA 6000 C6B4                  		bra.w	DisplaySprite
000130AE                            ; ===========================================================================
000130AE 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000130B0 0000                       		dc.w Stair_Move-Stair_Index
000130B2 0000                       		dc.w Stair_Solid-Stair_Index
000130B4                            
000130B4 =00000030                  stair_origX:	equ $30		; original x-axis position
000130B4 =00000032                  stair_origY:	equ $32		; original y-axis position
000130B4                            
000130B4 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000130B4                            ; ===========================================================================
000130B4                            
000130B4                            Stair_Main:	; Routine 0
000130B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000130B8 7638                       		moveq	#$38,d3
000130BA 7801                       		moveq	#1,d4
000130BC 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000130C2 6700                       		beq.s	@notflipped	; if not, branch
000130C4 763B                       		moveq	#$3B,d3
000130C6 78FF                       		moveq	#-1,d4
000130C8                            
000130C8                            	@notflipped:
000130C8 3428 0008                  		move.w	obX(a0),d2
000130CC 2248                       		movea.l	a0,a1
000130CE 7203                       		moveq	#3,d1
000130D0 6000                       		bra.s	@makeblocks
000130D2                            ; ===========================================================================
000130D2                            
000130D2                            @loop:
000130D2 6100 CB2E                  		bsr.w	FindNextFreeObj
000130D6 6600 0000                  		bne.w	@fail
000130DA 137C 0004 0024             		move.b	#4,obRoutine(a1)
000130E0                            
000130E0                            @makeblocks:
000130E0 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
000130E4 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000130EC 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000130F2 137C 0004 0001             		move.b	#4,obRender(a1)
000130F8 337C 0180 0018             		move.w	#$180,obPriority(a1)
000130FE 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013104 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001310A 3342 0008                  		move.w	d2,obX(a1)
0001310E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013114 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
0001311A 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013120 0642 0020                  		addi.w	#$20,d2
00013124 1343 0037                  		move.b	d3,$37(a1)
00013128 2348 003C                  		move.l	a0,stair_parent(a1)
0001312C D604                       		add.b	d4,d3
0001312E 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00013132                            
00013132                            	@fail:
00013132                            
00013132                            Stair_Move:	; Routine 2
00013132 7000                       		moveq	#0,d0
00013134 1028 0028                  		move.b	obSubtype(a0),d0
00013138 0240 0007                  		andi.w	#7,d0
0001313C D040                       		add.w	d0,d0
0001313E 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00013142 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013146                            
00013146                            Stair_Solid:	; Routine 4
00013146 2468 003C                  		movea.l	stair_parent(a0),a2
0001314A 7000                       		moveq	#0,d0
0001314C 1028 0037                  		move.b	$37(a0),d0
00013150 1032 0000                  		move.b	(a2,d0.w),d0
00013154 D068 0032                  		add.w	stair_origY(a0),d0
00013158 3140 000C                  		move.w	d0,obY(a0)
0001315C 7200                       		moveq	#0,d1
0001315E 1228 0014                  		move.b	obActWid(a0),d1
00013162 0641 000B                  		addi.w	#$B,d1
00013166 343C 0010                  		move.w	#$10,d2
0001316A 363C 0011                  		move.w	#$11,d3
0001316E 3828 0008                  		move.w	obX(a0),d4
00013172 6100 E9F6                  		bsr.w	SolidObject
00013176 4A04                       		tst.b	d4
00013178 6A00                       		bpl.s	loc_10F92
0001317A 1544 0036                  		move.b	d4,$36(a2)
0001317E                            
0001317E                            loc_10F92:
0001317E 0828 0003 0022             		btst	#3,obStatus(a0)
00013184 6700                       		beq.s	locret_10FA0
00013186 157C 0001 0036             		move.b	#1,$36(a2)
0001318C                            
0001318C                            locret_10FA0:
0001318C 4E75                       		rts	
0001318E                            ; ===========================================================================
0001318E 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00013190 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013192 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00013194 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013196                            ; ===========================================================================
00013196                            
00013196                            Stair_Type00:
00013196 4A68 0034                  		tst.w	$34(a0)
0001319A 6600                       		bne.s	loc_10FC0
0001319C 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000131A2 6600                       		bne.s	locret_10FBE
000131A4 317C 001E 0034             		move.w	#$1E,$34(a0)
000131AA                            
000131AA                            locret_10FBE:
000131AA 4E75                       		rts	
000131AC                            ; ===========================================================================
000131AC                            
000131AC                            loc_10FC0:
000131AC 5368 0034                  		subq.w	#1,$34(a0)
000131B0 66F8                       		bne.s	locret_10FBE
000131B2 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000131B6 4E75                       		rts	
000131B8                            ; ===========================================================================
000131B8                            
000131B8                            Stair_Type02:
000131B8 4A68 0034                  		tst.w	$34(a0)
000131BC 6600                       		bne.s	loc_10FE0
000131BE 4A28 0036                  		tst.b	$36(a0)
000131C2 6A00                       		bpl.s	locret_10FDE
000131C4 317C 003C 0034             		move.w	#$3C,$34(a0)
000131CA                            
000131CA                            locret_10FDE:
000131CA 4E75                       		rts	
000131CC                            ; ===========================================================================
000131CC                            
000131CC                            loc_10FE0:
000131CC 5368 0034                  		subq.w	#1,$34(a0)
000131D0 6600                       		bne.s	loc_10FEC
000131D2 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000131D6 4E75                       		rts	
000131D8                            ; ===========================================================================
000131D8                            
000131D8                            loc_10FEC:
000131D8 43E8 0038                  		lea	$38(a0),a1
000131DC 3028 0034                  		move.w	$34(a0),d0
000131E0 E408                       		lsr.b	#2,d0
000131E2 0200 0001                  		andi.b	#1,d0
000131E6 12C0                       		move.b	d0,(a1)+
000131E8 0A00 0001                  		eori.b	#1,d0
000131EC 12C0                       		move.b	d0,(a1)+
000131EE 0A00 0001                  		eori.b	#1,d0
000131F2 12C0                       		move.b	d0,(a1)+
000131F4 0A00 0001                  		eori.b	#1,d0
000131F8 12C0                       		move.b	d0,(a1)+
000131FA 4E75                       		rts	
000131FC                            ; ===========================================================================
000131FC                            
000131FC                            Stair_Type01:
000131FC 43E8 0038                  		lea	$38(a0),a1
00013200 0C11 0080                  		cmpi.b	#$80,(a1)
00013204 6700                       		beq.s	locret_11038
00013206 5211                       		addq.b	#1,(a1)
00013208 7200                       		moveq	#0,d1
0001320A 1219                       		move.b	(a1)+,d1
0001320C 4841                       		swap	d1
0001320E E289                       		lsr.l	#1,d1
00013210 2401                       		move.l	d1,d2
00013212 E289                       		lsr.l	#1,d1
00013214 2601                       		move.l	d1,d3
00013216 D682                       		add.l	d2,d3
00013218 4841                       		swap	d1
0001321A 4842                       		swap	d2
0001321C 4843                       		swap	d3
0001321E 12C3                       		move.b	d3,(a1)+
00013220 12C2                       		move.b	d2,(a1)+
00013222 12C1                       		move.b	d1,(a1)+
00013224                            
00013224                            locret_11038:
00013224 4E75                       		rts	
00013226 4E75                       		rts	
00013226 4E75                       		rts	
00013228                            Map_Stair:	include	"_maps\Staircase.asm"
00013228                            ; ---------------------------------------------------------------------------
00013228                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013228                            ; ---------------------------------------------------------------------------
00013228                            Map_Stair_internal:
00013228 0000                       		dc.w @block-Map_Stair_internal
0001322A 01                         @block:		dc.b 1
0001322B F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013230                            		even
00013230                            		even
00013230                            		include	"_incObj\5C Pylon.asm"
00013230                            ; ---------------------------------------------------------------------------
00013230                            ; Object 5C - metal pylons in foreground (SLZ)
00013230                            ; ---------------------------------------------------------------------------
00013230                            
00013230                            Pylon:
00013230 7000                       		moveq	#0,d0
00013232 1028 0024                  		move.b	obRoutine(a0),d0
00013236 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
0001323A 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001323E                            ; ===========================================================================
0001323E 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013240 0000                       		dc.w Pyl_Display-Pyl_Index
00013242                            ; ===========================================================================
00013242                            
00013242                            Pyl_Main:	; Routine 0
00013242 5428 0024                  		addq.b	#2,obRoutine(a0)
00013246 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001324E 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013254 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001325A                            
0001325A                            Pyl_Display:	; Routine 2
0001325A 2238 F700                  		move.l	(v_screenposx).w,d1
0001325E D281                       		add.l	d1,d1
00013260 4841                       		swap	d1
00013262 4441                       		neg.w	d1
00013264 3141 0008                  		move.w	d1,obX(a0)
00013268 2238 F704                  		move.l	(v_screenposy).w,d1
0001326C D281                       		add.l	d1,d1
0001326E 4841                       		swap	d1
00013270 0241 003F                  		andi.w	#$3F,d1
00013274 4441                       		neg.w	d1
00013276 0641 0100                  		addi.w	#$100,d1
0001327A 3141 000A                  		move.w	d1,obScreenY(a0)
0001327E 6000 C4E0                  		bra.w	DisplaySprite
0001327E 6000 C4E0                  		bra.w	DisplaySprite
00013282                            Map_Pylon:	include	"_maps\Pylon.asm"
00013282                            ; ---------------------------------------------------------------------------
00013282                            ; Sprite mappings - metal pylons in foreground (SLZ)
00013282                            ; ---------------------------------------------------------------------------
00013282                            Map_Pylon_internal:
00013282 0000                       		dc.w @pylon-Map_Pylon_internal
00013284 09                         @pylon:		dc.b 9
00013285 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001328A A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001328F C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013294 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013299 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001329E 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000132A3 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000132A8 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000132AD 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000132B2                            		even
000132B2                            		even
000132B2                            
000132B2                            		include	"_incObj\1B Water Surface.asm"
000132B2                            ; ---------------------------------------------------------------------------
000132B2                            ; Object 1B - water surface (LZ)
000132B2                            ; ---------------------------------------------------------------------------
000132B2                            
000132B2                            WaterSurface:
000132B2 7000                       		moveq	#0,d0
000132B4 1028 0024                  		move.b	obRoutine(a0),d0
000132B8 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000132BC 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000132C0                            ; ===========================================================================
000132C0 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000132C2 0000                       		dc.w Surf_Action-Surf_Index
000132C4                            
000132C4 =00000030                  surf_origX:	equ $30		; original x-axis position
000132C4 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000132C4                            ; ===========================================================================
000132C4                            
000132C4                            Surf_Main:	; Routine 0
000132C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000132C8 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000132D0 317C C300 0002             		move.w	#$C300,obGfx(a0)
000132D6 117C 0004 0001             		move.b	#4,obRender(a0)
000132DC 117C 0080 0014             		move.b	#$80,obActWid(a0)
000132E2 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000132E8                            
000132E8                            Surf_Action:	; Routine 2
000132E8 3238 F700                  		move.w	(v_screenposx).w,d1
000132EC 0241 FFE0                  		andi.w	#$FFE0,d1
000132F0 D268 0030                  		add.w	surf_origX(a0),d1
000132F4 0838 0000 FE05             		btst	#0,(v_framebyte).w
000132FA 6700                       		beq.s	@even		; branch on even frames
000132FC 0641 0020                  		addi.w	#$20,d1
00013300                            
00013300                            	@even:
00013300 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013304 3238 F646                  		move.w	(v_waterpos1).w,d1
00013308 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001330C 4A28 0032                  		tst.b	surf_freeze(a0)
00013310 6600                       		bne.s	@stopped
00013312 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013318 6700                       		beq.s	@animate	; if not, branch
0001331A 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001331E 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013324 6000                       		bra.s	@display
00013326                            ; ===========================================================================
00013326                            
00013326                            @stopped:
00013326 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001332A 6600                       		bne.s	@display	; if yes, branch
0001332C 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013332 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013336                            
00013336                            @animate:
00013336 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001333A 6A00                       		bpl.s	@display
0001333C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013342 5228 001A                  		addq.b	#1,obFrame(a0)
00013346 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001334C 6500                       		bcs.s	@display
0001334E 117C 0000 001A             		move.b	#0,obFrame(a0)
00013354                            
00013354                            @display:
00013354 6000 C40A                  		bra.w	DisplaySprite
00013354 6000 C40A                  		bra.w	DisplaySprite
00013358                            Map_Surf:	include	"_maps\Water Surface.asm"
00013358                            ; --------------------------------------------------------------------------------
00013358                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013358                            ; --------------------------------------------------------------------------------
00013358                            
00013358                            SME_LGSi8:	
00013358 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001335C 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013360 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013364 03                         SME_LGSi8_C:	dc.b 3	
00013365 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001336A F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001336F F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013374 03                         SME_LGSi8_1C:	dc.b 3	
00013375 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001337A F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001337F F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013384 03                         SME_LGSi8_2C:	dc.b 3	
00013385 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001338A F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001338F F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013394 06                         SME_LGSi8_3C:	dc.b 6	
00013395 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001339A F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
0001339F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000133A4 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000133A9 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000133AE F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000133B3 06                         SME_LGSi8_5B:	dc.b 6	
000133B4 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000133B9 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000133BE F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000133C3 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000133C8 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000133CD F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000133D2 06                         SME_LGSi8_7A:	dc.b 6	
000133D3 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000133D8 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000133DD F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000133E2 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000133E7 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000133EC F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000133F2 00                         		even
000133F2 00                         		even
000133F2                            		include	"_incObj\0B Pole that Breaks.asm"
000133F2                            ; ---------------------------------------------------------------------------
000133F2                            ; Object 0B - pole that	breaks (LZ)
000133F2                            ; ---------------------------------------------------------------------------
000133F2                            
000133F2                            Pole:
000133F2 7000                       		moveq	#0,d0
000133F4 1028 0024                  		move.b	obRoutine(a0),d0
000133F8 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000133FC 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013400                            ; ===========================================================================
00013400 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013402 0000                       		dc.w Pole_Action-Pole_Index
00013404 0000                       		dc.w Pole_Display-Pole_Index
00013406                            
00013406 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013406 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013406                            ; ===========================================================================
00013406                            
00013406                            Pole_Main:	; Routine 0
00013406 5428 0024                  		addq.b	#2,obRoutine(a0)
0001340A 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013412 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013418 117C 0004 0001             		move.b	#4,obRender(a0)
0001341E 117C 0008 0014             		move.b	#8,obActWid(a0)
00013424 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001342A 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013430 7000                       		moveq	#0,d0
00013432 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013436 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001343A 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001343E                            
0001343E                            Pole_Action:	; Routine 2
0001343E 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013442 6700                       		beq.s	@grab		; if not, branch
00013444 4A68 0030                  		tst.w	pole_time(a0)
00013448 6700                       		beq.s	@moveup
0001344A 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001344E 6600                       		bne.s	@moveup
00013450 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013456 6000                       		bra.s	@release
00013458                            ; ===========================================================================
00013458                            
00013458                            @moveup:
00013458 43F8 D000                  		lea	(v_player).w,a1
0001345C 3028 000C                  		move.w	obY(a0),d0
00013460 0440 0018                  		subi.w	#$18,d0
00013464 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
0001346A 6700                       		beq.s	@movedown	; if not, branch
0001346C 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013470 B069 000C                  		cmp.w	obY(a1),d0
00013474 6500                       		bcs.s	@movedown
00013476 3340 000C                  		move.w	d0,obY(a1)
0001347A                            
0001347A                            @movedown:
0001347A 0640 0024                  		addi.w	#$24,d0
0001347E 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013484 6700                       		beq.s	@letgo		; if not, branch
00013486 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
0001348A B069 000C                  		cmp.w	obY(a1),d0
0001348E 6400                       		bcc.s	@letgo
00013490 3340 000C                  		move.w	d0,obY(a1)
00013494                            
00013494                            @letgo:
00013494 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013498 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
0001349C 6700                       		beq.s	Pole_Display	; if not, branch
0001349E                            
0001349E                            @release:
0001349E 4228 0020                  		clr.b	obColType(a0)
000134A2 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000134A6 4238 F7C8                  		clr.b	(f_lockmulti).w
000134AA 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000134AE 4228 0032                  		clr.b	pole_grabbed(a0)
000134B2 6000                       		bra.s	Pole_Display
000134B4                            ; ===========================================================================
000134B4                            
000134B4                            @grab:
000134B4 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000134B8 6700                       		beq.s	Pole_Display	; if not, branch
000134BA 43F8 D000                  		lea	(v_player).w,a1
000134BE 3028 0008                  		move.w	obX(a0),d0
000134C2 0640 0014                  		addi.w	#$14,d0
000134C6 B069 0008                  		cmp.w	obX(a1),d0
000134CA 6400                       		bcc.s	Pole_Display
000134CC 4228 0021                  		clr.b	obColProp(a0)
000134D0 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000134D6 6400                       		bcc.s	Pole_Display
000134D8 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000134DC 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000134E0 3028 0008                  		move.w	obX(a0),d0
000134E4 0640 0014                  		addi.w	#$14,d0
000134E8 3340 0008                  		move.w	d0,obX(a1)
000134EC 08A9 0000 0022             		bclr	#0,obStatus(a1)
000134F2 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000134F8 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000134FE 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013504 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
0001350A                            
0001350A                            Pole_Display:	; Routine 4
0001350A 6000 E1C6                  		bra.w	RememberState
0001350A 6000 E1C6                  		bra.w	RememberState
0001350E                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001350E                            ; ---------------------------------------------------------------------------
0001350E                            ; Sprite mappings - pole that breaks (LZ)
0001350E                            ; ---------------------------------------------------------------------------
0001350E                            Map_Pole_internal:
0001350E 0000                       		dc.w @normal-Map_Pole_internal
00013510 0000                       		dc.w @broken-Map_Pole_internal
00013512 02                         @normal:	dc.b 2			; normal pole
00013513 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013518 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001351D 04                         @broken:	dc.b 4			; broken pole
0001351E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013523 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013528 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001352D 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013532                            		even
00013532                            		even
00013532                            		include	"_incObj\0C Flapping Door.asm"
00013532                            ; ---------------------------------------------------------------------------
00013532                            ; Object 0C - flapping door (LZ)
00013532                            ; ---------------------------------------------------------------------------
00013532                            
00013532                            FlapDoor:
00013532 7000                       		moveq	#0,d0
00013534 1028 0024                  		move.b	obRoutine(a0),d0
00013538 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001353C 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013540                            ; ===========================================================================
00013540 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013542 0000                       		dc.w Flap_OpenClose-Flap_Index
00013544                            
00013544 =00000032                  flap_time:	equ $32		; time between opening/closing
00013544 =00000030                  flap_wait:	equ $30		; time until change
00013544                            ; ===========================================================================
00013544                            
00013544                            Flap_Main:	; Routine 0
00013544 5428 0024                  		addq.b	#2,obRoutine(a0)
00013548 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013550 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013556 0028 0004 0001             		ori.b	#4,obRender(a0)
0001355C 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013562 7000                       		moveq	#0,d0
00013564 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013568 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001356C 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013570                            
00013570                            Flap_OpenClose:	; Routine 2
00013570 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013574 6A00                       		bpl.s	@wait		; if time remains, branch
00013576 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001357C 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00013582 4A28 0001                  		tst.b	obRender(a0)
00013586 6A00                       		bpl.s	@nosound
00013592                            
00013592                            	@wait:
00013592                            	@nosound:
00013592 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013598 6100 92AE                  		bsr.w	AnimateSprite
0001359C 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000135A0 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000135A4 6600                       		bne.s	@display	; if yes, branch
000135A6 3038 D008                  		move.w	(v_player+obX).w,d0
000135AA B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000135AE 6400                       		bcc.s	@display	; if yes, branch
000135B0 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000135B6 323C 0013                  		move.w	#$13,d1
000135BA 343C 0020                  		move.w	#$20,d2
000135BE 3602                       		move.w	d2,d3
000135C0 5243                       		addq.w	#1,d3
000135C2 3828 0008                  		move.w	obX(a0),d4
000135C6 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000135CA                            
000135CA                            	@display:
000135CA 6000 E106                  		bra.w	RememberState
000135CA 6000 E106                  		bra.w	RememberState
000135CE                            		include	"_anim\Flapping Door.asm"
000135CE                            ; ---------------------------------------------------------------------------
000135CE                            ; Animation script - flapping door (LZ)
000135CE                            ; ---------------------------------------------------------------------------
000135CE 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000135D0 0000                       		dc.w @closing-Ani_Flap
000135D2 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000135D8 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000135DE                            		even
000135DE                            		even
000135DE                            Map_Flap:	include	"_maps\Flapping Door.asm"
000135DE                            ; ---------------------------------------------------------------------------
000135DE                            ; Sprite mappings - flapping door (LZ)
000135DE                            ; ---------------------------------------------------------------------------
000135DE                            Map_Flap_internal:
000135DE 0000                       		dc.w @closed-Map_Flap_internal
000135E0 0000                       		dc.w @halfway-Map_Flap_internal
000135E2 0000                       		dc.w @open-Map_Flap_internal
000135E4 02                         @closed:	dc.b 2
000135E5 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000135EA 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000135EF 02                         @halfway:	dc.b 2
000135F0 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000135F5 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000135FA 02                         @open:		dc.b 2
000135FB D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013600 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013606 00                         		even
00013606 00                         		even
00013606                            
00013606                            		include	"_incObj\71 Invisible Barriers.asm"
00013606                            ; ---------------------------------------------------------------------------
00013606                            ; Object 71 - invisible	solid barriers
00013606                            ; ---------------------------------------------------------------------------
00013606                            
00013606                            Invisibarrier:
00013606 7000                       		moveq	#0,d0
00013608 1028 0024                  		move.b	obRoutine(a0),d0
0001360C 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013610 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013614                            ; ===========================================================================
00013614 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013616 0000                       		dc.w Invis_Solid-Invis_Index
00013618                            
00013618 =00000016                  invis_height:	equ $16		; height in pixels
00013618                            ; ===========================================================================
00013618                            
00013618                            Invis_Main:	; Routine 0
00013618 5428 0024                  		addq.b	#2,obRoutine(a0)
0001361C 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013624 317C 8680 0002             		move.w	#$8680,obGfx(a0)
0001362A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013630 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013634 1200                       		move.b	d0,d1
00013636 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001363A 0640 0010                  		addi.w	#$10,d0
0001363E E248                       		lsr.w	#1,d0
00013640 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013644 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013648 5241                       		addq.w	#1,d1
0001364A E749                       		lsl.w	#3,d1
0001364C 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013650                            
00013650                            Invis_Solid:	; Routine 2
00013650 6100 C38E                  		bsr.w	ChkObjectVisible
00013654 6600                       		bne.s	@chkdel
00013656 7200                       		moveq	#0,d1
00013658 1228 0014                  		move.b	obActWid(a0),d1
0001365C 0641 000B                  		addi.w	#$B,d1
00013660 7400                       		moveq	#0,d2
00013662 1428 0016                  		move.b	invis_height(a0),d2
00013666 3602                       		move.w	d2,d3
00013668 5243                       		addq.w	#1,d3
0001366A 3828 0008                  		move.w	obX(a0),d4
0001366E 6100 E542                  		bsr.w	SolidObject71
00013672                            
00013672                            @chkdel:
0001368E 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
00013692 6700                       		beq.s	@nodisplay	; if not, branch
00013694 4EF9 0000 F760             		jmp	(DisplaySprite).l	; if yes, display the object
0001369A                            
0001369A                            	@nodisplay:
0001369A 4E75                       		rts	
0001369C                            
0001369C                            	@delete:
0001369C 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001369C 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000136A2                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000136A2                            ; --------------------------------------------------------------------------------
000136A2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000136A2                            ; --------------------------------------------------------------------------------
000136A2                            
000136A2                            SME_t60cE:	
000136A2 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000136A6 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000136A8 04                         SME_t60cE_6:	dc.b 4	
000136A9 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000136AE 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000136B3 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000136B8 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000136BD 04                         SME_t60cE_1B:	dc.b 4	
000136BE E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000136C3 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000136C8 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000136CD 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000136D2 04                         SME_t60cE_30:	dc.b 4	
000136D3 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000136D8 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000136DD 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000136E2 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000136E8 00                         		even
000136E8 00                         		even
000136E8                            
000136E8                            		include	"_incObj\5D Fan.asm"
000136E8                            ; ---------------------------------------------------------------------------
000136E8                            ; Object 5D - fans (SLZ)
000136E8                            ; ---------------------------------------------------------------------------
000136E8                            
000136E8                            Fan:
000136E8 7000                       		moveq	#0,d0
000136EA 1028 0024                  		move.b	obRoutine(a0),d0
000136EE 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000136F2 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000136F6                            ; ===========================================================================
000136F6 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000136F8 0000                       		dc.w Fan_Delay-Fan_Index
000136FA                            
000136FA =00000030                  fan_time:	equ $30		; time between switching on/off
000136FA =00000032                  fan_switch:	equ $32		; on/off switch
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            Fan_Main:	; Routine 0
000136FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000136FE 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013706 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001370C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013712 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013718 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001371E                            
0001371E                            Fan_Delay:	; Routine 2
0001371E 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013724 6600                       		bne.s	@blow		; if yes, branch
00013726 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
0001372A 6A00                       		bpl.s	@blow		; if time remains, branch
0001372C 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013732 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013738 6700                       		beq.s	@blow		; if fan is off, branch
0001373A 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013740                            
00013740                            @blow:
00013740 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013744 6600 0000                  		bne.w	@chkdel		; if not, branch
00013748 43F8 D000                  		lea	(v_player).w,a1
0001374C 3029 0008                  		move.w	obX(a1),d0
00013750 9068 0008                  		sub.w	obX(a0),d0
00013754 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001375A 6600                       		bne.s	@chksonic	; if yes, branch
0001375C 4440                       		neg.w	d0
0001375E                            
0001375E                            @chksonic:
0001375E 0640 0050                  		addi.w	#$50,d0
00013762 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013766 6400                       		bcc.s	@animate	; if yes, branch
00013768 3229 000C                  		move.w	obY(a1),d1
0001376C 0641 0060                  		addi.w	#$60,d1
00013770 9268 000C                  		sub.w	obY(a0),d1
00013774 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013776 0C41 0070                  		cmpi.w	#$70,d1
0001377A 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001377C 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013780 6400                       		bcc.s	@faraway	; if yes, branch
00013782 4640                       		not.w	d0
00013784 D040                       		add.w	d0,d0
00013786                            
00013786                            	@faraway:
00013786 0640 0060                  		addi.w	#$60,d0
0001378A 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013790 6600                       		bne.s	@right		; if yes, branch
00013792 4440                       		neg.w	d0
00013794                            
00013794                            	@right:
00013794 4400                       		neg.b	d0
00013796 E840                       		asr.w	#4,d0
00013798 0828 0000 0028             		btst	#0,obSubtype(a0)
0001379E 6700                       		beq.s	@movesonic
000137A0 4440                       		neg.w	d0
000137A2                            
000137A2                            	@movesonic:
000137A2 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000137A6                            
000137A6                            @animate:
000137A6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000137AA 6A00                       		bpl.s	@chkdel
000137AC 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000137B2 5228 001B                  		addq.b	#1,obAniFrame(a0)
000137B6 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000137BC 6500                       		bcs.s	@noreset
000137BE 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000137C4                            
000137C4                            	@noreset:
000137C4 7000                       		moveq	#0,d0
000137C6 0828 0000 0028             		btst	#0,obSubtype(a0)
000137CC 6700                       		beq.s	@noflip
000137CE 7002                       		moveq	#2,d0
000137D0                            
000137D0                            	@noflip:
000137D0 D028 001B                  		add.b	obAniFrame(a0),d0
000137D4 1140 001A                  		move.b	d0,obFrame(a0)
000137D8                            
000137D8                            @chkdel:
000137D8 6100 BF86                  		bsr.w	DisplaySprite
000137FA 4E75                       		rts	
000137FA 4E75                       		rts	
000137FC                            Map_Fan:	include	"_maps\Fan.asm"
000137FC                            ; ---------------------------------------------------------------------------
000137FC                            ; Sprite mappings - fans (SLZ)
000137FC                            ; ---------------------------------------------------------------------------
000137FC                            Map_Fan_internal:
000137FC 0000                       		dc.w @fan1-Map_Fan_internal
000137FE 0000                       		dc.w @fan2-Map_Fan_internal
00013800 0000                       		dc.w @fan3-Map_Fan_internal
00013802 0000                       		dc.w @fan2-Map_Fan_internal
00013804 0000                       		dc.w @fan1-Map_Fan_internal
00013806 02                         @fan1:		dc.b 2
00013807 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001380C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013811 02                         @fan2:		dc.b 2
00013812 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013817 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001381C 02                         @fan3:		dc.b 2
0001381D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013822 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013828 00                         		even
00013828 00                         		even
00013828                            		include	"_incObj\5E Seesaw.asm"
00013828                            ; ---------------------------------------------------------------------------
00013828                            ; Object 5E - seesaws (SLZ)
00013828                            ; ---------------------------------------------------------------------------
00013828                            
00013828                            Seesaw:
00013828 7000                       		moveq	#0,d0
0001382A 1028 0024                  		move.b	obRoutine(a0),d0
0001382E 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013832 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013836 3028 0000                  		move.w	see_origX(a0),d0
0001383A 0240 FF80                  		andi.w	#$FF80,d0
0001383E 3238 F700                  		move.w	(v_screenposx).w,d1
00013842 0441 0080                  		subi.w	#$80,d1
00013846 0241 FF80                  		andi.w	#$FF80,d1
0001384A 9041                       		sub.w	d1,d0
0001384C 6B00 BF52                  		bmi.w	DeleteObject
00013850 0C40 0280                  		cmpi.w	#$280,d0
00013854 6200 BF4A                  		bhi.w	DeleteObject
00013858 6000 BF06                  		bra.w	DisplaySprite
0001385C                            ; ===========================================================================
0001385C 0000                       See_Index:	dc.w See_Main-See_Index
0001385E 0000                       		dc.w See_Slope-See_Index
00013860 0000                       		dc.w See_Slope2-See_Index
00013862 0000                       		dc.w See_Spikeball-See_Index
00013864 0000                       		dc.w See_MoveSpike-See_Index
00013866 0000                       		dc.w See_SpikeFall-See_Index
00013868                            
00013868 =00000030                  see_origX:	equ $30		; original x-axis position
00013868 =00000034                  see_origY:	equ $34		; original y-axis position
00013868 =00000038                  see_speed:	equ $38		; speed of collision
00013868 =0000003A                  see_frame:	equ $3A		; 
00013868 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013868                            ; ===========================================================================
00013868                            
00013868                            See_Main:	; Routine 0
00013868 5428 0024                  		addq.b	#2,obRoutine(a0)
0001386C 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013874 317C 03D4 0002             		move.w	#$3D4,obGfx(a0)
0001387A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013880 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013886 117C 0030 0014             		move.b	#$30,obActWid(a0)
0001388C 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013892 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013896 6600                       		bne.s	@noball		; if not, branch
00013898                            
00013898 6100 C368                  		bsr.w	FindNextFreeObj
0001389C 6600                       		bne.s	@noball
0001389E 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
000138A2 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
000138A6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000138AC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000138B2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000138B8 2348 003C                  		move.l	a0,see_parent(a1)
000138BC                            
000138BC                            	@noball:
000138BC 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000138C2 6700                       		beq.s	@noflip		; if not, branch
000138C4 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000138CA                            
000138CA                            	@noflip:
000138CA 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
000138D0                            
000138D0                            See_Slope:	; Routine 2
000138D0 1228 003A                  		move.b	see_frame(a0),d1
000138D4 6100 0000                  		bsr.w	See_ChgFrame
000138D8 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000138DE 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000138E4 6700                       		beq.s	@notflat	; if not, branch
000138E6 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000138EC                            
000138EC                            	@notflat:
000138EC 43F8 D000                  		lea	(v_player).w,a1
000138F0 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
000138F6 323C 0030                  		move.w	#$30,d1
000138FA 4EB9 0000 90BA             		jsr	(SlopeObject).l
00013900 4E75                       		rts	
00013902                            ; ===========================================================================
00013902                            
00013902                            See_Slope2:	; Routine 4
00013902 6100 0000                  		bsr.w	See_ChkSide
00013906 45F9 0000 0000             		lea	(See_DataSlope).l,a2
0001390C 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013912 6700                       		beq.s	@notflat	; if not, branch
00013914 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001391A                            
0001391A                            	@notflat:
0001391A 323C 0030                  		move.w	#$30,d1
0001391E 4EB9 0000 915A             		jsr	(ExitPlatform).l
00013924 323C 0030                  		move.w	#$30,d1
00013928 3428 0008                  		move.w	obX(a0),d2
0001392C 4EB9 0000 A0B6             		jsr	(SlopeObject2).l
00013932 4E75                       		rts	
00013934                            ; ===========================================================================
00013934                            
00013934                            See_ChkSide:
00013934 7202                       		moveq	#2,d1
00013936 43F8 D000                  		lea	(v_player).w,a1
0001393A 3028 0008                  		move.w	obX(a0),d0
0001393E 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013942 6400                       		bcc.s	@leftside	; if yes, branch
00013944 4440                       		neg.w	d0
00013946 7200                       		moveq	#0,d1
00013948                            
00013948                            	@leftside:
00013948 0C40 0008                  		cmpi.w	#8,d0
0001394C 6400                       		bcc.s	See_ChgFrame
0001394E 7201                       		moveq	#1,d1
00013950                            
00013950                            See_ChgFrame:
00013950 1028 001A                  		move.b	obFrame(a0),d0
00013954 B001                       		cmp.b	d1,d0		; does frame need to change?
00013956 6700                       		beq.s	@noflip		; if not, branch
00013958 6400                       		bcc.s	@loc_11772
0001395A 5400                       		addq.b	#2,d0
0001395C                            
0001395C                            	@loc_11772:
0001395C 5300                       		subq.b	#1,d0
0001395E 1140 001A                  		move.b	d0,obFrame(a0)
00013962 1141 003A                  		move.b	d1,see_frame(a0)
00013966 08A8 0000 0001             		bclr	#0,obRender(a0)
0001396C 0828 0001 001A             		btst	#1,obFrame(a0)
00013972 6700                       		beq.s	@noflip
00013974 08E8 0000 0001             		bset	#0,obRender(a0)
0001397A                            
0001397A                            	@noflip:
0001397A 4E75                       		rts	
0001397C                            ; ===========================================================================
0001397C                            
0001397C                            See_Spikeball:	; Routine 6
0001397C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013980 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013988 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001398E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013994 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001399A 117C 008B 0020             		move.b	#$8B,obColType(a0)
000139A0 117C 000C 0014             		move.b	#$C,obActWid(a0)
000139A6 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000139AC 0668 0028 0008             		addi.w	#$28,obX(a0)
000139B2 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
000139B8 117C 0001 001A             		move.b	#1,obFrame(a0)
000139BE 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000139C4 6700                       		beq.s	See_MoveSpike	; if not, branch
000139C6 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
000139CC 117C 0002 003A             		move.b	#2,see_frame(a0)
000139D2                            
000139D2                            See_MoveSpike:	; Routine 8
000139D2 2268 003C                  		movea.l	see_parent(a0),a1
000139D6 7000                       		moveq	#0,d0
000139D8 1028 003A                  		move.b	see_frame(a0),d0
000139DC 9029 003A                  		sub.b	see_frame(a1),d0
000139E0 6700                       		beq.s	loc_1183E
000139E2 6400                       		bcc.s	loc_117FC
000139E4 4400                       		neg.b	d0
000139E6                            
000139E6                            loc_117FC:
000139E6 323C F7E8                  		move.w	#-$818,d1
000139EA 343C FEEC                  		move.w	#-$114,d2
000139EE 0C00 0001                  		cmpi.b	#1,d0
000139F2 6700                       		beq.s	loc_11822
000139F4 323C F510                  		move.w	#-$AF0,d1
000139F8 343C FF34                  		move.w	#-$CC,d2
000139FC 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013A02 6D00                       		blt.s	loc_11822
00013A04 323C F200                  		move.w	#-$E00,d1
00013A08 343C FF60                  		move.w	#-$A0,d2
00013A0C                            
00013A0C                            loc_11822:
00013A0C 3141 0012                  		move.w	d1,obVelY(a0)
00013A10 3142 0010                  		move.w	d2,obVelX(a0)
00013A14 3028 0008                  		move.w	obX(a0),d0
00013A18 9068 0030                  		sub.w	see_origX(a0),d0
00013A1C 6400                       		bcc.s	loc_11838
00013A1E 4468 0010                  		neg.w	obVelX(a0)
00013A22                            
00013A22                            loc_11838:
00013A22 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A26 6000                       		bra.s	See_SpikeFall
00013A28                            ; ===========================================================================
00013A28                            
00013A28                            loc_1183E:
00013A28 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A2E 7000                       		moveq	#0,d0
00013A30 1029 001A                  		move.b	obFrame(a1),d0
00013A34 343C 0028                  		move.w	#$28,d2
00013A38 3228 0008                  		move.w	obX(a0),d1
00013A3C 9268 0030                  		sub.w	see_origX(a0),d1
00013A40 6400                       		bcc.s	loc_1185C
00013A42 4442                       		neg.w	d2
00013A44 5440                       		addq.w	#2,d0
00013A46                            
00013A46                            loc_1185C:
00013A46 D040                       		add.w	d0,d0
00013A48 3228 0034                  		move.w	see_origY(a0),d1
00013A4C D272 0000                  		add.w	(a2,d0.w),d1
00013A50 3141 000C                  		move.w	d1,obY(a0)
00013A54 D468 0030                  		add.w	see_origX(a0),d2
00013A58 3142 0008                  		move.w	d2,obX(a0)
00013A5C 4268 000E                  		clr.w	obY+2(a0)
00013A60 4268 000A                  		clr.w	obX+2(a0)
00013A64 4E75                       		rts	
00013A66                            ; ===========================================================================
00013A66                            
00013A66                            See_SpikeFall:	; Routine $A
00013A66 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013A6A 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013A6C 6100 BCA6                  		bsr.w	ObjectFall
00013A70 3028 0034                  		move.w	see_origY(a0),d0
00013A74 0440 002F                  		subi.w	#$2F,d0
00013A78 B068 000C                  		cmp.w	obY(a0),d0
00013A7C 6E00                       		bgt.s	locret_11898
00013A7E 6100 BC94                  		bsr.w	ObjectFall
00013A82                            
00013A82                            locret_11898:
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            loc_1189A:
00013A84 6100 BC8E                  		bsr.w	ObjectFall
00013A88 2268 003C                  		movea.l	see_parent(a0),a1
00013A8C 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A92 7000                       		moveq	#0,d0
00013A94 1029 001A                  		move.b	obFrame(a1),d0
00013A98 3228 0008                  		move.w	obX(a0),d1
00013A9C 9268 0030                  		sub.w	see_origX(a0),d1
00013AA0 6400                       		bcc.s	loc_118BA
00013AA2 5440                       		addq.w	#2,d0
00013AA4                            
00013AA4                            loc_118BA:
00013AA4 D040                       		add.w	d0,d0
00013AA6 3228 0034                  		move.w	see_origY(a0),d1
00013AAA D272 0000                  		add.w	(a2,d0.w),d1
00013AAE B268 000C                  		cmp.w	obY(a0),d1
00013AB2 6E00                       		bgt.s	locret_11938
00013AB4 2268 003C                  		movea.l	see_parent(a0),a1
00013AB8 7202                       		moveq	#2,d1
00013ABA 4A68 0010                  		tst.w	obVelX(a0)
00013ABE 6B00                       		bmi.s	See_Spring
00013AC0 7200                       		moveq	#0,d1
00013AC2                            
00013AC2                            See_Spring:
00013AC2 1341 003A                  		move.b	d1,$3A(a1)
00013AC6 1141 003A                  		move.b	d1,see_frame(a0)
00013ACA B229 001A                  		cmp.b	obFrame(a1),d1
00013ACE 6700                       		beq.s	loc_1192C
00013AD0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013AD6 6700                       		beq.s	loc_1192C
00013AD8 4229 0025                  		clr.b	ob2ndRout(a1)
00013ADC 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013AE2 45F8 D000                  		lea	(v_player).w,a2
00013AE6 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013AEC 446A 0012                  		neg.w	obVelY(a2)
00013AF0 08EA 0001 0022             		bset	#1,obStatus(a2)
00013AF6 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013AFC 422A 003C                  		clr.b	$3C(a2)
00013B00 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013B06 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013B16                            
00013B16                            loc_1192C:
00013B16 4268 0010                  		clr.w	obVelX(a0)
00013B1A 4268 0012                  		clr.w	obVelY(a0)
00013B1E 5528 0024                  		subq.b	#2,obRoutine(a0)
00013B22                            
00013B22                            locret_11938:
00013B22 4E75                       		rts	
00013B24                            ; ===========================================================================
00013B24 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013B2E                            
00013B2E                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013B5E                            		even
00013B5E                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013B8E                            		even
00013B8E                            		even
00013B8E                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013B8E                            ; ---------------------------------------------------------------------------
00013B8E                            ; Sprite mappings - seesaws (SLZ)
00013B8E                            ; ---------------------------------------------------------------------------
00013B8E                            Map_Seesaw_internal:
00013B8E 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B90 0000                       		dc.w @flat-Map_Seesaw_internal
00013B92 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B94 0000                       		dc.w @flat-Map_Seesaw_internal
00013B96 07                         @sloping:	dc.b 7
00013B97 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013B9C DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013BA1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013BA6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013BAB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013BB0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013BB5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013BBA 04                         @flat:		dc.b 4
00013BBB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013BC0 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013BC5 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013BCA E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013BD0 00                         		even
00013BD0 00                         		even
00013BD0                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013BD0                            ; ---------------------------------------------------------------------------
00013BD0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013BD0                            ; ---------------------------------------------------------------------------
00013BD0                            Map_SSawBall_internal:
00013BD0 0000                       		dc.w @red-Map_SSawBall_internal
00013BD2 0000                       		dc.w @silver-Map_SSawBall_internal
00013BD4 01                         @red:		dc.b 1
00013BD5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013BDA 01                         @silver:	dc.b 1
00013BDB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013BE0                            		even
00013BE0                            		even
00013BE0                            		include	"_incObj\5F Bomb Enemy.asm"
00013BE0                            ; ---------------------------------------------------------------------------
00013BE0                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013BE0                            ; ---------------------------------------------------------------------------
00013BE0                            
00013BE0                            Bomb:
00013BE0 7000                       		moveq	#0,d0
00013BE2 1028 0024                  		move.b	obRoutine(a0),d0
00013BE6 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013BEA 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013BEE                            ; ===========================================================================
00013BEE 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013BF0 0000                       		dc.w Bom_Action-Bom_Index
00013BF2 0000                       		dc.w Bom_Display-Bom_Index
00013BF4 0000                       		dc.w Bom_End-Bom_Index
00013BF6                            
00013BF6 =00000030                  bom_time:	equ $30		; time of fuse
00013BF6 =00000034                  bom_origY:	equ $34		; original y-axis position
00013BF6 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013BF6                            ; ===========================================================================
00013BF6                            
00013BF6                            Bom_Main:	; Routine 0
00013BF6 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BFA 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013C02 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013C08 0028 0004 0001             		ori.b	#4,obRender(a0)
00013C0E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013C14 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013C1A 1028 0028                  		move.b	obSubtype(a0),d0
00013C1E 6700                       		beq.s	loc_11A3C
00013C20 1140 0024                  		move.b	d0,obRoutine(a0)
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_11A3C:
00013C26 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013C2C 0868 0000 0022             		bchg	#0,obStatus(a0)
00013C32                            
00013C32                            Bom_Action:	; Routine 2
00013C32 7000                       		moveq	#0,d0
00013C34 1028 0025                  		move.b	ob2ndRout(a0),d0
00013C38 323B 0000                  		move.w	@index(pc,d0.w),d1
00013C3C 4EBB 1000                  		jsr	@index(pc,d1.w)
00013C40 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013C46 6100 8C00                  		bsr.w	AnimateSprite
00013C4A 6000 DA86                  		bra.w	RememberState
00013C4E                            ; ===========================================================================
00013C4E 0000                       @index:		dc.w @walk-@index
00013C50 0000                       		dc.w @wait-@index
00013C52 0000                       		dc.w @explode-@index
00013C54                            ; ===========================================================================
00013C54                            
00013C54                            @walk:
00013C54 6100 0000                  		bsr.w	@chksonic
00013C58 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C5C 6A00                       		bpl.s	@noflip		; if time remains, branch
00013C5E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013C62 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013C68 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013C6E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013C74 0868 0000 0022             		bchg	#0,obStatus(a0)
00013C7A 6700                       		beq.s	@noflip
00013C7C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013C80                            
00013C80                            	@noflip:
00013C80 4E75                       		rts	
00013C82                            ; ===========================================================================
00013C82                            
00013C82                            @wait:
00013C82 6100 0000                  		bsr.w	@chksonic
00013C86 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C8A 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013C8C 6100 BABE                  		bsr.w	SpeedToPos
00013C90 4E75                       		rts	
00013C92                            ; ===========================================================================
00013C92                            
00013C92                            	@stopwalking:
00013C92 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013C96 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013C9C 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013CA0 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013CA6 4E75                       		rts	
00013CA8                            ; ===========================================================================
00013CA8                            
00013CA8                            @explode:
00013CA8 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013CAC 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013CAE 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013CB2 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013CB8                            
00013CB8                            	@noexplode:
00013CB8 4E75                       		rts	
00013CBA                            ; ===========================================================================
00013CBA                            
00013CBA                            @chksonic:
00013CBA 3038 D008                  		move.w	(v_player+obX).w,d0
00013CBE 9068 0008                  		sub.w	obX(a0),d0
00013CC2 6400                       		bcc.s	@isleft
00013CC4 4440                       		neg.w	d0
00013CC6                            
00013CC6                            	@isleft:
00013CC6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013CCA 6400                       		bcc.s	@outofrange	; if not, branch
00013CCC 3038 D00C                  		move.w	(v_player+obY).w,d0
00013CD0 9068 000C                  		sub.w	obY(a0),d0
00013CD4 6400                       		bcc.s	@isabove
00013CD6 4440                       		neg.w	d0
00013CD8                            
00013CD8                            	@isabove:
00013CD8 0C40 0060                  		cmpi.w	#$60,d0
00013CDC 6400                       		bcc.s	@outofrange
00013CDE 4A78 FE08                  		tst.w	(v_debuguse).w
00013CE2 6600                       		bne.s	@outofrange
00013CE4                            
00013CE4 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013CEA 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013CF0 4268 0010                  		clr.w	obVelX(a0)
00013CF4 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013CFA 6100 BF06                  		bsr.w	FindNextFreeObj
00013CFE 6600                       		bne.s	@outofrange
00013D00 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013D04 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D0A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D10 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013D16 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013D1C 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013D22 137C 0003 001C             		move.b	#3,obAnim(a1)
00013D28 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013D2E 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013D34 6700                       		beq.s	@normal		; if not, branch
00013D36 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013D3A                            
00013D3A                            	@normal:
00013D3A 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013D40 2348 003C                  		move.l	a0,bom_parent(a1)
00013D44                            
00013D44                            @outofrange:
00013D44 4E75                       		rts	
00013D46                            ; ===========================================================================
00013D46                            
00013D46                            Bom_Display:	; Routine 4
00013D46 6100                       		bsr.s	loc_11B70
00013D48 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D4E 6100 8AF8                  		bsr.w	AnimateSprite
00013D52 6000 D97E                  		bra.w	RememberState
00013D56                            ; ===========================================================================
00013D56                            
00013D56                            loc_11B70:
00013D56 5368 0030                  		subq.w	#1,bom_time(a0)
00013D5A 6B00                       		bmi.s	loc_11B7C
00013D5C 6100 B9EE                  		bsr.w	SpeedToPos
00013D60 4E75                       		rts	
00013D62                            ; ===========================================================================
00013D62                            
00013D62                            loc_11B7C:
00013D62 4268 0030                  		clr.w	bom_time(a0)
00013D66 4228 0024                  		clr.b	obRoutine(a0)
00013D6A 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013D70 7203                       		moveq	#3,d1
00013D72 2248                       		movea.l	a0,a1
00013D74 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013D7A 6000                       		bra.s	@makeshrapnel
00013D7C                            ; ===========================================================================
00013D7C                            
00013D7C                            	@loop:
00013D7C 6100 BE84                  		bsr.w	FindNextFreeObj
00013D80 6600                       		bne.s	@fail
00013D82                            
00013D82                            @makeshrapnel:
00013D82 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013D86 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D8C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D92 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013D98 137C 0004 001C             		move.b	#4,obAnim(a1)
00013D9E 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013DA2 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013DA6 137C 0098 0020             		move.b	#$98,obColType(a1)
00013DAC 08E9 0007 0001             		bset	#7,obRender(a1)
00013DB2                            
00013DB2                            	@fail:
00013DB2 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013DB6                            
00013DB6 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013DBC                            
00013DBC                            Bom_End:	; Routine 6
00013DBC 6100 B98E                  		bsr.w	SpeedToPos
00013DC0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013DC6 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013DCC 6100 8A7A                  		bsr.w	AnimateSprite
00013DD0 4A28 0001                  		tst.b	obRender(a0)
00013DD4 6A00 B9CA                  		bpl.w	DeleteObject
00013DD8 6000 B986                  		bra.w	DisplaySprite
00013DDC                            ; ===========================================================================
00013DDC FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013DDC FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013DEC                            		include	"_anim\Bomb Enemy.asm"
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            ; Animation script - Bomb enemy
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013DEE 0000                       		dc.w @walk-Ani_Bomb
00013DF0 0000                       		dc.w @activated-Ani_Bomb
00013DF2 0000                       		dc.w @fuse-Ani_Bomb
00013DF4 0000                       		dc.w @shrapnel-Ani_Bomb
00013DF6 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013DFA 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013E00 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013E04 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013E08 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013E0C                            		even
00013E0C                            		even
00013E0C                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013E0C                            ; ---------------------------------------------------------------------------
00013E0C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013E0C                            ; ---------------------------------------------------------------------------
00013E0C                            Map_Bomb_internal:
00013E0C 0000                       		dc.w @stand1-Map_Bomb_internal
00013E0E 0000                       		dc.w @stand2-Map_Bomb_internal
00013E10 0000                       		dc.w @walk1-Map_Bomb_internal
00013E12 0000                       		dc.w @walk2-Map_Bomb_internal
00013E14 0000                       		dc.w @walk3-Map_Bomb_internal
00013E16 0000                       		dc.w @walk4-Map_Bomb_internal
00013E18 0000                       		dc.w @activate1-Map_Bomb_internal
00013E1A 0000                       		dc.w @activate2-Map_Bomb_internal
00013E1C 0000                       		dc.w @fuse1-Map_Bomb_internal
00013E1E 0000                       		dc.w @fuse2-Map_Bomb_internal
00013E20 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013E22 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013E24 03                         @stand1:	dc.b 3
00013E25 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013E2A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E2F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E34 03                         @stand2:	dc.b 3
00013E35 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E3A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E3F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E44 03                         @walk1:		dc.b 3
00013E45 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013E4A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013E4F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013E54 03                         @walk2:		dc.b 3
00013E55 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E5A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013E5F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E64 03                         @walk3:		dc.b 3
00013E65 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013E6A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013E6F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013E74 03                         @walk4:		dc.b 3
00013E75 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E7A 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013E7F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E84 02                         @activate1:	dc.b 2
00013E85 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013E8A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E8F 02                         @activate2:	dc.b 2
00013E90 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E95 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E9A 01                         @fuse1:		dc.b 1
00013E9B E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013EA0 01                         @fuse2:		dc.b 1
00013EA1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013EA6 01                         @shrapnel1:	dc.b 1
00013EA7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013EAC 01                         @shrapnel2:	dc.b 1
00013EAD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013EB2                            		even
00013EB2                            		even
00013EB2                            
00013EB2                            		include	"_incObj\60 Orbinaut.asm"
00013EB2                            ; ---------------------------------------------------------------------------
00013EB2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013EB2                            ; ---------------------------------------------------------------------------
00013EB2                            
00013EB2                            Orbinaut:
00013EB2 7000                       		moveq	#0,d0
00013EB4 1028 0024                  		move.b	obRoutine(a0),d0
00013EB8 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013EBC 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013EC0                            ; ===========================================================================
00013EC0 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013EC2 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013EC4 0000                       		dc.w Orb_Display-Orb_Index
00013EC6 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013EC8 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013ECA                            
00013ECA =0000003C                  orb_parent:	equ $3C		; address of parent object
00013ECA                            ; ===========================================================================
00013ECA                            
00013ECA                            Orb_Main:	; Routine 0
00013ECA 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013ED2 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013ED8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013EDE 6700                       		beq.s	@isscrap
00013EE0 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013EE6                            
00013EE6                            	@isscrap:
00013EE6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013EEC 6600                       		bne.s	@notlabyrinth
00013EEE 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013EF4                            
00013EF4                            	@notlabyrinth:
00013EF4 0028 0004 0001             		ori.b	#4,obRender(a0)
00013EFA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013F00 117C 000B 0020             		move.b	#$B,obColType(a0)
00013F06 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013F0C 7400                       		moveq	#0,d2
00013F0E 45E8 0037                  		lea	$37(a0),a2
00013F12 264A                       		movea.l	a2,a3
00013F14 524A                       		addq.w	#1,a2
00013F16 7203                       		moveq	#3,d1
00013F18                            
00013F18                            @makesatellites:
00013F18 6100 BCE8                  		bsr.w	FindNextFreeObj
00013F1C 6600                       		bne.s	@fail
00013F1E 5213                       		addq.b	#1,(a3)
00013F20 3A09                       		move.w	a1,d5
00013F22 0445 D000                  		subi.w	#$D000,d5
00013F26 EC4D                       		lsr.w	#6,d5
00013F28 0245 007F                  		andi.w	#$7F,d5
00013F2C 14C5                       		move.b	d5,(a2)+
00013F2E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013F30 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013F36 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013F3C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013F42 0029 0004 0001             		ori.b	#4,obRender(a1)
00013F48 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013F4E 137C 0008 0014             		move.b	#8,obActWid(a1)
00013F54 137C 0003 001A             		move.b	#3,obFrame(a1)
00013F5A 137C 0098 0020             		move.b	#$98,obColType(a1)
00013F60 1342 0026                  		move.b	d2,obAngle(a1)
00013F64 0602 0040                  		addi.b	#$40,d2
00013F68 2348 003C                  		move.l	a0,orb_parent(a1)
00013F6C 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013F70                            
00013F70                            	@fail:
00013F70 7001                       		moveq	#1,d0
00013F72 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013F78 6700                       		beq.s	@noflip		; if not, branch
00013F7A 4440                       		neg.w	d0
00013F7C                            
00013F7C                            	@noflip:
00013F7C 1140 0036                  		move.b	d0,$36(a0)
00013F80 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013F86 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F8A 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013F90 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013F96 6700                       		beq.s	@noflip2	; if not, branch
00013F98 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013F9C                            
00013F9C                            	@noflip2:
00013F9C 4E75                       		rts	
00013F9E                            ; ===========================================================================
00013F9E                            
00013F9E                            Orb_ChkSonic:	; Routine 2
00013F9E 3038 D008                  		move.w	(v_player+obX).w,d0
00013FA2 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013FA6 6400                       		bcc.s	@isright	; if yes, branch
00013FA8 4440                       		neg.w	d0
00013FAA                            
00013FAA                            	@isright:
00013FAA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013FAE 6400                       		bcc.s	@animate	; if not, branch
00013FB0 3038 D00C                  		move.w	(v_player+obY).w,d0
00013FB4 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013FB8 6400                       		bcc.s	@isabove	; if yes, branch
00013FBA 4440                       		neg.w	d0
00013FBC                            
00013FBC                            	@isabove:
00013FBC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013FC0 6400                       		bcc.s	@animate	; if not, branch
00013FC2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013FC6 6600                       		bne.s	@animate	; if yes, branch
00013FC8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013FCE                            
00013FCE                            @animate:
00013FCE 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013FD4 6100 8872                  		bsr.w	AnimateSprite
00013FD8 6000 0000                  		bra.w	Orb_ChkDel
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            Orb_Display:	; Routine 4
00013FDC 6100 B76E                  		bsr.w	SpeedToPos
00013FE0                            
00013FE0                            Orb_ChkDel:
00013FFE 6000 B760                  		bra.w	DisplaySprite
00014002                            
00014002                            @chkgone:
00014002 45F8 FC00                  		lea	(v_objstate).w,a2
00014006 7000                       		moveq	#0,d0
00014008 1028 0023                  		move.b	obRespawnNo(a0),d0
0001400C 6700                       		beq.s	loc_11E34
0001400E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014014                            
00014014                            loc_11E34:
00014014 45E8 0037                  		lea	$37(a0),a2
00014018 7400                       		moveq	#0,d2
0001401A 141A                       		move.b	(a2)+,d2
0001401C 5342                       		subq.w	#1,d2
0001401E 6500                       		bcs.s	Orb_Delete
00014020                            
00014020                            loc_11E40:
00014020 7000                       		moveq	#0,d0
00014022 101A                       		move.b	(a2)+,d0
00014024 ED48                       		lsl.w	#6,d0
00014026 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001402C 2240                       		movea.l	d0,a1
0001402E 6100 B772                  		bsr.w	DeleteChild
00014032 51CA FFEC                  		dbf	d2,loc_11E40
00014036                            
00014036                            Orb_Delete:
00014036 6000 B768                  		bra.w	DeleteObject
0001403A                            ; ===========================================================================
0001403A                            
0001403A                            Orb_MoveOrb:	; Routine 6
0001403A 2268 003C                  		movea.l	orb_parent(a0),a1
0001403E 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00014042 6600 B75C                  		bne.w	DeleteObject	; if not, delete
00014046 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
0001404C 6600                       		bne.s	@circle		; if not, branch
0001404E 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014054 6600                       		bne.s	@circle		; if not, branch
00014056 5428 0024                  		addq.b	#2,obRoutine(a0)
0001405A 5329 0037                  		subq.b	#1,$37(a1)
0001405E 6600                       		bne.s	@fire
00014060 5429 0024                  		addq.b	#2,obRoutine(a1)
00014064                            
00014064                            	@fire:
00014064 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
0001406A 0829 0000 0022             		btst	#0,obStatus(a1)
00014070 6700                       		beq.s	@noflip
00014072 4468 0010                  		neg.w	obVelX(a0)
00014076                            
00014076                            	@noflip:
00014076 6000 B6E8                  		bra.w	DisplaySprite
0001407A                            ; ===========================================================================
0001407A                            
0001407A                            @circle:
0001407A 1028 0026                  		move.b	obAngle(a0),d0
0001407E 4EB9 0000 3A32             		jsr	(CalcSine).l
00014084 E841                       		asr.w	#4,d1
00014086 D269 0008                  		add.w	obX(a1),d1
0001408A 3141 0008                  		move.w	d1,obX(a0)
0001408E E840                       		asr.w	#4,d0
00014090 D069 000C                  		add.w	obY(a1),d0
00014094 3140 000C                  		move.w	d0,obY(a0)
00014098 1029 0036                  		move.b	$36(a1),d0
0001409C D128 0026                  		add.b	d0,obAngle(a0)
000140A0 6000 B6BE                  		bra.w	DisplaySprite
000140A4                            ; ===========================================================================
000140A4                            
000140A4                            Orb_ChkDel2:	; Routine 8
000140A4 6100 B6A6                  		bsr.w	SpeedToPos
000140A8 4A28 0001                  		tst.b	obRender(a0)
000140AC 6A00 B6F2                  		bpl.w	DeleteObject
000140B0 6000 B6AE                  		bra.w	DisplaySprite
000140B0 6000 B6AE                  		bra.w	DisplaySprite
000140B4                            		include	"_anim\Orbinaut.asm"
000140B4                            ; ---------------------------------------------------------------------------
000140B4                            ; Animation script - Orbinaut enemy
000140B4                            ; ---------------------------------------------------------------------------
000140B4 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000140B6 0000                       		dc.w @angers-Ani_Orb
000140B8 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000140BC 00                         		even
000140BC 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000140C2 00                         		even
000140C2 00                         		even
000140C2                            Map_Orb:	include	"_maps\Orbinaut.asm"
000140C2                            ; ---------------------------------------------------------------------------
000140C2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000140C2                            ; ---------------------------------------------------------------------------
000140C2                            Map_Orb_internal:
000140C2 0000                       		dc.w @normal-Map_Orb_internal
000140C4 0000                       		dc.w @medium-Map_Orb_internal
000140C6 0000                       		dc.w @angry-Map_Orb_internal
000140C8 0000                       		dc.w @spikeball-Map_Orb_internal
000140CA 01                         @normal:	dc.b 1
000140CB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000140D0 01                         @medium:	dc.b 1
000140D1 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000140D6 01                         @angry:		dc.b 1
000140D7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000140DC 01                         @spikeball:	dc.b 1
000140DD F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000140E2                            		even
000140E2                            		even
000140E2                            
000140E2                            		include	"_incObj\16 Harpoon.asm"
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            ; Object 16 - harpoon (LZ)
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            
000140E2                            Harpoon:
000140E2 7000                       		moveq	#0,d0
000140E4 1028 0024                  		move.b	obRoutine(a0),d0
000140E8 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000140EC 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000140F0                            ; ===========================================================================
000140F0 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000140F2 0000                       		dc.w Harp_Move-Harp_Index
000140F4 0000                       		dc.w Harp_Wait-Harp_Index
000140F6                            
000140F6 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000140F6                            ; ===========================================================================
000140F6                            
000140F6                            Harp_Main:	; Routine 0
000140F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000140FA 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014102 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014108 0028 0004 0001             		ori.b	#4,obRender(a0)
0001410E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014114 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
0001411A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014120 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014126                            
00014126                            Harp_Move:	; Routine 2
00014126 43F9 0000 0000             		lea	(Ani_Harp).l,a1
0001412C 6100 871A                  		bsr.w	AnimateSprite
00014130 7000                       		moveq	#0,d0
00014132 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014136 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
0001413C 6000 D594                  		bra.w	RememberState
00014140                            
00014140                            	@types:
00014140 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014146                            		even
00014146                            
00014146                            Harp_Wait:	; Routine 4
00014146 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
0001414A 6A00                       		bpl.s	@chkdel		; branch if time remains
0001414C 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00014152 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014156 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
0001415C                            
0001415C                            	@chkdel:
0001415C 6000 D574                  		bra.w	RememberState
0001415C 6000 D574                  		bra.w	RememberState
00014160                            		include	"_anim\Harpoon.asm"
00014160                            ; ---------------------------------------------------------------------------
00014160                            ; Animation script - harpoon (LZ)
00014160                            ; ---------------------------------------------------------------------------
00014160 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014162 0000                       		dc.w @h_retracting-Ani_Harp
00014164 0000                       		dc.w @v_extending-Ani_Harp
00014166 0000                       		dc.w @v_retracting-Ani_Harp
00014168 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001416C 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00014170 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014174 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014178                            		even
00014178                            		even
00014178                            Map_Harp:	include	"_maps\Harpoon.asm"
00014178                            ; ---------------------------------------------------------------------------
00014178                            ; Sprite mappings - harpoon (LZ)
00014178                            ; ---------------------------------------------------------------------------
00014178                            Map_Harp_internal:
00014178 0000                       		dc.w @h_retracted-Map_Harp_internal
0001417A 0000                       		dc.w @h_middle-Map_Harp_internal
0001417C 0000                       		dc.w @h_extended-Map_Harp_internal
0001417E 0000                       		dc.w @v_retracted-Map_Harp_internal
00014180 0000                       		dc.w @v_middle-Map_Harp_internal
00014182 0000                       		dc.w @v_extended-Map_Harp_internal
00014184 01                         @h_retracted:	dc.b 1
00014185 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001418A 01                         @h_middle:	dc.b 1
0001418B FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00014190 02                         @h_extended:	dc.b 2
00014191 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00014196 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001419B 01                         @v_retracted:	dc.b 1
0001419C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000141A1 01                         @v_middle:	dc.b 1
000141A2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000141A7 02                         @v_extended:	dc.b 2
000141A8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000141AD F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000141B2                            		even
000141B2                            		even
000141B2                            		include	"_incObj\61 LZ Blocks.asm"
000141B2                            ; ---------------------------------------------------------------------------
000141B2                            ; Object 61 - blocks (LZ)
000141B2                            ; ---------------------------------------------------------------------------
000141B2                            
000141B2                            LabyrinthBlock:
000141B2 7000                       		moveq	#0,d0
000141B4 1028 0024                  		move.b	obRoutine(a0),d0
000141B8 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000141BC 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000141C0                            ; ===========================================================================
000141C0 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000141C2 0000                       		dc.w LBlk_Action-LBlk_Index
000141C4                            
000141C4 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000141C6 200C                       		dc.b $20, $C
000141C8 1010                       		dc.b $10, $10
000141CA 1010                       		dc.b $10, $10
000141CC                            
000141CC =00000016                  lblk_height:	equ $16		; block height
000141CC =00000034                  lblk_origX:	equ $34		; original x-axis position
000141CC =00000030                  lblk_origY:	equ $30		; original y-axis position
000141CC =00000036                  lblk_time:	equ $36		; time delay for block movement
000141CC =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000141CC                            ; ===========================================================================
000141CC                            
000141CC                            LBlk_Main:	; Routine 0
000141CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000141D0 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000141D8 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000141DE 117C 0004 0001             		move.b	#4,obRender(a0)
000141E4 317C 0180 0018             		move.w	#$180,obPriority(a0)
000141EA 7000                       		moveq	#0,d0
000141EC 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000141F0 E648                       		lsr.w	#3,d0		; read only the 1st digit
000141F2 0240 000E                  		andi.w	#$E,d0
000141F6 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000141FA 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000141FE 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014202 E248                       		lsr.w	#1,d0
00014204 1140 001A                  		move.b	d0,obFrame(a0)
00014208 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001420E 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014214 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014218 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001421C 6700                       		beq.s	LBlk_Action	; branch if 0
0001421E 0C00 0007                  		cmpi.b	#7,d0
00014222 6700                       		beq.s	LBlk_Action	; branch if 7
00014224 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
0001422A                            
0001422A                            LBlk_Action:	; Routine 2
0001422A 3F28 0008                  		move.w	obX(a0),-(sp)
0001422E 7000                       		moveq	#0,d0
00014230 1028 0028                  		move.b	obSubtype(a0),d0
00014234 0240 000F                  		andi.w	#$F,d0
00014238 D040                       		add.w	d0,d0
0001423A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001423E 4EBB 1000                  		jsr	@index(pc,d1.w)
00014242 381F                       		move.w	(sp)+,d4
00014244 4A28 0001                  		tst.b	obRender(a0)
00014248 6A00                       		bpl.s	@chkdel
0001424A 7200                       		moveq	#0,d1
0001424C 1228 0014                  		move.b	obActWid(a0),d1
00014250 0641 000B                  		addi.w	#$B,d1
00014254 7400                       		moveq	#0,d2
00014256 1428 0016                  		move.b	lblk_height(a0),d2
0001425A 3602                       		move.w	d2,d3
0001425C 5243                       		addq.w	#1,d3
0001425E 6100 D90A                  		bsr.w	SolidObject
00014262 1144 003F                  		move.b	d4,$3F(a0)
00014266 6100 0000                  		bsr.w	loc_12180
0001426A                            
0001426A                            @chkdel:
00014288 6000 B4D6                  		bra.w	DisplaySprite
0001428C                            ; ===========================================================================
0001428C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014290 0000 0000                  		dc.w @type02-@index, @type03-@index
00014294 0000 0000                  		dc.w @type04-@index, @type05-@index
00014298 0000 0000                  		dc.w @type06-@index, @type07-@index
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            @type00:
0001429C 4E75                       		rts	
0001429E                            ; ===========================================================================
0001429E                            
0001429E                            @type01:
0001429E                            @type03:
0001429E 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000142A2 6600                       		bne.s	@wait01		; if yes, branch
000142A4 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000142AA 6700                       		beq.s	@donothing01	; if not, branch
000142AC 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000142B2                            
000142B2                            	@donothing01:
000142B2 4E75                       		rts	
000142B4                            ; ===========================================================================
000142B4                            
000142B4                            	@wait01:
000142B4 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000142B8 66F8                       		bne.s	@donothing01	; if time remains, branch
000142BA 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000142BE 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000142C2 4E75                       		rts	
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            @type02:
000142C4                            @type06:
000142C4 6100 B486                  		bsr.w	SpeedToPos
000142C8 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000142CC 6100 0000                  		bsr.w	ObjFloorDist
000142D0 4A41                       		tst.w	d1		; has block hit the floor?
000142D2 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000142D6 5241                       		addq.w	#1,d1
000142D8 D368 000C                  		add.w	d1,obY(a0)
000142DC 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000142E0 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000142E4                            
000142E4                            	@nofloor02:
000142E4 4E75                       		rts	
000142E6                            ; ===========================================================================
000142E6                            
000142E6                            @type04:
000142E6 6100 B464                  		bsr.w	SpeedToPos
000142EA 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000142EE 6100 0000                  		bsr.w	ObjHitCeiling
000142F2 4A41                       		tst.w	d1		; has block hit the ceiling?
000142F4 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000142F8 9368 000C                  		sub.w	d1,obY(a0)
000142FC 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014300 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014304                            
00014304                            	@noceiling04:
00014304 4E75                       		rts	
00014306                            ; ===========================================================================
00014306                            
00014306                            @type05:
00014306 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001430C 6600                       		bne.s	@notouch05	; if not, branch
0001430E 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014312 4228 0038                  		clr.b	lblk_untouched(a0)
00014316                            
00014316                            	@notouch05:
00014316 4E75                       		rts	
00014318                            ; ===========================================================================
00014318                            
00014318                            @type07:
00014318 3038 F646                  		move.w	(v_waterpos1).w,d0
0001431C 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014320 6700                       		beq.s	@stop07		; if yes, branch
00014322 6400                       		bcc.s	@fall07		; branch if block is above water
00014324 0C40 FFFE                  		cmpi.w	#-2,d0
00014328 6C00                       		bge.s	@loc_1214E
0001432A 70FE                       		moveq	#-2,d0
0001432C                            
0001432C                            	@loc_1214E:
0001432C D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014330 6100 0000                  		bsr.w	ObjHitCeiling
00014334 4A41                       		tst.w	d1		; has block hit the ceiling?
00014336 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
0001433A 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001433E                            
0001433E                            	@noceiling07:
0001433E 4E75                       		rts	
00014340                            ; ===========================================================================
00014340                            
00014340                            @fall07:
00014340 0C40 0002                  		cmpi.w	#2,d0
00014344 6F00                       		ble.s	@loc_1216A
00014346 7002                       		moveq	#2,d0
00014348                            
00014348                            	@loc_1216A:
00014348 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001434C 6100 0000                  		bsr.w	ObjFloorDist
00014350 4A41                       		tst.w	d1
00014352 6A00 0000                  		bpl.w	@stop07
00014356 5241                       		addq.w	#1,d1
00014358 D368 000C                  		add.w	d1,obY(a0)
0001435C                            
0001435C                            	@stop07:
0001435C 4E75                       		rts	
0001435E                            ; ===========================================================================
0001435E                            
0001435E                            loc_12180:
0001435E 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014362 6700                       		beq.s	locret_121C0	; if yes, branch
00014364 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
0001436A 6600                       		bne.s	loc_1219A	; if yes, branch
0001436C 4A28 003E                  		tst.b	$3E(a0)
00014370 6700                       		beq.s	locret_121C0
00014372 5928 003E                  		subq.b	#4,$3E(a0)
00014376 6000                       		bra.s	loc_121A6
00014378                            ; ===========================================================================
00014378                            
00014378                            loc_1219A:
00014378 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001437E 6700                       		beq.s	locret_121C0
00014380 5828 003E                  		addq.b	#4,$3E(a0)
00014384                            
00014384                            loc_121A6:
00014384 1028 003E                  		move.b	$3E(a0),d0
00014388 4EB9 0000 3A32             		jsr	(CalcSine).l
0001438E 323C 0400                  		move.w	#$400,d1
00014392 C1C1                       		muls.w	d1,d0
00014394 4840                       		swap	d0
00014396 D068 0030                  		add.w	lblk_origY(a0),d0
0001439A 3140 000C                  		move.w	d0,obY(a0)
0001439E                            
0001439E                            locret_121C0:
0001439E 4E75                       		rts	
0001439E 4E75                       		rts	
000143A0                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000143A0                            Map_6865:
000143A0 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000143A2 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000143A4 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000143A6 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000143A8 01                         Map_6865_8: 	dc.b $1
000143A9 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000143AE 02                         Map_6865_E: 	dc.b $2
000143AF F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000143B4 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000143B9 01                         Map_6865_19: 	dc.b $1
000143BA F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000143BF 01                         Map_6865_1F: 	dc.b $1
000143C0 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000143C6 00                         	even
000143C6 00                         	even
000143C6                            		include	"_incObj\62 Gargoyle.asm"
000143C6                            ; ---------------------------------------------------------------------------
000143C6                            ; Object 62 - gargoyle head (LZ)
000143C6                            ; ---------------------------------------------------------------------------
000143C6                            
000143C6                            Gargoyle:
000143C6 7000                       		moveq	#0,d0
000143C8 1028 0024                  		move.b	obRoutine(a0),d0
000143CC 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000143D0 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000143D4 6000 D2FC                  		bra.w	RememberState
000143D8                            ; ===========================================================================
000143D8 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000143DA 0000                       		dc.w Gar_MakeFire-Gar_Index
000143DC 0000                       		dc.w Gar_FireBall-Gar_Index
000143DE 0000                       		dc.w Gar_AniFire-Gar_Index
000143E0                            
000143E0 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000143E8                            ; ===========================================================================
000143E8                            
000143E8                            Gar_Main:	; Routine 0
000143E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000143EC 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000143F4 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000143FA 0028 0004 0001             		ori.b	#4,obRender(a0)
00014400 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014406 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001440C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014410 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014414 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001441A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014420 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014426                            
00014426                            Gar_MakeFire:	; Routine 2
00014426 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
0001442A 6600                       		bne.s	@nofire		; if time remains, branch
0001442C                            
0001442C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014432 6100 B5AC                  		bsr.w	ChkObjectVisible
00014436 6600                       		bne.s	@nofire
00014438 6100 B7B2                  		bsr.w	FindFreeObj
0001443C 6600                       		bne.s	@nofire
0001443E 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014442 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014446 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001444C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014452 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014458 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001445E                            
0001445E                            	@nofire:
0001445E 4E75                       		rts	
00014460                            ; ===========================================================================
00014460                            
00014460                            Gar_FireBall:	; Routine 4
00014460 5428 0024                  		addq.b	#2,obRoutine(a0)
00014464 117C 0008 0016             		move.b	#8,obHeight(a0)
0001446A 117C 0008 0017             		move.b	#8,obWidth(a0)
00014470 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014478 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001447E 0028 0004 0001             		ori.b	#4,obRender(a0)
00014484 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001448A 117C 0098 0020             		move.b	#$98,obColType(a0)
00014490 117C 0008 0014             		move.b	#8,obActWid(a0)
00014496 117C 0002 001A             		move.b	#2,obFrame(a0)
0001449C 5068 000C                  		addq.w	#8,obY(a0)
000144A0 317C 0200 0010             		move.w	#$200,obVelX(a0)
000144A6 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000144AC 6600                       		bne.s	@noflip		; if not, branch
000144AE 4468 0010                  		neg.w	obVelX(a0)
000144B2                            
000144B2                            	@noflip:
000144BC                            
000144BC                            Gar_AniFire:	; Routine 6
000144BC 1038 FE05                  		move.b	(v_framebyte).w,d0
000144C0 0200 0007                  		andi.b	#7,d0
000144C4 6600                       		bne.s	@nochg
000144C6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000144CC                            
000144CC                            	@nochg:
000144CC 6100 B27E                  		bsr.w	SpeedToPos
000144D0 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000144D6 6600                       		bne.s	@isright	; if not, branch
000144D8 76F8                       		moveq	#-8,d3
000144DA 6100 0000                  		bsr.w	ObjHitWallLeft
000144DE 4A41                       		tst.w	d1
000144E0 6B00 B2BE                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000144E4 4E75                       		rts	
000144E6                            
000144E6                            	@isright:
000144E6 7608                       		moveq	#8,d3
000144E8 6100 0000                  		bsr.w	ObjHitWallRight
000144EC 4A41                       		tst.w	d1
000144EE 6B00 B2B0                  		bmi.w	DeleteObject
000144F2 4E75                       		rts	
000144F2 4E75                       		rts	
000144F4                            Map_Gar:	include	"_maps\Gargoyle.asm"
000144F4                            ; ---------------------------------------------------------------------------
000144F4                            ; Sprite mappings - gargoyle head (LZ)
000144F4                            ; ---------------------------------------------------------------------------
000144F4                            Map_Gar_internal:
000144F4 0000                       		dc.w @head-Map_Gar_internal
000144F6 0000                       		dc.w @head-Map_Gar_internal
000144F8 0000                       		dc.w @fireball1-Map_Gar_internal
000144FA 0000                       		dc.w @fireball2-Map_Gar_internal
000144FC 03                         @head:		dc.b 3
000144FD F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014502 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014507 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001450C 01                         @fireball1:	dc.b 1
0001450D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014512 01                         @fireball2:	dc.b 1
00014513 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014518                            		even
00014518                            		even
00014518                            		include	"_incObj\63 LZ Conveyor.asm"
00014518                            ; ---------------------------------------------------------------------------
00014518                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014518                            ; ---------------------------------------------------------------------------
00014518                            
00014518                            LabyrinthConvey:
00014518 7000                       		moveq	#0,d0
0001451A 1028 0024                  		move.b	obRoutine(a0),d0
0001451E 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014522 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014542                            
00014542                            LCon_Display:
00014542 6000 B21C                  		bra.w	DisplaySprite
00014546                            ; ===========================================================================
00014546                            
00014546                            loc_1236A:
00014546 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001454C 6600                       		bne.s	loc_12378
0001454E 0C40 FF80                  		cmpi.w	#-$80,d0
00014552 64EE                       		bcc.s	LCon_Display
00014554                            
00014554                            loc_12378:
00014554 1028 002F                  		move.b	$2F(a0),d0
00014558 6A00 B246                  		bpl.w	DeleteObject
0001455C 0240 007F                  		andi.w	#$7F,d0
00014560 45F8 F7C1                  		lea	(v_obj63).w,a2
00014564 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001456A 6000 B234                  		bra.w	DeleteObject
0001456E                            ; ===========================================================================
0001456E 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014570 0000                       		dc.w loc_124B2-LCon_Index
00014572 0000                       		dc.w loc_124C2-LCon_Index
00014574 0000                       		dc.w loc_124DE-LCon_Index
00014576                            ; ===========================================================================
00014576                            
00014576                            LCon_Main:	; Routine 0
00014576 1028 0028                  		move.b	obSubtype(a0),d0
0001457A 6B00 0000                  		bmi.w	loc_12460
0001457E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014582 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
0001458A 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014590 0028 0004 0001             		ori.b	#4,obRender(a0)
00014596 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001459C 317C 0200 0018             		move.w	#$200,obPriority(a0)
000145A2 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000145A8 6600                       		bne.s	loc_123E2
000145AA 5828 0024                  		addq.b	#4,obRoutine(a0)
000145AE 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000145B4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000145BA 6000 0000                  		bra.w	loc_124DE
000145BE                            ; ===========================================================================
000145BE                            
000145BE                            loc_123E2:
000145BE 117C 0004 001A             		move.b	#4,obFrame(a0)
000145C4 7000                       		moveq	#0,d0
000145C6 1028 0028                  		move.b	obSubtype(a0),d0
000145CA 3200                       		move.w	d0,d1
000145CC E648                       		lsr.w	#3,d0
000145CE 0240 001E                  		andi.w	#$1E,d0
000145D2 45FA 0000                  		lea	LCon_Data(pc),a2
000145D6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000145DA 315A 0038                  		move.w	(a2)+,$38(a0)
000145DE 315A 0030                  		move.w	(a2)+,$30(a0)
000145E2 214A 003C                  		move.l	a2,$3C(a0)
000145E6 0241 000F                  		andi.w	#$F,d1
000145EA E549                       		lsl.w	#2,d1
000145EC 1141 0038                  		move.b	d1,$38(a0)
000145F0 117C 0004 003A             		move.b	#4,$3A(a0)
000145F6 4A38 F7C0                  		tst.b	(f_conveyrev).w
000145FA 6700                       		beq.s	loc_1244C
000145FC 117C 0001 003B             		move.b	#1,$3B(a0)
00014602 4428 003A                  		neg.b	$3A(a0)
00014606 7200                       		moveq	#0,d1
00014608 1228 0038                  		move.b	$38(a0),d1
0001460C D228 003A                  		add.b	$3A(a0),d1
00014610 B228 0039                  		cmp.b	$39(a0),d1
00014614 6500                       		bcs.s	loc_12448
00014616 1001                       		move.b	d1,d0
00014618 7200                       		moveq	#0,d1
0001461A 4A00                       		tst.b	d0
0001461C 6A00                       		bpl.s	loc_12448
0001461E 1228 0039                  		move.b	$39(a0),d1
00014622 5901                       		subq.b	#4,d1
00014624                            
00014624                            loc_12448:
00014624 1141 0038                  		move.b	d1,$38(a0)
00014628                            
00014628                            loc_1244C:
00014628 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001462E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014634 6100 0000                  		bsr.w	LCon_ChangeDir
00014638 6000 0000                  		bra.w	loc_124B2
0001463C                            ; ===========================================================================
0001463C                            
0001463C                            loc_12460:
0001463C 1140 002F                  		move.b	d0,$2F(a0)
00014640 0240 007F                  		andi.w	#$7F,d0
00014644 45F8 F7C1                  		lea	(v_obj63).w,a2
00014648 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001464E 6600 B150                  		bne.w	DeleteObject
00014652 D040                       		add.w	d0,d0
00014654 0240 001E                  		andi.w	#$1E,d0
00014658 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001465C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014662 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014666 321A                       		move.w	(a2)+,d1
00014668 2248                       		movea.l	a0,a1
0001466A 6000                       		bra.s	LCon_MakePtfms
0001466C                            ; ===========================================================================
0001466C                            
0001466C                            LCon_Loop:
0001466C 6100 B57E                  		bsr.w	FindFreeObj
00014670 6600                       		bne.s	loc_124AA
00014672                            
00014672                            LCon_MakePtfms:
00014672 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014676 335A 0008                  		move.w	(a2)+,obX(a1)
0001467A 335A 000C                  		move.w	(a2)+,obY(a1)
0001467E 301A                       		move.w	(a2)+,d0
00014680 1340 0028                  		move.b	d0,obSubtype(a1)
00014684                            
00014684                            loc_124AA:
00014684 51C9 FFE6                  		dbf	d1,LCon_Loop
00014688                            
00014688 588F                       		addq.l	#4,sp
0001468A 4E75                       		rts	
0001468C                            ; ===========================================================================
0001468C                            
0001468C                            loc_124B2:	; Routine 2
0001468C 7200                       		moveq	#0,d1
0001468E 1228 0014                  		move.b	obActWid(a0),d1
00014692 4EB9 0000 8FE6             		jsr	(PlatformObject).l
00014698 6000 0000                  		bra.w	sub_12502
0001469C                            ; ===========================================================================
0001469C                            
0001469C                            loc_124C2:	; Routine 4
0001469C 7200                       		moveq	#0,d1
0001469E 1228 0014                  		move.b	obActWid(a0),d1
000146A2 4EB9 0000 915A             		jsr	(ExitPlatform).l
000146A8 3F28 0008                  		move.w	obX(a0),-(sp)
000146AC 6100 0000                  		bsr.w	sub_12502
000146B0 341F                       		move.w	(sp)+,d2
000146B2 4EF9 0000 96C4             		jmp	(MvSonicOnPtfm2).l
000146B8                            ; ===========================================================================
000146B8                            
000146B8                            loc_124DE:	; Routine 6
000146B8 3038 FE04                  		move.w	(v_framecount).w,d0
000146BC 0240 0003                  		andi.w	#3,d0
000146C0 6600                       		bne.s	loc_124FC
000146C2 7201                       		moveq	#1,d1
000146C4 4A38 F7C0                  		tst.b	(f_conveyrev).w
000146C8 6700                       		beq.s	loc_124F2
000146CA 4401                       		neg.b	d1
000146CC                            
000146CC                            loc_124F2:
000146CC D328 001A                  		add.b	d1,obFrame(a0)
000146D0 0228 0003 001A             		andi.b	#3,obFrame(a0)
000146D6                            
000146D6                            loc_124FC:
000146D6 588F                       		addq.l	#4,sp
000146D8 6000 CFF8                  		bra.w	RememberState
000146DC                            
000146DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146DC                            
000146DC                            
000146DC                            sub_12502:
000146DC 4A38 F7EE                  		tst.b	(f_switch+$E).w
000146E0 6700                       		beq.s	loc_12520
000146E2 4A28 003B                  		tst.b	$3B(a0)
000146E6 6600                       		bne.s	loc_12520
000146E8 117C 0001 003B             		move.b	#1,$3B(a0)
000146EE 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000146F4 4428 003A                  		neg.b	$3A(a0)
000146F8 6000                       		bra.s	loc_12534
000146FA                            ; ===========================================================================
000146FA                            
000146FA                            loc_12520:
000146FA 3028 0008                  		move.w	obX(a0),d0
000146FE B068 0034                  		cmp.w	$34(a0),d0
00014702 6600                       		bne.s	loc_1256A
00014704 3028 000C                  		move.w	obY(a0),d0
00014708 B068 0036                  		cmp.w	$36(a0),d0
0001470C 6600                       		bne.s	loc_1256A
0001470E                            
0001470E                            loc_12534:
0001470E 7200                       		moveq	#0,d1
00014710 1228 0038                  		move.b	$38(a0),d1
00014714 D228 003A                  		add.b	$3A(a0),d1
00014718 B228 0039                  		cmp.b	$39(a0),d1
0001471C 6500                       		bcs.s	loc_12552
0001471E 1001                       		move.b	d1,d0
00014720 7200                       		moveq	#0,d1
00014722 4A00                       		tst.b	d0
00014724 6A00                       		bpl.s	loc_12552
00014726 1228 0039                  		move.b	$39(a0),d1
0001472A 5901                       		subq.b	#4,d1
0001472C                            
0001472C                            loc_12552:
0001472C 1141 0038                  		move.b	d1,$38(a0)
00014730 2268 003C                  		movea.l	$3C(a0),a1
00014734 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001473A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014740 6100 0000                  		bsr.w	LCon_ChangeDir
00014744                            
00014744                            loc_1256A:
00014744 6100 B006                  		bsr.w	SpeedToPos
00014748 4E75                       		rts	
0001474A                            ; End of function sub_12502
0001474A                            
0001474A                            
0001474A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001474A                            
0001474A                            
0001474A                            LCon_ChangeDir:
0001474A 7000                       		moveq	#0,d0
0001474C 343C FF00                  		move.w	#-$100,d2
00014750 3028 0008                  		move.w	obX(a0),d0
00014754 9068 0034                  		sub.w	$34(a0),d0
00014758 6400                       		bcc.s	loc_12584
0001475A 4440                       		neg.w	d0
0001475C 4442                       		neg.w	d2
0001475E                            
0001475E                            loc_12584:
0001475E 7200                       		moveq	#0,d1
00014760 363C FF00                  		move.w	#-$100,d3
00014764 3228 000C                  		move.w	obY(a0),d1
00014768 9268 0036                  		sub.w	$36(a0),d1
0001476C 6400                       		bcc.s	loc_12598
0001476E 4441                       		neg.w	d1
00014770 4443                       		neg.w	d3
00014772                            
00014772                            loc_12598:
00014772 B240                       		cmp.w	d0,d1
00014774 6500                       		bcs.s	loc_125C2
00014776 3028 0008                  		move.w	obX(a0),d0
0001477A 9068 0034                  		sub.w	$34(a0),d0
0001477E 6700                       		beq.s	loc_125AE
00014780 48C0                       		ext.l	d0
00014782 E180                       		asl.l	#8,d0
00014784 81C1                       		divs.w	d1,d0
00014786 4440                       		neg.w	d0
00014788                            
00014788                            loc_125AE:
00014788 3140 0010                  		move.w	d0,obVelX(a0)
0001478C 3143 0012                  		move.w	d3,obVelY(a0)
00014790 4840                       		swap	d0
00014792 3140 000A                  		move.w	d0,obX+2(a0)
00014796 4268 000E                  		clr.w	obY+2(a0)
0001479A 4E75                       		rts	
0001479C                            ; ===========================================================================
0001479C                            
0001479C                            loc_125C2:
0001479C 3228 000C                  		move.w	obY(a0),d1
000147A0 9268 0036                  		sub.w	$36(a0),d1
000147A4 6700                       		beq.s	loc_125D4
000147A6 48C1                       		ext.l	d1
000147A8 E181                       		asl.l	#8,d1
000147AA 83C0                       		divs.w	d0,d1
000147AC 4441                       		neg.w	d1
000147AE                            
000147AE                            loc_125D4:
000147AE 3141 0012                  		move.w	d1,obVelY(a0)
000147B2 3142 0010                  		move.w	d2,obVelX(a0)
000147B6 4841                       		swap	d1
000147B8 3141 000E                  		move.w	d1,obY+2(a0)
000147BC 4268 000A                  		clr.w	obX+2(a0)
000147C0 4E75                       		rts	
000147C2                            ; End of function LCon_ChangeDir
000147C2                            
000147C2                            ; ===========================================================================
000147C2 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000147C4 0000                       		dc.w word_12610-LCon_Data
000147C6 0000                       		dc.w word_12628-LCon_Data
000147C8 0000                       		dc.w word_1263C-LCon_Data
000147CA 0000                       		dc.w word_12650-LCon_Data
000147CC 0000                       		dc.w word_12668-LCon_Data
000147CE 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000147DE 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000147EA 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000147FA 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014802 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014816 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001482A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014842 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014842 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014856                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014856                            ; ---------------------------------------------------------------------------
00014856                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014856                            ; ---------------------------------------------------------------------------
00014856                            Map_LConv_internal:
00014856 0000                       		dc.w @wheel1-Map_LConv_internal
00014858 0000                       		dc.w @wheel2-Map_LConv_internal
0001485A 0000                       		dc.w @wheel3-Map_LConv_internal
0001485C 0000                       		dc.w @wheel4-Map_LConv_internal
0001485E 0000                       		dc.w @platform-Map_LConv_internal
00014860 01                         @wheel1:	dc.b 1
00014861 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014866 01                         @wheel2:	dc.b 1
00014867 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001486C 01                         @wheel3:	dc.b 1
0001486D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014872 01                         @wheel4:	dc.b 1
00014873 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014878 01                         @platform:	dc.b 1
00014879 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001487E                            		even
0001487E                            		even
0001487E                            		include	"_incObj\64 Bubbles.asm"
0001487E                            ; ---------------------------------------------------------------------------
0001487E                            ; Object 64 - bubbles (LZ)
0001487E                            ; ---------------------------------------------------------------------------
0001487E                            
0001487E                            Bubble:
0001487E 7000                       		moveq	#0,d0
00014880 1028 0024                  		move.b	obRoutine(a0),d0
00014884 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014888 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
0001488C                            ; ===========================================================================
0001488C 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
0001488E 0000                       		dc.w Bub_Animate-Bub_Index
00014890 0000                       		dc.w Bub_ChkWater-Bub_Index
00014892 0000                       		dc.w Bub_Display-Bub_Index
00014894 0000                       		dc.w Bub_Delete-Bub_Index
00014896 0000                       		dc.w Bub_BblMaker-Bub_Index
00014898                            
00014898 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014898 =00000030                  bub_origX:	equ $30		; original x-axis position
00014898 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014898 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014898                            ; ===========================================================================
00014898                            
00014898                            Bub_Main:	; Routine 0
00014898 5428 0024                  		addq.b	#2,obRoutine(a0)
0001489C 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
000148A4 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000148AA 117C 0084 0001             		move.b	#$84,obRender(a0)
000148B0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000148B6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000148BC 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000148C0 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000148C2                            
000148C2 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000148C6 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000148CA 1140 0032                  		move.b	d0,bub_time(a0)
000148CE 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
000148D2 117C 0006 001C             		move.b	#6,obAnim(a0)
000148D8 6000 0000                  		bra.w	Bub_BblMaker
000148DC                            ; ===========================================================================
000148DC                            
000148DC                            @bubble:
000148DC 1140 001C                  		move.b	d0,obAnim(a0)
000148E0 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
000148E6 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
000148EC 4EB9 0000 3A0C             		jsr	(RandomNumber).l
000148F2 1140 0026                  		move.b	d0,obAngle(a0)
000148F6                            
000148F6                            Bub_Animate:	; Routine 2
000148F6 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000148FC 4EB9 0000 C848             		jsr	(AnimateSprite).l
00014902 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014908 6600                       		bne.s	Bub_ChkWater	; if not, branch
0001490A                            
0001490A 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014910                            
00014910                            Bub_ChkWater:	; Routine 4
00014910 3038 F646                  		move.w	(v_waterpos1).w,d0
00014914 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014918 6500                       		bcs.s	@wobble		; if yes, branch
0001491A                            
0001491A                            @burst:
0001491A 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014920 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014924 6000 0000                  		bra.w	Bub_Display
00014928                            ; ===========================================================================
00014928                            
00014928                            @wobble:
00014928 1028 0026                  		move.b	obAngle(a0),d0
0001492C 5228 0026                  		addq.b	#1,obAngle(a0)
00014930 0240 007F                  		andi.w	#$7F,d0
00014934 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
0001493A 1031 0000                  		move.b	(a1,d0.w),d0
0001493E 4880                       		ext.w	d0
00014940 D068 0030                  		add.w	bub_origX(a0),d0
00014944 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014948 4A28 002E                  		tst.b	bub_inhalable(a0)
0001494C 6700                       		beq.s	@display
0001494E 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014952 6700                       		beq.s	@display	; if not, branch
00014954                            
00014954 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014962 43F8 D000                  		lea	(v_player).w,a1
00014966 4269 0010                  		clr.w	obVelX(a1)
0001496A 4269 0012                  		clr.w	obVelY(a1)
0001496E 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014972 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014978 337C 0023 003E             		move.w	#$23,$3E(a1)
0001497E 137C 0000 003C             		move.b	#0,$3C(a1)
00014984 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001498A 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014990 0829 0002 0022             		btst	#2,obStatus(a1)
00014996 6700 FF82                  		beq.w	@burst
0001499A 08A9 0002 0022             		bclr	#2,obStatus(a1)
000149A0 137C 0013 0016             		move.b	#$13,obHeight(a1)
000149A6 137C 0009 0017             		move.b	#9,obWidth(a1)
000149AC 5B69 000C                  		subq.w	#5,obY(a1)
000149B0 6000 FF68                  		bra.w	@burst
000149B4                            ; ===========================================================================
000149B4                            
000149B4                            @display:
000149B4 6100 AD96                  		bsr.w	SpeedToPos
000149B8 4A28 0001                  		tst.b	obRender(a0)
000149BC 6A00                       		bpl.s	@delete
000149BE 4EF9 0000 F760             		jmp	(DisplaySprite).l
000149C4                            
000149C4                            	@delete:
000149C4 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000149CA                            ; ===========================================================================
000149CA                            
000149CA                            Bub_Display:	; Routine 6
000149CA 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000149D0 4EB9 0000 C848             		jsr	(AnimateSprite).l
000149D6 4A28 0001                  		tst.b	obRender(a0)
000149DA 6A00                       		bpl.s	@delete
000149DC 4EF9 0000 F760             		jmp	(DisplaySprite).l
000149E2                            
000149E2                            	@delete:
000149E2 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000149E8                            ; ===========================================================================
000149E8                            
000149E8                            Bub_Delete:	; Routine 8
000149E8 6000 ADB6                  		bra.w	DeleteObject
000149EC                            ; ===========================================================================
000149EC                            
000149EC                            Bub_BblMaker:	; Routine $A
000149EC 4A68 0036                  		tst.w	$36(a0)
000149F0 6600                       		bne.s	@loc_12874
000149F2 3038 F646                  		move.w	(v_waterpos1).w,d0
000149F6 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
000149FA 6400 0000                  		bcc.w	@chkdel		; if not, branch
000149FE 4A28 0001                  		tst.b	obRender(a0)
00014A02 6A00 0000                  		bpl.w	@chkdel
00014A06 5368 0038                  		subq.w	#1,$38(a0)
00014A0A 6A00 0000                  		bpl.w	@loc_12914
00014A0E 317C 0001 0036             		move.w	#1,$36(a0)
00014A14                            
00014A14                            	@tryagain:
00014A14 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014A1A 3200                       		move.w	d0,d1
00014A1C 0240 0007                  		andi.w	#7,d0
00014A20 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014A24 64EE                       		bcc.s	@tryagain	; if yes, branch
00014A26                            
00014A26 1140 0034                  		move.b	d0,$34(a0)
00014A2A 0241 000C                  		andi.w	#$C,d1
00014A2E 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014A34 D2C1                       		adda.w	d1,a1
00014A36 2149 003C                  		move.l	a1,$3C(a0)
00014A3A 5328 0032                  		subq.b	#1,bub_time(a0)
00014A3E 6A00                       		bpl.s	@loc_12872
00014A40 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014A46 08E8 0007 0036             		bset	#7,$36(a0)
00014A4C                            
00014A4C                            @loc_12872:
00014A4C 6000                       		bra.s	@loc_1287C
00014A4E                            ; ===========================================================================
00014A4E                            
00014A4E                            @loc_12874:
00014A4E 5368 0038                  		subq.w	#1,$38(a0)
00014A52 6A00 0000                  		bpl.w	@loc_12914
00014A56                            
00014A56                            @loc_1287C:
00014A56 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014A5C 0240 001F                  		andi.w	#$1F,d0
00014A60 3140 0038                  		move.w	d0,$38(a0)
00014A64 6100 B186                  		bsr.w	FindFreeObj
00014A68 6600                       		bne.s	@fail
00014A6A 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014A6E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014A74 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014A7A 0240 000F                  		andi.w	#$F,d0
00014A7E 5140                       		subq.w	#8,d0
00014A80 D169 0008                  		add.w	d0,obX(a1)
00014A84 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014A8A 7000                       		moveq	#0,d0
00014A8C 1028 0034                  		move.b	$34(a0),d0
00014A90 2468 003C                  		movea.l	$3C(a0),a2
00014A94 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014A9A 0828 0007 0036             		btst	#7,$36(a0)
00014AA0 6700                       		beq.s	@fail
00014AA2 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014AA8 0240 0003                  		andi.w	#3,d0
00014AAC 6600                       		bne.s	@loc_buh
00014AAE 08E8 0006 0036             		bset	#6,$36(a0)
00014AB4 6600                       		bne.s	@fail
00014AB6 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014ABC                            
00014ABC                            @loc_buh:
00014ABC 4A28 0034                  		tst.b	$34(a0)
00014AC0 6600                       		bne.s	@fail
00014AC2 08E8 0006 0036             		bset	#6,$36(a0)
00014AC8 6600                       		bne.s	@fail
00014ACA 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014AD0                            
00014AD0                            	@fail:
00014AD0 5328 0034                  		subq.b	#1,$34(a0)
00014AD4 6A00                       		bpl.s	@loc_12914
00014AD6 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014ADC 0240 007F                  		andi.w	#$7F,d0
00014AE0 0640 0080                  		addi.w	#$80,d0
00014AE4 D168 0038                  		add.w	d0,$38(a0)
00014AE8 4268 0036                  		clr.w	$36(a0)
00014AEC                            
00014AEC                            @loc_12914:
00014AEC 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014AF2 4EB9 0000 C848             		jsr	(AnimateSprite).l
00014AF8                            
00014AF8                            @chkdel:
00014B16 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B1A B068 000C                  		cmp.w	obY(a0),d0
00014B1E 6500 AC40                  		bcs.w	DisplaySprite
00014B22 4E75                       		rts	
00014B24                            ; ===========================================================================
00014B24                            ; bubble production sequence
00014B24                            
00014B24                            ; 0 = small bubble, 1 =	large bubble
00014B24                            
00014B24 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014B36                            
00014B36                            ; ===========================================================================
00014B36                            
00014B36                            Bub_ChkSonic:
00014B36 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014B3A 6B00                       		bmi.s	@loc_12998
00014B3C 43F8 D000                  		lea	(v_player).w,a1
00014B40 3029 0008                  		move.w	obX(a1),d0
00014B44 3228 0008                  		move.w	obX(a0),d1
00014B48 0441 0010                  		subi.w	#$10,d1
00014B4C B240                       		cmp.w	d0,d1
00014B4E 6400                       		bcc.s	@loc_12998
00014B50 0641 0020                  		addi.w	#$20,d1
00014B54 B240                       		cmp.w	d0,d1
00014B56 6500                       		bcs.s	@loc_12998
00014B58 3029 000C                  		move.w	obY(a1),d0
00014B5C 3228 000C                  		move.w	obY(a0),d1
00014B60 B240                       		cmp.w	d0,d1
00014B62 6400                       		bcc.s	@loc_12998
00014B64 0641 0010                  		addi.w	#$10,d1
00014B68 B240                       		cmp.w	d0,d1
00014B6A 6500                       		bcs.s	@loc_12998
00014B6C 7001                       		moveq	#1,d0
00014B6E 4E75                       		rts	
00014B70                            ; ===========================================================================
00014B70                            
00014B70                            @loc_12998:
00014B70 7000                       		moveq	#0,d0
00014B72 4E75                       		rts	
00014B72 4E75                       		rts	
00014B74                            		include	"_anim\Bubbles.asm"
00014B74                            ; ---------------------------------------------------------------------------
00014B74                            ; Animation script - bubbles (LZ)
00014B74                            ; ---------------------------------------------------------------------------
00014B74 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014B76 0000                       		dc.w @medium-Ani_Bub
00014B78 0000                       		dc.w @large-Ani_Bub
00014B7A 0000                       		dc.w @incroutine-Ani_Bub
00014B7C 0000                       		dc.w @incroutine-Ani_Bub
00014B7E 0000                       		dc.w @burst-Ani_Bub
00014B80 0000                       		dc.w @bubmaker-Ani_Bub
00014B82 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014B88 00                         		even
00014B88 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014B8E 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014B96 00                         		even
00014B96 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014B98 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014B9E 00                         		even
00014B9E 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014BA4 00                         		even
00014BA4 00                         		even
00014BA4                            Map_Bub:	include	"_maps\Bubbles.asm"
00014BA4                            ; ---------------------------------------------------------------------------
00014BA4                            ; Sprite mappings - bubbles (LZ)
00014BA4                            ; ---------------------------------------------------------------------------
00014BA4                            Map_Bub_internal:
00014BA4 0000                       		dc.w @bubble1-Map_Bub_internal
00014BA6 0000                       		dc.w @bubble2-Map_Bub_internal
00014BA8 0000                       		dc.w @bubble3-Map_Bub_internal
00014BAA 0000                       		dc.w @bubble4-Map_Bub_internal
00014BAC 0000                       		dc.w @bubble5-Map_Bub_internal
00014BAE 0000                       		dc.w @bubble6-Map_Bub_internal
00014BB0 0000                       		dc.w @bubblefull-Map_Bub_internal
00014BB2 0000                       		dc.w @burst1-Map_Bub_internal
00014BB4 0000                       		dc.w @burst2-Map_Bub_internal
00014BB6 0000                       		dc.w @zero_sm-Map_Bub_internal
00014BB8 0000                       		dc.w @five_sm-Map_Bub_internal
00014BBA 0000                       		dc.w @three_sm-Map_Bub_internal
00014BBC 0000                       		dc.w @one_sm-Map_Bub_internal
00014BBE 0000                       		dc.w @zero-Map_Bub_internal
00014BC0 0000                       		dc.w @five-Map_Bub_internal
00014BC2 0000                       		dc.w @four-Map_Bub_internal
00014BC4 0000                       		dc.w @three-Map_Bub_internal
00014BC6 0000                       		dc.w @two-Map_Bub_internal
00014BC8 0000                       		dc.w @one-Map_Bub_internal
00014BCA 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014BCC 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014BCE 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014BD0 0000                       		dc.w @blank-Map_Bub_internal
00014BD2 01                         @bubble1:	dc.b 1
00014BD3 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014BD8 01                         @bubble2:	dc.b 1
00014BD9 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014BDE 01                         @bubble3:	dc.b 1
00014BDF FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014BE4 01                         @bubble4:	dc.b 1
00014BE5 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014BEA 01                         @bubble5:	dc.b 1
00014BEB F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014BF0 01                         @bubble6:	dc.b 1
00014BF1 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014BF6 01                         @bubblefull:	dc.b 1
00014BF7 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014BFC 04                         @burst1:	dc.b 4
00014BFD F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014C02 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014C07 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014C0C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014C11 04                         @burst2:	dc.b 4
00014C12 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014C17 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014C1C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014C21 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014C26 01                         @zero_sm:	dc.b 1
00014C27 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014C2C 01                         @five_sm:	dc.b 1
00014C2D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014C32 01                         @three_sm:	dc.b 1
00014C33 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014C38 01                         @one_sm:	dc.b 1
00014C39 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014C3E 01                         @zero:		dc.b 1
00014C3F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014C44 01                         @five:		dc.b 1
00014C45 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014C4A 01                         @four:		dc.b 1
00014C4B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014C50 01                         @three:		dc.b 1
00014C51 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014C56 01                         @two:		dc.b 1
00014C57 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014C5C 01                         @one:		dc.b 1
00014C5D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014C62 01                         @bubmaker1:	dc.b 1
00014C63 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014C68 01                         @bubmaker2:	dc.b 1
00014C69 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014C6E 01                         @bubmaker3:	dc.b 1
00014C6F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014C74 00                         @blank:		dc.b 0
00014C76 00                         		even
00014C76 00                         		even
00014C76                            		include	"_incObj\65 Waterfalls.asm"
00014C76                            ; ---------------------------------------------------------------------------
00014C76                            ; Object 65 - waterfalls (LZ)
00014C76                            ; ---------------------------------------------------------------------------
00014C76                            
00014C76                            Waterfall:
00014C76 7000                       		moveq	#0,d0
00014C78 1028 0024                  		move.b	obRoutine(a0),d0
00014C7C 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014C80 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014C84                            ; ===========================================================================
00014C84 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014C86 0000                       		dc.w WFall_Animate-WFall_Index
00014C88 0000                       		dc.w WFall_ChkDel-WFall_Index
00014C8A 0000                       		dc.w WFall_OnWater-WFall_Index
00014C8C 0000                       		dc.w loc_12B36-WFall_Index
00014C8E                            ; ===========================================================================
00014C8E                            
00014C8E                            WFall_Main:	; Routine 0
00014C8E 5828 0024                  		addq.b	#4,obRoutine(a0)
00014C92 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014C9A 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014CA0 0028 0004 0001             		ori.b	#4,obRender(a0)
00014CA6 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014CAC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014CB2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014CB6 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014CB8 08E8 0007 0002             		bset	#7,obGfx(a0)
00014CBE                            
00014CBE                            	@under80:
00014CBE 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014CC2 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014CC6 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014CCA 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014CCC                            
00014CCC 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014CD0 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014CD4 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014CDA 6700                       		beq.s	@not49		; if not, branch
00014CDC                            
00014CDC 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014CE2                            
00014CE2                            	@not49:
00014CE2 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014CE8 6700                       		beq.s	WFall_Animate	; if not, branch
00014CEA 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014CF0                            
00014CF0                            WFall_Animate:	; Routine 2
00014CF0 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014CF6 4EB9 0000 C848             		jsr	(AnimateSprite).l
00014CFC                            
00014CFC                            WFall_ChkDel:	; Routine 4
00014CFC 6000 C9D4                  		bra.w	RememberState
00014D00                            ; ===========================================================================
00014D00                            
00014D00                            WFall_OnWater:	; Routine 6
00014D00 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D04 0440 0010                  		subi.w	#$10,d0
00014D08 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014D0C 60E2                       		bra.s	WFall_Animate
00014D0E                            ; ===========================================================================
00014D0E                            
00014D0E                            loc_12B36:	; Routine 8
00014D0E 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014D14 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014D1A 6600                       		bne.s	@animate
00014D1C 08E8 0007 0002             		bset	#7,obGfx(a0)
00014D22                            
00014D22                            	@animate:
00014D22 60CC                       		bra.s	WFall_Animate
00014D22 60CC                       		bra.s	WFall_Animate
00014D24                            		include	"_anim\Waterfalls.asm"
00014D24                            ; ---------------------------------------------------------------------------
00014D24                            ; Animation script - waterfall (LZ)
00014D24                            ; ---------------------------------------------------------------------------
00014D24 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014D26 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014D2C 00                         		even
00014D2C 00                         		even
00014D2C                            Map_WFall	include	"_maps\Waterfalls.asm"
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C                            ; Sprite mappings - waterfalls (LZ)
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C                            Map_WFall_internal:
00014D2C 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014D2E 0000                       		dc.w @cornerwide-Map_WFall_internal
00014D30 0000                       		dc.w @cornermedium-Map_WFall_internal
00014D32 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014D34 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014D36 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014D38 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014D3A 0000                       		dc.w @vertwide-Map_WFall_internal
00014D3C 0000                       		dc.w @diagonal-Map_WFall_internal
00014D3E 0000                       		dc.w @splash1-Map_WFall_internal
00014D40 0000                       		dc.w @splash2-Map_WFall_internal
00014D42 0000                       		dc.w @splash3-Map_WFall_internal
00014D44 01                         @vertnarrow:	dc.b 1
00014D45 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014D4A 02                         @cornerwide:	dc.b 2
00014D4B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014D50 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014D55 02                         @cornermedium:	dc.b 2
00014D56 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014D5B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D60 01                         @cornernarrow:	dc.b 1
00014D61 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014D66 02                         @cornermedium2:	dc.b 2
00014D67 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014D6C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D71 01                         @cornernarrow2:	dc.b 1
00014D72 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014D77 01                         @cornernarrow3:	dc.b 1
00014D78 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014D7D 01                         @vertwide:	dc.b 1
00014D7E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014D83 02                         @diagonal:	dc.b 2
00014D84 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014D89 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014D8E 02                         @splash1:	dc.b 2
00014D8F F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014D94 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014D99 02                         @splash2:	dc.b 2
00014D9A F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014D9F F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014DA4 02                         @splash3:	dc.b 2
00014DA5 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014DAA F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014DB0 00                         		even
00014DB0 00                         		even
00014DB0                            
00014DB0                            
00014DB0                            SpinDash_dust:
00014DB0                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014DB0 7000                       		moveq	#0,d0
00014DB2 1028 0024                  		move.b	$24(a0),d0
00014DB6 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014DBA 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014DBE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DBE 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014DC0 0000                       		dc loc_1DD90-off_1DD2E; 1
00014DC2 0000                       		dc loc_1DE46-off_1DD2E; 2
00014DC4 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014DC6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DC6                            
00014DC6                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014DC6 5428 0024                  		addq.b	#2,$24(a0)
00014DCA 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014DD2 0028 0004 0001             		or.b	#4,1(a0)
00014DD8 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014DDE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014DE4 317C 07A0 0002             		move	#$7A0,2(a0)
00014DEA 317C D000 003E             		move	#-$3000,$3E(a0)
00014DF0 317C F400 003C             		move	#$F400,$3C(a0)
00014DF6 B0FC D1C0                  		cmp	#-$2E40,a0
00014DFA 6700                       		beq.s	loc_1DD8C
00014DFC 117C 0001 0034             		move.b	#1,$34(a0)
00014E02                            ;		cmp	#2,($FFFFFF70).w
00014E02                            ;		beq.s	loc_1DD8C
00014E02                            ;		move	#$48C,2(a0)
00014E02                            ;		move	#-$4FC0,$3E(a0)
00014E02                            ;		move	#-$6E80,$3C(a0)
00014E02                            
00014E02                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014E02                            ;		bsr.w	sub_16D6E
00014E02                            
00014E02                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014E02 3468 003E                  		movea.w	$3E(a0),a2
00014E06 7000                       		moveq	#0,d0
00014E08 1028 001C                  		move.b	$1C(a0),d0
00014E0C D040                       		add	d0,d0
00014E0E 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014E12 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014E16                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E16 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014E18 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014E1A 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014E1C 0000                       		dc loc_1DE20-off_1DDA4; 3
00014E1E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E1E                            
00014E1E                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014E1E 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014E24 4A28 001D                  		tst.b	$1D(a0)
00014E28 6600                       		bne.s	loc_1DE28
00014E2A 316A 0008 0008             		move	8(a2),8(a0)
00014E30 117C 0000 0022             		move.b	#0,$22(a0)
00014E36 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014E3C 6000                       		bra.s	loc_1DE28
00014E3E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E3E                            
00014E3E                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014E3E                            ;		cmp.b	#$C,$28(a2)
00014E3E                            ;		bcs.s	loc_1DE3E
00014E3E 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014E44 6400                       		bcc.s	loc_1DE3E
00014E46 4A2A 0039                  		tst.b	$39(a2)
00014E4A 6700                       		beq.s	loc_1DE3E
00014E4C 316A 0008 0008             		move	8(a2),8(a0)
00014E52 316A 000C 000C             		move	$C(a2),$C(a0)
00014E58 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014E5E 0228 0001 0022             		and.b	#1,$22(a0)
00014E64 4A28 0034                  		tst.b	$34(a0)
00014E68 6700                       		beq.s	loc_1DE06
00014E6A 5968 000C                  		sub	#4,$C(a0)
00014E6E                            
00014E6E                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014E6E 4A28 001D                  		tst.b	$1D(a0)
00014E72 6600                       		bne.s	loc_1DE28
00014E74 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014E7A 4A6A 0002                  		tst	2(a2)
00014E7E 6A00                       		bpl.s	loc_1DE28
00014E80 0068 8000 0002             		or	#-$8000,2(a0)
00014E86                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E86                            
00014E86                            loc_1DE20:				; DATA XREF: h+6E30?o
00014E86                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014E86 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014E8C 4EB9 0000 C848             		jsr	AnimateSprite
00014E92 6100 0000                  		bsr.w	loc_1DEE4
00014E96 4EFA A8C8                  		jmp	DisplaySprite
00014E9A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E9A                            
00014E9A                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014E9A 117C 0000 001C             		move.b	#0,$1C(a0)
00014EA0 4E75                       		rts	
00014EA2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EA2                            
00014EA2                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014EA2 6000 A8FC                  		bra.w	DeleteObject
00014EA6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EA6                            
00014EA6                            
00014EA6                            
00014EA6                            loc_1DE4A:
00014EA6 3468 003E                  	movea.w	$3E(a0),a2
00014EAA 7210                       	moveq	#$10,d1
00014EAC 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014EB2 6700                       	beq.s	loc_1DE64
00014EB4 7206                       	moveq	#$6,d1
00014EB6 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014EBC 6700                       	beq.s	loc_1DE64
00014EBE 117C 0002 0024             	move.b	#2,$24(a0)
00014EC4 117C 0000 0032             	move.b	#0,$32(a0)
00014ECA 4E75                       	rts
00014ECC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014ECC                            
00014ECC                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014ECC 5328 0032                  		subq.b	#1,$32(a0)
00014ED0 6A00                       		bpl.s	loc_1DEE0
00014ED2 117C 0003 0032             		move.b	#3,$32(a0)
00014ED8 4EBA AD12                  		jsr	FindFreeObj
00014EDC 6600                       		bne.s	loc_1DEE0
00014EDE 1290                       		move.b	0(a0),0(a1)
00014EE0 336A 0008 0008             		move	8(a2),8(a1)
00014EE6 336A 000C 000C             		move	$C(a2),$C(a1)
00014EEC 4A28 0034                  		tst.b	$34(a0)
00014EF0 6700                       		beq.s	loc_1DE9A
00014EF2 5941                       		sub	#4,d1
00014EF4                            
00014EF4                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014EF4 D369 000C                  		add	d1,$C(a1)
00014EF8 137C 0000 0022             		move.b	#0,$22(a1)
00014EFE 137C 0003 001C             		move.b	#3,$1C(a1)
00014F04 5429 0024                  		addq.b	#2,$24(a1)
00014F08 2368 0004 0004             		move.l	4(a0),4(a1)
00014F0E 1368 0001 0001             		move.b	1(a0),1(a1)
00014F14 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014F1A 137C 0004 0014             		move.b	#4,obActWid(a1)
00014F20 3368 0002 0002             		move	2(a0),2(a1)
00014F26 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014F2C 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014F32 4A6A 0002                  		tst	2(a2)
00014F36 6A00                       		bpl.s	loc_1DEE0
00014F38 0069 8000 0002             		or	#-$8000,2(a1)
00014F3E                            
00014F3E                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014F3E 6100                       		bsr.s	loc_1DEE4
00014F40 4E75                       		rts	
00014F42                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F42                            
00014F42                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014F42 7000                       		moveq	#0,d0
00014F44 1028 001A                  		move.b	$1A(a0),d0
00014F48 B028 0030                  		cmp.b	$30(a0),d0
00014F4C 6700 0000                  		beq.w	locret_1DF36
00014F50 1140 0030                  		move.b	d0,$30(a0)
00014F54 45F9 0000 0000             		lea	(off_1E074).l,a2
00014F5A D040                       		add	d0,d0
00014F5C D4F2 0000                  		add	(a2,d0.w),a2
00014F60 3A1A                       		move	(a2)+,d5
00014F62 5345                       		subq	#1,d5
00014F64 6B00 0000                  		bmi.w	locret_1DF36
00014F68 3828 003C                  		move $3C(a0),d4
00014F6C                            
00014F6C                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014F6C 7200                       		moveq	#0,d1
00014F6E 321A                       		move	(a2)+,d1
00014F70 3601                       		move	d1,d3
00014F72 E04B                       		lsr.w	#8,d3
00014F74 0243 00F0                  		and	#$F0,d3	; 'ð'
00014F78 0643 0010                  		add	#$10,d3
00014F7C 0241 0FFF                  		and	#$FFF,d1
00014F80 EB89                       		lsl.l	#5,d1
00014F82 0681 0000 0000             		add.l	#Art_Dust,d1
00014F88 3404                       		move	d4,d2
00014F8A D843                       		add	d3,d4
00014F8C D843                       		add	d3,d4
00014F8E 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
00014F94 51CD FFD6                  		dbf	d5,loc_1DF0A
00014F98 4E75                           rts
00014F9A                            
00014F9A                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014F9A 4E75                       		rts	
00014F9C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F9C 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014F9E 0000                       		dc byte_1DF43-off_1DF38; 1
00014FA0 0000                       		dc byte_1DF4F-off_1DF38; 2
00014FA2 0000                       		dc byte_1DF58-off_1DF38; 3
00014FA4 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014FA7 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014FB3 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014FBC 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014FC2                            ; -------------------------------------------------------------------------------
00014FC2                            ; Unknown Sprite Mappings
00014FC2                            ; -------------------------------------------------------------------------------
00014FC2                            MapUnc_1DF5E:
00014FC2 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014FC4 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014FC6 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014FC8 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014FCA 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014FCC 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014FCE 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014FD0 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014FD2 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014FD4 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014FD6 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014FD8 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014FDA 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014FDC 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014FDE 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014FE0 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014FE2 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014FE4 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014FE6 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014FE8 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014FEA 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014FEC 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014FEE 00                         word_1DF8A:	dc.b 0
00014FEF 01                         word_1DF8C:	dc.b 1
00014FF0 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FF5 01                         word_1DF96:	dc.b 1
00014FF6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FFB 01                         word_1DFA0:	dc.b 1
00014FFC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015001 01                         word_1DFAA:	dc.b 1
00015002 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015007 01                         word_1DFB4:	dc.b 1
00015008 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001500D 01                         word_1DFBE:	dc.b 1
0001500E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015013 01                         word_1DFC8:	dc.b 1
00015014 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015019 01                         word_1DFD2:	dc.b 1
0001501A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001501F 01                         word_1DFDC:	dc.b 1
00015020 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015025 01                         word_1DFE6:	dc.b 1
00015026 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001502B 01                         word_1DFF0:	dc.b 1
0001502C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015031 01                         word_1DFFA:	dc.b 1
00015032 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015037 02                         word_1E004:	dc.b 2
00015038 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001503D 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015042 02                         word_1E016:	dc.b 2
00015043 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015048 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001504D 02                         word_1E028:	dc.b 2
0001504E F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015053 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015058 02                         word_1E03A:	dc.b 2
00015059 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001505E 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015063 01                         word_1E04C:	dc.b 1
00015064 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015069 01                         word_1E056:	dc.b 1
0001506A F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001506F 01                         word_1E060:	dc.b 1
00015070 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015075 01                         word_1E06A:	dc.b 1
00015076 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001507B 00                         	dc.b 0
0001507C 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001507E 0000                       	dc word_1E0A2-off_1E074; 1
00015080 0000                       	dc word_1E0A6-off_1E074; 2
00015082 0000                       	dc word_1E0AA-off_1E074; 3
00015084 0000                       	dc word_1E0AE-off_1E074; 4
00015086 0000                       	dc word_1E0B2-off_1E074; 5
00015088 0000                       	dc word_1E0B6-off_1E074; 6
0001508A 0000                       	dc word_1E0BA-off_1E074; 7
0001508C 0000                       	dc word_1E0BE-off_1E074; 8
0001508E 0000                       	dc word_1E0C2-off_1E074; 9
00015090 0000                       	dc word_1E0C6-off_1E074; 10
00015092 0000                       	dc word_1E0CA-off_1E074; 11
00015094 0000                       	dc word_1E0CE-off_1E074; 12
00015096 0000                       	dc word_1E0D2-off_1E074; 13
00015098 0000                       	dc word_1E0D8-off_1E074; 14
0001509A 0000                       	dc word_1E0DE-off_1E074; 15
0001509C 0000                       	dc word_1E0E4-off_1E074; 16
0001509E 0000                       	dc word_1E0EA-off_1E074; 17
000150A0 0000                       	dc word_1E0EA-off_1E074; 18
000150A2 0000                       	dc word_1E0EA-off_1E074; 19
000150A4 0000                       	dc word_1E0EA-off_1E074; 20
000150A6 0000                       	dc word_1E0EC-off_1E074; 21
000150A8 0000                       word_1E0A0:	dc 0
000150AA 0001                       word_1E0A2:	dc 1
000150AC 7000                       	dc $7000
000150AE 0001                       word_1E0A6:	dc 1
000150B0 F008                       	dc $F008
000150B2 0001                       word_1E0AA:	dc 1
000150B4 F018                       	dc $F018
000150B6 0001                       word_1E0AE:	dc 1
000150B8 F028                       	dc $F028
000150BA 0001                       word_1E0B2:	dc 1
000150BC F038                       	dc $F038
000150BE 0001                       word_1E0B6:	dc 1
000150C0 F048                       	dc $F048
000150C2 0001                       word_1E0BA:	dc 1
000150C4 7058                       	dc $7058
000150C6 0001                       word_1E0BE:	dc 1
000150C8 7060                       	dc $7060
000150CA 0001                       word_1E0C2:	dc 1
000150CC 7068                       	dc $7068
000150CE 0001                       word_1E0C6:	dc 1
000150D0 7070                       	dc $7070
000150D2 0001                       word_1E0CA:	dc 1
000150D4 7078                       	dc $7078
000150D6 0001                       word_1E0CE:	dc 1
000150D8 7080                       	dc $7080
000150DA 0002                       word_1E0D2:	dc 2
000150DC 1088                       	dc $1088
000150DE 708A                       	dc $708A
000150E0 0002                       word_1E0D8:	dc 2
000150E2 3092                       	dc $3092
000150E4 7096                       	dc $7096
000150E6 0002                       word_1E0DE:	dc 2
000150E8 509E                       	dc $509E
000150EA 70A4                       	dc $70A4
000150EC 0002                       word_1E0E4:	dc 2
000150EE 50AC                       	dc $50AC
000150F0 70B2                       	dc $70B2
000150F2 0000                       word_1E0EA:	dc 0
000150F4 0001                       word_1E0EC:	dc 1
000150F6 F0BA                       	dc $F0BA
000150F8                            	even
000150F8                            
000150F8                            ; ===========================================================================
000150F8                            
000150F8                            LoadPlayerPal:
000150F8 7000                       		moveq	#0,d0
000150FA 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000150FE 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015102 4E75                       		rts
00015104                            
00015104                            	@palLUT:
00015104 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015109 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
0001510E                            
0001510E                            LoadPlayerWaterPal:
0001510E 7000                       		moveq	#0,d0
00015110 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015114 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015118 4E75                       		rts
0001511A                            
0001511A                            	@palLUT:
0001511A 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
0001511F 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
00015124                            
00015124                            ; ---------------------------------------------------------------------------
00015124                            ; Object 01 - Sonic
00015124                            ; ---------------------------------------------------------------------------
00015124                            
00015124                            SonicPlayer:
00015124 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015128 6700                       		beq.s	Sonic_Normal	; if not, branch
0001512A 4EF9 0000 0000             		jmp	(DebugMode).l
00015130                            ; ===========================================================================
00015130                            
00015130                            Sonic_Normal:
00015130 7000                       		moveq	#0,d0
00015132 1028 0024                  		move.b	obRoutine(a0),d0
00015136 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
0001513A 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001513E                            ; ===========================================================================
0001513E 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015140 0000                       		dc.w Sonic_Control-Sonic_Index
00015142 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015144 0000                       		dc.w Sonic_Death-Sonic_Index
00015146 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015148                            ; ===========================================================================
00015148                            
00015148                            Sonic_Main:	; Routine 0
00015148 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001514E 5428 0024                  		addq.b	#2,obRoutine(a0)
00015152 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015158 117C 0009 0017             		move.b	#9,obWidth(a0)
0001515E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015166 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001516C 317C 0100 0018             		move.w	#$100,obPriority(a0)
00015172 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015178 117C 0004 0001             		move.b	#4,obRender(a0)
0001517E 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015184 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
0001518A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015190 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015196                            
00015196                            Sonic_Control:    ; Routine 2
00015196 4A38 FF8B                   		tst.b	($FFFFFF8B).w
0001519A 6700 0000                  		beq.w	@cont    
0001519E 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000151A0                             
000151A0                            	@cont: 
000151A0 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000151A4 6700                       		beq.s    loc_12C58    ; if not, branch
000151A6 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000151AC 6700                       		beq.s    loc_12C58    ; if not, branch
000151AE 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000151B4 4238 F7CC                  		clr.b    (f_lockctrl).w
000151B8 4E75                       		rts
000151BA                            		
000151BA                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000151BA                            ; ---------------------------------------------------------------------------
000151BA                            ; Subroutine to    horizontally pan the camera view ahead of the player
000151BA                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000151BA                            ; ---------------------------------------------------------------------------
000151BA                            
000151BA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000151BA                            
000151BA                            
000151BA                            Sonic_PanCamera:
000151BA 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000151BE 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000151C2 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000151C4 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000151C6                            
000151C6                                @abs_inertia:
000151C6                            
000151C6                            ; These lines were intended to prevent the Camera from panning while
000151C6                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000151C6                            ; However, given that no such object exists in Sonic 1, I just went
000151C6                            ; ahead and commented these out.
000151C6                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000151C6                            ;        beq.s    @skip                    ; if not, branch
000151C6                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000151C6                            ;        bcs.s    @reset_pan                ; if so, branch
000151C6                            
000151C6                            ; These lines aren't part of the original routine; I added them myself.
000151C6                            ; If you've ported the Spin Dash, uncomment the following lines of code
000151C6                            ; to allow the camera to pan ahead while charging the Spin Dash:
000151C6 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000151CA 6700                               beq.s    @skip                    ; if not, branch
000151CC 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000151D2 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000151D4 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000151D6                            
000151D6                                @skip:
000151D6 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000151DA 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000151DC 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000151E0 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000151E2                            
000151E2                                @pan_right:
000151E2 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000151E4 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000151E8 6500                               bcs.s    @update_pan                ; if not, branch
000151EA 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000151EE 6000                               bra.s    @update_pan                ; branch
000151F0                            ; ---------------------------------------------------------------------------
000151F0                            
000151F0                                @pan_left:
000151F0 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000151F2 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000151F6 6400                               bcc.s    @update_pan                ; if not, branch
000151F8 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000151FC 6000                               bra.s    @update_pan                ; branch
000151FE                            ; ---------------------------------------------------------------------------
000151FE                            
000151FE                                @reset_pan:
000151FE 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015202 6700                               beq.s    @update_pan                ; if so, branch
00015204 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015206                                 
00015206                                @reset_right:
00015206 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015208 6000                               bra.s    @update_pan                ; branch
0001520A                            ; ---------------------------------------------------------------------------
0001520A                            
0001520A                                @reset_left:
0001520A 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001520C                            
0001520C                                @update_pan:
0001520C 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015210 4E75                               rts                                ; return
00015212                                 
00015212                            ; End of function Sonic_PanCamera
00015212                            
00015212                            
00015212                            ; ===========================================================================
00015212                            
00015212                            loc_12C58:
00015212 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015216 6600                       		bne.s	loc_12C64	; if yes, branch
00015218 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001521E                            
0001521E                            loc_12C64:
0001521E 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015224 6600                       		bne.s	loc_12C7E	; if yes, branch
00015226 7000                       		moveq	#0,d0
00015228 1028 0022                  		move.b	obStatus(a0),d0
0001522C 0240 0006                  		andi.w	#6,d0
00015230 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015234 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015238                            
00015238                            loc_12C7E:
00015238 6100                       		bsr.s	Sonic_Display
0001523A 6100 0000                  		bsr.w	Sonic_RecordPosition
0001523E 6100 0000                  		bsr.w	Sonic_Water
00015242 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015248 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001524E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015252 6700                       		beq.s	loc_12CA6
00015254 4A28 001C                  		tst.b	obAnim(a0)
00015258 6600                       		bne.s	loc_12CA6
0001525A 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015260                            
00015260                            loc_12CA6:
00015260 6100 0000                  		bsr.w	Sonic_Animate
00015264 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015268 6B00                       		bmi.s	loc_12CB6
0001526A 4EB9 0000 0000             		jsr	(ReactToItem).l
00015270                            
00015270                            loc_12CB6:
00015270 6100 0000                  		bsr.w	Sonic_Loops
00015274 6100 0000                  		bsr.w	Sonic_LoadGfx
00015278 4E75                       		rts	
0001527A                            ; ===========================================================================
0001527A 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
0001527C 0000                       		dc.w Sonic_MdJump-Sonic_Modes
0001527E 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015280 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015282                            ; ---------------------------------------------------------------------------
00015282                            ; Music	to play	after invincibility wears off
00015282                            ; ---------------------------------------------------------------------------
00015282                            MusicList2:
00015282 00                         		dc.b bgm_GHZ
00015283 00                         		dc.b bgm_LZ
00015284 00                         		dc.b bgm_MZ
00015285 00                         		dc.b bgm_SLZ
00015286 00                         		dc.b bgm_SYZ
00015287 00                         		dc.b bgm_SBZ
00015288                            		; The ending doesn't get an entry
00015288                            		even
00015288                            
00015288                            		include	"_incObj\Sonic Display.asm"
00015288                            ; ---------------------------------------------------------------------------
00015288                            ; Subroutine to display Sonic and set music
00015288                            ; ---------------------------------------------------------------------------
00015288                            
00015288                            Sonic_Display:
00015288 3028 0030                  		move.w    flashtime(a0),d0
0001528C 6700                       		beq.s    @showAfterImage
0001528E 5368 0030                  		subq.w    #1,flashtime(a0)
00015292 E648                               	lsr.w    #3,d0
00015294 6400                               	bcc.s    @chkinvincible
00015296                            
00015296                            	@showAfterImage:
00015296 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
0001529A 4A40                       		tst.w    d0                    ; is inertia greater than 0?
0001529C 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
0001529E 4440                       		neg        d0                    ; if not, negate it
000152A0                            
000152A0                            	@AfterImage_Start:        
000152A0 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000152A4 6700                       		beq.s	@display	; if not, don't show the After Image
000152A6                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000152A6                            		;blt.s    @display	; if not, don't show the After Image
000152A6                            	
000152A6                            	@AfterImage_Start2:    
000152A6 6100 A944                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000152AA 6600                               	bne.s    @display    ; if not have, don't load the After Image
000152AC 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000152B0 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000152B6 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000152BC 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000152C2                            
000152C2                                	@display:
000152C2 4EB9 0000 F760                     	jsr    (DisplaySprite).l
000152C8                            
000152C8                            	@chkinvincible:
000152C8 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000152CC 6700                       		beq.s	@chkshoes	; if not, branch
000152CE 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000152D2 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000152D4 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000152D8 6600                       		bne.s	@chkshoes
000152DA 4A38 F7AA                  		tst.b	(f_lockscreen).w
000152DE 6600                       		bne.s	@removeinvincible
000152E0 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000152E6 6500                       		bcs.s	@removeinvincible
000152E8 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000152EC 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
000152F2                            
000152F2                            	@removeinvincible:
000152F2 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000152F8                            
000152F8                            	@chkshoes:
000152F8 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000152FC 6700                       		beq.s	@exit		; if not, branch
000152FE 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015302 6700                       		beq.s	@exit
00015304 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015308 6600                       		bne.s	@exit
0001530A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015310 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015316 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001531C 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015322 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015326 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
0001532C                            		
0001532C                            	@exit:
0001532C 4E75                       		rts	
0001532C 4E75                       		rts	
0001532E                            		include	"_incObj\Sonic RecordPosition.asm"
0001532E                            ; ---------------------------------------------------------------------------
0001532E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001532E                            ; ---------------------------------------------------------------------------
0001532E                            
0001532E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532E                            
0001532E                            
0001532E                            Sonic_RecordPosition:
0001532E 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015332 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015336 43F1 0000                  		lea	(a1,d0.w),a1
0001533A 32E8 0008                  		move.w	obX(a0),(a1)+
0001533E 32E8 000C                  		move.w	obY(a0),(a1)+
00015342 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015346 4E75                       		rts	
00015348                            ; End of function Sonic_RecordPosition
00015348                            ; End of function Sonic_RecordPosition
00015348                            		include	"_incObj\Sonic Water.asm"
00015348                            ; ---------------------------------------------------------------------------
00015348                            ; Subroutine for Sonic when he's underwater
00015348                            ; ---------------------------------------------------------------------------
00015348                            
00015348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015348                            
00015348                            
00015348                            Sonic_Water:
00015348 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
0001534E 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015350 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015356 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015358                            
00015358                            	Sonic_Water_Exit:
00015358 4E75                       		rts	
0001535A                            ; ===========================================================================
0001535A                            
0001535A                            	Sonic_Water_LZ:
0001535A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001535E B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015362 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015366 6000 0000                  		bra	WaterStatus
0001536A                            	WaterTagforMZ:
0001536A 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015370 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015374 303C 000F                  		move.w #$F,d0             ;TIS Length ($F = full line)
00015378 43F8 34A0                  		lea    (Pal_LZSonWatr2),a1  ;Palette location
0001537C 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015380 4EB8 24A0                  		jsr	Palload_Loop
00015384                            	WaterStatus:
00015384 08E8 0006 0022             		bset	#6,obStatus(a0)
0001538A 6600 FFCC                  		bne.w	Sonic_Water_Exit
0001538E 6100 0000                  		bsr.w	ResumeMusic
00015392 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015398                            
00015398 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
0001539E 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000153A4 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000153AA 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000153B0 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000153B6 E0E8 0010                  		asr	obVelX(a0)
000153BA E0E8 0012                  		asr	obVelY(a0)
000153BE E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000153C2 6700 FF94                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000153C6                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000153C6 11FC 0008 D300             		move.b	#id_Splash,(v_objspace+$300).w ; load splash object
000153D6 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000153DC 6600 0000                  		bne.w	@return
000153E0                            		
000153E0                            		
000153E0                            	@return:
000153E0 4E75                       		rts
000153E2                            ; ===========================================================================
000153E2                            
000153E2                            Abovewater:
000153E2 303C 000F                  		move.w	#$F,d0             ;TIS Length ($F = full line)
000153E6 43F8 2B20                  		lea    (Pal_Sonic),a1  ;Palette location
000153EA 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000153EE 4EB8 24A0                  		jsr	Palload_Loop
000153F2                            
000153F2 08A8 0006 0022             		bclr	#6,obStatus(a0)
000153F8 6700 FF5E                  		beq.w	Sonic_Water_Exit
000153FC 6100 0000                  		bsr.w	ResumeMusic
00015400 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015406                            
00015406 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001540C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015412 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015418 E1E8 0012                  		asl	obVelY(a0)
0001541C 6700 FF3A                  		beq.w	Sonic_Water_Exit
00015420 11FC 0008 D300             		move.b	#id_Splash,(v_objspace+$300).w ; load splash object
00015426 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001542C 6E00                       		bgt.s	@belowmaxspeed
0001542E 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015434                            
00015434                            	@belowmaxspeed:
0001543E                            ; End of function Sonic_Water
0001543E                            ; End of function Sonic_Water
0001543E                            		include "_incObj\03 Hangable Sprite.asm"
0001543E                            ; ===========================================================================
0001543E                            ; ----------------------------------------------------------------------------
0001543E                            ; Object 03 - Invisible sprite that you can hang on to
0001543E                            ; ----------------------------------------------------------------------------
0001543E                            ; Sprite_2C92C:
0001543E                            Obj03:
0001543E 7000                       	moveq    #0,d0
00015440 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015444 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015448 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001544C                            ; ===========================================================================
0001544C                            ; off_2C93A:
0001544C                            Obj03_Index:
0001544C 0000                           dc.w Obj03_Main-Obj03_Index
0001544E 0000                               dc.w Obj03_Init-Obj03_Index
00015450                            ; ===========================================================================
00015450                            ; loc_2C93E:
00015450                            Obj03_Init:
00015450 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015454 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001545A 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015460 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015466                            ; loc_2C954:
00015466                            Obj03_Main:
00015466 45E8 0030                      lea    $30(a0),a2
0001546A 43F8 D000                      lea    (v_player).w,a1 ; a1=character
0001546E 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015472 6100                           bsr.s    Obj03_Check
00015474                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015474                            ;    addq.w    #1,a2                          ;disabled
00015474                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015474                            ;    bsr.s    Obj03_Check         	;disabled
00015474 4EF9 0000 0000             	jmp		bonu_chkdel
0001547A                            ; ===========================================================================
0001547A                            ; loc_2C972:
0001547A                            Obj03_Check:
0001547A 4A12                       		tst.b	(a2)
0001547C 6700                       		beq.s	loc_2C9A0
0001547E 0200 0070                  		andi.b	#btnABC,d0
00015482 6700 0000                  		beq.w	Obj03_Check_End
00015486 4238 F7C8                  		clr.b	f_lockmulti.w
0001548A 4212                       		clr.b	(a2)
0001548C 157C 0012 0002             		move.b	#$12,2(a2)
00015492 0240 0F00                  		andi.w	#$F00,d0
00015496 6700                       		beq.s	loc_2C954
00015498 157C 003C 0002             		move.b	#$3C,2(a2)
0001549E                            	
0001549E                            loc_2C954:
0001549E 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000154A4 6000 0000                  		bra.w	Obj03_Check_End
000154A8                            ; ===========================================================================
000154A8                            
000154A8                            loc_2C9A0:
000154A8 4A2A 0002                  		tst.b	2(a2)
000154AC 6700                       		beq.s	loc_2C972
000154AE 532A 0002                  		subq.b	#1,2(a2)
000154B2 6600 0000                  		bne.w	Obj03_Check_End
000154B6                            
000154B6                            loc_2C972:
000154B6 3029 0008                  		move.w	obX(a1),d0
000154BA 9068 0008                  		sub.w	obX(a0),d0
000154BE 0640 0018                  		addi.w	#$18,d0
000154C2 0C40 0030                  		cmpi.w	#$30,d0
000154C6 6400 0000                  		bhs.w	Obj03_Check_End
000154CA 3229 000C                  		move.w	obY(a1),d1
000154CE 9268 000C                  		sub.w	obY(a0),d1
000154D2 0C41 0010                  		cmpi.w	#$10,d1
000154D6 6400 0000                  		bhs.w	Obj03_Check_End
000154DA 4A38 F7C8                  		tst.b	f_lockmulti.w
000154DE 6B00                       		bmi.s	Obj03_Check_End
000154E0 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000154E6 6400                       		bhs.s	Obj03_Check_End
000154E8 4A78 FFFA                  		tst.w	(f_debugmode).w
000154EC 6600                       		bne.s	Obj03_Check_End
000154EE 4269 0010                  		clr.w	x_vel(a1)
000154F2 4269 0012                  		clr.w	y_vel(a1)
000154F6 4269 0020                  		clr.w	obInertia(a1)
000154FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015500 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015506 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001550C 14BC 0001                  		move.b	#1,(a2)
00015510                            
00015510                            ; return_2CA08:
00015510                            Obj03_Check_End:
00015510 4E75                       		rts
00015510 4E75                       		rts
00015512                            
00015512                            ; ===========================================================================
00015512                            ; ---------------------------------------------------------------------------
00015512                            ; Modes	for controlling	Sonic
00015512                            ; ---------------------------------------------------------------------------
00015512                            
00015512                            Sonic_MdNormal:
00015512 6100 0000                  		bsr.w	Sonic_Peelout
00015516 6100 0000                  		bsr.w	Sonic_SpinDash
0001551A 6100 0000                  		bsr.w	Sonic_Jump
0001551E 6100 0000                  		bsr.w	Sonic_SlopeResist
00015522 6100 0000                  		bsr.w	Sonic_Move
00015526 6100 0000                  		bsr.w	Sonic_Roll
0001552A 6100 0000                  		bsr.w	Sonic_LevelBound
0001552E 4EB9 0000 F74C             		jsr	(SpeedToPos).l
00015534 6100 0000                  		bsr.w	Sonic_AnglePos
00015538 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001553C 4E75                       		rts	
0001553E                            
0001553E                            ; ===========================================================================
0001553E                            
0001553E                            Sonic_MdJump:
0001553E 6100 0000                  		bsr.w   Sonic_AirRoll
00015542 6100 0000                  		bsr.w	Sonic_JumpHeight
00015546 6100 0000                  		bsr.w	Sonic_JumpDirection
0001554A 6100 0000                  		bsr.w	Sonic_LevelBound
0001554E 4EB9 0000 F714             		jsr	(ObjectFall).l
00015554 0828 0006 0022             		btst	#6,obStatus(a0)
0001555A 6700                       		beq.s	loc_12E5C
0001555C 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015562                            
00015562                            loc_12E5C:
00015562 6100 0000                  		bsr.w	Sonic_JumpAngle
00015566 6100 0000                  		bsr.w	Sonic_Floor
0001556A 4E75                       		rts	
0001556C                            ; ===========================================================================
0001556C                            
0001556C                            Sonic_MdRoll:
0001556C 6100 0000                  		bsr.w	Sonic_Jump
00015570 6100 0000                  		bsr.w	Sonic_RollRepel
00015574 6100 0000                  		bsr.w	Sonic_RollSpeed
00015578 6100 0000                  		bsr.w	Sonic_LevelBound
0001557C 4EB9 0000 F74C             		jsr	(SpeedToPos).l
00015582 6100 0000                  		bsr.w	Sonic_AnglePos
00015586 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001558A 4E75                       		rts	
0001558C                            ; ===========================================================================
0001558C                            
0001558C                            Sonic_MdJump2:
0001558C 6100 0000                  		bsr.w	Sonic_JumpHeight
00015590 6100 0000                  		bsr.w	Sonic_JumpDirection
00015594 6100 0000                  		bsr.w	Sonic_LevelBound
00015598 4EB9 0000 F714             		jsr	(ObjectFall).l
0001559E 0828 0006 0022             		btst	#6,obStatus(a0)
000155A4 6700                       		beq.s	loc_12EA6
000155A6 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000155AC                            
000155AC                            loc_12EA6:
000155AC 6100 0000                  		bsr.w	Sonic_JumpAngle
000155B0 6100 0000                  		bsr.w	Sonic_Floor
000155B4 4E75                       		rts	
000155B6                            
000155B6                            		include	"_incObj\Sonic Move.asm"
000155B6                            ; ---------------------------------------------------------------------------
000155B6                            ; Subroutine to	make Sonic walk/run
000155B6                            ; ---------------------------------------------------------------------------
000155B6                            
000155B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B6                            
000155B6                            
000155B6                            Sonic_Move:
000155B6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000155BA 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000155BE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000155C2 4A38 F7CA                  		tst.b	(f_jumponly).w
000155C6 6600 0000                  		bne.w	loc_12FEE
000155CA 4A68 003E                  		tst.w	$3E(a0)
000155CE 6600 0000                  		bne.w	Sonic_ResetScr
000155D2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000155D8 6700                       		beq.s	@notleft	; if not, branch
000155DA 6100 0000                  		bsr.w	Sonic_MoveLeft
000155DE                            
000155DE                            	@notleft:
000155DE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000155E4 6700                       		beq.s	@notright	; if not, branch
000155E6 6100 0000                  		bsr.w	Sonic_MoveRight
000155EA                            
000155EA                            	@notright:
000155EA 1028 0026                  		move.b	obAngle(a0),d0
000155EE 0600 0020                  		addi.b	#$20,d0
000155F2 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000155F6 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000155FA 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000155FE 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015602 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015608 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001560E 0828 0003 0022             		btst	#3,obStatus(a0)
00015614 6700                       		beq.s	Sonic_Balance
00015616 7000                       		moveq	#0,d0
00015618 1028 003D                  		move.b	$3D(a0),d0
0001561C ED48                       		lsl.w	#6,d0
0001561E 43F8 D000                  		lea	(v_objspace).w,a1
00015622 43F1 0000                  		lea	(a1,d0.w),a1
00015626 4A29 0022                  		tst.b	obStatus(a1)
0001562A 6B00                       		bmi.s	Sonic_LookUp
0001562C 7200                       		moveq	#0,d1
0001562E 1229 0014                  		move.b	obActWid(a1),d1
00015632 3401                       		move.w	d1,d2
00015634 D442                       		add.w	d2,d2
00015636 5942                       		subq.w	#4,d2
00015638 D268 0008                  		add.w	obX(a0),d1
0001563C 9269 0008                  		sub.w	obX(a1),d1
00015640 0C41 0004                  		cmpi.w	#4,d1
00015644 6D00                       		blt.s	loc_12F6A
00015646 B242                       		cmp.w	d2,d1
00015648 6C00                       		bge.s	loc_12F5A
0001564A 6000                       		bra.s	Sonic_LookUp
0001564C                            ; ===========================================================================
0001564C                            
0001564C                            Sonic_Balance:
0001564C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015652 0C41 000C                  		cmpi.w	#$C,d1
00015656 6D00                       		blt.s	Sonic_LookUp
00015658 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001565E 6600                       		bne.s	loc_12F62
00015660                            
00015660                            loc_12F5A:
00015660 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015666 6000                       		bra.s	loc_12F70
00015668                            ; ===========================================================================
00015668                            
00015668                            loc_12F62:
00015668 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001566E 6600                       		bne.s	Sonic_LookUp
00015670                            
00015670                            loc_12F6A:
00015670 08E8 0000 0022             		bset	#0,obStatus(a0)
00015676                            
00015676                            loc_12F70:
00015676 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001567C 6000                       		bra.s	Sonic_ResetScr
0001567E                            ; ===========================================================================
0001567E                            
0001567E                            Sonic_LookUp:
0001567E 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00015684 6700                       		beq.s	Sonic_Duck	; if not, branch
00015686 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
0001568C 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
00015692 6700                       		beq.s	loc_12FC2
00015694 5478 F73E                  		addq.w	#2,(v_lookshift).w
00015698 6000                       		bra.s	loc_12FC2
0001569A                            ; ===========================================================================
0001569A                            
0001569A                            Sonic_Duck:
0001569A 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000156A0 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000156A2 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
000156A8 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
000156AE 6700                       		beq.s	loc_12FC2
000156B0 5578 F73E                  		subq.w	#2,(v_lookshift).w
000156B4 6000                       		bra.s	loc_12FC2
000156B6                            ; ===========================================================================
000156B6                            
000156B6                            Sonic_ResetScr:
000156B6 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is screen in its default position?
000156BC 6700                       		beq.s	loc_12FC2	; if yes, branch
000156BE 6400                       		bcc.s	loc_12FBE
000156C0 5878 F73E                  		addq.w	#4,(v_lookshift).w ; move screen back to default
000156C4                            
000156C4                            loc_12FBE:
000156C4 5578 F73E                  		subq.w	#2,(v_lookshift).w ; move screen back to default
000156C8                            
000156C8                            loc_12FC2:
000156C8 1038 F602                  		move.b	(v_jpadhold2).w,d0
000156CC 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000156D0 6600                       		bne.s	loc_12FEE	; if yes, branch
000156D2 3028 0020                  		move.w	obInertia(a0),d0
000156D6 6700                       		beq.s	loc_12FEE
000156D8 6B00                       		bmi.s	loc_12FE2
000156DA 9045                       		sub.w	d5,d0
000156DC 6400                       		bcc.s	loc_12FDC
000156DE 303C 0000                  		move.w	#0,d0
000156E2                            
000156E2                            loc_12FDC:
000156E2 3140 0020                  		move.w	d0,obInertia(a0)
000156E6 6000                       		bra.s	loc_12FEE
000156E8                            ; ===========================================================================
000156E8                            
000156E8                            loc_12FE2:
000156E8 D045                       		add.w	d5,d0
000156EA 6400                       		bcc.s	loc_12FEA
000156EC 303C 0000                  		move.w	#0,d0
000156F0                            
000156F0                            loc_12FEA:
000156F0 3140 0020                  		move.w	d0,obInertia(a0)
000156F4                            
000156F4                            loc_12FEE:
000156F4 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000156F8 6600                       		bne.s	loc_1300C 	;Peelout
000156FA 1028 0026                  		move.b	obAngle(a0),d0
000156FE 4EB9 0000 3A32             		jsr	(CalcSine).l
00015704 C3E8 0020                  		muls.w	obInertia(a0),d1
00015708 E081                       		asr.l	#8,d1
0001570A 3141 0010                  		move.w	d1,obVelX(a0)
0001570E C1E8 0020                  		muls.w	obInertia(a0),d0
00015712 E080                       		asr.l	#8,d0
00015714 3140 0012                  		move.w	d0,obVelY(a0)
00015718                            
00015718                            loc_1300C:
00015718 1028 0026                  		move.b	obAngle(a0),d0
0001571C 0600 0040                  		addi.b	#$40,d0
00015720 6B00                       		bmi.s	locret_1307C
00015722 123C 0040                  		move.b	#$40,d1
00015726 4A68 0020                  		tst.w	obInertia(a0)
0001572A 6700                       		beq.s	locret_1307C
0001572C 6B00                       		bmi.s	loc_13024
0001572E 4441                       		neg.w	d1
00015730                            
00015730                            loc_13024:
00015730 1028 0026                  		move.b	obAngle(a0),d0
00015734 D001                       		add.b	d1,d0
00015736 3F00                       		move.w	d0,-(sp)
00015738 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001573C 301F                       		move.w	(sp)+,d0
0001573E 4A41                       		tst.w	d1
00015740 6A00                       		bpl.s	locret_1307C
00015742 E141                       		asl.w	#8,d1
00015744 0600 0020                  		addi.b	#$20,d0
00015748 0200 00C0                  		andi.b	#$C0,d0
0001574C 6700                       		beq.s	loc_13078
0001574E 0C00 0040                  		cmpi.b	#$40,d0
00015752 6700                       		beq.s	loc_13066
00015754 0C00 0080                  		cmpi.b	#$80,d0
00015758 6700                       		beq.s	loc_13060
0001575A D368 0010                  		add.w	d1,obVelX(a0)
0001575E 08E8 0005 0022             		bset	#5,obStatus(a0)
00015764 317C 0000 0020             		move.w	#0,obInertia(a0)
0001576A 4E75                       		rts	
0001576C                            ; ===========================================================================
0001576C                            
0001576C                            loc_13060:
0001576C 9368 0012                  		sub.w	d1,obVelY(a0)
00015770 4E75                       		rts	
00015772                            ; ===========================================================================
00015772                            
00015772                            loc_13066:
00015772 9368 0010                  		sub.w	d1,obVelX(a0)
00015776 08E8 0005 0022             		bset	#5,obStatus(a0)
0001577C 317C 0000 0020             		move.w	#0,obInertia(a0)
00015782 4E75                       		rts	
00015784                            ; ===========================================================================
00015784                            
00015784                            loc_13078:
00015784 D368 0012                  		add.w	d1,obVelY(a0)
00015788                            
00015788                            locret_1307C:
00015788 4E75                       		rts	
0001578A                            ; End of function Sonic_Move
0001578A                            
0001578A                            
0001578A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001578A                            
0001578A                            
0001578A                            Sonic_MoveLeft:
0001578A 3028 0020                  		move.w	obInertia(a0),d0
0001578E 6700                       		beq.s	loc_13086
00015790 6A00                       		bpl.s	loc_130B2
00015792                            
00015792                            loc_13086:
00015792 08E8 0000 0022             		bset	#0,$22(a0)
00015798 6600                       		bne.s	loc_1309A
0001579A 08A8 0005 0022             		bclr	#5,$22(a0)
000157A0 117C 0001 001D             		move.b	#1,$1D(a0)
000157A6                            
000157A6                            loc_1309A:
000157A6 9045                       		sub.w	d5,d0
000157A8 3206                       		move.w	d6,d1
000157AA 4441                       		neg.w	d1
000157AC B041                       		cmp.w	d1,d0
000157AE 6E00                       		bgt.s	loc_130A6
000157B0 D045                       		add.w	d5,d0
000157B2 B041                       		cmp.w	d1,d0
000157B4 6F00                       		ble.s	loc_130A6
000157B6 3001                       		move.w	d1,d0
000157B8                            
000157B8                            loc_130A6:
000157B8 3140 0020                  		move.w	d0,obInertia(a0)
000157BC 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000157C2 4E75                       		rts
000157C4                            ; ===========================================================================
000157C4                            
000157C4                            loc_130B2:
000157C4 9044                       		sub.w	d4,d0
000157C6 6400                       		bcc.s	loc_130BA
000157C8 303C FF80                  		move.w	#-$80,d0
000157CC                            
000157CC                            loc_130BA:
000157CC 3140 0020                  		move.w	d0,obInertia(a0)
000157D0 1228 0026                  		move.b	obAngle(a0),d1
000157D4 0601 0020                  		addi.b	#$20,d1
000157D8 0201 00C0                  		andi.b	#$C0,d1
000157DC 6600                       		bne.s	locret_130E8
000157DE 0C40 0400                  		cmpi.w	#$400,d0
000157E2 6D00                       		blt.s	locret_130E8
000157E4 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000157EA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000157FA                            		
000157FA                            locret_130E8:
000157FA 4E75                       		rts	
000157FC                            ; End of function Sonic_MoveLeft
000157FC                            
000157FC                            
000157FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157FC                            
000157FC                            
000157FC                            Sonic_MoveRight:
000157FC 3028 0020                  		move.w	obInertia(a0),d0
00015800 6B00                       		bmi.s	loc_13118
00015802 08A8 0000 0022             		bclr	#0,$22(a0)
00015808 6700                       		beq.s	loc_13104
0001580A 08A8 0005 0022             		bclr	#5,$22(a0)
00015810 117C 0001 001D             		move.b	#1,$1D(a0)
00015816                            
00015816                            loc_13104:
00015816 D045                       		add.w	d5,d0
00015818 B046                       		cmp.w	d6,d0
0001581A 6D00                       		blt.s	loc_1310C
0001581C 9045                       		sub.w	d5,d0
0001581E B046                       		cmp.w	d6,d0
00015820 6C00                       		bge.s	loc_1310C
00015822 3006                       		move.w	d6,d0
00015824                            
00015824                            loc_1310C:
00015824 3140 0020                  		move.w	d0,obInertia(a0)
00015828 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001582E 4E75                       		rts
00015830                            ; ===========================================================================
00015830                            
00015830                            loc_13118:
00015830 D044                       		add.w	d4,d0
00015832 6400                       		bcc.s	loc_13120
00015834 303C 0080                  		move.w	#$80,d0
00015838                            
00015838                            loc_13120:
00015838 3140 0020                  		move.w	d0,obInertia(a0)
0001583C 1228 0026                  		move.b	obAngle(a0),d1
00015840 0601 0020                  		addi.b	#$20,d1
00015844 0201 00C0                  		andi.b	#$C0,d1
00015848 6600                       		bne.s	locret_1314E
0001584A 0C40 FC00                  		cmpi.w	#-$400,d0
0001584E 6E00                       		bgt.s	locret_1314E
00015850 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015856 08E8 0000 0022             		bset	#0,obStatus(a0)
00015866                            		
00015866                            locret_1314E:
00015866 4E75                       		rts	
00015868                            ; End of function Sonic_MoveRight
00015868                            ; End of function Sonic_MoveRight
00015868                            		include	"_incObj\Sonic RollSpeed.asm"
00015868                            ; ---------------------------------------------------------------------------
00015868                            ; Subroutine to	change Sonic's speed as he rolls
00015868                            ; ---------------------------------------------------------------------------
00015868                            
00015868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015868                            
00015868                            
00015868                            Sonic_RollSpeed:
00015868 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001586C E346                       		asl.w	#1,d6
0001586E 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015872 E245                       		asr.w	#1,d5
00015874 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015878 E444                       		asr.w	#2,d4
0001587A 4A38 F7CA                  		tst.b	(f_jumponly).w
0001587E 6600 0000                  		bne.w	loc_131CC
00015882 4A68 003E                  		tst.w	$3E(a0)
00015886 6600                       		bne.s	@notright
00015888 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001588E 6700                       		beq.s	@notleft	; if not, branch
00015890 6100 0000                  		bsr.w	Sonic_RollLeft
00015894                            
00015894                            	@notleft:
00015894 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001589A 6700                       		beq.s	@notright	; if not, branch
0001589C 6100 0000                  		bsr.w	Sonic_RollRight
000158A0                            
000158A0                            	@notright:
000158A0 3028 0020                  		move.w	obInertia(a0),d0
000158A4 6700                       		beq.s	loc_131AA
000158A6 6B00                       		bmi.s	loc_1319E
000158A8 9045                       		sub.w	d5,d0
000158AA 6400                       		bcc.s	loc_13198
000158AC 303C 0000                  		move.w	#0,d0
000158B0                            
000158B0                            loc_13198:
000158B0 3140 0020                  		move.w	d0,obInertia(a0)
000158B4 6000                       		bra.s	loc_131AA
000158B6                            ; ===========================================================================
000158B6                            
000158B6                            loc_1319E:
000158B6 D045                       		add.w	d5,d0
000158B8 6400                       		bcc.s	loc_131A6
000158BA 303C 0000                  		move.w	#0,d0
000158BE                            
000158BE                            loc_131A6:
000158BE 3140 0020                  		move.w	d0,obInertia(a0)
000158C2                            
000158C2                            loc_131AA:
000158C2 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000158C6 6600                       		bne.s	loc_131CC	; if yes, branch
000158C8 08A8 0002 0022             		bclr	#2,obStatus(a0)
000158CE 117C 0013 0016             		move.b	#$13,obHeight(a0)
000158D4 117C 0009 0017             		move.b	#9,obWidth(a0)
000158DA 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000158E0 5B68 000C                  		subq.w	#5,obY(a0)
000158E4                            
000158E4                            loc_131CC:
000158E4 1028 0026                  		move.b	obAngle(a0),d0
000158E8 4EB9 0000 3A32             		jsr	(CalcSine).l
000158EE C1E8 0020                  		muls.w	obInertia(a0),d0
000158F2 E080                       		asr.l	#8,d0
000158F4 3140 0012                  		move.w	d0,obVelY(a0)
000158F8 C3E8 0020                  		muls.w	obInertia(a0),d1
000158FC E081                       		asr.l	#8,d1
000158FE 0C41 1000                  		cmpi.w	#$1000,d1
00015902 6F00                       		ble.s	loc_131F0
00015904 323C 1000                  		move.w	#$1000,d1
00015908                            
00015908                            loc_131F0:
00015908 0C41 F000                  		cmpi.w	#-$1000,d1
0001590C 6C00                       		bge.s	loc_131FA
0001590E 323C F000                  		move.w	#-$1000,d1
00015912                            
00015912                            loc_131FA:
00015912 3141 0010                  		move.w	d1,obVelX(a0)
00015916 6000 FE00                  		bra.w	loc_1300C
0001591A                            ; End of function Sonic_RollSpeed
0001591A                            
0001591A                            
0001591A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001591A                            
0001591A                            
0001591A                            Sonic_RollLeft:
0001591A 3028 0020                  		move.w	obInertia(a0),d0
0001591E 6700                       		beq.s	loc_1320A
00015920 6A00                       		bpl.s	loc_13218
00015922                            
00015922                            loc_1320A:
00015922 08E8 0000 0022             		bset	#0,obStatus(a0)
00015928 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001592E 4E75                       		rts	
00015930                            ; ===========================================================================
00015930                            
00015930                            loc_13218:
00015930 9044                       		sub.w	d4,d0
00015932 6400                       		bcc.s	loc_13220
00015934 303C FF80                  		move.w	#-$80,d0
00015938                            
00015938                            loc_13220:
00015938 3140 0020                  		move.w	d0,obInertia(a0)
0001593C 4E75                       		rts	
0001593E                            ; End of function Sonic_RollLeft
0001593E                            
0001593E                            
0001593E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001593E                            
0001593E                            
0001593E                            Sonic_RollRight:
0001593E 3028 0020                  		move.w	obInertia(a0),d0
00015942 6B00                       		bmi.s	loc_1323A
00015944 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001594A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015950 4E75                       		rts	
00015952                            ; ===========================================================================
00015952                            
00015952                            loc_1323A:
00015952 D044                       		add.w	d4,d0
00015954 6400                       		bcc.s	loc_13242
00015956 303C 0080                  		move.w	#$80,d0
0001595A                            
0001595A                            loc_13242:
0001595A 3140 0020                  		move.w	d0,obInertia(a0)
0001595E 4E75                       		rts	
00015960                            ; End of function Sonic_RollRight
00015960                            ; End of function Sonic_RollRight
00015960                            		include	"_incObj\Sonic JumpDirection.asm"
00015960                            ; ---------------------------------------------------------------------------
00015960                            ; Subroutine to	change Sonic's direction while jumping
00015960                            ; ---------------------------------------------------------------------------
00015960                            
00015960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015960                            
00015960                            
00015960                            Sonic_JumpDirection:
00015960 3C38 F760                  		move.w	($FFFFF760).w,d6
00015964 3A38 F762                  		move.w	($FFFFF762).w,d5
00015968 E345                       		asl.w	#1,d5
0001596A 3028 0010                  		move.w	$10(a0),d0	
0001596E 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015974 6700                       		beq.s	loc_13278; if not, branch	
00015976 08E8 0000 0022             		bset	#0,$22(a0)	
0001597C 9045                       		sub.w	d5,d0	
0001597E 3206                       		move.w	d6,d1	
00015980 4441                       		neg.w	d1	
00015982 B041                       		cmp.w	d1,d0	
00015984 6E00                       		bgt.s	loc_13278	
00015986 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015988 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001598A 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001598C 3001                       		move.w	d1,d0
0001598E                            
0001598E                            loc_13278:
0001598E 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015994 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015996 08A8 0000 0022             		bclr	#0,$22(a0)	
0001599C D045                       		add.w	d5,d0	
0001599E B046                       		cmp.w	d6,d0	
000159A0 6D00                       		blt.s	Obj01_JumpMove
000159A2 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000159A4 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000159A6 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000159A8 3006                       		move.w	d6,d0
000159AA                            
000159AA                            Obj01_JumpMove:
000159AA 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
000159AE                            
000159AE                            Obj01_ResetScr2:
000159AE 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
000159B4 6700                       		beq.s	loc_132A4	; if yes, branch
000159B6 6400                       		bcc.s	loc_132A0
000159B8 5878 F73E                  		addq.w	#4,(v_lookshift).w
000159BC                            
000159BC                            loc_132A0:
000159BC 5578 F73E                  		subq.w	#2,(v_lookshift).w
000159C0                            
000159C0                            loc_132A4:
000159C0 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
000159C6 6500                       		bcs.s	locret_132D2	; if yes, branch
000159C8 3028 0010                  		move.w	obVelX(a0),d0
000159CC 3200                       		move.w	d0,d1
000159CE EA41                       		asr.w	#5,d1
000159D0 6700                       		beq.s	locret_132D2
000159D2 6B00                       		bmi.s	loc_132C6
000159D4 9041                       		sub.w	d1,d0
000159D6 6400                       		bcc.s	loc_132C0
000159D8 303C 0000                  		move.w	#0,d0
000159DC                            
000159DC                            loc_132C0:
000159DC 3140 0010                  		move.w	d0,obVelX(a0)
000159E0 4E75                       		rts	
000159E2                            ; ===========================================================================
000159E2                            
000159E2                            loc_132C6:
000159E2 9041                       		sub.w	d1,d0
000159E4 6500                       		bcs.s	loc_132CE
000159E6 303C 0000                  		move.w	#0,d0
000159EA                            
000159EA                            loc_132CE:
000159EA 3140 0010                  		move.w	d0,obVelX(a0)
000159EE                            
000159EE                            locret_132D2:
000159EE 4E75                       		rts	
000159F0                            ; End of function Sonic_JumpDirection
000159F0                            ; End of function Sonic_JumpDirection
000159F0                            		include "_incObj\Sonic Peelout.asm"
000159F0                            ; ---------------------------------------------------------------------------
000159F0                            ; Subroutine to make Sonic perform a peelout
000159F0                            ; ---------------------------------------------------------------------------
000159F0                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
000159F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F0                            
000159F0                            Sonic_Peelout:
000159F0 0828 0001 0039             		btst	#1,$39(a0)
000159F6 6600                       		bne.s	SCDPeelout_Launch
000159F8 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
000159FE 6600                       		bne.s	@return
00015A00 1038 F603                  		move.b	($FFFFF603).w,d0
00015A04 0200 0070                  		andi.b	#%01110000,d0
00015A08 6700 0000                  		beq.w	@return
00015A0C 117C 0001 001C             		move.b	#1,$1C(a0)
00015A12 317C 0000 003A             		move.w	#0,$3A(a0)
00015A18 303C 00A2                  		move.w	#$A2,d0
00015A1C 4EB9 0000 1250             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015A22                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015A22 588F                       		addq.l	#4,sp
00015A24 08E8 0001 0039             		bset	#1,$39(a0)
00015A2A                            		
00015A2A 4268 0014                  		clr.w	$14(a0)
00015A2E                             
00015A2E 6100 0000                  		bsr.w	Sonic_LevelBound
00015A32 6100 0000                  		bsr.w	Sonic_AnglePos
00015A36                             
00015A36                            	@return:
00015A36 4E75                       		rts	
00015A38                            ; ---------------------------------------------------------------------------
00015A38                             
00015A38                            SCDPeelout_Launch:
00015A38 0828 0001 0039             		btst	#1,$39(a0)
00015A3E 1038 F602                  		move.b	($FFFFF602).w,d0
00015A42 0800 0000                  		btst	#0,d0
00015A46 6600 0000                  		bne.w	SCDPeelout_Charge
00015A4A 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015A50 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015A56 6600                       		bne.s	SCDPeelout_Stop_Sound
00015A58 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015A5E 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015A64 3028 0014                  		move.w	$14(a0),d0
00015A68 0440 0800                  		subi.w	#$800,d0
00015A6C D040                       		add.w	d0,d0
00015A6E 0240 1F00                  		andi.w	#$1F00,d0
00015A72 4440                       		neg.w	d0
00015A74 0640 2000                  		addi.w	#$2000,d0
00015A78                            		;move.w	d0,(v_cameralag).w
00015A78 0828 0000 0022             		btst	#0,$22(a0)
00015A7E 6700                       		beq.s	@dontflip
00015A80 4468 0014                  		neg.w	$14(a0)
00015A84                             
00015A84                            @dontflip:
00015A84 08A8 0007 0022             		bclr	#7,$22(a0)
00015A8A 303C 00AB                  		move.w	#$AB,d0
00015A8E 4EB9 0000 1250             		jsr	(PlaySound_Special).l
00015A94                            	;	sfx 	sfx_PeeloutRelease
00015A94 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015A98                            ; ---------------------------------------------------------------------------
00015A98                             
00015A98                            SCDPeelout_Charge:				; If still charging the dash...
00015A98 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015A9C 3401                       		move.w	d1,d2
00015A9E D241                       		add.w	d1,d1
00015AA0 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015AA4 6700                       		beq.s	@noshoes
00015AA6 E242                       		asr.w	#1,d2
00015AA8 9242                       		sub.w	d2,d1
00015AAA                            
00015AAA                            @noshoes:
00015AAA 0668 0064 0014             		addi.w	#$64,$14(a0)		; increment speed
00015AB0 B268 0014                  		cmp.w	$14(a0),d1
00015AB4 6E00                       		bgt.s	@inctimer
00015AB6 3141 0014                  		move.w	d1,$14(a0)
00015ABA                            
00015ABA                            @inctimer:
00015ABA 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015ABE 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015AC4 6500                       		bcs.s	SCDPeelout_ResetScr
00015AC6 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015ACC 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015AD2                            		
00015AD2                            SCDPeelout_Stop_Sound:
00015AD2 303C 00AB                  		move.w	#$AB,d0
00015AD6 4EB9 0000 1250             		jsr		(PlaySound_Special).l
00015ADC                            	;	sfx 	sfx_PeeloutStop
00015ADC 4268 0014                  		clr.w	$14(a0)
00015AE0                            
00015AE0                            SCDPeelout_ResetScr:
00015AE0 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015AE2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015AE8 6700                       		beq.s	@finish
00015AEA 6400                       		bcc.s	@skip
00015AEC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015AF0                             
00015AF0                            	@skip:
00015AF0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015AF4                             
00015AF4                            	@finish:
00015AF4 6100 0000                  		bsr.w	Sonic_LevelBound
00015AF8 6100 0000                  		bsr.w	Sonic_AnglePos
00015AFC 4E75                       		rts
00015AFE                            		
00015AFE                            		
00015AFE                            		include "_incObj\Sonic Spindash.asm"
00015AFE                            ; ---------------------------------------------------------------------------
00015AFE                            ; Subroutine to make Sonic perform a spindash
00015AFE                            ; ---------------------------------------------------------------------------
00015AFE                             
00015AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AFE                             
00015AFE                             
00015AFE                            Sonic_SpinDash:
00015AFE 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015B02 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015B04 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015B0A 6600                       		bne.s	locret2_1AC8C		; if not, return
00015B0C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015B10 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015B14 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015B18 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015B1E 303C 00A5                  		move.w	#$A5,d0			; spin sound ($E0 in s2)
00015B22 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play spin sound
00015B28 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015B2A 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015B30 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015B36                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015B36                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015B36 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015B3C                            						; the smoke/dust object
00015B3C                            loc2_1AC84:
00015B3C 6100 0000                  		bsr.w	Sonic_LevelBound
00015B40 6100 0000                  		bsr.w	Sonic_AnglePos
00015B44                            
00015B44                            locret2_1AC8C:
00015B44 4E75                       		rts	
00015B46                            ; ---------------------------------------------------------------------------
00015B46                            
00015B46                            loc2_1AC8E:	
00015B46 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015B4C 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015B50 0800 0001                  		btst	#1,d0			; check down button
00015B54 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015B58 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015B5E 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015B64 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015B6A 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015B6E 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015B74 7000                       		moveq	#0,d0
00015B76 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015B7A D040                       		add.w	d0,d0			; double it
00015B7C 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015B82 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015B86 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015B8A D040                       		add.w	d0,d0			; double it
00015B8C 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015B90 4440                       		neg.w	d0			; negate it
00015B92 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015B96 31C0 EED0                  		move.w	d0,($FFFFEED0).w	; move to $EED0
00015B9A 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015BA0 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015BA2 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015BA6                            
00015BA6                            loc2_1ACF4:
00015BA6 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015BAC 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015BB2 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015BB6 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play it!
00015BBC 6000                       		bra.s	loc2_1AD78
00015BBE                            ; ===========================================================================
00015BBE                            Dash_Speeds:
00015BBE 0600                       		dc.w  $600		; 0
00015BC0 0680                       		dc.w  $680		; 1
00015BC2 0700                       		dc.w  $700		; 2
00015BC4 0780                       		dc.w  $780		; 3
00015BC6 0800                       		dc.w  $800		; 4
00015BC8 0880                       		dc.w  $880		; 5
00015BCA 0900                       		dc.w  $900		; 6
00015BCC 0980                       		dc.w  $980		; 7
00015BCE 0A00                       		dc.w  $A00		; 8
00015BD0                            ; ===========================================================================
00015BD0                            
00015BD0                            loc2_1AD30:				; If still charging the dash...
00015BD0 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015BD4 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015BD6 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015BDA EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015BDC 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015BE0 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015BE2 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015BE8                            
00015BE8                            loc2_1AD48:
00015BE8 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015BEC 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015BF0 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015BF4 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015BFA 303C 00A5                  		move.w	#$A5,d0			; was $E0 in sonic 2
00015BFE 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015C04 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play charge sound
00015C0A 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015C10 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015C16 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015C18 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015C1E                            
00015C1E                            loc2_1AD78:
00015C1E 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015C20 0C78 0060 EED8             		cmpi.w	#$60,($FFFFEED8).w	; $EED8 only ever seems
00015C26 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015C28 6400                       		bcc.s	loc2_1AD88
00015C2A 5878 EED8                  		addq.w	#4,($FFFFEED8).w
00015C2E                            
00015C2E                            loc2_1AD88:
00015C2E 5578 EED8                  		subq.w	#2,($FFFFEED8).w
00015C32                            
00015C32                            loc2_1AD8C:
00015C32 6100 0000                  		bsr.w	Sonic_LevelBound
00015C36 6100 0000                  		bsr.w	Sonic_AnglePos
00015C3A 31FC 0060 F73E             		move.w	#$60,(v_lookshift).w	; reset looking up/down
00015C40 4E75                       		rts
00015C42                            ; End of subroutine Sonic_SpinDash
00015C42                            ; End of subroutine Sonic_SpinDash
00015C42                            
00015C42                            Sonic_AirRoll:
00015C42 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015C48 6600                               bne.s   AirRoll_Return   ; if not, return
00015C4A                            
00015C4A                            AirRoll_CheckBtn:
00015C4A 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015C4E 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015C52 6700                               beq.s	AirRoll_Return
00015C54 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015C5A                                   ; move.w	#$BC,d0
00015C5A                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015C5A                            
00015C5A                            AirRoll_Return:
00015C5A 4E75                               rts
00015C5C                            ; ===========================================================================
00015C5C                            ; ---------------------------------------------------------------------------
00015C5C                            ; Unused subroutine to squash Sonic
00015C5C                            ; ---------------------------------------------------------------------------
00015C5C 1028 0026                  		move.b	obAngle(a0),d0
00015C60 0600 0020                  		addi.b	#$20,d0
00015C64 0200 00C0                  		andi.b	#$C0,d0
00015C68 6600                       		bne.s	locret_13302
00015C6A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015C6E 4A41                       		tst.w	d1
00015C70 6A00                       		bpl.s	locret_13302
00015C72 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015C78 317C 0000 0010             		move.w	#0,obVelX(a0)
00015C7E 317C 0000 0012             		move.w	#0,obVelY(a0)
00015C84 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015C8A                            
00015C8A                            locret_13302:
00015C8A 4E75                       		rts		
00015C8C                            		include	"_incObj\Sonic LevelBound.asm"
00015C8C                            ; ---------------------------------------------------------------------------
00015C8C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015C8C                            ; ---------------------------------------------------------------------------
00015C8C                            
00015C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C8C                            
00015C8C                            
00015C8C                            Sonic_LevelBound:
00015C8C 2228 0008                  		move.l	obX(a0),d1
00015C90 3028 0010                  		move.w	obVelX(a0),d0
00015C94 48C0                       		ext.l	d0
00015C96 E180                       		asl.l	#8,d0
00015C98 D280                       		add.l	d0,d1
00015C9A 4841                       		swap	d1
00015C9C 3038 F728                  		move.w	(v_limitleft2).w,d0
00015CA0 0640 0010                  		addi.w	#$10,d0
00015CA4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CA6 6200                       		bhi.s	@sides		; if yes, branch
00015CA8 3038 F72A                  		move.w	(v_limitright2).w,d0
00015CAC 0640 0128                  		addi.w	#$128,d0
00015CB0 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015CB4 6600                       		bne.s	@screenlocked
00015CB6 0640 0040                  		addi.w	#$40,d0
00015CBA                            
00015CBA                            	@screenlocked:
00015CBA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CBC 6300                       		bls.s	@sides		; if yes, branch
00015CBE                            
00015CBE                            	@chkbottom:
00015CBE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015CC2 0640 00E0                  		addi.w	#$E0,d0
00015CC6 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015CCA 6D00                       		blt.s	@bottom		; if yes, branch
00015CCC 4E75                       		rts	
00015CCE                            ; ===========================================================================
00015CCE                            
00015CCE                            @bottom:
00015CCE 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015CD2 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015CD6 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015CD8 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015CDA 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015CE0 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015CE4 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015CEA 6500 0000                  		bcs.w	Kill_transport
00015CEE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015CF2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015CF8 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015CFE 4E75                       		rts	
00015D00                            @dontkill: 
00015D00 4E75                       		rts
00015D02                            ; ===========================================================================
00015D02                            
00015D02                            @sides:
00015D02 3140 0008                  		move.w	d0,obX(a0)
00015D06 317C 0000 000A             		move.w	#0,obX+2(a0)
00015D0C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015D12 317C 0000 0020             		move.w	#0,obInertia(a0)
00015D18 60A4                       		bra.s	@chkbottom
00015D1A                            
00015D1A                            Kill_transport: 
00015D1A 4EF9 0000 0000                     	jmp        (KillSonic).l
00015D20                            
00015D20                            ; End of function Sonic_LevelBound
00015D20                            ; End of function Sonic_LevelBound
00015D20                            		include	"_incObj\Sonic Roll.asm"
00015D20                            ; ---------------------------------------------------------------------------
00015D20                            ; Subroutine allowing Sonic to roll when he's moving
00015D20                            ; ---------------------------------------------------------------------------
00015D20                            
00015D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D20                            
00015D20                            
00015D20                            Sonic_Roll:
00015D20 4A38 F7CA                  		tst.b	(f_jumponly).w
00015D24 6600                       		bne.s	@noroll
00015D26 3028 0020                  		move.w	obInertia(a0),d0
00015D2A 6A00                       		bpl.s	@ispositive
00015D2C 4440                       		neg.w	d0
00015D2E                            
00015D2E                            	@ispositive:
00015D2E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015D32 6500                       		bcs.s	@noroll		; if not, branch
00015D34 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015D38 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015D3C 6600                       		bne.s	@noroll		; if yes, branch
00015D3E 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015D44 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015D46                            
00015D46                            	@noroll:
00015D46 4E75                       		rts	
00015D48                            ; ===========================================================================
00015D48                            
00015D48                            Sonic_ChkRoll:
00015D48 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015D4E 6700                       		beq.s	@roll		; if not, branch
00015D50 4E75                       		rts	
00015D52                            ; ===========================================================================
00015D52                            
00015D52                            @roll:
00015D52 08E8 0002 0022             		bset	#2,obStatus(a0)
00015D58 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015D5E 117C 0007 0017             		move.b	#7,obWidth(a0)
00015D64 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015D6A 5A68 000C                  		addq.w	#5,obY(a0)
00015D78 4A68 0020                  		tst.w	obInertia(a0)
00015D7C 6600                       		bne.s	@ismoving
00015D7E 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015D84                            
00015D84                            	@ismoving:
00015D84 4E75                       		rts	
00015D86                            ; End of function Sonic_Roll
00015D86                            ; End of function Sonic_Roll
00015D86                            		include	"_incObj\Sonic Jump.asm"
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            ; Subroutine allowing Sonic to jump
00015D86                            ; ---------------------------------------------------------------------------
00015D86                            
00015D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D86                            
00015D86                            
00015D86                            Sonic_Jump:
00015D86 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015D8A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015D8E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015D92 7000                       		moveq	#0,d0
00015D94 1028 0026                  		move.b	obAngle(a0),d0
00015D98 0600 0080                  		addi.b	#$80,d0
00015D9C 6100 0000                  		bsr.w	sub_14D48
00015DA0 0C41 0006                  		cmpi.w	#6,d1
00015DA4 6D00 0000                  		blt.w	locret_1348E
00015DA8 343C 0680                  		move.w	#$680,d2
00015DAC 0828 0006 0022             		btst	#6,obStatus(a0)
00015DB2 6700                       		beq.s	loc_1341C
00015DB4 343C 0380                  		move.w	#$380,d2
00015DB8                            
00015DB8                            loc_1341C:
00015DB8 7000                       		moveq	#0,d0
00015DBA 1028 0026                  		move.b	obAngle(a0),d0
00015DBE 0400 0040                  		subi.b	#$40,d0
00015DC2 4EB9 0000 3A32             		jsr	(CalcSine).l
00015DC8 C3C2                       		muls.w	d2,d1
00015DCA E081                       		asr.l	#8,d1
00015DCC D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015DD0 C1C2                       		muls.w	d2,d0
00015DD2 E080                       		asr.l	#8,d0
00015DD4 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015DD8 08E8 0001 0022             		bset	#1,obStatus(a0)
00015DDE 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015DE4 588F                       		addq.l	#4,sp
00015DE6 117C 0001 003C             		move.b	#1,$3C(a0)
00015DEC 4228 0038                  		clr.b	$38(a0)
00015DFA 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015E00 117C 0009 0017             		move.b	#9,obWidth(a0)
00015E06 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015E0C 117C 0007 0017             		move.b	#7,obWidth(a0)
00015E12                            Result_Check:
00015E12 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015E16 6700                       		beq.s   NormalJump ; If not, branch
00015E18 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00015E1E 6000                       		bra.s   cont ; Continue
00015E20                            NormalJump:
00015E20 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015E26                            cont:
00015E26 08E8 0002 0022             		bset	#2,obStatus(a0)
00015E2C 5A68 000C                  		addq.w	#5,obY(a0)
00015E30                            
00015E30                            locret_1348E:
00015E30 4E75                       		rts	
00015E32                            ; ===========================================================================
00015E32                            
00015E32                            ; End of function Sonic_Jump
00015E32                            ; End of function Sonic_Jump
00015E32                            		include	"_incObj\Sonic JumpHeight.asm"
00015E32                            ; ---------------------------------------------------------------------------
00015E32                            ; Subroutine controlling Sonic's jump height/duration
00015E32                            ; ---------------------------------------------------------------------------
00015E32                            
00015E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E32                            
00015E32                            
00015E32                            Sonic_JumpHeight:
00015E32 4A28 003C                  		tst.b	$3C(a0)
00015E36 6700                       		beq.s	loc_134C4
00015E38 323C FC00                  		move.w	#-$400,d1
00015E3C 0828 0006 0022             		btst	#6,obStatus(a0)
00015E42 6700                       		beq.s	loc_134AE
00015E44 323C FE00                  		move.w	#-$200,d1
00015E48                            
00015E48                            loc_134AE:
00015E48 B268 0012                  		cmp.w	obVelY(a0),d1
00015E4C 6F00                       		ble.s	locret_134C2
00015E4E 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015E52 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015E56 6600                       		bne.s	locret_134C2	; if yes, branch
00015E58 3141 0012                  		move.w	d1,obVelY(a0)
00015E5C                            
00015E5C                            locret_134C2:
00015E5C 4E75                       		rts	
00015E5E                            ; ===========================================================================
00015E5E                            
00015E5E                            loc_134C4:
00015E5E 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015E64 6C00                       		bge.s	locret_134D2
00015E66 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015E6C                            
00015E6C                            locret_134D2:
00015E6C 4E75                       		rts	
00015E6E                            ; End of function Sonic_JumpHeight
00015E6E                            ; End of function Sonic_JumpHeight
00015E6E                            		include	"_incObj\Sonic SlopeResist.asm"
00015E6E                            ; ---------------------------------------------------------------------------
00015E6E                            ; Subroutine to	slow Sonic walking up a	slope
00015E6E                            ; ---------------------------------------------------------------------------
00015E6E                            
00015E6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E6E                            
00015E6E                            
00015E6E                            Sonic_SlopeResist:
00015E6E 1028 0026                  		move.b	obAngle(a0),d0
00015E72 0600 0060                  		addi.b	#$60,d0
00015E76 0C00 00C0                  		cmpi.b	#$C0,d0
00015E7A 6400                       		bcc.s	locret_13508
00015E7C 1028 0026                  		move.b	obAngle(a0),d0
00015E80 4EB9 0000 3A32             		jsr	(CalcSine).l
00015E86 C1FC 0020                  		muls.w	#$20,d0
00015E8A E080                       		asr.l	#8,d0
00015E8C 4A68 0020                  		tst.w	obInertia(a0)
00015E90 6700                       		beq.s	locret_13508
00015E92 6B00                       		bmi.s	loc_13504
00015E94 4A40                       		tst.w	d0
00015E96 6700                       		beq.s	locret_13502
00015E98 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015E9C                            
00015E9C                            locret_13502:
00015E9C 4E75                       		rts	
00015E9E                            ; ===========================================================================
00015E9E                            
00015E9E                            loc_13504:
00015E9E D168 0020                  		add.w	d0,obInertia(a0)
00015EA2                            
00015EA2                            locret_13508:
00015EA2 4E75                       		rts	
00015EA4                            ; End of function Sonic_SlopeResist
00015EA4                            ; End of function Sonic_SlopeResist
00015EA4                            		include	"_incObj\Sonic RollRepel.asm"
00015EA4                            ; ---------------------------------------------------------------------------
00015EA4                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015EA4                            ; ---------------------------------------------------------------------------
00015EA4                            
00015EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EA4                            
00015EA4                            
00015EA4                            Sonic_RollRepel:
00015EA4 1028 0026                  		move.b	obAngle(a0),d0
00015EA8 0600 0060                  		addi.b	#$60,d0
00015EAC 0C00 00C0                  		cmpi.b	#-$40,d0
00015EB0 6400                       		bcc.s	locret_13544
00015EB2 1028 0026                  		move.b	obAngle(a0),d0
00015EB6 4EB9 0000 3A32             		jsr	(CalcSine).l
00015EBC C1FC 0050                  		muls.w	#$50,d0
00015EC0 E080                       		asr.l	#8,d0
00015EC2 4A68 0020                  		tst.w	obInertia(a0)
00015EC6 6B00                       		bmi.s	loc_1353A
00015EC8 4A40                       		tst.w	d0
00015ECA 6A00                       		bpl.s	loc_13534
00015ECC E480                       		asr.l	#2,d0
00015ECE                            
00015ECE                            loc_13534:
00015ECE D168 0020                  		add.w	d0,obInertia(a0)
00015ED2 4E75                       		rts	
00015ED4                            ; ===========================================================================
00015ED4                            
00015ED4                            loc_1353A:
00015ED4 4A40                       		tst.w	d0
00015ED6 6B00                       		bmi.s	loc_13540
00015ED8 E480                       		asr.l	#2,d0
00015EDA                            
00015EDA                            loc_13540:
00015EDA D168 0020                  		add.w	d0,obInertia(a0)
00015EDE                            
00015EDE                            locret_13544:
00015EDE 4E75                       		rts	
00015EE0                            ; End of function Sonic_RollRepel
00015EE0                            ; End of function Sonic_RollRepel
00015EE0                            		include	"_incObj\Sonic SlopeRepel.asm"
00015EE0                            ; ---------------------------------------------------------------------------
00015EE0                            ; Subroutine to	push Sonic down	a slope
00015EE0                            ; ---------------------------------------------------------------------------
00015EE0                            
00015EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EE0                            
00015EE0                            
00015EE0                            Sonic_SlopeRepel:
00015EE0 4E71                       		nop	
00015EE2 4A28 0038                  		tst.b	$38(a0)
00015EE6 6600                       		bne.s	locret_13580
00015EE8 4A68 003E                  		tst.w	$3E(a0)
00015EEC 6600                       		bne.s	loc_13582
00015EEE 1028 0026                  		move.b	obAngle(a0),d0
00015EF2 0600 0020                  		addi.b	#$20,d0
00015EF6 0200 00C0                  		andi.b	#$C0,d0
00015EFA 6700                       		beq.s	locret_13580
00015EFC 3028 0020                  		move.w	obInertia(a0),d0
00015F00 6A00                       		bpl.s	loc_1356A
00015F02 4440                       		neg.w	d0
00015F04                            
00015F04                            loc_1356A:
00015F04 0C40 0280                  		cmpi.w	#$280,d0
00015F08 6400                       		bcc.s	locret_13580
00015F0A 4268 0020                  		clr.w	obInertia(a0)
00015F0E 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F14 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015F1A                            
00015F1A                            locret_13580:
00015F1A 4E75                       		rts	
00015F1C                            ; ===========================================================================
00015F1C                            
00015F1C                            loc_13582:
00015F1C 5368 003E                  		subq.w	#1,$3E(a0)
00015F20 4E75                       		rts	
00015F22                            ; End of function Sonic_SlopeRepel
00015F22                            ; End of function Sonic_SlopeRepel
00015F22                            		include	"_incObj\Sonic JumpAngle.asm"
00015F22                            ; ---------------------------------------------------------------------------
00015F22                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015F22                            ; ---------------------------------------------------------------------------
00015F22                            
00015F22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F22                            
00015F22                            
00015F22                            Sonic_JumpAngle:
00015F22 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015F26 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015F28 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015F2A                            
00015F2A 5400                       		addq.b	#2,d0		; increase angle
00015F2C 6400                       		bcc.s	loc_13596
00015F2E 7000                       		moveq	#0,d0
00015F30                            
00015F30                            loc_13596:
00015F30 6000                       		bra.s	loc_1359E
00015F32                            ; ===========================================================================
00015F32                            
00015F32                            loc_13598:
00015F32 5500                       		subq.b	#2,d0		; decrease angle
00015F34 6400                       		bcc.s	loc_1359E
00015F36 7000                       		moveq	#0,d0
00015F38                            
00015F38                            loc_1359E:
00015F38 1140 0026                  		move.b	d0,obAngle(a0)
00015F3C                            
00015F3C                            locret_135A2:
00015F3C 4E75                       		rts	
00015F3E                            ; End of function Sonic_JumpAngle
00015F3E                            ; End of function Sonic_JumpAngle
00015F3E                            		include	"_incObj\Sonic Floor.asm"
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            
00015F3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F3E                            
00015F3E                            
00015F3E                            Sonic_Floor:
00015F3E 3228 0010                  		move.w	obVelX(a0),d1
00015F42 3428 0012                  		move.w	obVelY(a0),d2
00015F46 4EB9 0000 3CC4             		jsr	(CalcAngle).l
00015F4C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015F50 0400 0020                  		subi.b	#$20,d0
00015F54 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015F58 0200 00C0                  		andi.b	#$C0,d0
00015F5C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015F60 0C00 0040                  		cmpi.b	#$40,d0
00015F64 6700 0000                  		beq.w	loc_13680
00015F68 0C00 0080                  		cmpi.b	#$80,d0
00015F6C 6700 0000                  		beq.w	loc_136E2
00015F70 0C00 00C0                  		cmpi.b	#$C0,d0
00015F74 6700 0000                  		beq.w	loc_1373E
00015F78 6100 0000                  		bsr.w	Sonic_HitWall
00015F7C 4A41                       		tst.w	d1
00015F7E 6A00                       		bpl.s	loc_135F0
00015F80 9368 0008                  		sub.w	d1,obX(a0)
00015F84 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F8A                            
00015F8A                            loc_135F0:
00015F8A 6100 0000                  		bsr.w	sub_14EB4
00015F8E 4A41                       		tst.w	d1
00015F90 6A00                       		bpl.s	loc_13602
00015F92 D368 0008                  		add.w	d1,obX(a0)
00015F96 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F9C                            
00015F9C                            loc_13602:
00015F9C 6100 0000                  		bsr.w	Sonic_HitFloor
00015FA0 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015FA4 4A41                       		tst.w	d1
00015FA6 6A00                       		bpl.s	locret_1367E
00015FA8 1428 0012                  		move.b	obVelY(a0),d2
00015FAC 5002                       		addq.b	#8,d2
00015FAE 4402                       		neg.b	d2
00015FB0 B202                       		cmp.b	d2,d1
00015FB2 6C00                       		bge.s	loc_1361E
00015FB4 B002                       		cmp.b	d2,d0
00015FB6 6D00                       		blt.s	locret_1367E
00015FB8                            
00015FB8                            loc_1361E:
00015FB8 D368 000C                  		add.w	d1,obY(a0)
00015FBC 1143 0026                  		move.b	d3,obAngle(a0)
00015FC0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015FC4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015FCA 1003                       		move.b	d3,d0
00015FCC 0600 0020                  		addi.b	#$20,d0
00015FD0 0200 0040                  		andi.b	#$40,d0
00015FD4 6600                       		bne.s	loc_1365C
00015FD6 1003                       		move.b	d3,d0
00015FD8 0600 0010                  		addi.b	#$10,d0
00015FDC 0200 0020                  		andi.b	#$20,d0
00015FE0 6700                       		beq.s	loc_1364E
00015FE2 E0E8 0012                  		asr	obVelY(a0)
00015FE6 6000                       		bra.s	loc_13670
00015FE8                            ; ===========================================================================
00015FE8                            
00015FE8                            loc_1364E:
00015FE8 317C 0000 0012             		move.w	#0,obVelY(a0)
00015FEE 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015FF4 4E75                       		rts	
00015FF6                            ; ===========================================================================
00015FF6                            
00015FF6                            loc_1365C:
00015FF6 317C 0000 0010             		move.w	#0,obVelX(a0)
00015FFC 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016002 6F00                       		ble.s	loc_13670
00016004 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
0001600A                            
0001600A                            loc_13670:
0001600A 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016010 4A03                       		tst.b	d3
00016012 6A00                       		bpl.s	locret_1367E
00016014 4468 0020                  		neg.w	obInertia(a0)
00016018                            
00016018                            locret_1367E:
00016018 4E75                       		rts	
0001601A                            ; ===========================================================================
0001601A                            
0001601A                            loc_13680:
0001601A 6100 0000                  		bsr.w	Sonic_HitWall
0001601E 4A41                       		tst.w	d1
00016020 6A00                       		bpl.s	loc_1369A
00016022 9368 0008                  		sub.w	d1,obX(a0)
00016026 317C 0000 0010             		move.w	#0,obVelX(a0)
0001602C 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016032 4E75                       		rts	
00016034                            ; ===========================================================================
00016034                            
00016034                            loc_1369A:
00016034 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016038 4A41                       		tst.w	d1
0001603A 6A00                       		bpl.s	loc_136B4
0001603C 9368 000C                  		sub.w	d1,obY(a0)
00016040 4A68 0012                  		tst.w	obVelY(a0)
00016044 6A00                       		bpl.s	locret_136B2
00016046 317C 0000 0012             		move.w	#0,obVelY(a0)
0001604C                            
0001604C                            locret_136B2:
0001604C 4E75                       		rts	
0001604E                            ; ===========================================================================
0001604E                            
0001604E                            loc_136B4:
0001604E 4A68 0012                  		tst.w	obVelY(a0)
00016052 6B00                       		bmi.s	locret_136E0
00016054 6100 0000                  		bsr.w	Sonic_HitFloor
00016058 4A41                       		tst.w	d1
0001605A 6A00                       		bpl.s	locret_136E0
0001605C D368 000C                  		add.w	d1,obY(a0)
00016060 1143 0026                  		move.b	d3,obAngle(a0)
00016064 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016068 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001606E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016074 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001607A                            
0001607A                            locret_136E0:
0001607A 4E75                       		rts	
0001607C                            ; ===========================================================================
0001607C                            
0001607C                            loc_136E2:
0001607C 6100 0000                  		bsr.w	Sonic_HitWall
00016080 4A41                       		tst.w	d1
00016082 6A00                       		bpl.s	loc_136F4
00016084 9368 0008                  		sub.w	d1,obX(a0)
00016088 317C 0000 0010             		move.w	#0,obVelX(a0)
0001608E                            
0001608E                            loc_136F4:
0001608E 6100 0000                  		bsr.w	sub_14EB4
00016092 4A41                       		tst.w	d1
00016094 6A00                       		bpl.s	loc_13706
00016096 D368 0008                  		add.w	d1,obX(a0)
0001609A 317C 0000 0010             		move.w	#0,obVelX(a0)
000160A0                            
000160A0                            loc_13706:
000160A0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160A4 4A41                       		tst.w	d1
000160A6 6A00                       		bpl.s	locret_1373C
000160A8 9368 000C                  		sub.w	d1,obY(a0)
000160AC 1003                       		move.b	d3,d0
000160AE 0600 0020                  		addi.b	#$20,d0
000160B2 0200 0040                  		andi.b	#$40,d0
000160B6 6600                       		bne.s	loc_13726
000160B8 317C 0000 0012             		move.w	#0,obVelY(a0)
000160BE 4E75                       		rts	
000160C0                            ; ===========================================================================
000160C0                            
000160C0                            loc_13726:
000160C0 1143 0026                  		move.b	d3,obAngle(a0)
000160C4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000160C8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160CE 4A03                       		tst.b	d3
000160D0 6A00                       		bpl.s	locret_1373C
000160D2 4468 0020                  		neg.w	obInertia(a0)
000160D6                            
000160D6                            locret_1373C:
000160D6 4E75                       		rts	
000160D8                            ; ===========================================================================
000160D8                            
000160D8                            loc_1373E:
000160D8 6100 0000                  		bsr.w	sub_14EB4
000160DC 4A41                       		tst.w	d1
000160DE 6A00                       		bpl.s	loc_13758
000160E0 D368 0008                  		add.w	d1,obX(a0)
000160E4 317C 0000 0010             		move.w	#0,obVelX(a0)
000160EA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160F0 4E75                       		rts	
000160F2                            ; ===========================================================================
000160F2                            
000160F2                            loc_13758:
000160F2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160F6 4A41                       		tst.w	d1
000160F8 6A00                       		bpl.s	loc_13772
000160FA 9368 000C                  		sub.w	d1,obY(a0)
000160FE 4A68 0012                  		tst.w	obVelY(a0)
00016102 6A00                       		bpl.s	locret_13770
00016104 317C 0000 0012             		move.w	#0,obVelY(a0)
0001610A                            
0001610A                            locret_13770:
0001610A 4E75                       		rts	
0001610C                            ; ===========================================================================
0001610C                            
0001610C                            loc_13772:
0001610C 4A68 0012                  		tst.w	obVelY(a0)
00016110 6B00                       		bmi.s	locret_1379E
00016112 6100 0000                  		bsr.w	Sonic_HitFloor
00016116 4A41                       		tst.w	d1
00016118 6A00                       		bpl.s	locret_1379E
0001611A D368 000C                  		add.w	d1,obY(a0)
0001611E 1143 0026                  		move.b	d3,obAngle(a0)
00016122 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016126 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001612C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016132 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016138                            
00016138                            locret_1379E:
00016138 4E75                       		rts	
0001613A                            ; End of function Sonic_Floor
0001613A                            ; End of function Sonic_Floor
0001613A                            		include	"_incObj\Sonic ResetOnFloor.asm"
0001613A                            ; ---------------------------------------------------------------------------
0001613A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001613A                            ; ---------------------------------------------------------------------------
0001613A                            
0001613A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001613A                            
0001613A                            
0001613A                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
0001613A 08A8 0005 0022                     	bclr    #5,$22(a0)
00016140 08A8 0001 0022                     	bclr    #1,$22(a0)
00016146 0828 0002 0022                     	btst    #2,$22(a0)
0001614C 6700                               	beq.s    loc_137E4
0001614E 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016154 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001615A 117C 0009 0017             		move.b	#9,obWidth(a0)
00016160 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016166 5B68 000C                  		subq.w	#5,obY(a0)
0001616A                            
0001616A                            loc_137E4:
0001616A 117C 0000 003C             		move.b	#0,$3C(a0)
00016170 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016176 4E75                       		rts	
00016178                            ; End of function Sonic_ResetOnFloor
00016178                            ; End of function Sonic_ResetOnFloor
00016178                            		include	"_incObj\Sonic (part 2).asm"
00016178                            ; ---------------------------------------------------------------------------
00016178                            ; Sonic	when he	gets hurt
00016178                            ; ---------------------------------------------------------------------------
00016178                            
00016178                            Sonic_Hurt:	; Routine 4
00016178 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001617E 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016184 0828 0006 0022             		btst	#6,obStatus(a0)
0001618A 6700                       		beq.s	loc_1380C
0001618C 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016192                            
00016192                            loc_1380C:
00016192 6100 0000                  		bsr.w	Sonic_HurtStop
00016196 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001619A 6100 F192                  		bsr.w	Sonic_RecordPosition
0001619E 6100 0000                  		bsr.w	Sonic_Animate
000161A2 6100 0000                  		bsr.w	Sonic_LoadGfx
000161A6 4EF9 0000 F760             		jmp	(DisplaySprite).l
000161AC                            
000161AC                            ; ---------------------------------------------------------------------------
000161AC                            ; Subroutine to	stop Sonic falling after he's been hurt
000161AC                            ; ---------------------------------------------------------------------------
000161AC                            
000161AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161AC                            
000161AC                            
000161AC                            Sonic_HurtStop:
000161AC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000161B0 0640 00E0                  		addi.w	#$E0,d0
000161B4                            		;cmp.w	obY(a0),d0
000161B4                            		;bcs.w	KillSonic
000161B4 6100 FD88                  		bsr.w	Sonic_Floor
000161B8 0828 0001 0022             		btst	#1,obStatus(a0)
000161BE 6600                       		bne.s	locret_13860
000161C0 7000                       		moveq	#0,d0
000161C2 3140 0012                  		move.w	d0,obVelY(a0)
000161C6 3140 0010                  		move.w	d0,obVelX(a0)
000161CA 3140 0020                  		move.w	d0,obInertia(a0)
000161CE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000161D4 5528 0024                  		subq.b	#2,obRoutine(a0)
000161D8 317C 0078 0030             		move.w	#$78,$30(a0)
000161DE                            
000161DE                            locret_13860:
000161DE 4E75                       		rts	
000161E0                            ; End of function Sonic_HurtStop
000161E0                            
000161E0                            ; ---------------------------------------------------------------------------
000161E0                            ; Sonic	when he	dies
000161E0                            ; ---------------------------------------------------------------------------
000161E0                            
000161E0                            Sonic_Death:	; Routine 6
000161E0 6100 0000                  		bsr.w	GameOver
000161E4 4EB9 0000 F714             		jsr	(ObjectFall).l
000161EA 6100 F142                  		bsr.w	Sonic_RecordPosition
000161EE 6100 0000                  		bsr.w	Sonic_Animate
000161F2 6100 0000                  		bsr.w	Sonic_LoadGfx
000161F6 4EF9 0000 F760             		jmp	(DisplaySprite).l
000161FC                            
000161FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161FC                            
000161FC                            GameOver:
000161FC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016200 0640 0100                  		addi.w	#$100,d0
00016204 B068 000C                  		cmp.w	obY(a0),d0
00016208 6400 0000                  		bcc.w	locret_13900
0001620C 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00016212 5428 0024                  		addq.b	#2,obRoutine(a0)
00016216 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001621A 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
0001621E 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00016222 6600                       		bne.s	loc_138D4
00016224 317C 0000 003A             		move.w	#0,$3A(a0)
0001622A 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016230 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016236 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
0001623C 4238 FE1A                  		clr.b	(f_timeover).w
00016240                            
00016240                            loc_138C2:
0001624A 7003                       		moveq	#3,d0
0001624C 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
00016252                            		
00016252                            loc_138C3:
0001625C 7003                       		moveq	#3,d0
0001625E 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
00016264                            ; ===========================================================================
00016264                            
00016264                            loc_138D4:
00016264 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001626A 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001626E 6700                       		beq.s	locret_13900	; if not, branch
00016270 317C 0000 003A             		move.w	#0,$3A(a0)
00016276 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001627C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016282 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016288 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001628E 60B0                       		bra.s	loc_138C2
00016290                            		
00016290                            
00016290                            ; ===========================================================================
00016290                            
00016290                            locret_13900:
00016290 4E75                       		rts	
00016292                            ; End of function GameOver
00016292                            
00016292                            ; ---------------------------------------------------------------------------
00016292                            ; Sonic	when the level is restarted
00016292                            ; ---------------------------------------------------------------------------
00016292                            
00016292                            Sonic_ResetLevel:; Routine 8
00016292 4A68 003A                  		tst.w	$3A(a0)
00016296 6700                       		beq.s	locret_13914
00016298 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001629C 6600                       		bne.s	locret_13914
0001629E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000162A4                            
000162A4                            	locret_13914:
000162A4 4E75                       		rts	
000162A4 4E75                       		rts	
000162A6                            		include	"_incObj\Sonic Loops.asm"
000162A6                            ; ---------------------------------------------------------------------------
000162A6                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000162A6                            ; ---------------------------------------------------------------------------
000162A6                            
000162A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162A6                            
000162A6                            
000162A6                            Sonic_Loops:
000162A6 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
000162AC 6700                       		beq.s	@isstarlight	; if yes, branch
000162AE 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
000162B2 6600 0000                  		bne.w	@noloops	; if not, branch
000162B6                            
000162B6                            	@isstarlight:
000162B6 3028 000C                  		move.w	obY(a0),d0
000162BA E248                       		lsr.w	#1,d0
000162BC 0240 0380                  		andi.w	#$380,d0
000162C0 1228 0008                  		move.b	obX(a0),d1
000162C4 0241 007F                  		andi.w	#$7F,d1
000162C8 D041                       		add.w	d1,d0
000162CA 43F8 A400                  		lea	(v_lvllayout).w,a1
000162CE 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000162D2                            
000162D2 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
000162D6 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
000162DA B238 F7AF                  		cmp.b	(v_256roll2).w,d1
000162DE 6700 FA68                  		beq.w	Sonic_ChkRoll
000162E2                            
000162E2 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000162E6 6700                       		beq.s	@chkifleft	; if yes, branch
000162E8 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000162EC 6700                       		beq.s	@chkifinair
000162EE 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
000162F4 4E75                       		rts	
000162F6                            ; ===========================================================================
000162F6                            
000162F6                            @chkifinair:
000162F6 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
000162FC 6700                       		beq.s	@chkifleft	; if not, branch
000162FE                            
000162FE 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016304 4E75                       		rts	
00016306                            ; ===========================================================================
00016306                            
00016306                            @chkifleft:
00016306 3428 0008                  		move.w	obX(a0),d2
0001630A 0C02 002C                  		cmpi.b	#$2C,d2
0001630E 6400                       		bcc.s	@chkifright
00016310                            
00016310 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016316 4E75                       		rts	
00016318                            ; ===========================================================================
00016318                            
00016318                            @chkifright:
00016318 0C02 00E0                  		cmpi.b	#$E0,d2
0001631C 6500                       		bcs.s	@chkangle1
0001631E                            
0001631E 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016324 4E75                       		rts	
00016326                            ; ===========================================================================
00016326                            
00016326                            @chkangle1:
00016326 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
0001632C 6600                       		bne.s	@chkangle2	; if yes, branch
0001632E                            
0001632E 1228 0026                  		move.b	obAngle(a0),d1
00016332 6700                       		beq.s	@done
00016334 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016338 6200                       		bhi.s	@done		; if yes, branch
0001633A 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016340 4E75                       		rts	
00016342                            ; ===========================================================================
00016342                            
00016342                            @chkangle2:
00016342 1228 0026                  		move.b	obAngle(a0),d1
00016346 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
0001634A 6300                       		bls.s	@done		; if yes, branch
0001634C 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
00016352                            
00016352                            @noloops:
00016352                            @done:
00016352 4E75                       		rts	
00016354                            ; End of function Sonic_Loops
00016354                            ; End of function Sonic_Loops
00016354                            		include	"_incObj\Sonic Animate.asm"
00016354                            ; ---------------------------------------------------------------------------
00016354                            ; Subroutine to	animate	Sonic's sprites
00016354                            ; ---------------------------------------------------------------------------
00016354                            
00016354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016354                            
00016354                            
00016354                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016354 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
0001635A 7000                       		moveq	#0,d0
0001635C 1028 001C                  		move.b	obAnim(a0),d0
00016360 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016364 6700                       		beq.s	@do		; if not, branch
00016366 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0001636A 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001636E 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016372                            		
00016372 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016378                            
00016378                            	@do:
00016378 D040                       		add.w	d0,d0
0001637A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001637E 1011                       		move.b	(a1),d0
00016380 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016382 1228 0022                  		move.b	obStatus(a0),d1
00016386 0201 0001                  		andi.b	#1,d1
0001638A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016390 8328 0001                  		or.b	d1,obRender(a0)
00016394 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016398 6A00                       		bpl.s	@delay		; if time remains, branch
0001639A 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
0001639E                            
0001639E                            @loadframe:
0001639E 7200                       		moveq	#0,d1
000163A0 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
000163A4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000163A8 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
000163AC 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
000163B0                            
000163B0                            	@next:
000163B0 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
000163B4 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
000163B8                            
000163B8                            	@delay:
000163B8 4E75                       		rts	
000163BA                            ; ===========================================================================
000163BA                            
000163BA                            @end_FF:
000163BA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000163BC 6600                       		bne.s	@end_FE		; if not, branch
000163BE 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
000163C2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000163C6 60E8                       		bra.s	@next
000163C8                            ; ===========================================================================
000163C8                            
000163C8                            @end_FE:
000163C8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000163CA 6600                       		bne.s	@end_FD		; if not, branch
000163CC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000163D0 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
000163D4 9200                       		sub.b	d0,d1
000163D6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000163DA 60D4                       		bra.s	@next
000163DC                            ; ===========================================================================
000163DC                            
000163DC                            @end_FD:
000163DC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000163DE 6600                       		bne.s	@end		; if not, branch
000163E0 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
000163E6                            
000163E6                            	@end:
000163E6 4E75                       		rts	
000163E8                            ; ===========================================================================
000163E8                            
000163E8                            @walkrunroll:
000163E8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000163EC 6ACA                       		bpl.s	@delay		; if time remains, branch
000163EE 5200                       		addq.b	#1,d0		; is animation walking/running?
000163F0 6600 0000                  		bne.w	@rolljump	; if not, branch
000163F4 7200                       		moveq	#0,d1
000163F6 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000163FA 6B00                       		bmi.s	@ble 			; better handling of angles
000163FC 6700                       		beq.s	@ble
000163FE 5300                       		subq.b	#1,d0
00016400                            
00016400                            	@ble:																
00016400 1428 0022                  		move.b	obStatus(a0),d2
00016404 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016408 6600                       		bne.s	@flip		; if yes, branch
0001640A 4600                       		not.b	d0		; reverse angle
0001640C                            
0001640C                            	@flip:
0001640C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016410 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016412 7203                       		moveq	#3,d1
00016414                            
00016414                            	@noinvert:
00016414 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001641A B302                       		eor.b	d1,d2
0001641C 8528 0001                  		or.b	d2,obRender(a0)
00016420 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016426 6600 0000                  		bne.w	@push		; if yes, branch
0001642A                            
0001642A E808                       		lsr.b	#4,d0		; divide angle by $10
0001642C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016430 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016434 6A00                       		bpl.s	@nomodspeed
00016436 4442                       		neg.w	d2		; modulus speed
00016438                            
00016438                            	@nomodspeed:
00016438 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
0001643E 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016442 6400                       		bcc.s	@maxrunning	; if yes, branch
00016444                            
00016444 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001644A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001644E 6400                       		bcc.s	@running	; if yes, branch
00016450                            
00016450 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016456                            
00016456                            	@running:
00016456 D000                       		add.b	d0,d0
00016458 D000                       		add.b	d0,d0
0001645A 1600                       		move.b	d0,d3
0001645C 4442                       		neg.w	d2
0001645E 0642 0780                  		addi.w	#$780,d2
00016462 6A00                       		bpl.s	@belowmax
00016464 7400                       		moveq	#0,d2		; max animation speed
00016466 6000                       		bra.s	@belowmax
00016468                            
00016468                            	@maxrunning:
00016468 D000                       		add.b d0,d0
0001646A 1600                       		move.b d0,d3
0001646C 4442                       		neg.w d2
0001646E 0642 0800                  		addi.w #$800, d2
00016472 6A00                       		bpl.s @belowmax
00016474 7400                       		moveq #0, d2 
00016476                            
00016476                            	@belowmax:
00016476 E04A                       		lsr.w	#8,d2
00016478 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001647C 6100 FF20                  		bsr.w	@loadframe
00016480 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016484 4E75                       		rts	
00016486                            ; ===========================================================================
00016486                            
00016486                            @rolljump:
00016486 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016488 6600                       		bne.s	@push		; if not, branch
0001648A 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001648E 6A00                       		bpl.s	@nomodspeed2
00016490 4442                       		neg.w	d2
00016492                            
00016492                            	@nomodspeed2:
00016492 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016498 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001649C 6400                       		bcc.s	@rollfast	; if yes, branch
0001649E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000164A4                            
000164A4                            	@rollfast:
000164A4 4442                       		neg.w	d2
000164A6 0642 0400                  		addi.w	#$400,d2
000164AA 6A00                       		bpl.s	@belowmax2
000164AC 7400                       		moveq	#0,d2
000164AE                            
000164AE                            	@belowmax2:
000164AE E04A                       		lsr.w	#8,d2
000164B0 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164B4 1228 0022                  		move.b	obStatus(a0),d1
000164B8 0201 0001                  		andi.b	#1,d1
000164BC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000164C2 8328 0001                  		or.b	d1,obRender(a0)
000164C6 6000 FED6                  		bra.w	@loadframe
000164CA                            ; ===========================================================================
000164CA                            
000164CA                            @push:
000164CA 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000164CE 6B00                       		bmi.s	@negspeed
000164D0 4442                       		neg.w	d2
000164D2                            
000164D2                            	@negspeed:
000164D2 0642 0800                  		addi.w	#$800,d2
000164D6 6A00                       		bpl.s	@belowmax3	
000164D8 7400                       		moveq	#0,d2
000164DA                            
000164DA                            	@belowmax3:
000164DA EC4A                       		lsr.w	#6,d2
000164DC 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164E0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000164E6 1228 0022                  		move.b	obStatus(a0),d1
000164EA 0201 0001                  		andi.b	#1,d1
000164EE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000164F4 8328 0001                  		or.b	d1,obRender(a0)
000164F8 6000 FEA4                  		bra.w	@loadframe
000164FC                            
000164FC                            ; End of function Sonic_Animate
000164FC                            ; End of function Sonic_Animate
000164FC                            		include	"_anim\Sonic.asm"
000164FC                            ; ---------------------------------------------------------------------------
000164FC                            ; Animation script - Sonic
000164FC                            ; ---------------------------------------------------------------------------
000164FC                            Ani_Sonic:
000164FC                            
000164FC 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
000164FE 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016500 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016502 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016504 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016506 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016508 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
0001650A 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
0001650C 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
0001650E 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016510 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016512 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016514 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016516 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016518 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
0001651A 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
0001651C 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
0001651E 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016520 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016522 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016524 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016526 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016528 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
0001652A 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
0001652C 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
0001652E 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016530 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016532 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016534 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016536 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016538 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
0001653A 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
0001653C 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
0001653E 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016540 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016542 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016544 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016546 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016548                            
00016548 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016556 00                         		even
00016556 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016564 00                         		even
00016564 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
0001656B 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016572 00                         		even
00016572 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016579 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016580 00                         		even
00016580 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001658E 00                         		even
0001658E                            SonAni_Wait:	
0001658E 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001659D 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165AC 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165BB 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
000165CA 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000165D9 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000165E8 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000165F7 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016606 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
0001660E                            		even
0001660E 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016614                            		even
00016614 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
0001661A 00                         		even
0001661A 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
00016620                            		even
00016620 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016624 00                         		even
00016624 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016628 00                         		even
00016628 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
0001662C 00                         		even
0001662C 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016630 00                         		even
00016630 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
0001663A                            		even
0001663A 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016640 00                         		even
00016640 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
0001664A 00                         		even
0001664A 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016654 00                         		even
00016654 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016658                            		even
00016658 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
0001665E                            		even
0001665E 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016664 00                         		even
00016664 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016668 00                         		even
00016668 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016670 00                         		even
00016670 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016674 00                         		even
00016674 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016678 00                         		even
00016678 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
0001667C 00                         		even
0001667C 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016680 00                         		even
00016680                            SonAni_WaterSlide:
00016680 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016684                            		even
00016684 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016688                            		even
00016688 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016690 00                         		even
00016690 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016694                            		even
00016694 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
000166A2 00                         		even
000166A2 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
000166AE                            		even
000166AE 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
000166B2                            		even
000166B2 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
000166B6                            		even
000166B6 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
000166BA                            		even
000166BA 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
000166C4 00                         		even
000166C4 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
000166CD 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
000166D5 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
000166DC 3334 35                    		dc.b	$33, $34, $35
000166DF 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
000166E6                            		even
000166E6 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
000166EC                            		even
000166EC                            
000166EC                            
000166EC =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
000166EC =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
000166EC =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
000166EC =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
000166EC =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
000166EC =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
000166EC =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
000166EC =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
000166EC =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
000166EC =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
000166EC =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
000166EC =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
000166EC =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
000166EC =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
000166EC =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
000166EC =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
000166EC =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
000166EC =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
000166EC =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
000166EC =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
000166EC =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
000166EC =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
000166EC =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
000166EC =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
000166EC =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
000166EC =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
000166EC =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
000166EC =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
000166EC =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
000166EC =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
000166EC =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
000166EC =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
000166EC =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
000166EC =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
000166EC =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
000166EC =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
000166EC =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
000166EC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000166EC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000166EC                            		include	"_incObj\Sonic LoadGfx.asm"
000166EC                            ; ---------------------------------------------------------------------------
000166EC                            ; Sonic	graphics loading subroutine
000166EC                            ; ---------------------------------------------------------------------------
000166EC                            
000166EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166EC                            
000166EC                            
000166EC                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
000166EC 7000                       		moveq	#0,d0
000166EE 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000166F2 B038 F766                  		cmp.b	($FFFFF766).w,d0
000166F6 6700                       		beq.s	locret_13C96
000166F8 11C0 F766                  		move.b	d0,($FFFFF766).w
000166FC 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016702 D040                       		add.w	d0,d0
00016704 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016708 7A00                       		moveq	#0,d5
0001670A 1A1A                       		move.b	(a2)+,d5
0001670C 5345                       		subq.w	#1,d5
0001670E 6B00                       		bmi.s	locret_13C96
00016710 383C F000                  		move.w	#$F000,d4
00016714 2C3C 0000 0000             		move.l	#Art_Sonic,d6
0001671A                            
0001671A                            SPLC_ReadEntry:
0001671A 7200                       		moveq	#0,d1
0001671C 121A                       		move.b	(a2)+,d1
0001671E E149                       		lsl.w	#8,d1
00016720 121A                       		move.b	(a2)+,d1
00016722 3601                       		move.w	d1,d3
00016724 E04B                       		lsr.w	#8,d3
00016726 0243 00F0                  		andi.w	#$F0,d3
0001672A 0643 0010                  		addi.w	#$10,d3
0001672E 0241 0FFF                  		andi.w	#$FFF,d1
00016732 EB89                       		lsl.l	#5,d1
00016734 D286                       		add.l	d6,d1
00016736 3404                       		move.w	d4,d2
00016738 D843                       		add.w	d3,d4
0001673A D843                       		add.w	d3,d4
0001673C 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
00016742 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016746                            
00016746                            locret_13C96:
00016746 4E75                       		rts	
00016748                            ; End of function Sonic_LoadGfx
00016748                            ; End of function Sonic_LoadGfx
00016748                            
00016748                            		include	"_incObj\0A Drowning Countdown.asm"
00016748                            ; ---------------------------------------------------------------------------
00016748                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016748                            ; Sonic's mouth (LZ)
00016748                            ; ---------------------------------------------------------------------------
00016748                            
00016748                            DrownCount:
00016748 7000                       		moveq	#0,d0
0001674A 1028 0024                  		move.b	obRoutine(a0),d0
0001674E 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016752 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016756                            ; ===========================================================================
00016756                            Drown_Index:
00016756 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016758 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
0001675A 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
0001675C 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
0001675E 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016760 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016762 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016764 0000                       			dc.w Drown_Display-Drown_Index
00016766 0000                       			dc.w Drown_Delete-Drown_Index
00016768                            
00016768 =00000030                  drown_origX:		equ $30		; original x-axis position
00016768 =00000038                  drown_time:		equ $38		; time between each number changes
00016768                            
00016768 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016768 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016768 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016768 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016768 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016768 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016768 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016768                            ; ===========================================================================
00016768                            
00016768                            Drown_Main:	; Routine 0
00016768 5428 0024                  		addq.b	#2,obRoutine(a0)
0001676C 217C 0001 4BA4 0004        		move.l	#Map_Bub,obMap(a0)
00016774 317C 8348 0002             		move.w	#$8348,obGfx(a0)
0001677A 117C 0084 0001             		move.b	#$84,obRender(a0)
00016780 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016786 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001678C 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016790 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016792                            
00016792 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016796 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
0001679E 317C 0440 0002             		move.w	#$440,obGfx(a0)
000167A4 0240 007F                  		andi.w	#$7F,d0
000167A8 1140 0033                  		move.b	d0,$33(a0)
000167AC 6000 0000                  		bra.w	Drown_Countdown
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            @smallbubble:
000167B0 1140 001C                  		move.b	d0,obAnim(a0)
000167B4 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000167BA 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000167C0                            
000167C0                            Drown_Animate:	; Routine 2
000167C0 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000167C6 4EB9 0000 C848             		jsr	(AnimateSprite).l
000167CC                            
000167CC                            Drown_ChkWater:	; Routine 4
000167CC 3038 F646                  		move.w	(v_waterpos1).w,d0
000167D0 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000167D4 6500                       		bcs.s	@wobble		; if not, branch
000167D6                            
000167D6 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000167DC 5E28 001C                  		addq.b	#7,obAnim(a0)
000167E0 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000167E6 6700                       		beq.s	Drown_Display
000167E8 6000                       		bra.s	Drown_Display
000167EA                            ; ===========================================================================
000167EA                            
000167EA                            @wobble:
000167EA 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000167EE 6700                       		beq.s	@notunnel	; if not, branch
000167F0 5868 0030                  		addq.w	#4,drown_origX(a0)
000167F4                            
000167F4                            	@notunnel:
000167F4 1028 0026                  		move.b	obAngle(a0),d0
000167F8 5228 0026                  		addq.b	#1,obAngle(a0)
000167FC 0240 007F                  		andi.w	#$7F,d0
00016800 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016806 1031 0000                  		move.b	(a1,d0.w),d0
0001680A 4880                       		ext.w	d0
0001680C D068 0030                  		add.w	drown_origX(a0),d0
00016810 3140 0008                  		move.w	d0,obX(a0)
00016814 6100                       		bsr.s	Drown_ShowNumber
00016816 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001681C 4A28 0001                  		tst.b	obRender(a0)
00016820 6A00                       		bpl.s	@delete
00016822 4EF9 0000 F760             		jmp	(DisplaySprite).l
00016828                            
00016828                            	@delete:
00016828 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001682E                            ; ===========================================================================
0001682E                            
0001682E                            Drown_Display:	; Routine 6, Routine $E
0001682E 6100                       		bsr.s	Drown_ShowNumber
00016830 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016836 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001683C 4EF9 0000 F760             		jmp	(DisplaySprite).l
00016842                            ; ===========================================================================
00016842                            
00016842                            Drown_Delete:	; Routine 8, Routine $10
00016842 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00016848                            ; ===========================================================================
00016848                            
00016848                            Drown_AirLeft:	; Routine $C
00016848 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001684E 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016850 5368 0038                  		subq.w	#1,drown_time(a0)
00016854 6600                       		bne.s	@display
00016856 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
0001685C 5E28 001C                  		addq.b	#7,obAnim(a0)
00016860 60CC                       		bra.s	Drown_Display
00016862                            ; ===========================================================================
00016862                            
00016862                            	@display:
00016862 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016868 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001686E 4A28 0001                  		tst.b	obRender(a0)
00016872 6A00                       		bpl.s	Drown_AirLeft_Delete
00016874 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001687A                            
0001687A                            Drown_AirLeft_Delete:	
0001687A 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00016880                            ; ===========================================================================
00016880                            
00016880                            Drown_ShowNumber:
00016880 4A68 0038                  		tst.w	drown_time(a0)
00016884 6700                       		beq.s	@nonumber
00016886 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001688A 6600                       		bne.s	@nonumber	; if time remains, branch
0001688C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016892 6400                       		bcc.s	@nonumber
00016894                            
00016894 317C 000F 0038             		move.w	#15,drown_time(a0)
0001689A 4268 0012                  		clr.w	obVelY(a0)
0001689E 117C 0080 0001             		move.b	#$80,obRender(a0)
000168A4 3028 0008                  		move.w	obX(a0),d0
000168A8 9078 F700                  		sub.w	(v_screenposx).w,d0
000168AC 0640 0080                  		addi.w	#$80,d0
000168B0 3140 0008                  		move.w	d0,obX(a0)
000168B4 3028 000C                  		move.w	obY(a0),d0
000168B8 9078 F704                  		sub.w	(v_screenposy).w,d0
000168BC 0640 0080                  		addi.w	#$80,d0
000168C0 3140 000A                  		move.w	d0,obScreenY(a0)
000168C4 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000168CA                            
000168CA                            	@nonumber:
000168CA 4E75                       		rts	
000168CC                            ; ===========================================================================
000168CC                            Drown_WobbleData:
000168CC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000168DC 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000168EC 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
000168FC 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001690C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001691C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001692C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001693C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001694C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001695C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001696C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001697C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001698C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001699C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000169AC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000169BC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000169CC                            ; ===========================================================================
000169CC                            
000169CC                            Drown_Countdown:; Routine $A
000169CC 4A68 002C                  		tst.w	$2C(a0)
000169D0 6600 0000                  		bne.w	@loc_13F86
000169D4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000169DA 6400 0000                  		bcc.w	@nocountdown
000169DE 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000169E4 6700 0000                  		beq.w	@nocountdown	; if not, branch
000169E8                            
000169E8 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000169EC 6A00 0000                  		bpl.w	@nochange	; branch if time remains
000169F0 317C 003B 0038             		move.w	#59,drown_time(a0)
000169F6 317C 0001 0036             		move.w	#1,$36(a0)
000169FC 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016A02 0240 0001                  		andi.w	#1,d0
00016A06 1140 0034                  		move.b	d0,$34(a0)
00016A0A 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016A0E 0C40 0019                  		cmpi.w	#25,d0
00016A12 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016A14 0C40 0014                  		cmpi.w	#20,d0
00016A18 6700                       		beq.s	@warnsound
00016A1A 0C40 000F                  		cmpi.w	#15,d0
00016A1E 6700                       		beq.s	@warnsound
00016A20 0C40 000C                  		cmpi.w	#12,d0
00016A24 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016A26                            
00016A26                            	@skipmusic:
00016A30 5328 0032                  		subq.b	#1,$32(a0)
00016A34 6A00                       		bpl.s	@reduceair
00016A36 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016A3C 08E8 0007 0036             		bset	#7,$36(a0)
00016A42 6000                       		bra.s	@reduceair
00016A44                            ; ===========================================================================
00016A44                            
00016A44                            @warnsound:
00016A4E                            
00016A4E                            @reduceair:
00016A4E 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016A52 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016A56                            
00016A56                            		; Sonic drowns here
00016A56 6100 0000                  		bsr.w	ResumeMusic
00016A5A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016A6A 117C 000A 0034             		move.b	#$A,$34(a0)
00016A70 317C 0001 0036             		move.w	#1,$36(a0)
00016A76 317C 0078 002C             		move.w	#$78,$2C(a0)
00016A7C 2F08                       		move.l	a0,-(sp)
00016A7E 41F8 D000                  		lea	(v_player).w,a0
00016A82 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016A86 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016A8C 08E8 0001 0022             		bset	#1,obStatus(a0)
00016A92 08E8 0007 0002             		bset	#7,obGfx(a0)
00016A98 317C 0000 0012             		move.w	#0,obVelY(a0)
00016A9E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016AA4 317C 0000 0020             		move.w	#0,obInertia(a0)
00016AAA 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016AB0 205F                       		movea.l	(sp)+,a0
00016AB2 4E75                       		rts	
00016AB4                            ; ===========================================================================
00016AB4                            
00016AB4                            @loc_13F86:
00016AB4 5368 002C                  		subq.w	#1,$2C(a0)
00016AB8 6600                       		bne.s	@loc_13F94
00016ABA 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016AC0 4E75                       		rts	
00016AC2                            ; ===========================================================================
00016AC2                            
00016AC2                            	@loc_13F94:
00016AC2 2F08                       		move.l	a0,-(sp)
00016AC4 41F8 D000                  		lea	(v_player).w,a0
00016AC8 4EB9 0000 F74C             		jsr	(SpeedToPos).l
00016ACE 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016AD4 205F                       		movea.l	(sp)+,a0
00016AD6 6000                       		bra.s	@nochange
00016AD8                            ; ===========================================================================
00016AD8                            
00016AD8                            @gotomakenum:
00016AD8 6000                       		bra.s	@makenum
00016ADA                            ; ===========================================================================
00016ADA                            
00016ADA                            @nochange:
00016ADA 4A68 0036                  		tst.w	$36(a0)
00016ADE 6700 0000                  		beq.w	@nocountdown
00016AE2 5368 003A                  		subq.w	#1,$3A(a0)
00016AE6 6A00 0000                  		bpl.w	@nocountdown
00016AEA                            
00016AEA                            @makenum:
00016AEA 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016AF0 0240 000F                  		andi.w	#$F,d0
00016AF4 3140 003A                  		move.w	d0,$3A(a0)
00016AF8 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
00016AFE 6600 0000                  		bne.w	@nocountdown
00016B02 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016B06 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016B0C 7006                       		moveq	#6,d0
00016B0E 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016B14 6700                       		beq.s	@noflip
00016B16 4440                       		neg.w	d0
00016B18 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016B1E                            
00016B1E                            	@noflip:
00016B1E D169 0008                  		add.w	d0,obX(a1)
00016B22 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016B28 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016B2E 4A68 002C                  		tst.w	$2C(a0)
00016B32 6700 0000                  		beq.w	@loc_1403E
00016B36 0268 0007 003A             		andi.w	#7,$3A(a0)
00016B3C 0668 0000 003A             		addi.w	#0,$3A(a0)
00016B42 3038 D00C                  		move.w	(v_player+obY).w,d0
00016B46 0440 000C                  		subi.w	#$C,d0
00016B4A 3340 000C                  		move.w	d0,obY(a1)
00016B4E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016B54 1340 0026                  		move.b	d0,obAngle(a1)
00016B58 3038 FE04                  		move.w	(v_framecount).w,d0
00016B5C 0200 0003                  		andi.b	#3,d0
00016B60 6600                       		bne.s	@loc_14082
00016B62 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016B68 6000                       		bra.s	@loc_14082
00016B6A                            ; ===========================================================================
00016B6A                            
00016B6A                            @loc_1403E:
00016B6A 0828 0007 0036             		btst	#7,$36(a0)
00016B70 6700                       		beq.s	@loc_14082
00016B72 3438 FE14                  		move.w	(v_air).w,d2
00016B76 E24A                       		lsr.w	#1,d2
00016B78 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016B7E 0240 0003                  		andi.w	#3,d0
00016B82 6600                       		bne.s	@loc_1406A
00016B84 08E8 0006 0036             		bset	#6,$36(a0)
00016B8A 6600                       		bne.s	@loc_14082
00016B8C 1342 0028                  		move.b	d2,obSubtype(a1)
00016B90 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016B96                            
00016B96                            	@loc_1406A:
00016B96 4A28 0034                  		tst.b	$34(a0)
00016B9A 6600                       		bne.s	@loc_14082
00016B9C 08E8 0006 0036             		bset	#6,$36(a0)
00016BA2 6600                       		bne.s	@loc_14082
00016BA4 1342 0028                  		move.b	d2,obSubtype(a1)
00016BA8 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016BAE                            
00016BAE                            @loc_14082:
00016BAE 5328 0034                  		subq.b	#1,$34(a0)
00016BB2 6A00                       		bpl.s	@nocountdown
00016BB4 4268 0036                  		clr.w	$36(a0)
00016BB8                            
00016BB8                            @nocountdown:
00016BB8 4E75                       		rts	
00016BB8 4E75                       		rts	
00016BBA                            
00016BBA                            
00016BBA                            ; ---------------------------------------------------------------------------
00016BBA                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016BBA                            ; ---------------------------------------------------------------------------
00016BBA                            
00016BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BBA                            
00016BBA                            
00016BBA                            ResumeMusic:
00016BBA                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016BBA                            		;bhi.s	@over12		; if yes, branch
00016BBA                            		;move.b	(v_Saved_music),d0
00016BBA                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016BBA                            		;beq.s	@notinvinc ; if not, branch
00016BBA                            		;move.w	#bgm_Invincible,d0
00016BBA                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016BBA                            		;beq.s	@notinvinc	; if not, branch
00016BBA                            		;move.w	#bgm_Ending,d0
00016BBA                            
00016BBA                            	;@notinvinc:
00016BBA                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016BBA                            		;beq.s	@playselected ; if not, branch
00016BBA                            		;move.w	#bgm_Boss,d0
00016BBA                            
00016BBA                            	;@playselected:
00016BBA                            		;jsr	(PlaySound).l
00016BBA                            
00016BBA                            	;@over12:
00016BBA 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016BC0 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016BC4 4E75                       		rts	
00016BC6                            
00016BC6                            ;End of function ResumeMusic
00016BC6                            
00016BC6                            ; ===========================================================================
00016BC6                            
00016BC6                            		include	"_anim\Drowning Countdown.asm"
00016BC6                            ; ---------------------------------------------------------------------------
00016BC6                            ; Animation script - countdown numbers and bubbles (LZ)
00016BC6                            ; ---------------------------------------------------------------------------
00016BC6 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016BC8 0000                       		dc.w @oneappear-Ani_Drown
00016BCA 0000                       		dc.w @twoappear-Ani_Drown
00016BCC 0000                       		dc.w @threeappear-Ani_Drown
00016BCE 0000                       		dc.w @fourappear-Ani_Drown
00016BD0 0000                       		dc.w @fiveappear-Ani_Drown
00016BD2 0000                       		dc.w @smallbubble-Ani_Drown
00016BD4 0000                       		dc.w @zeroflash-Ani_Drown
00016BD6 0000                       		dc.w @oneflash-Ani_Drown
00016BD8 0000                       		dc.w @twoflash-Ani_Drown
00016BDA 0000                       		dc.w @threeflash-Ani_Drown
00016BDC 0000                       		dc.w @fourflash-Ani_Drown
00016BDE 0000                       		dc.w @fiveflash-Ani_Drown
00016BE0 0000                       		dc.w @blank-Ani_Drown
00016BE2 0000                       		dc.w @mediumbubble-Ani_Drown
00016BE4 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016BEE 00                         		even
00016BEE 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016BF8 00                         		even
00016BF8 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016C02 00                         		even
00016C02 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016C0C 00                         		even
00016C0C 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016C16 00                         		even
00016C16 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016C20 00                         		even
00016C20 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016C26 00                         		even
00016C26 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016C2E 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016C36 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016C3E 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016C46 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016C4E 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016C56 0EFC                       @blank:		dc.b $E, afRoutine
00016C58 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016C5E                            		even
00016C5E                            		even
00016C5E                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016C5E                            ; ---------------------------------------------------------------------------
00016C5E                            ; Sprite mappings - drowning countdown numbers (LZ)
00016C5E                            ; ---------------------------------------------------------------------------
00016C5E                            Map_Drown_internal:
00016C5E 0000                       		dc.w @num-Map_Drown_internal
00016C60 01                         @num:		dc.b 1
00016C61 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016C66                            		even
00016C66                            		even
00016C66                            
00016C66                            		include	"_incObj\4E Silver Shield.asm"
00016C66                            ; ---------------------------------------------------------------------------
00016C66                            ; Object 4E - Silver Shield
00016C66                            ; ---------------------------------------------------------------------------
00016C66                            
00016C66                            SpShieldItem:
00016C66 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016C6C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016C70                            		; In this case, VRAM = $541*20
00016C70 363C 0200                  		move.w #$200,d3
00016C74 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016C7A                            ; ---------------------------------------------------------------------------
00016C7A                            SpShieldObj_Main:
00016C7A 7000                       		moveq #0,d0
00016C7C 1028 0024                  		move.b $24(a0),d0
00016C80 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016C84 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016C88                            ; ===========================================================================
00016C88                            SpShield_Index:
00016C88 0000                       		dc.w SpShield_Init-SpShield_Index
00016C8A 0000                       		dc.w SpShieldChecks-SpShield_Index
00016C8C                            ; ===========================================================================
00016C8C                            SpShield_Init:
00016C8C 5428 0024                  		addq.b #2,$24(a0)
00016C90 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016C98 117C 0004 0001             		move.b #4,1(a0)
00016C9E 317C 0080 0018             		move.w #$80,$18(a0)
00016CA4 117C 0018 0014             		move.b #$18,obActWid(a0)
00016CAA 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016CB0 0838 0007 D002             		btst #7,($FFFFD002).w
00016CB6 6700                       		beq.s SpShieldChecks
00016CB8 08E8 0007 0002             		bset #7,2(a0)
00016CBE                            ; ---------------------------------------------------------------------------
00016CBE                            SpShieldChecks:
00016CBE 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016CC2 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016CC4 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016CC8 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016CCA                            SpShieldProperties:
00016CCA 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016CD0 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016CD6 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016CDC 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016CE2 4EB9 0000 C848             		jsr AnimateSprite
00016CE8 4EFA 8A76                  		jmp DisplaySprite
00016CEC                            SpSonicHasShield:
00016CEC 4E75                       		rts
00016CEE                            Spjmp_DeleteObj38: ; loc_12648:
00016CEE 4EFA 8AB0                  		jmp DeleteObject
00016CEE 4EFA 8AB0                  		jmp DeleteObject
00016CF2                            		include	"_incObj\04 Gold Shield.asm"
00016CF2                            ; ---------------------------------------------------------------------------
00016CF2                            ; Object 04 - Gold shield
00016CF2                            ; ---------------------------------------------------------------------------
00016CF2                            
00016CF2                            GShieldItem:
00016CF2 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016CF8 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016CFC                            		; In this case, VRAM = $541*20
00016CFC 363C 0200                  		move.w #$200,d3
00016D00 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            GShieldObj_Main:
00016D06 7000                       		moveq #0,d0
00016D08 1028 0024                  		move.b $24(a0),d0
00016D0C 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016D10 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016D14                            ; ===========================================================================
00016D14                            GShield_Index:
00016D14 0000                       		dc.w GShield_Init-GShield_Index
00016D16 0000                       		dc.w GShieldChecks-GShield_Index
00016D18                            ; ===========================================================================
00016D18                            GShield_Init:
00016D18 5428 0024                  		addq.b #2,$24(a0)
00016D1C 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016D24 117C 0004 0001             		move.b #4,1(a0)
00016D2A 317C 0080 0018             		move.w #$80,$18(a0)
00016D30 117C 0018 0014             		move.b #$18,obActWid(a0)
00016D36 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016D3C 0838 0007 D002             		btst #7,($FFFFD002).w
00016D42 6700                       		beq.s GShieldChecks
00016D44 08E8 0007 0002             		bset #7,2(a0)
00016D4A                            ; ---------------------------------------------------------------------------
00016D4A                            GShieldChecks:
00016D4A 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016D4E 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016D50 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016D54 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016D56                            GShieldProperties:
00016D56 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016D5C 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016D62 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016D68 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016D6E 4EB9 0000 C848             		jsr AnimateSprite
00016D74 4EFA 89EA                  		jmp DisplaySprite
00016D78                            GSonicHasShield:
00016D78 4E75                       		rts
00016D7A                            Gjmp_DeleteObj38: ; loc_12648:
00016D7A 4EFA 8A24                  		jmp DeleteObject
00016D7A 4EFA 8A24                  		jmp DeleteObject
00016D7E                            		include	"_incObj\07 Red Shield.asm"
00016D7E                            ; ---------------------------------------------------------------------------
00016D7E                            ; Object 07 - red shield
00016D7E                            ; ---------------------------------------------------------------------------
00016D7E                            
00016D7E                            RShieldItem:
00016D7E 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016D84 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016D88                            		; In this case, VRAM = $541*20
00016D88 363C 0200                  		move.w #$200,d3
00016D8C 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016D92                            ; ---------------------------------------------------------------------------
00016D92                            RShieldObj_Main:
00016D92 7000                       		moveq #0,d0
00016D94 1028 0024                  		move.b $24(a0),d0
00016D98 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016D9C 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016DA0                            ; ===========================================================================
00016DA0                            RShield_Index:
00016DA0 0000                       		dc.w RShield_Init-RShield_Index
00016DA2 0000                       		dc.w RShieldChecks-RShield_Index
00016DA4                            ; ===========================================================================
00016DA4                            RShield_Init:
00016DA4 5428 0024                  		addq.b #2,$24(a0)
00016DA8 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016DB0 117C 0004 0001             		move.b #4,1(a0)
00016DB6 317C 0080 0018             		move.w #$80,$18(a0)
00016DBC 117C 0018 0014             		move.b #$18,obActWid(a0)
00016DC2 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016DC8 0838 0007 D002             		btst #7,($FFFFD002).w
00016DCE 6700                       		beq.s RShieldChecks
00016DD0 08E8 0007 0002             		bset #7,2(a0)
00016DD6                            ; ---------------------------------------------------------------------------
00016DD6                            RShieldChecks:
00016DD6 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016DDA 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016DDC 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016DE0 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016DE2                            RShieldProperties:
00016DE2 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016DE8 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016DEE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016DF4 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016DFA 4EB9 0000 C848             		jsr AnimateSprite
00016E00 4EFA 895E                  		jmp DisplaySprite
00016E04                            RSonicHasShield:
00016E04 4E75                       		rts
00016E06                            Rjmp_DeleteObj38: ; loc_12648:
00016E06 4EFA 8998                  		jmp DeleteObject
00016E06 4EFA 8998                  		jmp DeleteObject
00016E0A                            		include	"_incObj\38 Shield.asm"
00016E0A                            ; ---------------------------------------------------------------------------
00016E0A                            ; Object 38 - shield
00016E0A                            ; ---------------------------------------------------------------------------
00016E0A                            
00016E0A                            ShieldItem:
00016E0A 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016E10 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E14                            		; In this case, VRAM = $541*20
00016E14 363C 0200                  		move.w #$200,d3
00016E18 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016E1E                            ; ---------------------------------------------------------------------------
00016E1E                            ShieldObj_Main:
00016E1E 7000                       		moveq #0,d0
00016E20 1028 0024                  		move.b $24(a0),d0
00016E24 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016E28 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016E2C                            ; ===========================================================================
00016E2C                            Shield_Index:
00016E2C 0000                       		dc.w Shield_Init-Shield_Index
00016E2E 0000                       		dc.w ShieldChecks-Shield_Index
00016E30                            ; ===========================================================================
00016E30                            Shield_Init:
00016E30 5428 0024                  		addq.b #2,$24(a0)
00016E34 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E3C 117C 0004 0001             		move.b #4,1(a0)
00016E42 317C 0080 0018             		move.w #$80,$18(a0)
00016E48 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E4E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016E54 0838 0007 D002             		btst #7,($FFFFD002).w
00016E5A 6700                       		beq.s ShieldChecks
00016E5C 08E8 0007 0002             		bset #7,2(a0)
00016E62                            ; ---------------------------------------------------------------------------
00016E62                            ShieldChecks:
00016E62 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016E66 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016E68 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016E6C 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016E6E                            ShieldProperties:
00016E6E 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016E74 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016E7A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E80 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E86 4EB9 0000 C848             		jsr AnimateSprite
00016E8C 4EFA 88D2                  		jmp DisplaySprite
00016E90                            SonicHasShield:
00016E90 4E75                       		rts
00016E92                            jmp_DeleteObj38: ; loc_12648:
00016E92 4EFA 890C                  		jmp DeleteObject
00016E92 4EFA 890C                  		jmp DeleteObject
00016E96                            		include	"_incObj\19 Invincibility Stars.asm"		
00016E96                            ; ---------------------------------------------------------------------------
00016E96                            ; Object 19 - Invincibility Stars
00016E96                            ; ---------------------------------------------------------------------------
00016E96                            
00016E96                            InvStarsObj:
00016E96 223C 0000 0000             		move.l #Unc_Stars,d1
00016E9C 343C A820                  		move.w #$A820,d2
00016EA0 363C 0200                  		move.w #$200,d3
00016EA4 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016EAA                            Invincibility_Main:
00016EAA 7000                       		moveq #0,d0
00016EAC 1028 0024                  		move.b $24(a0),d0
00016EB0                            Invincibility_Init:
00016EB0 5428 0024                  		addq.b #2,$24(a0)
00016EB4 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00016EBC 117C 0004 0001             		move.b #4,1(a0)
00016EC2 317C 0080 0018             		move.w #$80,$18(a0)
00016EC8 117C 0010 0014             		move.b #$10,obActWid(a0)
00016ECE 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00016ED4                            ; ===========================================================================
00016ED4                            
00016ED4                            Obj19_Stars: ; XREF: Obj38_Index
00016ED4 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00016ED8 6700                       		beq.s Obj19_Delete2 ; if not, branch
00016EDA 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00016EDE 1228 001C                  		move.b $1C(a0),d1
00016EE2 5301                       		subq.b #1,d1
00016EE4 6000                       		bra.s Obj19_StarTrail
00016EE6                            ; ===========================================================================
00016EE6 E909                       		lsl.b #4,d1
00016EE8 5801                       		addq.b #4,d1
00016EEA 9001                       		sub.b d1,d0
00016EEC 1228 0030                  		move.b $30(a0),d1
00016EF0 9001                       		sub.b d1,d0
00016EF2 5801                       		addq.b #4,d1
00016EF4 0201 000F                  		andi.b #$F,d1
00016EF8 1141 0030                  		move.b d1,$30(a0)
00016EFC 6000                       		bra.s Obj19_StarTrail2a
00016EFE                            ; ===========================================================================
00016EFE                            
00016EFE                            Obj19_StarTrail: ; XREF: Obj19_Stars
00016EFE E709                       		lsl.b #3,d1
00016F00 1401                       		move.b d1,d2
00016F02 D201                       		add.b d1,d1
00016F04 D202                       		add.b d2,d1
00016F06 5801                       		addq.b #4,d1
00016F08 9001                       		sub.b d1,d0
00016F0A 1228 0030                  		move.b $30(a0),d1
00016F0E 9001                       		sub.b d1,d0
00016F10 5801                       		addq.b #4,d1
00016F12 0C01 0018                  		cmpi.b #$18,d1
00016F16 6500                       		bcs.s Obj19_StarTrail2
00016F18 7200                       		moveq #0,d1
00016F1A                            
00016F1A                            Obj19_StarTrail2:
00016F1A 1141 0030                  		move.b d1,$30(a0)
00016F1E                            
00016F1E                            Obj19_StarTrail2a:
00016F1E 43F8 CB00                  		lea ($FFFFCB00).w,a1
00016F22 43F1 0000                  		lea (a1,d0.w),a1
00016F26 3159 0008                  		move.w (a1)+,8(a0)
00016F2A 3159 000C                  		move.w (a1)+,$C(a0)
00016F2E 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
00016F34 43F9 0000 0000             		lea (Ani_Shield).l,a1
00016F3A 4EB9 0000 C848             		jsr (AnimateSprite).l
00016F40 4EF9 0000 F760             		jmp (DisplaySprite).l
00016F46                            ; ===========================================================================
00016F46                            
00016F46                            Obj19_Delete2: ; XREF: Obj19_Stars
00016F46 4EF9 0000 F7A0             		jmp (DeleteObject).l
00016F46 4EF9 0000 F7A0             		jmp (DeleteObject).l
00016F4C                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00016F4C                            ; ---------------------------------------------------------------------------
00016F4C                            ; Object 4A - special stage entry from beta
00016F4C                            ; ---------------------------------------------------------------------------
00016F4C                            
00016F4C                            VanishSonic:
00016F4C 7000                       		moveq	#0,d0
00016F4E 1028 0024                  		move.b	obRoutine(a0),d0
00016F52 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00016F56 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00016F5A                            ; ===========================================================================
00016F5A 0000                       Van_Index:	dc.w Van_Main-Van_Index
00016F5C 0000                       		dc.w Van_RmvSonic-Van_Index
00016F5E 0000                       		dc.w Van_LoadSonic-Van_Index
00016F60                            
00016F60 =00000030                  van_time:	equ $30		; time for Sonic to disappear
00016F60                            ; ===========================================================================
00016F60                            
00016F60                            Van_Main:	; Routine 0
00016F60 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00016F64 6700                       		beq.s	@isempty	; if yes, branch
00016F66 4E75                       		rts	
00016F68                            
00016F68                            	@isempty:
00016F68 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F6C 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00016F74 117C 0004 0001             		move.b	#4,obRender(a0)
00016F7A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F80 117C 0038 0014             		move.b	#$38,obActWid(a0)
00016F86 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016F8C 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00016F92                            
00016F92                            Van_RmvSonic:	; Routine 2
00016F92 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00016F98 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00016F9E 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00016FA4 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00016FAA 4EB9 0000 C848             		jsr	(AnimateSprite).l
00016FB0 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00016FB6 6600                       		bne.s	@display
00016FB8 4A38 D000                  		tst.b	(v_player).w
00016FBC 6700                       		beq.s	@display
00016FBE 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00016FCE                            
00016FCE                            	@display:
00016FCE 4EF9 0000 F760             		jmp	(DisplaySprite).l
00016FD4                            ; ===========================================================================
00016FD4                            
00016FD4                            Van_LoadSonic:	; Routine 4
00016FD4 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00016FD8 6600                       		bne.s	@wait		; if time remains, branch
00016FDA 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00016FE0 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00016FE6                            
00016FE6                            	@wait:
00016FE6 4E75                       		rts	
00016FE6 4E75                       		rts	
00016FE8                            		include	"_incObj\08 Water Splash.asm"
00016FE8                            ; ---------------------------------------------------------------------------
00016FE8                            ; Object 08 - water splash (LZ)
00016FE8                            ; ---------------------------------------------------------------------------
00016FE8                            
00016FE8                            Splash:
00016FE8 7000                       		moveq	#0,d0
00016FEA 1028 0024                  		move.b	obRoutine(a0),d0
00016FEE 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00016FF2 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00016FF6                            ; ===========================================================================
00016FF6 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00016FF8 0000                       		dc.w Spla_Display-Spla_Index
00016FFA 0000                       		dc.w Spla_Delete-Spla_Index
00016FFC                            ; ===========================================================================
00016FFC                            
00016FFC                            Spla_Main:    ; Routine 0
00016FFC 5428 0024                          addq.b    #2,obRoutine(a0)
00017000 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017008 0028 0004 0001                     ori.b    #4,obRender(a0)
0001700E 117C 0001 0018                     move.b    #1,obPriority(a0)
00017014 117C 0010 0014                     move.b    #$10,obActWid(a0)
0001701A 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017020 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017026                            
00017026                            Spla_Display:    ; Routine 2
00017026                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017026 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
0001702C 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017032 4EB9 0000 C848                     jsr    (AnimateSprite).l
00017038 4EF9 0000 F760                     jmp    (DisplaySprite).l
0001703E                            ; ===========================================================================
0001703E                            
0001703E                            Spla_Delete:	; Routine 4
0001703E 4EF9 0000 F7A0             		jmp	(DeleteObject).l	; delete when animation	is complete
0001703E 4EF9 0000 F7A0             		jmp	(DeleteObject).l	; delete when animation	is complete
00017044                            		include	"_anim\Shield and Invincibility.asm"
00017044                            ; ---------------------------------------------------------------------------
00017044                            ; Animation script - shield and invincibility stars
00017044                            ; ---------------------------------------------------------------------------
00017044 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017046 0000                       		dc.w @stars1-Ani_Shield
00017048 0000                       		dc.w @stars2-Ani_Shield
0001704A 0000                       		dc.w @stars3-Ani_Shield
0001704C 0000                       		dc.w @stars4-Ani_Shield
0001704E 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
00017056 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
0001705C 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001706D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017076 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017087 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
00017090 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000170A1 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
000170AA                            		even
000170AA                            		even
000170AA                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
000170AA                            ; --------------------------------------------------------------------------------
000170AA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000170AA                            ; --------------------------------------------------------------------------------
000170AA                            
000170AA                            SME_7M_8q:	
000170AA 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
000170AE 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
000170B2 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
000170B6 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
000170BA 00                         SME_7M_8q_10:	dc.b 0	
000170BB 04                         SME_7M_8q_11:	dc.b 4	
000170BC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000170C1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000170C6 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000170CB 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000170D0 04                         SME_7M_8q_26:	dc.b 4	
000170D1 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
000170D6 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
000170DB 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
000170E0 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000170E5 04                         SME_7M_8q_3B:	dc.b 4	
000170E6 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000170EB E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000170F0 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000170F5 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000170FA 04                         SME_7M_8q_50:	dc.b 4	
000170FB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017100 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017105 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001710A 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
0001710F 04                         SME_7M_8q_65:	dc.b 4	
00017110 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017115 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001711A 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
0001711F 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017124 04                         SME_7M_8q_7A:	dc.b 4	
00017125 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
0001712A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
0001712F 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00017134 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00017139 04                         SME_7M_8q_8F:	dc.b 4	
0001713A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
0001713F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
00017144 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00017149 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001714E                            		even
0001714E                            		even
0001714E                            Map_Shield2:	include	"_maps\Shield 2.asm"
0001714E                            ; --------------------------------------------------------------------------------
0001714E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001714E                            ; --------------------------------------------------------------------------------
0001714E                            
0001714E                            SME_X5P7B:	
0001714E 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
00017152 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
00017156 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
0001715A 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
0001715E 00                         SME_X5P7B_10:	dc.b 0	
0001715F 04                         SME_X5P7B_11:	dc.b 4	
00017160 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017165 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001716A 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001716F 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017174 04                         SME_X5P7B_26:	dc.b 4	
00017175 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
0001717A E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001717F 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017184 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017189 04                         SME_X5P7B_3B:	dc.b 4	
0001718A E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001718F E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017194 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017199 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001719E 04                         SME_X5P7B_50:	dc.b 4	
0001719F E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000171A4 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000171A9 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000171AE 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000171B3 04                         SME_X5P7B_65:	dc.b 4	
000171B4 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000171B9 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000171BE 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000171C3 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000171C8 04                         SME_X5P7B_7A:	dc.b 4	
000171C9 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
000171CE E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
000171D3 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
000171D8 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
000171DD 04                         SME_X5P7B_8F:	dc.b 4	
000171DE E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000171E3 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
000171E8 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000171ED 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000171F2                            		even
000171F2                            		even
000171F2                            
000171F2                            Map_Shield3:	include	"_maps\Shield 3.asm"
000171F2                            ; --------------------------------------------------------------------------------
000171F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000171F2                            ; --------------------------------------------------------------------------------
000171F2                            
000171F2                            SME__wWzO:	
000171F2 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
000171F6 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
000171FA 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
000171FE 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
00017202 00                         SME__wWzO_10:	dc.b 0	
00017203 04                         SME__wWzO_11:	dc.b 4	
00017204 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017209 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001720E 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017213 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017218 04                         SME__wWzO_26:	dc.b 4	
00017219 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
0001721E E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
00017223 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017228 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
0001722D 04                         SME__wWzO_3B:	dc.b 4	
0001722E E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017233 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017238 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001723D 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017242 04                         SME__wWzO_50:	dc.b 4	
00017243 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017248 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001724D 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017252 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017257 04                         SME__wWzO_65:	dc.b 4	
00017258 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001725D E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017262 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017267 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001726C 04                         SME__wWzO_7A:	dc.b 4	
0001726D E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017272 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017277 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001727C 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017281 04                         SME__wWzO_8F:	dc.b 4	
00017282 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017287 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001728C 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017291 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017296                            		even
00017296                            		even
00017296                            		include	"_anim\Special Stage Entry (Unused).asm"
00017296                            ; ---------------------------------------------------------------------------
00017296                            ; Animation script - special stage entry effect from beta
00017296                            ; ---------------------------------------------------------------------------
00017296 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017298 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
000172AC                            		even
000172AC                            		even
000172AC                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            ; Sprite mappings - special stage entry	from beta
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            Map_Vanish_internal:
000172AC 0000                       		dc.w @flash1-Map_Vanish_internal
000172AE 0000                       		dc.w @flash2-Map_Vanish_internal
000172B0 0000                       		dc.w @flash3-Map_Vanish_internal
000172B2 0000                       		dc.w @sparkle1-Map_Vanish_internal
000172B4 0000                       		dc.w @sparkle2-Map_Vanish_internal
000172B6 0000                       		dc.w @sparkle3-Map_Vanish_internal
000172B8 0000                       		dc.w @sparkle4-Map_Vanish_internal
000172BA 0000                       		dc.w @blank-Map_Vanish_internal
000172BC 03                         @flash1:	dc.b 3
000172BD F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000172C2 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000172C7 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000172CC 03                         @flash2:	dc.b 3
000172CD F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000172D2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000172D7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000172DC 05                         @flash3:	dc.b 5
000172DD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000172E2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000172E7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000172EC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000172F1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000172F6 09                         @sparkle1:	dc.b 9
000172F7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000172FC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017301 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017306 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001730B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017310 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017315 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001731A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001731F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017324 12                         @sparkle2:	dc.b $12
00017325 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001732A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001732F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017334 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017339 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001733E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017343 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017348 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001734D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017352 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017357 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001735C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017361 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017366 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001736B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017370 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017375 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001737A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001737F 11                         @sparkle3:	dc.b $11
00017380 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017385 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001738A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001738F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017394 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017399 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001739E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000173A3 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000173A8 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000173AD 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000173B2 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000173B7 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000173BC F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000173C1 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000173C6 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000173CB 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000173D0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000173D5 09                         @sparkle4:	dc.b 9
000173D6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000173DB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000173E0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000173E5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000173EA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000173EF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000173F4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000173F9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000173FE 04                         		dc.b 4
000173FF 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00017404                            		even
00017404                            		even
00017404                            		include	"_anim\Water Splash.asm"
00017404                            ; ---------------------------------------------------------------------------
00017404                            ; Animation script - water splash (LZ)
00017404                            ; ---------------------------------------------------------------------------
00017404 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00017406 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
0001740C 00                         		even
0001740C 00                         		even
0001740C                            Map_Splash:	include	"_maps\Water Splash.asm"
0001740C                            ; ---------------------------------------------------------------------------
0001740C                            ; Sprite mappings - water splash (LZ)
0001740C                            ; ---------------------------------------------------------------------------
0001740C                            Map_Splash_internal:
0001740C 0000                       		dc.w @splash1-Map_Splash_internal
0001740E 0000                       		dc.w @splash2-Map_Splash_internal
00017410 0000                       		dc.w @splash3-Map_Splash_internal
00017412 02                         @splash1:	dc.b 2
00017413 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017418 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001741D 02                         @splash2:	dc.b 2
0001741E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017423 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017428 01                         @splash3:	dc.b 1
00017429 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001742E                            		even
0001742E                            		even
0001742E                            
0001742E                            		include	"_incObj\Sonic AnglePos.asm"
0001742E                            ; ---------------------------------------------------------------------------
0001742E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001742E                            ; ---------------------------------------------------------------------------
0001742E                            
0001742E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001742E                            
0001742E                            
0001742E                            Sonic_AnglePos:
0001742E 0828 0003 0022             		btst	#3,obStatus(a0)
00017434 6700                       		beq.s	loc_14602
00017436 7000                       		moveq	#0,d0
00017438 11C0 F768                  		move.b	d0,($FFFFF768).w
0001743C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017440 4E75                       		rts	
00017442                            ; ===========================================================================
00017442                            
00017442                            loc_14602:
00017442 7003                       		moveq	#3,d0
00017444 11C0 F768                  		move.b	d0,($FFFFF768).w
00017448 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001744C 1028 0026                  		move.b	obAngle(a0),d0
00017450 0600 0020                  		addi.b	#$20,d0
00017454 6A00                       		bpl.s	loc_14624
00017456 1028 0026                  		move.b	obAngle(a0),d0
0001745A 6A00                       		bpl.s	loc_1461E
0001745C 5300                       		subq.b	#1,d0
0001745E                            
0001745E                            loc_1461E:
0001745E 0600 0020                  		addi.b	#$20,d0
00017462 6000                       		bra.s	loc_14630
00017464                            ; ===========================================================================
00017464                            
00017464                            loc_14624:
00017464 1028 0026                  		move.b	obAngle(a0),d0
00017468 6A00                       		bpl.s	loc_1462C
0001746A 5200                       		addq.b	#1,d0
0001746C                            
0001746C                            loc_1462C:
0001746C 0600 001F                  		addi.b	#$1F,d0
00017470                            
00017470                            loc_14630:
00017470 0200 00C0                  		andi.b	#$C0,d0
00017474 0C00 0040                  		cmpi.b	#$40,d0
00017478 6700 0000                  		beq.w	Sonic_WalkVertL
0001747C 0C00 0080                  		cmpi.b	#$80,d0
00017480 6700 0000                  		beq.w	Sonic_WalkCeiling
00017484 0C00 00C0                  		cmpi.b	#$C0,d0
00017488 6700 0000                  		beq.w	Sonic_WalkVertR
0001748C 3428 000C                  		move.w	obY(a0),d2
00017490 3628 0008                  		move.w	obX(a0),d3
00017494 7000                       		moveq	#0,d0
00017496 1028 0016                  		move.b	obHeight(a0),d0
0001749A 4880                       		ext.w	d0
0001749C D440                       		add.w	d0,d2
0001749E 1028 0017                  		move.b	obWidth(a0),d0
000174A2 4880                       		ext.w	d0
000174A4 D640                       		add.w	d0,d3
000174A6 49F8 F768                  		lea	($FFFFF768).w,a4
000174AA 367C 0010                  		movea.w	#$10,a3
000174AE 3C3C 0000                  		move.w	#0,d6
000174B2 7A0D                       		moveq	#$D,d5
000174B4 6100 0000                  		bsr.w	FindFloor
000174B8 3F01                       		move.w	d1,-(sp)
000174BA 3428 000C                  		move.w	obY(a0),d2
000174BE 3628 0008                  		move.w	obX(a0),d3
000174C2 7000                       		moveq	#0,d0
000174C4 1028 0016                  		move.b	obHeight(a0),d0
000174C8 4880                       		ext.w	d0
000174CA D440                       		add.w	d0,d2
000174CC 1028 0017                  		move.b	obWidth(a0),d0
000174D0 4880                       		ext.w	d0
000174D2 4440                       		neg.w	d0
000174D4 D640                       		add.w	d0,d3
000174D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000174DA 367C 0010                  		movea.w	#$10,a3
000174DE 3C3C 0000                  		move.w	#0,d6
000174E2 7A0D                       		moveq	#$D,d5
000174E4 6100 0000                  		bsr.w	FindFloor
000174E8 301F                       		move.w	(sp)+,d0
000174EA 6100 0000                  		bsr.w	Sonic_Angle
000174EE 4A41                       		tst.w	d1
000174F0 6700                       		beq.s	locret_146BE
000174F2 6A00                       		bpl.s	loc_146C0
000174F4 0C41 FFF2                  		cmpi.w	#-$E,d1
000174F8 6D00                       		blt.s	locret_146E6
000174FA D368 000C                  		add.w	d1,obY(a0)
000174FE                            
000174FE                            locret_146BE:
000174FE 4E75                       		rts	
00017500                            ; ===========================================================================
00017500                            
00017500                            loc_146C0:
00017500 0C41 000E                  		cmpi.w	#$E,d1
00017504 6E00                       		bgt.s	loc_146CC
00017506                            
00017506                            loc_146C6:
00017506 D368 000C                  		add.w	d1,obY(a0)
0001750A 4E75                       		rts	
0001750C                            ; ===========================================================================
0001750C                            
0001750C                            loc_146CC:
0001750C 4A28 0038                  		tst.b	$38(a0)
00017510 66F4                       		bne.s	loc_146C6
00017512 08E8 0001 0022             		bset	#1,obStatus(a0)
00017518 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001751E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017524 4E75                       		rts	
00017526                            ; ===========================================================================
00017526                            
00017526                            locret_146E6:
00017526 4E75                       		rts	
00017528                            ; End of function Sonic_AnglePos
00017528                            
00017528                            ; ===========================================================================
00017528 2428 0008                  		move.l	obX(a0),d2
0001752C 3028 0010                  		move.w	obVelX(a0),d0
00017530 48C0                       		ext.l	d0
00017532 E180                       		asl.l	#8,d0
00017534 9480                       		sub.l	d0,d2
00017536 2142 0008                  		move.l	d2,obX(a0)
0001753A 303C 0038                  		move.w	#$38,d0
0001753E 48C0                       		ext.l	d0
00017540 E180                       		asl.l	#8,d0
00017542 9680                       		sub.l	d0,d3
00017544 2143 000C                  		move.l	d3,obY(a0)
00017548 4E75                       		rts	
0001754A                            ; ===========================================================================
0001754A                            
0001754A                            locret_1470A:
0001754A 4E75                       		rts	
0001754C                            ; ===========================================================================
0001754C 2628 000C                  		move.l	obY(a0),d3
00017550 3028 0012                  		move.w	obVelY(a0),d0
00017554 0440 0038                  		subi.w	#$38,d0
00017558 3140 0012                  		move.w	d0,obVelY(a0)
0001755C 48C0                       		ext.l	d0
0001755E E180                       		asl.l	#8,d0
00017560 9680                       		sub.l	d0,d3
00017562 2143 000C                  		move.l	d3,obY(a0)
00017566 4E75                       		rts	
00017568 4E75                       		rts	
0001756A                            ; ===========================================================================
0001756A 2428 0008                  		move.l	obX(a0),d2
0001756E 2628 000C                  		move.l	obY(a0),d3
00017572 3028 0010                  		move.w	obVelX(a0),d0
00017576 48C0                       		ext.l	d0
00017578 E180                       		asl.l	#8,d0
0001757A 9480                       		sub.l	d0,d2
0001757C 3028 0012                  		move.w	obVelY(a0),d0
00017580 48C0                       		ext.l	d0
00017582 E180                       		asl.l	#8,d0
00017584 9680                       		sub.l	d0,d3
00017586 2142 0008                  		move.l	d2,obX(a0)
0001758A 2143 000C                  		move.l	d3,obY(a0)
0001758E 4E75                       		rts	
00017590                            
00017590                            ; ---------------------------------------------------------------------------
00017590                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017590                            ; ---------------------------------------------------------------------------
00017590                            
00017590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017590                            
00017590                            
00017590                            Sonic_Angle:
00017590 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017594 B240                       		cmp.w	d0,d1
00017596 6F00                       		ble.s	loc_1475E
00017598 1438 F768                  		move.b	($FFFFF768).w,d2
0001759C 3200                       		move.w	d0,d1
0001759E                            
0001759E                            loc_1475E:
0001759E 0802 0000                  		btst	#0,d2
000175A2 6600                       		bne.s	loc_1476A
000175A4 1142 0026                  		move.b	d2,obAngle(a0)
000175A8 4E75                       		rts	
000175AA                            ; ===========================================================================
000175AA                            
000175AA                            loc_1476A:
000175AA 1428 0026                  		move.b	obAngle(a0),d2
000175AE 0602 0020                  		addi.b	#$20,d2
000175B2 0202 00C0                  		andi.b	#$C0,d2
000175B6 1142 0026                  		move.b	d2,obAngle(a0)
000175BA 4E75                       		rts	
000175BC                            ; End of function Sonic_Angle
000175BC                            
000175BC                            ; ---------------------------------------------------------------------------
000175BC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000175BC                            ; ---------------------------------------------------------------------------
000175BC                            
000175BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000175BC                            
000175BC                            
000175BC                            Sonic_WalkVertR:
000175BC 3428 000C                  		move.w	obY(a0),d2
000175C0 3628 0008                  		move.w	obX(a0),d3
000175C4 7000                       		moveq	#0,d0
000175C6 1028 0017                  		move.b	obWidth(a0),d0
000175CA 4880                       		ext.w	d0
000175CC 4440                       		neg.w	d0
000175CE D440                       		add.w	d0,d2
000175D0 1028 0016                  		move.b	obHeight(a0),d0
000175D4 4880                       		ext.w	d0
000175D6 D640                       		add.w	d0,d3
000175D8 49F8 F768                  		lea	($FFFFF768).w,a4
000175DC 367C 0010                  		movea.w	#$10,a3
000175E0 3C3C 0000                  		move.w	#0,d6
000175E4 7A0D                       		moveq	#$D,d5
000175E6 6100 0000                  		bsr.w	FindWall
000175EA 3F01                       		move.w	d1,-(sp)
000175EC 3428 000C                  		move.w	obY(a0),d2
000175F0 3628 0008                  		move.w	obX(a0),d3
000175F4 7000                       		moveq	#0,d0
000175F6 1028 0017                  		move.b	obWidth(a0),d0
000175FA 4880                       		ext.w	d0
000175FC D440                       		add.w	d0,d2
000175FE 1028 0016                  		move.b	obHeight(a0),d0
00017602 4880                       		ext.w	d0
00017604 D640                       		add.w	d0,d3
00017606 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001760A 367C 0010                  		movea.w	#$10,a3
0001760E 3C3C 0000                  		move.w	#0,d6
00017612 7A0D                       		moveq	#$D,d5
00017614 6100 0000                  		bsr.w	FindWall
00017618 301F                       		move.w	(sp)+,d0
0001761A 6100 FF74                  		bsr.w	Sonic_Angle
0001761E 4A41                       		tst.w	d1
00017620 6700                       		beq.s	locret_147F0
00017622 6A00                       		bpl.s	loc_147F2
00017624 0C41 FFF2                  		cmpi.w	#-$E,d1
00017628 6D00 FF20                  		blt.w	locret_1470A
0001762C D368 0008                  		add.w	d1,obX(a0)
00017630                            
00017630                            locret_147F0:
00017630 4E75                       		rts	
00017632                            ; ===========================================================================
00017632                            
00017632                            loc_147F2:
00017632 0C41 000E                  		cmpi.w	#$E,d1
00017636 6E00                       		bgt.s	loc_147FE
00017638                            
00017638                            loc_147F8:
00017638 D368 0008                  		add.w	d1,obX(a0)
0001763C 4E75                       		rts	
0001763E                            ; ===========================================================================
0001763E                            
0001763E                            loc_147FE:
0001763E 4A28 0038                  		tst.b	$38(a0)
00017642 66F4                       		bne.s	loc_147F8
00017644 08E8 0001 0022             		bset	#1,obStatus(a0)
0001764A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017650 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017656 4E75                       		rts	
00017658                            ; End of function Sonic_WalkVertR
00017658                            
00017658                            ; ---------------------------------------------------------------------------
00017658                            ; Subroutine allowing Sonic to walk upside-down
00017658                            ; ---------------------------------------------------------------------------
00017658                            
00017658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017658                            
00017658                            
00017658                            Sonic_WalkCeiling:
00017658 3428 000C                  		move.w	obY(a0),d2
0001765C 3628 0008                  		move.w	obX(a0),d3
00017660 7000                       		moveq	#0,d0
00017662 1028 0016                  		move.b	obHeight(a0),d0
00017666 4880                       		ext.w	d0
00017668 9440                       		sub.w	d0,d2
0001766A 0A42 000F                  		eori.w	#$F,d2
0001766E 1028 0017                  		move.b	obWidth(a0),d0
00017672 4880                       		ext.w	d0
00017674 D640                       		add.w	d0,d3
00017676 49F8 F768                  		lea	($FFFFF768).w,a4
0001767A 367C FFF0                  		movea.w	#-$10,a3
0001767E 3C3C 1000                  		move.w	#$1000,d6
00017682 7A0D                       		moveq	#$D,d5
00017684 6100 0000                  		bsr.w	FindFloor
00017688 3F01                       		move.w	d1,-(sp)
0001768A 3428 000C                  		move.w	obY(a0),d2
0001768E 3628 0008                  		move.w	obX(a0),d3
00017692 7000                       		moveq	#0,d0
00017694 1028 0016                  		move.b	obHeight(a0),d0
00017698 4880                       		ext.w	d0
0001769A 9440                       		sub.w	d0,d2
0001769C 0A42 000F                  		eori.w	#$F,d2
000176A0 1028 0017                  		move.b	obWidth(a0),d0
000176A4 4880                       		ext.w	d0
000176A6 9640                       		sub.w	d0,d3
000176A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000176AC 367C FFF0                  		movea.w	#-$10,a3
000176B0 3C3C 1000                  		move.w	#$1000,d6
000176B4 7A0D                       		moveq	#$D,d5
000176B6 6100 0000                  		bsr.w	FindFloor
000176BA 301F                       		move.w	(sp)+,d0
000176BC 6100 FED2                  		bsr.w	Sonic_Angle
000176C0 4A41                       		tst.w	d1
000176C2 6700                       		beq.s	locret_14892
000176C4 6A00                       		bpl.s	loc_14894
000176C6 0C41 FFF2                  		cmpi.w	#-$E,d1
000176CA 6D00 FE5A                  		blt.w	locret_146E6
000176CE 9368 000C                  		sub.w	d1,obY(a0)
000176D2                            
000176D2                            locret_14892:
000176D2 4E75                       		rts	
000176D4                            ; ===========================================================================
000176D4                            
000176D4                            loc_14894:
000176D4 0C41 000E                  		cmpi.w	#$E,d1
000176D8 6E00                       		bgt.s	loc_148A0
000176DA                            
000176DA                            loc_1489A:
000176DA 9368 000C                  		sub.w	d1,obY(a0)
000176DE 4E75                       		rts	
000176E0                            ; ===========================================================================
000176E0                            
000176E0                            loc_148A0:
000176E0 4A28 0038                  		tst.b	$38(a0)
000176E4 66F4                       		bne.s	loc_1489A
000176E6 08E8 0001 0022             		bset	#1,obStatus(a0)
000176EC 08A8 0005 0022             		bclr	#5,obStatus(a0)
000176F2 117C 0001 001D             		move.b	#1,obNextAni(a0)
000176F8 4E75                       		rts	
000176FA                            ; End of function Sonic_WalkCeiling
000176FA                            
000176FA                            ; ---------------------------------------------------------------------------
000176FA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000176FA                            ; ---------------------------------------------------------------------------
000176FA                            
000176FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176FA                            
000176FA                            
000176FA                            Sonic_WalkVertL:
000176FA 3428 000C                  		move.w	obY(a0),d2
000176FE 3628 0008                  		move.w	obX(a0),d3
00017702 7000                       		moveq	#0,d0
00017704 1028 0017                  		move.b	obWidth(a0),d0
00017708 4880                       		ext.w	d0
0001770A 9440                       		sub.w	d0,d2
0001770C 1028 0016                  		move.b	obHeight(a0),d0
00017710 4880                       		ext.w	d0
00017712 9640                       		sub.w	d0,d3
00017714 0A43 000F                  		eori.w	#$F,d3
00017718 49F8 F768                  		lea	($FFFFF768).w,a4
0001771C 367C FFF0                  		movea.w	#-$10,a3
00017720 3C3C 0800                  		move.w	#$800,d6
00017724 7A0D                       		moveq	#$D,d5
00017726 6100 0000                  		bsr.w	FindWall
0001772A 3F01                       		move.w	d1,-(sp)
0001772C 3428 000C                  		move.w	obY(a0),d2
00017730 3628 0008                  		move.w	obX(a0),d3
00017734 7000                       		moveq	#0,d0
00017736 1028 0017                  		move.b	obWidth(a0),d0
0001773A 4880                       		ext.w	d0
0001773C D440                       		add.w	d0,d2
0001773E 1028 0016                  		move.b	obHeight(a0),d0
00017742 4880                       		ext.w	d0
00017744 9640                       		sub.w	d0,d3
00017746 0A43 000F                  		eori.w	#$F,d3
0001774A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001774E 367C FFF0                  		movea.w	#-$10,a3
00017752 3C3C 0800                  		move.w	#$800,d6
00017756 7A0D                       		moveq	#$D,d5
00017758 6100 0000                  		bsr.w	FindWall
0001775C 301F                       		move.w	(sp)+,d0
0001775E 6100 FE30                  		bsr.w	Sonic_Angle
00017762 4A41                       		tst.w	d1
00017764 6700                       		beq.s	locret_14934
00017766 6A00                       		bpl.s	loc_14936
00017768 0C41 FFF2                  		cmpi.w	#-$E,d1
0001776C 6D00 FDDC                  		blt.w	locret_1470A
00017770 9368 0008                  		sub.w	d1,obX(a0)
00017774                            
00017774                            locret_14934:
00017774 4E75                       		rts	
00017776                            ; ===========================================================================
00017776                            
00017776                            loc_14936:
00017776 0C41 000E                  		cmpi.w	#$E,d1
0001777A 6E00                       		bgt.s	loc_14942
0001777C                            
0001777C                            loc_1493C:
0001777C 9368 0008                  		sub.w	d1,obX(a0)
00017780 4E75                       		rts	
00017782                            ; ===========================================================================
00017782                            
00017782                            loc_14942:
00017782 4A28 0038                  		tst.b	$38(a0)
00017786 66F4                       		bne.s	loc_1493C
00017788 08E8 0001 0022             		bset	#1,obStatus(a0)
0001778E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017794 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001779A 4E75                       		rts	
0001779C                            ; End of function Sonic_WalkVertL
0001779C                            ; End of function Sonic_WalkVertL
0001779C                            
0001779C                            		include	"_incObj\sub FindNearestTile.asm"
0001779C                            ; ---------------------------------------------------------------------------
0001779C                            ; Subroutine to	find which tile	the object is standing on
0001779C                            
0001779C                            ; input:
0001779C                            ;	d2 = y-position of object's bottom edge
0001779C                            ;	d3 = x-position of object
0001779C                            
0001779C                            ; output:
0001779C                            ;	a1 = address within 256x256 mappings where object is standing
0001779C                            ;	     (refers to a 16x16 tile number)
0001779C                            ; ---------------------------------------------------------------------------
0001779C                            
0001779C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001779C                            
0001779C                            
0001779C                            FindNearestTile:
0001779C 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
0001779E E248                       		lsr.w	#1,d0
000177A0 0240 0380                  		andi.w	#$380,d0
000177A4 3203                       		move.w	d3,d1		; get x-pos. of object
000177A6 E049                       		lsr.w	#8,d1
000177A8 0241 007F                  		andi.w	#$7F,d1
000177AC D041                       		add.w	d1,d0		; combine
000177AE 72FF                       		moveq	#-1,d1
000177B0 43F8 A400                  		lea	(v_lvllayout).w,a1
000177B4 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000177B8 6700                       		beq.s	@blanktile	; branch if 0
000177BA 6B00                       		bmi.s	@specialtile	; branch if >$7F
000177BC 5301                       		subq.b	#1,d1
000177BE 4881                       		ext.w	d1
000177C0 EE59                       		ror.w	#7,d1
000177C2 3002                       		move.w	d2,d0
000177C4 D040                       		add.w	d0,d0
000177C6 0240 01E0                  		andi.w	#$1E0,d0
000177CA D240                       		add.w	d0,d1
000177CC 3003                       		move.w	d3,d0
000177CE E648                       		lsr.w	#3,d0
000177D0 0240 001E                  		andi.w	#$1E,d0
000177D4 D240                       		add.w	d0,d1
000177D6                            
000177D6                            @blanktile:
000177D6 2241                       		movea.l	d1,a1
000177D8 4E75                       		rts	
000177DA                            ; ===========================================================================
000177DA                            
000177DA                            @specialtile:
000177DA 0241 007F                  		andi.w	#$7F,d1
000177DE 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000177E4 6700                       		beq.s	@treatasnormal	; if not, branch
000177E6 5241                       		addq.w	#1,d1
000177E8 0C41 0029                  		cmpi.w	#$29,d1
000177EC 6600                       		bne.s	@treatasnormal
000177EE 323C 0051                  		move.w	#$51,d1
000177F2                            
000177F2                            	@treatasnormal:
000177F2 5301                       		subq.b	#1,d1
000177F4 EE59                       		ror.w	#7,d1
000177F6 3002                       		move.w	d2,d0
000177F8 D040                       		add.w	d0,d0
000177FA 0240 01E0                  		andi.w	#$1E0,d0
000177FE D240                       		add.w	d0,d1
00017800 3003                       		move.w	d3,d0
00017802 E648                       		lsr.w	#3,d0
00017804 0240 001E                  		andi.w	#$1E,d0
00017808 D240                       		add.w	d0,d1
0001780A 2241                       		movea.l	d1,a1
0001780C 4E75                       		rts	
0001780E                            ; End of function FindNearestTile
0001780E                            ; End of function FindNearestTile
0001780E                            		include	"_incObj\sub FindFloor.asm"
0001780E                            ; ---------------------------------------------------------------------------
0001780E                            ; Subroutine to	find the floor
0001780E                            
0001780E                            ; input:
0001780E                            ;	d2 = y-position of object's bottom edge
0001780E                            ;	d3 = x-position of object
0001780E                            ;	d5 = bit to test for solidness
0001780E                            
0001780E                            ; output:
0001780E                            ;	d1 = distance to the floor
0001780E                            ;	a1 = address within 256x256 mappings where object is standing
0001780E                            ;	     (refers to a 16x16 tile number)
0001780E                            ;	(a4) = floor angle
0001780E                            ; ---------------------------------------------------------------------------
0001780E                            
0001780E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001780E                            
0001780E                            
0001780E                            FindFloor:
0001780E 618C                       		bsr.s	FindNearestTile
00017810 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017812 3800                       		move.w	d0,d4
00017814 0240 07FF                  		andi.w	#$7FF,d0
00017818 6700                       		beq.s	@isblank	; branch if tile is blank
0001781A 0B04                       		btst	d5,d4		; is the tile solid?
0001781C 6600                       		bne.s	@issolid	; if yes, branch
0001781E                            
0001781E                            @isblank:
0001781E D44B                       		add.w	a3,d2
00017820 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017824 944B                       		sub.w	a3,d2
00017826 0641 0010                  		addi.w	#$10,d1		; return distance to floor
0001782A 4E75                       		rts	
0001782C                            ; ===========================================================================
0001782C                            
0001782C                            @issolid:
0001782C 2478 F796                  		movea.l	(v_collindex).w,a2
00017830 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017834 0240 00FF                  		andi.w	#$FF,d0
00017838 67E4                       		beq.s	@isblank	; branch if 0
0001783A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017840 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017844 E948                       		lsl.w	#4,d0
00017846 3203                       		move.w	d3,d1		; get x-pos. of object
00017848 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
0001784C 6700                       		beq.s	@noflip		; if not, branch
0001784E 4641                       		not.w	d1
00017850 4414                       		neg.b	(a4)
00017852                            
00017852                            	@noflip:
00017852 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017856 6700                       		beq.s	@noflip2	; if not, branch
00017858 0614 0040                  		addi.b	#$40,(a4)
0001785C 4414                       		neg.b	(a4)
0001785E 0414 0040                  		subi.b	#$40,(a4)
00017862                            
00017862                            	@noflip2:
00017862 0241 000F                  		andi.w	#$F,d1
00017866 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017868 45F9 0000 0000             		lea	(CollArray1).l,a2
0001786E 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017872 4880                       		ext.w	d0
00017874 BD44                       		eor.w	d6,d4
00017876 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001787A 6700                       		beq.s	@noflip3	; if not, branch
0001787C 4440                       		neg.w	d0
0001787E                            
0001787E                            	@noflip3:
0001787E 4A40                       		tst.w	d0
00017880 679C                       		beq.s	@isblank	; branch if height is 0
00017882 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017884 0C00 0010                  		cmpi.b	#$10,d0
00017888 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
0001788A 3202                       		move.w	d2,d1		; get y-pos. of object
0001788C 0241 000F                  		andi.w	#$F,d1
00017890 D041                       		add.w	d1,d0
00017892 323C 000F                  		move.w	#$F,d1
00017896 9240                       		sub.w	d0,d1		; return distance to floor
00017898 4E75                       		rts	
0001789A                            ; ===========================================================================
0001789A                            
0001789A                            @negfloor:
0001789A 3202                       		move.w	d2,d1
0001789C 0241 000F                  		andi.w	#$F,d1
000178A0 D041                       		add.w	d1,d0
000178A2 6A00 FF7A                  		bpl.w	@isblank
000178A6                            
000178A6                            @maxfloor:
000178A6 944B                       		sub.w	a3,d2
000178A8 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000178AC D44B                       		add.w	a3,d2
000178AE 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000178B2 4E75                       		rts	
000178B4                            ; End of function FindFloor
000178B4                            
000178B4                            
000178B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178B4                            
000178B4                            
000178B4                            FindFloor2:
000178B4 6100 FEE6                  		bsr.w	FindNearestTile
000178B8 3011                       		move.w	(a1),d0
000178BA 3800                       		move.w	d0,d4
000178BC 0240 07FF                  		andi.w	#$7FF,d0
000178C0 6700                       		beq.s	@isblank2
000178C2 0B04                       		btst	d5,d4
000178C4 6600                       		bne.s	@issolid
000178C6                            
000178C6                            @isblank2:
000178C6 323C 000F                  		move.w	#$F,d1
000178CA 3002                       		move.w	d2,d0
000178CC 0240 000F                  		andi.w	#$F,d0
000178D0 9240                       		sub.w	d0,d1
000178D2 4E75                       		rts	
000178D4                            ; ===========================================================================
000178D4                            
000178D4                            @issolid:
000178D4 2478 F796                  		movea.l	(v_collindex).w,a2
000178D8 1032 0000                  		move.b	(a2,d0.w),d0
000178DC 0240 00FF                  		andi.w	#$FF,d0
000178E0 67E4                       		beq.s	@isblank2
000178E2 45F9 0000 0000             		lea	(AngleMap).l,a2
000178E8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000178EC E948                       		lsl.w	#4,d0
000178EE 3203                       		move.w	d3,d1
000178F0 0804 000B                  		btst	#$B,d4
000178F4 6700                       		beq.s	@noflip
000178F6 4641                       		not.w	d1
000178F8 4414                       		neg.b	(a4)
000178FA                            
000178FA                            	@noflip:
000178FA 0804 000C                  		btst	#$C,d4
000178FE 6700                       		beq.s	@noflip2
00017900 0614 0040                  		addi.b	#$40,(a4)
00017904 4414                       		neg.b	(a4)
00017906 0414 0040                  		subi.b	#$40,(a4)
0001790A                            
0001790A                            	@noflip2:
0001790A 0241 000F                  		andi.w	#$F,d1
0001790E D240                       		add.w	d0,d1
00017910 45F9 0000 0000             		lea	(CollArray1).l,a2
00017916 1032 1000                  		move.b	(a2,d1.w),d0
0001791A 4880                       		ext.w	d0
0001791C BD44                       		eor.w	d6,d4
0001791E 0804 000C                  		btst	#$C,d4
00017922 6700                       		beq.s	@noflip3
00017924 4440                       		neg.w	d0
00017926                            
00017926                            	@noflip3:
00017926 4A40                       		tst.w	d0
00017928 679C                       		beq.s	@isblank2
0001792A 6B00                       		bmi.s	@negfloor
0001792C 3202                       		move.w	d2,d1
0001792E 0241 000F                  		andi.w	#$F,d1
00017932 D041                       		add.w	d1,d0
00017934 323C 000F                  		move.w	#$F,d1
00017938 9240                       		sub.w	d0,d1
0001793A 4E75                       		rts	
0001793C                            ; ===========================================================================
0001793C                            
0001793C                            @negfloor:
0001793C 3202                       		move.w	d2,d1
0001793E 0241 000F                  		andi.w	#$F,d1
00017942 D041                       		add.w	d1,d0
00017944 6A00 FF80                  		bpl.w	@isblank2
00017948 4641                       		not.w	d1
0001794A 4E75                       		rts	
0001794C                            ; End of function FindFloor2
0001794C                            ; End of function FindFloor2
0001794C                            		include	"_incObj\sub FindWall.asm"
0001794C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001794C                            
0001794C                            
0001794C                            FindWall:
0001794C 6100 FE4E                  		bsr.w	FindNearestTile
00017950 3011                       		move.w	(a1),d0
00017952 3800                       		move.w	d0,d4
00017954 0240 07FF                  		andi.w	#$7FF,d0
00017958 6700                       		beq.s	loc_14B1E
0001795A 0B04                       		btst	d5,d4
0001795C 6600                       		bne.s	loc_14B2C
0001795E                            
0001795E                            loc_14B1E:
0001795E D64B                       		add.w	a3,d3
00017960 6100 0000                  		bsr.w	FindWall2
00017964 964B                       		sub.w	a3,d3
00017966 0641 0010                  		addi.w	#$10,d1
0001796A 4E75                       		rts	
0001796C                            ; ===========================================================================
0001796C                            
0001796C                            loc_14B2C:
0001796C 2478 F796                  		movea.l	(v_collindex).w,a2
00017970 1032 0000                  		move.b	(a2,d0.w),d0
00017974 0240 00FF                  		andi.w	#$FF,d0
00017978 67E4                       		beq.s	loc_14B1E
0001797A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017980 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017984 E948                       		lsl.w	#4,d0
00017986 3202                       		move.w	d2,d1
00017988 0804 000C                  		btst	#$C,d4
0001798C 6700                       		beq.s	loc_14B5A
0001798E 4641                       		not.w	d1
00017990 0614 0040                  		addi.b	#$40,(a4)
00017994 4414                       		neg.b	(a4)
00017996 0414 0040                  		subi.b	#$40,(a4)
0001799A                            
0001799A                            loc_14B5A:
0001799A 0804 000B                  		btst	#$B,d4
0001799E 6700                       		beq.s	loc_14B62
000179A0 4414                       		neg.b	(a4)
000179A2                            
000179A2                            loc_14B62:
000179A2 0241 000F                  		andi.w	#$F,d1
000179A6 D240                       		add.w	d0,d1
000179A8 45F9 0000 0000             		lea	(CollArray2).l,a2
000179AE 1032 1000                  		move.b	(a2,d1.w),d0
000179B2 4880                       		ext.w	d0
000179B4 BD44                       		eor.w	d6,d4
000179B6 0804 000B                  		btst	#$B,d4
000179BA 6700                       		beq.s	loc_14B7E
000179BC 4440                       		neg.w	d0
000179BE                            
000179BE                            loc_14B7E:
000179BE 4A40                       		tst.w	d0
000179C0 679C                       		beq.s	loc_14B1E
000179C2 6B00                       		bmi.s	loc_14B9A
000179C4 0C00 0010                  		cmpi.b	#$10,d0
000179C8 6700                       		beq.s	loc_14BA6
000179CA 3203                       		move.w	d3,d1
000179CC 0241 000F                  		andi.w	#$F,d1
000179D0 D041                       		add.w	d1,d0
000179D2 323C 000F                  		move.w	#$F,d1
000179D6 9240                       		sub.w	d0,d1
000179D8 4E75                       		rts	
000179DA                            ; ===========================================================================
000179DA                            
000179DA                            loc_14B9A:
000179DA 3203                       		move.w	d3,d1
000179DC 0241 000F                  		andi.w	#$F,d1
000179E0 D041                       		add.w	d1,d0
000179E2 6A00 FF7A                  		bpl.w	loc_14B1E
000179E6                            
000179E6                            loc_14BA6:
000179E6 964B                       		sub.w	a3,d3
000179E8 6100 0000                  		bsr.w	FindWall2
000179EC D64B                       		add.w	a3,d3
000179EE 0441 0010                  		subi.w	#$10,d1
000179F2 4E75                       		rts	
000179F4                            ; End of function FindWall
000179F4                            
000179F4                            
000179F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179F4                            
000179F4                            
000179F4                            FindWall2:
000179F4 6100 FDA6                  		bsr.w	FindNearestTile
000179F8 3011                       		move.w	(a1),d0
000179FA 3800                       		move.w	d0,d4
000179FC 0240 07FF                  		andi.w	#$7FF,d0
00017A00 6700                       		beq.s	loc_14BC6
00017A02 0B04                       		btst	d5,d4
00017A04 6600                       		bne.s	loc_14BD4
00017A06                            
00017A06                            loc_14BC6:
00017A06 323C 000F                  		move.w	#$F,d1
00017A0A 3003                       		move.w	d3,d0
00017A0C 0240 000F                  		andi.w	#$F,d0
00017A10 9240                       		sub.w	d0,d1
00017A12 4E75                       		rts	
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            loc_14BD4:
00017A14 2478 F796                  		movea.l	(v_collindex).w,a2
00017A18 1032 0000                  		move.b	(a2,d0.w),d0
00017A1C 0240 00FF                  		andi.w	#$FF,d0
00017A20 67E4                       		beq.s	loc_14BC6
00017A22 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A28 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A2C E948                       		lsl.w	#4,d0
00017A2E 3202                       		move.w	d2,d1
00017A30 0804 000C                  		btst	#$C,d4
00017A34 6700                       		beq.s	loc_14C02
00017A36 4641                       		not.w	d1
00017A38 0614 0040                  		addi.b	#$40,(a4)
00017A3C 4414                       		neg.b	(a4)
00017A3E 0414 0040                  		subi.b	#$40,(a4)
00017A42                            
00017A42                            loc_14C02:
00017A42 0804 000B                  		btst	#$B,d4
00017A46 6700                       		beq.s	loc_14C0A
00017A48 4414                       		neg.b	(a4)
00017A4A                            
00017A4A                            loc_14C0A:
00017A4A 0241 000F                  		andi.w	#$F,d1
00017A4E D240                       		add.w	d0,d1
00017A50 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A56 1032 1000                  		move.b	(a2,d1.w),d0
00017A5A 4880                       		ext.w	d0
00017A5C BD44                       		eor.w	d6,d4
00017A5E 0804 000B                  		btst	#$B,d4
00017A62 6700                       		beq.s	loc_14C26
00017A64 4440                       		neg.w	d0
00017A66                            
00017A66                            loc_14C26:
00017A66 4A40                       		tst.w	d0
00017A68 679C                       		beq.s	loc_14BC6
00017A6A 6B00                       		bmi.s	loc_14C3C
00017A6C 3203                       		move.w	d3,d1
00017A6E 0241 000F                  		andi.w	#$F,d1
00017A72 D041                       		add.w	d1,d0
00017A74 323C 000F                  		move.w	#$F,d1
00017A78 9240                       		sub.w	d0,d1
00017A7A 4E75                       		rts	
00017A7C                            ; ===========================================================================
00017A7C                            
00017A7C                            loc_14C3C:
00017A7C 3203                       		move.w	d3,d1
00017A7E 0241 000F                  		andi.w	#$F,d1
00017A82 D041                       		add.w	d1,d0
00017A84 6A00 FF80                  		bpl.w	loc_14BC6
00017A88 4641                       		not.w	d1
00017A8A 4E75                       		rts	
00017A8C                            ; End of function FindWall2
00017A8C                            ; End of function FindWall2
00017A8C                            
00017A8C                            ; ---------------------------------------------------------------------------
00017A8C                            ; Unused floor/wall subroutine - logs something	to do with collision
00017A8C                            ; ---------------------------------------------------------------------------
00017A8C                            
00017A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A8C                            
00017A8C                            
00017A8C                            FloorLog_Unk:
00017A8C 4E75                       		rts	
00017A8E                            
00017A8E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017A94 45F9 0000 0000             		lea	(CollArray1).l,a2
00017A9A 363C 00FF                  		move.w	#$FF,d3
00017A9E                            
00017A9E                            loc_14C5E:
00017A9E 7A10                       		moveq	#$10,d5
00017AA0 343C 000F                  		move.w	#$F,d2
00017AA4                            
00017AA4                            loc_14C64:
00017AA4 7800                       		moveq	#0,d4
00017AA6 323C 000F                  		move.w	#$F,d1
00017AAA                            
00017AAA                            loc_14C6A:
00017AAA 3019                       		move.w	(a1)+,d0
00017AAC EAA8                       		lsr.l	d5,d0
00017AAE D944                       		addx.w	d4,d4
00017AB0 51C9 FFF8                  		dbf	d1,loc_14C6A
00017AB4                            
00017AB4 34C4                       		move.w	d4,(a2)+
00017AB6 92FC 0020                  		suba.w	#$20,a1
00017ABA 5345                       		subq.w	#1,d5
00017ABC 51CA FFE6                  		dbf	d2,loc_14C64
00017AC0                            
00017AC0 D2FC 0020                  		adda.w	#$20,a1
00017AC4 51CB FFD8                  		dbf	d3,loc_14C5E
00017AC8                            
00017AC8 43F9 0000 0000             		lea	(CollArray1).l,a1
00017ACE 45F9 0000 0000             		lea	(CollArray2).l,a2
00017AD4 6100                       		bsr.s	FloorLog_Unk2
00017AD6 43F9 0000 0000             		lea	(CollArray1).l,a1
00017ADC 45F9 0000 0000             		lea	(CollArray1).l,a2
00017AE2                            
00017AE2                            ; End of function FloorLog_Unk
00017AE2                            
00017AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AE2                            
00017AE2                            
00017AE2                            FloorLog_Unk2:
00017AE2 363C 0FFF                  		move.w	#$FFF,d3
00017AE6                            
00017AE6                            loc_14CA6:
00017AE6 7400                       		moveq	#0,d2
00017AE8 323C 000F                  		move.w	#$F,d1
00017AEC 3019                       		move.w	(a1)+,d0
00017AEE 6700                       		beq.s	loc_14CD4
00017AF0 6B00                       		bmi.s	loc_14CBE
00017AF2                            
00017AF2                            loc_14CB2:
00017AF2 E248                       		lsr.w	#1,d0
00017AF4 6400                       		bhs.s	loc_14CB8
00017AF6 5202                       		addq.b	#1,d2
00017AF8                            
00017AF8                            loc_14CB8:
00017AF8 51C9 FFF8                  		dbf	d1,loc_14CB2
00017AFC                            
00017AFC 6000                       		bra.s	loc_14CD6
00017AFE                            ; ===========================================================================
00017AFE                            
00017AFE                            loc_14CBE:
00017AFE 0C40 FFFF                  		cmpi.w	#-1,d0
00017B02 6700                       		beq.s	loc_14CD0
00017B04                            
00017B04                            loc_14CC4:
00017B04 E348                       		lsl.w	#1,d0
00017B06 6400                       		bhs.s	loc_14CCA
00017B08 5302                       		subq.b	#1,d2
00017B0A                            
00017B0A                            loc_14CCA:
00017B0A 51C9 FFF8                  		dbf	d1,loc_14CC4
00017B0E                            
00017B0E 6000                       		bra.s	loc_14CD6
00017B10                            ; ===========================================================================
00017B10                            
00017B10                            loc_14CD0:
00017B10 303C 0010                  		move.w	#$10,d0
00017B14                            
00017B14                            loc_14CD4:
00017B14 3400                       		move.w	d0,d2
00017B16                            
00017B16                            loc_14CD6:
00017B16 14C2                       		move.b	d2,(a2)+
00017B18 51CB FFCC                  		dbf	d3,loc_14CA6
00017B1C                            
00017B1C 4E75                       		rts	
00017B1E                            
00017B1E                            ; End of function FloorLog_Unk2
00017B1E                            
00017B1E                            
00017B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B1E                            
00017B1E                            
00017B1E                            Sonic_WalkSpeed:
00017B1E 2628 0008                  		move.l	obX(a0),d3
00017B22 2428 000C                  		move.l	obY(a0),d2
00017B26 3228 0010                  		move.w	obVelX(a0),d1
00017B2A 48C1                       		ext.l	d1
00017B2C E181                       		asl.l	#8,d1
00017B2E D681                       		add.l	d1,d3
00017B30 3228 0012                  		move.w	obVelY(a0),d1
00017B34 48C1                       		ext.l	d1
00017B36 E181                       		asl.l	#8,d1
00017B38 D481                       		add.l	d1,d2
00017B3A 4842                       		swap	d2
00017B3C 4843                       		swap	d3
00017B3E 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017B42 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017B46 1200                       		move.b	d0,d1
00017B48 0600 0020                  		addi.b	#$20,d0
00017B4C 6A00                       		bpl.s	loc_14D1A
00017B4E 1001                       		move.b	d1,d0
00017B50 6A00                       		bpl.s	loc_14D14
00017B52 5300                       		subq.b	#1,d0
00017B54                            
00017B54                            loc_14D14:
00017B54 0600 0020                  		addi.b	#$20,d0
00017B58 6000                       		bra.s	loc_14D24
00017B5A                            ; ===========================================================================
00017B5A                            
00017B5A                            loc_14D1A:
00017B5A 1001                       		move.b	d1,d0
00017B5C 6A00                       		bpl.s	loc_14D20
00017B5E 5200                       		addq.b	#1,d0
00017B60                            
00017B60                            loc_14D20:
00017B60 0600 001F                  		addi.b	#$1F,d0
00017B64                            
00017B64                            loc_14D24:
00017B64 0200 00C0                  		andi.b	#$C0,d0
00017B68 6700 0000                  		beq.w	loc_14DF0
00017B6C 0C00 0080                  		cmpi.b	#$80,d0
00017B70 6700 0000                  		beq.w	loc_14F7C
00017B74 0201 0038                  		andi.b	#$38,d1
00017B78 6600                       		bne.s	loc_14D3C
00017B7A 5042                       		addq.w	#8,d2
00017B7C                            
00017B7C                            loc_14D3C:
00017B7C 0C00 0040                  		cmpi.b	#$40,d0
00017B80 6700 0000                  		beq.w	loc_1504A
00017B84 6000 0000                  		bra.w	loc_14EBC
00017B88                            
00017B88                            ; End of function Sonic_WalkSpeed
00017B88                            
00017B88                            
00017B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B88                            
00017B88                            
00017B88                            sub_14D48:
00017B88 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017B8C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017B90 0600 0020                  		addi.b	#$20,d0
00017B94 0200 00C0                  		andi.b	#$C0,d0
00017B98 0C00 0040                  		cmpi.b	#$40,d0
00017B9C 6700 0000                  		beq.w	loc_14FD6
00017BA0 0C00 0080                  		cmpi.b	#$80,d0
00017BA4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017BA8 0C00 00C0                  		cmpi.b	#$C0,d0
00017BAC 6700 0000                  		beq.w	sub_14E50
00017BB0                            
00017BB0                            ; End of function sub_14D48
00017BB0                            
00017BB0                            ; ---------------------------------------------------------------------------
00017BB0                            ; Subroutine to	make Sonic land	on the floor after jumping
00017BB0                            ; ---------------------------------------------------------------------------
00017BB0                            
00017BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BB0                            
00017BB0                            
00017BB0                            Sonic_HitFloor:
00017BB0 3428 000C                  		move.w	obY(a0),d2
00017BB4 3628 0008                  		move.w	obX(a0),d3
00017BB8 7000                       		moveq	#0,d0
00017BBA 1028 0016                  		move.b	obHeight(a0),d0
00017BBE 4880                       		ext.w	d0
00017BC0 D440                       		add.w	d0,d2
00017BC2 1028 0017                  		move.b	obWidth(a0),d0
00017BC6 4880                       		ext.w	d0
00017BC8 D640                       		add.w	d0,d3
00017BCA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017BCE 367C 0010                  		movea.w	#$10,a3
00017BD2 3C3C 0000                  		move.w	#0,d6
00017BD6 7A0D                       		moveq	#$D,d5
00017BD8 6100 FC34                  		bsr.w	FindFloor
00017BDC 3F01                       		move.w	d1,-(sp)
00017BDE 3428 000C                  		move.w	obY(a0),d2
00017BE2 3628 0008                  		move.w	obX(a0),d3
00017BE6 7000                       		moveq	#0,d0
00017BE8 1028 0016                  		move.b	obHeight(a0),d0
00017BEC 4880                       		ext.w	d0
00017BEE D440                       		add.w	d0,d2
00017BF0 1028 0017                  		move.b	obWidth(a0),d0
00017BF4 4880                       		ext.w	d0
00017BF6 9640                       		sub.w	d0,d3
00017BF8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017BFC 367C 0010                  		movea.w	#$10,a3
00017C00 3C3C 0000                  		move.w	#0,d6
00017C04 7A0D                       		moveq	#$D,d5
00017C06 6100 FC06                  		bsr.w	FindFloor
00017C0A 301F                       		move.w	(sp)+,d0
00017C0C 143C 0000                  		move.b	#0,d2
00017C10                            
00017C10                            loc_14DD0:
00017C10 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017C14 B240                       		cmp.w	d0,d1
00017C16 6F00                       		ble.s	loc_14DDE
00017C18 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C1C C141                       		exg	d0,d1
00017C1E                            
00017C1E                            loc_14DDE:
00017C1E 0803 0000                  		btst	#0,d3
00017C22 6700                       		beq.s	locret_14DE6
00017C24 1602                       		move.b	d2,d3
00017C26                            
00017C26                            locret_14DE6:
00017C26 4E75                       		rts	
00017C28                            
00017C28                            ; End of function Sonic_HitFloor
00017C28                            
00017C28                            ; ===========================================================================
00017C28 3428 000C                  		move.w	obY(a0),d2
00017C2C 3628 0008                  		move.w	obX(a0),d3
00017C30                            
00017C30                            loc_14DF0:
00017C30 0642 000A                  		addi.w	#$A,d2
00017C34 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C38 367C 0010                  		movea.w	#$10,a3
00017C3C 3C3C 0000                  		move.w	#0,d6
00017C40 7A0E                       		moveq	#$E,d5
00017C42 6100 FBCA                  		bsr.w	FindFloor
00017C46 143C 0000                  		move.b	#0,d2
00017C4A                            
00017C4A                            loc_14E0A:
00017C4A 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C4E 0803 0000                  		btst	#0,d3
00017C52 6700                       		beq.s	locret_14E16
00017C54 1602                       		move.b	d2,d3
00017C56                            
00017C56                            locret_14E16:
00017C56 4E75                       		rts	
00017C58                            
00017C58                            		include	"_incObj\sub ObjFloorDist.asm"
00017C58                            ; ---------------------------------------------------------------------------
00017C58                            ; Subroutine to find the distance of an object to the floor
00017C58                            
00017C58                            ; input:
00017C58                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017C58                            
00017C58                            ; output:
00017C58                            ;	d1 = distance to the floor
00017C58                            ;	d3 = floor angle
00017C58                            ;	a1 = address within 256x256 mappings where object is standing
00017C58                            ;	     (refers to a 16x16 tile number)
00017C58                            ;	(a4) = floor angle
00017C58                            ; ---------------------------------------------------------------------------
00017C58                            
00017C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C58                            
00017C58                            
00017C58                            ObjFloorDist:
00017C58 3628 0008                  		move.w	obX(a0),d3
00017C5C                            
00017C5C                            
00017C5C                            ObjFloorDist2:
00017C5C 3428 000C                  		move.w	obY(a0),d2
00017C60 7000                       		moveq	#0,d0
00017C62 1028 0016                  		move.b	obHeight(a0),d0
00017C66 4880                       		ext.w	d0
00017C68 D440                       		add.w	d0,d2
00017C6A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C6E 18BC 0000                  		move.b	#0,(a4)
00017C72 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017C76 3C3C 0000                  		move.w	#0,d6
00017C7A 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017C7C 6100 FB90                  		bsr.w	FindFloor
00017C80 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C84 0803 0000                  		btst	#0,d3
00017C88 6700                       		beq.s	locret_14E4E
00017C8A 163C 0000                  		move.b	#0,d3
00017C8E                            
00017C8E                            	locret_14E4E:
00017C8E 4E75                       		rts	
00017C90                            
00017C90                            ; End of function ObjFloorDist2
00017C90                            ; End of function ObjFloorDist2
00017C90                            
00017C90                            
00017C90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C90                            
00017C90                            
00017C90                            sub_14E50:
00017C90 3428 000C                  		move.w	obY(a0),d2
00017C94 3628 0008                  		move.w	obX(a0),d3
00017C98 7000                       		moveq	#0,d0
00017C9A 1028 0017                  		move.b	obWidth(a0),d0
00017C9E 4880                       		ext.w	d0
00017CA0 9440                       		sub.w	d0,d2
00017CA2 1028 0016                  		move.b	obHeight(a0),d0
00017CA6 4880                       		ext.w	d0
00017CA8 D640                       		add.w	d0,d3
00017CAA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017CAE 367C 0010                  		movea.w	#$10,a3
00017CB2 3C3C 0000                  		move.w	#0,d6
00017CB6 7A0E                       		moveq	#$E,d5
00017CB8 6100 FC92                  		bsr.w	FindWall
00017CBC 3F01                       		move.w	d1,-(sp)
00017CBE 3428 000C                  		move.w	obY(a0),d2
00017CC2 3628 0008                  		move.w	obX(a0),d3
00017CC6 7000                       		moveq	#0,d0
00017CC8 1028 0017                  		move.b	obWidth(a0),d0
00017CCC 4880                       		ext.w	d0
00017CCE D440                       		add.w	d0,d2
00017CD0 1028 0016                  		move.b	obHeight(a0),d0
00017CD4 4880                       		ext.w	d0
00017CD6 D640                       		add.w	d0,d3
00017CD8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017CDC 367C 0010                  		movea.w	#$10,a3
00017CE0 3C3C 0000                  		move.w	#0,d6
00017CE4 7A0E                       		moveq	#$E,d5
00017CE6 6100 FC64                  		bsr.w	FindWall
00017CEA 301F                       		move.w	(sp)+,d0
00017CEC 143C 00C0                  		move.b	#-$40,d2
00017CF0 6000 FF1E                  		bra.w	loc_14DD0
00017CF4                            
00017CF4                            ; End of function sub_14E50
00017CF4                            
00017CF4                            
00017CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CF4                            
00017CF4                            
00017CF4                            sub_14EB4:
00017CF4 3428 000C                  		move.w	obY(a0),d2
00017CF8 3628 0008                  		move.w	obX(a0),d3
00017CFC                            
00017CFC                            loc_14EBC:
00017CFC 0643 000A                  		addi.w	#$A,d3
00017D00 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D04 367C 0010                  		movea.w	#$10,a3
00017D08 3C3C 0000                  		move.w	#0,d6
00017D0C 7A0E                       		moveq	#$E,d5
00017D0E 6100 FC3C                  		bsr.w	FindWall
00017D12 143C 00C0                  		move.b	#-$40,d2
00017D16 6000 FF32                  		bra.w	loc_14E0A
00017D1A                            
00017D1A                            ; End of function sub_14EB4
00017D1A                            
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            ; Subroutine to	detect when an object hits a wall to its right
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            
00017D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D1A                            
00017D1A                            
00017D1A                            ObjHitWallRight:
00017D1A D668 0008                  		add.w	obX(a0),d3
00017D1E 3428 000C                  		move.w	obY(a0),d2
00017D22 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D26 18BC 0000                  		move.b	#0,(a4)
00017D2A 367C 0010                  		movea.w	#$10,a3
00017D2E 3C3C 0000                  		move.w	#0,d6
00017D32 7A0E                       		moveq	#$E,d5
00017D34 6100 FC16                  		bsr.w	FindWall
00017D38 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D3C 0803 0000                  		btst	#0,d3
00017D40 6700                       		beq.s	locret_14F06
00017D42 163C 00C0                  		move.b	#-$40,d3
00017D46                            
00017D46                            locret_14F06:
00017D46 4E75                       		rts	
00017D48                            
00017D48                            ; End of function ObjHitWallRight
00017D48                            
00017D48                            ; ---------------------------------------------------------------------------
00017D48                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017D48                            ; touches them
00017D48                            ; ---------------------------------------------------------------------------
00017D48                            
00017D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D48                            
00017D48                            
00017D48                            Sonic_DontRunOnWalls:
00017D48 3428 000C                  		move.w	obY(a0),d2
00017D4C 3628 0008                  		move.w	obX(a0),d3
00017D50 7000                       		moveq	#0,d0
00017D52 1028 0016                  		move.b	obHeight(a0),d0
00017D56 4880                       		ext.w	d0
00017D58 9440                       		sub.w	d0,d2
00017D5A 0A42 000F                  		eori.w	#$F,d2
00017D5E 1028 0017                  		move.b	obWidth(a0),d0
00017D62 4880                       		ext.w	d0
00017D64 D640                       		add.w	d0,d3
00017D66 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D6A 367C FFF0                  		movea.w	#-$10,a3
00017D6E 3C3C 1000                  		move.w	#$1000,d6
00017D72 7A0E                       		moveq	#$E,d5
00017D74 6100 FA98                  		bsr.w	FindFloor
00017D78 3F01                       		move.w	d1,-(sp)
00017D7A 3428 000C                  		move.w	obY(a0),d2
00017D7E 3628 0008                  		move.w	obX(a0),d3
00017D82 7000                       		moveq	#0,d0
00017D84 1028 0016                  		move.b	obHeight(a0),d0
00017D88 4880                       		ext.w	d0
00017D8A 9440                       		sub.w	d0,d2
00017D8C 0A42 000F                  		eori.w	#$F,d2
00017D90 1028 0017                  		move.b	obWidth(a0),d0
00017D94 4880                       		ext.w	d0
00017D96 9640                       		sub.w	d0,d3
00017D98 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017D9C 367C FFF0                  		movea.w	#-$10,a3
00017DA0 3C3C 1000                  		move.w	#$1000,d6
00017DA4 7A0E                       		moveq	#$E,d5
00017DA6 6100 FA66                  		bsr.w	FindFloor
00017DAA 301F                       		move.w	(sp)+,d0
00017DAC 143C 0080                  		move.b	#-$80,d2
00017DB0 6000 FE5E                  		bra.w	loc_14DD0
00017DB4                            ; End of function Sonic_DontRunOnWalls
00017DB4                            
00017DB4                            ; ===========================================================================
00017DB4 3428 000C                  		move.w	obY(a0),d2
00017DB8 3628 0008                  		move.w	obX(a0),d3
00017DBC                            
00017DBC                            loc_14F7C:
00017DBC 0442 000A                  		subi.w	#$A,d2
00017DC0 0A42 000F                  		eori.w	#$F,d2
00017DC4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DC8 367C FFF0                  		movea.w	#-$10,a3
00017DCC 3C3C 1000                  		move.w	#$1000,d6
00017DD0 7A0E                       		moveq	#$E,d5
00017DD2 6100 FA3A                  		bsr.w	FindFloor
00017DD6 143C 0080                  		move.b	#-$80,d2
00017DDA 6000 FE6E                  		bra.w	loc_14E0A
00017DDE                            
00017DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DDE                            
00017DDE                            
00017DDE                            ObjHitCeiling:
00017DDE 3428 000C                  		move.w	obY(a0),d2
00017DE2 3628 0008                  		move.w	obX(a0),d3
00017DE6 7000                       		moveq	#0,d0
00017DE8 1028 0016                  		move.b	obHeight(a0),d0
00017DEC 4880                       		ext.w	d0
00017DEE 9440                       		sub.w	d0,d2
00017DF0 0A42 000F                  		eori.w	#$F,d2
00017DF4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DF8 367C FFF0                  		movea.w	#-$10,a3
00017DFC 3C3C 1000                  		move.w	#$1000,d6
00017E00 7A0E                       		moveq	#$E,d5
00017E02 6100 FA0A                  		bsr.w	FindFloor
00017E06 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E0A 0803 0000                  		btst	#0,d3
00017E0E 6700                       		beq.s	locret_14FD4
00017E10 163C 0080                  		move.b	#-$80,d3
00017E14                            
00017E14                            locret_14FD4:
00017E14 4E75                       		rts	
00017E16                            ; End of function ObjHitCeiling
00017E16                            
00017E16                            ; ===========================================================================
00017E16                            
00017E16                            loc_14FD6:
00017E16 3428 000C                  		move.w	obY(a0),d2
00017E1A 3628 0008                  		move.w	obX(a0),d3
00017E1E 7000                       		moveq	#0,d0
00017E20 1028 0017                  		move.b	obWidth(a0),d0
00017E24 4880                       		ext.w	d0
00017E26 9440                       		sub.w	d0,d2
00017E28 1028 0016                  		move.b	obHeight(a0),d0
00017E2C 4880                       		ext.w	d0
00017E2E 9640                       		sub.w	d0,d3
00017E30 0A43 000F                  		eori.w	#$F,d3
00017E34 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E38 367C FFF0                  		movea.w	#-$10,a3
00017E3C 3C3C 0800                  		move.w	#$800,d6
00017E40 7A0E                       		moveq	#$E,d5
00017E42 6100 FB08                  		bsr.w	FindWall
00017E46 3F01                       		move.w	d1,-(sp)
00017E48 3428 000C                  		move.w	obY(a0),d2
00017E4C 3628 0008                  		move.w	obX(a0),d3
00017E50 7000                       		moveq	#0,d0
00017E52 1028 0017                  		move.b	obWidth(a0),d0
00017E56 4880                       		ext.w	d0
00017E58 D440                       		add.w	d0,d2
00017E5A 1028 0016                  		move.b	obHeight(a0),d0
00017E5E 4880                       		ext.w	d0
00017E60 9640                       		sub.w	d0,d3
00017E62 0A43 000F                  		eori.w	#$F,d3
00017E66 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E6A 367C FFF0                  		movea.w	#-$10,a3
00017E6E 3C3C 0800                  		move.w	#$800,d6
00017E72 7A0E                       		moveq	#$E,d5
00017E74 6100 FAD6                  		bsr.w	FindWall
00017E78 301F                       		move.w	(sp)+,d0
00017E7A 143C 0040                  		move.b	#$40,d2
00017E7E 6000 FD90                  		bra.w	loc_14DD0
00017E82                            
00017E82                            ; ---------------------------------------------------------------------------
00017E82                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017E82                            ; ---------------------------------------------------------------------------
00017E82                            
00017E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E82                            
00017E82                            
00017E82                            Sonic_HitWall:
00017E82 3428 000C                  		move.w	obY(a0),d2
00017E86 3628 0008                  		move.w	obX(a0),d3
00017E8A                            
00017E8A                            loc_1504A:
00017E8A 0443 000A                  		subi.w	#$A,d3
00017E8E 0A43 000F                  		eori.w	#$F,d3
00017E92 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E96 367C FFF0                  		movea.w	#-$10,a3
00017E9A 3C3C 0800                  		move.w	#$800,d6
00017E9E 7A0E                       		moveq	#$E,d5
00017EA0 6100 FAAA                  		bsr.w	FindWall
00017EA4 143C 0040                  		move.b	#$40,d2
00017EA8 6000 FDA0                  		bra.w	loc_14E0A
00017EAC                            ; End of function Sonic_HitWall
00017EAC                            
00017EAC                            ; ---------------------------------------------------------------------------
00017EAC                            ; Subroutine to	detect when an object hits a wall to its left
00017EAC                            ; ---------------------------------------------------------------------------
00017EAC                            
00017EAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EAC                            
00017EAC                            
00017EAC                            ObjHitWallLeft:
00017EAC D668 0008                  		add.w	obX(a0),d3
00017EB0 3428 000C                  		move.w	obY(a0),d2
00017EB4                            		; Engine bug: colliding with left walls is erratic with this function.
00017EB4                            		; The cause is this: a missing instruction to flip collision on the found
00017EB4                            		; 16x16 block; this one:
00017EB4                            		;eori.w	#$F,d3
00017EB4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EB8 18BC 0000                  		move.b	#0,(a4)
00017EBC 367C FFF0                  		movea.w	#-$10,a3
00017EC0 3C3C 0800                  		move.w	#$800,d6
00017EC4 7A0E                       		moveq	#$E,d5
00017EC6 6100 FA84                  		bsr.w	FindWall
00017ECA 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017ECE 0803 0000                  		btst	#0,d3
00017ED2 6700                       		beq.s	locret_15098
00017ED4 163C 0040                  		move.b	#$40,d3
00017ED8                            
00017ED8                            locret_15098:
00017ED8 4E75                       		rts	
00017EDA                            ; End of function ObjHitWallLeft
00017EDA                            
00017EDA                            ; ===========================================================================
00017EDA                            
00017EDA                            		include	"_incObj\66 Rotating Junction.asm"
00017EDA                            ; ---------------------------------------------------------------------------
00017EDA                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017EDA                            ; ---------------------------------------------------------------------------
00017EDA                            
00017EDA                            Junction:
00017EDA 7000                       		moveq	#0,d0
00017EDC 1028 0024                  		move.b	obRoutine(a0),d0
00017EE0 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017EE4 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017EE8                            ; ===========================================================================
00017EE8 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017EEA 0000                       		dc.w Jun_Action-Jun_Index
00017EEC 0000                       		dc.w Jun_Display-Jun_Index
00017EEE 0000                       		dc.w Jun_Release-Jun_Index
00017EF0                            
00017EF0 =00000034                  jun_frame:	equ $34		; current frame
00017EF0 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017EF0 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017EF0                            ; ===========================================================================
00017EF0                            
00017EF0                            Jun_Main:	; Routine 0
00017EF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00017EF4 323C 0001                  		move.w	#1,d1
00017EF8 2248                       		movea.l	a0,a1
00017EFA 6000                       		bra.s	@makeitem
00017EFC                            ; ===========================================================================
00017EFC                            
00017EFC                            	@repeat:
00017EFC 4EB9 0000 FBEC             		jsr	FindFreeObj
00017F02 6600                       		bne.s	@fail
00017F04 12BC 0066                  		move.b	#id_Junction,0(a1)
00017F08 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017F0C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017F12 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017F18 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017F1E 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017F24                            
00017F24                            @makeitem:
00017F24 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017F2C 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017F32 0029 0004 0001             		ori.b	#4,obRender(a1)
00017F38 137C 0038 0014             		move.b	#$38,obActWid(a1)
00017F3E                            
00017F3E                            	@fail:
00017F3E 51C9 FFBC                  		dbf	d1,@repeat
00017F42                            
00017F42 117C 0030 0014             		move.b	#$30,obActWid(a0)
00017F48 317C 0200 0018             		move.w	#$200,obPriority(a0)
00017F4E 317C 003C 0030             		move.w	#$3C,$30(a0)
00017F54 117C 0001 0034             		move.b	#1,jun_frame(a0)
00017F5A 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00017F60                            
00017F60                            Jun_Action:	; Routine 2
00017F60 6100 0000                  		bsr.w	Jun_ChkSwitch
00017F64 4A28 0001                  		tst.b	obRender(a0)
00017F68 6A00 0000                  		bpl.w	Jun_Display
00017F6C 323C 0030                  		move.w	#$30,d1
00017F70 3401                       		move.w	d1,d2
00017F72 3602                       		move.w	d2,d3
00017F74 5243                       		addq.w	#1,d3
00017F76 3828 0008                  		move.w	obX(a0),d4
00017F7A 6100 9BEE                  		bsr.w	SolidObject
00017F7E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00017F84 6700 0000                  		beq.w	Jun_Display	; if not, branch
00017F88                            
00017F88 43F8 D000                  		lea	(v_player).w,a1
00017F8C 720E                       		moveq	#$E,d1
00017F8E 3029 0008                  		move.w	obX(a1),d0
00017F92 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00017F96 6500                       		bcs.s	@isleft		; if yes, branch
00017F98 7207                       		moveq	#7,d1		
00017F9A                            
00017F9A                            	@isleft:
00017F9A B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00017F9E 6600                       		bne.s	Jun_Display	; if not, branch
00017FA0                            
00017FA0 1141 0032                  		move.b	d1,$32(a0)
00017FA4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00017FA8 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00017FAE 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00017FB4 337C 0800 0020             		move.w	#$800,obInertia(a1)
00017FBA 337C 0000 0010             		move.w	#0,obVelX(a1)
00017FC0 337C 0000 0012             		move.w	#0,obVelY(a1)
00017FC6 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017FCC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00017FD2 08E9 0001 0022             		bset	#1,obStatus(a1)
00017FD8 3429 0008                  		move.w	obX(a1),d2
00017FDC 3629 000C                  		move.w	obY(a1),d3
00017FE0 6100 0000                  		bsr.w	Jun_ChgPos
00017FE4 D569 0008                  		add.w	d2,obX(a1)
00017FE8 D769 000C                  		add.w	d3,obY(a1)
00017FEC E0E9 0008                  		asr	obX(a1)
00017FF0 E0E9 000C                  		asr	obY(a1)
00017FF4                            
00017FF4                            Jun_Display:	; Routine 4
00017FF4 6000 96DC                  		bra.w	RememberState
00017FF8                            ; ===========================================================================
00017FF8                            
00017FF8                            Jun_Release:	; Routine 6
00017FF8 1028 001A                  		move.b	obFrame(a0),d0
00017FFC 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018000 6700                       		beq.s	@release	; if yes, branch
00018002 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018006 6600                       		bne.s	@dontrelease	; if not, branch
00018008                            
00018008                            	@release:
00018008 B028 0032                  		cmp.b	$32(a0),d0
0001800C 6700                       		beq.s	@dontrelease
0001800E 43F8 D000                  		lea	(v_player).w,a1
00018012 337C 0000 0010             		move.w	#0,obVelX(a1)
00018018 337C 0800 0012             		move.w	#$800,obVelY(a1)
0001801E 0C00 0004                  		cmpi.b	#4,d0
00018022 6700                       		beq.s	@isdown
00018024 337C 0800 0010             		move.w	#$800,obVelX(a1)
0001802A 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018030                            
00018030                            	@isdown:
00018030 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018034 5928 0024                  		subq.b	#4,obRoutine(a0)
00018038                            
00018038                            	@dontrelease:
00018038 6100                       		bsr.s	Jun_ChkSwitch
0001803A 6100                       		bsr.s	Jun_ChgPos
0001803C 6000 9694                  		bra.w	RememberState
00018040                            
00018040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018040                            
00018040                            
00018040                            Jun_ChkSwitch:
00018040 45F8 F7E0                  		lea	(f_switch).w,a2
00018044 7000                       		moveq	#0,d0
00018046 1028 0038                  		move.b	jun_switch(a0),d0
0001804A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018050 6700                       		beq.s	@unpressed	; if not, branch
00018052                            
00018052 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018056 6600                       		bne.s	@animate	; if yes, branch
00018058 4428 0034                  		neg.b	jun_frame(a0)
0001805C 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018062 6000                       		bra.s	@animate
00018064                            ; ===========================================================================
00018064                            
00018064                            @unpressed:
00018064 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018068                            
00018068                            @animate:
00018068 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
0001806C 6A00                       		bpl.s	@nochange	; if time remains, branch
0001806E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018074 1228 0034                  		move.b	jun_frame(a0),d1
00018078 1028 001A                  		move.b	obFrame(a0),d0
0001807C D001                       		add.b	d1,d0
0001807E 0200 000F                  		andi.b	#$F,d0
00018082 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018086                            
00018086                            	@nochange:
00018086 4E75                       		rts	
00018088                            ; End of function Jun_ChkSwitch
00018088                            
00018088                            
00018088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018088                            
00018088                            
00018088                            Jun_ChgPos:
00018088 43F8 D000                  		lea	(v_player).w,a1
0001808C 7000                       		moveq	#0,d0
0001808E 1028 001A                  		move.b	obFrame(a0),d0
00018092 D040                       		add.w	d0,d0
00018094 45FB 0000                  		lea	@data(pc,d0.w),a2
00018098 101A                       		move.b	(a2)+,d0
0001809A 4880                       		ext.w	d0
0001809C D068 0008                  		add.w	obX(a0),d0
000180A0 3340 0008                  		move.w	d0,obX(a1)
000180A4 101A                       		move.b	(a2)+,d0
000180A6 4880                       		ext.w	d0
000180A8 D068 000C                  		add.w	obY(a0),d0
000180AC 3340 000C                  		move.w	d0,obY(a1)
000180B0 4E75                       		rts	
000180B2                            
000180B2                            
000180B2 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
000180B6 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
000180BA 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
000180BE 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
000180C2 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
000180C6 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
000180CA 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
000180CE E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000180CE E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000180D2                            Map_Jun:	include	"_maps\Rotating Junction.asm"
000180D2                            ; ---------------------------------------------------------------------------
000180D2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000180D2                            ; ---------------------------------------------------------------------------
000180D2                            Map_Jun_internal:
000180D2 0000                       		dc.w @gap0-Map_Jun_internal
000180D4 0000                       		dc.w @gap1-Map_Jun_internal
000180D6 0000                       		dc.w @gap2-Map_Jun_internal
000180D8 0000                       		dc.w @gap3-Map_Jun_internal
000180DA 0000                       		dc.w @gap4-Map_Jun_internal
000180DC 0000                       		dc.w @gap5-Map_Jun_internal
000180DE 0000                       		dc.w @gap6-Map_Jun_internal
000180E0 0000                       		dc.w @gap7-Map_Jun_internal
000180E2 0000                       		dc.w @gap8-Map_Jun_internal
000180E4 0000                       		dc.w @gap9-Map_Jun_internal
000180E6 0000                       		dc.w @gapA-Map_Jun_internal
000180E8 0000                       		dc.w @gapB-Map_Jun_internal
000180EA 0000                       		dc.w @gapC-Map_Jun_internal
000180EC 0000                       		dc.w @gapD-Map_Jun_internal
000180EE 0000                       		dc.w @gapE-Map_Jun_internal
000180F0 0000                       		dc.w @gapF-Map_Jun_internal
000180F2 0000                       		dc.w @circle-Map_Jun_internal
000180F4 06                         @gap0:		dc.b 6
000180F5 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000180FA 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000180FF E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018104 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018109 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001810E 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018113 06                         @gap1:		dc.b 6
00018114 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018119 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001811E F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018123 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018128 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001812D 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018132 06                         @gap2:		dc.b 6
00018133 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018138 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001813D 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018142 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018147 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001814C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018151 06                         @gap3:		dc.b 6
00018152 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018157 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001815C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018161 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018166 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001816B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018170 06                         @gap4:		dc.b 6
00018171 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018176 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001817B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018180 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018185 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001818A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001818F 06                         @gap5:		dc.b 6
00018190 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018195 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001819A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001819F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000181A4 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000181A9 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000181AE 06                         @gap6:		dc.b 6
000181AF 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000181B4 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000181B9 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000181BE 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000181C3 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000181C8 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000181CD 06                         @gap7:		dc.b 6
000181CE 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000181D3 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000181D8 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000181DD F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000181E2 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000181E7 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000181EC 06                         @gap8:		dc.b 6
000181ED E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000181F2 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000181F7 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000181FC E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018201 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018206 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001820B 06                         @gap9:		dc.b 6
0001820C D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018211 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018216 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001821B DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018220 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018225 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001822A 06                         @gapA:		dc.b 6
0001822B D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018230 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018235 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001823A D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001823F E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018244 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018249 06                         @gapB:		dc.b 6
0001824A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001824F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018254 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018259 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001825E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018263 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018268 06                         @gapC:		dc.b 6
00018269 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001826E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018273 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018278 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001827D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018282 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018287 06                         @gapD:		dc.b 6
00018288 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001828D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018292 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018297 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001829C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000182A1 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000182A6 06                         @gapE:		dc.b 6
000182A7 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000182AC D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000182B1 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000182B6 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000182BB E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000182C0 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000182C5 06                         @gapF:		dc.b 6
000182C6 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000182CB D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000182D0 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000182D5 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000182DA F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000182DF F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000182E4 0C                         @circle:	dc.b $C
000182E5 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000182EA D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000182EF E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000182F4 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000182F9 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000182FE E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018303 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018308 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001830D 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018312 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018317 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001831C 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018322 00                         		even
00018322 00                         		even
00018322                            		include	"_incObj\67 Running Disc.asm"
00018322                            ; ---------------------------------------------------------------------------
00018322                            ; Object 67 - disc that	you run	around (SBZ)
00018322                            ; ---------------------------------------------------------------------------
00018322                            
00018322                            RunningDisc:
00018322 7000                       		moveq	#0,d0
00018324 1028 0024                  		move.b	obRoutine(a0),d0
00018328 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
0001832C 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00018330                            ; ===========================================================================
00018330 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00018332 0000                       		dc.w Disc_Action-Disc_Index
00018334                            
00018334 =00000032                  disc_origX:	equ $32		; original x-axis position
00018334 =00000030                  disc_origY:	equ $30		; original y-axis position
00018334                            ; ===========================================================================
00018334                            
00018334                            Disc_Main:	; Routine 0
00018334 5428 0024                  		addq.b	#2,obRoutine(a0)
00018338 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00018340 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018346 117C 0004 0001             		move.b	#4,obRender(a0)
0001834C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018352 117C 0008 0014             		move.b	#8,obActWid(a0)
00018358 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001835E 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018364 117C 0018 0034             		move.b	#$18,$34(a0)
0001836A 117C 0048 0038             		move.b	#$48,$38(a0)
00018370 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018374 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018378 6700                       		beq.s	@typeis0	; branch if 0
0001837A 117C 0010 0034             		move.b	#$10,$34(a0)
00018380 117C 0038 0038             		move.b	#$38,$38(a0)
00018386                            
00018386                            	@typeis0:
00018386 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001838A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001838E 4881                       		ext.w	d1
00018390 E741                       		asl.w	#3,d1
00018392 3141 0036                  		move.w	d1,$36(a0)
00018396 1028 0022                  		move.b	obStatus(a0),d0
0001839A E418                       		ror.b	#2,d0
0001839C 0200 00C0                  		andi.b	#$C0,d0
000183A0 1140 0026                  		move.b	d0,obAngle(a0)
000183A4                            
000183A4                            Disc_Action:	; Routine 2
000183A4 6100 0000                  		bsr.w	Disc_MoveSonic
000183A8 6100 0000                  		bsr.w	Disc_MoveSpot
000183AC 6000 0000                  		bra.w	Disc_ChkDel
000183B0                            ; ===========================================================================
000183B0                            
000183B0                            Disc_MoveSonic:
000183B0 7400                       		moveq	#0,d2
000183B2 1428 0038                  		move.b	$38(a0),d2
000183B6 3602                       		move.w	d2,d3
000183B8 D643                       		add.w	d3,d3
000183BA 43F8 D000                  		lea	(v_player).w,a1
000183BE 3029 0008                  		move.w	obX(a1),d0
000183C2 9068 0032                  		sub.w	disc_origX(a0),d0
000183C6 D042                       		add.w	d2,d0
000183C8 B043                       		cmp.w	d3,d0
000183CA 6400                       		bcc.s	loc_155A8
000183CC 3229 000C                  		move.w	obY(a1),d1
000183D0 9268 0030                  		sub.w	disc_origY(a0),d1
000183D4 D242                       		add.w	d2,d1
000183D6 B243                       		cmp.w	d3,d1
000183D8 6400                       		bcc.s	loc_155A8
000183DA 0829 0001 0022             		btst	#1,obStatus(a1)
000183E0 6700                       		beq.s	loc_155B8
000183E2 4228 003A                  		clr.b	$3A(a0)
000183E6 4E75                       		rts	
000183E8                            ; ===========================================================================
000183E8                            
000183E8                            loc_155A8:
000183E8 4A28 003A                  		tst.b	$3A(a0)
000183EC 6700                       		beq.s	locret_155B6
000183EE 4229 0038                  		clr.b	$38(a1)
000183F2 4228 003A                  		clr.b	$3A(a0)
000183F6                            
000183F6                            locret_155B6:
000183F6 4E75                       		rts	
000183F8                            ; ===========================================================================
000183F8                            
000183F8                            loc_155B8:
000183F8 4A28 003A                  		tst.b	$3A(a0)
000183FC 6600                       		bne.s	loc_155E2
000183FE 117C 0001 003A             		move.b	#1,$3A(a0)
00018404 0829 0002 0022             		btst	#2,obStatus(a1)
0001840A 6600                       		bne.s	loc_155D0
0001840C 4229 001C                  		clr.b	obAnim(a1)
00018410                            
00018410                            loc_155D0:
00018410 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018416 137C 0001 001D             		move.b	#1,obNextAni(a1)
0001841C 137C 0001 0038             		move.b	#1,$38(a1)
00018422                            
00018422                            loc_155E2:
00018422 3029 0020                  		move.w	obInertia(a1),d0
00018426 4A68 0036                  		tst.w	$36(a0)
0001842A 6A00                       		bpl.s	loc_15608
0001842C 0C40 FC00                  		cmpi.w	#-$400,d0
00018430 6F00                       		ble.s	loc_155FA
00018432 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018438 4E75                       		rts	
0001843A                            ; ===========================================================================
0001843A                            
0001843A                            loc_155FA:
0001843A 0C40 F100                  		cmpi.w	#-$F00,d0
0001843E 6C00                       		bge.s	locret_15606
00018440 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018446                            
00018446                            locret_15606:
00018446 4E75                       		rts	
00018448                            ; ===========================================================================
00018448                            
00018448                            loc_15608:
00018448 0C40 0400                  		cmpi.w	#$400,d0
0001844C 6C00                       		bge.s	loc_15616
0001844E 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018454 4E75                       		rts	
00018456                            ; ===========================================================================
00018456                            
00018456                            loc_15616:
00018456 0C40 0F00                  		cmpi.w	#$F00,d0
0001845A 6F00                       		ble.s	locret_15622
0001845C 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018462                            
00018462                            locret_15622:
00018462 4E75                       		rts	
00018464                            ; ===========================================================================
00018464                            
00018464                            Disc_MoveSpot:
00018464 3028 0036                  		move.w	$36(a0),d0
00018468 D168 0026                  		add.w	d0,obAngle(a0)
0001846C 1028 0026                  		move.b	obAngle(a0),d0
00018470 4EB9 0000 3A32             		jsr	(CalcSine).l
00018476 3428 0030                  		move.w	disc_origY(a0),d2
0001847A 3628 0032                  		move.w	disc_origX(a0),d3
0001847E 7800                       		moveq	#0,d4
00018480 1828 0034                  		move.b	$34(a0),d4
00018484 E14C                       		lsl.w	#8,d4
00018486 2A04                       		move.l	d4,d5
00018488 C9C0                       		muls.w	d0,d4
0001848A 4844                       		swap	d4
0001848C CBC1                       		muls.w	d1,d5
0001848E 4845                       		swap	d5
00018490 D842                       		add.w	d2,d4
00018492 DA43                       		add.w	d3,d5
00018494 3144 000C                  		move.w	d4,obY(a0)
00018498 3145 0008                  		move.w	d5,obX(a0)
0001849C 4E75                       		rts	
0001849E                            ; ===========================================================================
0001849E                            
0001849E                            Disc_ChkDel:
000184BA 4EF9 0000 F760             		jmp	(DisplaySprite).l
000184C0                            
000184C0                            	@delete:
000184C0 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000184C0 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000184C6                            Map_Disc:	include	"_maps\Running Disc.asm"
000184C6                            ; ---------------------------------------------------------------------------
000184C6                            ; Sprite mappings - disc that you run around (SBZ)
000184C6                            ; (It's just a small blob that moves around in a circle. The disc itself is
000184C6                            ; part of the level tiles.)
000184C6                            ; ---------------------------------------------------------------------------
000184C6                            Map_Disc_internal:
000184C6 0000                       		dc.w @spot-Map_Disc_internal
000184C8 01                         @spot:		dc.b 1
000184C9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000184CE                            		even
000184CE                            		even
000184CE                            		include	"_incObj\68 Conveyor Belt.asm"
000184CE                            ; ---------------------------------------------------------------------------
000184CE                            ; Object 68 - conveyor belts (SBZ)
000184CE                            ; ---------------------------------------------------------------------------
000184CE                            
000184CE                            Conveyor:
000184CE 7000                       		moveq	#0,d0
000184D0 1028 0024                  		move.b	obRoutine(a0),d0
000184D4 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000184D8 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000184DC                            ; ===========================================================================
000184DC 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000184DE 0000                       		dc.w Conv_Action-Conv_Index
000184E0                            
000184E0 =00000036                  conv_speed:	equ $36
000184E0 =00000038                  conv_width:	equ $38
000184E0                            ; ===========================================================================
000184E0                            
000184E0                            Conv_Main:	; Routine 0
000184E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000184E4 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000184EA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000184EE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000184F2 6700                       		beq.s	@typeis0	; if zero, branch
000184F4 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000184FA                            
000184FA                            	@typeis0:
000184FA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000184FE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018502 4881                       		ext.w	d1
00018504 E841                       		asr.w	#4,d1
00018506 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
0001850A                            
0001850A                            Conv_Action:	; Routine 2
0001850A 6100                       		bsr.s	@movesonic
00018528 4E75                       		rts	
0001852A                            
0001852A                            	@delete:
0001852A 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00018530                            ; ===========================================================================
00018530                            
00018530                            @movesonic:
00018530 7400                       		moveq	#0,d2
00018532 1428 0038                  		move.b	conv_width(a0),d2
00018536 3602                       		move.w	d2,d3
00018538 D643                       		add.w	d3,d3
0001853A 43F8 D000                  		lea	(v_player).w,a1
0001853E 3029 0008                  		move.w	obX(a1),d0
00018542 9068 0008                  		sub.w	obX(a0),d0
00018546 D042                       		add.w	d2,d0
00018548 B043                       		cmp.w	d3,d0
0001854A 6400                       		bcc.s	@notonconveyor
0001854C 3229 000C                  		move.w	obY(a1),d1
00018550 9268 000C                  		sub.w	obY(a0),d1
00018554 0641 0030                  		addi.w	#$30,d1
00018558 0C41 0030                  		cmpi.w	#$30,d1
0001855C 6400                       		bcc.s	@notonconveyor
0001855E 0829 0001 0022             		btst	#1,obStatus(a1)
00018564 6600                       		bne.s	@notonconveyor
00018566 3028 0036                  		move.w	conv_speed(a0),d0
0001856A D169 0008                  		add.w	d0,obX(a1)
0001856E                            
0001856E                            	@notonconveyor:
0001856E 4E75                       		rts	
0001856E 4E75                       		rts	
00018570                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018570                            ; ---------------------------------------------------------------------------
00018570                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018570                            ; ---------------------------------------------------------------------------
00018570                            
00018570                            SpinPlatform:
00018570 7000                       		moveq	#0,d0
00018572 1028 0024                  		move.b	obRoutine(a0),d0
00018576 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
0001857A 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001857E                            ; ===========================================================================
0001857E 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018580 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018582 0000                       		dc.w Spin_Spinner-Spin_Index
00018584                            
00018584 =00000030                  spin_timer:	equ $30		; time counter until change
00018584 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018584                            ; ===========================================================================
00018584                            
00018584                            Spin_Main:	; Routine 0
00018584 5428 0024                  		addq.b	#2,obRoutine(a0)
00018588 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018590 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018596 0028 0004 0001             		ori.b	#4,obRender(a0)
0001859C 117C 0080 0014             		move.b	#$80,obActWid(a0)
000185A2 7000                       		moveq	#0,d0
000185A4 1028 0028                  		move.b	obSubtype(a0),d0
000185A8 0240 000F                  		andi.w	#$F,d0
000185AC C0FC 003C                  		mulu.w	#$3C,d0
000185B0 3140 0032                  		move.w	d0,spin_timelen(a0)
000185B4 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000185B8 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000185BA                            
000185BA 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000185BE 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000185C6 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000185CC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000185D2 117C 0002 001C             		move.b	#2,obAnim(a0)
000185D8 7000                       		moveq	#0,d0
000185DA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000185DE 3200                       		move.w	d0,d1
000185E0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000185E4 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000185E8 3140 0030                  		move.w	d0,spin_timer(a0)
000185EC 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000185F0 0241 0070                  		andi.w	#$70,d1
000185F4 0641 0010                  		addi.w	#$10,d1
000185F8 E549                       		lsl.w	#2,d1
000185FA 5341                       		subq.w	#1,d1
000185FC 3141 0036                  		move.w	d1,$36(a0)
00018600 6000                       		bra.s	Spin_Spinner
00018602                            ; ===========================================================================
00018602                            
00018602                            Spin_Trapdoor:	; Routine 2
00018602 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00018606 6A00                       		bpl.s	@animate	; if time remains, branch
00018608                            
00018608 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001860E 0868 0000 001C             		bchg	#0,obAnim(a0)
00018614 4A28 0001                  		tst.b	obRender(a0)
00018618 6A00                       		bpl.s	@animate
00018624                            
00018624                            	@animate:
00018624 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001862A 4EB9 0000 C848             		jsr	(AnimateSprite).l
00018630 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00018634 6600                       		bne.s	@notsolid	; if not, branch
00018636 323C 004B                  		move.w	#$4B,d1
0001863A 343C 000C                  		move.w	#$C,d2
0001863E 3602                       		move.w	d2,d3
00018640 5243                       		addq.w	#1,d3
00018642 3828 0008                  		move.w	obX(a0),d4
00018646 6100 9522                  		bsr.w	SolidObject
0001864A 6000 9086                  		bra.w	RememberState
0001864E                            ; ===========================================================================
0001864E                            
0001864E                            @notsolid:
0001864E 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018654 6700                       		beq.s	@display	; if not, branch
00018656 43F8 D000                  		lea	(v_player).w,a1
0001865A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018660 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018666 4228 0025                  		clr.b	obSolid(a0)
0001866A                            
0001866A                            	@display:
0001866A 6000 9066                  		bra.w	RememberState
0001866E                            ; ===========================================================================
0001866E                            
0001866E                            Spin_Spinner:	; Routine 4
0001866E 3038 FE04                  		move.w	(v_framecount).w,d0
00018672 C068 0036                  		and.w	$36(a0),d0
00018676 6600                       		bne.s	@delay
00018678 117C 0001 0034             		move.b	#1,$34(a0)
0001867E                            
0001867E                            	@delay:
0001867E 4A28 0034                  		tst.b	$34(a0)
00018682 6700                       		beq.s	@animate
00018684 5368 0030                  		subq.w	#1,spin_timer(a0)
00018688 6A00                       		bpl.s	@animate
0001868A 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018690 4228 0034                  		clr.b	$34(a0)
00018694 0868 0000 001C             		bchg	#0,obAnim(a0)
0001869A                            
0001869A                            	@animate:
0001869A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186A0 4EB9 0000 C848             		jsr	(AnimateSprite).l
000186A6 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000186AA 6600                       		bne.s	@notsolid2	; if not, branch
000186AC 323C 001B                  		move.w	#$1B,d1
000186B0 343C 0007                  		move.w	#7,d2
000186B4 3602                       		move.w	d2,d3
000186B6 5243                       		addq.w	#1,d3
000186B8 3828 0008                  		move.w	obX(a0),d4
000186BC 6100 94AC                  		bsr.w	SolidObject
000186C0 6000 9010                  		bra.w	RememberState
000186C4                            ; ===========================================================================
000186C4                            
000186C4                            @notsolid2:
000186C4 0828 0003 0022             		btst	#3,obStatus(a0)
000186CA 6700                       		beq.s	@display
000186CC 43F8 D000                  		lea	(v_player).w,a1
000186D0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000186D6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000186DC 4228 0025                  		clr.b	obSolid(a0)
000186E0                            
000186E0                            	@display:
000186E0 6000 8FF0                  		bra.w	RememberState
000186E0 6000 8FF0                  		bra.w	RememberState
000186E4                            		include	"_anim\SBZ Spinning Platforms.asm"
000186E4                            ; ---------------------------------------------------------------------------
000186E4                            ; Animation script - trapdoor (SBZ)
000186E4                            ; ---------------------------------------------------------------------------
000186E4 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000186E6 0000                       		dc.w @trapclose-Ani_Spin
000186E8 0000                       		dc.w @spin1-Ani_Spin
000186EA 0000                       		dc.w @spin2-Ani_Spin
000186EC 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000186F2 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000186F8 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001870C 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018720                            		even
00018720                            		even
00018720                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018720                            ; ---------------------------------------------------------------------------
00018720                            ; Sprite mappings - trapdoor (SBZ)
00018720                            ; ---------------------------------------------------------------------------
00018720                            Map_Trap_internal:
00018720 0000                       		dc.w @closed-Map_Trap_internal
00018722 0000                       		dc.w @half-Map_Trap_internal
00018724 0000                       		dc.w @open-Map_Trap_internal
00018726 04                         @closed:	dc.b 4
00018727 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001872C F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018731 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018736 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001873B 08                         @half:		dc.b 8
0001873C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018741 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018746 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001874B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018750 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018755 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001875A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001875F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018764 04                         @open:		dc.b 4
00018765 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001876A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001876F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018774 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001877A 00                         		even
0001877A 00                         		even
0001877A                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
0001877A                            ; ---------------------------------------------------------------------------
0001877A                            ; Sprite mappings - spinning platforms (SBZ)
0001877A                            ; ---------------------------------------------------------------------------
0001877A                            Map_Spin_internal:
0001877A 0000                       		dc.w @flat-Map_Spin_internal
0001877C 0000                       		dc.w @spin1-Map_Spin_internal
0001877E 0000                       		dc.w @spin2-Map_Spin_internal
00018780 0000                       		dc.w @spin3-Map_Spin_internal
00018782 0000                       		dc.w @spin4-Map_Spin_internal
00018784 02                         @flat:		dc.b 2
00018785 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001878A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001878F 02                         @spin1:		dc.b 2
00018790 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018795 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001879A 02                         @spin2:		dc.b 2
0001879B F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000187A0 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000187A5 02                         @spin3:		dc.b 2
000187A6 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000187AB 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000187B0 02                         @spin4:		dc.b 2
000187B1 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000187B6 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000187BC 00                         		even
000187BC 00                         		even
000187BC                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000187BC                            ; ---------------------------------------------------------------------------
000187BC                            ; Object 6A - ground saws and pizza cutters (SBZ)
000187BC                            ; ---------------------------------------------------------------------------
000187BC                            
000187BC                            Saws:
000187BC 7000                       		moveq	#0,d0
000187BE 1028 0024                  		move.b	obRoutine(a0),d0
000187C2 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000187C6 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000187CA                            ; ===========================================================================
000187CA 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000187CC 0000                       		dc.w Saw_Action-Saw_Index
000187CE                            
000187CE =0000003A                  saw_origX:	equ $3A		; original x-axis position
000187CE =00000038                  saw_origY:	equ $38		; original y-axis position
000187CE =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000187CE                            ; ===========================================================================
000187CE                            
000187CE                            Saw_Main:	; Routine 0
000187CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000187D2 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000187DA 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000187E0 117C 0004 0001             		move.b	#4,obRender(a0)
000187E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000187EC 117C 0020 0014             		move.b	#$20,obActWid(a0)
000187F2 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000187F8 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
000187FE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018804 6400                       		bcc.s	Saw_Action	; if yes, branch
00018806 117C 00A2 0020             		move.b	#$A2,obColType(a0)
0001880C                            
0001880C                            Saw_Action:	; Routine 2
0001880C 7000                       		moveq	#0,d0
0001880E 1028 0028                  		move.b	obSubtype(a0),d0
00018812 0240 0007                  		andi.w	#7,d0
00018816 D040                       		add.w	d0,d0
00018818 323B 0000                  		move.w	@index(pc,d0.w),d1
0001881C 4EBB 1000                  		jsr	@index(pc,d1.w)
0001883C 4EF9 0000 F760             		jmp	(DisplaySprite).l
00018842                            
00018842                            	@delete:
00018842 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00018848                            ; ===========================================================================
00018848 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001884E 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018852                            ; ===========================================================================
00018852                            
00018852                            @type00:
00018852 4E75                       		rts			; doesn't move
00018854                            ; ===========================================================================
00018854                            
00018854                            @type01:
00018854 323C 0060                  		move.w	#$60,d1
00018858 7000                       		moveq	#0,d0
0001885A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001885E 0828 0000 0022             		btst	#0,obStatus(a0)
00018864 6700                       		beq.s	@noflip01
00018866 4440                       		neg.w	d0
00018868 D041                       		add.w	d1,d0
0001886A                            
0001886A                            	@noflip01:
0001886A 3228 003A                  		move.w	saw_origX(a0),d1
0001886E 9240                       		sub.w	d0,d1
00018870 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018874                            
00018874 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018878 6A00                       		bpl.s	@sameframe01
0001887A 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018880 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018886                            
00018886                            	@sameframe01:
00018886 4A28 0001                  		tst.b	obRender(a0)
0001888A 6A00                       		bpl.s	@nosound01
0001888C 3038 FE04                  		move.w	(v_framecount).w,d0
00018890 0240 000F                  		andi.w	#$F,d0
00018894 6600                       		bne.s	@nosound01
000188A0                            
000188A0                            	@nosound01:
000188A0 4E75                       		rts	
000188A2                            ; ===========================================================================
000188A2                            
000188A2                            @type02:
000188A2 323C 0030                  		move.w	#$30,d1
000188A6 7000                       		moveq	#0,d0
000188A8 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000188AC 0828 0000 0022             		btst	#0,obStatus(a0)
000188B2 6700                       		beq.s	@noflip02
000188B4 4440                       		neg.w	d0
000188B6 0640 0080                  		addi.w	#$80,d0
000188BA                            
000188BA                            	@noflip02:
000188BA 3228 0038                  		move.w	saw_origY(a0),d1
000188BE 9240                       		sub.w	d0,d1
000188C0 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000188C4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000188C8 6A00                       		bpl.s	@sameframe02
000188CA 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000188D0 0868 0000 001A             		bchg	#0,obFrame(a0)
000188D6                            
000188D6                            	@sameframe02:
000188D6 4A28 0001                  		tst.b	obRender(a0)
000188DA 6A00                       		bpl.s	@nosound02
000188DC 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000188E0 0C00 0018                  		cmpi.b	#$18,d0
000188E4 6600                       		bne.s	@nosound02
000188F0                            
000188F0                            	@nosound02:
000188F0 4E75                       		rts	
000188F2                            ; ===========================================================================
000188F2                            
000188F2                            @type03:
000188F2 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
000188F6 6600                       		bne.s	@here03		; if yes, branch
000188F8                            
000188F8 3038 D008                  		move.w	(v_player+obX).w,d0
000188FC 0440 00C0                  		subi.w	#$C0,d0
00018900 6500                       		bcs.s	@nosaw03x
00018902 9068 0008                  		sub.w	obX(a0),d0
00018906 6500                       		bcs.s	@nosaw03x
00018908 3038 D00C                  		move.w	(v_player+obY).w,d0
0001890C 0440 0080                  		subi.w	#$80,d0
00018910 B068 000C                  		cmp.w	obY(a0),d0
00018914 6400                       		bcc.s	@nosaw03y
00018916 0640 0100                  		addi.w	#$100,d0
0001891A B068 000C                  		cmp.w	obY(a0),d0
0001891E 6500                       		bcs.s	@nosaw03y
00018920 117C 0001 003D             		move.b	#1,saw_here(a0)
00018926 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
0001892C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018932 117C 0002 001A             		move.b	#2,obFrame(a0)
00018942                            
00018942                            	@nosaw03x:
00018942 588F                       		addq.l	#4,sp
00018944                            
00018944                            	@nosaw03y:
00018944 4E75                       		rts	
00018946                            ; ===========================================================================
00018946                            
00018946                            @here03:
00018946 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001894C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018952 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018956 6A00                       		bpl.s	@sameframe03
00018958 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001895E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018964                            
00018964                            	@sameframe03:
00018964 4E75                       		rts	
00018966                            ; ===========================================================================
00018966                            
00018966                            @type04:
00018966 4A28 003D                  		tst.b	saw_here(a0)
0001896A 6600                       		bne.s	@here04
0001896C 3038 D008                  		move.w	(v_player+obX).w,d0
00018970 0640 00E0                  		addi.w	#$E0,d0
00018974 9068 0008                  		sub.w	obX(a0),d0
00018978 6400                       		bcc.s	@nosaw04x
0001897A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001897E 0440 0080                  		subi.w	#$80,d0
00018982 B068 000C                  		cmp.w	obY(a0),d0
00018986 6400                       		bcc.s	@nosaw04y
00018988 0640 0100                  		addi.w	#$100,d0
0001898C B068 000C                  		cmp.w	obY(a0),d0
00018990 6500                       		bcs.s	@nosaw04y
00018992 117C 0001 003D             		move.b	#1,saw_here(a0)
00018998 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
0001899E 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189A4 117C 0002 001A             		move.b	#2,obFrame(a0)
000189B4                            
000189B4                            	@nosaw04x:
000189B4 588F                       		addq.l	#4,sp
000189B6                            
000189B6                            	@nosaw04y:
000189B6 4E75                       		rts	
000189B8                            ; ===========================================================================
000189B8                            
000189B8                            @here04:
000189B8 4EB9 0000 F74C             		jsr	(SpeedToPos).l
000189BE 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000189C4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000189C8 6A00                       		bpl.s	@sameframe04
000189CA 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000189D0 0868 0000 001A             		bchg	#0,obFrame(a0)
000189D6                            
000189D6                            	@sameframe04:
000189D6 4E75                       		rts	
000189D6 4E75                       		rts	
000189D8                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
000189D8                            ; ---------------------------------------------------------------------------
000189D8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000189D8                            ; ---------------------------------------------------------------------------
000189D8                            Map_Saw_internal:
000189D8 0000                       		dc.w @pizzacutter1-Map_Saw_internal
000189DA 0000                       		dc.w @pizzacutter2-Map_Saw_internal
000189DC 0000                       		dc.w @groundsaw1-Map_Saw_internal
000189DE 0000                       		dc.w @groundsaw2-Map_Saw_internal
000189E0 07                         @pizzacutter1:	dc.b 7
000189E1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000189E6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000189EB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000189F0 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000189F5 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000189FA 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000189FF 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A04 07                         @pizzacutter2:	dc.b 7
00018A05 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018A0A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018A0F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018A14 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A19 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A1E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A23 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A28 04                         @groundsaw1:	dc.b 4
00018A29 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018A2E E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018A33 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018A38 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A3D 04                         @groundsaw2:	dc.b 4
00018A3E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A43 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A48 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A4D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A52                            		even
00018A52                            		even
00018A52                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018A52                            ; ---------------------------------------------------------------------------
00018A52                            ; Object 6B - stomper and sliding door (SBZ)
00018A52                            ; ---------------------------------------------------------------------------
00018A52                            
00018A52                            ScrapStomp:
00018A52 7000                       		moveq	#0,d0
00018A54 1028 0024                  		move.b	obRoutine(a0),d0
00018A58 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018A5C 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018A60                            ; ===========================================================================
00018A60 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018A62 0000                       		dc.w Sto_Action-Sto_Index
00018A64                            
00018A64 =00000016                  sto_height:	equ $16
00018A64 =00000034                  sto_origX:	equ $34		; original x-axis position
00018A64 =00000030                  sto_origY:	equ $30		; original y-axis position
00018A64 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018A64                            
00018A64 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018A68 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018A6C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018A70 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018A74 8040 0005                  		dc.b  $80, $40,	  0,   5
00018A78                            ; ===========================================================================
00018A78                            
00018A78                            Sto_Main:	; Routine 0
00018A78 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A7C 7000                       		moveq	#0,d0
00018A7E 1028 0028                  		move.b	obSubtype(a0),d0
00018A82 E448                       		lsr.w	#2,d0
00018A84 0240 001C                  		andi.w	#$1C,d0
00018A88 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018A8C 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018A90 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018A94 E448                       		lsr.w	#2,d0
00018A96 1140 001A                  		move.b	d0,obFrame(a0)
00018A9A 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018AA2 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018AA8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018AAE 6600                       		bne.s	@isSBZ12	; if not, branch
00018AB0 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018AB6 6700                       		beq.s	@isSBZ3
00018AB8                            
00018AB8                            @chkdel:
00018AB8 45F8 FC00                  		lea	(v_objstate).w,a2
00018ABC 7000                       		moveq	#0,d0
00018ABE 1028 0023                  		move.b	obRespawnNo(a0),d0
00018AC2 6700                       		beq.s	@delete
00018AC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018ACA                            
00018ACA                            	@delete:
00018ACA 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00018AD0                            ; ===========================================================================
00018AD0                            
00018AD0                            @isSBZ3:
00018AD0 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018AD6 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018ADC 6600                       		bne.s	@isSBZ12
00018ADE 45F8 FC00                  		lea	(v_objstate).w,a2
00018AE2 7000                       		moveq	#0,d0
00018AE4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018AE8 6700                       		beq.s	@isSBZ12
00018AEA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018AF0 6700                       		beq.s	@isSBZ12
00018AF2 4238 F7CB                  		clr.b	(v_obj6B).w
00018AF6 60C0                       		bra.s	@chkdel
00018AF8                            ; ===========================================================================
00018AF8                            
00018AF8                            @isSBZ12:
00018AF8 0028 0004 0001             		ori.b	#4,obRender(a0)
00018AFE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018B04 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018B0A 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018B10 7000                       		moveq	#0,d0
00018B12 101B                       		move.b	(a3)+,d0
00018B14 3140 003C                  		move.w	d0,$3C(a0)
00018B18 7000                       		moveq	#0,d0
00018B1A 1028 0028                  		move.b	obSubtype(a0),d0
00018B1E 6A00                       		bpl.s	Sto_Action
00018B20 0200 000F                  		andi.b	#$F,d0
00018B24 1140 003E                  		move.b	d0,$3E(a0)
00018B28 1153 0028                  		move.b	(a3),obSubtype(a0)
00018B2C 0C13 0005                  		cmpi.b	#5,(a3)
00018B30 6600                       		bne.s	@chkgone
00018B32 08E8 0004 0001             		bset	#4,obRender(a0)
00018B38                            
00018B38                            	@chkgone:
00018B38 45F8 FC00                  		lea	(v_objstate).w,a2
00018B3C 7000                       		moveq	#0,d0
00018B3E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B42 6700                       		beq.s	Sto_Action
00018B44 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B4A                            
00018B4A                            Sto_Action:	; Routine 2
00018B4A 3F28 0008                  		move.w	obX(a0),-(sp)
00018B4E 7000                       		moveq	#0,d0
00018B50 1028 0028                  		move.b	obSubtype(a0),d0
00018B54 0240 000F                  		andi.w	#$F,d0
00018B58 D040                       		add.w	d0,d0
00018B5A 323B 0000                  		move.w	@index(pc,d0.w),d1
00018B5E 4EBB 1000                  		jsr	@index(pc,d1.w)
00018B62 381F                       		move.w	(sp)+,d4
00018B64 4A28 0001                  		tst.b	obRender(a0)
00018B68 6A00                       		bpl.s	@chkdel
00018B6A 7200                       		moveq	#0,d1
00018B6C 1228 0014                  		move.b	obActWid(a0),d1
00018B70 0641 000B                  		addi.w	#$B,d1
00018B74 7400                       		moveq	#0,d2
00018B76 1428 0016                  		move.b	sto_height(a0),d2
00018B7A 3602                       		move.w	d2,d3
00018B7C 5243                       		addq.w	#1,d3
00018B7E 6100 8FEA                  		bsr.w	SolidObject
00018B82                            
00018B82                            	@chkdel:
00018B9E 4EF9 0000 F760             		jmp	(DisplaySprite).l
00018BA4                            
00018BA4                            	@chkgone:
00018BA4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018BAA 6600                       		bne.s	@delete
00018BAC 4238 F7CB                  		clr.b	(v_obj6B).w
00018BB0 45F8 FC00                  		lea	(v_objstate).w,a2
00018BB4 7000                       		moveq	#0,d0
00018BB6 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BBA 6700                       		beq.s	@delete
00018BBC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018BC2                            
00018BC2                            	@delete:
00018BC2 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00018BC8                            ; ===========================================================================
00018BC8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018BCC 0000 0000                  		dc.w @type02-@index, @type03-@index
00018BD0 0000 0000                  		dc.w @type04-@index, @type05-@index
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            @type00:
00018BD4 4E75                       		rts
00018BD6                            ; ===========================================================================
00018BD6                            
00018BD6                            @type01:
00018BD6 4A28 0038                  		tst.b	sto_active(a0)
00018BDA 6600                       		bne.s	@isactive01
00018BDC 45F8 F7E0                  		lea	(f_switch).w,a2
00018BE0 7000                       		moveq	#0,d0
00018BE2 1028 003E                  		move.b	$3E(a0),d0
00018BE6 0832 0000 0000             		btst	#0,(a2,d0.w)
00018BEC 6700                       		beq.s	@loc_15DC2
00018BEE 117C 0001 0038             		move.b	#1,sto_active(a0)
00018BF4                            
00018BF4                            	@isactive01:
00018BF4 3028 003C                  		move.w	$3C(a0),d0
00018BF8 B068 003A                  		cmp.w	$3A(a0),d0
00018BFC 6700                       		beq.s	@loc_15DE0
00018BFE 5468 003A                  		addq.w	#2,$3A(a0)
00018C02                            
00018C02                            	@loc_15DC2:
00018C02 3028 003A                  		move.w	$3A(a0),d0
00018C06 0828 0000 0022             		btst	#0,obStatus(a0)
00018C0C 6700                       		beq.s	@noflip01
00018C0E 4440                       		neg.w	d0
00018C10 0640 0080                  		addi.w	#$80,d0
00018C14                            
00018C14                            	@noflip01:
00018C14 3228 0034                  		move.w	sto_origX(a0),d1
00018C18 9240                       		sub.w	d0,d1
00018C1A 3141 0008                  		move.w	d1,obX(a0)
00018C1E 4E75                       		rts	
00018C20                            ; ===========================================================================
00018C20                            
00018C20                            @loc_15DE0:
00018C20 5228 0028                  		addq.b	#1,obSubtype(a0)
00018C24 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018C2A 4228 0038                  		clr.b	sto_active(a0)
00018C2E 45F8 FC00                  		lea	(v_objstate).w,a2
00018C32 7000                       		moveq	#0,d0
00018C34 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C38 67C8                       		beq.s	@loc_15DC2
00018C3A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018C40 60C0                       		bra.s	@loc_15DC2
00018C42                            ; ===========================================================================
00018C42                            
00018C42                            @type02:
00018C42 4A28 0038                  		tst.b	sto_active(a0)
00018C46 6600                       		bne.s	@isactive02
00018C48 5368 0036                  		subq.w	#1,$36(a0)
00018C4C 6600                       		bne.s	@loc_15E1E
00018C4E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018C54                            
00018C54                            	@isactive02:
00018C54 4A68 003A                  		tst.w	$3A(a0)
00018C58 6700                       		beq.s	@loc_15E3C
00018C5A 5568 003A                  		subq.w	#2,$3A(a0)
00018C5E                            
00018C5E                            	@loc_15E1E:
00018C5E 3028 003A                  		move.w	$3A(a0),d0
00018C62 0828 0000 0022             		btst	#0,obStatus(a0)
00018C68 6700                       		beq.s	@noflip02
00018C6A 4440                       		neg.w	d0
00018C6C 0640 0080                  		addi.w	#$80,d0
00018C70                            
00018C70                            	@noflip02:
00018C70 3228 0034                  		move.w	sto_origX(a0),d1
00018C74 9240                       		sub.w	d0,d1
00018C76 3141 0008                  		move.w	d1,obX(a0)
00018C7A 4E75                       		rts	
00018C7C                            ; ===========================================================================
00018C7C                            
00018C7C                            @loc_15E3C:
00018C7C 5328 0028                  		subq.b	#1,obSubtype(a0)
00018C80 4228 0038                  		clr.b	sto_active(a0)
00018C84 45F8 FC00                  		lea	(v_objstate).w,a2
00018C88 7000                       		moveq	#0,d0
00018C8A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C8E 67CE                       		beq.s	@loc_15E1E
00018C90 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018C96 60C6                       		bra.s	@loc_15E1E
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            @type03:
00018C98 4A28 0038                  		tst.b	sto_active(a0)
00018C9C 6600                       		bne.s	@isactive03
00018C9E 4A68 003A                  		tst.w	$3A(a0)
00018CA2 6700                       		beq.s	@loc_15E6A
00018CA4 5368 003A                  		subq.w	#1,$3A(a0)
00018CA8 6000                       		bra.s	@loc_15E8E
00018CAA                            ; ===========================================================================
00018CAA                            
00018CAA                            @loc_15E6A:
00018CAA 5368 0036                  		subq.w	#1,$36(a0)
00018CAE 6A00                       		bpl.s	@loc_15E8E
00018CB0 317C 003C 0036             		move.w	#$3C,$36(a0)
00018CB6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CBC                            
00018CBC                            @isactive03:
00018CBC 5068 003A                  		addq.w	#8,$3A(a0)
00018CC0 3028 003A                  		move.w	$3A(a0),d0
00018CC4 B068 003C                  		cmp.w	$3C(a0),d0
00018CC8 6600                       		bne.s	@loc_15E8E
00018CCA 4228 0038                  		clr.b	sto_active(a0)
00018CCE                            
00018CCE                            @loc_15E8E:
00018CCE 3028 003A                  		move.w	$3A(a0),d0
00018CD2 0828 0000 0022             		btst	#0,obStatus(a0)
00018CD8 6700                       		beq.s	@noflip03
00018CDA 4440                       		neg.w	d0
00018CDC 0640 0038                  		addi.w	#$38,d0
00018CE0                            
00018CE0                            	@noflip03:
00018CE0 3228 0030                  		move.w	sto_origY(a0),d1
00018CE4 D240                       		add.w	d0,d1
00018CE6 3141 000C                  		move.w	d1,obY(a0)
00018CEA 4E75                       		rts	
00018CEC                            ; ===========================================================================
00018CEC                            
00018CEC                            @type04:
00018CEC 4A28 0038                  		tst.b	sto_active(a0)
00018CF0 6600                       		bne.s	@isactive04
00018CF2 4A68 003A                  		tst.w	$3A(a0)
00018CF6 6700                       		beq.s	@loc_15EBE
00018CF8 5168 003A                  		subq.w	#8,$3A(a0)
00018CFC 6000                       		bra.s	@loc_15EF0
00018CFE                            ; ===========================================================================
00018CFE                            
00018CFE                            @loc_15EBE:
00018CFE 5368 0036                  		subq.w	#1,$36(a0)
00018D02 6A00                       		bpl.s	@loc_15EF0
00018D04 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D0A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D10                            
00018D10                            @isactive04:
00018D10 3028 003A                  		move.w	$3A(a0),d0
00018D14 B068 003C                  		cmp.w	$3C(a0),d0
00018D18 6700                       		beq.s	@loc_15EE0
00018D1A 5068 003A                  		addq.w	#8,$3A(a0)
00018D1E 6000                       		bra.s	@loc_15EF0
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            @loc_15EE0:
00018D20 5368 0036                  		subq.w	#1,$36(a0)
00018D24 6A00                       		bpl.s	@loc_15EF0
00018D26 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D2C 4228 0038                  		clr.b	sto_active(a0)
00018D30                            
00018D30                            @loc_15EF0:
00018D30 3028 003A                  		move.w	$3A(a0),d0
00018D34 0828 0000 0022             		btst	#0,obStatus(a0)
00018D3A 6700                       		beq.s	@noflip04
00018D3C 4440                       		neg.w	d0
00018D3E 0640 0038                  		addi.w	#$38,d0
00018D42                            
00018D42                            	@noflip04:
00018D42 3228 0030                  		move.w	sto_origY(a0),d1
00018D46 D240                       		add.w	d0,d1
00018D48 3141 000C                  		move.w	d1,obY(a0)
00018D4C 4E75                       		rts	
00018D4E                            ; ===========================================================================
00018D4E                            
00018D4E                            @type05:
00018D4E 4A28 0038                  		tst.b	sto_active(a0)
00018D52 6600                       		bne.s	@loc_15F3E
00018D54 45F8 F7E0                  		lea	(f_switch).w,a2
00018D58 7000                       		moveq	#0,d0
00018D5A 1028 003E                  		move.b	$3E(a0),d0
00018D5E 0832 0000 0000             		btst	#0,(a2,d0.w)
00018D64 6700                       		beq.s	@locret_15F5C
00018D66 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D6C 45F8 FC00                  		lea	(v_objstate).w,a2
00018D70 7000                       		moveq	#0,d0
00018D72 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D76 6700                       		beq.s	@loc_15F3E
00018D78 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D7E                            
00018D7E                            @loc_15F3E:
00018D7E 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018D86 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018D8E 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018D94 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018D9A 6700                       		beq.s	@loc_15F5E
00018D9C                            
00018D9C                            @locret_15F5C:
00018D9C 4E75                       		rts	
00018D9E                            ; ===========================================================================
00018D9E                            
00018D9E                            @loc_15F5E:
00018D9E 4228 0028                  		clr.b	obSubtype(a0)
00018DA2 4228 0038                  		clr.b	sto_active(a0)
00018DA6 4E75                       		rts	
00018DA6 4E75                       		rts	
00018DA8                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018DA8                            ; ---------------------------------------------------------------------------
00018DA8                            ; Sprite mappings - stomper and	platforms (SBZ)
00018DA8                            ; ---------------------------------------------------------------------------
00018DA8                            Map_Stomp_internal:
00018DA8 0000                       		dc.w @door-Map_Stomp_internal
00018DAA 0000                       		dc.w @stomper-Map_Stomp_internal
00018DAC 0000                       		dc.w @stomper-Map_Stomp_internal
00018DAE 0000                       		dc.w @stomper-Map_Stomp_internal
00018DB0 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018DB2 04                         @door:		dc.b 4
00018DB3 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018DB8 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018DBD F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018DC2 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018DC7 08                         @stomper:	dc.b 8
00018DC8 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018DCD E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018DD2 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018DD7 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018DDC 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018DE1 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018DE6 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018DEB 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018DF0 0E                         @bigdoor:	dc.b $E
00018DF1 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018DF6 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018DFB C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018E00 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018E05 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018E0A C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018E0F C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018E14 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018E19 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018E1E E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018E23 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018E28 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018E2D 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018E32 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018E38 00                         		even
00018E38 00                         		even
00018E38                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018E38                            ; ---------------------------------------------------------------------------
00018E38                            ; Object 6C - vanishing	platforms (SBZ)
00018E38                            ; ---------------------------------------------------------------------------
00018E38                            
00018E38                            VanishPlatform:
00018E38 7000                       		moveq	#0,d0
00018E3A 1028 0024                  		move.b	obRoutine(a0),d0
00018E3E 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018E42 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018E46                            ; ===========================================================================
00018E46 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018E48 0000                       		dc.w VanP_Vanish-VanP_Index
00018E4A 0000                       		dc.w VanP_Appear-VanP_Index
00018E4C 0000                       		dc.w loc_16068-VanP_Index
00018E4E                            
00018E4E =00000030                  vanp_timer:	equ $30		; counter for time until event
00018E4E =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            VanP_Main:	; Routine 0
00018E4E 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018E52 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018E5A 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00018E60 0028 0004 0001             		ori.b	#4,obRender(a0)
00018E66 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018E6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018E72 7000                       		moveq	#0,d0
00018E74 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018E78 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018E7C 5240                       		addq.w	#1,d0		; add 1
00018E7E EF48                       		lsl.w	#7,d0		; multiply by $80
00018E80 3200                       		move.w	d0,d1
00018E82 5340                       		subq.w	#1,d0
00018E84 3140 0030                  		move.w	d0,vanp_timer(a0)
00018E88 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018E8C 7000                       		moveq	#0,d0
00018E8E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018E92 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018E96 0641 0080                  		addi.w	#$80,d1
00018E9A C0C1                       		mulu.w	d1,d0
00018E9C E088                       		lsr.l	#8,d0
00018E9E 3140 0036                  		move.w	d0,$36(a0)
00018EA2 5341                       		subq.w	#1,d1
00018EA4 3141 0038                  		move.w	d1,$38(a0)
00018EA8                            
00018EA8                            loc_16068:	; Routine 6
00018EA8 3038 FE04                  		move.w	(v_framecount).w,d0
00018EAC 9068 0036                  		sub.w	$36(a0),d0
00018EB0 C068 0038                  		and.w	$38(a0),d0
00018EB4 6600                       		bne.s	@animate
00018EB6 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018EBA 6000                       		bra.s	VanP_Vanish
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            @animate:
00018EBC 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018EC2 4EB9 0000 C848             		jsr	(AnimateSprite).l
00018EC8 6000 8808                  		bra.w	RememberState
00018ECC                            ; ===========================================================================
00018ECC                            
00018ECC                            VanP_Vanish:	; Routine 2
00018ECC                            VanP_Appear:	; Routine 4
00018ECC 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018ED0 6A00                       		bpl.s	@wait
00018ED2 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018ED8 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018EDC 6700                       		beq.s	@isvanishing	; if yes, branch
00018EDE 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018EE4                            
00018EE4                            	@isvanishing:
00018EE4 0868 0000 001C             		bchg	#0,obAnim(a0)
00018EEA                            
00018EEA                            	@wait:
00018EEA 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018EF0 4EB9 0000 C848             		jsr	(AnimateSprite).l
00018EF6 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018EFC 6600                       		bne.s	@notsolid	; if yes, branch
00018EFE 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018F04 6600                       		bne.s	@loc_160D6
00018F06 7200                       		moveq	#0,d1
00018F08 1228 0014                  		move.b	obActWid(a0),d1
00018F0C 4EB9 0000 8FE6             		jsr	(PlatformObject).l
00018F12 6000 87BE                  		bra.w	RememberState
00018F16                            ; ===========================================================================
00018F16                            
00018F16                            @loc_160D6:
00018F16 7200                       		moveq	#0,d1
00018F18 1228 0014                  		move.b	obActWid(a0),d1
00018F1C 4EB9 0000 915A             		jsr	(ExitPlatform).l
00018F22 3428 0008                  		move.w	obX(a0),d2
00018F26 4EB9 0000 96C4             		jsr	(MvSonicOnPtfm2).l
00018F2C 6000 87A4                  		bra.w	RememberState
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            @notsolid:
00018F30 0828 0003 0022             		btst	#3,obStatus(a0)
00018F36 6700                       		beq.s	@display
00018F38 43F8 D000                  		lea	(v_player).w,a1
00018F3C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018F42 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018F48 117C 0002 0024             		move.b	#2,obRoutine(a0)
00018F4E 4228 0025                  		clr.b	obSolid(a0)
00018F52                            
00018F52                            	@display:
00018F52 6000 877E                  		bra.w	RememberState
00018F52 6000 877E                  		bra.w	RememberState
00018F56                            		include	"_anim\SBZ Vanishing Platforms.asm"
00018F56                            ; ---------------------------------------------------------------------------
00018F56                            ; Animation script - vanishing platforms (SBZ)
00018F56                            ; ---------------------------------------------------------------------------
00018F56 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00018F58 0000                       		dc.w @appear-Ani_Van
00018F5A 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00018F62 00                         		even
00018F62 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00018F6A 00                         		even
00018F6A 00                         		even
00018F6A                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00018F6A                            ; ---------------------------------------------------------------------------
00018F6A                            ; Sprite mappings - vanishing platforms	(SBZ)
00018F6A                            ; ---------------------------------------------------------------------------
00018F6A                            Map_VanP_internal:
00018F6A 0000                       		dc.w @whole-Map_VanP_internal
00018F6C 0000                       		dc.w @half-Map_VanP_internal
00018F6E 0000                       		dc.w @quarter-Map_VanP_internal
00018F70 0000                       		dc.w @gone-Map_VanP_internal
00018F72 01                         @whole:		dc.b 1
00018F73 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018F78 01                         @half:		dc.b 1
00018F79 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018F7E 01                         @quarter:	dc.b 1
00018F7F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00018F84 00                         @gone:		dc.b 0
00018F86 00                         		even
00018F86 00                         		even
00018F86                            		include	"_incObj\6E Electrocuter.asm"
00018F86                            ; ---------------------------------------------------------------------------
00018F86                            ; Object 6E - electrocution orbs (SBZ)
00018F86                            ; ---------------------------------------------------------------------------
00018F86                            
00018F86                            Electro:
00018F86 7000                       		moveq	#0,d0
00018F88 1028 0024                  		move.b	obRoutine(a0),d0
00018F8C 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00018F90 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00018F94                            ; ===========================================================================
00018F94 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00018F96 0000                       		dc.w Elec_Shock-Elec_Index
00018F98                            
00018F98 =00000034                  elec_freq:	equ $34		; frequency
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            Elec_Main:	; Routine 0
00018F98 5428 0024                  		addq.b	#2,obRoutine(a0)
00018F9C 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00018FA4 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00018FAA 0028 0004 0001             		ori.b	#4,obRender(a0)
00018FB0 117C 0028 0014             		move.b	#$28,obActWid(a0)
00018FB6 7000                       		moveq	#0,d0
00018FB8 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00018FBC E948                       		lsl.w	#4,d0		; multiply by $10
00018FBE 5340                       		subq.w	#1,d0
00018FC0 3140 0034                  		move.w	d0,elec_freq(a0)
00018FC4                            
00018FC4                            Elec_Shock:	; Routine 2
00018FC4 3038 FE04                  		move.w	(v_framecount).w,d0
00018FC8 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00018FCC 6600                       		bne.s	@animate	; if not, branch
00018FCE                            
00018FCE 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00018FD4 4A28 0001                  		tst.b	obRender(a0)
00018FD8 6A00                       		bpl.s	@animate
00018FE4                            
00018FE4                            	@animate:
00018FE4 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00018FEA 4EB9 0000 C848             		jsr	(AnimateSprite).l
00018FF0 117C 0000 0020             		move.b	#0,obColType(a0)
00018FF6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00018FFC 6600                       		bne.s	@display	; if not, branch
00018FFE 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019004                            
00019004                            	@display:
00019004 6000 86CC                  		bra.w	RememberState
00019004 6000 86CC                  		bra.w	RememberState
00019008                            		include	"_anim\Electrocuter.asm"
00019008                            ; ---------------------------------------------------------------------------
00019008                            ; Animation script - electrocution orbs (SBZ)
00019008                            ; ---------------------------------------------------------------------------
00019008 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
0001900A 0000                       		dc.w byte_161D0-Ani_Elec
0001900C 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019010 00                         		even
00019010 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019020                            		even
00019020                            		even
00019020                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019020                            ; --------------------------------------------------------------------------------
00019020                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019020                            ; --------------------------------------------------------------------------------
00019020                            
00019020                            SME_XNaLt:	
00019020 0000 0000                  		dc.w SME_XNaLt_C-SME_XNaLt, SME_XNaLt_17-SME_XNaLt	
00019024 0000 0000                  		dc.w SME_XNaLt_27-SME_XNaLt, SME_XNaLt_41-SME_XNaLt	
00019028 0000 0000                  		dc.w SME_XNaLt_56-SME_XNaLt, SME_XNaLt_75-SME_XNaLt	
0001902C 02                         SME_XNaLt_C:	dc.b 2	
0001902D F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019032 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019037 03                         SME_XNaLt_17:	dc.b 3	
00019038 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0001903D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8	
00019042 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019047 05                         SME_XNaLt_27:	dc.b 5	
00019048 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0001904D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8	
00019052 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019057 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8	
0001905C F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC	
00019061 04                         SME_XNaLt_41:	dc.b 4	
00019062 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019067 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
0001906C F60D 000C 08               		dc.b $F6, $D, 0, $C, 8	
00019071 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC	
00019076 06                         SME_XNaLt_56:	dc.b 6	
00019077 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0001907C 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019081 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8	
00019086 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC	
0001908B F60D 000C 24               		dc.b $F6, $D, 0, $C, $24	
00019090 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0	
00019095 04                         SME_XNaLt_75:	dc.b 4	
00019096 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001909B 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
000190A0 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24	
000190A5 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0	
000190AA                            		even
000190AA                            		even
000190AA                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
000190AA                            ; ---------------------------------------------------------------------------
000190AA                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000190AA                            ; ---------------------------------------------------------------------------
000190AA                            
000190AA                            SpinConvey:
000190AA 7000                       		moveq	#0,d0
000190AC 1028 0024                  		move.b	obRoutine(a0),d0
000190B0 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
000190B4 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
000190D4                            
000190D4                            SpinC_Display:
000190D4 4EF9 0000 F760             		jmp	(DisplaySprite).l
000190DA                            ; ===========================================================================
000190DA                            
000190DA                            loc_1629A:
000190DA 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000190E0 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000190E2 0C40 FF80                  		cmpi.w	#-$80,d0
000190E6 64EC                       		bcc.s	SpinC_Display
000190E8                            
000190E8                            SpinC_Act1or2:
000190E8 1028 002F                  		move.b	$2F(a0),d0
000190EC 6A00                       		bpl.s	SpinC_Delete
000190EE 0240 007F                  		andi.w	#$7F,d0
000190F2 45F8 F7C1                  		lea	(v_obj63).w,a2
000190F6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000190FC                            
000190FC                            SpinC_Delete:
000190FC 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00019102                            ; ===========================================================================
00019102 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019104 0000                       		dc.w loc_163D8-SpinC_Index
00019106                            ; ===========================================================================
00019106                            
00019106                            SpinC_Main:	; Routine 0
00019106 1028 0028                  		move.b	obSubtype(a0),d0
0001910A 6B00 0000                  		bmi.w	loc_16380
0001910E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019112 217C 0001 877A 0004        		move.l	#Map_Spin,obMap(a0)
0001911A 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019120 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019126 0028 0004 0001             		ori.b	#4,obRender(a0)
0001912C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019132 7000                       		moveq	#0,d0
00019134 1028 0028                  		move.b	obSubtype(a0),d0
00019138 3200                       		move.w	d0,d1
0001913A E648                       		lsr.w	#3,d0
0001913C 0240 001E                  		andi.w	#$1E,d0
00019140 45FA 0000                  		lea	off_164A6(pc),a2
00019144 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019148 315A 0038                  		move.w	(a2)+,$38(a0)
0001914C 315A 0030                  		move.w	(a2)+,$30(a0)
00019150 214A 003C                  		move.l	a2,$3C(a0)
00019154 0241 000F                  		andi.w	#$F,d1
00019158 E549                       		lsl.w	#2,d1
0001915A 1141 0038                  		move.b	d1,$38(a0)
0001915E 117C 0004 003A             		move.b	#4,$3A(a0)
00019164 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019168 6700                       		beq.s	loc_16356
0001916A 117C 0001 003B             		move.b	#1,$3B(a0)
00019170 4428 003A                  		neg.b	$3A(a0)
00019174 7200                       		moveq	#0,d1
00019176 1228 0038                  		move.b	$38(a0),d1
0001917A D228 003A                  		add.b	$3A(a0),d1
0001917E B228 0039                  		cmp.b	$39(a0),d1
00019182 6500                       		bcs.s	loc_16352
00019184 1001                       		move.b	d1,d0
00019186 7200                       		moveq	#0,d1
00019188 4A00                       		tst.b	d0
0001918A 6A00                       		bpl.s	loc_16352
0001918C 1228 0039                  		move.b	$39(a0),d1
00019190 5901                       		subq.b	#4,d1
00019192                            
00019192                            loc_16352:
00019192 1141 0038                  		move.b	d1,$38(a0)
00019196                            
00019196                            loc_16356:
00019196 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001919C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000191A2 4A41                       		tst.w	d1
000191A4 6600                       		bne.s	loc_1636C
000191A6 117C 0001 001C             		move.b	#1,obAnim(a0)
000191AC                            
000191AC                            loc_1636C:
000191AC 0C41 0008                  		cmpi.w	#8,d1
000191B0 6600                       		bne.s	loc_16378
000191B2 117C 0000 001C             		move.b	#0,obAnim(a0)
000191B8                            
000191B8                            loc_16378:
000191B8 6100 B590                  		bsr.w	LCon_ChangeDir
000191BC 6000 0000                  		bra.w	loc_163D8
000191C0                            ; ===========================================================================
000191C0                            
000191C0                            loc_16380:
000191C0 1140 002F                  		move.b	d0,$2F(a0)
000191C4 0240 007F                  		andi.w	#$7F,d0
000191C8 45F8 F7C1                  		lea	(v_obj63).w,a2
000191CC 08F2 0000 0000             		bset	#0,(a2,d0.w)
000191D2 6700                       		beq.s	loc_1639A
000191D4 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000191DA                            ; ===========================================================================
000191DA                            
000191DA                            loc_1639A:
000191DA D040                       		add.w	d0,d0
000191DC 0240 001E                  		andi.w	#$1E,d0
000191E0 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000191E4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000191EA D4F2 0000                  		adda.w	(a2,d0.w),a2
000191EE 321A                       		move.w	(a2)+,d1
000191F0 2248                       		movea.l	a0,a1
000191F2 6000                       		bra.s	SpinC_LoadPform
000191F4                            ; ===========================================================================
000191F4                            
000191F4                            SpinC_Loop:
000191F4 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
000191FA 6600                       		bne.s	loc_163D0
000191FC                            
000191FC                            SpinC_LoadPform:
000191FC 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019200 335A 0008                  		move.w	(a2)+,obX(a1)
00019204 335A 000C                  		move.w	(a2)+,obY(a1)
00019208 301A                       		move.w	(a2)+,d0
0001920A 1340 0028                  		move.b	d0,obSubtype(a1)
0001920E                            
0001920E                            loc_163D0:
0001920E 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019212                            
00019212 588F                       		addq.l	#4,sp
00019214 4E75                       		rts	
00019216                            ; ===========================================================================
00019216                            
00019216                            loc_163D8:	; Routine 2
00019216 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
0001921C 4EB9 0000 C848             		jsr	(AnimateSprite).l
00019222 4A28 001A                  		tst.b	obFrame(a0)
00019226 6600                       		bne.s	loc_16404
00019228 3F28 0008                  		move.w	obX(a0),-(sp)
0001922C 6100 0000                  		bsr.w	loc_16424
00019230 323C 001B                  		move.w	#$1B,d1
00019234 343C 0007                  		move.w	#7,d2
00019238 3602                       		move.w	d2,d3
0001923A 5243                       		addq.w	#1,d3
0001923C 381F                       		move.w	(sp)+,d4
0001923E 6000 892A                  		bra.w	SolidObject
00019242                            ; ===========================================================================
00019242                            
00019242                            loc_16404:
00019242 0828 0003 0022             		btst	#3,obStatus(a0)
00019248 6700                       		beq.s	loc_16420
0001924A 43F8 D000                  		lea	(v_objspace).w,a1
0001924E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019254 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001925A 4228 0025                  		clr.b	obSolid(a0)
0001925E                            
0001925E                            loc_16420:
0001925E 6000 0000                  		bra.w	loc_16424
00019262                            
00019262                            loc_16424:
00019262 3028 0008                  		move.w	obX(a0),d0
00019266 B068 0034                  		cmp.w	$34(a0),d0
0001926A 6600                       		bne.s	loc_16484
0001926C 3028 000C                  		move.w	obY(a0),d0
00019270 B068 0036                  		cmp.w	$36(a0),d0
00019274 6600                       		bne.s	loc_16484
00019276 7200                       		moveq	#0,d1
00019278 1228 0038                  		move.b	$38(a0),d1
0001927C D228 003A                  		add.b	$3A(a0),d1
00019280 B228 0039                  		cmp.b	$39(a0),d1
00019284 6500                       		bcs.s	loc_16456
00019286 1001                       		move.b	d1,d0
00019288 7200                       		moveq	#0,d1
0001928A 4A00                       		tst.b	d0
0001928C 6A00                       		bpl.s	loc_16456
0001928E 1228 0039                  		move.b	$39(a0),d1
00019292 5901                       		subq.b	#4,d1
00019294                            
00019294                            loc_16456:
00019294 1141 0038                  		move.b	d1,$38(a0)
00019298 2268 003C                  		movea.l	$3C(a0),a1
0001929C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000192A2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000192A8 4A41                       		tst.w	d1
000192AA 6600                       		bne.s	loc_16474
000192AC 117C 0001 001C             		move.b	#1,obAnim(a0)
000192B2                            
000192B2                            loc_16474:
000192B2 0C41 0008                  		cmpi.w	#8,d1
000192B6 6600                       		bne.s	loc_16480
000192B8 117C 0000 001C             		move.b	#0,obAnim(a0)
000192BE                            
000192BE                            loc_16480:
000192BE 6100 B48A                  		bsr.w	LCon_ChangeDir
000192C2                            
000192C2                            loc_16484:
000192C2 4EF9 0000 F74C             		jmp	(SpeedToPos).l
000192C2 4EF9 0000 F74C             		jmp	(SpeedToPos).l
000192C8                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
000192C8                            ; ---------------------------------------------------------------------------
000192C8                            ; Animation script - platform on conveyor belt (SBZ)
000192C8                            ; ---------------------------------------------------------------------------
000192C8 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
000192CA 0000                       		dc.w @still-Ani_SpinConvey
000192CC 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000192D9 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000192E0 00                         		even
000192E0 0F00 FF                    @still:		dc.b $F, 0, afEnd
000192E4 00                         		even
000192E4 00                         		even
000192E4                            
000192E4 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000192EA 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000192F0 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00019304 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019318 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001932C 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019340 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019354 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019368                            ; ===========================================================================
00019368                            
00019368                            		include	"_incObj\70 Girder Block.asm"
00019368                            ; ---------------------------------------------------------------------------
00019368                            ; Object 70 - large girder block (SBZ)
00019368                            ; ---------------------------------------------------------------------------
00019368                            
00019368                            Girder:
00019368 7000                       		moveq	#0,d0
0001936A 1028 0024                  		move.b	obRoutine(a0),d0
0001936E 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019372 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019376                            ; ===========================================================================
00019376 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019378 0000                       		dc.w Gird_Action-Gird_Index
0001937A                            
0001937A =00000016                  gird_height:	equ $16
0001937A =00000032                  gird_origX:	equ $32		; original x-axis position
0001937A =00000030                  gird_origY:	equ $30		; original y-axis position
0001937A =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001937A =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001937A =0000003A                  gird_delay:	equ $3A		; delay for movement
0001937A                            ; ===========================================================================
0001937A                            
0001937A                            Gird_Main:	; Routine 0
0001937A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001937E 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019386 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001938C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019392 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019398 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001939E 117C 0018 0016             		move.b	#$18,gird_height(a0)
000193A4 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
000193AA 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
000193B0 6100 0000                  		bsr.w	Gird_ChgMove
000193B4                            
000193B4                            Gird_Action:	; Routine 2
000193B4 3F28 0008                  		move.w	obX(a0),-(sp)
000193B8 4A68 003A                  		tst.w	gird_delay(a0)
000193BC 6700                       		beq.s	@beginmove
000193BE 5368 003A                  		subq.w	#1,gird_delay(a0)
000193C2 6600                       		bne.s	@solid
000193C4                            
000193C4                            	@beginmove:
000193C4 4EB9 0000 F74C             		jsr	(SpeedToPos).l
000193CA 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
000193CE 6600                       		bne.s	@solid		; if time remains, branch
000193D0 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
000193D4                            
000193D4                            	@solid:
000193D4 381F                       		move.w	(sp)+,d4
000193D6 4A28 0001                  		tst.b	obRender(a0)
000193DA 6A00                       		bpl.s	@chkdel
000193DC 7200                       		moveq	#0,d1
000193DE 1228 0014                  		move.b	obActWid(a0),d1
000193E2 0641 000B                  		addi.w	#$B,d1
000193E6 7400                       		moveq	#0,d2
000193E8 1428 0016                  		move.b	gird_height(a0),d2
000193EC 3602                       		move.w	d2,d3
000193EE 5243                       		addq.w	#1,d3
000193F0 6100 8778                  		bsr.w	SolidObject
000193F4                            
000193F4                            	@chkdel:
00019410 4EF9 0000 F760             		jmp	(DisplaySprite).l
00019416                            
00019416                            	@delete:
00019416 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            Gird_ChgMove:
0001941C 1028 0038                  		move.b	gird_set(a0),d0
00019420 0240 0018                  		andi.w	#$18,d0
00019424 43F9 0000 0000             		lea	(@settings).l,a1
0001942A 43F1 0000                  		lea	(a1,d0.w),a1
0001942E 3159 0010                  		move.w	(a1)+,obVelX(a0)
00019432 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019436 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001943A 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001943E 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019444 4E75                       		rts	
00019446                            ; ===========================================================================
00019446                            @settings:	;   x-speed, y-speed, duration
00019446 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001944E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019456 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001945E 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001945E 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019466                            Map_Gird:	include	"_maps\Girder Block.asm"
00019466                            ; ---------------------------------------------------------------------------
00019466                            ; Sprite mappings - large girder block (SBZ)
00019466                            ; ---------------------------------------------------------------------------
00019466                            Map_Gird_internal:
00019466 0000                       		dc.w @girder-Map_Gird_internal
00019468 0C                         @girder:	dc.b $C
00019469 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001946E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019473 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019478 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001947D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019482 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019487 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001948C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019491 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019496 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001949B E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000194A0 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000194A6 00                         		even
000194A6 00                         		even
000194A6                            		include	"_incObj\72 Teleporter.asm"
000194A6                            ; ---------------------------------------------------------------------------
000194A6                            ; Object 72 - teleporter (SBZ)
000194A6                            ; ---------------------------------------------------------------------------
000194A6                            
000194A6                            Teleport:
000194A6 7000                       		moveq	#0,d0
000194A8 1028 0024                  		move.b	obRoutine(a0),d0
000194AC 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
000194B0 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
000194D0 4E75                       		rts	
000194D2                            
000194D2                            	@delete:
000194D2 4EF9 0000 F7A0             		jmp	(DeleteObject).l
000194D8                            ; ===========================================================================
000194D8 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
000194DA 0000                       		dc.w loc_166C8-Tele_Index
000194DC 0000                       		dc.w loc_1675E-Tele_Index
000194DE 0000                       		dc.w loc_16798-Tele_Index
000194E0                            ; ===========================================================================
000194E0                            
000194E0                            Tele_Main:	; Routine 0
000194E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000194E4 1028 0028                  		move.b	obSubtype(a0),d0
000194E8 D040                       		add.w	d0,d0
000194EA 0240 001E                  		andi.w	#$1E,d0
000194EE 45FA 0000                  		lea	Tele_Data(pc),a2
000194F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000194F6 315A 003A                  		move.w	(a2)+,$3A(a0)
000194FA 214A 003C                  		move.l	a2,$3C(a0)
000194FE 315A 0036                  		move.w	(a2)+,$36(a0)
00019502 315A 0038                  		move.w	(a2)+,$38(a0)
00019506                            
00019506                            loc_166C8:	; Routine 2
00019506 43F8 D000                  		lea	(v_player).w,a1
0001950A 3029 0008                  		move.w	obX(a1),d0
0001950E 9068 0008                  		sub.w	obX(a0),d0
00019512 0828 0000 0022             		btst	#0,obStatus(a0)
00019518 6700                       		beq.s	loc_166E0
0001951A 0640 000F                  		addi.w	#$F,d0
0001951E                            
0001951E                            loc_166E0:
0001951E 0C40 0010                  		cmpi.w	#$10,d0
00019522 6400                       		bcc.s	locret_1675C
00019524 3229 000C                  		move.w	obY(a1),d1
00019528 9268 000C                  		sub.w	obY(a0),d1
0001952C 0641 0020                  		addi.w	#$20,d1
00019530 0C41 0040                  		cmpi.w	#$40,d1
00019534 6400                       		bcc.s	locret_1675C
00019536 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001953A 6600                       		bne.s	locret_1675C
0001953C 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00019542 6600                       		bne.s	loc_1670E
00019544 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001954A 6500                       		bcs.s	locret_1675C
0001954C                            
0001954C                            loc_1670E:
0001954C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019550 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019556 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001955C 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019562 337C 0000 0010             		move.w	#0,obVelX(a1)
00019568 337C 0000 0012             		move.w	#0,obVelY(a1)
0001956E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019574 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001957A 08E9 0001 0022             		bset	#1,obStatus(a1)
00019580 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019586 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001958C 4228 0032                  		clr.b	$32(a0)
0001959A                            
0001959A                            locret_1675C:
0001959A 4E75                       		rts	
0001959C                            ; ===========================================================================
0001959C                            
0001959C                            loc_1675E:	; Routine 4
0001959C 43F8 D000                  		lea	(v_player).w,a1
000195A0 1028 0032                  		move.b	$32(a0),d0
000195A4 5428 0032                  		addq.b	#2,$32(a0)
000195A8 4EB9 0000 3A32             		jsr	(CalcSine).l
000195AE EA40                       		asr.w	#5,d0
000195B0 3428 000C                  		move.w	obY(a0),d2
000195B4 9440                       		sub.w	d0,d2
000195B6 3342 000C                  		move.w	d2,obY(a1)
000195BA 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000195C0 6600                       		bne.s	locret_16796
000195C2 6100 0000                  		bsr.w	sub_1681C
000195C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000195D4                            
000195D4                            locret_16796:
000195D4 4E75                       		rts	
000195D6                            ; ===========================================================================
000195D6                            
000195D6                            loc_16798:	; Routine 6
000195D6 588F                       		addq.l	#4,sp
000195D8 43F8 D000                  		lea	(v_player).w,a1
000195DC 5328 002E                  		subq.b	#1,$2E(a0)
000195E0 6A00                       		bpl.s	loc_167DA
000195E2 3368 0036 0008             		move.w	$36(a0),obX(a1)
000195E8 3368 0038 000C             		move.w	$38(a0),obY(a1)
000195EE 7200                       		moveq	#0,d1
000195F0 1228 003A                  		move.b	$3A(a0),d1
000195F4 5801                       		addq.b	#4,d1
000195F6 B228 003B                  		cmp.b	$3B(a0),d1
000195FA 6500                       		bcs.s	loc_167C2
000195FC 7200                       		moveq	#0,d1
000195FE 6000                       		bra.s	loc_16800
00019600                            ; ===========================================================================
00019600                            
00019600                            loc_167C2:
00019600 1141 003A                  		move.b	d1,$3A(a0)
00019604 2468 003C                  		movea.l	$3C(a0),a2
00019608 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001960E 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00019614 6000 0000                  		bra.w	sub_1681C
00019618                            ; ===========================================================================
00019618                            
00019618                            loc_167DA:
00019618 2429 0008                  		move.l	obX(a1),d2
0001961C 2629 000C                  		move.l	obY(a1),d3
00019620 3029 0010                  		move.w	obVelX(a1),d0
00019624 48C0                       		ext.l	d0
00019626 E180                       		asl.l	#8,d0
00019628 D480                       		add.l	d0,d2
0001962A 3029 0012                  		move.w	obVelY(a1),d0
0001962E 48C0                       		ext.l	d0
00019630 E180                       		asl.l	#8,d0
00019632 D680                       		add.l	d0,d3
00019634 2342 0008                  		move.l	d2,obX(a1)
00019638 2343 000C                  		move.l	d3,obY(a1)
0001963C 4E75                       		rts	
0001963E                            ; ===========================================================================
0001963E                            
0001963E                            loc_16800:
0001963E 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00019644 4228 0024                  		clr.b	obRoutine(a0)
00019648 4238 F7C8                  		clr.b	(f_lockmulti).w
0001964C 337C 0000 0010             		move.w	#0,obVelX(a1)
00019652 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019658 4E75                       		rts	
0001965A                            
0001965A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001965A                            
0001965A                            
0001965A                            sub_1681C:
0001965A 7000                       		moveq	#0,d0
0001965C 343C 1000                  		move.w	#$1000,d2
00019660 3028 0036                  		move.w	$36(a0),d0
00019664 9069 0008                  		sub.w	obX(a1),d0
00019668 6C00                       		bge.s	loc_16830
0001966A 4440                       		neg.w	d0
0001966C 4442                       		neg.w	d2
0001966E                            
0001966E                            loc_16830:
0001966E 7200                       		moveq	#0,d1
00019670 363C 1000                  		move.w	#$1000,d3
00019674 3228 0038                  		move.w	$38(a0),d1
00019678 9269 000C                  		sub.w	obY(a1),d1
0001967C 6C00                       		bge.s	loc_16844
0001967E 4441                       		neg.w	d1
00019680 4443                       		neg.w	d3
00019682                            
00019682                            loc_16844:
00019682 B240                       		cmp.w	d0,d1
00019684 6500                       		bcs.s	loc_1687A
00019686 7200                       		moveq	#0,d1
00019688 3228 0038                  		move.w	$38(a0),d1
0001968C 9269 000C                  		sub.w	obY(a1),d1
00019690 4841                       		swap	d1
00019692 83C3                       		divs.w	d3,d1
00019694 7000                       		moveq	#0,d0
00019696 3028 0036                  		move.w	$36(a0),d0
0001969A 9069 0008                  		sub.w	obX(a1),d0
0001969E 6700                       		beq.s	loc_16866
000196A0 4840                       		swap	d0
000196A2 81C1                       		divs.w	d1,d0
000196A4                            
000196A4                            loc_16866:
000196A4 3340 0010                  		move.w	d0,obVelX(a1)
000196A8 3343 0012                  		move.w	d3,obVelY(a1)
000196AC 4A41                       		tst.w	d1
000196AE 6A00                       		bpl.s	loc_16874
000196B0 4441                       		neg.w	d1
000196B2                            
000196B2                            loc_16874:
000196B2 3141 002E                  		move.w	d1,$2E(a0)
000196B6 4E75                       		rts	
000196B8                            ; ===========================================================================
000196B8                            
000196B8                            loc_1687A:
000196B8 7000                       		moveq	#0,d0
000196BA 3028 0036                  		move.w	$36(a0),d0
000196BE 9069 0008                  		sub.w	obX(a1),d0
000196C2 4840                       		swap	d0
000196C4 81C2                       		divs.w	d2,d0
000196C6 7200                       		moveq	#0,d1
000196C8 3228 0038                  		move.w	$38(a0),d1
000196CC 9269 000C                  		sub.w	obY(a1),d1
000196D0 6700                       		beq.s	loc_16898
000196D2 4841                       		swap	d1
000196D4 83C0                       		divs.w	d0,d1
000196D6                            
000196D6                            loc_16898:
000196D6 3341 0012                  		move.w	d1,obVelY(a1)
000196DA 3342 0010                  		move.w	d2,obVelX(a1)
000196DE 4A40                       		tst.w	d0
000196E0 6A00                       		bpl.s	loc_168A6
000196E2 4440                       		neg.w	d0
000196E4                            
000196E4                            loc_168A6:
000196E4 3140 002E                  		move.w	d0,$2E(a0)
000196E8 4E75                       		rts	
000196EA                            ; End of function sub_1681C
000196EA                            
000196EA                            ; ===========================================================================
000196EA 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
000196F0 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
000196F6 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
000196FA 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019700 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019706 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001970C 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019712 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019718 0884 0298 0894             		dc.w $884, $298, $894
0001971E 0270 0894 0190             		dc.w $270, $894, $190
00019724 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001972A 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019730 1184 0498 1158             		dc.w $1184, $498, $1158
00019736 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001973C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019742 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019748 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001974E 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019754 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001975A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019760 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019766 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001976C 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001976C 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019772                            
00019772                            		include	"_incObj\78 Caterkiller.asm"
00019772                            ; ---------------------------------------------------------------------------
00019772                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019772                            ; ---------------------------------------------------------------------------
00019772                            
00019772                            Caterkiller:
00019772 7000                       		moveq	#0,d0
00019774 1028 0024                  		move.b	obRoutine(a0),d0
00019778 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001977C 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019780                            ; ===========================================================================
00019780 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019782 0000                       		dc.w Cat_Head-Cat_Index
00019784 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019786 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019788 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001978A 0000                       		dc.w Cat_Delete-Cat_Index
0001978C 0000                       		dc.w loc_16CC0-Cat_Index
0001978E                            
0001978E =0000003C                  cat_parent:	equ $3C		; address of parent object
0001978E                            ; ===========================================================================
0001978E                            
0001978E                            locret_16950:
0001978E 4E75                       		rts	
00019790                            ; ===========================================================================
00019790                            
00019790                            Cat_Main:	; Routine 0
00019790 117C 0007 0016             		move.b	#7,obHeight(a0)
00019796 117C 0008 0017             		move.b	#8,obWidth(a0)
0001979C 4EB9 0000 F714             		jsr	(ObjectFall).l
000197A2 4EB9 0001 7C58             		jsr	(ObjFloorDist).l
000197A8 4A41                       		tst.w	d1
000197AA 6AE2                       		bpl.s	locret_16950
000197AC D368 000C                  		add.w	d1,obY(a0)
000197B0 4268 0012                  		clr.w	obVelY(a0)
000197B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000197B8 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
000197C0 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
000197C6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
000197CC 6700                       		beq.s	@isscrapbrain
000197CE 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
000197D4                            
000197D4                            	@isscrapbrain:
000197D4 0228 0003 0001             		andi.b	#3,obRender(a0)
000197DA 0028 0004 0001             		ori.b	#4,obRender(a0)
000197E0 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
000197E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000197EC 117C 0008 0014             		move.b	#8,obActWid(a0)
000197F2 117C 000B 0020             		move.b	#$B,obColType(a0)
000197F8 3428 0008                  		move.w	obX(a0),d2
000197FC 7A0C                       		moveq	#$C,d5
000197FE 0828 0000 0022             		btst	#0,obStatus(a0)
00019804 6700                       		beq.s	@noflip
00019806 4445                       		neg.w	d5
00019808                            
00019808                            	@noflip:
00019808 1C3C 0004                  		move.b	#4,d6
0001980C 7600                       		moveq	#0,d3
0001980E 7804                       		moveq	#4,d4
00019810 2448                       		movea.l	a0,a2
00019812 7202                       		moveq	#2,d1
00019814                            
00019814                            Cat_Loop:
00019814 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001981A 6600 0000                  			bne.w	Cat_ChkGone
0001981E 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019822 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019826 5406                       		addq.b	#2,d6		; alternate between the two
00019828 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001982E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019834 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001983A 137C 0008 0014             		move.b	#8,obActWid(a1)
00019840 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019846 D445                       		add.w	d5,d2
00019848 3342 0008                  		move.w	d2,obX(a1)
0001984C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019852 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019858 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001985E 137C 0008 001A             		move.b	#8,obFrame(a1)
00019864 234A 003C                  		move.l	a2,cat_parent(a1)
00019868 1344 003C                  		move.b	d4,cat_parent(a1)
0001986C 5804                       		addq.b	#4,d4
0001986E 2449                       		movea.l	a1,a2
00019870                            
00019870                            	@fail:
00019870 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019874                            
00019874 117C 0007 002A             		move.b	#7,$2A(a0)
0001987A 4228 003C                  		clr.b	cat_parent(a0)
0001987E                            
0001987E                            Cat_Head:	; Routine 2
0001987E 4A28 0022                  		tst.b	obStatus(a0)
00019882 6B00 0000                  		bmi.w	loc_16C96
00019886 7000                       		moveq	#0,d0
00019888 1028 0025                  		move.b	ob2ndRout(a0),d0
0001988C 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019890 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019894 1228 002B                  		move.b	$2B(a0),d1
00019898 6A00                       		bpl.s	@display
0001989A 43F9 0000 0000             		lea	(Ani_Cat).l,a1
000198A0 1028 0026                  		move.b	obAngle(a0),d0
000198A4 0240 007F                  		andi.w	#$7F,d0
000198A8 5828 0026                  		addq.b	#4,obAngle(a0)
000198AC 1031 0000                  		move.b	(a1,d0.w),d0
000198B0 6A00                       		bpl.s	@animate
000198B2 08A8 0007 002B             		bclr	#7,$2B(a0)
000198B8 6000                       		bra.s	@display
000198BA                            
000198BA                            	@animate:
000198BA 0201 0010                  		andi.b	#$10,d1
000198BE D001                       		add.b	d1,d0
000198C0 1140 001A                  		move.b	d0,obFrame(a0)
000198C4                            
000198C4                            	@display:
000198E2 4EF9 0000 F760             		jmp	(DisplaySprite).l
000198E8                            
000198E8                            	Cat_ChkGone:
000198E8 45F8 FC00                  		lea	(v_objstate).w,a2
000198EC 7000                       		moveq	#0,d0
000198EE 1028 0023                  		move.b	obRespawnNo(a0),d0
000198F2 6700                       		beq.s	@delete
000198F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000198FA                            
000198FA                            	@delete:
000198FA 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019900 4E75                       		rts	
00019902                            ; ===========================================================================
00019902                            
00019902                            Cat_Delete:	; Routine $A
00019902 4EF9 0000 F7A0             		jmp	(DeleteObject).l
00019908                            ; ===========================================================================
00019908 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001990A 0000                       		dc.w loc_16B02-Cat_Index2
0001990C                            ; ===========================================================================
0001990C                            
0001990C                            @wait:
0001990C 5328 002A                  		subq.b	#1,$2A(a0)
00019910 6B00                       		bmi.s	@move
00019912 4E75                       		rts	
00019914                            ; ===========================================================================
00019914                            
00019914                            @move:
00019914 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019918 117C 0010 002A             		move.b	#$10,$2A(a0)
0001991E 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019924 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001992A 0868 0004 002B             		bchg	#4,$2B(a0)
00019930 6600                       		bne.s	loc_16AFC
00019932 4268 0010                  		clr.w	obVelX(a0)
00019936 4468 001C                  		neg.w	obAnim(a0)
0001993A                            
0001993A                            loc_16AFC:
0001993A 08E8 0007 002B             		bset	#7,$2B(a0)
00019940                            
00019940                            loc_16B02:
00019940 5328 002A                  		subq.b	#1,$2A(a0)
00019944 6B00                       		bmi.s	@loc_16B5E
00019946 4A68 0010                  			tst.w	obVelX(a0)
0001994A 6700                       			beq.s	@notmoving
0001994C 2428 0008                  			move.l	obX(a0),d2
00019950 2602                       			move.l	d2,d3
00019952 3028 0010                  		move.w	obVelX(a0),d0
00019956 0828 0000 0022             		btst	#0,obStatus(a0)
0001995C 6700                       		beq.s	@noflip
0001995E 4440                       		neg.w	d0
00019960                            
00019960                            	@noflip:
00019960 48C0                       		ext.l	d0
00019962 E180                       		asl.l	#8,d0
00019964 D480                       		add.l	d0,d2
00019966 2142 0008                  		move.l	d2,obX(a0)
0001996A 4843                       			swap	d3
0001996C B668 0008                  			cmp.w	obX(a0),d3
00019970 6700                       			beq.s	@notmoving
00019972 4EB9 0001 7C58             			jsr	(ObjFloorDist).l
00019978 0C41 FFF8                  			cmpi.w	#-8,d1
0001997C 6D00                       			blt.s	@loc_16B70
0001997E 0C41 000C                  			cmpi.w	#$C,d1
00019982 6C00                       			bge.s	@loc_16B70
00019984 D368 000C                  			add.w	d1,obY(a0)
00019988 7000                       		moveq	#0,d0
0001998A 1028 003C                  		move.b	cat_parent(a0),d0
0001998E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019992 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019998 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001999C                            
0001999C                            	@notmoving:
0001999C 4E75                       		rts	
0001999E                            ; ===========================================================================
0001999E                            
0001999E                            @loc_16B5E:
0001999E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000199A2 117C 0007 002A             		move.b	#7,$2A(a0)
000199A8 4268 0010                  			clr.w	obVelX(a0)
000199AC 4268 001C                  			clr.w	obAnim(a0)
000199B0 4E75                       		rts	
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            @loc_16B70:
000199B2 7000                       			moveq	#0,d0
000199B4 1028 003C                  			move.b	cat_parent(a0),d0
000199B8 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
000199BE 4468 000A                  			neg.w	obX+2(a0)
000199C2 6700                       			beq.s	@loc_1730A
000199C4 0828 0000 0022             			btst	#0,obStatus(a0)
000199CA 6700                       			beq.s	@loc_1730A
000199CC 5368 0008                  			subq.w	#1,obX(a0)
000199D0 5228 003C                  			addq.b	#1,cat_parent(a0)
000199D4 7000                       			moveq	#0,d0
000199D6 1028 003C                  			move.b	cat_parent(a0),d0
000199DA 4230 002C                  			clr.b	$2C(a0,d0)
000199DE                            	@loc_1730A:
000199DE 0868 0000 0022             			bchg	#0,obStatus(a0)
000199E4 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
000199EA 5228 003C                  		addq.b	#1,cat_parent(a0)
000199EE 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
000199F4 4E75                       		rts	
000199F6                            ; ===========================================================================
000199F6                            
000199F6                            Cat_BodySeg2:	; Routine 6
000199F6 2268 003C                  		movea.l	cat_parent(a0),a1
000199FA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A00 6A00                       		bpl.s	Cat_BodySeg1
00019A02 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019A08 1028 0026                  		move.b	obAngle(a0),d0
00019A0C 0240 007F                  		andi.w	#$7F,d0
00019A10 5828 0026                  		addq.b	#4,obAngle(a0)
00019A14 4A31 0004                  		tst.b	4(a1,d0.w)
00019A18 6A00                       		bpl.s	Cat_AniBody
00019A1A 5828 0026                  		addq.b	#4,obAngle(a0)
00019A1E                            
00019A1E                            Cat_AniBody:
00019A1E 1031 0000                  		move.b	(a1,d0.w),d0
00019A22 5000                       		addq.b	#8,d0
00019A24 1140 001A                  		move.b	d0,obFrame(a0)
00019A28                            
00019A28                            Cat_BodySeg1:	; Routine 4, 8
00019A28 2268 003C                  		movea.l	cat_parent(a0),a1
00019A2C 4A28 0022                  		tst.b	obStatus(a0)
00019A30 6B00 0000                  		bmi.w	loc_16C90
00019A34 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A3A 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019A40 6700 0000                  		beq.w	loc_16C64
00019A44 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019A4A 3029 0010                  		move.w	obVelX(a1),d0
00019A4E D068 001C                  			add.w	obAnim(a0),d0
00019A52 3140 0010                  		move.w	d0,obVelX(a0)
00019A56 2428 0008                  		move.l	obX(a0),d2
00019A5A 2602                       		move.l	d2,d3
00019A5C 3028 0010                  		move.w	obVelX(a0),d0
00019A60 0828 0000 0022             		btst	#0,obStatus(a0)
00019A66 6700                       		beq.s	loc_16C0C
00019A68 4440                       		neg.w	d0
00019A6A                            
00019A6A                            loc_16C0C:
00019A6A 48C0                       		ext.l	d0
00019A6C E180                       		asl.l	#8,d0
00019A6E D480                       		add.l	d0,d2
00019A70 2142 0008                  		move.l	d2,obX(a0)
00019A74 4843                       		swap	d3
00019A76 B668 0008                  		cmp.w	obX(a0),d3
00019A7A 6700                       		beq.s	loc_16C64
00019A7C 7000                       		moveq	#0,d0
00019A7E 1028 003C                  		move.b	cat_parent(a0),d0
00019A82 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019A86 0C01 0080                  		cmpi.b	#$80,d1
00019A8A 6600                       		bne.s	loc_16C50
00019A8C 1181 002C                  			move.b	d1,$2C(a0,d0)
00019A90 4468 000A                  			neg.w	obX+2(a0)
00019A94 6700                       			beq.s	locj_173E4
00019A96 0828 0000 0022             			btst	#0,obStatus(a0)
00019A9C 6700                       			beq.s	locj_173E4
00019A9E 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019AA4 6600                       			bne.s	locj_173E4
00019AA6 5368 0008                  			subq.w	#1,obX(a0)
00019AAA 5228 003C                  			addq.b	#1,cat_parent(a0)
00019AAE 7000                       			moveq	#0,d0
00019AB0 1028 003C                  			move.b	cat_parent(a0),d0
00019AB4 4230 002C                  			clr.b	$2C(a0,d0)
00019AB8                            	locj_173E4:
00019AB8 0868 0000 0022             		bchg	#0,obStatus(a0)
00019ABE 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019AC4 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AC8 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019ACE 6000                       		bra.s	loc_16C64
00019AD0                            ; ===========================================================================
00019AD0                            
00019AD0                            loc_16C50:
00019AD0 4881                       		ext.w	d1
00019AD2 D368 000C                  		add.w	d1,obY(a0)
00019AD6 5228 003C                  		addq.b	#1,cat_parent(a0)
00019ADA 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019AE0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019AE4                            
00019AE4                            loc_16C64:
00019AE4 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019AEA 6700                       		beq.s	loc_16C90
00019AEC 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019AF0 6700                       		beq.s	loc_16C7C
00019AF2 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019AF8 6600                       		bne.s	loc_16C82
00019AFA                            
00019AFA                            loc_16C7C:
00019AFA 4229 0020                  		clr.b    $20(a1)
00019AFE 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019B04                            
00019B04                            loc_16C82:
00019B04 4EF9 0000 F760             		jmp	(DisplaySprite).l
00019B0A                            
00019B0A                            ; ===========================================================================
00019B0A FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            loc_16C90:
00019B12 08E9 0007 0022             		bset	#7,obStatus(a1)
00019B18                            
00019B18                            loc_16C96:
00019B18 7000                       		moveq	#0,d0
00019B1A 1028 0024                  		move.b	obRoutine(a0),d0
00019B1E 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019B22 0828 0000 0022             		btst	#0,obStatus(a0)
00019B28 6700                       		beq.s	loc_16CAA
00019B2A 4440                       		neg.w	d0
00019B2C                            
00019B2C                            loc_16CAA:
00019B2C 3140 0010                  		move.w	d0,obVelX(a0)
00019B30 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019B36 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019B3C 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019B42                            
00019B42                            loc_16CC0:	; Routine $C
00019B42 4EB9 0000 F714             		jsr	(ObjectFall).l
00019B48 4A68 0012                  		tst.w	obVelY(a0)
00019B4C 6B00                       		bmi.s	loc_16CE0
00019B4E 4EB9 0001 7C58             		jsr	(ObjFloorDist).l
00019B54 4A41                       		tst.w	d1
00019B56 6A00                       		bpl.s	loc_16CE0
00019B58 D368 000C                  		add.w	d1,obY(a0)
00019B5C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019B62                            
00019B62                            loc_16CE0:
00019B62 4A28 0001                  		tst.b	obRender(a0)
00019B66 6A00 FD80                  		bpl.w	Cat_ChkGone
00019B6A 4EF9 0000 F760             		jmp	(DisplaySprite).l
00019B6A 4EF9 0000 F760             		jmp	(DisplaySprite).l
00019B70                            		include	"_anim\Caterkiller.asm"
00019B70                            ; ---------------------------------------------------------------------------
00019B70                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019B70                            ; ---------------------------------------------------------------------------
00019B70 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019B80 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019B90 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019BA0 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019BB0 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019BC0 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019BD0 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019BE0 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019BF0                            		even
00019BF0                            		even
00019BF0                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019BF0                            ; ---------------------------------------------------------------------------
00019BF0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019BF0                            ; ---------------------------------------------------------------------------
00019BF0                            Map_Cat_internal:
00019BF0 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019BF2 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019BF4 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019BF6 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019BF8 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019BFA 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019BFC 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019BFE 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019C00 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019C02 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019C04 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019C06 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019C08 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019C0A 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019C0C 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019C0E 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019C10 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019C12 0000                       		dc.w byte_16E04-Map_Cat_internal
00019C14 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019C16 0000                       		dc.w byte_16E10-Map_Cat_internal
00019C18 0000                       		dc.w byte_16E16-Map_Cat_internal
00019C1A 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019C1C 0000                       		dc.w byte_16E22-Map_Cat_internal
00019C1E 0000                       		dc.w byte_16E28-Map_Cat_internal
00019C20 01                         byte_16D9E:	dc.b 1
00019C21 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019C26 01                         byte_16DA4:	dc.b 1
00019C27 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019C2C 01                         byte_16DAA:	dc.b 1
00019C2D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019C32 01                         byte_16DB0:	dc.b 1
00019C33 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019C38 01                         byte_16DB6:	dc.b 1
00019C39 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019C3E 01                         byte_16DBC:	dc.b 1
00019C3F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019C44 01                         byte_16DC2:	dc.b 1
00019C45 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019C4A 01                         byte_16DC8:	dc.b 1
00019C4B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019C50 01                         byte_16DCE:	dc.b 1
00019C51 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019C56 01                         byte_16DD4:	dc.b 1
00019C57 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019C5C 01                         byte_16DDA:	dc.b 1
00019C5D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019C62 01                         byte_16DE0:	dc.b 1
00019C63 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019C68 01                         byte_16DE6:	dc.b 1
00019C69 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019C6E 01                         byte_16DEC:	dc.b 1
00019C6F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019C74 01                         byte_16DF2:	dc.b 1
00019C75 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019C7A 01                         byte_16DF8:	dc.b 1
00019C7B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019C80 01                         byte_16DFE:	dc.b 1
00019C81 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019C86 01                         byte_16E04:	dc.b 1
00019C87 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019C8C 01                         byte_16E0A:	dc.b 1
00019C8D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019C92 01                         byte_16E10:	dc.b 1
00019C93 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019C98 01                         byte_16E16:	dc.b 1
00019C99 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019C9E 01                         byte_16E1C:	dc.b 1
00019C9F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019CA4 01                         byte_16E22:	dc.b 1
00019CA5 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019CAA 01                         byte_16E28:	dc.b 1
00019CAB EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019CB0                            		even
00019CB0                            		even
00019CB0                            
00019CB0                            		include	"_incObj\79 Lamppost.asm"
00019CB0                            ; ---------------------------------------------------------------------------
00019CB0                            ; Object 79 - lamppost
00019CB0                            ; ---------------------------------------------------------------------------
00019CB0                            
00019CB0                            Lamppost:
00019CB0 7000                       		moveq	#0,d0
00019CB2 1028 0024                  		move.b	obRoutine(a0),d0
00019CB6 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019CBA 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019CBE 4EF9 0001 16D2             		jmp	(RememberState).l
00019CC4                            ; ===========================================================================
00019CC4 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019CC6 0000                       		dc.w Lamp_Blue-Lamp_Index
00019CC8 0000                       		dc.w Lamp_Finish-Lamp_Index
00019CCA 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019CCC                            
00019CCC =00000030                  lamp_origX:	equ $30		; original x-axis position
00019CCC =00000032                  lamp_origY:	equ $32		; original y-axis position
00019CCC =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019CCC                            ; ===========================================================================
00019CCC                            
00019CCC                            Lamp_Main:	; Routine 0
00019CCC 5428 0024                  		addq.b	#2,obRoutine(a0)
00019CD0 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019CD8 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019CDE 117C 0004 0001             		move.b	#4,obRender(a0)
00019CE4 117C 0008 0014             		move.b	#8,obActWid(a0)
00019CEA 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019CF0 45F8 FC00                  		lea	(v_objstate).w,a2
00019CF4 7000                       		moveq	#0,d0
00019CF6 1028 0023                  		move.b	obRespawnNo(a0),d0
00019CFA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019D00 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019D06 6600                       		bne.s	@red
00019D08 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D0C 0201 007F                  		andi.b	#$7F,d1
00019D10 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019D14 0202 007F                  		andi.b	#$7F,d2
00019D18 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D1A 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019D1C                            
00019D1C                            @red:
00019D1C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D22 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019D28 117C 0003 001A             		move.b	#3,obFrame(a0)
00019D2E 4E75                       		rts	
00019D30                            
00019D30                            ; ===========================================================================
00019D30                            
00019D30                            Lamp_Blue:	; Routine 2
00019D30 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019D34 6600 0000                  		bne.w	@donothing	; if yes, branch
00019D38 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019D3C 6B00 0000                  		bmi.w	@donothing
00019D40 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D44 0201 007F                  		andi.b	#$7F,d1
00019D48 1428 0028                  		move.b	obSubtype(a0),d2
00019D4C 0202 007F                  		andi.b	#$7F,d2
00019D50 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D52 6500                       		bcs.s	@chkhit		; if yes, branch
00019D54 45F8 FC00                  		lea	(v_objstate).w,a2
00019D58 7000                       		moveq	#0,d0
00019D5A 1028 0023                  		move.b	obRespawnNo(a0),d0
00019D5E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D64 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019D6A 117C 0003 001A             		move.b	#3,obFrame(a0)
00019D70 6000 0000                  		bra.w	@donothing
00019D74                            ; ===========================================================================
00019D74                            
00019D74                            @chkhit:
00019D74 3038 D008                  		move.w	(v_player+obX).w,d0
00019D78 9068 0008                  		sub.w	obX(a0),d0
00019D7C 5040                       		addq.w	#8,d0
00019D7E 0C40 0010                  		cmpi.w	#$10,d0
00019D82 6400 0000                  		bcc.w	@donothing
00019D86 3038 D00C                  		move.w	(v_player+obY).w,d0
00019D8A 9068 000C                  		sub.w	obY(a0),d0
00019D8E 0640 0040                  		addi.w	#$40,d0
00019D92 0C40 0068                  		cmpi.w	#$68,d0
00019D96 6400                       		bcc.s	@donothing
00019D98                            
00019DA2 5428 0024                  		addq.b	#2,obRoutine(a0)
00019DA6 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
00019DAC 6600                       		bne.s	@fail
00019DAE 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019DB2 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019DB8 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019DBE 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019DC4 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019DCA 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019DD2 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019DD8 137C 0004 0001             		move.b	#4,obRender(a1)
00019DDE 137C 0008 0014             		move.b	#8,obActWid(a1)
00019DE4 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019DEA 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019DF0 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019DF6                            
00019DF6                            	@fail:
00019DF6 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019DFC 6100 0000                  		bsr.w	Lamp_StoreInfo
00019E00 45F8 FC00                  		lea	(v_objstate).w,a2
00019E04 7000                       		moveq	#0,d0
00019E06 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E0A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E10                            
00019E10                            	@donothing:
00019E10 4E75                       		rts	
00019E12                            ; ===========================================================================
00019E12                            
00019E12                            Lamp_Finish:	; Routine 4	
00019E12 4E75                       		rts	
00019E14                            ; ===========================================================================
00019E14                            
00019E14                            Lamp_Twirl:	; Routine 6
00019E14 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019E18 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019E1A 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019E20                            
00019E20                            	@continue:
00019E20 1028 0026                  		move.b	obAngle(a0),d0
00019E24 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019E2A 0400 0040                  		subi.b	#$40,d0
00019E2E 4EB9 0000 3A32             		jsr	(CalcSine).l
00019E34 C3FC 0C00                  		muls.w	#$C00,d1
00019E38 4841                       		swap	d1
00019E3A D268 0030                  		add.w	lamp_origX(a0),d1
00019E3E 3141 0008                  		move.w	d1,obX(a0)
00019E42 C1FC 0C00                  		muls.w	#$C00,d0
00019E46 4840                       		swap	d0
00019E48 D068 0032                  		add.w	lamp_origY(a0),d0
00019E4C 3140 000C                  		move.w	d0,obY(a0)
00019E50 4E75                       		rts	
00019E52                            ; ===========================================================================
00019E52                            ; ---------------------------------------------------------------------------
00019E52                            ; Subroutine to	store information when you hit a lamppost
00019E52                            ; ---------------------------------------------------------------------------
00019E52                            
00019E52                            Lamp_StoreInfo:
00019E52 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019E58 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019E5E 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019E64 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019E6A 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019E70 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019E76 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019E7C 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019E82 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019E88 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019E8E 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019E94 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019E9A 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019EA0 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019EA6 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019EAC 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019EB2 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019EB8 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019EBE 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019EC4 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019ECA 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019ED0 4E75                       		rts	
00019ED2                            
00019ED2                            ; ---------------------------------------------------------------------------
00019ED2                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019ED2                            ; ---------------------------------------------------------------------------
00019ED2                            
00019ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019ED2                            
00019ED2                            
00019ED2                            Lamp_LoadInfo:
00019ED2 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019ED8 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019EDE 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019EE4 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019EEA 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019EF0 4278 FE20                  		clr.w	(v_rings).w
00019EF4 4238 FE1B                  		clr.b	(v_lifecount).w
00019EF8 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00019EFE 11FC 003B FE25             		move.b	#59,(v_timecent).w
00019F04 5338 FE24                  		subq.b	#1,(v_timesec).w
00019F08 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00019F0E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F14 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
00019F1A 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00019F20 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
00019F26 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00019F2C 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00019F32 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
00019F38 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
00019F3E 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
00019F44 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
00019F4A 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
00019F50 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
00019F56 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
00019F5C 6600                       		bne.s	@notlabyrinth	; if not, branch
00019F5E                            
00019F5E 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
00019F64 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F6A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
00019F70                            
00019F70                            	@notlabyrinth:
00019F70 4A38 FE30                  		tst.b	(v_lastlamp).w
00019F74 6A00                       		bpl.s	locret_170F6
00019F76 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019F7A 0440 00A0                  		subi.w	#$A0,d0
00019F7E 31C0 F728                  		move.w	d0,(v_limitleft2).w
00019F82                            
00019F82                            locret_170F6:
00019F82 4E75                       		rts	
00019F82 4E75                       		rts	
00019F84                            Map_Lamp:	include	"_maps\Lamppost.asm"
00019F84                            ; --------------------------------------------------------------------------------
00019F84                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019F84                            ; --------------------------------------------------------------------------------
00019F84                            
00019F84                            SME_JfaKr:	
00019F84 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
00019F88 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
00019F8C 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
00019F8E 0A                         SME_JfaKr_A:	dc.b $A	
00019F8F E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
00019F94 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
00019F99 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
00019F9E D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
00019FA3 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
00019FA8 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
00019FAD 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
00019FB2 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
00019FB7 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
00019FBC 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
00019FC1 08                         SME_JfaKr_3D:	dc.b 8	
00019FC2 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
00019FC7 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
00019FCC F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
00019FD1 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
00019FD6 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
00019FDB 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
00019FE0 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
00019FE5 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
00019FEA 02                         SME_JfaKr_66:	dc.b 2	
00019FEB F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
00019FF0 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
00019FF5 0A                         SME_JfaKr_71:	dc.b $A	
00019FF6 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
00019FFB E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A000 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A005 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A00A 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A00F 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A014 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A019 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A01E D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A023 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A028 0A                         SME_JfaKr_A4:	dc.b $A	
0001A029 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A02E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A033 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A038 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A03D 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A042 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A047 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A04C 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A051 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A056 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A05C 00                         		even
0001A05C 00                         		even
0001A05C                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            ; Object 7D - hidden points at the end of a level
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            
0001A05C                            HiddenBonus:
0001A05C 7000                       		moveq	#0,d0
0001A05E 1028 0024                  		move.b	obRoutine(a0),d0
0001A062 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A066 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A06A                            ; ===========================================================================
0001A06A 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A06C 0000                       		dc.w Bonus_Display-Bonus_Index
0001A06E                            
0001A06E =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A06E                            ; ===========================================================================
0001A06E                            
0001A06E                            Bonus_Main:	; Routine 0
0001A06E 7410                       		moveq	#$10,d2
0001A070 3602                       		move.w	d2,d3
0001A072 D643                       		add.w	d3,d3
0001A074 43F8 D000                  		lea	(v_player).w,a1
0001A078 3029 0008                  		move.w	obX(a1),d0
0001A07C 9068 0008                  		sub.w	obX(a0),d0
0001A080 D042                       		add.w	d2,d0
0001A082 B043                       		cmp.w	d3,d0
0001A084 6400                       		bcc.s	bonu_chkdel
0001A086 3229 000C                  		move.w	obY(a1),d1
0001A08A 9268 000C                  		sub.w	obY(a0),d1
0001A08E D242                       		add.w	d2,d1
0001A090 B243                       		cmp.w	d3,d1
0001A092 6400                       		bcc.s	bonu_chkdel
0001A094 4A78 FE08                  		tst.w	(v_debuguse).w
0001A098 6600                       		bne.s	bonu_chkdel
0001A09A 4A38 F7CD                  		tst.b	(f_bigring).w
0001A09E 6600                       		bne.s	bonu_chkdel
0001A0A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0A4 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A0AC 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A0B2 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A0B8 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A0BE 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A0C4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A0CA 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A0DA 7000                       		moveq	#0,d0
0001A0DC 1028 0028                  		move.b	obSubtype(a0),d0
0001A0E0 D040                       		add.w	d0,d0
0001A0E2 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A0E6 4EB9 0000 0000             		jsr	(AddPoints).l
0001A0EC                            
0001A0EC                            bonu_chkdel:
0001A108 4E75                       		rts	
0001A10A                            
0001A10A                            	@delete:
0001A10A 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A110                            
0001A110                            ; ===========================================================================
0001A110 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A112 03E8                       		dc.w 1000
0001A114 0064                       		dc.w 100
0001A116 000A                       		dc.w 10
0001A118                            ; ===========================================================================
0001A118                            
0001A118                            Bonus_Display:	; Routine 2
0001A118 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A11C 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A13A 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001A140                            
0001A140                            Bonus_Display_Delete:	
0001A140 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A140 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A146                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A146                            ; ---------------------------------------------------------------------------
0001A146                            ; Sprite mappings - hidden points at the end of	a level
0001A146                            ; ---------------------------------------------------------------------------
0001A146                            Map_Bonus_internal:
0001A146 0000                       		dc.w @blank-Map_Bonus_internal
0001A148 0000                       		dc.w @10000-Map_Bonus_internal
0001A14A 0000                       		dc.w @1000-Map_Bonus_internal
0001A14C 0000                       		dc.w @100-Map_Bonus_internal
0001A14E 00                         @blank:		dc.b 0
0001A14F 01                         @10000:		dc.b 1
0001A150 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A155 01                         @1000:		dc.b 1
0001A156 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A15B 01                         @100:		dc.b 1
0001A15C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A162 00                         		even
0001A162 00                         		even
0001A162                            
0001A162                            		include	"_incObj\8A Credits.asm"
0001A162                            ; ---------------------------------------------------------------------------
0001A162                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A162                            ; ---------------------------------------------------------------------------
0001A162                            
0001A162                            CreditsText:
0001A162 7000                       		moveq	#0,d0
0001A164 1028 0024                  		move.b	obRoutine(a0),d0
0001A168 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A16C 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A170                            ; ===========================================================================
0001A170 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A172 0000                       		dc.w Cred_Display-Cred_Index
0001A174                            ; ===========================================================================
0001A174                            
0001A174                            Cred_Main:	; Routine 0
0001A174 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A178 317C 0120 0008             		move.w	#$120,obX(a0)
0001A17E 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A184 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A18C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A192 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A196 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A19A 117C 0000 0001             		move.b	#0,obRender(a0)
0001A1A0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A1A6                            
0001A1A6 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A1AC 6600                       		bne.s	Cred_Display	; if not, branch
0001A1AE                            
0001A1AE 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A1B4 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A1BA 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A1BE 6700                       		beq.s	Cred_Display	; if not, branch
0001A1C0 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A1C6 6600                       		bne.s	Cred_Display	; if not, branch
0001A1C8 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A1CE 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A1D4 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A1DA                            ; ===========================================================================
0001A1DA                            
0001A1DA                            Cred_Display:	; Routine 2
0001A1DA 4EF9 0000 F760             		jmp	DisplaySprite
0001A1DA 4EF9 0000 F760             		jmp	DisplaySprite
0001A1E0                            Map_Cred:	include	"_maps\Credits.asm"
0001A1E0                            ; ---------------------------------------------------------------------------
0001A1E0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A1E0                            ; ---------------------------------------------------------------------------
0001A1E0                            Map_Cred_internal:
0001A1E0 0000                       		dc.w @staff-Map_Cred_internal
0001A1E2 0000                       		dc.w @gameplan-Map_Cred_internal
0001A1E4 0000                       		dc.w @program-Map_Cred_internal
0001A1E6 0000                       		dc.w @character-Map_Cred_internal
0001A1E8 0000                       		dc.w @design-Map_Cred_internal
0001A1EA 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A1EC 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A1EE 0000                       		dc.w @thanks-Map_Cred_internal
0001A1F0 0000                       		dc.w @presentedby-Map_Cred_internal
0001A1F2 0000                       		dc.w @tryagain-Map_Cred_internal
0001A1F4 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A1F6 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A1F7 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A1FC F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A201 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A206 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A20B F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A210 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A215 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A21A F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A21F F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A224 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A229 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A22E F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A233 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A238 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A23D 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A23E 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A243 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A248 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A24D 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A252 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A257 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A25C 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A261 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A266 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A26B                            
0001A26B B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A270 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A275 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A27A B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A27F B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A284 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A285 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A28A 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A28F 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A294 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A299 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A29E 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A2A3 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A2A8                            
0001A2A8 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A2AD B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A2B2 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A2B7 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A2BC B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A2C1 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A2C6 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A2CB B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A2D0                            
0001A2D0 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A2D5 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A2DA                            
0001A2DA D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A2DF D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A2E4 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A2E9 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A2EE D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A2F3 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A2F8                            
0001A2F8 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A2FD F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A302 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A307 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A308 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A30D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A312 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A317                            
0001A317 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A31C B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A321 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A326 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A32B B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A330 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A331 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A336 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A33B 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A340 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A345 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A34A 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A34F                            
0001A34F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A354 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A359 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A35E B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A363 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A368 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A369 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A36E 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A373 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A378 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A37D 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A382 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A387 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A38C 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A391 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A396 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A39B                            
0001A39B B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A3A0 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A3A5 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A3AA B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A3AF B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A3B4 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A3B9 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A3BE B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A3C3                            
0001A3C3 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A3C8 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A3CD D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A3D2 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A3D7 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A3DC D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A3E1 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A3E6 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A3EB D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A3F0 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A3F5 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A3F6 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A3FB D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A400 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A405 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A40A D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A40F D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A414 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A419 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A41E D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A423 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A428 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A42D D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A432 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A437 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A43C 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A441 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A446 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A44B 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A450 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A455 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A45A 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A45F 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A464 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A469 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A46A 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A46F 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A474 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A479 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A47E 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A483 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A488 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A48D 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A492                            
0001A492 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A497 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A49C B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A4A1 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A4A6 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A4AB B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A4B0                            
0001A4B0 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A4B5 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A4BA D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A4BF 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A4C0 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A4C5 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A4CA 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A4CF 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A4D4 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A4D9 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A4DE 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A4E3 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A4E8 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A4ED                            
0001A4ED B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A4F2 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A4F7                            
0001A4F7 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A4FC D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A501 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A506 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A50B D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A510 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A511 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A516 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A51B 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A520 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A525 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A52A 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A52F 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A534 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A539 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A53A E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A53F E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A544 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A549 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A54E E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A553 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A558                            
0001A558 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A55D 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A562 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A567 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A56C 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A571 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A576 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A57B 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A580                            		even
0001A580                            		even
0001A580                            
0001A580                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A580                            ; ---------------------------------------------------------------------------
0001A580                            ; Object 3D - Eggman (GHZ)
0001A580                            ; ---------------------------------------------------------------------------
0001A580                            
0001A580                            BossGreenHill:
0001A580 7000                       		moveq	#0,d0
0001A582 1028 0024                  		move.b	obRoutine(a0),d0
0001A586 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A58A 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A58E                            ; ===========================================================================
0001A58E 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A590 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A592 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A594 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A596                            
0001A596 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A598 0401                       		dc.b 4,	1
0001A59A 0607                       		dc.b 6,	7
0001A59C                            ; ===========================================================================
0001A59C                            
0001A59C                            BGHZ_Main:	; Routine 0
0001A59C 45F9 0001 A596             		lea	(BGHZ_ObjData).l,a2
0001A5A2 2248                       		movea.l	a0,a1
0001A5A4 7202                       		moveq	#2,d1
0001A5A6 6000                       		bra.s	BGHZ_LoadBoss
0001A5A8                            ; ===========================================================================
0001A5A8                            
0001A5A8                            BGHZ_Loop:
0001A5A8 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001A5AE 6600                       		bne.s	loc_17772
0001A5B0                            
0001A5B0                            BGHZ_LoadBoss:
0001A5B0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A5B4 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A5B8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A5BE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A5C4 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A5CC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A5D2 137C 0004 0001             		move.b	#4,obRender(a1)
0001A5D8 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A5DE 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A5E4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A5E8 2348 0034                  		move.l	a0,$34(a1)
0001A5EC 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A5F0                            
0001A5F0                            loc_17772:
0001A5F0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A5F6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A5FC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A602 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A608                            
0001A608                            
0001A608                            BGHZ_ShipMain:	; Routine 2
0001A608 7000                       		moveq	#0,d0
0001A60A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A60E 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A612 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A616 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A61C 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001A622 1028 0022                  		move.b	obStatus(a0),d0
0001A626 0200 0003                  		andi.b	#3,d0
0001A62A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A630 8128 0001                  		or.b	d0,obRender(a0)
0001A634 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001A63A                            ; ===========================================================================
0001A63A 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A63C 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A63E 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A640 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A642 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A644 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A646 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A648                            ; ===========================================================================
0001A648                            
0001A648                            BGHZ_ShipStart:
0001A648 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A64E 6100 0000                  		bsr.w	BossMove
0001A652 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A658 6600                       		bne.s	loc_177E6
0001A65A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A660 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A664                            
0001A664                            loc_177E6:
0001A664 1028 003F                  		move.b	$3F(a0),d0
0001A668 4EB9 0000 3A32             		jsr	(CalcSine).l
0001A66E EC40                       		asr.w	#6,d0
0001A670 D068 0038                  		add.w	$38(a0),d0
0001A674 3140 000C                  		move.w	d0,obY(a0)
0001A678 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A67E 5428 003F                  		addq.b	#2,$3F(a0)
0001A682 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A688 6400                       		bcc.s	locret_1784A
0001A68A 4A28 0022                  		tst.b	obStatus(a0)
0001A68E 6B00                       		bmi.s	loc_1784C
0001A690 4A28 0020                  		tst.b	obColType(a0)
0001A694 6600                       		bne.s	locret_1784A
0001A696 4A28 003E                  		tst.b	$3E(a0)
0001A69A 6600                       		bne.s	BGHZ_ShipFlash
0001A69C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A6AC                            
0001A6AC                            BGHZ_ShipFlash:
0001A6AC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A6B0 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A6B2 4A51                       		tst.w	(a1)
0001A6B4 6600                       		bne.s	loc_1783C
0001A6B6 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A6BA                            
0001A6BA                            loc_1783C:
0001A6BA 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A6BC 5328 003E                  		subq.b	#1,$3E(a0)
0001A6C0 6600                       		bne.s	locret_1784A
0001A6C2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A6C8                            
0001A6C8                            locret_1784A:
0001A6C8 4E75                       		rts	
0001A6CA                            ; ===========================================================================
0001A6CA                            
0001A6CA                            loc_1784C:
0001A6CA 7064                       		moveq	#100,d0
0001A6CC 6100 0000                  		bsr.w	AddPoints
0001A6D0 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A6D6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A6DC 4E75                       		rts	
0001A6DC 4E75                       		rts	
0001A6DE                            
0001A6DE                            ; ---------------------------------------------------------------------------
0001A6DE                            ; Defeated boss	subroutine
0001A6DE                            ; ---------------------------------------------------------------------------
0001A6DE                            
0001A6DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A6DE                            
0001A6DE                            
0001A6DE                            BossDefeated:
0001A6DE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A6E2 0200 0007                  		andi.b	#7,d0
0001A6E6 6600                       		bne.s	locret_178A2
0001A6E8 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001A6EE 6600                       		bne.s	locret_178A2
0001A6F0 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A6F4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A6FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A700 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001A706 3200                       		move.w	d0,d1
0001A708 7200                       		moveq	#0,d1
0001A70A 1200                       		move.b	d0,d1
0001A70C E409                       		lsr.b	#2,d1
0001A70E 0441 0020                  		subi.w	#$20,d1
0001A712 D369 0008                  		add.w	d1,obX(a1)
0001A716 E048                       		lsr.w	#8,d0
0001A718 E608                       		lsr.b	#3,d0
0001A71A D169 000C                  		add.w	d0,obY(a1)
0001A71E                            
0001A71E                            locret_178A2:
0001A71E 4E75                       		rts	
0001A720                            ; End of function BossDefeated
0001A720                            
0001A720                            ; ---------------------------------------------------------------------------
0001A720                            ; Subroutine to	move a boss
0001A720                            ; ---------------------------------------------------------------------------
0001A720                            
0001A720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A720                            
0001A720                            
0001A720                            BossMove:
0001A720 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A726 E188                       		lsl.l	#8,d0
0001A728 D1A8 0030                  		add.l	d0,$30(a0)
0001A72C E18A                       		lsl.l	#8,d2
0001A72E D5A8 0038                  		add.l	d2,$38(a0)
0001A732 4E75                       		rts
0001A734                            ; End of function BossMove
0001A734                            
0001A734                            ; ===========================================================================
0001A734                            
0001A734                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A734                            
0001A734                            BGHZ_MakeBall:
0001A734 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A73A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A740 6100 FFDE                  		bsr.w	BossMove
0001A744 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A74A 6600                       		bne.s	loc_17916
0001A74C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A752 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A758 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A75C 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001A762 6600                       		bne.s	loc_17910
0001A764 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A768 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A76E 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A774 2348 0034                  		move.l	a0,$34(a1)
0001A778                            
0001A778                            loc_17910:
0001A778 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A77E                            
0001A77E                            loc_17916:
0001A77E 6000 FEE4                  		bra.w	loc_177E6
0001A782                            ; ===========================================================================
0001A782                            
0001A782                            BGHZ_ShipMove:
0001A782 5368 003C                  		subq.w	#1,$3C(a0)
0001A786 6A00                       		bpl.s	BGHZ_Reverse
0001A788 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A78C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A792 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A798 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A79E 6600                       		bne.s	BGHZ_Reverse
0001A7A0 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A7A6 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A7AC                            
0001A7AC                            BGHZ_Reverse:
0001A7AC 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7B2 6600                       		bne.s	loc_17950
0001A7B4 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A7B8                            
0001A7B8                            loc_17950:
0001A7B8 6000 FEAA                  		bra.w	loc_177E6
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            loc_17954:
0001A7BC 5368 003C                  		subq.w	#1,$3C(a0)
0001A7C0 6B00                       		bmi.s	loc_17960
0001A7C2 6100 FF5C                  		bsr.w	BossMove
0001A7C6 6000                       		bra.s	loc_17976
0001A7C8                            ; ===========================================================================
0001A7C8                            
0001A7C8                            loc_17960:
0001A7C8 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A7CE 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A7D4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A7D8 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A7DE                            
0001A7DE                            loc_17976:
0001A7DE 6000 FE84                  		bra.w	loc_177E6
0001A7E2                            ; ===========================================================================
0001A7E2                            
0001A7E2                            loc_1797A:
0001A7E2 5368 003C                  		subq.w	#1,$3C(a0)
0001A7E6 6B00                       		bmi.s	loc_17984
0001A7E8 6000 FEF4                  		bra.w	BossDefeated
0001A7EC                            ; ===========================================================================
0001A7EC                            
0001A7EC                            loc_17984:
0001A7EC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A7F2 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A7F8 4268 0010                  		clr.w	obVelX(a0)
0001A7FC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A800 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A806 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A80A 6600                       		bne.s	locret_179AA
0001A80C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A812                            
0001A812                            locret_179AA:
0001A812 4E75                       		rts	
0001A814                            ; ===========================================================================
0001A814                            
0001A814                            loc_179AC:
0001A814 5268 003C                  		addq.w	#1,$3C(a0)
0001A818 6700                       		beq.s	loc_179BC
0001A81A 6A00                       		bpl.s	loc_179C2
0001A81C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A822 6000                       		bra.s	loc_179EE
0001A824                            ; ===========================================================================
0001A824                            
0001A824                            loc_179BC:
0001A824 4268 0012                  		clr.w	obVelY(a0)
0001A828 6000                       		bra.s	loc_179EE
0001A82A                            ; ===========================================================================
0001A82A                            
0001A82A                            loc_179C2:
0001A82A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A830 6500                       		bcs.s	loc_179DA
0001A832 6700                       		beq.s	loc_179E0
0001A834 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A83A 6500                       		bcs.s	loc_179EE
0001A83C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A840 6000                       		bra.s	loc_179EE
0001A842                            ; ===========================================================================
0001A842                            
0001A842                            loc_179DA:
0001A842 5168 0012                  		subq.w	#8,obVelY(a0)
0001A846 6000                       		bra.s	loc_179EE
0001A848                            ; ===========================================================================
0001A848                            
0001A848                            loc_179E0:
0001A848 4268 0012                          clr.w    obVelY(a0)
0001A84C 4A38 FE2D                          tst.b     (v_invinc).w
0001A850 6600                               bne.s   @boss_invinc
0001A852 4A38 FE2E                          tst.b     (v_shoes).w
0001A856 6600                               bne.s   @boss_shoes
0001A858                            
0001A858 1038 F5C6                          move.b   (v_Saved_music),d0
0001A85C 6000 0000                          bra.w      @boss_play
0001A860                            
0001A860                            @boss_invinc:
0001A860 103C 0000                          move.b #bgm_Invincible,d0
0001A864                            
0001A864                            @boss_shoes:
0001A864 103C 0000                          move.b #bgm_Ending,d0
0001A868                            
0001A868                            @boss_play:
0001A868 4EB8 124A                          jsr PlaySound
0001A86C                            
0001A86C                            loc_179EE:
0001A86C 6100 FEB2                  		bsr.w	BossMove
0001A870 6000 FDF2                  		bra.w	loc_177E6
0001A874                            ; ===========================================================================
0001A874                            
0001A874                            loc_179F6:
0001A874 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A87A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A880 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001A886 6700                       		beq.s	loc_17A10
0001A888 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A88C 6000                       		bra.s	loc_17A16
0001A88E                            ; ===========================================================================
0001A88E                            
0001A88E                            loc_17A10:
0001A88E 4A28 0001                  		tst.b	obRender(a0)
0001A892 6A00                       		bpl.s	BGHZ_ShipDel
0001A894                            
0001A894                            loc_17A16:
0001A894 6100 FE8A                  		bsr.w	BossMove
0001A898 6000 FDCA                  		bra.w	loc_177E6
0001A89C                            ; ===========================================================================
0001A89C                            
0001A89C                            BGHZ_ShipDel:
0001A89C 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A8A2                            ; ===========================================================================
0001A8A2                            
0001A8A2                            BGHZ_FaceMain:	; Routine 4
0001A8A2 7000                       		moveq	#0,d0
0001A8A4 7201                       		moveq	#1,d1
0001A8A6 2268 0034                  		movea.l	$34(a0),a1
0001A8AA 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A8AE 5900                       		subq.b	#4,d0
0001A8B0 6600                       		bne.s	loc_17A3E
0001A8B2 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001A8B8 6600                       		bne.s	loc_17A46
0001A8BA 7204                       		moveq	#4,d1
0001A8BC                            
0001A8BC                            loc_17A3E:
0001A8BC 5D00                       		subq.b	#6,d0
0001A8BE 6B00                       		bmi.s	loc_17A46
0001A8C0 720A                       		moveq	#$A,d1
0001A8C2 6000                       		bra.s	loc_17A5A
0001A8C4                            ; ===========================================================================
0001A8C4                            
0001A8C4                            loc_17A46:
0001A8C4 4A29 0020                  		tst.b	obColType(a1)
0001A8C8 6600                       		bne.s	loc_17A50
0001A8CA 7205                       		moveq	#5,d1
0001A8CC 6000                       		bra.s	loc_17A5A
0001A8CE                            ; ===========================================================================
0001A8CE                            
0001A8CE                            loc_17A50:
0001A8CE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A8D4 6500                       		bcs.s	loc_17A5A
0001A8D6 7204                       		moveq	#4,d1
0001A8D8                            
0001A8D8                            loc_17A5A:
0001A8D8 1141 001C                  		move.b	d1,obAnim(a0)
0001A8DC 5500                       		subq.b	#2,d0
0001A8DE 6600                       		bne.s	BGHZ_FaceDisp
0001A8E0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A8E6 4A28 0001                  		tst.b	obRender(a0)
0001A8EA 6A00                       		bpl.s	BGHZ_FaceDel
0001A8EC                            
0001A8EC                            BGHZ_FaceDisp:
0001A8EC 6000                       		bra.s	BGHZ_Display
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            BGHZ_FaceDel:
0001A8EE 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A8F4                            ; ===========================================================================
0001A8F4                            
0001A8F4                            BGHZ_FlameMain:	; Routine 6
0001A8F4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001A8FA 2268 0034                  		movea.l	$34(a0),a1
0001A8FE 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001A904 6600                       		bne.s	loc_17A96
0001A906 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001A90C 4A28 0001                  		tst.b	obRender(a0)
0001A910 6A00                       		bpl.s	BGHZ_FlameDel
0001A912 6000                       		bra.s	BGHZ_FlameDisp
0001A914                            ; ===========================================================================
0001A914                            
0001A914                            loc_17A96:
0001A914 3029 0010                  		move.w	obVelX(a1),d0
0001A918 6700                       		beq.s	BGHZ_FlameDisp
0001A91A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001A920                            
0001A920                            BGHZ_FlameDisp:
0001A920 6000                       		bra.s	BGHZ_Display
0001A922                            ; ===========================================================================
0001A922                            
0001A922                            BGHZ_FlameDel:
0001A922 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001A928                            ; ===========================================================================
0001A928                            
0001A928                            BGHZ_Display:
0001A928 2268 0034                  		movea.l	$34(a0),a1
0001A92C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001A932 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001A938 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001A93E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A944 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001A94A 1028 0022                  		move.b	obStatus(a0),d0
0001A94E 0200 0003                  		andi.b	#3,d0
0001A952 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A958 8128 0001                  		or.b	d0,obRender(a0)
0001A95C 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001A95C 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001A962                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001A962                            ; ---------------------------------------------------------------------------
0001A962                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001A962                            ; ---------------------------------------------------------------------------
0001A962                            
0001A962                            BossBall:
0001A962 7000                       		moveq	#0,d0
0001A964 1028 0024                  		move.b	obRoutine(a0),d0
0001A968 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001A96C 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001A970                            ; ===========================================================================
0001A970 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001A972 0000                       		dc.w GBall_Base-GBall_Index
0001A974 0000                       		dc.w GBall_Display2-GBall_Index
0001A976 0000                       		dc.w loc_17C68-GBall_Index
0001A978 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001A97A                            ; ===========================================================================
0001A97A                            
0001A97A                            GBall_Main:	; Routine 0
0001A97A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A97E 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001A984 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001A98A 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001A992 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001A998 45E8 0028                  		lea	obSubtype(a0),a2
0001A99C 14FC 0000                  		move.b	#0,(a2)+
0001A9A0 7205                       		moveq	#5,d1
0001A9A2 2248                       		movea.l	a0,a1
0001A9A4 6000                       		bra.s	loc_17B60
0001A9A6                            ; ===========================================================================
0001A9A6                            
0001A9A6                            GBall_MakeLinks:
0001A9A6 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001A9AC 6600                       		bne.s	GBall_MakeBall
0001A9AE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A9B4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A9BA 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001A9BE 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001A9C4 237C 0000 97DE 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001A9CC 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001A9D2 137C 0001 001A             		move.b	#1,obFrame(a1)
0001A9D8 5228 0028                  		addq.b	#1,obSubtype(a0)
0001A9DC                            
0001A9DC                            loc_17B60:
0001A9DC 3A09                       		move.w	a1,d5
0001A9DE 0445 D000                  		subi.w	#$D000,d5
0001A9E2 EC4D                       		lsr.w	#6,d5
0001A9E4 0245 007F                  		andi.w	#$7F,d5
0001A9E8 14C5                       		move.b	d5,(a2)+
0001A9EA 137C 0004 0001             		move.b	#4,obRender(a1)
0001A9F0 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A9F6 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001A9FC 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AA02 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AA06                            
0001AA06                            GBall_MakeBall:
0001AA06 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AA0C 237C 0000 9D3A 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AA14 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AA1A 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AA20 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AA26 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AA2C 4E75                       		rts	
0001AA2E                            ; ===========================================================================
0001AA2E                            
0001AA2E 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AA34                            
0001AA34                            ; ===========================================================================
0001AA34                            
0001AA34                            GBall_Base:	; Routine 2
0001AA34 47F9 0001 AA2E             		lea	(GBall_PosData).l,a3
0001AA3A 45E8 0028                  		lea	obSubtype(a0),a2
0001AA3E 7C00                       		moveq	#0,d6
0001AA40 1C1A                       		move.b	(a2)+,d6
0001AA42                            
0001AA42                            loc_17BC6:
0001AA42 7800                       		moveq	#0,d4
0001AA44 181A                       		move.b	(a2)+,d4
0001AA46 ED4C                       		lsl.w	#6,d4
0001AA48 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AA4E 2244                       		movea.l	d4,a1
0001AA50 101B                       		move.b	(a3)+,d0
0001AA52 B029 003C                  		cmp.b	$3C(a1),d0
0001AA56 6700                       		beq.s	loc_17BE0
0001AA58 5229 003C                  		addq.b	#1,$3C(a1)
0001AA5C                            
0001AA5C                            loc_17BE0:
0001AA5C 51CE FFE4                  		dbf	d6,loc_17BC6
0001AA60                            
0001AA60 B029 003C                  		cmp.b	$3C(a1),d0
0001AA64 6600                       		bne.s	loc_17BFA
0001AA66 2268 0034                  		movea.l	$34(a0),a1
0001AA6A 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AA70 6600                       		bne.s	loc_17BFA
0001AA72 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA76                            
0001AA76                            loc_17BFA:
0001AA76 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AA7C 6700                       		beq.s	GBall_Display
0001AA7E 5268 0032                  		addq.w	#1,$32(a0)
0001AA82                            
0001AA82                            GBall_Display:
0001AA82 6100 0000                  		bsr.w	sub_17C2A
0001AA86 1028 0026                  		move.b	obAngle(a0),d0
0001AA8A 4EB9 0000 9750             		jsr	(Swing_Move2).l
0001AA90 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001AA96                            ; ===========================================================================
0001AA96                            
0001AA96                            GBall_Display2:	; Routine 4
0001AA96 6100 0000                  		bsr.w	sub_17C2A
0001AA9A 4EB9 0000 9710             		jsr	(Obj48_Move).l
0001AAA0 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001AAA6                            
0001AAA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AAA6                            
0001AAA6                            
0001AAA6                            sub_17C2A:
0001AAA6 2268 0034                  		movea.l	$34(a0),a1
0001AAAA 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AAB0 6400                       		bcc.s	loc_17C3C
0001AAB2 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AAB8                            
0001AAB8                            loc_17C3C:
0001AAB8 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AABE 3029 000C                  		move.w	obY(a1),d0
0001AAC2 D068 0032                  		add.w	$32(a0),d0
0001AAC6 3140 0038                  		move.w	d0,$38(a0)
0001AACA 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AAD0 4A29 0022                  		tst.b	obStatus(a1)
0001AAD4 6A00                       		bpl.s	locret_17C66
0001AAD6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AADA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AAE0                            
0001AAE0                            locret_17C66:
0001AAE0 4E75                       		rts	
0001AAE2                            ; End of function sub_17C2A
0001AAE2                            
0001AAE2                            ; ===========================================================================
0001AAE2                            
0001AAE2                            loc_17C68:	; Routine 6
0001AAE2 2268 0034                  		movea.l	$34(a0),a1
0001AAE6 4A29 0022                  		tst.b	obStatus(a1)
0001AAEA 6A00                       		bpl.s	GBall_Display3
0001AAEC 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AAF0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AAF6                            
0001AAF6                            GBall_Display3:
0001AAF6 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001AAFC                            ; ===========================================================================
0001AAFC                            
0001AAFC                            GBall_ChkVanish:; Routine 8
0001AAFC 7000                       		moveq	#0,d0
0001AAFE 4A28 001A                  		tst.b	obFrame(a0)
0001AB02 6600                       		bne.s	GBall_Vanish
0001AB04 5200                       		addq.b	#1,d0
0001AB06                            
0001AB06                            GBall_Vanish:
0001AB06 1140 001A                  		move.b	d0,obFrame(a0)
0001AB0A 2268 0034                  		movea.l	$34(a0),a1
0001AB0E 4A29 0022                  		tst.b	obStatus(a1)
0001AB12 6A00                       		bpl.s	GBall_Display4
0001AB14 117C 0000 0020             		move.b	#0,obColType(a0)
0001AB1A 6100 FBC2                  		bsr.w	BossDefeated
0001AB1E 5328 003C                  		subq.b	#1,$3C(a0)
0001AB22 6A00                       		bpl.s	GBall_Display4
0001AB24 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AB28 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB2E                            
0001AB2E                            GBall_Display4:
0001AB2E 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001AB2E 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001AB34                            		include	"_anim\Eggman.asm"
0001AB34                            ; ---------------------------------------------------------------------------
0001AB34                            ; Animation script - Eggman (bosses)
0001AB34                            ; ---------------------------------------------------------------------------
0001AB34 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AB36 0000                       		dc.w @facenormal1-Ani_Eggman
0001AB38 0000                       		dc.w @facenormal2-Ani_Eggman
0001AB3A 0000                       		dc.w @facenormal3-Ani_Eggman
0001AB3C 0000                       		dc.w @facelaugh-Ani_Eggman
0001AB3E 0000                       		dc.w @facehit-Ani_Eggman
0001AB40 0000                       		dc.w @facepanic-Ani_Eggman
0001AB42 0000                       		dc.w @blank-Ani_Eggman
0001AB44 0000                       		dc.w @flame1-Ani_Eggman
0001AB46 0000                       		dc.w @flame2-Ani_Eggman
0001AB48 0000                       		dc.w @facedefeat-Ani_Eggman
0001AB4A 0000                       		dc.w @escapeflame-Ani_Eggman
0001AB4C 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AB50 00                         		even
0001AB50 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AB54                            		even
0001AB54 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AB58                            		even
0001AB58 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AB5C                            		even
0001AB5C 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AB60                            		even
0001AB60 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AB64                            		even
0001AB64 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AB68                            		even
0001AB68 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AB6C 00                         		even
0001AB6C 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AB70                            		even
0001AB70 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AB74                            		even
0001AB74 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AB78 00                         		even
0001AB78 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AB84 00                         		even
0001AB84 00                         		even
0001AB84                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AB84                            ; --------------------------------------------------------------------------------
0001AB84                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AB84                            ; --------------------------------------------------------------------------------
0001AB84                            
0001AB84                            SME_F_pyS:	
0001AB84 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AB88 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AB8C 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AB90 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AB94 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AB98 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AB9C 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AB9E 05                         SME_F_pyS_1A:	dc.b 5	
0001AB9F EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001ABA4 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001ABA9 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001ABAE 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001ABB3 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001ABB8 03                         SME_F_pyS_34:	dc.b 3	
0001ABB9 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ABBE EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001ABC3 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ABC8 03                         SME_F_pyS_44:	dc.b 3	
0001ABC9 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ABCE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ABD3 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ABD8 04                         SME_F_pyS_54:	dc.b 4	
0001ABD9 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001ABDE EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001ABE3 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001ABE8 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ABED 04                         SME_F_pyS_69:	dc.b 4	
0001ABEE E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001ABF3 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001ABF8 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001ABFD EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC02 04                         SME_F_pyS_7E:	dc.b 4	
0001AC03 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC08 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AC0D EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC12 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC17 04                         SME_F_pyS_93:	dc.b 4	
0001AC18 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AC1D E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC22 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AC27 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC2C 07                         SME_F_pyS_A8:	dc.b 7	
0001AC2D E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AC32 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC37 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC3C EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AC41 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AC46 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AC4B EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC50 01                         SME_F_pyS_CC:	dc.b 1	
0001AC51 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AC56 01                         SME_F_pyS_D2:	dc.b 1	
0001AC57 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AC5C 00                         SME_F_pyS_D8:	dc.b 0	
0001AC5D 02                         SME_F_pyS_D9:	dc.b 2	
0001AC5E 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AC63 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AC68 02                         SME_F_pyS_E4:	dc.b 2	
0001AC69 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AC6E 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AC74 00                         		even
0001AC74 00                         		even
0001AC74                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AC74                            ; ---------------------------------------------------------------------------
0001AC74                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AC74                            ; ---------------------------------------------------------------------------
0001AC74                            Map_BossItems_internal:
0001AC74 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AC76 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AC78 0000                       		dc.w @cross-Map_BossItems_internal
0001AC7A 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AC7C 0000                       		dc.w @pipe-Map_BossItems_internal
0001AC7E 0000                       		dc.w @spike-Map_BossItems_internal
0001AC80 0000                       		dc.w @legmask-Map_BossItems_internal
0001AC82 0000                       		dc.w @legs-Map_BossItems_internal
0001AC84 01                         @chainanchor1:	dc.b 1
0001AC85 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AC8A 02                         @chainanchor2:	dc.b 2
0001AC8B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AC90 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AC96 00                         		even
0001AC96 01                         @cross:		dc.b 1
0001AC97 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AC9C 01                         @widepipe:	dc.b 1
0001AC9D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001ACA2 01                         @pipe:		dc.b 1
0001ACA3 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001ACA8 04                         @spike:		dc.b 4
0001ACA9 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001ACAE F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001ACB3 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001ACB8 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001ACBE 00                         		even
0001ACBE 02                         @legmask:	dc.b 2
0001ACBF 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001ACC4 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001ACCA 00                         		even
0001ACCA 02                         @legs:		dc.b 2
0001ACCB 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001ACD0 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001ACD6 00                         		even
0001ACD6 00                         		even
0001ACD6                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001ACD6                            ; ---------------------------------------------------------------------------
0001ACD6                            ; Object 77 - Eggman (LZ)
0001ACD6                            ; ---------------------------------------------------------------------------
0001ACD6                            
0001ACD6                            BossLabyrinth:
0001ACD6 7000                       		moveq	#0,d0
0001ACD8 1028 0024                  		move.b	obRoutine(a0),d0
0001ACDC 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001ACE0 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001ACE4                            ; ===========================================================================
0001ACE4 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001ACE6 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001ACE8 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001ACEA 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001ACEC                            
0001ACEC 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001ACEE 0401                       		dc.b 4,	1
0001ACF0 0607                       		dc.b 6,	7
0001ACF2                            ; ===========================================================================
0001ACF2                            
0001ACF2                            Obj77_Main:	; Routine 0
0001ACF2 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001ACF8 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001ACFE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AD04 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AD0A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AD10 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AD16 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AD1C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AD20 2248                       		movea.l	a0,a1
0001AD22 7202                       		moveq	#2,d1
0001AD24 6000                       		bra.s	Obj77_LoadBoss
0001AD26                            ; ===========================================================================
0001AD26                            
0001AD26                            Obj77_Loop:
0001AD26 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001AD2C 6600                       		bne.s	Obj77_ShipMain
0001AD2E 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AD32 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AD38 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AD3E                            
0001AD3E                            Obj77_LoadBoss:
0001AD3E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AD44 4229 0025                  		clr.b	ob2ndRout(a1)
0001AD48 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AD4C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AD50 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AD56 237C 0001 AB84 0004        		move.l	#Map_Eggman,obMap(a1)
0001AD5E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AD64 137C 0004 0001             		move.b	#4,obRender(a1)
0001AD6A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AD70 2348 0034                  		move.l	a0,$34(a1)
0001AD74 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AD78                            
0001AD78                            Obj77_ShipMain:	; Routine 2
0001AD78 43F8 D000                  		lea	(v_player).w,a1
0001AD7C 7000                       		moveq	#0,d0
0001AD7E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AD82 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AD86 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AD8A 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001AD90 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001AD96 7003                       		moveq	#3,d0
0001AD98 C028 0022                  		and.b	obStatus(a0),d0
0001AD9C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ADA2 8128 0001                  		or.b	d0,obRender(a0)
0001ADA6 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001ADAC                            ; ===========================================================================
0001ADAC 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001ADB0 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001ADB4 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001ADB8 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001ADBC                            ; ===========================================================================
0001ADBC                            
0001ADBC                            loc_17F1E:
0001ADBC 3029 0008                  		move.w	obX(a1),d0
0001ADC0 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001ADC4 6500                       		bcs.s	loc_17F38
0001ADC6 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001ADCC 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001ADD2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001ADD6                            
0001ADD6                            loc_17F38:
0001ADD6 6100 F948                  		bsr.w	BossMove
0001ADDA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001ADE0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001ADE6                            
0001ADE6                            loc_17F48:
0001ADE6 4A28 003D                  		tst.b	$3D(a0)
0001ADEA 6600                       		bne.s	loc_17F8E
0001ADEC 4A28 0022                  		tst.b	obStatus(a0)
0001ADF0 6B00                       		bmi.s	loc_17F92
0001ADF2 4A28 0020                  		tst.b	obColType(a0)
0001ADF6 6600                       		bne.s	locret_17F8C
0001ADF8 4A28 003E                  		tst.b	$3E(a0)
0001ADFC 6600                       		bne.s	loc_17F70
0001ADFE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AE0E                            
0001AE0E                            loc_17F70:
0001AE0E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AE12 7000                       		moveq	#0,d0
0001AE14 4A51                       		tst.w	(a1)
0001AE16 6600                       		bne.s	loc_17F7E
0001AE18 303C 0EEE                  		move.w	#cWhite,d0
0001AE1C                            
0001AE1C                            loc_17F7E:
0001AE1C 3280                       		move.w	d0,(a1)
0001AE1E 5328 003E                  		subq.b	#1,$3E(a0)
0001AE22 6600                       		bne.s	locret_17F8C
0001AE24 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AE2A                            
0001AE2A                            locret_17F8C:
0001AE2A 4E75                       		rts	
0001AE2C                            ; ===========================================================================
0001AE2C                            
0001AE2C                            loc_17F8E:
0001AE2C 6000 F8B0                  		bra.w	BossDefeated
0001AE30                            ; ===========================================================================
0001AE30                            
0001AE30                            loc_17F92:
0001AE30 7064                       		moveq	#100,d0
0001AE32 6100 0000                  		bsr.w	AddPoints
0001AE36 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AE3C 4E75                       		rts	
0001AE3E                            ; ===========================================================================
0001AE3E                            
0001AE3E                            loc_17FA0:
0001AE3E 70FE                       		moveq	#-2,d0
0001AE40 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AE46 6500                       		bcs.s	loc_17FB6
0001AE48 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AE4E 4268 0010                  		clr.w	obVelX(a0)
0001AE52 5240                       		addq.w	#1,d0
0001AE54                            
0001AE54                            loc_17FB6:
0001AE54 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AE5A 6E00                       		bgt.s	loc_17FCA
0001AE5C 317C 0500 0038             		move.w	#$500,$38(a0)
0001AE62 4268 0012                  		clr.w	obVelY(a0)
0001AE66 5240                       		addq.w	#1,d0
0001AE68                            
0001AE68                            loc_17FCA:
0001AE68 6600                       		bne.s	loc_17FDC
0001AE6A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AE70 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AE76 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AE7A                            
0001AE7A                            loc_17FDC:
0001AE7A 6000 FF5A                  		bra.w	loc_17F38
0001AE7E                            ; ===========================================================================
0001AE7E                            
0001AE7E                            loc_17FE0:
0001AE7E 70FE                       		moveq	#-2,d0
0001AE80 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AE86 6500                       		bcs.s	loc_17FF6
0001AE88 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AE8E 4268 0010                  		clr.w	obVelX(a0)
0001AE92 5240                       		addq.w	#1,d0
0001AE94                            
0001AE94                            loc_17FF6:
0001AE94 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AE9A 6E00                       		bgt.s	loc_1800A
0001AE9C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AEA2 4268 0012                  		clr.w	obVelY(a0)
0001AEA6 5240                       		addq.w	#1,d0
0001AEA8                            
0001AEA8                            loc_1800A:
0001AEA8 6600                       		bne.s	loc_1801A
0001AEAA 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AEB0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEB4 4228 003F                  		clr.b	$3F(a0)
0001AEB8                            
0001AEB8                            loc_1801A:
0001AEB8 6000 FF1C                  		bra.w	loc_17F38
0001AEBC                            ; ===========================================================================
0001AEBC                            
0001AEBC                            loc_1801E:
0001AEBC 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AEC2 6E00                       		bgt.s	loc_1804E
0001AEC4 317C 0100 0038             		move.w	#$100,$38(a0)
0001AECA 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AED0 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AED6 4A28 003D                  		tst.b	$3D(a0)
0001AEDA 6700                       		beq.s	loc_18046
0001AEDC E1E8 0010                  		asl	obVelX(a0)
0001AEE0 E1E8 0012                  		asl	obVelY(a0)
0001AEE4                            
0001AEE4                            loc_18046:
0001AEE4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEE8 6000 FEEC                  		bra.w	loc_17F38
0001AEEC                            ; ===========================================================================
0001AEEC                            
0001AEEC                            loc_1804E:
0001AEEC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AEF2 5428 003F                  		addq.b	#2,$3F(a0)
0001AEF6 1028 003F                  		move.b	$3F(a0),d0
0001AEFA 4EB9 0000 3A32             		jsr	(CalcSine).l
0001AF00 4A41                       		tst.w	d1
0001AF02 6A00                       		bpl.s	loc_1806C
0001AF04 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AF0A                            
0001AF0A                            loc_1806C:
0001AF0A E840                       		asr.w	#4,d0
0001AF0C 4840                       		swap	d0
0001AF0E 4240                       		clr.w	d0
0001AF10 D0A8 0030                  		add.l	$30(a0),d0
0001AF14 4840                       		swap	d0
0001AF16 3140 0008                  		move.w	d0,obX(a0)
0001AF1A 3028 0012                  		move.w	obVelY(a0),d0
0001AF1E 3238 D00C                  		move.w	(v_player+obY).w,d1
0001AF22 9268 000C                  		sub.w	obY(a0),d1
0001AF26 6500                       		bcs.s	loc_180A2
0001AF28 0441 0048                  		subi.w	#$48,d1
0001AF2C 6500                       		bcs.s	loc_180A2
0001AF2E E240                       		asr.w	#1,d0
0001AF30 0441 0028                  		subi.w	#$28,d1
0001AF34 6500                       		bcs.s	loc_180A2
0001AF36 E240                       		asr.w	#1,d0
0001AF38 0441 0028                  		subi.w	#$28,d1
0001AF3C 6500                       		bcs.s	loc_180A2
0001AF3E 7000                       		moveq	#0,d0
0001AF40                            
0001AF40                            loc_180A2:
0001AF40 48C0                       		ext.l	d0
0001AF42 E180                       		asl.l	#8,d0
0001AF44 4A28 003D                  		tst.b	$3D(a0)
0001AF48 6700                       		beq.s	loc_180AE
0001AF4A D080                       		add.l	d0,d0
0001AF4C                            
0001AF4C                            loc_180AE:
0001AF4C D1A8 0038                  		add.l	d0,$38(a0)
0001AF50 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AF56 6000 FE8E                  		bra.w	loc_17F48
0001AF5A                            ; ===========================================================================
0001AF5A                            
0001AF5A                            loc_180BC:
0001AF5A 70FE                       		moveq	#-2,d0
0001AF5C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001AF62 6500                       		bcs.s	loc_180D2
0001AF64 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001AF6A 4268 0010                  		clr.w	obVelX(a0)
0001AF6E 5240                       		addq.w	#1,d0
0001AF70                            
0001AF70                            loc_180D2:
0001AF70 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001AF76 6E00                       		bgt.s	loc_180E6
0001AF78 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001AF7E 4268 0012                  		clr.w	obVelY(a0)
0001AF82 5240                       		addq.w	#1,d0
0001AF84                            
0001AF84                            loc_180E6:
0001AF84 6600                       		bne.s	loc_180F2
0001AF86 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF8A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AF90                            
0001AF90                            loc_180F2:
0001AF90 6000 FE44                  		bra.w	loc_17F38
0001AF94                            ; ===========================================================================
0001AF94                            
0001AF94                            loc_180F6:
0001AF94 4A28 003D                  		tst.b	$3D(a0)
0001AF98 6600                       		bne.s	loc_18112
0001AF9A 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001AFA0 6D00                       		blt.s	loc_18126
0001AFA2 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001AFA8 6E00                       		bgt.s	loc_18126
0001AFAA 117C 0032 003C             		move.b	#$32,$3C(a0)
0001AFB0                            
0001AFB0                            loc_18112:
0001AFB0 4A38 FE2D                          tst.b     (v_invinc).w
0001AFB4 6600                               bne.s   @boss_invinc
0001AFB6                            
0001AFB6 1038 F5C6                          move.b   (v_Saved_music),d0
0001AFBA 6000 0000                          bra.w      @boss_play
0001AFBE                            
0001AFBE                            @boss_invinc:
0001AFBE 103C 0000                          move.b #bgm_Invincible,d0
0001AFC2                            
0001AFC2                            @boss_play:
0001AFC2 4EB8 124A                          jsr PlaySound
0001AFC6 4238 F7AA                          clr.b    (f_lockscreen).w
0001AFCA 08E8 0000 0022                     bset    #0,obStatus(a0)
0001AFD0 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001AFD4                            
0001AFD4                            loc_18126:
0001AFD4 6000 FE00                  		bra.w	loc_17F38
0001AFD8                            ; ===========================================================================
0001AFD8                            
0001AFD8                            loc_1812A:
0001AFD8 4A28 003D                  		tst.b	$3D(a0)
0001AFDC 6600                       		bne.s	loc_18136
0001AFDE 5328 003C                  		subq.b	#1,$3C(a0)
0001AFE2 6600                       		bne.s	loc_1814E
0001AFE4                            
0001AFE4                            loc_18136:
0001AFE4 4228 003C                  		clr.b	$3C(a0)
0001AFE8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AFEE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AFF4 4228 003D                  		clr.b	$3D(a0)
0001AFF8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AFFC                            
0001AFFC                            loc_1814E:
0001AFFC 6000 FDD8                  		bra.w	loc_17F38
0001B000                            ; ===========================================================================
0001B000                            
0001B000                            loc_18152:
0001B000 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B006 6400                       		bcc.s	loc_18160
0001B008 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B00C 6000                       		bra.s	loc_18166
0001B00E                            ; ===========================================================================
0001B00E                            
0001B00E                            loc_18160:
0001B00E 4A28 0001                  		tst.b	obRender(a0)
0001B012 6A00                       		bpl.s	Obj77_ShipDel
0001B014                            
0001B014                            loc_18166:
0001B014 6000 FDC0                  		bra.w	loc_17F38
0001B018                            ; ===========================================================================
0001B018                            
0001B018                            Obj77_ShipDel:
0001B018 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B01E                            ; ===========================================================================
0001B01E                            
0001B01E                            Obj77_FaceMain:	; Routine 4
0001B01E 2268 0034                  		movea.l	$34(a0),a1
0001B022 1011                       		move.b	(a1),d0
0001B024 B010                       		cmp.b	(a0),d0
0001B026 6600                       		bne.s	Obj77_FaceDel
0001B028 7000                       		moveq	#0,d0
0001B02A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B02E 7201                       		moveq	#1,d1
0001B030 4A28 003D                  		tst.b	$3D(a0)
0001B034 6700                       		beq.s	loc_1818C
0001B036 720A                       		moveq	#$A,d1
0001B038 6000                       		bra.s	loc_181A0
0001B03A                            ; ===========================================================================
0001B03A                            
0001B03A                            loc_1818C:
0001B03A 4A29 0020                  		tst.b	obColType(a1)
0001B03E 6600                       		bne.s	loc_18196
0001B040 7205                       		moveq	#5,d1
0001B042 6000                       		bra.s	loc_181A0
0001B044                            ; ===========================================================================
0001B044                            
0001B044                            loc_18196:
0001B044 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B04A 6500                       		bcs.s	loc_181A0
0001B04C 7204                       		moveq	#4,d1
0001B04E                            
0001B04E                            loc_181A0:
0001B04E 1141 001C                  		move.b	d1,obAnim(a0)
0001B052 0C00 000E                  		cmpi.b	#$E,d0
0001B056 6600                       		bne.s	loc_181B6
0001B058 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B05E 4A28 0001                  		tst.b	obRender(a0)
0001B062 6A00                       		bpl.s	Obj77_FaceDel
0001B064                            
0001B064                            loc_181B6:
0001B064 6000                       		bra.s	Obj77_Display
0001B066                            ; ===========================================================================
0001B066                            
0001B066                            Obj77_FaceDel:
0001B066 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B06C                            ; ===========================================================================
0001B06C                            
0001B06C                            Obj77_FlameMain:; Routine 6
0001B06C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B072 2268 0034                  		movea.l	$34(a0),a1
0001B076 1011                       		move.b	(a1),d0
0001B078 B010                       		cmp.b	(a0),d0
0001B07A 6600                       		bne.s	Obj77_FlameDel
0001B07C 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B082 6600                       		bne.s	loc_181F0
0001B084 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B08A 4A28 0001                  		tst.b	1(a0)
0001B08E 6A00                       		bpl.s	Obj77_FlameDel
0001B090 6000                       		bra.s	loc_181F0
0001B092                            ; ===========================================================================
0001B092 4A69 0010                  		tst.w	obVelX(a1)
0001B096 6700                       		beq.s	loc_181F0
0001B098 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B09E                            
0001B09E                            loc_181F0:
0001B09E 6000                       		bra.s	Obj77_Display
0001B0A0                            ; ===========================================================================
0001B0A0                            
0001B0A0                            Obj77_FlameDel:
0001B0A0 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B0A6                            ; ===========================================================================
0001B0A6                            
0001B0A6                            Obj77_Display:
0001B0A6 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001B0AC 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001B0B2 2268 0034                  		movea.l	$34(a0),a1
0001B0B6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B0BC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B0C2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B0C8 7003                       		moveq	#3,d0
0001B0CA C028 0022                  		and.b	obStatus(a0),d0
0001B0CE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B0D4 8128 0001                  		or.b	d0,obRender(a0)
0001B0D8 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001B0D8 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001B0DE                            		include	"_incObj\73 Boss - Marble.asm"
0001B0DE                            ; ---------------------------------------------------------------------------
0001B0DE                            ; Object 73 - Eggman (MZ)
0001B0DE                            ; ---------------------------------------------------------------------------
0001B0DE                            
0001B0DE                            BossMarble:
0001B0DE 7000                       		moveq	#0,d0
0001B0E0 1028 0024                  		move.b	obRoutine(a0),d0
0001B0E4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B0E8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B0EC                            ; ===========================================================================
0001B0EC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B0EE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B0F0 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B0F2 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B0F4 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B0F6                            
0001B0F6 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B0FA 0401 0200                  		dc.b 4,	1, $02, $00
0001B0FE 0607 0200                  		dc.b 6,	7, $02, $00
0001B102 0800 0180                  		dc.b 8,	0, $01, $80
0001B106                            ; ===========================================================================
0001B106                            
0001B106                            Obj73_Main:	; Routine 0
0001B106 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B10C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B112 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B118 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B11E 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B122 2248                       		movea.l	a0,a1
0001B124 7203                       		moveq	#3,d1
0001B126 6000                       		bra.s	Obj73_LoadBoss
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Obj73_Loop:
0001B128 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001B12E 6600                       		bne.s	Obj73_ShipMain
0001B130 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B134 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B13A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B140                            
0001B140                            Obj73_LoadBoss:
0001B140 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B146 4229 0025                  		clr.b	ob2ndRout(a1)
0001B14A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B14E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B152 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B156 237C 0001 AB84 0004        		move.l	#Map_Eggman,obMap(a1)
0001B15E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B164 137C 0004 0001             		move.b	#4,obRender(a1)
0001B16A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B170 2348 0034                  		move.l	a0,$34(a1)
0001B174 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B178                            
0001B178                            Obj73_ShipMain:	; Routine 2
0001B178 7000                       		moveq	#0,d0
0001B17A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B17E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B182 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B186 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001B18C 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001B192 7003                       		moveq	#3,d0
0001B194 C028 0022                  		and.b	obStatus(a0),d0
0001B198 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B19E 8128 0001                  		or.b	d0,obRender(a0)
0001B1A2 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001B1A8                            ; ===========================================================================
0001B1A8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B1AA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B1AC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B1AE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B1B0 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B1B2                            ; ===========================================================================
0001B1B2                            
0001B1B2                            loc_18302:
0001B1B2 1028 003F                  		move.b	$3F(a0),d0
0001B1B6 5428 003F                  		addq.b	#2,$3F(a0)
0001B1BA 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B1C0 E440                       		asr.w	#2,d0
0001B1C2 3140 0012                  		move.w	d0,obVelY(a0)
0001B1C6 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B1CC 6100 F552                  		bsr.w	BossMove
0001B1D0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B1D6 6600                       		bne.s	loc_18334
0001B1D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1DC 4228 0028                  		clr.b	obSubtype(a0)
0001B1E0 42A8 0010                  		clr.l	obVelX(a0)
0001B1E4                            
0001B1E4                            loc_18334:
0001B1E4 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B1EA 1140 0034                  		move.b	d0,$34(a0)
0001B1EE                            
0001B1EE                            loc_1833E:
0001B1EE 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B1F4 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B1FA 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B200 6400                       		bcc.s	locret_18390
0001B202 4A28 0022                  		tst.b	obStatus(a0)
0001B206 6B00                       		bmi.s	loc_18392
0001B208 4A28 0020                  		tst.b	obColType(a0)
0001B20C 6600                       		bne.s	locret_18390
0001B20E 4A28 003E                  		tst.b	$3E(a0)
0001B212 6600                       		bne.s	loc_18374
0001B214 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B224                            
0001B224                            loc_18374:
0001B224 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B228 7000                       		moveq	#0,d0
0001B22A 4A51                       		tst.w	(a1)
0001B22C 6600                       		bne.s	loc_18382
0001B22E 303C 0EEE                  		move.w	#cWhite,d0
0001B232                            
0001B232                            loc_18382:
0001B232 3280                       		move.w	d0,(a1)
0001B234 5328 003E                  		subq.b	#1,$3E(a0)
0001B238 6600                       		bne.s	locret_18390
0001B23A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B240                            
0001B240                            locret_18390:
0001B240 4E75                       		rts	
0001B242                            ; ===========================================================================
0001B242                            
0001B242                            loc_18392:
0001B242 7064                       		moveq	#100,d0
0001B244 6100 0000                  		bsr.w	AddPoints
0001B248 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B24E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B254 4268 0010                  		clr.w	obVelX(a0)
0001B258 4E75                       		rts	
0001B25A                            ; ===========================================================================
0001B25A                            
0001B25A                            loc_183AA:
0001B25A 7000                       		moveq	#0,d0
0001B25C 1028 0028                  		move.b	obSubtype(a0),d0
0001B260 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B264 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B268 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B26E 6000 FF7E                  		bra.w	loc_1833E
0001B272                            ; ===========================================================================
0001B272 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B274 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B276 0000                       		dc.w loc_183CA-off_183C2
0001B278 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B27A                            ; ===========================================================================
0001B27A                            
0001B27A                            loc_183CA:
0001B27A 4A68 0010                  		tst.w	obVelX(a0)
0001B27E 6600                       		bne.s	loc_183FE
0001B280 7040                       		moveq	#$40,d0
0001B282 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B288 6700                       		beq.s	loc_183E6
0001B28A 6500                       		bcs.s	loc_183DE
0001B28C 4440                       		neg.w	d0
0001B28E                            
0001B28E                            loc_183DE:
0001B28E 3140 0012                  		move.w	d0,obVelY(a0)
0001B292 6000 F48C                  		bra.w	BossMove
0001B296                            ; ===========================================================================
0001B296                            
0001B296                            loc_183E6:
0001B296 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B29C 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B2A2 0828 0000 0022             		btst	#0,obStatus(a0)
0001B2A8 6600                       		bne.s	loc_183FE
0001B2AA 4468 0010                  		neg.w	obVelX(a0)
0001B2AE                            
0001B2AE                            loc_183FE:
0001B2AE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B2B4 6400                       		bcc.s	Obj73_MakeLava
0001B2B6 6100 F468                  		bsr.w	BossMove
0001B2BA 5968 0012                  		subq.w	#4,obVelY(a0)
0001B2BE                            
0001B2BE                            Obj73_MakeLava:
0001B2BE 5328 0034                  		subq.b	#1,$34(a0)
0001B2C2 6400                       		bcc.s	loc_1845C
0001B2C4 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001B2CA 6600                       		bne.s	loc_1844A
0001B2CC 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B2D0 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B2D6 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B2DC 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B2E2 80FC 0050                  		divu.w	#$50,d0
0001B2E6 4840                       		swap	d0
0001B2E8 0640 1878                  		addi.w	#$1878,d0
0001B2EC 3340 0008                  		move.w	d0,obX(a1)
0001B2F0 EE09                       		lsr.b	#7,d1
0001B2F2 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B2F8                            
0001B2F8                            loc_1844A:
0001B2F8 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B2FE 0200 001F                  		andi.b	#$1F,d0
0001B302 0600 0040                  		addi.b	#$40,d0
0001B306 1140 0034                  		move.b	d0,$34(a0)
0001B30A                            
0001B30A                            loc_1845C:
0001B30A 0828 0000 0022             		btst	#0,obStatus(a0)
0001B310 6700                       		beq.s	loc_18474
0001B312 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B318 6D00                       		blt.s	locret_1849C
0001B31A 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B320 6000                       		bra.s	loc_18482
0001B322                            ; ===========================================================================
0001B322                            
0001B322                            loc_18474:
0001B322 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B328 6E00                       		bgt.s	locret_1849C
0001B32A 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B330                            
0001B330                            loc_18482:
0001B330 4268 0010                  		clr.w	obVelX(a0)
0001B334 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B33A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B340 6400                       		bcc.s	loc_18498
0001B342 4468 0012                  		neg.w	obVelY(a0)
0001B346                            
0001B346                            loc_18498:
0001B346 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B34A                            
0001B34A                            locret_1849C:
0001B34A 4E75                       		rts	
0001B34C                            ; ===========================================================================
0001B34C                            
0001B34C                            Obj73_MakeLava2:
0001B34C 6100 F3D2                  		bsr.w	BossMove
0001B350 3028 0038                  		move.w	$38(a0),d0
0001B354 0440 022C                  		subi.w	#$22C,d0
0001B358 6E00                       		bgt.s	locret_184F4
0001B35A 303C 022C                  		move.w	#$22C,d0
0001B35E 4A68 0012                  		tst.w	obVelY(a0)
0001B362 6700                       		beq.s	loc_184EA
0001B364 4268 0012                  		clr.w	obVelY(a0)
0001B368 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B36E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B374 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001B37A 6600                       		bne.s	loc_184EA
0001B37C 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B382 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B388 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B38E 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B392 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B398                            
0001B398                            loc_184EA:
0001B398 5368 003C                  		subq.w	#1,$3C(a0)
0001B39C 6600                       		bne.s	locret_184F4
0001B39E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B3A2                            
0001B3A2                            locret_184F4:
0001B3A2 4E75                       		rts	
0001B3A4                            ; ===========================================================================
0001B3A4                            
0001B3A4                            loc_184F6:
0001B3A4 5368 003C                  		subq.w	#1,$3C(a0)
0001B3A8 6B00                       		bmi.s	loc_18500
0001B3AA 6000 F332                  		bra.w	BossDefeated
0001B3AE                            ; ===========================================================================
0001B3AE                            
0001B3AE                            loc_18500:
0001B3AE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B3B4 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B3BA 4268 0010                  		clr.w	obVelX(a0)
0001B3BE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B3C2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B3C8 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B3CC 6600                       		bne.s	locret_1852A
0001B3CE 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B3D4 4268 0012                  		clr.w	obVelY(a0)
0001B3D8                            
0001B3D8                            locret_1852A:
0001B3D8 4E75                       		rts	
0001B3DA                            ; ===========================================================================
0001B3DA                            
0001B3DA                            loc_1852C:
0001B3DA 5268 003C                  		addq.w	#1,$3C(a0)
0001B3DE 6700                       		beq.s	loc_18544
0001B3E0 6A00                       		bpl.s	loc_1854E
0001B3E2 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B3E8 6400                       		bcc.s	loc_18544
0001B3EA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B3F0 6000                       		bra.s	loc_1857A
0001B3F2                            ; ===========================================================================
0001B3F2                            
0001B3F2                            loc_18544:
0001B3F2 4268 0012                  		clr.w	obVelY(a0)
0001B3F6 4268 003C                  		clr.w	$3C(a0)
0001B3FA 6000                       		bra.s	loc_1857A
0001B3FC                            ; ===========================================================================
0001B3FC                            
0001B3FC                            loc_1854E:
0001B3FC 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B402 6500                       		bcs.s	loc_18566
0001B404 6700                       		beq.s	loc_1856C
0001B406 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B40C 6500                       		bcs.s	loc_1857A
0001B40E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B412 6000                       		bra.s	loc_1857A
0001B414                            ; ===========================================================================
0001B414                            
0001B414                            loc_18566:
0001B414 5168 0012                  		subq.w	#8,obVelY(a0)
0001B418 6000                       		bra.s	loc_1857A
0001B41A                            ; ===========================================================================
0001B41A                            
0001B41A                            loc_1856C:
0001B41A 4268 0012                  		clr.w	obVelY(a0)
0001B428                            
0001B428                            loc_1857A:
0001B428 6100 F2F6                  		bsr.w	BossMove
0001B42C 6000 FDC0                  		bra.w	loc_1833E
0001B430                            ; ===========================================================================
0001B430                            
0001B430                            loc_18582:
0001B430 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B436 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B43C 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B442 6400                       		bcc.s	loc_1859C
0001B444 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B448 6000                       		bra.s	loc_185A2
0001B44A                            ; ===========================================================================
0001B44A                            
0001B44A                            loc_1859C:
0001B44A 4A28 0001                  		tst.b	obRender(a0)
0001B44E 6A00                       		bpl.s	Obj73_ShipDel
0001B450                            
0001B450                            loc_185A2:
0001B450 6100 F2CE                  		bsr.w	BossMove
0001B454 6000 FD98                  		bra.w	loc_1833E
0001B458                            ; ===========================================================================
0001B458                            
0001B458                            Obj73_ShipDel:
0001B458 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B45E                            ; ===========================================================================
0001B45E                            
0001B45E                            Obj73_FaceMain:	; Routine 4
0001B45E 7000                       		moveq	#0,d0
0001B460 7201                       		moveq	#1,d1
0001B462 2268 0034                  		movea.l	$34(a0),a1
0001B466 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B46A 5540                       		subq.w	#2,d0
0001B46C 6600                       		bne.s	loc_185D2
0001B46E 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B474 6700                       		beq.s	loc_185DA
0001B476 4A69 0012                  		tst.w	obVelY(a1)
0001B47A 6600                       		bne.s	loc_185DA
0001B47C 7204                       		moveq	#4,d1
0001B47E 6000                       		bra.s	loc_185EE
0001B480                            ; ===========================================================================
0001B480                            
0001B480                            loc_185D2:
0001B480 5500                       		subq.b	#2,d0
0001B482 6B00                       		bmi.s	loc_185DA
0001B484 720A                       		moveq	#$A,d1
0001B486 6000                       		bra.s	loc_185EE
0001B488                            ; ===========================================================================
0001B488                            
0001B488                            loc_185DA:
0001B488 4A29 0020                  		tst.b	obColType(a1)
0001B48C 6600                       		bne.s	loc_185E4
0001B48E 7205                       		moveq	#5,d1
0001B490 6000                       		bra.s	loc_185EE
0001B492                            ; ===========================================================================
0001B492                            
0001B492                            loc_185E4:
0001B492 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B498 6500                       		bcs.s	loc_185EE
0001B49A 7204                       		moveq	#4,d1
0001B49C                            
0001B49C                            loc_185EE:
0001B49C 1141 001C                  		move.b	d1,obAnim(a0)
0001B4A0 5900                       		subq.b	#4,d0
0001B4A2 6600                       		bne.s	loc_18602
0001B4A4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B4AA 4A28 0001                  		tst.b	obRender(a0)
0001B4AE 6A00                       		bpl.s	Obj73_FaceDel
0001B4B0                            
0001B4B0                            loc_18602:
0001B4B0 6000                       		bra.s	Obj73_Display
0001B4B2                            ; ===========================================================================
0001B4B2                            
0001B4B2                            Obj73_FaceDel:
0001B4B2 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B4B8                            ; ===========================================================================
0001B4B8                            
0001B4B8                            Obj73_FlameMain:; Routine 6
0001B4B8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B4BE 2268 0034                  		movea.l	$34(a0),a1
0001B4C2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B4C8 6D00                       		blt.s	loc_1862A
0001B4CA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B4D0 4A28 0001                  		tst.b	obRender(a0)
0001B4D4 6A00                       		bpl.s	Obj73_FlameDel
0001B4D6 6000                       		bra.s	loc_18636
0001B4D8                            ; ===========================================================================
0001B4D8                            
0001B4D8                            loc_1862A:
0001B4D8 4A69 0010                  		tst.w	obVelX(a1)
0001B4DC 6700                       		beq.s	loc_18636
0001B4DE 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B4E4                            
0001B4E4                            loc_18636:
0001B4E4 6000                       		bra.s	Obj73_Display
0001B4E6                            ; ===========================================================================
0001B4E6                            
0001B4E6                            Obj73_FlameDel:
0001B4E6 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            Obj73_Display:
0001B4EC 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001B4F2 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001B4F8                            
0001B4F8                            loc_1864A:
0001B4F8 2268 0034                  		movea.l	$34(a0),a1
0001B4FC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B502 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B508 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B50E 7003                       		moveq	#3,d0
0001B510 C028 0022                  		and.b	obStatus(a0),d0
0001B514 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B51A 8128 0001                  		or.b	d0,obRender(a0)
0001B51E 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001B524                            ; ===========================================================================
0001B524                            
0001B524                            Obj73_TubeMain:	; Routine 8
0001B524 2268 0034                  		movea.l	$34(a0),a1
0001B528 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B52E 6600                       		bne.s	loc_18688
0001B530 4A28 0001                  		tst.b	obRender(a0)
0001B534 6A00                       		bpl.s	Obj73_TubeDel
0001B536                            
0001B536                            loc_18688:
0001B536 217C 0001 AC74 0004        		move.l	#Map_BossItems,obMap(a0)
0001B53E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B544 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B54A 60AC                       		bra.s	loc_1864A
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            Obj73_TubeDel:
0001B54C 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B54C 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B552                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B552                            ; ---------------------------------------------------------------------------
0001B552                            ; Object 74 - lava that	Eggman drops (MZ)
0001B552                            ; ---------------------------------------------------------------------------
0001B552                            
0001B552                            BossFire:
0001B552 7000                       		moveq	#0,d0
0001B554 1028 0024                  		move.b	obRoutine(a0),d0
0001B558 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B55C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B560 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001B566                            ; ===========================================================================
0001B566 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B568 0000                       		dc.w Obj74_Action-Obj74_Index
0001B56A 0000                       		dc.w loc_18886-Obj74_Index
0001B56C 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B56E                            ; ===========================================================================
0001B56E                            
0001B56E                            Obj74_Main:	; Routine 0
0001B56E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B574 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B57A 217C 0000 D49A 0004        		move.l	#Map_Fire,obMap(a0)
0001B582 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B588 117C 0004 0001             		move.b	#4,obRender(a0)
0001B58E 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B594 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B59A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B5A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5A4 4A28 0028                  		tst.b	obSubtype(a0)
0001B5A8 6600                       		bne.s	loc_1870A
0001B5AA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B5B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5B4 6000 0000                  		bra.w	loc_18886
0001B5B8                            ; ===========================================================================
0001B5B8                            
0001B5B8                            loc_1870A:
0001B5B8 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B5C8                            
0001B5C8                            Obj74_Action:	; Routine 2
0001B5C8 7000                       		moveq	#0,d0
0001B5CA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B5CE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B5D2 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B5D6 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001B5DC 43F9 0001 0620             		lea	(Ani_Fire).l,a1
0001B5E2 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001B5E8 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B5EE 6200                       		bhi.s	Obj74_Delete
0001B5F0 4E75                       		rts	
0001B5F2                            ; ===========================================================================
0001B5F2                            
0001B5F2                            Obj74_Delete:
0001B5F2 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B5F8                            ; ===========================================================================
0001B5F8 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B5FA 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B5FC 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B5FE 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B600                            ; ===========================================================================
0001B600                            
0001B600                            Obj74_Drop:
0001B600 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B606 5328 0029                  		subq.b	#1,$29(a0)
0001B60A 6A00                       		bpl.s	locret_18780
0001B60C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B612 4228 0028                  		clr.b	obSubtype(a0)
0001B616 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B61C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B622 6100 C634                  		bsr.w	ObjFloorDist
0001B626 4A41                       		tst.w	d1
0001B628 6A00                       		bpl.s	locret_18780
0001B62A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B62E                            
0001B62E                            locret_18780:
0001B62E 4E75                       		rts	
0001B630                            ; ===========================================================================
0001B630                            
0001B630                            Obj74_MakeFlame:
0001B630 5568 000C                  		subq.w	#2,obY(a0)
0001B634 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B63A 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B640 4268 0012                  		clr.w	obVelY(a0)
0001B644 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B64A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B650 117C 0003 0029             		move.b	#3,$29(a0)
0001B656 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001B65C 6600                       		bne.s	loc_187CA
0001B65E 47D1                       		lea	(a1),a3
0001B660 45D0                       		lea	(a0),a2
0001B662 7003                       		moveq	#3,d0
0001B664                            
0001B664                            Obj74_Loop:
0001B664 26DA                       		move.l	(a2)+,(a3)+
0001B666 26DA                       		move.l	(a2)+,(a3)+
0001B668 26DA                       		move.l	(a2)+,(a3)+
0001B66A 26DA                       		move.l	(a2)+,(a3)+
0001B66C 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B670                            
0001B670 4469 0010                  		neg.w	obVelX(a1)
0001B674 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B678                            
0001B678                            loc_187CA:
0001B678 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B67C 4E75                       		rts	
0001B67E                            
0001B67E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B67E                            
0001B67E                            
0001B67E                            Obj74_Duplicate2:
0001B67E 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001B684 6600                       		bne.s	locret_187EE
0001B686 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B68C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B692 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B696 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B69C                            
0001B69C                            locret_187EE:
0001B69C 4E75                       		rts	
0001B69E                            ; End of function Obj74_Duplicate2
0001B69E                            
0001B69E                            ; ===========================================================================
0001B69E                            
0001B69E                            Obj74_Duplicate:
0001B69E 6100 C5B8                  		bsr.w	ObjFloorDist
0001B6A2 4A41                       		tst.w	d1
0001B6A4 6A00                       		bpl.s	loc_18826
0001B6A6 3028 0008                  		move.w	obX(a0),d0
0001B6AA 0C40 1940                  		cmpi.w	#$1940,d0
0001B6AE 6E00                       		bgt.s	loc_1882C
0001B6B0 3228 0030                  		move.w	$30(a0),d1
0001B6B4 B240                       		cmp.w	d0,d1
0001B6B6 6700                       		beq.s	loc_1881E
0001B6B8 0240 0010                  		andi.w	#$10,d0
0001B6BC 0241 0010                  		andi.w	#$10,d1
0001B6C0 B240                       		cmp.w	d0,d1
0001B6C2 6700                       		beq.s	loc_1881E
0001B6C4 61B8                       		bsr.s	Obj74_Duplicate2
0001B6C6 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B6CC                            
0001B6CC                            loc_1881E:
0001B6CC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B6D2 4E75                       		rts	
0001B6D4                            ; ===========================================================================
0001B6D4                            
0001B6D4                            loc_18826:
0001B6D4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6D8 4E75                       		rts	
0001B6DA                            ; ===========================================================================
0001B6DA                            
0001B6DA                            loc_1882C:
0001B6DA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6DE 4E75                       		rts	
0001B6E0                            ; ===========================================================================
0001B6E0                            
0001B6E0                            Obj74_FallEdge:
0001B6E0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B6E6 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B6EC 3028 0008                  		move.w	obX(a0),d0
0001B6F0 9068 0032                  		sub.w	$32(a0),d0
0001B6F4 6A00                       		bpl.s	loc_1884A
0001B6F6 4440                       		neg.w	d0
0001B6F8                            
0001B6F8                            loc_1884A:
0001B6F8 0C40 0012                  		cmpi.w	#$12,d0
0001B6FC 6600                       		bne.s	loc_18856
0001B6FE 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B704                            
0001B704                            loc_18856:
0001B704 6100 C552                  		bsr.w	ObjFloorDist
0001B708 4A41                       		tst.w	d1
0001B70A 6A00                       		bpl.s	locret_1887E
0001B70C 5328 0029                  		subq.b	#1,$29(a0)
0001B710 6700                       		beq.s	Obj74_Delete2
0001B712 4268 0012                  		clr.w	obVelY(a0)
0001B716 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B71C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B722 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B728 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B72C                            
0001B72C                            locret_1887E:
0001B72C 4E75                       		rts	
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            Obj74_Delete2:
0001B72E 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B734                            ; ===========================================================================
0001B734                            
0001B734                            loc_18886:	; Routine 4
0001B734 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B73A 5328 0029                  		subq.b	#1,$29(a0)
0001B73E 6600                       		bne.s	Obj74_Animate
0001B740 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B746 5968 000C                  		subq.w	#4,obY(a0)
0001B74A 4228 0020                  		clr.b	obColType(a0)
0001B74E                            
0001B74E                            Obj74_Animate:
0001B74E 43F9 0001 0620             		lea	(Ani_Fire).l,a1
0001B754 4EF9 0000 C848             		jmp	(AnimateSprite).l
0001B75A                            ; ===========================================================================
0001B75A                            
0001B75A                            Obj74_Delete3:	; Routine 6
0001B75A 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B75A 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B760                            
0001B760                            	Obj7A_Delete:
0001B760 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001B766                            
0001B766                            		include	"_incObj\7A Boss - Star Light.asm"
0001B766                            ; ---------------------------------------------------------------------------
0001B766                            ; Object 7A - Eggman (SLZ)
0001B766                            ; ---------------------------------------------------------------------------
0001B766                            
0001B766                            BossStarLight:
0001B766 7000                       		moveq	#0,d0
0001B768 1028 0024                  		move.b	obRoutine(a0),d0
0001B76C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B770 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B774                            ; ===========================================================================
0001B774 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B776 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B778 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B77A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B77C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B77E                            
0001B77E 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B782 0401 0200                  		dc.b 4,	1, $02, $00
0001B786 0607 0200                  		dc.b 6,	7, $02, $00
0001B78A 0800 0180                  		dc.b 8,	0, $01, $80
0001B78E                            ; ===========================================================================
0001B78E                            
0001B78E                            Obj7A_Main:
0001B78E 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B794 317C 0228 000C             		move.w	#$228,obY(a0)
0001B79A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7A0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B7A6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B7AC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B7B2 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B7B6 2248                       		movea.l	a0,a1
0001B7B8 7203                       		moveq	#3,d1
0001B7BA 6000                       		bra.s	Obj7A_LoadBoss
0001B7BC                            ; ===========================================================================
0001B7BC                            
0001B7BC                            Obj7A_Loop:
0001B7BC 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001B7C2 6600                       		bne.s	loc_1895C
0001B7C4 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B7C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B7CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B7D4                            
0001B7D4                            Obj7A_LoadBoss:
0001B7D4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B7DA 4229 0025                  		clr.b	ob2ndRout(a1)
0001B7DE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B7E2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B7E6 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B7EA 237C 0001 AB84 0004        		move.l	#Map_Eggman,obMap(a1)
0001B7F2 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B7F8 137C 0004 0001             		move.b	#4,obRender(a1)
0001B7FE 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B804 2348 0034                  		move.l	a0,$34(a1)
0001B808 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B80C                            
0001B80C                            loc_1895C:
0001B80C 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B810 45E8 002A                  		lea	$2A(a0),a2
0001B814 705E                       		moveq	#$5E,d0
0001B816 723E                       		moveq	#$3E,d1
0001B818                            
0001B818                            loc_18968:
0001B818 B011                       		cmp.b	(a1),d0
0001B81A 6600                       		bne.s	loc_18974
0001B81C 4A29 0028                  		tst.b	obSubtype(a1)
0001B820 6700                       		beq.s	loc_18974
0001B822 34C9                       		move.w	a1,(a2)+
0001B824                            
0001B824                            loc_18974:
0001B824 D2FC 0040                  		adda.w	#$40,a1
0001B828 51C9 FFEE                  		dbf	d1,loc_18968
0001B82C                            
0001B82C                            Obj7A_ShipMain:	; Routine 2
0001B82C 7000                       		moveq	#0,d0
0001B82E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B832 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B836 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B83A 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001B840 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001B846 7003                       		moveq	#3,d0
0001B848 C028 0022                  		and.b	obStatus(a0),d0
0001B84C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B852 8128 0001                  		or.b	d0,obRender(a0)
0001B856 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001B85C                            ; ===========================================================================
0001B85C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B85E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B860 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B862 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B864 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B866 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B868                            ; ===========================================================================
0001B868                            
0001B868                            loc_189B8:
0001B868 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B86E 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B874 6400                       		bcc.s	loc_189CA
0001B876 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B87A                            
0001B87A                            loc_189CA:
0001B87A 6100 EEA4                  		bsr.w	BossMove
0001B87E 1028 003F                  		move.b	$3F(a0),d0
0001B882 5428 003F                  		addq.b	#2,$3F(a0)
0001B886 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B88C EC40                       		asr.w	#6,d0
0001B88E D068 0038                  		add.w	$38(a0),d0
0001B892 3140 000C                  		move.w	d0,obY(a0)
0001B896 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B89C 6000                       		bra.s	loc_189FE
0001B89E                            ; ===========================================================================
0001B89E                            
0001B89E                            loc_189EE:
0001B89E 6100 EE80                  		bsr.w	BossMove
0001B8A2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B8A8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B8AE                            
0001B8AE                            loc_189FE:
0001B8AE 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B8B4 6400                       		bcc.s	locret_18A44
0001B8B6 4A28 0022                  		tst.b	obStatus(a0)
0001B8BA 6B00                       		bmi.s	loc_18A46
0001B8BC 4A28 0020                  		tst.b	obColType(a0)
0001B8C0 6600                       		bne.s	locret_18A44
0001B8C2 4A28 003E                  		tst.b	$3E(a0)
0001B8C6 6600                       		bne.s	loc_18A28
0001B8C8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B8D8                            
0001B8D8                            loc_18A28:
0001B8D8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B8DC 7000                       		moveq	#0,d0
0001B8DE 4A51                       		tst.w	(a1)
0001B8E0 6600                       		bne.s	loc_18A36
0001B8E2 303C 0EEE                  		move.w	#cWhite,d0
0001B8E6                            
0001B8E6                            loc_18A36:
0001B8E6 3280                       		move.w	d0,(a1)
0001B8E8 5328 003E                  		subq.b	#1,$3E(a0)
0001B8EC 6600                       		bne.s	locret_18A44
0001B8EE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B8F4                            
0001B8F4                            locret_18A44:
0001B8F4 4E75                       		rts	
0001B8F6                            ; ===========================================================================
0001B8F6                            
0001B8F6                            loc_18A46:
0001B8F6 7064                       		moveq	#100,d0
0001B8F8 6100 0000                  		bsr.w	AddPoints
0001B8FC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001B902 117C 0078 003C             		move.b	#$78,$3C(a0)
0001B908 4268 0010                  		clr.w	obVelX(a0)
0001B90C 4E75                       		rts	
0001B90E                            ; ===========================================================================
0001B90E                            
0001B90E                            loc_18A5E:
0001B90E 3028 0030                  		move.w	$30(a0),d0
0001B912 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B918 0828 0000 0022             		btst	#0,obStatus(a0)
0001B91E 6600                       		bne.s	loc_18A7C
0001B920 4468 0010                  		neg.w	obVelX(a0)
0001B924 0C40 2008                  		cmpi.w	#$2008,d0
0001B928 6E00                       		bgt.s	loc_18A88
0001B92A 6000                       		bra.s	loc_18A82
0001B92C                            ; ===========================================================================
0001B92C                            
0001B92C                            loc_18A7C:
0001B92C 0C40 2138                  		cmpi.w	#$2138,d0
0001B930 6D00                       		blt.s	loc_18A88
0001B932                            
0001B932                            loc_18A82:
0001B932 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B938                            
0001B938                            loc_18A88:
0001B938 3028 0008                  		move.w	8(a0),d0
0001B93C 72FF                       		moveq	#-1,d1
0001B93E 7402                       		moveq	#2,d2
0001B940 45E8 002A                  		lea	$2A(a0),a2
0001B944 7828                       		moveq	#$28,d4
0001B946 4A68 0010                  		tst.w	obVelX(a0)
0001B94A 6A00                       		bpl.s	loc_18A9E
0001B94C 4444                       		neg.w	d4
0001B94E                            
0001B94E                            loc_18A9E:
0001B94E 321A                       		move.w	(a2)+,d1
0001B950 2641                       		movea.l	d1,a3
0001B952 082B 0003 0022             		btst	#3,obStatus(a3)
0001B958 6600                       		bne.s	loc_18AB4
0001B95A 362B 0008                  		move.w	8(a3),d3
0001B95E D644                       		add.w	d4,d3
0001B960 9640                       		sub.w	d0,d3
0001B962 6700                       		beq.s	loc_18AC0
0001B964                            
0001B964                            loc_18AB4:
0001B964 51CA FFE8                  		dbf	d2,loc_18A9E
0001B968                            
0001B968 1142 0028                  		move.b	d2,obSubtype(a0)
0001B96C 6000 FF0C                  		bra.w	loc_189CA
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            loc_18AC0:
0001B970 1142 0028                  		move.b	d2,obSubtype(a0)
0001B974 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B978 117C 0028 003C             		move.b	#$28,$3C(a0)
0001B97E 6000 FEFA                  		bra.w	loc_189CA
0001B982                            ; ===========================================================================
0001B982                            
0001B982                            Obj7A_MakeBall:
0001B982 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001B988 6600                       		bne.s	loc_18B36
0001B98A 70FF                       		moveq	#-1,d0
0001B98C 1028 0028                  		move.b	obSubtype(a0),d0
0001B990 4880                       		ext.w	d0
0001B992 6B00                       		bmi.s	loc_18B40
0001B994 5540                       		subq.w	#2,d0
0001B996 4440                       		neg.w	d0
0001B998 D040                       		add.w	d0,d0
0001B99A 43E8 002A                  		lea	$2A(a0),a1
0001B99E 3031 0000                  		move.w	(a1,d0.w),d0
0001B9A2 2440                       		movea.l	d0,a2
0001B9A4 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B9A8 723E                       		moveq	#$3E,d1
0001B9AA                            
0001B9AA                            loc_18AFA:
0001B9AA B0A9 003C                  		cmp.l	$3C(a1),d0
0001B9AE 6700                       		beq.s	loc_18B40
0001B9B0 D2FC 0040                  		adda.w	#$40,a1
0001B9B4 51C9 FFF4                  		dbf	d1,loc_18AFA
0001B9B8                            
0001B9B8 2F08                       		move.l	a0,-(sp)
0001B9BA 41D2                       		lea	(a2),a0
0001B9BC 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001B9C2 205F                       		movea.l	(sp)+,a0
0001B9C4 6600                       		bne.s	loc_18B40
0001B9C6 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001B9CA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B9D0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B9D6 0669 0020 000C             		addi.w	#$20,obY(a1)
0001B9DC 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001B9E2 234A 003C                  		move.l	a2,$3C(a1)
0001B9E6                            
0001B9E6                            loc_18B36:
0001B9E6 5328 003C                  		subq.b	#1,$3C(a0)
0001B9EA 6700                       		beq.s	loc_18B40
0001B9EC 6000 FEC0                  		bra.w	loc_189FE
0001B9F0                            ; ===========================================================================
0001B9F0                            
0001B9F0                            loc_18B40:
0001B9F0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B9F4 6000 FE84                  		bra.w	loc_189CA
0001B9F8                            ; ===========================================================================
0001B9F8                            
0001B9F8                            loc_18B48:
0001B9F8 5328 003C                  		subq.b	#1,$3C(a0)
0001B9FC 6B00                       		bmi.s	loc_18B52
0001B9FE 6000 ECDE                  		bra.w	BossDefeated
0001BA02                            ; ===========================================================================
0001BA02                            
0001BA02                            loc_18B52:
0001BA02 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA06 4268 0012                  		clr.w	obVelY(a0)
0001BA0A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BA10 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BA16 4268 0010                  		clr.w	obVelX(a0)
0001BA1A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BA20 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BA24 6600                       		bne.s	loc_18B7C
0001BA26 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BA2C                            
0001BA2C                            loc_18B7C:
0001BA2C 6000 FE80                  		bra.w	loc_189FE
0001BA30                            ; ===========================================================================
0001BA30                            
0001BA30                            loc_18B80:
0001BA30 5228 003C                  		addq.b	#1,$3C(a0)
0001BA34 6700                       		beq.s	loc_18B90
0001BA36 6A00                       		bpl.s	loc_18B96
0001BA38 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BA3E 6000                       		bra.s	loc_18BC2
0001BA40                            ; ===========================================================================
0001BA40                            
0001BA40                            loc_18B90:
0001BA40 4268 0012                  		clr.w	obVelY(a0)
0001BA44 6000                       		bra.s	loc_18BC2
0001BA46                            ; ===========================================================================
0001BA46                            
0001BA46                            loc_18B96:
0001BA46 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BA4C 6500                       		bcs.s	loc_18BAE
0001BA4E 6700                       		beq.s	loc_18BB4
0001BA50 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BA56 6500                       		bcs.s	loc_18BC2
0001BA58 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA5C 6000                       		bra.s	loc_18BC2
0001BA5E                            ; ===========================================================================
0001BA5E                            
0001BA5E                            loc_18BAE:
0001BA5E 5168 0012                  		subq.w	#8,obVelY(a0)
0001BA62 6000                       		bra.s	loc_18BC2
0001BA64                            ; ===========================================================================
0001BA64                            
0001BA64                            loc_18BB4:
0001BA64 4268 0012                          	clr.w    obVelY(a0)
0001BA68 4A38 FE2D                          	tst.b     (v_invinc).w
0001BA6C 6600                               	bne.s   @boss_invinc
0001BA6E                            
0001BA6E 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BA72 6000 0000                          	bra.w      @boss_play
0001BA76                            
0001BA76                            	@boss_invinc:
0001BA76 103C 0000                          	move.b #bgm_Invincible,d0
0001BA7A                            
0001BA7A                            	@boss_play:
0001BA7A 4EB8 124A                          	jsr PlaySound
0001BA7E                            
0001BA7E                            loc_18BC2:
0001BA7E 6000 FE1E                  		bra.w	loc_189EE
0001BA82                            ; ===========================================================================
0001BA82                            
0001BA82                            loc_18BC6:
0001BA82 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BA88 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BA8E 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BA94 6400                       		bcc.s	loc_18BE0
0001BA96 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BA9A 6000                       		bra.s	loc_18BE8
0001BA9C                            ; ===========================================================================
0001BA9C                            
0001BA9C                            loc_18BE0:
0001BA9C 4A28 0001                  		tst.b	obRender(a0)
0001BAA0 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BAA4                            
0001BAA4                            loc_18BE8:
0001BAA4 6100 EC7A                  		bsr.w	BossMove
0001BAA8 6000 FDD0                  		bra.w	loc_189CA
0001BAAC                            ; ===========================================================================
0001BAAC                            
0001BAAC                            Obj7A_FaceMain:	; Routine 4
0001BAAC 7000                       		moveq	#0,d0
0001BAAE 7201                       		moveq	#1,d1
0001BAB0 2268 0034                  		movea.l	$34(a0),a1
0001BAB4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BAB8 0C00 0006                  		cmpi.b	#6,d0
0001BABC 6B00                       		bmi.s	loc_18C06
0001BABE 720A                       		moveq	#$A,d1
0001BAC0 6000                       		bra.s	loc_18C1A
0001BAC2                            ; ===========================================================================
0001BAC2                            
0001BAC2                            loc_18C06:
0001BAC2 4A29 0020                  		tst.b	obColType(a1)
0001BAC6 6600                       		bne.s	loc_18C10
0001BAC8 7205                       		moveq	#5,d1
0001BACA 6000                       		bra.s	loc_18C1A
0001BACC                            ; ===========================================================================
0001BACC                            
0001BACC                            loc_18C10:
0001BACC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BAD2 6500                       		bcs.s	loc_18C1A
0001BAD4 7204                       		moveq	#4,d1
0001BAD6                            
0001BAD6                            loc_18C1A:
0001BAD6 1141 001C                  		move.b	d1,obAnim(a0)
0001BADA 0C00 000A                  		cmpi.b	#$A,d0
0001BADE 6600                       		bne.s	loc_18C32
0001BAE0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BAE6 4A28 0001                  		tst.b	obRender(a0)
0001BAEA 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BAEE                            
0001BAEE                            loc_18C32:
0001BAEE 6000                       		bra.s	loc_18C6C
0001BAF0                            ; ===========================================================================
0001BAF0                            
0001BAF0                            Obj7A_FlameMain:; Routine 6
0001BAF0 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BAF6 2268 0034                  		movea.l	$34(a0),a1
0001BAFA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB00 6600                       		bne.s	loc_18C56
0001BB02 4A28 0001                  		tst.b	obRender(a0)
0001BB06 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BB0A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BB10 6000                       		bra.s	loc_18C6C
0001BB12                            ; ===========================================================================
0001BB12                            
0001BB12                            loc_18C56:
0001BB12 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BB18 6E00                       		bgt.s	loc_18C6C
0001BB1A 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BB20 6D00                       		blt.s	loc_18C6C
0001BB22 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BB28                            
0001BB28                            loc_18C6C:
0001BB28 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001BB2E 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001BB34                            
0001BB34                            loc_18C78:
0001BB34 2268 0034                  		movea.l	$34(a0),a1
0001BB38 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BB3E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BB44 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BB4A 7003                       		moveq	#3,d0
0001BB4C C028 0022                  		and.b	obStatus(a0),d0
0001BB50 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB56 8128 0001                  		or.b	d0,obRender(a0)
0001BB5A 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001BB60                            ; ===========================================================================
0001BB60                            
0001BB60                            Obj7A_TubeMain:	; Routine 8
0001BB60 2268 0034                  		movea.l	$34(a0),a1
0001BB64 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB6A 6600                       		bne.s	loc_18CB8
0001BB6C 4A28 0001                  		tst.b	obRender(a0)
0001BB70 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BB74                            
0001BB74                            loc_18CB8:
0001BB74 217C 0001 AC74 0004        		move.l	#Map_BossItems,obMap(a0)
0001BB7C 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BB82 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BB88 60AA                       		bra.s	loc_18C78
0001BB88 60AA                       		bra.s	loc_18C78
0001BB8A                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BB8A                            ; ---------------------------------------------------------------------------
0001BB8A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BB8A                            ; ---------------------------------------------------------------------------
0001BB8A                            
0001BB8A                            BossSpikeball:
0001BB8A 7000                       		moveq	#0,d0
0001BB8C 1028 0024                  		move.b	obRoutine(a0),d0
0001BB90 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BB94 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BB98 3028 0030                  		move.w	$30(a0),d0
0001BB9C 0240 FF80                  		andi.w	#$FF80,d0
0001BBA0 3238 F700                  		move.w	(v_screenposx).w,d1
0001BBA4 0441 0080                  		subi.w	#$80,d1
0001BBA8 0241 FF80                  		andi.w	#$FF80,d1
0001BBAC 9041                       		sub.w	d1,d0
0001BBAE 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BBB2 0C40 0280                  		cmpi.w	#$280,d0
0001BBB6 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BBBA 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001BBC0                            ; ===========================================================================
0001BBC0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BBC2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BBC4 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BBC6 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BBC8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BBCA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BBCC                            ; ===========================================================================
0001BBCC                            
0001BBCC                            Obj7B_Main:	; Routine 0
0001BBCC 217C 0001 3BD0 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BBD4 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BBDA 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BBE0 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BBE6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BBEC 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BBF2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BBF8 2268 003C                  		movea.l	$3C(a0),a1
0001BBFC 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BC02 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BC08 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC0E 3028 0008                  		move.w	obX(a0),d0
0001BC12 B069 0008                  		cmp.w	obX(a1),d0
0001BC16 6E00                       		bgt.s	loc_18D68
0001BC18 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC1E 117C 0002 003A             		move.b	#2,$3A(a0)
0001BC24                            
0001BC24                            loc_18D68:
0001BC24 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BC28                            
0001BC28                            Obj7B_Fall:	; Routine 2
0001BC28 4EB9 0000 F714             		jsr	(ObjectFall).l
0001BC2E 2268 003C                  		movea.l	$3C(a0),a1
0001BC32 45F9 0000 0000             		lea	(word_19018).l,a2
0001BC38 7000                       		moveq	#0,d0
0001BC3A 1029 001A                  		move.b	obFrame(a1),d0
0001BC3E 3228 0008                  		move.w	8(a0),d1
0001BC42 9268 0030                  		sub.w	$30(a0),d1
0001BC46 6400                       		bcc.s	loc_18D8E
0001BC48 5440                       		addq.w	#2,d0
0001BC4A                            
0001BC4A                            loc_18D8E:
0001BC4A D040                       		add.w	d0,d0
0001BC4C 3228 0034                  		move.w	$34(a0),d1
0001BC50 D272 0000                  		add.w	(a2,d0.w),d1
0001BC54 B268 000C                  		cmp.w	obY(a0),d1
0001BC58 6E00                       		bgt.s	locret_18DC4
0001BC5A 2268 003C                  		movea.l	$3C(a0),a1
0001BC5E 7202                       		moveq	#2,d1
0001BC60 0828 0000 0022             		btst	#0,obStatus(a0)
0001BC66 6700                       		beq.s	loc_18DAE
0001BC68 7200                       		moveq	#0,d1
0001BC6A                            
0001BC6A                            loc_18DAE:
0001BC6A 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BC70 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BC76 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BC7C 6000 0000                  		bra.w	loc_18FA2
0001BC80                            ; ===========================================================================
0001BC80                            
0001BC80                            locret_18DC4:
0001BC80 4E75                       		rts	
0001BC82                            ; ===========================================================================
0001BC82                            
0001BC82                            loc_18DC6:	; Routine 4
0001BC82 2268 003C                  		movea.l	$3C(a0),a1
0001BC86 7000                       		moveq	#0,d0
0001BC88 1028 003A                  		move.b	$3A(a0),d0
0001BC8C 9029 003A                  		sub.b	$3A(a1),d0
0001BC90 6700                       		beq.s	loc_18E2A
0001BC92 6400                       		bcc.s	loc_18DDA
0001BC94 4400                       		neg.b	d0
0001BC96                            
0001BC96                            loc_18DDA:
0001BC96 323C F7E8                  		move.w	#-$818,d1
0001BC9A 343C FEEC                  		move.w	#-$114,d2
0001BC9E 0C00 0001                  		cmpi.b	#1,d0
0001BCA2 6700                       		beq.s	loc_18E00
0001BCA4 323C F6A0                  		move.w	#-$960,d1
0001BCA8 343C FF0C                  		move.w	#-$F4,d2
0001BCAC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BCB2 6D00                       		blt.s	loc_18E00
0001BCB4 323C F5E0                  		move.w	#-$A20,d1
0001BCB8 343C FF80                  		move.w	#-$80,d2
0001BCBC                            
0001BCBC                            loc_18E00:
0001BCBC 3141 0012                  		move.w	d1,obVelY(a0)
0001BCC0 3142 0010                  		move.w	d2,obVelX(a0)
0001BCC4 3028 0008                  		move.w	obX(a0),d0
0001BCC8 9068 0030                  		sub.w	$30(a0),d0
0001BCCC 6400                       		bcc.s	loc_18E16
0001BCCE 4468 0010                  		neg.w	obVelX(a0)
0001BCD2                            
0001BCD2                            loc_18E16:
0001BCD2 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BCD8 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BCDE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BCE2 6000 0000                  		bra.w	loc_18EAA
0001BCE6                            ; ===========================================================================
0001BCE6                            
0001BCE6                            loc_18E2A:
0001BCE6 45F9 0000 0000             		lea	(word_19018).l,a2
0001BCEC 7000                       		moveq	#0,d0
0001BCEE 1029 001A                  		move.b	obFrame(a1),d0
0001BCF2 343C 0028                  		move.w	#$28,d2
0001BCF6 3228 0008                  		move.w	obX(a0),d1
0001BCFA 9268 0030                  		sub.w	$30(a0),d1
0001BCFE 6400                       		bcc.s	loc_18E48
0001BD00 4442                       		neg.w	d2
0001BD02 5440                       		addq.w	#2,d0
0001BD04                            
0001BD04                            loc_18E48:
0001BD04 D040                       		add.w	d0,d0
0001BD06 3228 0034                  		move.w	$34(a0),d1
0001BD0A D272 0000                  		add.w	(a2,d0.w),d1
0001BD0E 3141 000C                  		move.w	d1,obY(a0)
0001BD12 D468 0030                  		add.w	$30(a0),d2
0001BD16 3142 0008                  		move.w	d2,obX(a0)
0001BD1A 4268 000E                  		clr.w	obY+2(a0)
0001BD1E 4268 000A                  		clr.w	obX+2(a0)
0001BD22 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BD26 6600                       		bne.s	loc_18E7A
0001BD28 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BD2E 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BD34 4E75                       		rts	
0001BD36                            ; ===========================================================================
0001BD36                            
0001BD36                            loc_18E7A:
0001BD36 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BD3C 6600                       		bne.s	loc_18E88
0001BD3E 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BD44                            
0001BD44                            loc_18E88:
0001BD44 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BD4A 6600                       		bne.s	loc_18E96
0001BD4C 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BD52                            
0001BD52                            loc_18E96:
0001BD52 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BD56 6E00                       		bgt.s	locret_18EA8
0001BD58 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BD5E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BD64                            
0001BD64                            locret_18EA8:
0001BD64 4E75                       		rts	
0001BD66                            ; ===========================================================================
0001BD66                            
0001BD66                            loc_18EAA:	; Routine 6
0001BD66 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BD6A 707A                       		moveq	#id_BossStarLight,d0
0001BD6C 7240                       		moveq	#$40,d1
0001BD6E 743E                       		moveq	#$3E,d2
0001BD70                            
0001BD70                            loc_18EB4:
0001BD70 B011                       		cmp.b	(a1),d0
0001BD72 6700                       		beq.s	loc_18EC0
0001BD74 D2C1                       		adda.w	d1,a1
0001BD76 51CA FFF8                  		dbf	d2,loc_18EB4
0001BD7A                            
0001BD7A 6000                       		bra.s	loc_18F38
0001BD7C                            ; ===========================================================================
0001BD7C                            
0001BD7C                            loc_18EC0:
0001BD7C 3029 0008                  		move.w	obX(a1),d0
0001BD80 3229 000C                  		move.w	obY(a1),d1
0001BD84 3428 0008                  		move.w	obX(a0),d2
0001BD88 3628 000C                  		move.w	obY(a0),d3
0001BD8C 45FA 0000                  		lea	byte_19022(pc),a2
0001BD90 47FA 0000                  		lea	byte_19026(pc),a3
0001BD94 181A                       		move.b	(a2)+,d4
0001BD96 4884                       		ext.w	d4
0001BD98 D044                       		add.w	d4,d0
0001BD9A 181B                       		move.b	(a3)+,d4
0001BD9C 4884                       		ext.w	d4
0001BD9E D444                       		add.w	d4,d2
0001BDA0 B440                       		cmp.w	d0,d2
0001BDA2 6500                       		bcs.s	loc_18F38
0001BDA4 181A                       		move.b	(a2)+,d4
0001BDA6 4884                       		ext.w	d4
0001BDA8 D044                       		add.w	d4,d0
0001BDAA 181B                       		move.b	(a3)+,d4
0001BDAC 4884                       		ext.w	d4
0001BDAE D444                       		add.w	d4,d2
0001BDB0 B042                       		cmp.w	d2,d0
0001BDB2 6500                       		bcs.s	loc_18F38
0001BDB4 181A                       		move.b	(a2)+,d4
0001BDB6 4884                       		ext.w	d4
0001BDB8 D244                       		add.w	d4,d1
0001BDBA 181B                       		move.b	(a3)+,d4
0001BDBC 4884                       		ext.w	d4
0001BDBE D644                       		add.w	d4,d3
0001BDC0 B641                       		cmp.w	d1,d3
0001BDC2 6500                       		bcs.s	loc_18F38
0001BDC4 181A                       		move.b	(a2)+,d4
0001BDC6 4884                       		ext.w	d4
0001BDC8 D244                       		add.w	d4,d1
0001BDCA 181B                       		move.b	(a3)+,d4
0001BDCC 4884                       		ext.w	d4
0001BDCE D644                       		add.w	d4,d3
0001BDD0 B243                       		cmp.w	d3,d1
0001BDD2 6500                       		bcs.s	loc_18F38
0001BDD4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDD8 4268 0028                  		clr.w	obSubtype(a0)
0001BDDC 4229 0020                  		clr.b	obColType(a1)
0001BDE0 5329 0021                  		subq.b	#1,obColProp(a1)
0001BDE4 6600                       		bne.s	loc_18F38
0001BDE6 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BDEC 4268 0010                  		clr.w	obVelX(a0)
0001BDF0 4268 0012                  		clr.w	obVelY(a0)
0001BDF4                            
0001BDF4                            loc_18F38:
0001BDF4 4A68 0012                  		tst.w	obVelY(a0)
0001BDF8 6A00                       		bpl.s	loc_18F5C
0001BDFA 4EB9 0000 F714             		jsr	(ObjectFall).l
0001BE00 3028 0034                  		move.w	$34(a0),d0
0001BE04 0440 002F                  		subi.w	#$2F,d0
0001BE08 B068 000C                  		cmp.w	obY(a0),d0
0001BE0C 6E00                       		bgt.s	loc_18F58
0001BE0E 4EB9 0000 F714             		jsr	(ObjectFall).l
0001BE14                            
0001BE14                            loc_18F58:
0001BE14 6000 FF20                  		bra.w	loc_18E7A
0001BE18                            ; ===========================================================================
0001BE18                            
0001BE18                            loc_18F5C:
0001BE18 4EB9 0000 F714             		jsr	(ObjectFall).l
0001BE1E 2268 003C                  		movea.l	$3C(a0),a1
0001BE22 45F9 0000 0000             		lea	(word_19018).l,a2
0001BE28 7000                       		moveq	#0,d0
0001BE2A 1029 001A                  		move.b	obFrame(a1),d0
0001BE2E 3228 0008                  		move.w	obX(a0),d1
0001BE32 9268 0030                  		sub.w	$30(a0),d1
0001BE36 6400                       		bcc.s	loc_18F7E
0001BE38 5440                       		addq.w	#2,d0
0001BE3A                            
0001BE3A                            loc_18F7E:
0001BE3A D040                       		add.w	d0,d0
0001BE3C 3228 0034                  		move.w	$34(a0),d1
0001BE40 D272 0000                  		add.w	(a2,d0.w),d1
0001BE44 B268 000C                  		cmp.w	obY(a0),d1
0001BE48 6ECA                       		bgt.s	loc_18F58
0001BE4A 2268 003C                  		movea.l	$3C(a0),a1
0001BE4E 7202                       		moveq	#2,d1
0001BE50 4A68 0010                  		tst.w	obVelX(a0)
0001BE54 6B00                       		bmi.s	loc_18F9C
0001BE56 7200                       		moveq	#0,d1
0001BE58                            
0001BE58                            loc_18F9C:
0001BE58 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BE5E                            
0001BE5E                            loc_18FA2:
0001BE5E 1341 003A                  		move.b	d1,$3A(a1)
0001BE62 1141 003A                  		move.b	d1,$3A(a0)
0001BE66 B229 001A                  		cmp.b	obFrame(a1),d1
0001BE6A 6700                       		beq.s	loc_19008
0001BE6C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BE72 6700                       		beq.s	loc_19008
0001BE74 4229 0025                  		clr.b	ob2ndRout(a1)
0001BE78 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BE7E 45F8 D000                  		lea	(v_objspace).w,a2
0001BE82 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BE88 446A 0012                  		neg.w	obVelY(a2)
0001BE8C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BE92 6600                       		bne.s	loc_18FDC
0001BE94 E0EA 0012                  		asr	obVelY(a2)
0001BE98                            
0001BE98                            loc_18FDC:
0001BE98 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BE9E 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BEA4 422A 003C                  		clr.b	$3C(a2)
0001BEA8 2F08                       		move.l	a0,-(sp)
0001BEAA 41D2                       		lea	(a2),a0
0001BEAC 4EB9 0001 5D48             		jsr	(Sonic_ChkRoll).l
0001BEB2 205F                       		movea.l	(sp)+,a0
0001BEB4 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BEC4                            
0001BEC4                            loc_19008:
0001BEC4 4268 0010                  		clr.w	obVelX(a0)
0001BEC8 4268 0012                  		clr.w	obVelY(a0)
0001BECC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BED0 6000 FE64                  		bra.w	loc_18E7A
0001BED4                            ; ===========================================================================
0001BED4 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BEDE                            		even
0001BEDE E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BEE2                            		even
0001BEE2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BEE6                            		even
0001BEE6                            ; ===========================================================================
0001BEE6                            
0001BEE6                            Obj7B_Explode:	; Routine 8
0001BEE6 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BEEA 4228 0024                  		clr.b	obRoutine(a0)
0001BEEE 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BEF4 6700                       		beq.s	Obj7B_MakeFrag
0001BEF6 4E75                       		rts	
0001BEF8                            ; ===========================================================================
0001BEF8                            
0001BEF8                            Obj7B_MakeFrag:
0001BEF8 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001BEFE 7203                       		moveq	#3,d1
0001BF00 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001BF04                            
0001BF04                            Obj7B_Loop:
0001BF04 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001BF0A 6600                       		bne.s	loc_1909A
0001BF0C 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001BF10 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001BF16 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001BF1E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001BF24 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001BF2A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BF30 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BF36 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001BF3A 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001BF3E 137C 0098 0020             		move.b	#$98,obColType(a1)
0001BF44 0029 0004 0001             		ori.b	#4,obRender(a1)
0001BF4A 08E9 0007 0001             		bset	#7,obRender(a1)
0001BF50 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001BF56                            
0001BF56                            loc_1909A:
0001BF56 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001BF5A                            
0001BF5A 4E75                       		rts	
0001BF5C                            ; ===========================================================================
0001BF5C FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001BF60 FF60 FDC0                  		dc.w -$A0, -$240
0001BF64 0100 FCC0                  		dc.w $100, -$340
0001BF68 00A0 FDC0                  		dc.w $A0, -$240
0001BF6C                            ; ===========================================================================
0001BF6C                            
0001BF6C                            Obj7B_MoveFrag:	; Routine $A
0001BF6C 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001BF72 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BF78 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001BF7E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BF84 7004                       		moveq	#4,d0
0001BF86 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001BF8A E448                       		lsr.w	#2,d0
0001BF8C 1140 001A                  		move.b	d0,obFrame(a0)
0001BF90 4A28 0001                  		tst.b	1(a0)
0001BF94 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001BF98 4E75                       		rts	
0001BF98 4E75                       		rts	
0001BF9A                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001BF9A                            ; ---------------------------------------------------------------------------
0001BF9A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001BF9A                            ; ---------------------------------------------------------------------------
0001BF9A                            Map_BSBall_internal:
0001BF9A 0000                       		dc.w @fireball1-Map_BSBall_internal
0001BF9C 0000                       		dc.w @fireball2-Map_BSBall_internal
0001BF9E 01                         @fireball1:	dc.b 1
0001BF9F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001BFA4 01                         @fireball2:	dc.b 1
0001BFA5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001BFAA                            		even
0001BFAA                            		even
0001BFAA                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            ; Object 75 - Eggman (SYZ)
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            
0001BFAA                            BossSpringYard:
0001BFAA 7000                       		moveq	#0,d0
0001BFAC 1028 0024                  		move.b	obRoutine(a0),d0
0001BFB0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001BFB4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001BFB8                            ; ===========================================================================
0001BFB8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001BFBA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001BFBC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001BFBE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001BFC0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001BFC2                            
0001BFC2 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001BFC5 0401 05                    		dc.b 4,	1, 5
0001BFC8 0607 05                    		dc.b 6,	7, 5
0001BFCB 0800 05                    		dc.b 8,	0, 5
0001BFCE                            ; ===========================================================================
0001BFCE                            
0001BFCE                            Obj75_Main:	; Routine 0
0001BFCE 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001BFD4 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001BFDA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BFE0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BFE6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BFEC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BFF2 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001BFF6 2248                       		movea.l	a0,a1
0001BFF8 7203                       		moveq	#3,d1
0001BFFA 6000                       		bra.s	Obj75_LoadBoss
0001BFFC                            ; ===========================================================================
0001BFFC                            
0001BFFC                            Obj75_Loop:
0001BFFC 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001C002 6600                       		bne.s	Obj75_ShipMain
0001C004 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C008 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C00E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C014                            
0001C014                            Obj75_LoadBoss:
0001C014 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C01A 4229 0025                  		clr.b	ob2ndRout(a1)
0001C01E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C022 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C026 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C02A 237C 0001 AB84 0004        		move.l	#Map_Eggman,obMap(a1)
0001C032 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C038 137C 0004 0001             		move.b	#4,obRender(a1)
0001C03E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C044 2348 0034                  		move.l	a0,$34(a1)
0001C048 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C04C                            
0001C04C                            Obj75_ShipMain:	; Routine 2
0001C04C 7000                       		moveq	#0,d0
0001C04E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C052 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C056 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C05A 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001C060 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001C066 7003                       		moveq	#3,d0
0001C068 C028 0022                  		and.b	obStatus(a0),d0
0001C06C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C072 8128 0001                  		or.b	d0,obRender(a0)
0001C076 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C07C                            ; ===========================================================================
0001C07C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C080 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C084 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C088                            ; ===========================================================================
0001C088                            
0001C088                            loc_191CC:
0001C088 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C08E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C094 6400                       		bcc.s	loc_191DE
0001C096 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C09A                            
0001C09A                            loc_191DE:
0001C09A 1028 003F                  		move.b	$3F(a0),d0
0001C09E 5428 003F                  		addq.b	#2,$3F(a0)
0001C0A2 4EB9 0000 3A32             		jsr	(CalcSine).l
0001C0A8 E440                       		asr.w	#2,d0
0001C0AA 3140 0012                  		move.w	d0,obVelY(a0)
0001C0AE                            
0001C0AE                            loc_191F2:
0001C0AE 6100 E670                  		bsr.w	BossMove
0001C0B2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C0B8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C0BE                            
0001C0BE                            loc_19202:
0001C0BE 3028 0008                  		move.w	8(a0),d0
0001C0C2 0440 2C00                  		subi.w	#$2C00,d0
0001C0C6 EA48                       		lsr.w	#5,d0
0001C0C8 1140 0034                  		move.b	d0,$34(a0)
0001C0CC 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C0D2 6400                       		bcc.s	locret_19256
0001C0D4 4A28 0022                  		tst.b	obStatus(a0)
0001C0D8 6B00                       		bmi.s	loc_19258
0001C0DA 4A28 0020                  		tst.b	obColType(a0)
0001C0DE 6600                       		bne.s	locret_19256
0001C0E0 4A28 003E                  		tst.b	$3E(a0)
0001C0E4 6600                       		bne.s	loc_1923A
0001C0E6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C0F6                            
0001C0F6                            loc_1923A:
0001C0F6 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C0FA 7000                       		moveq	#0,d0
0001C0FC 4A51                       		tst.w	(a1)
0001C0FE 6600                       		bne.s	loc_19248
0001C100 303C 0EEE                  		move.w	#cWhite,d0
0001C104                            
0001C104                            loc_19248:
0001C104 3280                       		move.w	d0,(a1)
0001C106 5328 003E                  		subq.b	#1,$3E(a0)
0001C10A 6600                       		bne.s	locret_19256
0001C10C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C112                            
0001C112                            locret_19256:
0001C112 4E75                       		rts	
0001C114                            ; ===========================================================================
0001C114                            
0001C114                            loc_19258:
0001C114 7064                       		moveq	#100,d0
0001C116 6100 0000                  		bsr.w	AddPoints
0001C11A 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C120 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C126 4268 0010                  		clr.w	obVelX(a0)
0001C12A 4E75                       		rts	
0001C12C                            ; ===========================================================================
0001C12C                            
0001C12C                            loc_19270:
0001C12C 3028 0030                  		move.w	$30(a0),d0
0001C130 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C136 0828 0000 0022             		btst	#0,obStatus(a0)
0001C13C 6600                       		bne.s	loc_1928E
0001C13E 4468 0010                  		neg.w	obVelX(a0)
0001C142 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C146 6E00                       		bgt.s	loc_1929E
0001C148 6000                       		bra.s	loc_19294
0001C14A                            ; ===========================================================================
0001C14A                            
0001C14A                            loc_1928E:
0001C14A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C14E 6D00                       		blt.s	loc_1929E
0001C150                            
0001C150                            loc_19294:
0001C150 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C156 4228 003D                  		clr.b	$3D(a0)
0001C15A                            
0001C15A                            loc_1929E:
0001C15A 0440 2C10                  		subi.w	#$2C10,d0
0001C15E 0240 001F                  		andi.w	#$1F,d0
0001C162 0440 001F                  		subi.w	#$1F,d0
0001C166 6A00                       		bpl.s	loc_192AE
0001C168 4440                       		neg.w	d0
0001C16A                            
0001C16A                            loc_192AE:
0001C16A 5340                       		subq.w	#1,d0
0001C16C 6E00                       		bgt.s	loc_192E8
0001C16E 4A28 003D                  		tst.b	$3D(a0)
0001C172 6600                       		bne.s	loc_192E8
0001C174 3238 D008                  		move.w	(v_player+obX).w,d1
0001C178 0441 2C00                  		subi.w	#$2C00,d1
0001C17C EA41                       		asr.w	#5,d1
0001C17E B228 0034                  		cmp.b	$34(a0),d1
0001C182 6600                       		bne.s	loc_192E8
0001C184 7000                       		moveq	#0,d0
0001C186 1028 0034                  		move.b	$34(a0),d0
0001C18A EB40                       		asl.w	#5,d0
0001C18C 0640 2C10                  		addi.w	#$2C10,d0
0001C190 3140 0030                  		move.w	d0,$30(a0)
0001C194 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C198 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C19C 4268 0028                  		clr.w	obSubtype(a0)
0001C1A0 4268 0010                  		clr.w	obVelX(a0)
0001C1A4                            
0001C1A4                            loc_192E8:
0001C1A4 6000 FEF4                  		bra.w	loc_191DE
0001C1A8                            ; ===========================================================================
0001C1A8                            
0001C1A8                            loc_192EC:
0001C1A8 7000                       		moveq	#0,d0
0001C1AA 1028 0028                  		move.b	obSubtype(a0),d0
0001C1AE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C1B2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C1B6                            ; ===========================================================================
0001C1B6 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C1B8 0000                       		dc.w loc_19348-off_192FA
0001C1BA 0000                       		dc.w loc_1938E-off_192FA
0001C1BC 0000                       		dc.w loc_193D0-off_192FA
0001C1BE                            ; ===========================================================================
0001C1BE                            
0001C1BE                            loc_19302:
0001C1BE 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C1C4 3028 0038                  		move.w	$38(a0),d0
0001C1C8 0C40 0556                  		cmpi.w	#$556,d0
0001C1CC 6500                       		bcs.s	loc_19344
0001C1CE 317C 0556 0038             		move.w	#$556,$38(a0)
0001C1D4 4268 003C                  		clr.w	$3C(a0)
0001C1D8 70FF                       		moveq	#-1,d0
0001C1DA 3028 0036                  		move.w	$36(a0),d0
0001C1DE 6700                       		beq.s	loc_1933C
0001C1E0 2240                       		movea.l	d0,a1
0001C1E2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C1E8 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C1EE 2348 0034                  		move.l	a0,$34(a1)
0001C1F2 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C1F8                            
0001C1F8                            loc_1933C:
0001C1F8 4268 0012                  		clr.w	obVelY(a0)
0001C1FC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C200                            
0001C200                            loc_19344:
0001C200 6000 FEAC                  		bra.w	loc_191F2
0001C204                            ; ===========================================================================
0001C204                            
0001C204                            loc_19348:
0001C204 5368 003C                  		subq.w	#1,$3C(a0)
0001C208 6A00                       		bpl.s	loc_19366
0001C20A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C20E 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C214 4A68 0036                  		tst.w	$36(a0)
0001C218 6600                       		bne.s	loc_19362
0001C21A E0E8 0012                  		asr	obVelY(a0)
0001C21E                            
0001C21E                            loc_19362:
0001C21E 7000                       		moveq	#0,d0
0001C220 6000                       		bra.s	loc_1937C
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            loc_19366:
0001C222 7000                       		moveq	#0,d0
0001C224 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C22A 6E00                       		bgt.s	loc_1937C
0001C22C 7002                       		moveq	#2,d0
0001C22E 0828 0001 003D             		btst	#1,$3D(a0)
0001C234 6700                       		beq.s	loc_1937C
0001C236 4440                       		neg.w	d0
0001C238                            
0001C238                            loc_1937C:
0001C238 D068 0038                  		add.w	$38(a0),d0
0001C23C 3140 000C                  		move.w	d0,obY(a0)
0001C240 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C246 6000 FE76                  		bra.w	loc_19202
0001C24A                            ; ===========================================================================
0001C24A                            
0001C24A                            loc_1938E:
0001C24A 303C 04DA                  		move.w	#$4DA,d0
0001C24E 4A68 0036                  		tst.w	$36(a0)
0001C252 6700                       		beq.s	loc_1939C
0001C254 0440 0018                  		subi.w	#$18,d0
0001C258                            
0001C258                            loc_1939C:
0001C258 B068 0038                  		cmp.w	$38(a0),d0
0001C25C 6D00                       		blt.s	loc_193BE
0001C25E 317C 0008 003C             		move.w	#8,$3C(a0)
0001C264 4A68 0036                  		tst.w	$36(a0)
0001C268 6700                       		beq.s	loc_193B4
0001C26A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C270                            
0001C270                            loc_193B4:
0001C270 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C274 4268 0012                  		clr.w	obVelY(a0)
0001C278 6000                       		bra.s	loc_193CC
0001C27A                            ; ===========================================================================
0001C27A                            
0001C27A                            loc_193BE:
0001C27A 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C280 6C00                       		bge.s	loc_193CC
0001C282 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C288                            
0001C288                            loc_193CC:
0001C288 6000 FE24                  		bra.w	loc_191F2
0001C28C                            ; ===========================================================================
0001C28C                            
0001C28C                            loc_193D0:
0001C28C 5368 003C                  		subq.w	#1,$3C(a0)
0001C290 6E00                       		bgt.s	loc_19406
0001C292 6B00                       		bmi.s	loc_193EE
0001C294 70FF                       		moveq	#-1,d0
0001C296 3028 0036                  		move.w	$36(a0),d0
0001C29A 6700                       		beq.s	loc_193E8
0001C29C 2240                       		movea.l	d0,a1
0001C29E 137C 000A 0029             		move.b	#$A,$29(a1)
0001C2A4                            
0001C2A4                            loc_193E8:
0001C2A4 4268 0036                  		clr.w	$36(a0)
0001C2A8 6000                       		bra.s	loc_19406
0001C2AA                            ; ===========================================================================
0001C2AA                            
0001C2AA                            loc_193EE:
0001C2AA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C2B0 6600                       		bne.s	loc_19406
0001C2B2 4228 0029                  		clr.b	$29(a0)
0001C2B6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C2BA 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C2C0 6000                       		bra.s	loc_19446
0001C2C2                            ; ===========================================================================
0001C2C2                            
0001C2C2                            loc_19406:
0001C2C2 7001                       		moveq	#1,d0
0001C2C4 4A68 0036                  		tst.w	$36(a0)
0001C2C8 6700                       		beq.s	loc_19410
0001C2CA 7002                       		moveq	#2,d0
0001C2CC                            
0001C2CC                            loc_19410:
0001C2CC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C2D2 6700                       		beq.s	loc_19424
0001C2D4 6D00                       		blt.s	loc_1941C
0001C2D6 4440                       		neg.w	d0
0001C2D8                            
0001C2D8                            loc_1941C:
0001C2D8 4A68 0036                  		tst.w	$36(a0)
0001C2DC D168 0038                  		add.w	d0,$38(a0)
0001C2E0                            
0001C2E0                            loc_19424:
0001C2E0 7000                       		moveq	#0,d0
0001C2E2 4A68 0036                  		tst.w	$36(a0)
0001C2E6 6700                       		beq.s	loc_19438
0001C2E8 7002                       		moveq	#2,d0
0001C2EA 0828 0000 003D             		btst	#0,$3D(a0)
0001C2F0 6700                       		beq.s	loc_19438
0001C2F2 4440                       		neg.w	d0
0001C2F4                            
0001C2F4                            loc_19438:
0001C2F4 D068 0038                  		add.w	$38(a0),d0
0001C2F8 3140 000C                  		move.w	d0,obY(a0)
0001C2FC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C302                            
0001C302                            loc_19446:
0001C302 6000 FDBA                  		bra.w	loc_19202
0001C306                            
0001C306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C306                            
0001C306                            
0001C306                            Obj75_FindBlocks:
0001C306 4268 0036                  		clr.w	$36(a0)
0001C30A 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C30E 703E                       		moveq	#$3E,d0
0001C310 7276                       		moveq	#$76,d1
0001C312 1428 0034                  		move.b	$34(a0),d2
0001C316                            
0001C316                            Obj75_FindLoop:
0001C316 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C318 6600                       		bne.s	loc_1946A	; if not, branch
0001C31A B429 0028                  		cmp.b	obSubtype(a1),d2
0001C31E 6600                       		bne.s	loc_1946A
0001C320 3149 0036                  		move.w	a1,$36(a0)
0001C324 6000                       		bra.s	locret_19472
0001C326                            ; ===========================================================================
0001C326                            
0001C326                            loc_1946A:
0001C326 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C32A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C32E                            
0001C32E                            locret_19472:
0001C32E 4E75                       		rts	
0001C330                            ; End of function Obj75_FindBlocks
0001C330                            
0001C330                            ; ===========================================================================
0001C330                            
0001C330                            loc_19474:
0001C330 5368 003C                  		subq.w	#1,$3C(a0)
0001C334 6B00                       		bmi.s	loc_1947E
0001C336 6000 E3A6                  		bra.w	BossDefeated
0001C33A                            ; ===========================================================================
0001C33A                            
0001C33A                            loc_1947E:
0001C33A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C33E 4268 0012                  		clr.w	obVelY(a0)
0001C342 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C348 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C34E 4268 0010                  		clr.w	obVelX(a0)
0001C352 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C358 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C35C 6600                       		bne.s	loc_194A8
0001C35E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C364                            
0001C364                            loc_194A8:
0001C364 6000 FD58                  		bra.w	loc_19202
0001C368                            ; ===========================================================================
0001C368                            
0001C368                            loc_194AC:
0001C368 5268 003C                  		addq.w	#1,$3C(a0)
0001C36C 6700                       		beq.s	loc_194BC
0001C36E 6A00                       		bpl.s	loc_194C2
0001C370 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C376 6000                       		bra.s	loc_194EE
0001C378                            ; ===========================================================================
0001C378                            
0001C378                            loc_194BC:
0001C378 4268 0012                  		clr.w	obVelY(a0)
0001C37C 6000                       		bra.s	loc_194EE
0001C37E                            ; ===========================================================================
0001C37E                            
0001C37E                            loc_194C2:
0001C37E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C384 6500                       		bcs.s	loc_194DA
0001C386 6700                       		beq.s	loc_194E0
0001C388 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C38E 6500                       		bcs.s	loc_194EE
0001C390 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C394 6000                       		bra.s	loc_194EE
0001C396                            ; ===========================================================================
0001C396                            
0001C396                            loc_194DA:
0001C396 5168 0012                  		subq.w	#8,obVelY(a0)
0001C39A 6000                       		bra.s	loc_194EE
0001C39C                            ; ===========================================================================
0001C39C                            
0001C39C                            loc_194E0:
0001C39C 4268 0012                  		clr.w    obVelY(a0)
0001C3A0 4A38 FE2D                          	tst.b     (v_invinc).w
0001C3A4 6600                               	bne.s   @boss_invinc
0001C3A6                            
0001C3A6 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C3AA 6000 0000                          	bra.w      @boss_play
0001C3AE                            
0001C3AE                            @boss_invinc:
0001C3AE 103C 0000                          	move.b #bgm_Invincible,d0
0001C3B2                            
0001C3B2                            @boss_play:
0001C3B2 4EB8 124A                          	jsr PlaySound
0001C3B6                            
0001C3B6                            loc_194EE:
0001C3B6 6000 FCF6                  		bra.w	loc_191F2
0001C3BA                            ; ===========================================================================
0001C3BA                            
0001C3BA                            loc_194F2:
0001C3BA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C3C0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C3C6 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C3CC 6400                       		bcc.s	loc_1950C
0001C3CE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C3D2 6000                       		bra.s	loc_19512
0001C3D4                            ; ===========================================================================
0001C3D4                            
0001C3D4                            loc_1950C:
0001C3D4 4A28 0001                  		tst.b	obRender(a0)
0001C3D8 6A00                       		bpl.s	Obj75_ShipDelete
0001C3DA                            
0001C3DA                            loc_19512:
0001C3DA 6100 E344                  		bsr.w	BossMove
0001C3DE 6000 FCBA                  		bra.w	loc_191DE
0001C3E2                            ; ===========================================================================
0001C3E2                            
0001C3E2                            Obj75_ShipDelete:
0001C3E2 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            Obj75_FaceMain:	; Routine 4
0001C3E8 7201                       		moveq	#1,d1
0001C3EA 2268 0034                  		movea.l	$34(a0),a1
0001C3EE 7000                       		moveq	#0,d0
0001C3F0 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C3F4 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C3F8 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C3FC 1141 001C                  		move.b	d1,obAnim(a0)
0001C400 1010                       		move.b	(a0),d0
0001C402 B011                       		cmp.b	(a1),d0
0001C404 6600                       		bne.s	Obj75_FaceDelete
0001C406 6000                       		bra.s	loc_195BE
0001C408                            ; ===========================================================================
0001C408                            
0001C408                            Obj75_FaceDelete:
0001C408 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C40E                            ; ===========================================================================
0001C40E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C412 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C416 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C41A                            ; ===========================================================================
0001C41A                            
0001C41A                            loc_19552:
0001C41A 720A                       		moveq	#$A,d1
0001C41C 4E75                       		rts	
0001C41E                            ; ===========================================================================
0001C41E                            
0001C41E                            loc_19556:
0001C41E 7206                       		moveq	#6,d1
0001C420 4E75                       		rts	
0001C422                            ; ===========================================================================
0001C422                            
0001C422                            loc_1955A:
0001C422 7000                       		moveq	#0,d0
0001C424 1029 0028                  		move.b	obSubtype(a1),d0
0001C428 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C42C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C430                            ; ===========================================================================
0001C430 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C434 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C438                            ; ===========================================================================
0001C438                            
0001C438                            loc_19570:
0001C438 6000                       		bra.s	loc_19574
0001C43A                            ; ===========================================================================
0001C43A                            
0001C43A                            loc_19572:
0001C43A 7206                       		moveq	#6,d1
0001C43C                            
0001C43C                            loc_19574:
0001C43C 4A29 0020                  		tst.b	obColType(a1)
0001C440 6600                       		bne.s	loc_1957E
0001C442 7205                       		moveq	#5,d1
0001C444 4E75                       		rts	
0001C446                            ; ===========================================================================
0001C446                            
0001C446                            loc_1957E:
0001C446 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C44C 6500                       		bcs.s	locret_19588
0001C44E 7204                       		moveq	#4,d1
0001C450                            
0001C450                            locret_19588:
0001C450 4E75                       		rts	
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            Obj75_FlameMain:; Routine 6
0001C452 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C458 2268 0034                  		movea.l	$34(a0),a1
0001C45C 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C462 6600                       		bne.s	loc_195AA
0001C464 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C46A 4A28 0001                  		tst.b	1(a0)
0001C46E 6A00                       		bpl.s	Obj75_FlameDelete
0001C470 6000                       		bra.s	loc_195B6
0001C472                            ; ===========================================================================
0001C472                            
0001C472                            loc_195AA:
0001C472 4A69 0010                  		tst.w	obVelX(a1)
0001C476 6700                       		beq.s	loc_195B6
0001C478 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C47E                            
0001C47E                            loc_195B6:
0001C47E 6000                       		bra.s	loc_195BE
0001C480                            ; ===========================================================================
0001C480                            
0001C480                            Obj75_FlameDelete:
0001C480 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            loc_195BE:
0001C486 43F9 0001 AB34             		lea	(Ani_Eggman).l,a1
0001C48C 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001C492 2268 0034                  		movea.l	$34(a0),a1
0001C496 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C49C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C4A2                            
0001C4A2                            loc_195DA:
0001C4A2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C4A8 7003                       		moveq	#3,d0
0001C4AA C028 0022                  		and.b	obStatus(a0),d0
0001C4AE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C4B4 8128 0001                  		or.b	d0,obRender(a0)
0001C4B8 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C4BE                            ; ===========================================================================
0001C4BE                            
0001C4BE                            Obj75_SpikeMain:; Routine 8
0001C4BE 217C 0001 AC74 0004        		move.l	#Map_BossItems,obMap(a0)
0001C4C6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C4CC 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C4D2 2268 0034                  		movea.l	$34(a0),a1
0001C4D6 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C4DC 6600                       		bne.s	loc_1961C
0001C4DE 4A28 0001                  		tst.b	obRender(a0)
0001C4E2 6A00                       		bpl.s	Obj75_SpikeDelete
0001C4E4                            
0001C4E4                            loc_1961C:
0001C4E4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C4EA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C4F0 3028 003C                  		move.w	$3C(a0),d0
0001C4F4 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C4FA 6600                       		bne.s	loc_19652
0001C4FC 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C502 6700                       		beq.s	loc_1964C
0001C504 4A29 0028                  		tst.b	obSubtype(a1)
0001C508 6600                       		bne.s	loc_19658
0001C50A 0C40 0094                  		cmpi.w	#$94,d0
0001C50E 6C00                       		bge.s	loc_19658
0001C510 5E40                       		addq.w	#7,d0
0001C512 6000                       		bra.s	loc_19658
0001C514                            ; ===========================================================================
0001C514                            
0001C514                            loc_1964C:
0001C514 4A69 003C                  		tst.w	$3C(a1)
0001C518 6A00                       		bpl.s	loc_19658
0001C51A                            
0001C51A                            loc_19652:
0001C51A 4A40                       		tst.w	d0
0001C51C 6F00                       		ble.s	loc_19658
0001C51E 5B40                       		subq.w	#5,d0
0001C520                            
0001C520                            loc_19658:
0001C520 3140 003C                  		move.w	d0,$3C(a0)
0001C524 E440                       		asr.w	#2,d0
0001C526 D168 000C                  		add.w	d0,obY(a0)
0001C52A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C530 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C536 4228 0020                  		clr.b	obColType(a0)
0001C53A 2268 0034                  		movea.l	$34(a0),a1
0001C53E 4A29 0020                  		tst.b	obColType(a1)
0001C542 6700                       		beq.s	loc_19688
0001C544 4A29 0029                  		tst.b	$29(a1)
0001C548 6600                       		bne.s	loc_19688
0001C54A 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C550                            
0001C550                            loc_19688:
0001C550 6000 FF50                  		bra.w	loc_195DA
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            Obj75_SpikeDelete:
0001C554 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C554 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C55A                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            
0001C55A                            BossBlock:
0001C55A 7000                       		moveq	#0,d0
0001C55C 1028 0024                  		move.b	obRoutine(a0),d0
0001C560 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C564 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C568                            ; ===========================================================================
0001C568 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C56A 0000                       		dc.w Obj76_Action-Obj76_Index
0001C56C 0000                       		dc.w loc_19762-Obj76_Index
0001C56E                            ; ===========================================================================
0001C56E                            
0001C56E                            Obj76_Main:	; Routine 0
0001C56E 7800                       		moveq	#0,d4
0001C570 3A3C 2C10                  		move.w	#$2C10,d5
0001C574 7C09                       		moveq	#9,d6
0001C576 43D0                       		lea	(a0),a1
0001C578 6000                       		bra.s	Obj76_MakeBlock
0001C57A                            ; ===========================================================================
0001C57A                            
0001C57A                            Obj76_Loop:
0001C57A 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001C580 6600                       		bne.s	Obj76_ExitLoop
0001C582                            
0001C582                            Obj76_MakeBlock:
0001C582 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C586 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C58E 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C594 137C 0004 0001             		move.b	#4,obRender(a1)
0001C59A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C5A0 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C5A6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C5AC 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C5B0 337C 0582 000C             		move.w	#$582,obY(a1)
0001C5B6 3344 0028                  		move.w	d4,obSubtype(a1)
0001C5BA 0644 0101                  		addi.w	#$101,d4
0001C5BE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C5C2 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C5C6 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C5CA                            
0001C5CA                            Obj76_ExitLoop:
0001C5CA 4E75                       		rts	
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            Obj76_Action:	; Routine 2
0001C5CC 1028 0029                  		move.b	$29(a0),d0
0001C5D0 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C5D4 6700                       		beq.s	Obj76_Solid
0001C5D6 4A00                       		tst.b	d0
0001C5D8 6B00                       		bmi.s	loc_19718
0001C5DA                            
0001C5DA                            loc_19712:
0001C5DA 6100 0000                  		bsr.w	Obj76_Break
0001C5DE 6000                       		bra.s	Obj76_Display
0001C5E0                            ; ===========================================================================
0001C5E0                            
0001C5E0                            loc_19718:
0001C5E0 2268 0034                  		movea.l	$34(a0),a1
0001C5E4 4A29 0021                  		tst.b	obColProp(a1)
0001C5E8 67F0                       		beq.s	loc_19712
0001C5EA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C5F0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C5F6 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C5FC B2C8                       		cmpa.w	a0,a1
0001C5FE 6500                       		bcs.s	Obj76_Display
0001C600 3029 0012                  		move.w	obVelY(a1),d0
0001C604 48C0                       		ext.l	d0
0001C606 E080                       		asr.l	#8,d0
0001C608 D168 000C                  		add.w	d0,obY(a0)
0001C60C 6000                       		bra.s	Obj76_Display
0001C60E                            ; ===========================================================================
0001C60E                            
0001C60E                            Obj76_Solid:
0001C60E 323C 001B                  		move.w	#$1B,d1
0001C612 343C 0010                  		move.w	#$10,d2
0001C616 363C 0011                  		move.w	#$11,d3
0001C61A 3828 0008                  		move.w	obX(a0),d4
0001C61E 4EB9 0001 1B6A             		jsr	(SolidObject).l
0001C624                            
0001C624                            Obj76_Display:
0001C624 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C62A                            ; ===========================================================================
0001C62A                            
0001C62A                            loc_19762:	; Routine 4
0001C62A 4A28 0001                  		tst.b	obRender(a0)
0001C62E 6A00                       		bpl.s	Obj76_Delete
0001C630 4EB9 0000 F714             		jsr	(ObjectFall).l
0001C636 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C63C                            ; ===========================================================================
0001C63C                            
0001C63C                            Obj76_Delete:
0001C63C 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C642                            
0001C642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C642                            
0001C642                            
0001C642                            Obj76_Break:
0001C642 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C646 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C64A 7801                       		moveq	#1,d4
0001C64C 7203                       		moveq	#3,d1
0001C64E 7438                       		moveq	#$38,d2
0001C650 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C654 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C65A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C660 43D0                       		lea	(a0),a1
0001C662 6000                       		bra.s	Obj76_MakeFrag
0001C664                            ; ===========================================================================
0001C664                            
0001C664                            Obj76_LoopFrag:
0001C664 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001C66A 6600                       		bne.s	loc_197D4
0001C66C                            
0001C66C                            Obj76_MakeFrag:
0001C66C 45D0                       		lea	(a0),a2
0001C66E 47D1                       		lea	(a1),a3
0001C670 7603                       		moveq	#3,d3
0001C672                            
0001C672                            loc_197AA:
0001C672 26DA                       		move.l	(a2)+,(a3)+
0001C674 26DA                       		move.l	(a2)+,(a3)+
0001C676 26DA                       		move.l	(a2)+,(a3)+
0001C678 26DA                       		move.l	(a2)+,(a3)+
0001C67A 51CB FFF6                  		dbf	d3,loc_197AA
0001C67E                            
0001C67E 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C682 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C686 361D                       		move.w	(a5)+,d3
0001C688 D769 0008                  		add.w	d3,obX(a1)
0001C68C 361D                       		move.w	(a5)+,d3
0001C68E D769 000C                  		add.w	d3,obY(a1)
0001C692 1344 001A                  		move.b	d4,obFrame(a1)
0001C696 5244                       		addq.w	#1,d4
0001C698 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C69C                            
0001C69C                            loc_197D4:
0001C6A6                            ; End of function Obj76_Break
0001C6A6                            
0001C6A6                            ; ===========================================================================
0001C6A6 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C6AA 0180 FE00                  		dc.w $180, -$200
0001C6AE FF00 FF00                  		dc.w -$100, -$100
0001C6B2 0100 FF00                  		dc.w $100, -$100
0001C6B6 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C6BA 0010 0000                  		dc.w $10, 0
0001C6BE 0000 0010                  		dc.w 0,	$10
0001C6C2 0010 0010                  		dc.w $10, $10
0001C6C2 0010 0010                  		dc.w $10, $10
0001C6C6                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C6C6                            ; ---------------------------------------------------------------------------
0001C6C6                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C6C6                            ; ---------------------------------------------------------------------------
0001C6C6                            Map_BossBlock_internal:
0001C6C6 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C6C8 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C6CA 0000                       		dc.w @topright-Map_BossBlock_internal
0001C6CC 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C6CE 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C6D0 02                         @wholeblock:	dc.b 2
0001C6D1 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C6D6 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C6DB 00                         		dc.b 0
0001C6DC 01                         @topleft:	dc.b 1
0001C6DD F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C6E2 01                         @topright:	dc.b 1
0001C6E3 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C6E8 01                         @bottomleft:	dc.b 1
0001C6E9 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C6EE 01                         @bottomright:	dc.b 1
0001C6EF F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C6F4                            		even
0001C6F4                            		even
0001C6F4                            
0001C6F4                            loc_1982C:
0001C6F4 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001C6FA                            
0001C6FA                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C6FA                            ; ---------------------------------------------------------------------------
0001C6FA                            ; Object 82 - Eggman (SBZ2)
0001C6FA                            ; ---------------------------------------------------------------------------
0001C6FA                            
0001C6FA                            ScrapEggman:
0001C6FA 7000                       		moveq	#0,d0
0001C6FC 1028 0024                  		move.b	obRoutine(a0),d0
0001C700 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C704 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C708                            ; ===========================================================================
0001C708 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C70A 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C70C 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C70E                            
0001C70E 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C711 0400 03                    		dc.b 4,	0, 3
0001C714                            ; ===========================================================================
0001C714                            
0001C714                            SEgg_Main:	; Routine 0
0001C714 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C718 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C71E 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C724 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C72A 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C730 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C736 4228 0025                  		clr.b	ob2ndRout(a0)
0001C73A 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C73E 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C742 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C746 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C74E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C754 117C 0004 0001             		move.b	#4,obRender(a0)
0001C75A 08E8 0007 0001             		bset	#7,obRender(a0)
0001C760 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C766 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001C76C 6600                       		bne.s	SEgg_Eggman
0001C76E 2348 0034                  		move.l	a0,$34(a1)
0001C772 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C776 337C 2130 0008             		move.w	#$2130,obX(a1)
0001C77C 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001C782 4228 0025                  		clr.b	ob2ndRout(a0)
0001C786 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C78A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C78E 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C792 237C 0000 DFCA 0004        		move.l	#Map_But,obMap(a1)
0001C79A 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C7A0 137C 0004 0001             		move.b	#4,obRender(a1)
0001C7A6 08E9 0007 0001             		bset	#7,obRender(a1)
0001C7AC 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C7B2 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C7B8                            
0001C7B8                            SEgg_Eggman:	; Routine 2
0001C7B8 7000                       		moveq	#0,d0
0001C7BA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C7BE 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C7C2 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C7C6 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C7CA 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001C7D0 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C7D6                            ; ===========================================================================
0001C7D6 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C7D8 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C7DA 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C7DC 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            SEgg_ChkSonic:
0001C7DE 3028 0008                  		move.w	obX(a0),d0
0001C7E2 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C7E6 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C7EA 6400                       		bcc.s	loc_19934	; if not, branch
0001C7EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C7F0 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C7F6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C7FC                            
0001C7FC                            loc_19934:
0001C7FC 4EF9 0000 F74C             		jmp	(SpeedToPos).l
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            SEgg_PreLeap:
0001C802 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C806 6600                       		bne.s	loc_19954	; if time remains, branch
0001C808 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C80C 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C812 5868 000C                  		addq.w	#4,obY(a0)
0001C816 317C 000F 003C             		move.w	#15,$3C(a0)
0001C81C                            
0001C81C                            loc_19954:
0001C81C 60DE                       		bra.s	loc_19934
0001C81E                            ; ===========================================================================
0001C81E                            
0001C81E                            SEgg_Leap:
0001C81E 5368 003C                  		subq.w	#1,$3C(a0)
0001C822 6E00                       		bgt.s	loc_199D0
0001C824 6600                       		bne.s	loc_1996A
0001C826 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C82C 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C832                            
0001C832                            loc_1996A:
0001C832 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001C838 6E00                       		bgt.s	loc_19976
0001C83A 4268 0010                  		clr.w	obVelX(a0)
0001C83E                            
0001C83E                            loc_19976:
0001C83E 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C844 4A68 0012                  		tst.w	obVelY(a0)
0001C848 6B00                       		bmi.s	SEgg_FindBlocks
0001C84A 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001C850 6500                       		bcs.s	SEgg_FindBlocks
0001C852 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C858 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001C85E 6500                       		bcs.s	SEgg_FindBlocks
0001C860 317C 059B 000C             		move.w	#$59B,obY(a0)
0001C866 4268 0012                  		clr.w	obVelY(a0)
0001C86A                            
0001C86A                            SEgg_FindBlocks:
0001C86A 3028 0010                  		move.w	obVelX(a0),d0
0001C86E 8068 0012                  		or.w	obVelY(a0),d0
0001C872 6600                       		bne.s	loc_199D0
0001C874 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C878 703E                       		moveq	#$3E,d0
0001C87A 7240                       		moveq	#$40,d1
0001C87C                            
0001C87C                            SEgg_FindLoop:	
0001C87C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C87E 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C882 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C886                            
0001C886 6600                       		bne.s	loc_199D0
0001C888 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C88E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C892 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C898                            
0001C898                            loc_199D0:
0001C898 6000 FF62                  		bra.w	loc_19934
0001C89C                            ; ===========================================================================
0001C89C                            
0001C89C                            SEgg_Switch:	; Routine 4
0001C89C 7000                       		moveq	#0,d0
0001C89E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C8A2 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C8A6 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C8AA                            ; ===========================================================================
0001C8AA 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C8AC 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C8AE                            ; ===========================================================================
0001C8AE                            
0001C8AE                            loc_199E6:
0001C8AE 2268 0034                  		movea.l	$34(a0),a1
0001C8B2 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C8B8 6600                       		bne.s	SEgg_SwDisplay
0001C8BA 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C8C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8C4                            
0001C8C4                            SEgg_SwDisplay:
0001C8C4 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C8C4 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001C8CA                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C8CA                            ; ---------------------------------------------------------------------------
0001C8CA                            ; Animation script - Eggman (SBZ2)
0001C8CA                            ; ---------------------------------------------------------------------------
0001C8CA 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C8CC 0000                       		dc.w @laugh-Ani_SEgg
0001C8CE 0000                       		dc.w @jump1-Ani_SEgg
0001C8D0 0000                       		dc.w @intube-Ani_SEgg
0001C8D2 0000                       		dc.w @running-Ani_SEgg
0001C8D4 0000                       		dc.w @jump2-Ani_SEgg
0001C8D6 0000                       		dc.w @starjump-Ani_SEgg
0001C8D8 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C8DC 00                         		even
0001C8DC 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C8E0 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C8E8 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C8EC 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001C8F2 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001C8F8 00                         		even
0001C8F8 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001C8FC 00                         		even
0001C8FC 00                         		even
0001C8FC                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001C8FC                            ; ---------------------------------------------------------------------------
0001C8FC                            ; Sprite mappings - Eggman (SBZ2)
0001C8FC                            ; ---------------------------------------------------------------------------
0001C8FC                            Map_SEgg_internal:
0001C8FC 0000                       		dc.w @stand-Map_SEgg_internal
0001C8FE 0000                       		dc.w @laugh1-Map_SEgg_internal
0001C900 0000                       		dc.w @laugh2-Map_SEgg_internal
0001C902 0000                       		dc.w @jump1-Map_SEgg_internal
0001C904 0000                       		dc.w @jump2-Map_SEgg_internal
0001C906 0000                       		dc.w @surprise-Map_SEgg_internal
0001C908 0000                       		dc.w @starjump-Map_SEgg_internal
0001C90A 0000                       		dc.w @running1-Map_SEgg_internal
0001C90C 0000                       		dc.w @running2-Map_SEgg_internal
0001C90E 0000                       		dc.w @intube-Map_SEgg_internal
0001C910 0000                       		dc.w @cockpit-Map_SEgg_internal
0001C912 03                         @stand:		dc.b 3
0001C913 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C918 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C91D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C922 04                         @laugh1:	dc.b 4
0001C923 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001C928 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C92D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C932 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C937 00                         		dc.b 0
0001C938 04                         @laugh2:	dc.b 4
0001C939 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001C93E E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001C943 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001C948 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001C94D 00                         		dc.b 0
0001C94E 04                         @jump1:		dc.b 4
0001C94F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001C954 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001C959 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001C95E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001C963 00                         		dc.b 0
0001C964 04                         @jump2:		dc.b 4
0001C965 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C96A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001C96F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001C974 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C979 00                         		dc.b 0
0001C97A 04                         @surprise:	dc.b 4
0001C97B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001C980 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C985 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C98A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C98F 00                         		dc.b 0
0001C990 07                         @starjump:	dc.b 7
0001C991 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001C996 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C99B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001C9A0 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001C9A5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C9AA F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001C9AF F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001C9B4 05                         @running1:	dc.b 5
0001C9B5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C9BA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001C9BF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001C9C4 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001C9C9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C9CE 06                         @running2:	dc.b 6
0001C9CF EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001C9D4 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001C9D9 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001C9DE 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001C9E3 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001C9E8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001C9ED 00                         		dc.b 0
0001C9EE 08                         @intube:	dc.b 8
0001C9EF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001C9F4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C9F9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C9FE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA03 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CA08 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CA0D 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CA12 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CA17 03                         @cockpit:	dc.b 3
0001CA18 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CA1D F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CA22 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CA28 00                         		even
0001CA28 00                         		even
0001CA28                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            
0001CA28                            FalseFloor:
0001CA28 7000                       		moveq	#0,d0
0001CA2A 1028 0024                  		move.b	obRoutine(a0),d0
0001CA2E 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CA32 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CA36                            ; ===========================================================================
0001CA36 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CA38 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CA3A 0000                       		dc.w loc_19C36-FFloor_Index
0001CA3C 0000                       		dc.w loc_19C62-FFloor_Index
0001CA3E 0000                       		dc.w loc_19C72-FFloor_Index
0001CA40 0000                       		dc.w loc_19C80-FFloor_Index
0001CA42                            ; ===========================================================================
0001CA42                            
0001CA42                            FFloor_Main:	; Routine 0
0001CA42 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CA48 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CA4E 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CA54 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CA5A 117C 0004 0001             		move.b	#4,obRender(a0)
0001CA60 08E8 0007 0001             		bset	#7,obRender(a0)
0001CA66 7800                       		moveq	#0,d4
0001CA68 3A3C 2010                  		move.w	#$2010,d5
0001CA6C 7C07                       		moveq	#7,d6
0001CA6E 45E8 0030                  		lea	$30(a0),a2
0001CA72                            
0001CA72                            FFloor_MakeBlock:
0001CA72 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001CA78 6600                       		bne.s	FFloor_ExitMake
0001CA7A 34C9                       		move.w	a1,(a2)+
0001CA7C 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CA80 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CA88 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CA8E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CA94 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CA9A 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CAA0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CAA6 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CAAA 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CAB0 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CAB4 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CABA 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CABE                            
0001CABE                            FFloor_ExitMake:
0001CABE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CAC2 4E75                       		rts	
0001CAC4                            ; ===========================================================================
0001CAC4                            
0001CAC4                            FFloor_ChkBreak:; Routine 2
0001CAC4 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CACA 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CACC 4228 001A                  		clr.b	obFrame(a0)
0001CAD0 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CAD4                            
0001CAD4                            FFloor_Solid:
0001CAD4 7000                       		moveq	#0,d0
0001CAD6 1028 001A                  		move.b	obFrame(a0),d0
0001CADA 4400                       		neg.b	d0
0001CADC 4880                       		ext.w	d0
0001CADE 5040                       		addq.w	#8,d0
0001CAE0 E940                       		asl.w	#4,d0
0001CAE2 383C 2100                  		move.w	#$2100,d4
0001CAE6 9840                       		sub.w	d0,d4
0001CAE8 1140 0014                  		move.b	d0,obActWid(a0)
0001CAEC 3144 0008                  		move.w	d4,obX(a0)
0001CAF0 720B                       		moveq	#$B,d1
0001CAF2 D240                       		add.w	d0,d1
0001CAF4 7410                       		moveq	#$10,d2
0001CAF6 7611                       		moveq	#$11,d3
0001CAF8 4EF9 0001 1B6A             		jmp	(SolidObject).l
0001CAFE                            ; ===========================================================================
0001CAFE                            
0001CAFE                            loc_19C36:	; Routine 4
0001CAFE 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CB04 6400                       		bcc.s	FFloor_Solid2
0001CB06 70FF                       		moveq	#-1,d0
0001CB08 1028 001A                  		move.b	obFrame(a0),d0
0001CB0C 4880                       		ext.w	d0
0001CB0E D040                       		add.w	d0,d0
0001CB10 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CB14 2240                       		movea.l	d0,a1
0001CB16 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CB1C 5228 001A                  		addq.b	#1,obFrame(a0)
0001CB20 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CB26 6700                       		beq.s	loc_19C62
0001CB28                            
0001CB28                            FFloor_Solid2:
0001CB28 60AA                       		bra.s	FFloor_Solid
0001CB2A                            ; ===========================================================================
0001CB2A                            
0001CB2A                            loc_19C62:	; Routine 6
0001CB2A 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CB30 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CB36 6000 FBBC                  		bra.w	loc_1982C
0001CB3A                            ; ===========================================================================
0001CB3A                            
0001CB3A                            loc_19C72:	; Routine 8
0001CB3A 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CB40 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CB42 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001CB48                            ; ===========================================================================
0001CB48                            
0001CB48                            loc_19C80:	; Routine $A
0001CB48 4A28 0001                  		tst.b	obRender(a0)
0001CB4C 6A00 FBA6                  		bpl.w	loc_1982C
0001CB50 4EB9 0000 F714             		jsr	(ObjectFall).l
0001CB56 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001CB5C                            ; ===========================================================================
0001CB5C                            
0001CB5C                            FFloor_Break:
0001CB5C 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CB60 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CB64 7801                       		moveq	#1,d4
0001CB66 7203                       		moveq	#3,d1
0001CB68 7438                       		moveq	#$38,d2
0001CB6A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB6E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CB74 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CB7A 43D0                       		lea	(a0),a1
0001CB7C 6000                       		bra.s	FFloor_MakeFrag
0001CB7E                            ; ===========================================================================
0001CB7E                            
0001CB7E                            FFloor_LoopFrag:
0001CB7E 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001CB84 6600                       		bne.s	FFloor_BreakSnd
0001CB86                            
0001CB86                            FFloor_MakeFrag:
0001CB86 45D0                       		lea	(a0),a2
0001CB88 47D1                       		lea	(a1),a3
0001CB8A 7603                       		moveq	#3,d3
0001CB8C                            
0001CB8C                            loc_19CC4:
0001CB8C 26DA                       		move.l	(a2)+,(a3)+
0001CB8E 26DA                       		move.l	(a2)+,(a3)+
0001CB90 26DA                       		move.l	(a2)+,(a3)+
0001CB92 26DA                       		move.l	(a2)+,(a3)+
0001CB94 51CB FFF6                  		dbf	d3,loc_19CC4
0001CB98                            
0001CB98 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CB9C 361D                       		move.w	(a5)+,d3
0001CB9E D769 0008                  		add.w	d3,obX(a1)
0001CBA2 361D                       		move.w	(a5)+,d3
0001CBA4 D769 000C                  		add.w	d3,obY(a1)
0001CBA8 1344 001A                  		move.b	d4,obFrame(a1)
0001CBAC 5244                       		addq.w	#1,d4
0001CBAE 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CBB2                            
0001CBB2                            FFloor_BreakSnd:
0001CBBC 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001CBC2                            ; ===========================================================================
0001CBC2 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CBC6 0120 00C0                  		dc.w $120, $C0
0001CBCA FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CBCE 0010 0000                  		dc.w $10, 0
0001CBD2 0000 0010                  		dc.w 0,	$10
0001CBD6 0010 0010                  		dc.w $10, $10
0001CBD6 0010 0010                  		dc.w $10, $10
0001CBDA                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            Map_FFloor_internal:
0001CBDA 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CBDC 0000                       		dc.w @topleft-Map_FFloor_internal
0001CBDE 0000                       		dc.w @topright-Map_FFloor_internal
0001CBE0 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CBE2 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CBE4 01                         @wholeblock:	dc.b 1
0001CBE5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CBEA 02                         @topleft:	dc.b 2
0001CBEB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CBF0 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CBF5 00                         		dc.b 0
0001CBF6 02                         @topright:	dc.b 2
0001CBF7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CBFC F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CC01 00                         		dc.b 0
0001CC02 02                         @bottomleft:	dc.b 2
0001CC03 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CC08 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CC0D 00                         		dc.b 0
0001CC0E 02                         @bottomright:	dc.b 2
0001CC0F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CC14 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CC1A 00                         		even
0001CC1A 00                         		even
0001CC1A                            		include	"_incObj\85 Boss - Final.asm"
0001CC1A                            ; ---------------------------------------------------------------------------
0001CC1A                            ; Object 85 - Eggman (FZ)
0001CC1A                            ; ---------------------------------------------------------------------------
0001CC1A                            
0001CC1A                            Obj85_Delete:
0001CC1A 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001CC20                            ; ===========================================================================
0001CC20                            
0001CC20                            BossFinal:
0001CC20 7000                       		moveq	#0,d0
0001CC22 1028 0024                  		move.b	obRoutine(a0),d0
0001CC26 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CC2A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CC2E                            ; ===========================================================================
0001CC2E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CC30 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CC32 0000                       		dc.w loc_1A38E-Obj85_Index
0001CC34 0000                       		dc.w loc_1A346-Obj85_Index
0001CC36 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CC38 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CC3A 0000                       		dc.w loc_1A264-Obj85_Index
0001CC3C                            
0001CC3C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CC42 0001 C8FC                  		dc.l Map_SEgg		; mappings pointer
0001CC46 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CC4C 0000 0000                  		dc.l Map_EggCyl
0001CC50 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CC56 0000 0000                  		dc.l Map_FZLegs
0001CC5A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CC60 0001 C8FC                  		dc.l Map_SEgg
0001CC64 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CC6A 0001 AB84                  		dc.l Map_Eggman
0001CC6E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CC74 0001 AB84                  		dc.l Map_Eggman
0001CC78                            
0001CC78 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001CC7D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001CC82 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001CC87 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001CC8C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001CC91 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001CC96                            ; ===========================================================================
0001CC96                            
0001CC96                            Obj85_Main:	; Routine 0
0001CC96 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001CC9A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001CC9E 2248                       		movea.l	a0,a1
0001CCA0 7205                       		moveq	#5,d1
0001CCA2 6000                       		bra.s	Obj85_LoadBoss
0001CCA4                            ; ===========================================================================
0001CCA4                            
0001CCA4                            Obj85_Loop:
0001CCA4 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001CCAA 6600                       		bne.s	loc_19E20
0001CCAC                            
0001CCAC                            Obj85_LoadBoss:
0001CCAC 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CCB0 335A 0008                  		move.w	(a2)+,obX(a1)
0001CCB4 335A 000C                  		move.w	(a2)+,obY(a1)
0001CCB8 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CCBC 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CCC0 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CCC4 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CCC8 135B 0018                  		move.b	(a3)+,obPriority(a1)
0001CCCC 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CCD0 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CCD4 137C 0004 0001             		move.b	#4,obRender(a1)
0001CCDA 08E8 0007 0001             		bset	#7,obRender(a0)
0001CCE0 2348 0034                  		move.l	a0,$34(a1)
0001CCE4 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CCE8                            
0001CCE8                            loc_19E20:
0001CCE8 45E8 0036                  		lea	$36(a0),a2
0001CCEC 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001CCF2 6600                       		bne.s	loc_19E5A
0001CCF4 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CCF8 3489                       		move.w	a1,(a2)
0001CCFA 2348 0034                  		move.l	a0,$34(a1)
0001CCFE 45E8 0038                  		lea	$38(a0),a2
0001CD02 7400                       		moveq	#0,d2
0001CD04 7203                       		moveq	#3,d1
0001CD06                            
0001CD06                            loc_19E3E:
0001CD06 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001CD0C 6600                       		bne.s	loc_19E5A
0001CD0E 34C9                       		move.w	a1,(a2)+
0001CD10 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CD14 2348 0034                  		move.l	a0,$34(a1)
0001CD18 1342 0028                  		move.b	d2,obSubtype(a1)
0001CD1C 5442                       		addq.w	#2,d2
0001CD1E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CD22                            
0001CD22                            loc_19E5A:
0001CD22 317C 0000 0034             		move.w	#0,$34(a0)
0001CD28 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CD2E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CD34                            
0001CD34                            Obj85_Eggman:	; Routine 2
0001CD34 7000                       		moveq	#0,d0
0001CD36 1028 0034                  		move.b	$34(a0),d0
0001CD3A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CD3E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CD42 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001CD48                            ; ===========================================================================
0001CD48 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CD4C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CD50 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CD54 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CD58                            ; ===========================================================================
0001CD58                            
0001CD58                            loc_19E90:
0001CD58 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CD5C 6600                       		bne.s	loc_19EA2
0001CD5E 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CD64 6500                       		bcs.s	loc_19EA2
0001CD66 5428 0034                  		addq.b	#2,$34(a0)
0001CD6A                            
0001CD6A                            loc_19EA2:
0001CD6A 52B8 F636                  		addq.l	#1,(v_random).w
0001CD6E 4E75                       		rts	
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            loc_19EA8:
0001CD70 4A68 0030                  		tst.w	$30(a0)
0001CD74 6A00                       		bpl.s	loc_19F10
0001CD76 4268 0030                  		clr.w	$30(a0)
0001CD7A 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001CD80 0240 000C                  		andi.w	#$C,d0
0001CD84 3200                       		move.w	d0,d1
0001CD86 5441                       		addq.w	#2,d1
0001CD88 4A80                       		tst.l	d0
0001CD8A 6A00                       		bpl.s	loc_19EC6
0001CD8C C340                       		exg	d1,d0
0001CD8E                            
0001CD8E                            loc_19EC6:
0001CD8E 43FA 0000                  		lea	word_19FD6(pc),a1
0001CD92 3031 0000                  		move.w	(a1,d0.w),d0
0001CD96 3231 1000                  		move.w	(a1,d1.w),d1
0001CD9A 3140 0030                  		move.w	d0,$30(a0)
0001CD9E 74FF                       		moveq	#-1,d2
0001CDA0 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CDA4 2242                       		movea.l	d2,a1
0001CDA6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CDAC 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CDB2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CDB6 2242                       		movea.l	d2,a1
0001CDB8 137C 0001 0029             		move.b	#1,$29(a1)
0001CDBE 337C 0000 0030             		move.w	#0,$30(a1)
0001CDC4 317C 0001 0032             		move.w	#1,$32(a0)
0001CDCA 4228 0035                  		clr.b	$35(a0)
0001CDD8                            
0001CDD8                            loc_19F10:
0001CDD8 4A68 0032                  		tst.w	$32(a0)
0001CDDC 6B00 0000                  		bmi.w	loc_19FA6
0001CDE0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CDE6 3038 D008                  		move.w	(v_player+obX).w,d0
0001CDEA 9068 0008                  		sub.w	obX(a0),d0
0001CDEE 6500                       		bcs.s	loc_19F2E
0001CDF0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CDF6                            
0001CDF6                            loc_19F2E:
0001CDF6 323C 002B                  		move.w	#$2B,d1
0001CDFA 343C 0014                  		move.w	#$14,d2
0001CDFE 363C 0014                  		move.w	#$14,d3
0001CE02 3828 0008                  		move.w	obX(a0),d4
0001CE06 4EB9 0001 1B6A             		jsr	(SolidObject).l
0001CE0C 4A44                       		tst.w	d4
0001CE0E 6E00                       		bgt.s	loc_19F50
0001CE10                            
0001CE10                            loc_19F48:
0001CE10 4A28 0035                  		tst.b	$35(a0)
0001CE14 6600                       		bne.s	loc_19F88
0001CE16 6000                       		bra.s	loc_19F96
0001CE18                            ; ===========================================================================
0001CE18                            
0001CE18                            loc_19F50:
0001CE18 5E78 F636                  		addq.w	#7,(v_random).w
0001CE1C 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CE22 66EC                       		bne.s	loc_19F48
0001CE24 303C 0300                  		move.w	#$300,d0
0001CE28 0828 0000 0022             		btst	#0,obStatus(a0)
0001CE2E 6600                       		bne.s	loc_19F6A
0001CE30 4440                       		neg.w	d0
0001CE32                            
0001CE32                            loc_19F6A:
0001CE32 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CE36 4A28 0035                  		tst.b	$35(a0)
0001CE3A 6600                       		bne.s	loc_19F88
0001CE3C 5328 0021                  		subq.b	#1,obColProp(a0)
0001CE40 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CE46 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CE4C                            
0001CE4C                            loc_19F88:
0001CE4C 5328 0035                  		subq.b	#1,$35(a0)
0001CE50 6700                       		beq.s	loc_19F96
0001CE52 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CE58 6000                       		bra.s	loc_19F9C
0001CE5A                            ; ===========================================================================
0001CE5A                            
0001CE5A                            loc_19F96:
0001CE5A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CE60                            
0001CE60                            loc_19F9C:
0001CE60 43FA FA68                  		lea	Ani_SEgg(pc),a1
0001CE64 4EF9 0000 C848             		jmp	(AnimateSprite).l
0001CE6A                            ; ===========================================================================
0001CE6A                            
0001CE6A                            loc_19FA6:
0001CE6A 4A28 0021                  		tst.b	obColProp(a0)
0001CE6E 6700                       		beq.s	loc_19FBC
0001CE70 5428 0034                  		addq.b	#2,$34(a0)
0001CE74 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CE7A 4268 0032                  		clr.w	$32(a0)
0001CE7E 4E75                       		rts	
0001CE80                            ; ===========================================================================
0001CE80                            
0001CE80                            loc_19FBC:
0001CE80 7064                       			moveq	#100,d0
0001CE82 6100 0000                  			bsr.w	AddPoints
0001CE86 117C 0006 0034             		move.b	#6,$34(a0)
0001CE8C 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CE92 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CE98 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CE9E 4E75                       		rts	
0001CEA0                            ; ===========================================================================
0001CEA0 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CEB0                            ; ===========================================================================
0001CEB0                            
0001CEB0                            loc_19FE6:
0001CEB0 70FF                       		moveq	#-1,d0
0001CEB2 3028 0036                  		move.w	$36(a0),d0
0001CEB6 2240                       		movea.l	d0,a1
0001CEB8 4A68 0030                  		tst.w	$30(a0)
0001CEBC 6A00                       		bpl.s	loc_1A000
0001CEBE 4268 0030                  		clr.w	$30(a0)
0001CEC2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CEC8 6100                       		bsr.s	loc_1A020
0001CECA                            
0001CECA                            loc_1A000:
0001CECA 700F                       		moveq	#$F,d0
0001CECC C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CED0 6600                       		bne.s	loc_1A00A
0001CED2 6100                       		bsr.s	loc_1A020
0001CED4                            
0001CED4                            loc_1A00A:
0001CED4 4A68 0032                  		tst.w	$32(a0)
0001CED8 6700                       		beq.s	locret_1A01E
0001CEDA 5528 0034                  		subq.b	#2,$34(a0)
0001CEDE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CEE4 4268 0032                  		clr.w	$32(a0)
0001CEE8                            
0001CEE8                            locret_1A01E:
0001CEE8 4E75                       		rts	
0001CEEA                            ; ===========================================================================
0001CEEA                            
0001CEEA                            loc_1A020:
0001CEF4                            ; ===========================================================================
0001CEF4                            
0001CEF4                            loc_1A02A:
0001CEF4 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001CEFA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF00 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001CF06 117C 0006 001A             		move.b	#6,obFrame(a0)
0001CF0C 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CF12 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001CF18 6500                       		bcs.s	loc_1A070
0001CF1A 317C 059C 000C             		move.w	#$59C,obY(a0)
0001CF20 5428 0034                  		addq.b	#2,$34(a0)
0001CF24 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001CF2A 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001CF30 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001CF36 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001CF3A                            
0001CF3A                            loc_1A070:
0001CF3A 6000 0000                  		bra.w	loc_1A166
0001CF3E                            ; ===========================================================================
0001CF3E                            
0001CF3E                            loc_1A074:
0001CF3E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF44 117C 0004 001C             		move.b	#4,obAnim(a0)
0001CF4A 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001CF50 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CF56 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001CF5C 6500                       		bcs.s	loc_1A09A
0001CF5E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001CF64                            
0001CF64                            loc_1A09A:
0001CF64 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001CF6A 3028 0008                  		move.w	obX(a0),d0
0001CF6E 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CF72 6A00                       		bpl.s	loc_1A0B4
0001CF74 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001CF7A 6000 0000                  		bra.w	loc_1A0F2
0001CF7E                            ; ===========================================================================
0001CF7E                            
0001CF7E                            loc_1A0B4:
0001CF7E 0440 0070                  		subi.w	#$70,d0
0001CF82 6500                       		bcs.s	loc_1A0F2
0001CF84 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001CF8A 5140                       		subq.w	#8,d0
0001CF8C 6500                       		bcs.s	loc_1A0F2
0001CF8E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001CF94 5140                       		subq.w	#8,d0
0001CF96 6500                       		bcs.s	loc_1A0F2
0001CF98 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CF9E 5140                       		subq.w	#8,d0
0001CFA0 6500                       		bcs.s	loc_1A0F2
0001CFA2 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFA8 5140                       		subq.w	#8,d0
0001CFAA 6500                       		bcs.s	loc_1A0F2
0001CFAC 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFB2 0440 0038                  		subi.w	#$38,d0
0001CFB6 6500                       		bcs.s	loc_1A0F2
0001CFB8 4268 0010                  		clr.w	obVelX(a0)
0001CFBC                            
0001CFBC                            loc_1A0F2:
0001CFBC 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001CFC2 6500                       		bcs.s	loc_1A110
0001CFC4 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001CFCA 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001CFD0 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001CFD6 5428 0034                  		addq.b	#2,$34(a0)
0001CFDA                            
0001CFDA                            loc_1A110:
0001CFDA 6000                       		bra.s	loc_1A15C
0001CFDC                            ; ===========================================================================
0001CFDC                            
0001CFDC                            loc_1A112:
0001CFDC 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001CFE2 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001CFE8 6500                       		bcs.s	loc_1A124
0001CFEA 4268 0010                  		clr.w	obVelX(a0)
0001CFEE                            
0001CFEE                            loc_1A124:
0001CFEE 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001CFF4 4A68 0012                  		tst.w	obVelY(a0)
0001CFF8 6B00                       		bmi.s	loc_1A142
0001CFFA 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D000 6500                       		bcs.s	loc_1A142
0001D002 317C 0592 000C             		move.w	#$592,obY(a0)
0001D008 4268 0012                  		clr.w	obVelY(a0)
0001D00C                            
0001D00C                            loc_1A142:
0001D00C 3028 0010                  		move.w	obVelX(a0),d0
0001D010 8068 0012                  		or.w	obVelY(a0),d0
0001D014 6600                       		bne.s	loc_1A15C
0001D016 5428 0034                  		addq.b	#2,$34(a0)
0001D01A 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D020 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D026                            
0001D026                            loc_1A15C:
0001D026 43FA F8A2                  		lea	Ani_SEgg(pc),a1
0001D02A 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001D030                            
0001D030                            loc_1A166:
0001D030 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D036 6C00                       		bge.s	loc_1A172
0001D038 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D03C                            
0001D03C                            loc_1A172:
0001D03C 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D042 6C00                       		bge.s	locret_1A190
0001D044 323C 001B                  		move.w	#$1B,d1
0001D048 343C 0070                  		move.w	#$70,d2
0001D04C 363C 0071                  		move.w	#$71,d3
0001D050 3828 0008                  		move.w	obX(a0),d4
0001D054 4EF9 0001 1B6A             		jmp	(SolidObject).l
0001D05A                            ; ===========================================================================
0001D05A                            
0001D05A                            locret_1A190:
0001D05A 4E75                       		rts	
0001D05C                            ; ===========================================================================
0001D05C                            
0001D05C                            loc_1A192:
0001D05C 217C 0001 AB84 0004        		move.l	#Map_Eggman,obMap(a0)
0001D064 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D06A 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D070 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D076 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001D07C 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D082 6400                       		bcc.s	loc_1A1D0
0001D084 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D08A 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D090 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D096 5428 0034                  		addq.b	#2,$34(a0)
0001D09A                            
0001D09A                            loc_1A1D0:
0001D09A 6000 FF8A                  		bra.w	loc_1A15C
0001D09E                            ; ===========================================================================
0001D09E                            
0001D09E                            loc_1A1D4:
0001D09E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0A4 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001D0AA 4A68 0030                  		tst.w	$30(a0)
0001D0AE 6600                       		bne.s	loc_1A1FC
0001D0B0 4A28 0020                  		tst.b	obColType(a0)
0001D0B4 6600                       		bne.s	loc_1A216
0001D0B6 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D0BC 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0C2                            
0001D0C2                            loc_1A1FC:
0001D0C2 5368 0030                  		subq.w	#1,$30(a0)
0001D0C6 6600                       		bne.s	loc_1A216
0001D0C8 4A28 0022                  		tst.b	obStatus(a0)
0001D0CC 6A00                       		bpl.s	loc_1A210
0001D0CE 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D0D4 6000                       		bra.s	loc_1A216
0001D0D6                            ; ===========================================================================
0001D0D6                            
0001D0D6                            loc_1A210:
0001D0D6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D0DC                            
0001D0DC                            loc_1A216:
0001D0DC 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D0E2 6D00                       		blt.s	loc_1A23A
0001D0E4 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D0EA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D0F0 4278 D020                  		clr.w	(v_player+obInertia).w
0001D0F4 4A68 0012                  		tst.w	obVelY(a0)
0001D0F8 6A00                       		bpl.s	loc_1A248
0001D0FA 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D100                            
0001D100                            loc_1A23A:
0001D100 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D106 6D00                       		blt.s	loc_1A248
0001D108 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D10E                            
0001D10E                            loc_1A248:
0001D10E 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D114 6500                       		bcs.s	loc_1A260
0001D116 4A28 0001                  		tst.b	obRender(a0)
0001D11A 6B00                       		bmi.s	loc_1A260
0001D11C 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D122 6000 FAF6                  		bra.w	Obj85_Delete
0001D126                            ; ===========================================================================
0001D126                            
0001D126                            loc_1A260:
0001D126 6000 FEFE                  		bra.w	loc_1A15C
0001D12A                            ; ===========================================================================
0001D12A                            
0001D12A                            loc_1A264:	; Routine 4
0001D12A 2268 0034                  		movea.l	$34(a0),a1
0001D12E 1011                       		move.b	(a1),d0
0001D130 B010                       		cmp.b	(a0),d0
0001D132 6600 FAE6                  		bne.w	Obj85_Delete
0001D136 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D13C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D142 6C00                       		bge.s	loc_1A280
0001D144 6000                       		bra.s	loc_1A2A6
0001D146                            ; ===========================================================================
0001D146                            
0001D146                            loc_1A280:
0001D146 4A69 0010                  		tst.w	obVelX(a1)
0001D14A 6700                       		beq.s	loc_1A28C
0001D14C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D152                            
0001D152                            loc_1A28C:
0001D152 43FA D9E0                  		lea	Ani_Eggman(pc),a1
0001D156 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001D15C                            
0001D15C                            loc_1A296:
0001D15C 2268 0034                  		movea.l	$34(a0),a1
0001D160 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D166 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D16C                            
0001D16C                            loc_1A2A6:
0001D16C 2268 0034                  		movea.l	$34(a0),a1
0001D170 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D176 7003                       		moveq	#3,d0
0001D178 C028 0022                  		and.b	obStatus(a0),d0
0001D17C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D182 8128 0001                  		or.b	d0,obRender(a0)
0001D186 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001D18C                            ; ===========================================================================
0001D18C                            
0001D18C                            loc_1A2C6:	; Routine 6
0001D18C 2268 0034                  		movea.l	$34(a0),a1
0001D190 1011                       		move.b	(a1),d0
0001D192 B010                       		cmp.b	(a0),d0
0001D194 6600 FA84                  		bne.w	Obj85_Delete
0001D198 0CA9 0001 AB84 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D1A0 6700                       		beq.s	loc_1A2E4
0001D1A2 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D1A8 60C2                       		bra.s	loc_1A2A6
0001D1AA                            ; ===========================================================================
0001D1AA                            
0001D1AA                            loc_1A2E4:
0001D1AA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D1B0 4A29 0021                  		tst.b	obColProp(a1)
0001D1B4 6F00                       		ble.s	loc_1A312
0001D1B6 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D1BC 217C 0001 AB84 0004        		move.l	#Map_Eggman,obMap(a0)
0001D1C4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D1CA 43FA D968                  		lea	Ani_Eggman(pc),a1
0001D1CE 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001D1D4 6000 FF86                  		bra.w	loc_1A296
0001D1D8                            ; ===========================================================================
0001D1D8                            
0001D1D8                            loc_1A312:
0001D1D8 4A28 0001                  		tst.b	1(a0)
0001D1DC 6A00 FA3C                  		bpl.w	Obj85_Delete
0001D1E0 6100 D4FC                  		bsr.w	BossDefeated
0001D1E4 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D1EA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D1F0 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D1F8 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D1FE 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D202 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001D208 6000 FF52                  		bra.w	loc_1A296
0001D20C                            ; ===========================================================================
0001D20C                            
0001D20C                            loc_1A346:	; Routine 8
0001D20C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D212 2268 0034                  		movea.l	$34(a0),a1
0001D216 0CA9 0001 AB84 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D21E 6700                       		beq.s	loc_1A35E
0001D220 6000 FF4A                  		bra.w	loc_1A2A6
0001D224                            ; ===========================================================================
0001D224                            
0001D224                            loc_1A35E:
0001D224 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D22A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D230 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D234 6600                       		bne.s	loc_1A376
0001D236 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D23C                            
0001D23C                            loc_1A376:
0001D23C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D240 6E00                       		bgt.s	loc_1A38A
0001D242 5228 001A                  		addq.b	#1,obFrame(a0)
0001D246 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D24C 6E00 F9CC                  		bgt.w	Obj85_Delete
0001D250                            
0001D250                            loc_1A38A:
0001D250 6000 FF0A                  		bra.w	loc_1A296
0001D254                            ; ===========================================================================
0001D254                            
0001D254                            loc_1A38E:	; Routine $A
0001D254 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D25A 3038 D008                  		move.w	(v_player+obX).w,d0
0001D25E 9068 0008                  		sub.w	obX(a0),d0
0001D262 6500                       		bcs.s	loc_1A3A6
0001D264 4A28 0001                  		tst.b	obRender(a0)
0001D268 6A00 F9B0                  		bpl.w	Obj85_Delete
0001D26C                            
0001D26C                            loc_1A3A6:
0001D26C 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001D272                            ; ===========================================================================
0001D272                            
0001D272                            loc_1A3AC:	; Routine $C
0001D272 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D278 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D27E 2268 0034                  		movea.l	$34(a0),a1
0001D282 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D288 6600                       		bne.s	loc_1A3D0
0001D28A 0CA9 0001 AB84 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D292 6700 F986                  		beq.w	Obj85_Delete
0001D296                            
0001D296                            loc_1A3D0:
0001D296 6000 FED4                  		bra.w	loc_1A2A6
0001D29A                            		
0001D29A                            BossModeMusic:
0001D29A 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D2A0 6600 0000                  		bne.w	NormalMode
0001D2A4 4EF9 0000 0000             		jmp	PinchMode
0001D2AA                            
0001D2AA                            NormalMode:
0001D2AA 303C 00AC                  		move.w	#$AC,d0
0001D2AE 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D2B4 4E75                       		rts
0001D2B6                            
0001D2B6                            PinchMode:
0001D2B6 303C 0094                  		move.w	#$94,d0
0001D2BA 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D2C0 303C 00E2                  		move.w	#$E2,d0
0001D2C4 4EB9 0000 124A             		jsr	(PlaySound).l
0001D2CA 4E75                       		rts		
0001D2CA 4E75                       		rts		
0001D2CC                            		include	"_anim\FZ Eggman in Ship.asm"
0001D2CC                            ; ---------------------------------------------------------------------------
0001D2CC                            ; Animation script - Eggman (FZ)
0001D2CC                            ; ---------------------------------------------------------------------------
0001D2CC 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D2CE 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D2D2                            		even
0001D2D2                            		even
0001D2D2                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D2D2                            ; ---------------------------------------------------------------------------
0001D2D2                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D2D2                            ; ---------------------------------------------------------------------------
0001D2D2                            Map_FZDamaged_internal:
0001D2D2 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D2D4 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D2D6 06                         @damage1:	dc.b 6
0001D2D7 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D2DC EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D2E1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D2E6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D2EB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D2F0 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D2F5 06                         @damage2:	dc.b 6
0001D2F6 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D2FB EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D300 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D305 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D30A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D30F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D314                            		even
0001D314                            		even
0001D314                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D314                            ; ---------------------------------------------------------------------------
0001D314                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D314                            ; ---------------------------------------------------------------------------
0001D314                            Map_FZLegs_internal:
0001D314 0000                       		dc.w @extended-Map_FZLegs_internal
0001D316 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D318 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D31A 02                         @extended:	dc.b 2
0001D31B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D320 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D325 03                         @halfway:	dc.b 3
0001D326 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D32B 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D330 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D335 02                         @retracted:	dc.b 2
0001D336 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D33B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D340                            		even
0001D340                            		even
0001D340                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D340                            ; ---------------------------------------------------------------------------
0001D340                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D340                            ; ---------------------------------------------------------------------------
0001D340                            
0001D340                            Obj84_Delete:
0001D340 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001D346                            ; ===========================================================================
0001D346                            
0001D346                            EggmanCylinder:
0001D346 7000                       		moveq	#0,d0
0001D348 1028 0024                  		move.b	obRoutine(a0),d0
0001D34C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D350 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D354                            ; ===========================================================================
0001D354 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D356 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D358 0000                       		dc.w loc_1A57E-Obj84_Index
0001D35A                            
0001D35A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D35E 2550 0620                  		dc.w $2550, $620
0001D362 2490 04C0                  		dc.w $2490, $4C0
0001D366 2510 04C0                  		dc.w $2510, $4C0
0001D36A                            ; ===========================================================================
0001D36A                            
0001D36A                            Obj84_Main:	; Routine
0001D36A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D36E 7000                       		moveq	#0,d0
0001D370 1028 0028                  		move.b	obSubtype(a0),d0
0001D374 D040                       		add.w	d0,d0
0001D376 D2C0                       		adda.w	d0,a1
0001D378 117C 0004 0001             		move.b	#4,obRender(a0)
0001D37E 08E8 0007 0001             		bset	#7,obRender(a0)
0001D384 08E8 0004 0001             		bset	#4,obRender(a0)
0001D38A 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D390 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D398 3159 0008                  		move.w	(a1)+,obX(a0)
0001D39C 3151 000C                  		move.w	(a1),obY(a0)
0001D3A0 3159 0038                  		move.w	(a1)+,$38(a0)
0001D3A4 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D3AA 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D3B0 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D3B6 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D3BC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D3C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3C6                            
0001D3C6                            loc_1A4CE:	; Routine 2
0001D3C6 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D3CC 6F00                       		ble.s	loc_1A4DC
0001D3CE 08E8 0001 0001             		bset	#1,obRender(a0)
0001D3D4                            
0001D3D4                            loc_1A4DC:
0001D3D4 42A8 003C                  		clr.l	$3C(a0)
0001D3D8 4A28 0029                  		tst.b	$29(a0)
0001D3DC 6700                       		beq.s	loc_1A4EA
0001D3DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3E2                            
0001D3E2                            loc_1A4EA:
0001D3E2 2028 003C                  		move.l	$3C(a0),d0
0001D3E6 2228 0038                  		move.l	$38(a0),d1
0001D3EA D280                       		add.l	d0,d1
0001D3EC 4841                       		swap	d1
0001D3EE 3141 000C                  		move.w	d1,obY(a0)
0001D3F2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D3F8 6600                       		bne.s	loc_1A524
0001D3FA 4A68 0030                  		tst.w	$30(a0)
0001D3FE 6A00                       		bpl.s	loc_1A524
0001D400 70F6                       		moveq	#-$A,d0
0001D402 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D408 6F00                       		ble.s	loc_1A514
0001D40A 700E                       		moveq	#$E,d0
0001D40C                            
0001D40C                            loc_1A514:
0001D40C D240                       		add.w	d0,d1
0001D40E 2268 0034                  		movea.l	$34(a0),a1
0001D412 3341 000C                  		move.w	d1,obY(a1)
0001D416 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D41C                            
0001D41C                            loc_1A524:
0001D41C 323C 002B                  		move.w	#$2B,d1
0001D420 343C 0060                  		move.w	#$60,d2
0001D424 363C 0061                  		move.w	#$61,d3
0001D428 3828 0008                  		move.w	obX(a0),d4
0001D42C 4EB9 0001 1B6A             		jsr	(SolidObject).l
0001D432 7000                       		moveq	#0,d0
0001D434 3228 003C                  		move.w	$3C(a0),d1
0001D438 6A00                       		bpl.s	loc_1A550
0001D43A 4441                       		neg.w	d1
0001D43C 5141                       		subq.w	#8,d1
0001D43E 6500                       		bcs.s	loc_1A55C
0001D440 5200                       		addq.b	#1,d0
0001D442 E841                       		asr.w	#4,d1
0001D444 D041                       		add.w	d1,d0
0001D446 6000                       		bra.s	loc_1A55C
0001D448                            ; ===========================================================================
0001D448                            
0001D448                            loc_1A550:
0001D448 0441 0027                  		subi.w	#$27,d1
0001D44C 6500                       		bcs.s	loc_1A55C
0001D44E 5200                       		addq.b	#1,d0
0001D450 E841                       		asr.w	#4,d1
0001D452 D041                       		add.w	d1,d0
0001D454                            
0001D454                            loc_1A55C:
0001D454 1140 001A                  		move.b	d0,obFrame(a0)
0001D458 3038 D008                  		move.w	(v_player+obX).w,d0
0001D45C 9068 0008                  		sub.w	obX(a0),d0
0001D460 6B00                       		bmi.s	loc_1A578
0001D462 0440 0140                  		subi.w	#$140,d0
0001D466 6B00                       		bmi.s	loc_1A578
0001D468 4A28 0001                  		tst.b	obRender(a0)
0001D46C 6A00 FED2                  		bpl.w	Obj84_Delete
0001D470                            
0001D470                            loc_1A578:
0001D470 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001D476                            ; ===========================================================================
0001D476                            
0001D476                            loc_1A57E:	; Routine 4
0001D476 7000                       		moveq	#0,d0
0001D478 1028 0028                  		move.b	obSubtype(a0),d0
0001D47C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D480 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D484 6000 FF5C                  		bra.w	loc_1A4EA
0001D488                            ; ===========================================================================
0001D488 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D48A 0000                       		dc.w loc_1A598-off_1A590
0001D48C 0000                       		dc.w loc_1A604-off_1A590
0001D48E 0000                       		dc.w loc_1A604-off_1A590
0001D490                            ; ===========================================================================
0001D490                            
0001D490                            loc_1A598:
0001D490 4A28 0029                  		tst.b	$29(a0)
0001D494 6600                       		bne.s	loc_1A5D4
0001D496 2268 0034                  		movea.l	$34(a0),a1
0001D49A 4A29 0021                  		tst.b	obColProp(a1)
0001D49E 6600                       		bne.s	loc_1A5B4
0001D4A0 6100 D23C                  		bsr.w	BossDefeated
0001D4A4 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D4AC                            
0001D4AC                            loc_1A5B4:
0001D4AC 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D4B4 6400                       		bcc.s	locret_1A602
0001D4B6 42A8 003C                  		clr.l	$3C(a0)
0001D4BA 2268 0034                  		movea.l	$34(a0),a1
0001D4BE 5369 0032                  		subq.w	#1,$32(a1)
0001D4C2 4269 0030                  		clr.w	$30(a1)
0001D4C6 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D4CA 4E75                       		rts	
0001D4CC                            ; ===========================================================================
0001D4CC                            
0001D4CC                            loc_1A5D4:
0001D4CC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D4D2 6C00                       		bge.s	loc_1A5E4
0001D4D4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D4DC                            
0001D4DC                            loc_1A5E4:
0001D4DC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D4E4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D4EA 6E00                       		bgt.s	locret_1A602
0001D4EC 4268 003E                  		clr.w	$3E(a0)
0001D4F0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D4F6 4228 0029                  		clr.b	$29(a0)
0001D4FA                            
0001D4FA                            locret_1A602:
0001D4FA 4E75                       		rts	
0001D4FC                            ; ===========================================================================
0001D4FC                            
0001D4FC                            loc_1A604:
0001D4FC 08E8 0001 0001             		bset	#1,obRender(a0)
0001D502 4A28 0029                  		tst.b	$29(a0)
0001D506 6600                       		bne.s	loc_1A646
0001D508 2268 0034                  		movea.l	$34(a0),a1
0001D50C 4A29 0021                  		tst.b	obColProp(a1)
0001D510 6600                       		bne.s	loc_1A626
0001D512 6100 D1CA                  		bsr.w	BossDefeated
0001D516 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D51E                            
0001D51E                            loc_1A626:
0001D51E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D526 6400                       		bcc.s	locret_1A674
0001D528 42A8 003C                  		clr.l	$3C(a0)
0001D52C 2268 0034                  		movea.l	$34(a0),a1
0001D530 5369 0032                  		subq.w	#1,$32(a1)
0001D534 4269 0030                  		clr.w	$30(a1)
0001D538 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D53C 4E75                       		rts	
0001D53E                            ; ===========================================================================
0001D53E                            
0001D53E                            loc_1A646:
0001D53E 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D544 6D00                       		blt.s	loc_1A656
0001D546 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D54E                            
0001D54E                            loc_1A656:
0001D54E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D556 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D55C 6D00                       		blt.s	locret_1A674
0001D55E 4268 003E                  		clr.w	$3E(a0)
0001D562 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D568 4228 0029                  		clr.b	$29(a0)
0001D56C                            
0001D56C                            locret_1A674:
0001D56C 4E75                       		rts	
0001D56C 4E75                       		rts	
0001D56E                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D56E                            ; --------------------------------------------------------------------------------
0001D56E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D56E                            ; --------------------------------------------------------------------------------
0001D56E                            
0001D56E                            SME_SCUpI:	
0001D56E 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D572 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D576 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D57A 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D57E 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D582 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D586 06                         SME_SCUpI_18:	dc.b 6	
0001D587 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D58C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D591 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D596 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D59B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5A0 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D5A5 08                         SME_SCUpI_37:	dc.b 8	
0001D5A6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5AB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5B0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5B5 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5BA B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5BF D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D5C4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D5C9 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D5CE 0A                         SME_SCUpI_60:	dc.b $A	
0001D5CF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5D4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5D9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5DE B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5E3 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5E8 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D5ED D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D5F2 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D5F7 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D5FC A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D601 0C                         SME_SCUpI_93:	dc.b $C	
0001D602 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D607 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D60C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D611 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D616 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D61B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D620 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D625 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D62A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D62F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D634 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D639 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D63E 0D                         SME_SCUpI_D0:	dc.b $D	
0001D63F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D644 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D649 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D64E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D653 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D658 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D65D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D662 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D667 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D66C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D671 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D676 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D67B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D680 0E                         SME_SCUpI_112:	dc.b $E	
0001D681 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D686 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D68B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D690 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D695 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D69A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D69F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6A4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6A9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6AE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D6B3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D6B8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D6BD 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D6C2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6C7 0E                         SME_SCUpI_159:	dc.b $E	
0001D6C8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6CD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6D2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6D7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6DC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6E1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6E6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6EB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6F0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6F5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D6FA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D6FF 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D704 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D709 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D70E 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D70F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D714 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D719 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D71E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D723 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D728 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D72D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D732 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D737 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D73C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D741 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D746 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D74B 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D750 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D755 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D756 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D75B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D760 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D765 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D76A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D76F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D774 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D779 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D77E F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D783 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D788 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D78D 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D792 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D797 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D79C 0E                         SME_SCUpI_22E:	dc.b $E	
0001D79D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7A2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7A7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7AC B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7B1 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7B6 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7BB D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7C0 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7C5 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7CA 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7CF 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7D4 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7D9 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7DE A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7E3 0E                         SME_SCUpI_275:	dc.b $E	
0001D7E4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7E9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7EE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7F3 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7F8 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7FD D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D802 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D807 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D80C F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D811 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D816 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D81B 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D820 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D825 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D82A 02                         SME_SCUpI_2BC:	dc.b 2	
0001D82B F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D830 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D836 00                         		even
0001D836 00                         		even
0001D836                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D836                            ; ---------------------------------------------------------------------------
0001D836                            ; Object 86 - energy balls (FZ)
0001D836                            ; ---------------------------------------------------------------------------
0001D836                            
0001D836                            BossPlasma:
0001D836 7000                       		moveq	#0,d0
0001D838 1028 0024                  		move.b	obRoutine(a0),d0
0001D83C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D840 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D844                            ; ===========================================================================
0001D844 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D846 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D848 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D84A 0000                       		dc.w loc_1A962-Obj86_Index
0001D84C 0000                       		dc.w loc_1A982-Obj86_Index
0001D84E                            ; ===========================================================================
0001D84E                            
0001D84E                            Obj86_Main:	; Routine 0
0001D84E 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D854 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D85A 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D860 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D868 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D86E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D874 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D87A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D880 117C 0004 0001             		move.b	#4,obRender(a0)
0001D886 08E8 0007 0001             		bset	#7,obRender(a0)
0001D88C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D890                            
0001D890                            Obj86_Generator:; Routine 2
0001D890 2268 0034                  		movea.l	$34(a0),a1
0001D894 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D89A 6600                       		bne.s	loc_1A850
0001D89C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D8A0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D8A6 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001D8AC                            ; ===========================================================================
0001D8AC                            
0001D8AC                            loc_1A850:
0001D8AC 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D8B2 4A28 0029                  		tst.b	$29(a0)
0001D8B6 6700                       		beq.s	loc_1A86C
0001D8B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D8BC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D8C2 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001D8C8                            
0001D8C8                            loc_1A86C:
0001D8C8 323C 0013                  		move.w	#$13,d1
0001D8CC 343C 0008                  		move.w	#8,d2
0001D8D0 363C 0011                  		move.w	#$11,d3
0001D8D4 3828 0008                  		move.w	obX(a0),d4
0001D8D8 4EB9 0001 1B6A             		jsr	(SolidObject).l
0001D8DE 3038 D008                  		move.w	(v_player+obX).w,d0
0001D8E2 9068 0008                  		sub.w	obX(a0),d0
0001D8E6 6B00                       		bmi.s	loc_1A89A
0001D8E8 0440 0140                  		subi.w	#$140,d0
0001D8EC 6B00                       		bmi.s	loc_1A89A
0001D8EE 4A28 0001                  		tst.b	obRender(a0)
0001D8F2 6A00 FA4C                  		bpl.w	Obj84_Delete
0001D8F6                            
0001D8F6                            loc_1A89A:
0001D8F6 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001D8FA 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001D900 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001D906                            ; ===========================================================================
0001D906                            
0001D906                            Obj86_MakeBalls:; Routine 4
0001D906 4A28 0029                  		tst.b	$29(a0)
0001D90A 6700 0000                  		beq.w	loc_1A954
0001D90E 4228 0029                  		clr.b	$29(a0)
0001D912 D068 0030                  		add.w	$30(a0),d0
0001D916 0240 001E                  		andi.w	#$1E,d0
0001D91A D4C0                       		adda.w	d0,a2
0001D91C 5868 0030                  		addq.w	#4,$30(a0)
0001D920 4268 0032                  		clr.w	$32(a0)
0001D924 7403                       		moveq	#3,d2
0001D926                            
0001D926                            Obj86_Loop:
0001D926 4EB9 0000 FC02             		jsr	(FindNextFreeObj).l
0001D92C 6600 0000                  		bne.w	loc_1A954
0001D930 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001D934 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D93A 337C 053C 000C             		move.w	#$53C,obY(a1)
0001D940 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D946 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001D94C 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001D954 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001D95A 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001D960 137C 0000 0020             		move.b	#0,obColType(a1)
0001D966 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D96C 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001D972 137C 0004 0001             		move.b	#4,obRender(a1)
0001D978 08E9 0007 0001             		bset	#7,obRender(a1)
0001D97E 2348 0034                  		move.l	a0,$34(a1)
0001D982 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001D988 3228 0032                  		move.w	$32(a0),d1
0001D98C C3FC FFB1                  		muls.w	#-$4F,d1
0001D990 0641 2578                  		addi.w	#$2578,d1
0001D994 0240 001F                  		andi.w	#$1F,d0
0001D998 0440 0010                  		subi.w	#$10,d0
0001D99C D041                       		add.w	d1,d0
0001D99E 3340 0030                  		move.w	d0,$30(a1)
0001D9A2 5268 0032                  		addq.w	#1,$32(a0)
0001D9A6 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001D9AC 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001D9B0                            
0001D9B0                            loc_1A954:
0001D9B0 4A68 0032                  		tst.w	$32(a0)
0001D9B4 6600                       		bne.s	loc_1A95E
0001D9B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9BA                            
0001D9BA                            loc_1A95E:
0001D9BA 6000 FF0C                  		bra.w	loc_1A86C
0001D9BE                            ; ===========================================================================
0001D9BE                            
0001D9BE                            loc_1A962:	; Routine 6
0001D9BE 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D9C4 4A68 0038                  		tst.w	$38(a0)
0001D9C8 6600                       		bne.s	loc_1A97E
0001D9CA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001D9D0 2268 0034                  		movea.l	$34(a0),a1
0001D9D4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001D9DA                            
0001D9DA                            loc_1A97E:
0001D9DA 6000 FEEC                  		bra.w	loc_1A86C
0001D9DE                            ; ===========================================================================
0001D9DE                            
0001D9DE                            loc_1A982:	; Routine 8
0001D9DE 7000                       		moveq	#0,d0
0001D9E0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D9E4 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001D9E8 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001D9EC 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001D9F0 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001D9F6 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001D9FC                            ; ===========================================================================
0001D9FC 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001D9FE 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DA00 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DA02                            ; ===========================================================================
0001DA02                            
0001DA02                            loc_1A9A6:
0001DA02 3028 0030                  		move.w	$30(a0),d0
0001DA06 9068 0008                  		sub.w	obX(a0),d0
0001DA0A E940                       		asl.w	#4,d0
0001DA0C 3140 0010                  		move.w	d0,obVelX(a0)
0001DA10 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DA16 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DA1A 4E75                       		rts	
0001DA1C                            ; ===========================================================================
0001DA1C                            
0001DA1C                            loc_1A9C0:
0001DA1C 4A68 0010                  		tst.w	obVelX(a0)
0001DA20 6700                       		beq.s	loc_1A9E6
0001DA22 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001DA28 3028 0008                  		move.w	obX(a0),d0
0001DA2C 9068 0030                  		sub.w	$30(a0),d0
0001DA30 6400                       		bcc.s	loc_1A9E6
0001DA32 4268 0010                  		clr.w	obVelX(a0)
0001DA36 D168 0008                  		add.w	d0,obX(a0)
0001DA3A 2268 0034                  		movea.l	$34(a0),a1
0001DA3E 5369 0032                  		subq.w	#1,$32(a1)
0001DA42                            
0001DA42                            loc_1A9E6:
0001DA42 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DA48 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DA4C 6600                       		bne.s	locret_1AA1C
0001DA4E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DA52 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DA58 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DA5E 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DA64 7000                       		moveq	#0,d0
0001DA66 3038 D008                  		move.w	(v_player+obX).w,d0
0001DA6A 9068 0008                  		sub.w	obX(a0),d0
0001DA6E 3140 0010                  		move.w	d0,obVelX(a0)
0001DA72 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DA78                            
0001DA78                            locret_1AA1C:
0001DA78 4E75                       		rts	
0001DA7A                            ; ===========================================================================
0001DA7A                            
0001DA7A                            loc_1AA1E:
0001DA7A 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001DA80 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DA86 6400                       		bcc.s	loc_1AA34
0001DA88 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DA8C 6700                       		beq.s	loc_1AA34
0001DA8E 4E75                       		rts	
0001DA90                            ; ===========================================================================
0001DA90                            
0001DA90                            loc_1AA34:
0001DA90 2268 0034                  		movea.l	$34(a0),a1
0001DA94 5369 0038                  		subq.w	#1,$38(a1)
0001DA98 6000 F8A6                  		bra.w	Obj84_Delete
0001DA98 6000 F8A6                  		bra.w	Obj84_Delete
0001DA9C                            		include	"_anim\Plasma Ball Launcher.asm"
0001DA9C                            ; ---------------------------------------------------------------------------
0001DA9C                            ; Animation script - energy ball launcher (FZ)
0001DA9C                            ; ---------------------------------------------------------------------------
0001DA9C 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DA9E 0000                       		dc.w @redsparking-Ani_PLaunch
0001DAA0 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DAA2 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DAA6 00                         		even
0001DAA6 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DAAC                            		even
0001DAAC 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DAB2                            		even
0001DAB2                            		even
0001DAB2                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DAB2                            ; ---------------------------------------------------------------------------
0001DAB2                            ; Sprite mappings - energy ball	launcher (FZ)
0001DAB2                            ; ---------------------------------------------------------------------------
0001DAB2                            Map_PLaunch_internal:
0001DAB2 0000                       		dc.w @red-Map_PLaunch_internal
0001DAB4 0000                       		dc.w @white-Map_PLaunch_internal
0001DAB6 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DAB8 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DABA 01                         @red:		dc.b 1
0001DABB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DAC0 01                         @white:		dc.b 1
0001DAC1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DAC6 01                         @sparking1:	dc.b 1
0001DAC7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DACC 01                         @sparking2:	dc.b 1
0001DACD F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DAD2                            		even
0001DAD2                            		even
0001DAD2                            		include	"_anim\Plasma Balls.asm"
0001DAD2                            ; ---------------------------------------------------------------------------
0001DAD2                            ; Animation script - energy balls (FZ)
0001DAD2                            ; ---------------------------------------------------------------------------
0001DAD2 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DAD4 0000                       		dc.w @short-Ani_Plasma
0001DAD6 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DAE5 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DAF4 0A05 FF                    		dc.b $A, 5, afEnd
0001DAF8 00                         		even
0001DAF8 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DB02                            		even
0001DB02                            		even
0001DB02                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DB02                            ; ---------------------------------------------------------------------------
0001DB02                            ; Sprite mappings - energy balls (FZ)
0001DB02                            ; ---------------------------------------------------------------------------
0001DB02                            Map_Plasma_internal:
0001DB02 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DB04 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DB06 0000                       		dc.w @white1-Map_Plasma_internal
0001DB08 0000                       		dc.w @white2-Map_Plasma_internal
0001DB0A 0000                       		dc.w @white3-Map_Plasma_internal
0001DB0C 0000                       		dc.w @white4-Map_Plasma_internal
0001DB0E 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DB10 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DB12 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DB14 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DB16 0000                       		dc.w @blank-Map_Plasma_internal
0001DB18 02                         @fuzzy1:	dc.b 2
0001DB19 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DB1E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DB23 02                         @fuzzy2:	dc.b 2
0001DB24 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DB29 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DB2E 02                         @white1:	dc.b 2
0001DB2F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DB34 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DB39 02                         @white2:	dc.b 2
0001DB3A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DB3F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DB44 02                         @white3:	dc.b 2
0001DB45 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DB4A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DB4F 02                         @white4:	dc.b 2
0001DB50 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DB55 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DB5A 01                         @fuzzy3:	dc.b 1
0001DB5B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DB60 01                         @fuzzy4:	dc.b 1
0001DB61 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DB66 02                         @fuzzy5:	dc.b 2
0001DB67 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DB6C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DB71 02                         @fuzzy6:	dc.b 2
0001DB72 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DB77 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DB7C 00                         @blank:		dc.b 0
0001DB7E 00                         		even
0001DB7E 00                         		even
0001DB7E                            
0001DB7E                            		include	"_incObj\3E Prison Capsule.asm"
0001DB7E                            ; ---------------------------------------------------------------------------
0001DB7E                            ; Object 3E - prison capsule
0001DB7E                            ; ---------------------------------------------------------------------------
0001DB7E                            
0001DB7E                            Prison:
0001DB7E 7000                       		moveq	#0,d0
0001DB80 1028 0024                  		move.b	obRoutine(a0),d0
0001DB84 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DB88 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DBA8 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001DBAE                            
0001DBAE                            	@delete:
0001DBAE 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001DBB4                            ; ===========================================================================
0001DBB4 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DBB6 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DBB8 0000                       		dc.w Pri_Switched-Pri_Index
0001DBBA 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBBC 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBBE 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBC0 0000                       		dc.w Pri_Animals-Pri_Index
0001DBC2 0000                       		dc.w Pri_EndAct-Pri_Index
0001DBC4                            
0001DBC4 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DBC4                            
0001DBC4 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DBC8 040C 0501                  		dc.b 4,	$C, 5, 1
0001DBCC 0610 0403                  		dc.b 6,	$10, 4,	3
0001DBD0 0810 0305                  		dc.b 8,	$10, 3,	5
0001DBD4                            ; ===========================================================================
0001DBD4                            
0001DBD4                            Pri_Main:	; Routine 0
0001DBD4 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DBDC 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DBE2 117C 0004 0001             		move.b	#4,obRender(a0)
0001DBE8 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DBEE 7000                       		moveq	#0,d0
0001DBF0 1028 0028                  		move.b	obSubtype(a0),d0
0001DBF4 E548                       		lsl.w	#2,d0
0001DBF6 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DBFA 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DBFE 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DC02 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DC06 3028 0018                  		move.w obPriority(a0),d0 
0001DC0A E248                       		lsr.w #1,d0 
0001DC0C 0240 0380                  		andi.w #$380,d0 
0001DC10 3140 0018                  		move.w d0,obPriority(a0)		
0001DC14 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DC18 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DC1C 6600                       		bne.s	@not02		; if not, branch
0001DC1E                            
0001DC1E 117C 0006 0020             		move.b	#6,obColType(a0)
0001DC24 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DC2A                            
0001DC2A                            	@not02:
0001DC2A 4E75                       		rts	
0001DC2C                            ; ===========================================================================
0001DC2C                            
0001DC2C                            Pri_BodyMain:	; Routine 2
0001DC2C 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DC32 6700                       		beq.s	@chkopened
0001DC34 323C 002B                  		move.w	#$2B,d1
0001DC38 343C 0018                  		move.w	#$18,d2
0001DC3C 363C 0018                  		move.w	#$18,d3
0001DC40 3828 0008                  		move.w	obX(a0),d4
0001DC44 4EF9 0001 1B6A             		jmp	(SolidObject).l
0001DC4A                            ; ===========================================================================
0001DC4A                            
0001DC4A                            @chkopened:
0001DC4A 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DC4E 6700                       		beq.s	@open		; if yes, branch
0001DC50 4228 0025                  		clr.b	ob2ndRout(a0)
0001DC54 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DC5A 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DC60                            
0001DC60                            	@open:
0001DC60 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DC66 4E75                       		rts	
0001DC68                            ; ===========================================================================
0001DC68                            
0001DC68                            Pri_Switched:	; Routine 4
0001DC68 323C 0017                  		move.w	#$17,d1
0001DC6C 343C 0008                  		move.w	#8,d2
0001DC70 363C 0008                  		move.w	#8,d3
0001DC74 3828 0008                  		move.w	obX(a0),d4
0001DC78 4EB9 0001 1B6A             		jsr	(SolidObject).l
0001DC7E 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DC84 4EB9 0000 C848             		jsr	(AnimateSprite).l
0001DC8A 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DC90 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DC94 6700                       		beq.s	@open2		; if yes, branch
0001DC96                            
0001DC96 5068 000C                  		addq.w	#8,obY(a0)
0001DC9A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DCA0 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DCA6 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DCAA 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DCAE 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DCB4 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DCBA 4228 0025                  		clr.b	ob2ndRout(a0)
0001DCBE 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DCC4 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DCCA                            
0001DCCA                            	@open2:
0001DCCA 4E75                       		rts	
0001DCCC                            ; ===========================================================================
0001DCCC                            
0001DCCC                            Pri_Explosion:	; Routine 6, 8, $A
0001DCCC 7007                       		moveq	#7,d0
0001DCCE C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DCD2 6600                       		bne.s	@noexplosion
0001DCD4 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001DCDA 6600                       		bne.s	@noexplosion
0001DCDC 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DCE0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DCE6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DCEC 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DCF2 7200                       		moveq	#0,d1
0001DCF4 1200                       		move.b	d0,d1
0001DCF6 E409                       		lsr.b	#2,d1
0001DCF8 0441 0020                  		subi.w	#$20,d1
0001DCFC D369 0008                  		add.w	d1,obX(a1)
0001DD00 E048                       		lsr.w	#8,d0
0001DD02 E608                       		lsr.b	#3,d0
0001DD04 D169 000C                  		add.w	d0,obY(a1)
0001DD08                            
0001DD08                            	@noexplosion:
0001DD08 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DD0C 6700                       		beq.s	@makeanimal
0001DD0E 4E75                       		rts	
0001DD10                            ; ===========================================================================
0001DD10                            
0001DD10                            @makeanimal:
0001DD10 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DD16 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DD1C 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DD22 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DD28 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DD2E 7C07                       		moveq	#7,d6
0001DD30 3A3C 009A                  		move.w	#$9A,d5
0001DD34 78E4                       		moveq	#-$1C,d4
0001DD36                            
0001DD36                            	@loop:
0001DD36 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001DD3C 6600                       		bne.s	@fail
0001DD3E 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DD42 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD48 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD4E D969 0008                  		add.w	d4,obX(a1)
0001DD52 5E44                       		addq.w	#7,d4
0001DD54 3345 0036                  		move.w	d5,$36(a1)
0001DD58 5145                       		subq.w	#8,d5
0001DD5A 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DD5E                            
0001DD5E                            	@fail:
0001DD5E 4E75                       		rts	
0001DD60                            ; ===========================================================================
0001DD60                            
0001DD60                            Pri_Animals:	; Routine $C
0001DD60 7007                       		moveq	#7,d0
0001DD62 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DD66 6600                       		bne.s	@noanimal
0001DD68 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001DD6E 6600                       		bne.s	@noanimal
0001DD70 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DD74 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD7A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD80 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DD86 0240 001F                  		andi.w	#$1F,d0
0001DD8A 5D40                       		subq.w	#6,d0
0001DD8C 4A41                       		tst.w	d1
0001DD8E 6A00                       		bpl.s	@ispositive
0001DD90 4440                       		neg.w	d0
0001DD92                            
0001DD92                            	@ispositive:
0001DD92 D169 0008                  		add.w	d0,obX(a1)
0001DD96 337C 000C 0036             		move.w	#$C,$36(a1)
0001DD9C                            
0001DD9C                            	@noanimal:
0001DD9C 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DDA0 6600                       		bne.s	@wait
0001DDA2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DDA6 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DDAC                            
0001DDAC                            	@wait:
0001DDAC 4E75                       		rts	
0001DDAE                            ; ===========================================================================
0001DDAE                            
0001DDAE                            Pri_EndAct:	; Routine $E
0001DDAE 703E                       		moveq	#$3E,d0
0001DDB0 7228                       		moveq	#id_Animals,d1
0001DDB2 7440                       		moveq	#$40,d2
0001DDB4 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DDB8                            
0001DDB8                            	@findanimal:
0001DDB8 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DDBA 6700                       		beq.s	@found		; if yes, branch
0001DDBC D2C2                       		adda.w	d2,a1		; next object RAM
0001DDBE 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DDC2                            
0001DDC2 4EB9 0001 0E8C             		jsr	(GotThroughAct1).l
0001DDC8 4EF9 0000 F7A0             		jmp	(DeleteObject).l
0001DDCE                            
0001DDCE                            	@found:
0001DDCE 4E75                       		rts	
0001DDCE 4E75                       		rts	
0001DDD0                            		include	"_anim\Prison Capsule.asm"
0001DDD0                            ; ---------------------------------------------------------------------------
0001DDD0                            ; Animation script - prison capsule
0001DDD0                            ; ---------------------------------------------------------------------------
0001DDD0 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DDD2 0000                       		dc.w @switchflash-Ani_Pri
0001DDD4 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DDD8                            		even
0001DDD8                            		even
0001DDD8                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            ; Sprite mappings - prison capsule
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            Map_Pri_internal:
0001DDD8 0000                       		dc.w @capsule-Map_Pri_internal
0001DDDA 0000                       		dc.w @switch1-Map_Pri_internal
0001DDDC 0000                       		dc.w @broken-Map_Pri_internal
0001DDDE 0000                       		dc.w @switch2-Map_Pri_internal
0001DDE0 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DDE2 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DDE4 0000                       		dc.w @blank-Map_Pri_internal
0001DDE6 07                         @capsule:	dc.b 7
0001DDE7 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DDEC E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DDF1 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DDF6 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DDFB F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DE00 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DE05 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DE0A 01                         @switch1:	dc.b 1
0001DE0B F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DE10 06                         @broken:	dc.b 6
0001DE11 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DE16 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DE1B 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DE20 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DE25 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DE2A 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DE2F 01                         @switch2:	dc.b 1
0001DE30 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DE35 02                         @unusedthing1:	dc.b 2
0001DE36 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DE3B 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DE40 01                         @unusedthing2:	dc.b 1
0001DE41 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DE46 00                         @blank:		dc.b 0
0001DE48 00                         		even
0001DE48 00                         		even
0001DE48                            
0001DE48                            		include	"_incObj\sub ReactToItem.asm"
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48                            ; Subroutine to react to obColType(a0)
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48                            
0001DE48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE48                            
0001DE48                            
0001DE48                            ReactToItem:
0001DE48 4E71                       		nop	
0001DE4A 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DE4E 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DE52 5142                       		subq.w	#8,d2
0001DE54 7A00                       		moveq	#0,d5
0001DE56 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DE5A 5705                       		subq.b	#3,d5
0001DE5C 9645                       		sub.w	d5,d3
0001DE5E 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DE64 6600                       		bne.s	@notducking	; if not, branch
0001DE66 0643 000C                  		addi.w	#$C,d3
0001DE6A 7A0A                       		moveq	#$A,d5
0001DE6C                            
0001DE6C                            	@notducking:
0001DE6C 383C 0010                  		move.w	#$10,d4
0001DE70 DA45                       		add.w	d5,d5
0001DE72 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DE76 3C3C 005F                  		move.w	#$5F,d6
0001DE7A                            
0001DE7A                            @loop:
0001DE7A 4A29 0001                  		tst.b	obRender(a1)
0001DE7E 6A00                       		bpl.s	@next
0001DE80 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DE84 6600                       		bne.s	@proximity	; if nonzero, branch
0001DE86                            
0001DE86                            	@next:
0001DE86 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DE8A 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DE8E                            
0001DE8E 7000                       		moveq	#0,d0
0001DE90 4E75                       		rts	
0001DE92                            ; ===========================================================================
0001DE92                            @sizes:		;   width, height
0001DE92 1414                       		dc.b  $14, $14		; $01
0001DE94 0C14                       		dc.b   $C, $14		; $02
0001DE96 140C                       		dc.b  $14,  $C		; $03
0001DE98 0410                       		dc.b	4, $10		; $04
0001DE9A 0C12                       		dc.b   $C, $12		; $05
0001DE9C 1010                       		dc.b  $10, $10		; $06
0001DE9E 0606                       		dc.b	6,   6		; $07
0001DEA0 180C                       		dc.b  $18,  $C		; $08
0001DEA2 0C10                       		dc.b   $C, $10		; $09
0001DEA4 100C                       		dc.b  $10,  $C		; $0A
0001DEA6 0808                       		dc.b	8,   8		; $0B
0001DEA8 1410                       		dc.b  $14, $10		; $0C
0001DEAA 1408                       		dc.b  $14,   8		; $0D
0001DEAC 0E0E                       		dc.b   $E,  $E		; $0E
0001DEAE 1818                       		dc.b  $18, $18		; $0F
0001DEB0 2810                       		dc.b  $28, $10		; $10
0001DEB2 1018                       		dc.b  $10, $18		; $11
0001DEB4 0810                       		dc.b	8, $10		; $12
0001DEB6 2070                       		dc.b  $20, $70		; $13
0001DEB8 4020                       		dc.b  $40, $20		; $14
0001DEBA 8020                       		dc.b  $80, $20		; $15
0001DEBC 2020                       		dc.b  $20, $20		; $16
0001DEBE 0808                       		dc.b	8,   8		; $17
0001DEC0 0404                       		dc.b	4,   4		; $18
0001DEC2 2008                       		dc.b  $20,   8		; $19
0001DEC4 0C0C                       		dc.b   $C,  $C		; $1A
0001DEC6 0804                       		dc.b	8,   4		; $1B
0001DEC8 1804                       		dc.b  $18,   4		; $1C
0001DECA 2804                       		dc.b  $28,   4		; $1D
0001DECC 0408                       		dc.b	4,   8		; $1E
0001DECE 0418                       		dc.b	4, $18		; $1F
0001DED0 0428                       		dc.b	4, $28		; $20
0001DED2 0420                       		dc.b	4, $20		; $21
0001DED4 1818                       		dc.b  $18, $18		; $22
0001DED6 0C18                       		dc.b   $C, $18		; $23
0001DED8 4808                       		dc.b  $48,   8		; $24
0001DEDA                            ; ===========================================================================
0001DEDA                            
0001DEDA                            @proximity:
0001DEDA 0240 003F                  		andi.w	#$3F,d0
0001DEDE D040                       		add.w	d0,d0
0001DEE0 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001DEE4 7200                       		moveq	#0,d1
0001DEE6 121A                       		move.b	(a2)+,d1
0001DEE8 3029 0008                  		move.w	obX(a1),d0
0001DEEC 9041                       		sub.w	d1,d0
0001DEEE 9042                       		sub.w	d2,d0
0001DEF0 6400                       		bcc.s	@outsidex	; branch if not touching
0001DEF2 D241                       		add.w	d1,d1
0001DEF4 D041                       		add.w	d1,d0
0001DEF6 6500                       		bcs.s	@withinx	; branch if touching
0001DEF8 6000 FF8C                  		bra.w	@next
0001DEFC                            ; ===========================================================================
0001DEFC                            
0001DEFC                            @outsidex:
0001DEFC 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DF00 B044                       		cmp.w	d4,d0
0001DF02 6200 FF82                  		bhi.w	@next
0001DF06                            
0001DF06                            @withinx:
0001DF06 7200                       		moveq	#0,d1
0001DF08 121A                       		move.b	(a2)+,d1
0001DF0A 3029 000C                  		move.w	obY(a1),d0
0001DF0E 9041                       		sub.w	d1,d0
0001DF10 9043                       		sub.w	d3,d0
0001DF12 6400                       		bcc.s	@outsidey	; branch if not touching
0001DF14 D241                       		add.w	d1,d1
0001DF16 D240                       		add.w	d0,d1
0001DF18 6500                       		bcs.s	@withiny	; branch if touching
0001DF1A 6000 FF6A                  		bra.w	@next
0001DF1E                            
0001DF1E                            ; ===========================================================================
0001DF1E                            
0001DF1E                            @outsidey:
0001DF1E 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DF22 B045                       		cmp.w	d5,d0
0001DF24 6200 FF60                  		bhi.w	@next
0001DF28                            
0001DF28                            @withiny:
0001DF28                            	@chktype:
0001DF28 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001DF2E 6600 0000                          	bne	NotGHZReact  ;TIS
0001DF32 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001DF36 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001DF3A 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF3E 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001DF42 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF46 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001DF4A 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF4E                            NotGHZReact:                      ;TIS
0001DF4E 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001DF52 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001DF56 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001DF5A 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001DF5E 6700 0000                  		beq.w	React_Special	; if yes, branch
0001DF62 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001DF64 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001DF68                            
0001DF68                            ; obColType is $40-$7F (powerups)
0001DF68                            
0001DF68 1029 0020                  		move.b	obColType(a1),d0
0001DF6C 0200 003F                  		andi.b	#$3F,d0
0001DF70 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001DF74 6700                       		beq.s	React_Monitor	; if yes, branch
0001DF76 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001DF7C 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001DF80 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001DF84                            
0001DF84                            	@invincible:
0001DF84 4E75                       		rts	
0001DF86                            ; ===========================================================================
0001DF86                            
0001DF86                            React_Monitor:
0001DF86 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001DF8A 6A00                       		bpl.s	@movingdown	; if not, branch
0001DF8C                            
0001DF8C 3028 000C                  		move.w	obY(a0),d0
0001DF90 0440 0010                  		subi.w	#$10,d0
0001DF94 B069 000C                  		cmp.w	obY(a1),d0
0001DF98 6500                       		bcs.s	@donothing
0001DF9A 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001DF9E 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001DFA4 4A29 0025                  		tst.b	ob2ndRout(a1)
0001DFA8 6600                       		bne.s	@donothing
0001DFAA 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001DFAE 4E75                       		rts	
0001DFB0                            ; ===========================================================================
0001DFB0                            
0001DFB0                            @movingdown:
0001DFB0 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001DFB6 6600                       		bne.s	@donothing
0001DFB8 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001DFBC 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001DFC0                            
0001DFC0                            	@donothing:
0001DFC0 4E75                       		rts	
0001DFC2                            ; ===========================================================================
0001DFC2                            
0001DFC2                            React_Enemy:
0001DFC2 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001DFC6 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001DFC8 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001DFCE 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001DFD2 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001DFD8 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001DFDC                            
0001DFDC                            	@donthurtsonic:
0001DFDC 4A29 0021                  		tst.b	obColProp(a1)
0001DFE0 6700                       		beq.s	breakenemy
0001DFE2                            
0001DFE2 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001DFE6 4468 0012                  		neg.w	obVelY(a0)
0001DFEA E0E8 0010                  		asr	obVelX(a0)
0001DFEE E0E8 0012                  		asr	obVelY(a0)
0001DFF2 137C 0000 0020             		move.b	#0,obColType(a1)
0001DFF8 5329 0021                  		subq.b	#1,obColProp(a1)
0001DFFC 6600                       		bne.s	@flagnotclear
0001DFFE 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E004                            
0001E004                            	@flagnotclear:
0001E004 4E75                       		rts	
0001E006                            ; ===========================================================================
0001E006                            
0001E006                            breakenemy:
0001E006 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E00C 7000                       		moveq	#0,d0
0001E00E 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E012 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E016 0C40 0006                  		cmpi.w	#6,d0
0001E01A 6500                       		bcs.s	@bonusokay
0001E01C 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E01E                            
0001E01E                            	@bonusokay:
0001E01E 3340 003E                  		move.w	d0,$3E(a1)
0001E022 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E026 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E02C 6500                       		bcs.s	@lessthan16	; if not, branch
0001E02E 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E032 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E038                            
0001E038                            	@lessthan16:
0001E038 6100 0000                  		bsr.w	AddPoints
0001E03C 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E040 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E046 4A68 0012                  		tst.w	obVelY(a0)
0001E04A 6B00                       		bmi.s	@bouncedown
0001E04C 3028 000C                  		move.w	obY(a0),d0
0001E050 B069 000C                  		cmp.w	obY(a1),d0
0001E054 6400                       		bcc.s	@bounceup
0001E056 4468 0012                  		neg.w	obVelY(a0)
0001E05A 4E75                       		rts	
0001E05C                            ; ===========================================================================
0001E05C                            
0001E05C                            	@bouncedown:
0001E05C 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E062 4E75                       		rts	
0001E064                            
0001E064                            	@bounceup:
0001E064 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E06A 4E75                       		rts	
0001E06C                            
0001E06C 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E074                            
0001E074                            ; ===========================================================================
0001E074                            
0001E074                            React_Caterkiller:
0001E074 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E07A                            
0001E07A                            React_ChkHurt:
0001E07A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E07E 6700                       		beq.s	notinvincible	; if not, branch
0001E080                            
0001E080                            	isflashing:
0001E080 70FF                       		moveq	#-1,d0
0001E082 4E75                       		rts	
0001E084                            ; ===========================================================================
0001E084                            
0001E084                            	notinvincible:
0001E084 4E71                       		nop	
0001E086 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E08A 66F4                       		bne.s	isflashing	; if yes, branch
0001E08C 2449                       		movea.l	a1,a2
0001E08E                            
0001E08E                            ; End of function ReactToItem
0001E08E                            ; continue straight to HurtSonic
0001E08E                            
0001E08E                            ; ---------------------------------------------------------------------------
0001E08E                            ; Hurting Sonic	subroutine
0001E08E                            ; ---------------------------------------------------------------------------
0001E08E                            
0001E08E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E08E                            
0001E08E                            
0001E08E                            HurtSonic:
0001E08E 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E092 6600                       		bne.s	@hasshield	; if yes, branch
0001E094 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E098 6600                       		bne.s	@hasshield	; if yes, branch
0001E09A 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E09E 6600                       		bne.s	@hasshield	; if yes, branch
0001E0A0 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a gold shield?
0001E0A4 6600                       		bne.s	@hasshield	; if yes, branch
0001E0A6 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E0AA 6700 0000                  		beq.w	@norings	; if not, branch
0001E0AE                            
0001E0AE 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
0001E0B4 6600                       		bne.s	@hasshield
0001E0B6 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E0BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E0C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0C6                            
0001E0C6                            	@hasshield:
0001E0C6 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E0CC 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E0CE 0C38 0001 F5C9             		cmpi.b	#1,(v_gshield).w     ; does sonic have a Gold Shield?
0001E0D4 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E0D6 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E0DA 6700 FFA4                  		beq.w	isflashing
0001E0DE 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E0E2 6700 FF9C                  		beq.w	isflashing
0001E0E6                            
0001E0E6                            	@hasrshield:
0001E0E6 0C38 0001 F5C8             		cmpi.b	#1,(v_rshield).w     ; does sonic have a Red Shield?
0001E0EC 6600                       		bne.s	@hasspshield          ; if no, check for gray shield
0001E0EE 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E0F2 6700 FF8C                  		beq.w 	isflashing
0001E0F6 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E0FA 6700 FF84                  		beq.w 	isflashing
0001E0FE 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E102 6700 FF7C                  		beq.w 	isflashing
0001E106 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E10A 6700 FF74                  		beq.w 	isflashing
0001E10E 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E112 6700 FF6C                  		beq.w 	isflashing
0001E116 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E11A 6700 FF64                  		beq.w 	isflashing
0001E11E 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E122 6700 FF5C                  		beq.w 	isflashing
0001E126 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E12A 6700 FF54                  		beq.w 	isflashing
0001E12E                            		
0001E12E                            	@hasspshield:
0001E12E 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E134 6600                       		bne.s	@hurtcont             ; if yes, make him invulnerable to metal objects
0001E136 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E13A 6700 FF44                  		beq.w 	isflashing
0001E13E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E142 6700 FF3C                  		beq.w 	isflashing
0001E146 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E14A 6700 FF34                  		beq.w 	isflashing
0001E14E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E152 6700 FF2C                  		beq.w 	isflashing
0001E156 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E15A 6700 FF24                  		beq.w 	isflashing
0001E15E 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E162 6700 FF1C                  		beq.w 	isflashing
0001E166 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E16A 6700 FF14                  		beq.w 	isflashing
0001E16E 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E172 6700 FF0C                  		beq.w 	isflashing
0001E176 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E17A 6700 FF04                  		beq.w 	isflashing
0001E17E 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E182 6700 FE82                  		beq.w 	breakenemy
0001E186 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E18A 6700 FE7A                  		beq.w 	breakenemy
0001E18E 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E192 6700 FE72                  		beq.w 	breakenemy
0001E196 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E19A 6700 FE6A                  		beq.w 	breakenemy
0001E19E 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E1A2 6700 FE62                  		beq.w 	breakenemy
0001E1A6                            
0001E1A6                            
0001E1A6                            	@hurtcont:
0001E1A6 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E1AC 11FC 0000 F5C8             		move.b	#0,(v_rshield).w	; remove red shield
0001E1B2 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove gold shield
0001E1B8 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove gold shield
0001E1BE 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E1C4 4EB9 0001 613A             		jsr		Sonic_ResetOnFloor
0001E1CA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E1D0 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E1D6 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E1DC 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E1E2 6700                       		beq.s	@isdry		; if not, branch
0001E1E4                            
0001E1E4 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E1EA 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E1F0                            
0001E1F0                            	@isdry:
0001E1F0 3028 0008                  		move.w	obX(a0),d0
0001E1F4 B06A 0008                  		cmp.w	obX(a2),d0
0001E1F8 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E1FA 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E1FE                            
0001E1FE                            	@isleft:
0001E1FE 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E204 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E20A 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E210 317C 0120 0030             		move.w	#$120,$30(a0)
0001E216 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E21A 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E21C 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E220 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E222 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E228 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E22E 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E234 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E238 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E23C 6600                       		bne.s	@sound		; if not, branch
0001E23E 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E242 6600                       		bne.s	@sound		; if not, branch
0001E244 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E248                            
0001E248                            	@sound:
0001E248 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E24E 70FF                       		moveq	#-1,d0
0001E250 4E75                       		rts	
0001E252                            	@hurtelec:
0001E252 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E258 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E25E 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E262 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E266 66E0                       		bne.s	@sound		; if not, branch
0001E268 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E26C 66DA                       		bne.s	@sound		; if not, branch
0001E26E 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E272                            ; ===========================================================================
0001E272                            
0001E272                            @norings:
0001E272 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E276 6600 FE4E                  		bne.w	@hasshield	; if yes, branch
0001E27A                            
0001E27A                            ; ---------------------------------------------------------------------------
0001E27A                            ; Subroutine to	kill Sonic
0001E27A                            ; ---------------------------------------------------------------------------
0001E27A                            
0001E27A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E27A                            
0001E27A                            
0001E27A                            KillSonic:
0001E27A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E27E 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E282 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E288 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E28E 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E294 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E29A 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E2A0 4EB9 0001 613A             		jsr		Sonic_ResetOnFloor
0001E2A6 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E2AC 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E2B2 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E2B8 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E2BE 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E2C4 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E2C8 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E2CA 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E2CE 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E2D0 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E2D6 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E2DC 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E2E0 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E2E4 6600                       		bne.s	@sound
0001E2E6 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E2EA                            
0001E2EA                            	@sound:
0001E2EA 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E2F0                            
0001E2F0                            	@dontdie:
0001E2F0 70FF                       		moveq	#-1,d0
0001E2F2 4E75                       		rts	
0001E2F4                            ; End of function KillSonic
0001E2F4                            Kill_Lava:	
0001E2F4                            	;bset	#7,obGfx(a0)
0001E2F4 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E2FA 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E2FE 4EB9 0000 1250                 jsr		(PlaySound_Special).l
0001E304                            
0001E304                            
0001E304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E304                            
0001E304                            
0001E304                            React_Special:
0001E304 1229 0020                  		move.b	obColType(a1),d1
0001E308 0201 003F                  		andi.b	#$3F,d1
0001E30C 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E310 6700                       		beq.s	@caterkiller	; if yes, branch
0001E312 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E316 6700                       		beq.s	@yadrin		; if yes, branch
0001E318 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E31C 6700                       		beq.s	@D7orE1		; if yes, branch
0001E31E 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E322 6700                       		beq.s	@D7orE1		; if yes, branch
0001E324 4E75                       		rts	
0001E326                            ; ===========================================================================
0001E326                            
0001E326                            @caterkiller:
0001E326 6000 FD4C                  		bra.w	React_Caterkiller
0001E32A                            ; ===========================================================================
0001E32A                            
0001E32A                            @yadrin:
0001E32A 9A40                       		sub.w	d0,d5
0001E32C 0C45 0008                  		cmpi.w	#8,d5
0001E330 6400                       		bcc.s	@normalenemy
0001E332 3029 0008                  		move.w	obX(a1),d0
0001E336 5940                       		subq.w	#4,d0
0001E338 0829 0000 0022             		btst	#0,obStatus(a1)
0001E33E 6700                       		beq.s	@noflip
0001E340 0440 0010                  		subi.w	#$10,d0
0001E344                            
0001E344                            	@noflip:
0001E344 9042                       		sub.w	d2,d0
0001E346 6400                       		bcc.s	@loc_1B13C
0001E348 0640 0018                  		addi.w	#$18,d0
0001E34C 6500                       		bcs.s	@loc_1B140
0001E34E 6000                       		bra.s	@normalenemy
0001E350                            ; ===========================================================================
0001E350                            
0001E350                            	@loc_1B13C:
0001E350 B044                       		cmp.w	d4,d0
0001E352 6200                       		bhi.s	@normalenemy
0001E354                            
0001E354                            	@loc_1B140:
0001E354 6000 FD24                  		bra.w	React_ChkHurt
0001E358                            ; ===========================================================================
0001E358                            
0001E358                            	@normalenemy:
0001E358 6000 FC68                  		bra.w	React_Enemy
0001E35C                            ; ===========================================================================
0001E35C                            
0001E35C                            @D7orE1:
0001E35C 5229 0021                  		addq.b	#1,obColProp(a1)
0001E360 4E75                       		rts	
0001E362                            ; End of function React_Special
0001E362                            
0001E362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E362                            
0001E362                            React_ChkWaterTag:
0001E362 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E368 6600 0000                  		bne	NotWaterTag
0001E36C 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E372                            	NotWaterTag:
0001E372 4E75                       		rts
0001E374                            
0001E374                            React_WaterTag:
0001E374 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E37A 6700 0000                  		beq	SkipWaterTag
0001E37E 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E384                            	SkipWaterTag:
0001E384 4E75                       		rts
0001E384 4E75                       		rts
0001E386                            
0001E386                            ; ---------------------------------------------------------------------------
0001E386                            ; Subroutine to	show the special stage layout
0001E386                            ; ---------------------------------------------------------------------------
0001E386                            
0001E386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E386                            
0001E386                            
0001E386                            SS_ShowLayout:
0001E386 6100 0000                  		bsr.w	SS_AniWallsRings
0001E38A 6100 0000                  		bsr.w	SS_AniItems
0001E38E 3F05                       		move.w	d5,-(sp)
0001E390 43F8 8000                  		lea	($FFFF8000).w,a1
0001E394 1038 F780                  		move.b	(v_ssangle).w,d0
0001E398 0200 00FC                  		andi.b	#$FC,d0
0001E39C 4EB9 0000 3A32             		jsr	(CalcSine).l
0001E3A2 3800                       		move.w	d0,d4
0001E3A4 3A01                       		move.w	d1,d5
0001E3A6 C9FC 0018                  		muls.w	#$18,d4
0001E3AA CBFC 0018                  		muls.w	#$18,d5
0001E3AE 7400                       		moveq	#0,d2
0001E3B0 3438 F700                  		move.w	(v_screenposx).w,d2
0001E3B4 84FC 0018                  		divu.w	#$18,d2
0001E3B8 4842                       		swap	d2
0001E3BA 4442                       		neg.w	d2
0001E3BC 0642 FF4C                  		addi.w	#-$B4,d2
0001E3C0 7600                       		moveq	#0,d3
0001E3C2 3638 F704                  		move.w	(v_screenposy).w,d3
0001E3C6 86FC 0018                  		divu.w	#$18,d3
0001E3CA 4843                       		swap	d3
0001E3CC 4443                       		neg.w	d3
0001E3CE 0643 FF4C                  		addi.w	#-$B4,d3
0001E3D2 3E3C 000F                  		move.w	#$F,d7
0001E3D6                            
0001E3D6                            loc_1B19E:
0001E3D6 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E3DA 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E3DE 4440                       		neg.w	d0
0001E3E0 C3C2                       		muls.w	d2,d1
0001E3E2 C1C3                       		muls.w	d3,d0
0001E3E4 2C00                       		move.l	d0,d6
0001E3E6 DC81                       		add.l	d1,d6
0001E3E8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E3EC C1C2                       		muls.w	d2,d0
0001E3EE C3C3                       		muls.w	d3,d1
0001E3F0 D280                       		add.l	d0,d1
0001E3F2 2406                       		move.l	d6,d2
0001E3F4 3C3C 000F                  		move.w	#$F,d6
0001E3F8                            
0001E3F8                            loc_1B1C0:
0001E3F8 2002                       		move.l	d2,d0
0001E3FA E080                       		asr.l	#8,d0
0001E3FC 32C0                       		move.w	d0,(a1)+
0001E3FE 2001                       		move.l	d1,d0
0001E400 E080                       		asr.l	#8,d0
0001E402 32C0                       		move.w	d0,(a1)+
0001E404 D485                       		add.l	d5,d2
0001E406 D284                       		add.l	d4,d1
0001E408 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E40C                            
0001E40C 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E410 0643 0018                  		addi.w	#$18,d3
0001E414 51CF FFC0                  		dbf	d7,loc_1B19E
0001E418                            
0001E418 3A1F                       		move.w	(sp)+,d5
0001E41A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E420 7000                       		moveq	#0,d0
0001E422 3038 F704                  		move.w	(v_screenposy).w,d0
0001E426 80FC 0018                  		divu.w	#$18,d0
0001E42A C0FC 0080                  		mulu.w	#$80,d0
0001E42E D1C0                       		adda.l	d0,a0
0001E430 7000                       		moveq	#0,d0
0001E432 3038 F700                  		move.w	(v_screenposx).w,d0
0001E436 80FC 0018                  		divu.w	#$18,d0
0001E43A D0C0                       		adda.w	d0,a0
0001E43C 49F8 8000                  		lea	($FFFF8000).w,a4
0001E440 3E3C 000F                  		move.w	#$F,d7
0001E444                            
0001E444                            loc_1B20C:
0001E444 3C3C 000F                  		move.w	#$F,d6
0001E448                            
0001E448                            loc_1B210:
0001E448 7000                       		moveq	#0,d0
0001E44A 1018                       		move.b	(a0)+,d0
0001E44C 6700                       		beq.s	loc_1B268
0001E44E 0C00 004E                  		cmpi.b	#$4E,d0
0001E452 6200                       		bhi.s	loc_1B268
0001E454 3614                       		move.w	(a4),d3
0001E456 0643 0120                  		addi.w	#$120,d3
0001E45A 0C43 0070                  		cmpi.w	#$70,d3
0001E45E 6500                       		blo.s	loc_1B268
0001E460 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E464 6400                       		bhs.s	loc_1B268
0001E466 342C 0002                  		move.w	2(a4),d2
0001E46A 0642 00F0                  		addi.w	#$F0,d2
0001E46E 0C42 0070                  		cmpi.w	#$70,d2
0001E472 6500                       		blo.s	loc_1B268
0001E474 0C42 0170                  		cmpi.w	#$170,d2
0001E478 6400                       		bhs.s	loc_1B268
0001E47A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E480 E748                       		lsl.w	#3,d0
0001E482 4BF5 0000                  		lea	(a5,d0.w),a5
0001E486 225D                       		movea.l	(a5)+,a1
0001E488 321D                       		move.w	(a5)+,d1
0001E48A D241                       		add.w	d1,d1
0001E48C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E490 365D                       		movea.w	(a5)+,a3
0001E492 7200                       		moveq	#0,d1
0001E494 1219                       		move.b	(a1)+,d1
0001E496 5301                       		subq.b	#1,d1
0001E498 6B00                       		bmi.s	loc_1B268
0001E49A 4EB9 0000 F8C4             		jsr	(BuildSpr_Normal).l
0001E4A0                            
0001E4A0                            loc_1B268:
0001E4A0 584C                       		addq.w	#4,a4
0001E4A2 51CE FFA4                  		dbf	d6,loc_1B210
0001E4A6                            
0001E4A6 41E8 0070                  		lea	$70(a0),a0
0001E4AA 51CF FF98                  		dbf	d7,loc_1B20C
0001E4AE                            
0001E4AE 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E4B2 0C05 0050                  		cmpi.b	#$50,d5
0001E4B6 6700                       		beq.s	loc_1B288
0001E4B8 24BC 0000 0000             		move.l	#0,(a2)
0001E4BE 4E75                       		rts	
0001E4C0                            ; ===========================================================================
0001E4C0                            
0001E4C0                            loc_1B288:
0001E4C0 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E4C6 4E75                       		rts	
0001E4C8                            ; End of function SS_ShowLayout
0001E4C8                            
0001E4C8                            ; ---------------------------------------------------------------------------
0001E4C8                            ; Subroutine to	animate	walls and rings	in the special stage
0001E4C8                            ; ---------------------------------------------------------------------------
0001E4C8                            
0001E4C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4C8                            
0001E4C8                            
0001E4C8                            SS_AniWallsRings:
0001E4C8 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E4CE 7000                       		moveq	#0,d0
0001E4D0 1038 F780                  		move.b	(v_ssangle).w,d0
0001E4D4 E408                       		lsr.b	#2,d0
0001E4D6 0240 000F                  		andi.w	#$F,d0
0001E4DA 7223                       		moveq	#$23,d1
0001E4DC                            
0001E4DC                            loc_1B2A4:
0001E4DC 3280                       		move.w	d0,(a1)
0001E4DE 5049                       		addq.w	#8,a1
0001E4E0 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E4E4                            
0001E4E4 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E4EA 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E4EE 6A00                       		bpl.s	loc_1B2C8
0001E4F0 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E4F6 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E4FA 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E500                            
0001E500                            loc_1B2C8:
0001E500 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E506 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E50A 6A00                       		bpl.s	loc_1B2E4
0001E50C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E512 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E516 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E51C                            
0001E51C                            loc_1B2E4:
0001E51C 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E520 1340 0138                  		move.b	d0,$138(a1)
0001E524 1340 0160                  		move.b	d0,$160(a1)
0001E528 1340 0148                  		move.b	d0,$148(a1)
0001E52C 1340 0150                  		move.b	d0,$150(a1)
0001E530 1340 01D8                  		move.b	d0,$1D8(a1)
0001E534 1340 01E0                  		move.b	d0,$1E0(a1)
0001E538 1340 01E8                  		move.b	d0,$1E8(a1)
0001E53C 1340 01F0                  		move.b	d0,$1F0(a1)
0001E540 1340 01F8                  		move.b	d0,$1F8(a1)
0001E544 1340 0200                  		move.b	d0,$200(a1)
0001E548 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E54C 6A00                       		bpl.s	loc_1B326
0001E54E 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E554 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E558 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E55E                            
0001E55E                            loc_1B326:
0001E55E 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E562 1340 0168                  		move.b	d0,$168(a1)
0001E566 1340 0170                  		move.b	d0,$170(a1)
0001E56A 1340 0178                  		move.b	d0,$178(a1)
0001E56E 1340 0180                  		move.b	d0,$180(a1)
0001E572 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E576 6A00                       		bpl.s	loc_1B350
0001E578 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E57E 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E582 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E588                            
0001E588                            loc_1B350:
0001E588 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E58E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E594 7000                       		moveq	#0,d0
0001E596 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E59A D040                       		add.w	d0,d0
0001E59C 41F0 0000                  		lea	(a0,d0.w),a0
0001E5A0 3290                       		move.w	(a0),(a1)
0001E5A2 3368 0002 0008             		move.w	2(a0),8(a1)
0001E5A8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E5AE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E5B4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E5BA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E5C0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E5C6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E5CC D0FC 0020                  		adda.w	#$20,a0
0001E5D0 D2FC 0048                  		adda.w	#$48,a1
0001E5D4 3290                       		move.w	(a0),(a1)
0001E5D6 3368 0002 0008             		move.w	2(a0),8(a1)
0001E5DC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E5E2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E5E8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E5EE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E5F4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E5FA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E600 D0FC 0020                  		adda.w	#$20,a0
0001E604 D2FC 0048                  		adda.w	#$48,a1
0001E608 3290                       		move.w	(a0),(a1)
0001E60A 3368 0002 0008             		move.w	2(a0),8(a1)
0001E610 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E616 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E61C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E622 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E628 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E62E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E634 D0FC 0020                  		adda.w	#$20,a0
0001E638 D2FC 0048                  		adda.w	#$48,a1
0001E63C 3290                       		move.w	(a0),(a1)
0001E63E 3368 0002 0008             		move.w	2(a0),8(a1)
0001E644 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E64A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E650 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E656 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E65C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E662 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E668 D0FC 0020                  		adda.w	#$20,a0
0001E66C D2FC 0048                  		adda.w	#$48,a1
0001E670 4E75                       		rts	
0001E672                            ; End of function SS_AniWallsRings
0001E672                            
0001E672                            ; ===========================================================================
0001E672 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E682 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E692 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E6A2 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E6B2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E6C2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E6D2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E6E2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E6F2                            ; ---------------------------------------------------------------------------
0001E6F2                            ; Subroutine to	remove items when you collect them in the special stage
0001E6F2                            ; ---------------------------------------------------------------------------
0001E6F2                            
0001E6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6F2                            
0001E6F2                            
0001E6F2                            SS_RemoveCollectedItem:
0001E6F2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E6F8 303C 001F                  		move.w	#$1F,d0
0001E6FC                            
0001E6FC                            loc_1B4C4:
0001E6FC 4A12                       		tst.b	(a2)
0001E6FE 6700                       		beq.s	locret_1B4CE
0001E700 504A                       		addq.w	#8,a2
0001E702 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E706                            
0001E706                            locret_1B4CE:
0001E706 4E75                       		rts	
0001E708                            ; End of function SS_RemoveCollectedItem
0001E708                            
0001E708                            ; ---------------------------------------------------------------------------
0001E708                            ; Subroutine to	animate	special	stage items when you touch them
0001E708                            ; ---------------------------------------------------------------------------
0001E708                            
0001E708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E708                            
0001E708                            
0001E708                            SS_AniItems:
0001E708 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E70E 3E3C 001F                  		move.w	#$1F,d7
0001E712                            
0001E712                            loc_1B4DA:
0001E712 7000                       		moveq	#0,d0
0001E714 1010                       		move.b	(a0),d0
0001E716 6700                       		beq.s	loc_1B4E8
0001E718 E548                       		lsl.w	#2,d0
0001E71A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E71E 4E91                       		jsr	(a1)
0001E720                            
0001E720                            loc_1B4E8:
0001E720 5048                       		addq.w	#8,a0
0001E722                            
0001E722                            loc_1B4EA:
0001E722 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E726                            
0001E726 4E75                       		rts	
0001E728                            ; End of function SS_AniItems
0001E728                            
0001E728                            ; ===========================================================================
0001E728 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E72C 0000 0000                  		dc.l SS_AniBumper
0001E730 0000 0000                  		dc.l SS_Ani1Up
0001E734 0000 0000                  		dc.l SS_AniReverse
0001E738 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E73C 0000 0000                  		dc.l SS_AniGlassBlock
0001E740                            ; ===========================================================================
0001E740                            
0001E740                            SS_AniRingSparks:
0001E740 5328 0002                  		subq.b	#1,2(a0)
0001E744 6A00                       		bpl.s	locret_1B530
0001E746 117C 0005 0002             		move.b	#5,2(a0)
0001E74C 7000                       		moveq	#0,d0
0001E74E 1028 0003                  		move.b	3(a0),d0
0001E752 5228 0003                  		addq.b	#1,3(a0)
0001E756 2268 0004                  		movea.l	4(a0),a1
0001E75A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E75E 1280                       		move.b	d0,(a1)
0001E760 6600                       		bne.s	locret_1B530
0001E762 4290                       		clr.l	(a0)
0001E764 42A8 0004                  		clr.l	4(a0)
0001E768                            
0001E768                            locret_1B530:
0001E768 4E75                       		rts	
0001E76A                            ; ===========================================================================
0001E76A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E770                            ; ===========================================================================
0001E770                            
0001E770                            SS_AniBumper:
0001E770 5328 0002                  		subq.b	#1,2(a0)
0001E774 6A00                       		bpl.s	locret_1B566
0001E776 117C 0007 0002             		move.b	#7,2(a0)
0001E77C 7000                       		moveq	#0,d0
0001E77E 1028 0003                  		move.b	3(a0),d0
0001E782 5228 0003                  		addq.b	#1,3(a0)
0001E786 2268 0004                  		movea.l	4(a0),a1
0001E78A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E78E 6600                       		bne.s	loc_1B564
0001E790 4290                       		clr.l	(a0)
0001E792 42A8 0004                  		clr.l	4(a0)
0001E796 12BC 0025                  		move.b	#$25,(a1)
0001E79A 4E75                       		rts	
0001E79C                            ; ===========================================================================
0001E79C                            
0001E79C                            loc_1B564:
0001E79C 1280                       		move.b	d0,(a1)
0001E79E                            
0001E79E                            locret_1B566:
0001E79E 4E75                       		rts	
0001E7A0                            ; ===========================================================================
0001E7A0 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E7A6                            ; ===========================================================================
0001E7A6                            
0001E7A6                            SS_Ani1Up:
0001E7A6 5328 0002                  		subq.b	#1,2(a0)
0001E7AA 6A00                       		bpl.s	locret_1B596
0001E7AC 117C 0005 0002             		move.b	#5,2(a0)
0001E7B2 7000                       		moveq	#0,d0
0001E7B4 1028 0003                  		move.b	3(a0),d0
0001E7B8 5228 0003                  		addq.b	#1,3(a0)
0001E7BC 2268 0004                  		movea.l	4(a0),a1
0001E7C0 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E7C4 1280                       		move.b	d0,(a1)
0001E7C6 6600                       		bne.s	locret_1B596
0001E7C8 4290                       		clr.l	(a0)
0001E7CA 42A8 0004                  		clr.l	4(a0)
0001E7CE                            
0001E7CE                            locret_1B596:
0001E7CE 4E75                       		rts	
0001E7D0                            ; ===========================================================================
0001E7D0 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E7D6                            ; ===========================================================================
0001E7D6                            
0001E7D6                            SS_AniReverse:
0001E7D6 5328 0002                  		subq.b	#1,2(a0)
0001E7DA 6A00                       		bpl.s	locret_1B5CC
0001E7DC 117C 0007 0002             		move.b	#7,2(a0)
0001E7E2 7000                       		moveq	#0,d0
0001E7E4 1028 0003                  		move.b	3(a0),d0
0001E7E8 5228 0003                  		addq.b	#1,3(a0)
0001E7EC 2268 0004                  		movea.l	4(a0),a1
0001E7F0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E7F4 6600                       		bne.s	loc_1B5CA
0001E7F6 4290                       		clr.l	(a0)
0001E7F8 42A8 0004                  		clr.l	4(a0)
0001E7FC 12BC 002B                  		move.b	#$2B,(a1)
0001E800 4E75                       		rts	
0001E802                            ; ===========================================================================
0001E802                            
0001E802                            loc_1B5CA:
0001E802 1280                       		move.b	d0,(a1)
0001E804                            
0001E804                            locret_1B5CC:
0001E804 4E75                       		rts	
0001E806                            ; ===========================================================================
0001E806 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E80C                            ; ===========================================================================
0001E80C                            
0001E80C                            SS_AniEmeraldSparks:
0001E80C 5328 0002                  		subq.b	#1,2(a0)
0001E810 6A00                       		bpl.s	locret_1B60C
0001E812 117C 0005 0002             		move.b	#5,2(a0)
0001E818 7000                       		moveq	#0,d0
0001E81A 1028 0003                  		move.b	3(a0),d0
0001E81E 5228 0003                  		addq.b	#1,3(a0)
0001E822 2268 0004                  		movea.l	4(a0),a1
0001E826 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E82A 1280                       		move.b	d0,(a1)
0001E82C 6600                       		bne.s	locret_1B60C
0001E82E 4290                       		clr.l	(a0)
0001E830 42A8 0004                  		clr.l	4(a0)
0001E834 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E844                            
0001E844                            locret_1B60C:
0001E844 4E75                       		rts	
0001E846                            ; ===========================================================================
0001E846 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E84C                            ; ===========================================================================
0001E84C                            
0001E84C                            SS_AniGlassBlock:
0001E84C 5328 0002                  		subq.b	#1,2(a0)
0001E850 6A00                       		bpl.s	locret_1B640
0001E852 117C 0001 0002             		move.b	#1,2(a0)
0001E858 7000                       		moveq	#0,d0
0001E85A 1028 0003                  		move.b	3(a0),d0
0001E85E 5228 0003                  		addq.b	#1,3(a0)
0001E862 2268 0004                  		movea.l	4(a0),a1
0001E866 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E86A 1280                       		move.b	d0,(a1)
0001E86C 6600                       		bne.s	locret_1B640
0001E86E 12A8 0004                  		move.b	4(a0),(a1)
0001E872 4290                       		clr.l	(a0)
0001E874 42A8 0004                  		clr.l	4(a0)
0001E878                            
0001E878                            locret_1B640:
0001E878 4E75                       		rts	
0001E87A                            ; ===========================================================================
0001E87A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E884                            
0001E884                            ; ---------------------------------------------------------------------------
0001E884                            ; Special stage	layout pointers
0001E884                            ; ---------------------------------------------------------------------------
0001E884                            SS_LayoutIndex:
0001E884 0000 0000                  		dc.l SS_1
0001E888 0000 0000                  		dc.l SS_2
0001E88C 0000 0000                  		dc.l SS_3
0001E890 0000 0000                  		dc.l SS_4
0001E894 0000 0000                  		dc.l SS_5
0001E898 0000 0000                  		dc.l SS_6
0001E89C                            		even
0001E89C                            
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            ; Special stage start locations
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            ; Special stage start locations
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            
0001E89C                            		incbin	"startpos\ss1.bin"
0001E8A0                            		incbin	"startpos\ss2.bin"
0001E8A4                            		incbin	"startpos\ss3.bin"
0001E8A8                            		incbin	"startpos\ss4.bin"
0001E8AC                            		incbin	"startpos\ss5.bin"
0001E8B0                            		incbin	"startpos\ss6.bin"
0001E8B4                            		even
0001E8B4                            		even
0001E8B4                            
0001E8B4                            ; ---------------------------------------------------------------------------
0001E8B4                            ; Subroutine to	load special stage layout
0001E8B4                            ; ---------------------------------------------------------------------------
0001E8B4                            
0001E8B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8B4                            
0001E8B4                            
0001E8B4                            SS_Load:
0001E8B4 7000                       		moveq	#0,d0
0001E8B6 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001E8BA 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001E8BE 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001E8C4 6500                       		blo.s	SS_ChkEmldNum
0001E8C6 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001E8CC                            
0001E8CC                            SS_ChkEmldNum:
0001E8CC 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001E8D2 6700                       		beq.s	SS_LoadData	; if yes, branch
0001E8D4 7200                       		moveq	#0,d1
0001E8D6 1238 FE57                  		move.b	(v_emeralds).w,d1
0001E8DA 5301                       		subq.b	#1,d1
0001E8DC 6500                       		blo.s	SS_LoadData
0001E8DE 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001E8E2                            
0001E8E2                            SS_ChkEmldLoop:	
0001E8E2 B033 1000                  		cmp.b	(a3,d1.w),d0
0001E8E6 6600                       		bne.s	SS_ChkEmldRepeat
0001E8E8 60CA                       		bra.s	SS_Load
0001E8EA                            ; ===========================================================================
0001E8EA                            
0001E8EA                            SS_ChkEmldRepeat:
0001E8EA 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001E8EE                            
0001E8EE                            SS_LoadData:
0001E8EE E548                       		lsl.w	#2,d0
0001E8F0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001E8F4 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001E8F8 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001E8FC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001E900 43F9 00FF 4000             		lea	($FF4000).l,a1
0001E906 303C 0000                  		move.w	#0,d0
0001E90A 4EB9 0000 1888             		jsr	(EniDec).l
0001E910 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E916 303C 0FFF                  		move.w	#$FFF,d0
0001E91A                            
0001E91A                            SS_ClrRAM3:
0001E91A 4299                       		clr.l	(a1)+
0001E91C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001E920                            
0001E920 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E926 41F9 00FF 4000             		lea	($FF4000).l,a0
0001E92C 723F                       		moveq	#$3F,d1
0001E92E                            
0001E92E                            loc_1B6F6:
0001E92E 743F                       		moveq	#$3F,d2
0001E930                            
0001E930                            loc_1B6F8:
0001E930 12D8                       		move.b	(a0)+,(a1)+
0001E932 51CA FFFC                  		dbf	d2,loc_1B6F8
0001E936                            
0001E936 43E9 0040                  		lea	$40(a1),a1
0001E93A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001E93E                            
0001E93E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001E944 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001E94A 724D                       		moveq	#$4D,d1
0001E94C                            
0001E94C                            loc_1B714:
0001E94C 22D8                       		move.l	(a0)+,(a1)+
0001E94E 32FC 0000                  		move.w	#0,(a1)+
0001E952 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001E958 32D8                       		move.w	(a0)+,(a1)+
0001E95A 51C9 FFF0                  		dbf	d1,loc_1B714
0001E95E                            
0001E95E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001E964 323C 003F                  		move.w	#$3F,d1
0001E968                            
0001E968                            loc_1B730:
0001E968                            
0001E968 4299                       		clr.l	(a1)+
0001E96A 51C9 FFFC                  		dbf	d1,loc_1B730
0001E96E                            
0001E96E 4E75                       		rts	
0001E970                            ; End of function SS_Load
0001E970                            
0001E970                            ; ===========================================================================
0001E970                            
0001E970                            SS_MapIndex:
0001E970                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001E970                            ; ---------------------------------------------------------------------------
0001E970                            ; Special stage	mappings and VRAM pointers
0001E970                            ; ---------------------------------------------------------------------------
0001E970 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001E974 0142                       	dc.w $142		; VRAM setting
0001E976 0000 0000                  	dc.l Map_SSWalls
0001E97A 0142                       	dc.w $142
0001E97C 0000 0000                  	dc.l Map_SSWalls
0001E980 0142                       	dc.w $142
0001E982 0000 0000                  	dc.l Map_SSWalls
0001E986 0142                       	dc.w $142
0001E988 0000 0000                  	dc.l Map_SSWalls
0001E98C 0142                       	dc.w $142
0001E98E 0000 0000                  	dc.l Map_SSWalls
0001E992 0142                       	dc.w $142
0001E994 0000 0000                  	dc.l Map_SSWalls
0001E998 0142                       	dc.w $142
0001E99A 0000 0000                  	dc.l Map_SSWalls
0001E99E 0142                       	dc.w $142
0001E9A0 0000 0000                  	dc.l Map_SSWalls
0001E9A4 0142                       	dc.w $142
0001E9A6 0000 0000                  	dc.l Map_SSWalls
0001E9AA 2142                       	dc.w $2142
0001E9AC 0000 0000                  	dc.l Map_SSWalls
0001E9B0 2142                       	dc.w $2142
0001E9B2 0000 0000                  	dc.l Map_SSWalls
0001E9B6 2142                       	dc.w $2142
0001E9B8 0000 0000                  	dc.l Map_SSWalls
0001E9BC 2142                       	dc.w $2142
0001E9BE 0000 0000                  	dc.l Map_SSWalls
0001E9C2 2142                       	dc.w $2142
0001E9C4 0000 0000                  	dc.l Map_SSWalls
0001E9C8 2142                       	dc.w $2142
0001E9CA 0000 0000                  	dc.l Map_SSWalls
0001E9CE 2142                       	dc.w $2142
0001E9D0 0000 0000                  	dc.l Map_SSWalls
0001E9D4 2142                       	dc.w $2142
0001E9D6 0000 0000                  	dc.l Map_SSWalls
0001E9DA 2142                       	dc.w $2142
0001E9DC 0000 0000                  	dc.l Map_SSWalls
0001E9E0 4142                       	dc.w $4142
0001E9E2 0000 0000                  	dc.l Map_SSWalls
0001E9E6 4142                       	dc.w $4142
0001E9E8 0000 0000                  	dc.l Map_SSWalls
0001E9EC 4142                       	dc.w $4142
0001E9EE 0000 0000                  	dc.l Map_SSWalls
0001E9F2 4142                       	dc.w $4142
0001E9F4 0000 0000                  	dc.l Map_SSWalls
0001E9F8 4142                       	dc.w $4142
0001E9FA 0000 0000                  	dc.l Map_SSWalls
0001E9FE 4142                       	dc.w $4142
0001EA00 0000 0000                  	dc.l Map_SSWalls
0001EA04 4142                       	dc.w $4142
0001EA06 0000 0000                  	dc.l Map_SSWalls
0001EA0A 4142                       	dc.w $4142
0001EA0C 0000 0000                  	dc.l Map_SSWalls
0001EA10 4142                       	dc.w $4142
0001EA12 0000 0000                  	dc.l Map_SSWalls
0001EA16 6142                       	dc.w $6142
0001EA18 0000 0000                  	dc.l Map_SSWalls
0001EA1C 6142                       	dc.w $6142
0001EA1E 0000 0000                  	dc.l Map_SSWalls
0001EA22 6142                       	dc.w $6142
0001EA24 0000 0000                  	dc.l Map_SSWalls
0001EA28 6142                       	dc.w $6142
0001EA2A 0000 0000                  	dc.l Map_SSWalls
0001EA2E 6142                       	dc.w $6142
0001EA30 0000 0000                  	dc.l Map_SSWalls
0001EA34 6142                       	dc.w $6142
0001EA36 0000 0000                  	dc.l Map_SSWalls
0001EA3A 6142                       	dc.w $6142
0001EA3C 0000 0000                  	dc.l Map_SSWalls
0001EA40 6142                       	dc.w $6142
0001EA42 0000 0000                  	dc.l Map_SSWalls
0001EA46 6142                       	dc.w $6142
0001EA48 0001 0C80                  	dc.l Map_Bump
0001EA4C 023B                       	dc.w $23B
0001EA4E 0000 0000                  	dc.l Map_SS_R
0001EA52 0570                       	dc.w $570
0001EA54 0000 0000                  	dc.l Map_SS_R
0001EA58 0251                       	dc.w $251
0001EA5A 0000 0000                  	dc.l Map_SS_R
0001EA5E 0370                       	dc.w $370
0001EA60 0000 0000                  	dc.l Map_SS_Up
0001EA64 0263                       	dc.w $263
0001EA66 0000 0000                  	dc.l Map_SS_Down
0001EA6A 0263                       	dc.w $263
0001EA6C 0000 0000                  	dc.l Map_SS_R
0001EA70 22F0                       	dc.w $22F0
0001EA72 0000 0000                  	dc.l Map_SS_Glass
0001EA76 0470                       	dc.w $470
0001EA78 0000 0000                  	dc.l Map_SS_Glass
0001EA7C 05F0                       	dc.w $5F0
0001EA7E 0000 0000                  	dc.l Map_SS_Glass
0001EA82 65F0                       	dc.w $65F0
0001EA84 0000 0000                  	dc.l Map_SS_Glass
0001EA88 25F0                       	dc.w $25F0
0001EA8A 0000 0000                  	dc.l Map_SS_Glass
0001EA8E 45F0                       	dc.w $45F0
0001EA90 0000 0000                  	dc.l Map_SS_R
0001EA94 02F0                       	dc.w $2F0
0001EA96 0101 0C80                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EA9A 023B                       	dc.w $23B
0001EA9C 0201 0C80                  	dc.l Map_Bump+$2000000
0001EAA0 023B                       	dc.w $23B
0001EAA2 0000 0000                  	dc.l Map_SS_R
0001EAA6 0797                       	dc.w $797
0001EAA8 0000 0000                  	dc.l Map_SS_R
0001EAAC 07A0                       	dc.w $7A0
0001EAAE 0000 0000                  	dc.l Map_SS_R
0001EAB2 07A9                       	dc.w $7A9
0001EAB4 0000 0000                  	dc.l Map_SS_R
0001EAB8 0797                       	dc.w $797
0001EABA 0000 0000                  	dc.l Map_SS_R
0001EABE 07A0                       	dc.w $7A0
0001EAC0 0000 0000                  	dc.l Map_SS_R
0001EAC4 07A9                       	dc.w $7A9
0001EAC6 0000 BEF6                  	dc.l Map_Ring
0001EACA 2798                       	dc.w $2798
0001EACC 0000 0000                  	dc.l Map_SS_Chaos3
0001EAD0 0770                       	dc.w $770
0001EAD2 0000 0000                  	dc.l Map_SS_Chaos3
0001EAD6 2770                       	dc.w $2770
0001EAD8 0000 0000                  	dc.l Map_SS_Chaos3
0001EADC 4770                       	dc.w $4770
0001EADE 0000 0000                  	dc.l Map_SS_Chaos3
0001EAE2 6770                       	dc.w $6770
0001EAE4 0000 0000                  	dc.l Map_SS_Chaos1
0001EAE8 0770                       	dc.w $770
0001EAEA 0000 0000                  	dc.l Map_SS_Chaos2
0001EAEE 0770                       	dc.w $770
0001EAF0 0000 0000                  	dc.l Map_SS_R
0001EAF4 04F0                       	dc.w $4F0
0001EAF6 0400 BEF6                  	dc.l Map_Ring+$4000000
0001EAFA 2798                       	dc.w $2798
0001EAFC 0500 BEF6                  	dc.l Map_Ring+$5000000
0001EB00 2798                       	dc.w $2798
0001EB02 0600 BEF6                  	dc.l Map_Ring+$6000000
0001EB06 2798                       	dc.w $2798
0001EB08 0700 BEF6                  	dc.l Map_Ring+$7000000
0001EB0C 2798                       	dc.w $2798
0001EB0E 0000 0000                  	dc.l Map_SS_Glass
0001EB12 23F0                       	dc.w $23F0
0001EB14 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EB18 23F0                       	dc.w $23F0
0001EB1A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EB1E 23F0                       	dc.w $23F0
0001EB20 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EB24 23F0                       	dc.w $23F0
0001EB26 0000 0000                  	dc.l Map_SS_R+$2000000
0001EB2A 04F0                       	dc.w $4F0
0001EB2C 0000 0000                  	dc.l Map_SS_Glass
0001EB30 05F0                       	dc.w $5F0
0001EB32 0000 0000                  	dc.l Map_SS_Glass
0001EB36 65F0                       	dc.w $65F0
0001EB38 0000 0000                  	dc.l Map_SS_Glass
0001EB3C 25F0                       	dc.w $25F0
0001EB3E 0000 0000                  	dc.l Map_SS_Glass
0001EB42 45F0                       	dc.w $45F0
0001EB42 45F0                       	dc.w $45F0
0001EB44                            
0001EB44                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EB44                            ; ---------------------------------------------------------------------------
0001EB44                            ; Sprite mappings - special stage "R" block
0001EB44                            ; ---------------------------------------------------------------------------
0001EB44                            Map_SS_R_internal:
0001EB44 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EB46 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EB48 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EB4A 01                         byte_1B912:	dc.b 1
0001EB4B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB50 01                         byte_1B918:	dc.b 1
0001EB51 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EB56 00                         byte_1B91E:	dc.b 0
0001EB58 00                         		even
0001EB58 00                         		even
0001EB58                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EB58                            ; ---------------------------------------------------------------------------
0001EB58                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EB58                            ; ---------------------------------------------------------------------------
0001EB58                            Map_SS_Glass_internal:
0001EB58 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EB5A 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EB5C 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EB5E 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EB60 01                         byte_1B928:	dc.b 1
0001EB61 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB66 01                         byte_1B92E:	dc.b 1
0001EB67 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EB6C 01                         byte_1B934:	dc.b 1
0001EB6D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EB72 01                         byte_1B93A:	dc.b 1
0001EB73 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EB78                            		even
0001EB78                            		even
0001EB78                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EB78                            ; ---------------------------------------------------------------------------
0001EB78                            ; Sprite mappings - special stage "UP" block
0001EB78                            ; ---------------------------------------------------------------------------
0001EB78                            Map_SS_Up_internal:
0001EB78 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EB7A 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EB7C 01                         byte_1B944:	dc.b 1
0001EB7D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB82 01                         byte_1B94A:	dc.b 1
0001EB83 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EB88                            		even
0001EB88                            		even
0001EB88                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EB88                            ; ---------------------------------------------------------------------------
0001EB88                            ; Sprite mappings - special stage "DOWN" block
0001EB88                            ; ---------------------------------------------------------------------------
0001EB88                            Map_SS_Down_internal:
0001EB88 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EB8A 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EB8C 01                         byte_1B954:	dc.b 1
0001EB8D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EB92 01                         byte_1B95A:	dc.b 1
0001EB93 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EB98                            		even
0001EB98                            		even
0001EB98                            		include	"_maps\SS Chaos Emeralds.asm"
0001EB98                            ; ---------------------------------------------------------------------------
0001EB98                            ; Sprite mappings - special stage chaos	emeralds
0001EB98                            ; ---------------------------------------------------------------------------
0001EB98 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EB9A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EB9C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EB9E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EBA0 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EBA2 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EBA4 01                         byte_1B96C:	dc.b 1
0001EBA5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EBAA 01                         byte_1B972:	dc.b 1
0001EBAB F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EBB0 01                         byte_1B978:	dc.b 1
0001EBB1 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EBB6 01                         byte_1B97E:	dc.b 1
0001EBB7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EBBC                            		even
0001EBBC                            		even
0001EBBC                            
0001EBBC                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EBBC                            ; ---------------------------------------------------------------------------
0001EBBC                            ; Object 09 - Sonic (special stage)
0001EBBC                            ; ---------------------------------------------------------------------------
0001EBBC                            
0001EBBC                            SonicSpecial:
0001EBBC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EBC0 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EBC2 6100 0000                  		bsr.w	SS_FixCamera
0001EBC6 6000 0000                  		bra.w	DebugMode
0001EBCA                            ; ===========================================================================
0001EBCA                            
0001EBCA                            Obj09_Normal:
0001EBCA 7000                       		moveq	#0,d0
0001EBCC 1028 0024                  		move.b	obRoutine(a0),d0
0001EBD0 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EBD4 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EBD8                            ; ===========================================================================
0001EBD8 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EBDA 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EBDC 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EBDE 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EBE0                            ; ===========================================================================
0001EBE0                            
0001EBE0                            Obj09_Main:	; Routine 0
0001EBE0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EBE4 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EBEA 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EBF0 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EBF8 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EBFE 117C 0004 0001             		move.b	#4,obRender(a0)
0001EC04 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EC0A 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EC10 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EC16 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EC1C                            
0001EC1C                            Obj09_ChkDebug:	; Routine 2
0001EC1C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EC20 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EC22 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EC28 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EC2A 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EC30                            
0001EC30                            Obj09_NoDebug:
0001EC30 117C 0000 0030             		move.b	#0,$30(a0)
0001EC36 7000                       		moveq	#0,d0
0001EC38 1028 0022                  		move.b	obStatus(a0),d0
0001EC3C 0240 0002                  		andi.w	#2,d0
0001EC40 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EC44 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EC48 4EB9 0001 66EC             		jsr	(Sonic_LoadGfx).l
0001EC4E 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001EC54                            ; ===========================================================================
0001EC54 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EC56 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EC58                            ; ===========================================================================
0001EC58                            
0001EC58                            Obj09_OnWall:
0001EC58 6100 0000                  		bsr.w	Obj09_Jump
0001EC5C 6100 0000                  		bsr.w	Obj09_Move
0001EC60 6100 0000                  		bsr.w	Obj09_Fall
0001EC64 6000                       		bra.s	Obj09_Display
0001EC66                            ; ===========================================================================
0001EC66                            
0001EC66                            Obj09_InAir:
0001EC66 6100 0000                  		bsr.w	nullsub_2
0001EC6A 6100 0000                  		bsr.w	Obj09_Move
0001EC6E 6100 0000                  		bsr.w	Obj09_Fall
0001EC72                            
0001EC72                            Obj09_Display:
0001EC72 6100 0000                  		bsr.w	Obj09_ChkItems
0001EC76 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EC7A 4EB9 0000 F74C             		jsr	(SpeedToPos).l
0001EC80 6100 0000                  		bsr.w	SS_FixCamera
0001EC84 3038 F780                  		move.w	(v_ssangle).w,d0
0001EC88 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EC8C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EC90 4EB9 0001 6354             		jsr	(Sonic_Animate).l
0001EC96 4E75                       		rts	
0001EC98                            
0001EC98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC98                            
0001EC98                            
0001EC98                            Obj09_Move:
0001EC98 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EC9E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001ECA0 6100 0000                  		bsr.w	Obj09_MoveLeft
0001ECA4                            
0001ECA4                            Obj09_ChkRight:
0001ECA4 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001ECAA 6700                       		beq.s	loc_1BA78	; if not, branch
0001ECAC 6100 0000                  		bsr.w	Obj09_MoveRight
0001ECB0                            
0001ECB0                            loc_1BA78:
0001ECB0 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001ECB4 0200 000C                  		andi.b	#btnL+btnR,d0
0001ECB8 6600                       		bne.s	loc_1BAA8
0001ECBA 3028 0020                  		move.w	obInertia(a0),d0
0001ECBE 6700                       		beq.s	loc_1BAA8
0001ECC0 6B00                       		bmi.s	loc_1BA9A
0001ECC2 0440 000C                  		subi.w	#$C,d0
0001ECC6 6400                       		bcc.s	loc_1BA94
0001ECC8 303C 0000                  		move.w	#0,d0
0001ECCC                            
0001ECCC                            loc_1BA94:
0001ECCC 3140 0020                  		move.w	d0,obInertia(a0)
0001ECD0 6000                       		bra.s	loc_1BAA8
0001ECD2                            ; ===========================================================================
0001ECD2                            
0001ECD2                            loc_1BA9A:
0001ECD2 0640 000C                  		addi.w	#$C,d0
0001ECD6 6400                       		bcc.s	loc_1BAA4
0001ECD8 303C 0000                  		move.w	#0,d0
0001ECDC                            
0001ECDC                            loc_1BAA4:
0001ECDC 3140 0020                  		move.w	d0,obInertia(a0)
0001ECE0                            
0001ECE0                            loc_1BAA8:
0001ECE0 1038 F780                  		move.b	(v_ssangle).w,d0
0001ECE4 0600 0020                  		addi.b	#$20,d0
0001ECE8 0200 00C0                  		andi.b	#$C0,d0
0001ECEC 4400                       		neg.b	d0
0001ECEE 4EB9 0000 3A32             		jsr	(CalcSine).l
0001ECF4 C3E8 0020                  		muls.w	obInertia(a0),d1
0001ECF8 D3A8 0008                  		add.l	d1,obX(a0)
0001ECFC C1E8 0020                  		muls.w	obInertia(a0),d0
0001ED00 D1A8 000C                  		add.l	d0,obY(a0)
0001ED04 48E7 C000                  		movem.l	d0-d1,-(sp)
0001ED08 2428 000C                  		move.l	obY(a0),d2
0001ED0C 2628 0008                  		move.l	obX(a0),d3
0001ED10 6100 0000                  		bsr.w	sub_1BCE8
0001ED14 6700                       		beq.s	loc_1BAF2
0001ED16 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001ED1A 93A8 0008                  		sub.l	d1,obX(a0)
0001ED1E 91A8 000C                  		sub.l	d0,obY(a0)
0001ED22 317C 0000 0020             		move.w	#0,obInertia(a0)
0001ED28 4E75                       		rts	
0001ED2A                            ; ===========================================================================
0001ED2A                            
0001ED2A                            loc_1BAF2:
0001ED2A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001ED2E 4E75                       		rts	
0001ED30                            ; End of function Obj09_Move
0001ED30                            
0001ED30                            
0001ED30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED30                            
0001ED30                            
0001ED30                            Obj09_MoveLeft:
0001ED30 08E8 0000 0022             		bset	#0,obStatus(a0)
0001ED36 3028 0020                  		move.w	obInertia(a0),d0
0001ED3A 6700                       		beq.s	loc_1BB06
0001ED3C 6A00                       		bpl.s	loc_1BB1A
0001ED3E                            
0001ED3E                            loc_1BB06:
0001ED3E 0440 000C                  		subi.w	#$C,d0
0001ED42 0C40 F800                  		cmpi.w	#-$800,d0
0001ED46 6E00                       		bgt.s	loc_1BB14
0001ED48 303C F800                  		move.w	#-$800,d0
0001ED4C                            
0001ED4C                            loc_1BB14:
0001ED4C 3140 0020                  		move.w	d0,obInertia(a0)
0001ED50 4E75                       		rts	
0001ED52                            ; ===========================================================================
0001ED52                            
0001ED52                            loc_1BB1A:
0001ED52 0440 0040                  		subi.w	#$40,d0
0001ED56 6400                       		bcc.s	loc_1BB22
0001ED58 4E71                       		nop	
0001ED5A                            
0001ED5A                            loc_1BB22:
0001ED5A 3140 0020                  		move.w	d0,obInertia(a0)
0001ED5E 4E75                       		rts	
0001ED60                            ; End of function Obj09_MoveLeft
0001ED60                            
0001ED60                            
0001ED60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED60                            
0001ED60                            
0001ED60                            Obj09_MoveRight:
0001ED60 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001ED66 3028 0020                  		move.w	obInertia(a0),d0
0001ED6A 6B00                       		bmi.s	loc_1BB48
0001ED6C 0640 000C                  		addi.w	#$C,d0
0001ED70 0C40 0800                  		cmpi.w	#$800,d0
0001ED74 6D00                       		blt.s	loc_1BB42
0001ED76 303C 0800                  		move.w	#$800,d0
0001ED7A                            
0001ED7A                            loc_1BB42:
0001ED7A 3140 0020                  		move.w	d0,obInertia(a0)
0001ED7E 6000                       		bra.s	locret_1BB54
0001ED80                            ; ===========================================================================
0001ED80                            
0001ED80                            loc_1BB48:
0001ED80 0640 0040                  		addi.w	#$40,d0
0001ED84 6400                       		bcc.s	loc_1BB50
0001ED86 4E71                       		nop	
0001ED88                            
0001ED88                            loc_1BB50:
0001ED88 3140 0020                  		move.w	d0,obInertia(a0)
0001ED8C                            
0001ED8C                            locret_1BB54:
0001ED8C 4E75                       		rts	
0001ED8E                            ; End of function Obj09_MoveRight
0001ED8E                            
0001ED8E                            
0001ED8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED8E                            
0001ED8E                            
0001ED8E                            Obj09_Jump:
0001ED8E 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001ED92 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001ED96 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001ED98 1038 F780                  		move.b	(v_ssangle).w,d0
0001ED9C 0200 00FC                  		andi.b	#$FC,d0
0001EDA0 4400                       		neg.b	d0
0001EDA2 0400 0040                  		subi.b	#$40,d0
0001EDA6 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EDAC C3FC 0680                  		muls.w	#$680,d1
0001EDB0 E081                       		asr.l	#8,d1
0001EDB2 3141 0010                  		move.w	d1,obVelX(a0)
0001EDB6 C1FC 0680                  		muls.w	#$680,d0
0001EDBA E080                       		asr.l	#8,d0
0001EDBC 3140 0012                  		move.w	d0,obVelY(a0)
0001EDC0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EDD0                            
0001EDD0                            Obj09_NoJump:
0001EDD0 4E75                       		rts	
0001EDD2                            ; End of function Obj09_Jump
0001EDD2                            
0001EDD2                            
0001EDD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDD2                            
0001EDD2                            
0001EDD2                            nullsub_2:
0001EDD2 4E75                       		rts	
0001EDD4                            ; End of function nullsub_2
0001EDD4                            
0001EDD4                            ; ===========================================================================
0001EDD4                            ; ---------------------------------------------------------------------------
0001EDD4                            ; unused subroutine to limit Sonic's upward vertical speed
0001EDD4                            ; ---------------------------------------------------------------------------
0001EDD4 323C FC00                  		move.w	#-$400,d1
0001EDD8 B268 0012                  		cmp.w	obVelY(a0),d1
0001EDDC 6F00                       		ble.s	locret_1BBB4
0001EDDE 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EDE2 0200 0070                  		andi.b	#btnABC,d0
0001EDE6 6600                       		bne.s	locret_1BBB4
0001EDE8 3141 0012                  		move.w	d1,obVelY(a0)
0001EDEC                            
0001EDEC                            locret_1BBB4:
0001EDEC 4E75                       		rts	
0001EDEE                            ; ---------------------------------------------------------------------------
0001EDEE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EDEE                            ; ---------------------------------------------------------------------------
0001EDEE                            
0001EDEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDEE                            
0001EDEE                            
0001EDEE                            SS_FixCamera:
0001EDEE 3428 000C                  		move.w	obY(a0),d2
0001EDF2 3628 0008                  		move.w	obX(a0),d3
0001EDF6 3038 F700                  		move.w	(v_screenposx).w,d0
0001EDFA 0443 00A0                  		subi.w	#$A0,d3
0001EDFE 6500                       		bcs.s	loc_1BBCE
0001EE00 9043                       		sub.w	d3,d0
0001EE02 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EE06                            
0001EE06                            loc_1BBCE:
0001EE06 3038 F704                  		move.w	(v_screenposy).w,d0
0001EE0A 0442 0070                  		subi.w	#$70,d2
0001EE0E 6500                       		bcs.s	locret_1BBDE
0001EE10 9042                       		sub.w	d2,d0
0001EE12 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EE16                            
0001EE16                            locret_1BBDE:
0001EE16 4E75                       		rts	
0001EE18                            ; End of function SS_FixCamera
0001EE18                            
0001EE18                            ; ===========================================================================
0001EE18                            
0001EE18                            Obj09_ExitStage:
0001EE18 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EE1E 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EE24 6600                       		bne.s	loc_1BBF4
0001EE26 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EE2C                            
0001EE2C                            loc_1BBF4:
0001EE2C 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EE32 6D00                       		blt.s	loc_1BC12
0001EE34 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EE3A 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EE40 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE44 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EE4A                            
0001EE4A                            loc_1BC12:
0001EE4A 3038 F780                  		move.w	(v_ssangle).w,d0
0001EE4E D078 F782                  		add.w	(v_ssrotate).w,d0
0001EE52 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EE56 4EB9 0001 6354             		jsr	(Sonic_Animate).l
0001EE5C 4EB9 0001 66EC             		jsr	(Sonic_LoadGfx).l
0001EE62 6100 FF8A                  		bsr.w	SS_FixCamera
0001EE66 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001EE6C                            ; ===========================================================================
0001EE6C                            
0001EE6C                            Obj09_Exit2:
0001EE6C 5368 0038                  		subq.w	#1,$38(a0)
0001EE70 6600                       		bne.s	loc_1BC40
0001EE72 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EE78                            
0001EE78                            loc_1BC40:
0001EE78 4EB9 0001 6354             		jsr	(Sonic_Animate).l
0001EE7E 4EB9 0001 66EC             		jsr	(Sonic_LoadGfx).l
0001EE84 6100 FF68                  		bsr.w	SS_FixCamera
0001EE88 4EF9 0000 F760             		jmp	(DisplaySprite).l
0001EE8E                            
0001EE8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE8E                            
0001EE8E                            
0001EE8E                            Obj09_Fall:
0001EE8E 2428 000C                  		move.l	obY(a0),d2
0001EE92 2628 0008                  		move.l	obX(a0),d3
0001EE96 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE9A 0200 00FC                  		andi.b	#$FC,d0
0001EE9E 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EEA4 3828 0010                  		move.w	obVelX(a0),d4
0001EEA8 48C4                       		ext.l	d4
0001EEAA E184                       		asl.l	#8,d4
0001EEAC C1FC 002A                  		muls.w	#$2A,d0
0001EEB0 D084                       		add.l	d4,d0
0001EEB2 3828 0012                  		move.w	obVelY(a0),d4
0001EEB6 48C4                       		ext.l	d4
0001EEB8 E184                       		asl.l	#8,d4
0001EEBA C3FC 002A                  		muls.w	#$2A,d1
0001EEBE D284                       		add.l	d4,d1
0001EEC0 D680                       		add.l	d0,d3
0001EEC2 6100 0000                  		bsr.w	sub_1BCE8
0001EEC6 6700                       		beq.s	loc_1BCB0
0001EEC8 9680                       		sub.l	d0,d3
0001EECA 7000                       		moveq	#0,d0
0001EECC 3140 0010                  		move.w	d0,obVelX(a0)
0001EED0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EED6 D481                       		add.l	d1,d2
0001EED8 6100 0000                  		bsr.w	sub_1BCE8
0001EEDC 6700                       		beq.s	loc_1BCC6
0001EEDE 9481                       		sub.l	d1,d2
0001EEE0 7200                       		moveq	#0,d1
0001EEE2 3141 0012                  		move.w	d1,obVelY(a0)
0001EEE6 4E75                       		rts	
0001EEE8                            ; ===========================================================================
0001EEE8                            
0001EEE8                            loc_1BCB0:
0001EEE8 D481                       		add.l	d1,d2
0001EEEA 6100 0000                  		bsr.w	sub_1BCE8
0001EEEE 6700                       		beq.s	loc_1BCD4
0001EEF0 9481                       		sub.l	d1,d2
0001EEF2 7200                       		moveq	#0,d1
0001EEF4 3141 0012                  		move.w	d1,obVelY(a0)
0001EEF8 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EEFE                            
0001EEFE                            loc_1BCC6:
0001EEFE E080                       		asr.l	#8,d0
0001EF00 E081                       		asr.l	#8,d1
0001EF02 3140 0010                  		move.w	d0,obVelX(a0)
0001EF06 3141 0012                  		move.w	d1,obVelY(a0)
0001EF0A 4E75                       		rts	
0001EF0C                            ; ===========================================================================
0001EF0C                            
0001EF0C                            loc_1BCD4:
0001EF0C E080                       		asr.l	#8,d0
0001EF0E E081                       		asr.l	#8,d1
0001EF10 3140 0010                  		move.w	d0,obVelX(a0)
0001EF14 3141 0012                  		move.w	d1,obVelY(a0)
0001EF18 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF1E 4E75                       		rts	
0001EF20                            ; End of function Obj09_Fall
0001EF20                            
0001EF20                            
0001EF20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF20                            
0001EF20                            
0001EF20                            sub_1BCE8:
0001EF20 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EF26 7800                       		moveq	#0,d4
0001EF28 4842                       		swap	d2
0001EF2A 3802                       		move.w	d2,d4
0001EF2C 4842                       		swap	d2
0001EF2E 0644 0044                  		addi.w	#$44,d4
0001EF32 88FC 0018                  		divu.w	#$18,d4
0001EF36 C8FC 0080                  		mulu.w	#$80,d4
0001EF3A D3C4                       		adda.l	d4,a1
0001EF3C 7800                       		moveq	#0,d4
0001EF3E 4843                       		swap	d3
0001EF40 3803                       		move.w	d3,d4
0001EF42 4843                       		swap	d3
0001EF44 0644 0014                  		addi.w	#$14,d4
0001EF48 88FC 0018                  		divu.w	#$18,d4
0001EF4C D2C4                       		adda.w	d4,a1
0001EF4E 7A00                       		moveq	#0,d5
0001EF50 1819                       		move.b	(a1)+,d4
0001EF52 6100                       		bsr.s	sub_1BD30
0001EF54 1819                       		move.b	(a1)+,d4
0001EF56 6100                       		bsr.s	sub_1BD30
0001EF58 D2FC 007E                  		adda.w	#$7E,a1
0001EF5C 1819                       		move.b	(a1)+,d4
0001EF5E 6100                       		bsr.s	sub_1BD30
0001EF60 1819                       		move.b	(a1)+,d4
0001EF62 6100                       		bsr.s	sub_1BD30
0001EF64 4A05                       		tst.b	d5
0001EF66 4E75                       		rts	
0001EF68                            ; End of function sub_1BCE8
0001EF68                            
0001EF68                            
0001EF68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF68                            
0001EF68                            
0001EF68                            sub_1BD30:
0001EF68 6700                       		beq.s	locret_1BD44
0001EF6A 0C04 0028                  		cmpi.b	#$28,d4
0001EF6E 6700                       		beq.s	locret_1BD44
0001EF70 0C04 003A                  		cmpi.b	#$3A,d4
0001EF74 6500                       		bcs.s	loc_1BD46
0001EF76 0C04 004B                  		cmpi.b	#$4B,d4
0001EF7A 6400                       		bcc.s	loc_1BD46
0001EF7C                            
0001EF7C                            locret_1BD44:
0001EF7C 4E75                       		rts	
0001EF7E                            ; ===========================================================================
0001EF7E                            
0001EF7E                            loc_1BD46:
0001EF7E 1144 0030                  		move.b	d4,$30(a0)
0001EF82 2149 0032                  		move.l	a1,$32(a0)
0001EF86 7AFF                       		moveq	#-1,d5
0001EF88 4E75                       		rts	
0001EF8A                            ; End of function sub_1BD30
0001EF8A                            
0001EF8A                            
0001EF8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF8A                            
0001EF8A                            
0001EF8A                            Obj09_ChkItems:
0001EF8A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EF90 7800                       		moveq	#0,d4
0001EF92 3828 000C                  		move.w	obY(a0),d4
0001EF96 0644 0050                  		addi.w	#$50,d4
0001EF9A 88FC 0018                  		divu.w	#$18,d4
0001EF9E C8FC 0080                  		mulu.w	#$80,d4
0001EFA2 D3C4                       		adda.l	d4,a1
0001EFA4 7800                       		moveq	#0,d4
0001EFA6 3828 0008                  		move.w	obX(a0),d4
0001EFAA 0644 0020                  		addi.w	#$20,d4
0001EFAE 88FC 0018                  		divu.w	#$18,d4
0001EFB2 D2C4                       		adda.w	d4,a1
0001EFB4 1811                       		move.b	(a1),d4
0001EFB6 6600                       		bne.s	Obj09_ChkCont
0001EFB8 4A28 003A                  		tst.b	$3A(a0)
0001EFBC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001EFC0 7800                       		moveq	#0,d4
0001EFC2 4E75                       		rts	
0001EFC4                            ; ===========================================================================
0001EFC4                            
0001EFC4                            Obj09_ChkCont:
0001EFC4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001EFC8 6600                       		bne.s	Obj09_Chk1Up
0001EFCA 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001EFCE 6600                       		bne.s	Obj09_GetCont
0001EFD0 14BC 0001                  		move.b	#1,(a2)
0001EFD4 2549 0004                  		move.l	a1,4(a2)
0001EFD8                            
0001EFD8                            Obj09_GetCont:
0001EFD8 4EB9 0000 BA5E             		jsr	(CollectRing).l
0001EFDE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001EFE4 6500                       		bcs.s	Obj09_NoCont
0001EFE6 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001EFEC 6600                       		bne.s	Obj09_NoCont
0001EFEE 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001EFFC                            
0001EFFC                            Obj09_NoCont:
0001EFFC 7800                       		moveq	#0,d4
0001EFFE 4E75                       		rts	
0001F000                            ; ===========================================================================
0001F000                            
0001F000                            Obj09_Chk1Up:
0001F000 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F004 6600                       		bne.s	Obj09_ChkEmer
0001F006 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F00A 6600                       		bne.s	Obj09_Get1Up
0001F00C 14BC 0003                  		move.b	#3,(a2)
0001F010 2549 0004                  		move.l	a1,4(a2)
0001F014                            
0001F014                            Obj09_Get1Up:
0001F014 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F018 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F026 7800                       		moveq	#0,d4
0001F028 4E75                       		rts	
0001F02A                            ; ===========================================================================
0001F02A                            
0001F02A                            Obj09_ChkEmer:
0001F02A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F02E 6500                       		bcs.s	Obj09_ChkGhost
0001F030 0C04 0040                  		cmpi.b	#$40,d4
0001F034 6200                       		bhi.s	Obj09_ChkGhost
0001F036 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F03A 6600                       		bne.s	Obj09_GetEmer
0001F03C 14BC 0005                  		move.b	#5,(a2)
0001F040 2549 0004                  		move.l	a1,4(a2)
0001F044                            
0001F044                            Obj09_GetEmer:
0001F044 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F04A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F04C 0404 003B                  		subi.b	#$3B,d4
0001F050 7000                       		moveq	#0,d0
0001F052 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F056 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F05A 1584 0000                  		move.b	d4,(a2,d0.w)
0001F05E 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F062                            
0001F062                            Obj09_NoEmer:
0001F06C 7800                       		moveq	#0,d4
0001F06E 4E75                       		rts	
0001F070                            ; ===========================================================================
0001F070                            
0001F070                            Obj09_ChkGhost:
0001F070 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F074 6600                       		bne.s	Obj09_ChkGhostTag
0001F076 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F07C                            
0001F07C                            Obj09_ChkGhostTag:
0001F07C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F080 6600                       		bne.s	Obj09_NoGhost
0001F082 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F088 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F08A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F090                            
0001F090                            Obj09_NoGhost:
0001F090 78FF                       		moveq	#-1,d4
0001F092 4E75                       		rts	
0001F094                            ; ===========================================================================
0001F094                            
0001F094                            Obj09_MakeGhostSolid:
0001F094 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F09A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F09C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F0A2 723F                       		moveq	#$3F,d1
0001F0A4                            
0001F0A4                            Obj09_GhostLoop2:
0001F0A4 743F                       		moveq	#$3F,d2
0001F0A6                            
0001F0A6                            Obj09_GhostLoop:
0001F0A6 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F0AA 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F0AC 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F0B0                            
0001F0B0                            Obj09_NoReplace:
0001F0B0 5249                       		addq.w	#1,a1
0001F0B2 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F0B6 43E9 0040                  		lea	$40(a1),a1
0001F0BA 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F0BE                            
0001F0BE                            Obj09_GhostNotSolid:
0001F0BE 4228 003A                  		clr.b	$3A(a0)
0001F0C2 7800                       		moveq	#0,d4
0001F0C4 4E75                       		rts	
0001F0C6                            ; End of function Obj09_ChkItems
0001F0C6                            
0001F0C6                            
0001F0C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0C6                            
0001F0C6                            
0001F0C6                            Obj09_ChkItems2:
0001F0C6 1028 0030                  		move.b	$30(a0),d0
0001F0CA 6600                       		bne.s	Obj09_ChkBumper
0001F0CC 5328 0036                  		subq.b	#1,$36(a0)
0001F0D0 6A00                       		bpl.s	loc_1BEA0
0001F0D2 117C 0000 0036             		move.b	#0,$36(a0)
0001F0D8                            
0001F0D8                            loc_1BEA0:
0001F0D8 5328 0037                  		subq.b	#1,$37(a0)
0001F0DC 6A00                       		bpl.s	locret_1BEAC
0001F0DE 117C 0000 0037             		move.b	#0,$37(a0)
0001F0E4                            
0001F0E4                            locret_1BEAC:
0001F0E4 4E75                       		rts	
0001F0E6                            ; ===========================================================================
0001F0E6                            
0001F0E6                            Obj09_ChkBumper:
0001F0E6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F0EA 6600                       		bne.s	Obj09_GOAL
0001F0EC 2228 0032                  		move.l	$32(a0),d1
0001F0F0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F0F6 3401                       		move.w	d1,d2
0001F0F8 0241 007F                  		andi.w	#$7F,d1
0001F0FC C2FC 0018                  		mulu.w	#$18,d1
0001F100 0441 0014                  		subi.w	#$14,d1
0001F104 EE4A                       		lsr.w	#7,d2
0001F106 0242 007F                  		andi.w	#$7F,d2
0001F10A C4FC 0018                  		mulu.w	#$18,d2
0001F10E 0442 0044                  		subi.w	#$44,d2
0001F112 9268 0008                  		sub.w	obX(a0),d1
0001F116 9468 000C                  		sub.w	obY(a0),d2
0001F11A 4EB9 0000 3CC4             		jsr	(CalcAngle).l
0001F120 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F126 C3FC F900                  		muls.w	#-$700,d1
0001F12A E081                       		asr.l	#8,d1
0001F12C 3141 0010                  		move.w	d1,obVelX(a0)
0001F130 C1FC F900                  		muls.w	#-$700,d0
0001F134 E080                       		asr.l	#8,d0
0001F136 3140 0012                  		move.w	d0,obVelY(a0)
0001F13A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F140 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F144 6600                       		bne.s	Obj09_BumpSnd
0001F146 14BC 0002                  		move.b	#2,(a2)
0001F14A 2028 0032                  		move.l	$32(a0),d0
0001F14E 5380                       		subq.l	#1,d0
0001F150 2540 0004                  		move.l	d0,4(a2)
0001F154                            
0001F154                            Obj09_BumpSnd:
0001F15E                            ; ===========================================================================
0001F15E                            
0001F15E                            Obj09_GOAL:
0001F15E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F162 6600                       		bne.s	Obj09_UPblock
0001F164 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F172 4E75                       		rts	
0001F174                            ; ===========================================================================
0001F174                            
0001F174                            Obj09_UPblock:
0001F174 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F178 6600                       		bne.s	Obj09_DOWNblock
0001F17A 4A28 0036                  		tst.b	$36(a0)
0001F17E 6600 0000                  		bne.w	Obj09_NoGlass
0001F182 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F188 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F18E 6700                       		beq.s	Obj09_UPsnd
0001F190 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F194 2268 0032                  		movea.l	$32(a0),a1
0001F198 5389                       		subq.l	#1,a1
0001F19A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F19E                            
0001F19E                            Obj09_UPsnd:
0001F1A8                            ; ===========================================================================
0001F1A8                            
0001F1A8                            Obj09_DOWNblock:
0001F1A8 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F1AC 6600                       		bne.s	Obj09_Rblock
0001F1AE 4A28 0036                  		tst.b	$36(a0)
0001F1B2 6600 0000                  		bne.w	Obj09_NoGlass
0001F1B6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F1BC 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F1C2 6600                       		bne.s	Obj09_DOWNsnd
0001F1C4 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F1C8 2268 0032                  		movea.l	$32(a0),a1
0001F1CC 5389                       		subq.l	#1,a1
0001F1CE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F1D2                            
0001F1D2                            Obj09_DOWNsnd:
0001F1DC                            ; ===========================================================================
0001F1DC                            
0001F1DC                            Obj09_Rblock:
0001F1DC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F1E0 6600                       		bne.s	Obj09_ChkGlass
0001F1E2 4A28 0037                  		tst.b	$37(a0)
0001F1E6 6600 0000                  		bne.w	Obj09_NoGlass
0001F1EA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F1F0 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F1F4 6600                       		bne.s	Obj09_RevStage
0001F1F6 14BC 0004                  		move.b	#4,(a2)
0001F1FA 2028 0032                  		move.l	$32(a0),d0
0001F1FE 5380                       		subq.l	#1,d0
0001F200 2540 0004                  		move.l	d0,4(a2)
0001F204                            
0001F204                            Obj09_RevStage:
0001F204 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F212                            ; ===========================================================================
0001F212                            
0001F212                            Obj09_ChkGlass:
0001F212 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F216 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F218 0C00 002E                  		cmpi.b	#$2E,d0
0001F21C 6700                       		beq.s	Obj09_Glass
0001F21E 0C00 002F                  		cmpi.b	#$2F,d0
0001F222 6700                       		beq.s	Obj09_Glass
0001F224 0C00 0030                  		cmpi.b	#$30,d0
0001F228 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F22A                            
0001F22A                            Obj09_Glass:
0001F22A 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F22E 6600                       		bne.s	Obj09_GlassSnd
0001F230 14BC 0006                  		move.b	#6,(a2)
0001F234 2268 0032                  		movea.l	$32(a0),a1
0001F238 5389                       		subq.l	#1,a1
0001F23A 2549 0004                  		move.l	a1,4(a2)
0001F23E 1011                       		move.b	(a1),d0
0001F240 5200                       		addq.b	#1,d0		; change glass type when touched
0001F242 0C00 0030                  		cmpi.b	#$30,d0
0001F246 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F248 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F24A                            
0001F24A                            Obj09_GlassUpdate:
0001F24A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F24E                            
0001F24E                            Obj09_GlassSnd:
0001F258                            ; ===========================================================================
0001F258                            
0001F258                            Obj09_NoGlass:
0001F258 4E75                       		rts	
0001F25A                            ; End of function Obj09_ChkItems2
0001F25A                            ; End of function Obj09_ChkItems2
0001F25A                            
0001F25A                            		include	"_incObj\10.asm"
0001F25A                            ; ---------------------------------------------------------------------------
0001F25A                            ; Object 10 - After-Image
0001F25A                            ; ---------------------------------------------------------------------------
0001F25A                            
0001F25A                            Obj10:
0001F25A 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F260 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F264                            
0001F264 7000                             moveq   #0,d0
0001F266 1028 0024                        move.b   obRoutine(a0),d0
0001F26A 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F26E 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F272                            
0001F272                            ; ===========================================================================
0001F272                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F272                            ; ===========================================================================
0001F272                            Afterimage_Index:
0001F272 0000                             dc.w NoAfterImage-Afterimage_Index
0001F274 0000                             dc.w NoAfterImage-Afterimage_Index
0001F276 0000                             dc.w NoAfterImage-Afterimage_Index
0001F278 0000                             dc.w AfterimageStart-Afterimage_Index
0001F27A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F27C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F27E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F280 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F282 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F284                            ; ===========================================================================
0001F284                            NoAfterImage:
0001F284 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F288 4E75                             rts
0001F28A                            ; ===========================================================================
0001F28A                            AfterimageStart:
0001F28A 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F290 6000                             bra.s   Afterimage_Show
0001F292                            ; ===========================================================================
0001F292                            AfterimageLPrio:
0001F292 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F296                            ; ===========================================================================
0001F296                            Afterimage_Show:
0001F296 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F29A 4EB9 0000 3A0C                   jsr   (RandomNumber).l         ; get a random number
0001F2A0 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F2A4 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F2A6 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F2A8                            
0001F2A8                            AfterimageException:
0001F2A8 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F2AE 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F2B4 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F2BA 4EF9 0000 F760                   jmp   DisplaySprite
0001F2C0                            ; ===========================================================================
0001F2C0                            AfterimageEnd:
0001F2C0 4EF9 0000 F7A0                   jmp   DeleteObject
0001F2C0 4EF9 0000 F7A0                   jmp   DeleteObject
0001F2C6                            
0001F2C6                            		include	"_inc\AnimateLevelGfx.asm"
0001F2C6                            ; ---------------------------------------------------------------------------
0001F2C6                            ; Subroutine to	animate	level graphics
0001F2C6                            ; ---------------------------------------------------------------------------
0001F2C6                            
0001F2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2C6                            
0001F2C6                            
0001F2C6                            AnimateLevelGfx:
0001F2C6                            		;tst.w	(f_pause).w	; is the game paused?
0001F2C6                            		;bne.s	@ispaused	; if yes, branch
0001F2C6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F2CC 6100 0000                  		bsr.w	AniArt_GiantRing
0001F2D0 7000                       		moveq	#0,d0
0001F2D2 1038 FE10                  		move.b	(v_zone).w,d0
0001F2D6 D040                       		add.w	d0,d0
0001F2D8 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F2DC 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F2E0                            
0001F2E0                            	@ispaused:
0001F2E0 4E75                       		rts	
0001F2E2                            
0001F2E2                            ; ===========================================================================
0001F2E2 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F2E6 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F2EA 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F2EE 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F2F0                            ; ===========================================================================
0001F2F0                            ; ---------------------------------------------------------------------------
0001F2F0                            ; Animated pattern routine - Green Hill
0001F2F0                            ; ---------------------------------------------------------------------------
0001F2F0                            
0001F2F0                            AniArt_GHZ:
0001F2F0                            
0001F2F0                            AniArt_GHZ_Waterfall:
0001F2F0                            
0001F2F0 =00000008                  @size:		equ 8	; number of tiles per frame
0001F2F0                            
0001F2F0 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F2F4 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F2F6                            
0001F2F6 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F2FC 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F302 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F306 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F30A 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F30E 6700                       		beq.s	@isframe0	; branch if frame 0
0001F310 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F314                            
0001F314                            	@isframe0:
0001F31E 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F322 6000 0000                  		bra.w	LoadTiles
0001F326                            ; ===========================================================================
0001F326                            
0001F326                            AniArt_GHZ_Bigflower:
0001F326                            
0001F326 =00000010                  @size:		equ 16	; number of tiles per frame
0001F326                            
0001F326 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F32A 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F32C                            
0001F32C 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F332 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F338 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F33C 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F340 0240 0001                  		andi.w	#1,d0
0001F344 6700                       		beq.s	@isframe0
0001F346 43E9 0200                  		lea	@size*$20(a1),a1
0001F34A                            
0001F34A                            	@isframe0:
0001F354 323C 000F                  		move.w	#@size-1,d1
0001F358 6000 0000                  		bra.w	LoadTiles
0001F35C                            ; ===========================================================================
0001F35C                            
0001F35C                            AniArt_GHZ_Smallflower:
0001F35C                            
0001F35C =0000000C                  @size:		equ 12	; number of tiles per frame
0001F35C                            
0001F35C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F360 6A00                       		bpl.s	@end
0001F362                            
0001F362 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F368 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F36C 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F370 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F374 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F378 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F37C 6600                       		bne.s	@isframe1	; if not, branch
0001F37E 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F384                            
0001F384                            	@isframe1:
0001F384 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F386 3200                       		move.w	d0,d1
0001F388 D040                       		add.w	d0,d0
0001F38A D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F396 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F39C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F3A0 323C 000B                  		move.w	#@size-1,d1
0001F3A4 6100 0000                  		bsr.w	LoadTiles
0001F3A8                            
0001F3A8                            @end:
0001F3A8 4E75                       		rts	
0001F3AA                            
0001F3AA 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F3AE                            ; ===========================================================================
0001F3AE                            ; ---------------------------------------------------------------------------
0001F3AE                            ; Animated pattern routine - Marble
0001F3AE                            ; ---------------------------------------------------------------------------
0001F3AE                            
0001F3AE                            AniArt_MZ:
0001F3AE                            
0001F3AE                            AniArt_MZ_Lava:
0001F3AE                            
0001F3AE =00000008                  @size:		equ 8	; number of tiles per frame
0001F3AE                            
0001F3AE 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F3B2 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F3B4                            
0001F3B4 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F3BA 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F3C0 7000                       		moveq	#0,d0
0001F3C2 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F3C6 5200                       		addq.b	#1,d0		; increment frame counter
0001F3C8 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F3CC 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F3CE 7000                       		moveq	#0,d0
0001F3D0                            
0001F3D0                            	@frame01or2:
0001F3D0 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F3D4 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F3D8 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F3E4 323C 0007                  		move.w	#@size-1,d1
0001F3E8 6100 0000                  		bsr.w	LoadTiles
0001F3EC                            
0001F3EC                            AniArt_MZ_Magma:
0001F3EC 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F3F0 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F3F2                            		
0001F3F2 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F3F8 7000                       		moveq	#0,d0
0001F3FA 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F3FE 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F404 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F406 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F412 7600                       		moveq	#0,d3
0001F414 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F418 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F41C 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F420 343C 0003                  		move.w	#3,d2
0001F424                            
0001F424                            	@loop:
0001F424 3003                       		move.w	d3,d0
0001F426 D040                       		add.w	d0,d0
0001F428 0240 001E                  		andi.w	#$1E,d0
0001F42C 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F432 3033 0000                  		move.w	(a3,d0.w),d0
0001F436 47F3 0000                  		lea	(a3,d0.w),a3
0001F43A 224C                       		movea.l	a4,a1
0001F43C 323C 001F                  		move.w	#$1F,d1
0001F440 4E93                       		jsr	(a3)
0001F442 5843                       		addq.w	#4,d3
0001F444 51CA FFDE                  		dbf	d2,@loop
0001F448 4E75                       		rts	
0001F44A                            ; ===========================================================================
0001F44A                            
0001F44A                            AniArt_MZ_Torch:
0001F44A                            
0001F44A =00000006                  @size:		equ 6	; number of tiles per frame
0001F44A                            
0001F44A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F44E 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F452                            		
0001F452 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F458 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F45E 7000                       		moveq	#0,d0
0001F460 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F464 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F468 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F46E C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F472 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F47E 323C 0005                  		move.w	#@size-1,d1
0001F482 6000 0000                  		bra.w	LoadTiles
0001F486                            
0001F486                            @end:
0001F486 4E75                       		rts	
0001F488                            ; ===========================================================================
0001F488                            ; ---------------------------------------------------------------------------
0001F488                            ; Animated pattern routine - Scrap Brain
0001F488                            ; ---------------------------------------------------------------------------
0001F488                            
0001F488                            AniArt_SBZ:
0001F488                            
0001F488 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F488                            
0001F488 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F48C 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F48E                            		
0001F48E 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F492 6000                       		bra.s	@chk_smokepuff2
0001F494                            ; ===========================================================================
0001F494                            
0001F494                            @smokepuff:
0001F494 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F498 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F49A                            		
0001F49A 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F4A0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F4B0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F4B4 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F4B8 0240 0007                  		andi.w	#7,d0
0001F4BC 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F4BE 5340                       		subq.w	#1,d0
0001F4C0 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F4C4 43F1 0000                  		lea	(a1,d0.w),a1
0001F4C8 323C 000B                  		move.w	#@size-1,d1
0001F4CC 6000 0000                  		bra.w	LoadTiles
0001F4D0                            ; ===========================================================================
0001F4D0                            
0001F4D0                            @untilnextpuff:
0001F4D0 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F4D6                            
0001F4D6                            @clearsky:
0001F4D6 323C 0005                  		move.w	#(@size/2)-1,d1
0001F4DA 6100 0000                  		bsr.w	LoadTiles
0001F4DE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F4E4 323C 0005                  		move.w	#(@size/2)-1,d1
0001F4E8 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F4EC                            ; ===========================================================================
0001F4EC                            
0001F4EC                            @chk_smokepuff2:
0001F4EC 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F4F0 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F4F2                            		
0001F4F2 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F4F6 6000                       		bra.s	@end
0001F4F8                            ; ===========================================================================
0001F4F8                            
0001F4F8                            @smokepuff2:
0001F4F8 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F4FC 6A00                       		bpl.s	@end		; branch if not 0
0001F4FE                            		
0001F4FE 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F504 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F514 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F518 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F51C 0240 0007                  		andi.w	#7,d0
0001F520 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F522 5340                       		subq.w	#1,d0
0001F524 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F528 43F1 0000                  		lea	(a1,d0.w),a1
0001F52C 323C 000B                  		move.w	#@size-1,d1
0001F530 6000 0000                  		bra.w	LoadTiles
0001F534                            ; ===========================================================================
0001F534                            
0001F534                            @untilnextpuff2:
0001F534 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F53A 609A                       		bra.s	@clearsky
0001F53C                            ; ===========================================================================
0001F53C                            
0001F53C                            @end:
0001F53C 4E75                       		rts	
0001F53E                            ; ===========================================================================
0001F53E                            ; ---------------------------------------------------------------------------
0001F53E                            ; Animated pattern routine - ending sequence
0001F53E                            ; ---------------------------------------------------------------------------
0001F53E                            
0001F53E                            AniArt_Ending:
0001F53E                            
0001F53E                            AniArt_Ending_BigFlower:
0001F53E                            
0001F53E =00000010                  @size:		equ 16	; number of tiles per frame
0001F53E                            
0001F53E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F542 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F544                            		
0001F544 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F54A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F550 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F554 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F558 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F55C 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F560 6700                       		beq.s	@isframe0	; branch if frame 0
0001F562 43E9 0200                  		lea	@size*$20(a1),a1
0001F566 45EA 0200                  		lea	@size*$20(a2),a2
0001F56A                            
0001F56A                            	@isframe0:
0001F574 323C 000F                  		move.w	#@size-1,d1
0001F578 6100 0000                  		bsr.w	LoadTiles
0001F57C 224A                       		movea.l	a2,a1
0001F588 323C 000F                  		move.w	#@size-1,d1
0001F58C 6000 0000                  		bra.w	LoadTiles
0001F590                            ; ===========================================================================
0001F590                            
0001F590                            AniArt_Ending_SmallFlower:
0001F590                            
0001F590 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F590                            
0001F590 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F594 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F596                            		
0001F596 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F59C 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F5A0 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F5A4 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F5A8 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F5AC EF48                       		lsl.w	#7,d0		; multiply by $80
0001F5AE 3200                       		move.w	d0,d1
0001F5B0 D040                       		add.w	d0,d0
0001F5B2 D041                       		add.w	d1,d0		; multiply by 3
0001F5BE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F5C4 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F5C8 323C 000B                  		move.w	#@size-1,d1
0001F5CC 6000 0000                  		bra.w	LoadTiles
0001F5D0                            ; ===========================================================================
0001F5D0 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F5D8                            ; ===========================================================================
0001F5D8                            
0001F5D8                            AniArt_Ending_Flower3:
0001F5D8                            
0001F5D8 =00000010                  @size:		equ 16	; number of tiles per frame
0001F5D8                            
0001F5D8 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F5DC 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F5DE                            		
0001F5DE 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F5E4 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F5E8 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F5EC 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F5F0 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F5F4 E148                       		lsl.w	#8,d0		; multiply by $100
0001F5F6 D040                       		add.w	d0,d0		; multiply by 2
0001F602 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F606 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F60A 323C 000F                  		move.w	#@size-1,d1
0001F60E 6000 0000                  		bra.w	LoadTiles
0001F612                            ; ===========================================================================
0001F612 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F616                            ; ===========================================================================
0001F616                            
0001F616                            AniArt_Ending_Flower4:
0001F616                            
0001F616 =00000010                  @size:		equ 16	; number of tiles per frame
0001F616                            
0001F616 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F61A 6A00                       		bpl.s	@end		; branch if not 0
0001F61C                            		
0001F61C 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F622 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F626 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F62A 0240 0003                  		andi.w	#3,d0
0001F62E 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F632 E148                       		lsl.w	#8,d0		; multiply by $100
0001F634 D040                       		add.w	d0,d0		; multiply by 2
0001F640 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F644 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F648 323C 000F                  		move.w	#@size-1,d1
0001F64C 6000 0000                  		bra.w	LoadTiles
0001F650                            ; ===========================================================================
0001F650                            
0001F650                            @end:
0001F650 4E75                       		rts	
0001F652                            ; ===========================================================================
0001F652                            
0001F652                            AniArt_none:
0001F652 4E75                       		rts	
0001F654                            
0001F654                            ; ---------------------------------------------------------------------------
0001F654                            ; Subroutine to	transfer graphics to VRAM
0001F654                            
0001F654                            ; input:
0001F654                            ;	a1 = source address
0001F654                            ;	a6 = vdp_data_port ($C00000)
0001F654                            ;	d1 = number of tiles to load (minus one)
0001F654                            ; ---------------------------------------------------------------------------
0001F654                            
0001F654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F654                            
0001F654                            
0001F654                            LoadTiles:
0001F654 2C99                       		move.l	(a1)+,(a6)
0001F656 2C99                       		move.l	(a1)+,(a6)
0001F658 2C99                       		move.l	(a1)+,(a6)
0001F65A 2C99                       		move.l	(a1)+,(a6)
0001F65C 2C99                       		move.l	(a1)+,(a6)
0001F65E 2C99                       		move.l	(a1)+,(a6)
0001F660 2C99                       		move.l	(a1)+,(a6)
0001F662 2C99                       		move.l	(a1)+,(a6)
0001F664 51C9 FFEE                  		dbf	d1,LoadTiles
0001F668 4E75                       		rts	
0001F66A                            ; End of function LoadTiles
0001F66A                            
0001F66A                            ; ===========================================================================
0001F66A                            ; ---------------------------------------------------------------------------
0001F66A                            ; Animated pattern routine - more Marble Zone
0001F66A                            ; ---------------------------------------------------------------------------
0001F66A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F66E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F672 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F676 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F67A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F67E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F682 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F686 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F68A                            ; ===========================================================================
0001F68A                            
0001F68A                            loc_1C3EE:
0001F68A 2C91                       		move.l	(a1),(a6)
0001F68C 43E9 0010                  		lea	$10(a1),a1
0001F690 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F694 4E75                       		rts	
0001F696                            ; ===========================================================================
0001F696                            
0001F696                            loc_1C3FA:
0001F696 2029 0002                  		move.l	2(a1),d0
0001F69A 1029 0001                  		move.b	1(a1),d0
0001F69E E098                       		ror.l	#8,d0
0001F6A0 2C80                       		move.l	d0,(a6)
0001F6A2 43E9 0010                  		lea	$10(a1),a1
0001F6A6 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F6AA 4E75                       		rts	
0001F6AC                            ; ===========================================================================
0001F6AC                            
0001F6AC                            loc_1C410:
0001F6AC 2CA9 0002                  		move.l	2(a1),(a6)
0001F6B0 43E9 0010                  		lea	$10(a1),a1
0001F6B4 51C9 FFF6                  		dbf	d1,loc_1C410
0001F6B8 4E75                       		rts	
0001F6BA                            ; ===========================================================================
0001F6BA                            
0001F6BA                            loc_1C41E:
0001F6BA 2029 0004                  		move.l	4(a1),d0
0001F6BE 1029 0003                  		move.b	3(a1),d0
0001F6C2 E098                       		ror.l	#8,d0
0001F6C4 2C80                       		move.l	d0,(a6)
0001F6C6 43E9 0010                  		lea	$10(a1),a1
0001F6CA 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F6CE 4E75                       		rts	
0001F6D0                            ; ===========================================================================
0001F6D0                            
0001F6D0                            loc_1C434:
0001F6D0 2CA9 0004                  		move.l	4(a1),(a6)
0001F6D4 43E9 0010                  		lea	$10(a1),a1
0001F6D8 51C9 FFF6                  		dbf	d1,loc_1C434
0001F6DC 4E75                       		rts	
0001F6DE                            ; ===========================================================================
0001F6DE                            
0001F6DE                            loc_1C442:
0001F6DE 2029 0006                  		move.l	6(a1),d0
0001F6E2 1029 0005                  		move.b	5(a1),d0
0001F6E6 E098                       		ror.l	#8,d0
0001F6E8 2C80                       		move.l	d0,(a6)
0001F6EA 43E9 0010                  		lea	$10(a1),a1
0001F6EE 51C9 FFEE                  		dbf	d1,loc_1C442
0001F6F2 4E75                       		rts	
0001F6F4                            ; ===========================================================================
0001F6F4                            
0001F6F4                            loc_1C458:
0001F6F4 2CA9 0006                  		move.l	6(a1),(a6)
0001F6F8 43E9 0010                  		lea	$10(a1),a1
0001F6FC 51C9 FFF6                  		dbf	d1,loc_1C458
0001F700 4E75                       		rts	
0001F702                            ; ===========================================================================
0001F702                            
0001F702                            loc_1C466:
0001F702 2029 0008                  		move.l	8(a1),d0
0001F706 1029 0007                  		move.b	7(a1),d0
0001F70A E098                       		ror.l	#8,d0
0001F70C 2C80                       		move.l	d0,(a6)
0001F70E 43E9 0010                  		lea	$10(a1),a1
0001F712 51C9 FFEE                  		dbf	d1,loc_1C466
0001F716 4E75                       		rts	
0001F718                            ; ===========================================================================
0001F718                            
0001F718                            loc_1C47C:
0001F718 2CA9 0008                  		move.l	8(a1),(a6)
0001F71C 43E9 0010                  		lea	$10(a1),a1
0001F720 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F724 4E75                       		rts	
0001F726                            ; ===========================================================================
0001F726                            
0001F726                            loc_1C48A:
0001F726 2029 000A                  		move.l	$A(a1),d0
0001F72A 1029 0009                  		move.b	9(a1),d0
0001F72E E098                       		ror.l	#8,d0
0001F730 2C80                       		move.l	d0,(a6)
0001F732 43E9 0010                  		lea	$10(a1),a1
0001F736 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F73A 4E75                       		rts	
0001F73C                            ; ===========================================================================
0001F73C                            
0001F73C                            loc_1C4A0:
0001F73C 2CA9 000A                  		move.l	$A(a1),(a6)
0001F740 43E9 0010                  		lea	$10(a1),a1
0001F744 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F748 4E75                       		rts	
0001F74A                            ; ===========================================================================
0001F74A                            
0001F74A                            loc_1C4AE:
0001F74A 2029 000C                  		move.l	$C(a1),d0
0001F74E 1029 000B                  		move.b	$B(a1),d0
0001F752 E098                       		ror.l	#8,d0
0001F754 2C80                       		move.l	d0,(a6)
0001F756 43E9 0010                  		lea	$10(a1),a1
0001F75A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F75E 4E75                       		rts	
0001F760                            ; ===========================================================================
0001F760                            
0001F760                            loc_1C4C4:
0001F760 2CA9 000C                  		move.l	$C(a1),(a6)
0001F764 43E9 0010                  		lea	$10(a1),a1
0001F768 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F76C 4E75                       		rts	
0001F76E                            ; ===========================================================================
0001F76E                            
0001F76E                            loc_1C4D2:
0001F76E 2029 000C                  		move.l	$C(a1),d0
0001F772 E198                       		rol.l	#8,d0
0001F774 1011                       		move.b	0(a1),d0
0001F776 2C80                       		move.l	d0,(a6)
0001F778 43E9 0010                  		lea	$10(a1),a1
0001F77C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F780 4E75                       		rts	
0001F782                            ; ===========================================================================
0001F782                            
0001F782                            loc_1C4E8:
0001F782 3CA9 000E                  		move.w	$E(a1),(a6)
0001F786 3C91                       		move.w	0(a1),(a6)
0001F788 43E9 0010                  		lea	$10(a1),a1
0001F78C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F790 4E75                       		rts	
0001F792                            ; ===========================================================================
0001F792                            
0001F792                            loc_1C4FA:
0001F792 2011                       		move.l	0(a1),d0
0001F794 1029 000F                  		move.b	$F(a1),d0
0001F798 E098                       		ror.l	#8,d0
0001F79A 2C80                       		move.l	d0,(a6)
0001F79C 43E9 0010                  		lea	$10(a1),a1
0001F7A0 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F7A4 4E75                       		rts	
0001F7A6                            
0001F7A6                            ; ---------------------------------------------------------------------------
0001F7A6                            ; Animated pattern routine - giant ring
0001F7A6                            ; ---------------------------------------------------------------------------
0001F7A6                            
0001F7A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F7A6                            
0001F7A6                            
0001F7A6                            AniArt_GiantRing:
0001F7A6                            
0001F7A6 =0000000E                  @size:		equ 14
0001F7A6                            
0001F7A6 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F7AA 6600                       		bne.s	@loadTiles		; If so, get to work
0001F7AC 4E75                       		rts	
0001F7AE                            ; ===========================================================================
0001F7AE                            ; loc_1C518:
0001F7AE                            @loadTiles:
0001F7AE 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F7B4 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F7BA 7000                       		moveq	#0,d0
0001F7BC 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F7C0 43F1 0000                  		lea	(a1,d0.w),a1
0001F7C4                            		; Turn VRAM address into VDP command
0001F7C4 0640 8000                  		addi.w	#$8000,d0
0001F7C8 E588                       		lsl.l	#2,d0
0001F7CA E448                       		lsr.w	#2,d0
0001F7CC 0040 4000                  		ori.w	#$4000,d0
0001F7D0 4840                       		swap	d0
0001F7D2                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F7D2 2D40 0004                  		move.l	d0,4(a6)
0001F7D6                            
0001F7D6 323C 000D                  		move.w	#@size-1,d1
0001F7DA 6000 FE78                  		bra.w	LoadTiles
0001F7DE                            
0001F7DE                            ; End of function AniArt_GiantRing
0001F7DE                            ; End of function AniArt_GiantRing
0001F7DE                            
0001F7DE                            		include	"_incObj\21 HUD.asm"
0001F7DE                            ; ---------------------------------------------------------------------------
0001F7DE                            ; Object 21 - SCORE, TIME, RINGS
0001F7DE                            ; ---------------------------------------------------------------------------
0001F7DE                            
0001F7DE                            HUD:
0001F7DE 7000                       		moveq	#0,d0
0001F7E0 1028 0024                  		move.b	obRoutine(a0),d0
0001F7E4 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F7E8 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F7EC                            ; ===========================================================================
0001F7EC 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F7EE 0000                       		dc.w HUD_Flash-HUD_Index
0001F7F0                            ; ===========================================================================
0001F7F0                            
0001F7F0                            HUD_Main:	; Routine 0
0001F7F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F7F4 317C 0090 0008             		move.w	#$90,obX(a0)
0001F7FA 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F800 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F808 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F80E 117C 0000 0001             		move.b	#0,obRender(a0)
0001F814 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F81A                            
0001F81A                            HUD_Flash:	; Routine 2
0001F81A 7000                       		moveq	#0,d0
0001F81C 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F822 6600                       		bne.s	@display
0001F824 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F828 6600                       		bne.s	@norings	; if so, branch
0001F82A 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F82C                            ; ===========================================================================
0001F82C                            
0001F82C                            @norings:
0001F82C 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F832 6600                       		bne.s	@display	; if not, branch
0001F834 5440                       		addq.w	#2,d0		; make time counter flash red
0001F836                            
0001F836                            	@display:
0001F836 1140 001A                  		move.b	d0,obFrame(a0)
0001F83A 4EF9 0000 F760             		jmp	DisplaySprite
0001F83A 4EF9 0000 F760             		jmp	DisplaySprite
0001F840                            Map_HUD:	include	"_maps\HUD.asm"
0001F840                            ; ---------------------------------------------------------------------------
0001F840                            ; Sprite mappings - SCORE, TIME, RINGS
0001F840                            ; ---------------------------------------------------------------------------
0001F840                            Map_HUD_internal:
0001F840 0000                       		dc.w @allyellow-Map_HUD_internal
0001F842 0000                       		dc.w @ringred-Map_HUD_internal
0001F844 0000                       		dc.w @timered-Map_HUD_internal
0001F846 0000                       		dc.w @allred-Map_HUD_internal
0001F848 0A                         @allyellow:	dc.b $A
0001F849 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F84E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F853 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F858 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F85D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F862 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F867 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F86C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F871 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F876 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F87B 00                         		dc.b 0
0001F87C 0A                         @ringred:	dc.b $A
0001F87D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F882 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F887 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F88C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F891 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F896 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F89B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F8A0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F8A5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F8AA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F8AF 00                         		dc.b 0
0001F8B0 0A                         @timered:	dc.b $A
0001F8B1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F8B6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F8BB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F8C0 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F8C5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F8CA A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F8CF A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F8D4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F8D9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F8DE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F8E3 00                         		dc.b 0
0001F8E4 0A                         @allred:	dc.b $A
0001F8E5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F8EA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F8EF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F8F4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F8F9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F8FE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F903 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F908 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F90D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F912 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F918 00                         		even
0001F918 00                         		even
0001F918                            
0001F918                            ; ---------------------------------------------------------------------------
0001F918                            ; Add points subroutine
0001F918                            ; ---------------------------------------------------------------------------
0001F918                            
0001F918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F918                            
0001F918                            
0001F918                            AddPoints:
0001F918 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001F91E                            
0001F91E                            
0001F91E 47F8 FE26                  			lea     (v_score).w,a3
0001F922 D193                       			add.l   d0,(a3)
0001F924 223C 000F 423F             			move.l  #999999,d1
0001F92A B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001F92C 6200                       			bhi.s   @belowmax ; if yes, branch
0001F92E 2681                       			move.l  d1,(a3) ; reset score to 999999
0001F930                            		@belowmax:
0001F930 2013                       			move.l  (a3),d0
0001F932 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001F936 6500                       			blo.s   @noextralife ; if not, branch
0001F938                            
0001F938 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001F940 4A38 FFF8                  			tst.b   (v_megadrive).w
0001F944 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001F946 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001F94A 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001F958                            
0001F958                            @locret_1C6B6:
0001F958                            @noextralife:
0001F958 4E75                       		rts	
0001F95A                            ; End of function AddPoints
0001F95A                            
0001F95A                            		include	"_inc\HUD_Update.asm"
0001F95A                            ; ---------------------------------------------------------------------------
0001F95A                            ; Subroutine to	update the HUD
0001F95A                            ; ---------------------------------------------------------------------------
0001F95A                            
0001F95A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F95A                            
0001F95A                            hudVRAM:	macro loc
0001F95A                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001F95A                            		endm
0001F95A                            
0001F95A                            
0001F95A                            HUD_Update:
0001F95A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001F95E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001F962 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001F966 6700                       		beq.s	@chkrings	; if not, branch
0001F968                            
0001F968 4238 FE1F                  		clr.b	(f_scorecount).w
0001F96C 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001F972 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001F976 6100 0000                  		bsr.w	Hud_Score
0001F97A                            
0001F97A                            	@chkrings:
0001F97A 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001F97E 6700                       		beq.s	@chktime	; if not, branch
0001F980 6A00                       		bpl.s	@notzero
0001F982 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001F986                            
0001F986                            	@notzero:
0001F986 4238 FE1D                  		clr.b	(f_ringcount).w
0001F98A 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001F990 7200                       		moveq	#0,d1
0001F992 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001F996 6100 0000                  		bsr.w	Hud_Rings
0001F99A                            
0001F99A                            	@chktime:
0001F99A 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001F99E 6700                       		beq.s	@chklives	; if not, branch
0001F9A0 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F9A4 6600                       		bne.s	@chklives	; if yes, branch
0001F9A6 43F8 FE22                  		lea	(v_time).w,a1
0001F9AA 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001F9B0 6700                       		beq.s	TimeOver	; if yes, branch
0001F9B2                            
0001F9B2 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001F9B4 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001F9B8 6500                       		bcs.s	@chklives
0001F9BA 12BC 0000                  		move.b	#0,(a1)
0001F9BE 5221                       		addq.b	#1,-(a1)	; increment second counter
0001F9C0 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001F9C4 6500                       		bcs.s	@updatetime
0001F9C6 12BC 0000                  		move.b	#0,(a1)
0001F9CA 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001F9CC 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001F9D0 6500                       		bcs.s	@updatetime
0001F9D2 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001F9D6                            
0001F9D6                            	@updatetime:
0001F9D6 203C 5E40 0003             		hudVRAM	$DE40
0001F9DC 7200                       		moveq	#0,d1
0001F9DE 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001F9E2 6100 0000                  		bsr.w	Hud_Mins
0001F9E6 203C 5EC0 0003             		hudVRAM	$DEC0
0001F9EC 7200                       		moveq	#0,d1
0001F9EE 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001F9F2 6100 0000                  		bsr.w	Hud_Secs
0001F9F6                            
0001F9F6                            	@chklives:
0001F9F6 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001F9FA 6700                       		beq.s	@chkbonus	; if not, branch
0001F9FC 4238 FE1C                  		clr.b	(f_lifecount).w
0001FA00 6100 0000                  		bsr.w	Hud_Lives
0001FA04                            
0001FA04                            	@chkbonus:
0001FA04 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FA08 6700                       		beq.s	@finish		; if not, branch
0001FA0A 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FA18 7200                       		moveq	#0,d1
0001FA1A 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FA1E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FA22 7200                       		moveq	#0,d1
0001FA24 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FA28 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FA2C                            
0001FA2C                            	@finish:
0001FA2C 4E75                       		rts	
0001FA2E                            ; ===========================================================================
0001FA2E                            
0001FA2E                            TimeOver:
0001FA2E 4238 FE1E                  		clr.b	(f_timecount).w
0001FA32 41F8 D000                  		lea	(v_player).w,a0
0001FA36 2448                       		movea.l	a0,a2
0001FA38 6100 E840                  		bsr.w	KillSonic
0001FA3C 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FA42 4E75                       		rts	
0001FA44                            ; ===========================================================================
0001FA44                            
0001FA44                            HudDebug:
0001FA44 6100 0000                  		bsr.w	HudDb_XY
0001FA48 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FA4C 6700                       		beq.s	@objcounter	; if not, branch
0001FA4E 6A00                       		bpl.s	@notzero
0001FA50 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FA54                            
0001FA54                            	@notzero:
0001FA54 4238 FE1D                  		clr.b	(f_ringcount).w
0001FA58 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FA5E 7200                       		moveq	#0,d1
0001FA60 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FA64 6100 0000                  		bsr.w	Hud_Rings
0001FA68                            
0001FA68                            	@objcounter:
0001FA68 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FA6E 7200                       		moveq	#0,d1
0001FA70 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FA74 6100 0000                  		bsr.w	Hud_Secs
0001FA78 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FA7C 6700                       		beq.s	@chkbonus	; if not, branch
0001FA7E 4238 FE1C                  		clr.b	(f_lifecount).w
0001FA82 6100 0000                  		bsr.w	Hud_Lives
0001FA86                            
0001FA86                            	@chkbonus:
0001FA86 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FA8A 6700                       		beq.s	@finish		; if not, branch
0001FA8C 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FA9A 7200                       		moveq	#0,d1
0001FA9C 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FAA0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAA4 7200                       		moveq	#0,d1
0001FAA6 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FAAA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAAE                            
0001FAAE                            	@finish:
0001FAAE 4E75                       		rts	
0001FAB0                            ; End of function HUD_Update
0001FAB0                            
0001FAB0                            ; ---------------------------------------------------------------------------
0001FAB0                            ; Subroutine to	load "0" on the	HUD
0001FAB0                            ; ---------------------------------------------------------------------------
0001FAB0                            
0001FAB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FAB0                            
0001FAB0                            
0001FAB0                            Hud_LoadZero:
0001FABA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FABE 343C 0002                  		move.w	#2,d2
0001FAC2 6000                       		bra.s	loc_1C83E
0001FAC4                            ; End of function Hud_LoadZero
0001FAC4                            
0001FAC4                            ; ---------------------------------------------------------------------------
0001FAC4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FAC4                            ; ---------------------------------------------------------------------------
0001FAC4                            
0001FAC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FAC4                            
0001FAC4                            
0001FAC4                            Hud_Base:
0001FAC4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FACA 6100 0000                  		bsr.w	Hud_Lives
0001FAD8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FADC 343C 000E                  		move.w	#$E,d2
0001FAE0                            
0001FAE0                            loc_1C83E:
0001FAE0 43FA 0000                  		lea	Art_Hud(pc),a1
0001FAE4                            
0001FAE4                            loc_1C842:
0001FAE4 323C 000F                  		move.w	#$F,d1
0001FAE8 101A                       		move.b	(a2)+,d0
0001FAEA 6B00                       		bmi.s	loc_1C85E
0001FAEC 4880                       		ext.w	d0
0001FAEE EB48                       		lsl.w	#5,d0
0001FAF0 47F1 0000                  		lea	(a1,d0.w),a3
0001FAF4                            
0001FAF4                            loc_1C852:
0001FAF4 2C9B                       		move.l	(a3)+,(a6)
0001FAF6 51C9 FFFC                  		dbf	d1,loc_1C852
0001FAFA                            
0001FAFA                            loc_1C858:
0001FAFA 51CA FFE8                  		dbf	d2,loc_1C842
0001FAFE                            
0001FAFE 4E75                       		rts	
0001FB00                            ; ===========================================================================
0001FB00                            
0001FB00                            loc_1C85E:
0001FB00 2CBC 0000 0000             		move.l	#0,(a6)
0001FB06 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FB0A                            
0001FB0A 60EE                       		bra.s	loc_1C858
0001FB0C                            ; End of function Hud_Base
0001FB0C                            
0001FB0C                            ; ===========================================================================
0001FB0C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FB18 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FB1C                            ; ---------------------------------------------------------------------------
0001FB1C                            ; Subroutine to	load debug mode	numbers	patterns
0001FB1C                            ; ---------------------------------------------------------------------------
0001FB1C                            
0001FB1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB1C                            
0001FB1C                            
0001FB1C                            HudDb_XY:
0001FB26 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FB2A 4841                       		swap	d1
0001FB2C 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FB30 6100                       		bsr.s	HudDb_XY2
0001FB32 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FB36 4841                       		swap	d1
0001FB38 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FB3C                            ; End of function HudDb_XY
0001FB3C                            
0001FB3C                            
0001FB3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB3C                            
0001FB3C                            
0001FB3C                            HudDb_XY2:
0001FB3C 7C07                       		moveq	#7,d6
0001FB3E 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FB44                            
0001FB44                            HudDb_XYLoop:
0001FB44 E959                       		rol.w	#4,d1
0001FB46 3401                       		move.w	d1,d2
0001FB48 0242 000F                  		andi.w	#$F,d2
0001FB4C 0C42 000A                  		cmpi.w	#$A,d2
0001FB50 6500                       		bcs.s	loc_1C8B2
0001FB52 5E42                       		addq.w	#7,d2
0001FB54                            
0001FB54                            loc_1C8B2:
0001FB54 EB4A                       		lsl.w	#5,d2
0001FB56 47F1 2000                  		lea	(a1,d2.w),a3
0001FB5A 2C9B                       		move.l	(a3)+,(a6)
0001FB5C 2C9B                       		move.l	(a3)+,(a6)
0001FB5E 2C9B                       		move.l	(a3)+,(a6)
0001FB60 2C9B                       		move.l	(a3)+,(a6)
0001FB62 2C9B                       		move.l	(a3)+,(a6)
0001FB64 2C9B                       		move.l	(a3)+,(a6)
0001FB66 2C9B                       		move.l	(a3)+,(a6)
0001FB68 2C9B                       		move.l	(a3)+,(a6)
0001FB6A 4841                       		swap	d1
0001FB6C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FB70                            
0001FB70 4E75                       		rts	
0001FB72                            ; End of function HudDb_XY2
0001FB72                            
0001FB72                            ; ---------------------------------------------------------------------------
0001FB72                            ; Subroutine to	load rings numbers patterns
0001FB72                            ; ---------------------------------------------------------------------------
0001FB72                            
0001FB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB72                            
0001FB72                            
0001FB72                            Hud_Rings:
0001FB72 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FB78 7C02                       		moveq	#2,d6
0001FB7A 6000                       		bra.s	Hud_LoadArt
0001FB7C                            ; End of function Hud_Rings
0001FB7C                            
0001FB7C                            ; ---------------------------------------------------------------------------
0001FB7C                            ; Subroutine to	load score numbers patterns
0001FB7C                            ; ---------------------------------------------------------------------------
0001FB7C                            
0001FB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB7C                            
0001FB7C                            
0001FB7C                            Hud_Score:
0001FB7C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FB82 7C05                       		moveq	#5,d6
0001FB84                            
0001FB84                            Hud_LoadArt:
0001FB84 7800                       		moveq	#0,d4
0001FB86 43FA 0000                  		lea	Art_Hud(pc),a1
0001FB8A                            
0001FB8A                            Hud_ScoreLoop:
0001FB8A 7400                       		moveq	#0,d2
0001FB8C 261A                       		move.l	(a2)+,d3
0001FB8E                            
0001FB8E                            loc_1C8EC:
0001FB8E 9283                       		sub.l	d3,d1
0001FB90 6500                       		bcs.s	loc_1C8F4
0001FB92 5242                       		addq.w	#1,d2
0001FB94 60F8                       		bra.s	loc_1C8EC
0001FB96                            ; ===========================================================================
0001FB96                            
0001FB96                            loc_1C8F4:
0001FB96 D283                       		add.l	d3,d1
0001FB98 4A42                       		tst.w	d2
0001FB9A 6700                       		beq.s	loc_1C8FE
0001FB9C 383C 0001                  		move.w	#1,d4
0001FBA0                            
0001FBA0                            loc_1C8FE:
0001FBA0 4A44                       		tst.w	d4
0001FBA2 6700                       		beq.s	loc_1C92C
0001FBA4 ED4A                       		lsl.w	#6,d2
0001FBA6 2D40 0004                  		move.l	d0,4(a6)
0001FBAA 47F1 2000                  		lea	(a1,d2.w),a3
0001FBAE 2C9B                       		move.l	(a3)+,(a6)
0001FBB0 2C9B                       		move.l	(a3)+,(a6)
0001FBB2 2C9B                       		move.l	(a3)+,(a6)
0001FBB4 2C9B                       		move.l	(a3)+,(a6)
0001FBB6 2C9B                       		move.l	(a3)+,(a6)
0001FBB8 2C9B                       		move.l	(a3)+,(a6)
0001FBBA 2C9B                       		move.l	(a3)+,(a6)
0001FBBC 2C9B                       		move.l	(a3)+,(a6)
0001FBBE 2C9B                       		move.l	(a3)+,(a6)
0001FBC0 2C9B                       		move.l	(a3)+,(a6)
0001FBC2 2C9B                       		move.l	(a3)+,(a6)
0001FBC4 2C9B                       		move.l	(a3)+,(a6)
0001FBC6 2C9B                       		move.l	(a3)+,(a6)
0001FBC8 2C9B                       		move.l	(a3)+,(a6)
0001FBCA 2C9B                       		move.l	(a3)+,(a6)
0001FBCC 2C9B                       		move.l	(a3)+,(a6)
0001FBCE                            
0001FBCE                            loc_1C92C:
0001FBCE 0680 0040 0000             		addi.l	#$400000,d0
0001FBD4 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FBD8                            
0001FBD8 4E75                       		rts	
0001FBDA                            
0001FBDA                            ; End of function Hud_Score
0001FBDA                            ; End of function Hud_Score
0001FBDA                            
0001FBDA                            ; ---------------------------------------------------------------------------
0001FBDA                            ; Subroutine to	load countdown numbers on the continue screen
0001FBDA                            ; ---------------------------------------------------------------------------
0001FBDA                            
0001FBDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBDA                            
0001FBDA                            
0001FBDA                            ContScrCounter:
0001FBE4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FBEA 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FBF0 7C01                       		moveq	#1,d6
0001FBF2 7800                       		moveq	#0,d4
0001FBF4 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FBF8                            
0001FBF8                            ContScr_Loop:
0001FBF8 7400                       		moveq	#0,d2
0001FBFA 261A                       		move.l	(a2)+,d3
0001FBFC                            
0001FBFC                            loc_1C95A:
0001FBFC 9283                       		sub.l	d3,d1
0001FBFE 6500                       		blo.s	loc_1C962
0001FC00 5242                       		addq.w	#1,d2
0001FC02 60F8                       		bra.s	loc_1C95A
0001FC04                            ; ===========================================================================
0001FC04                            
0001FC04                            loc_1C962:
0001FC04 D283                       		add.l	d3,d1
0001FC06 ED4A                       		lsl.w	#6,d2
0001FC08 47F1 2000                  		lea	(a1,d2.w),a3
0001FC0C 2C9B                       		move.l	(a3)+,(a6)
0001FC0E 2C9B                       		move.l	(a3)+,(a6)
0001FC10 2C9B                       		move.l	(a3)+,(a6)
0001FC12 2C9B                       		move.l	(a3)+,(a6)
0001FC14 2C9B                       		move.l	(a3)+,(a6)
0001FC16 2C9B                       		move.l	(a3)+,(a6)
0001FC18 2C9B                       		move.l	(a3)+,(a6)
0001FC1A 2C9B                       		move.l	(a3)+,(a6)
0001FC1C 2C9B                       		move.l	(a3)+,(a6)
0001FC1E 2C9B                       		move.l	(a3)+,(a6)
0001FC20 2C9B                       		move.l	(a3)+,(a6)
0001FC22 2C9B                       		move.l	(a3)+,(a6)
0001FC24 2C9B                       		move.l	(a3)+,(a6)
0001FC26 2C9B                       		move.l	(a3)+,(a6)
0001FC28 2C9B                       		move.l	(a3)+,(a6)
0001FC2A 2C9B                       		move.l	(a3)+,(a6)
0001FC2C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FC30                            
0001FC30 4E75                       		rts	
0001FC32                            ; End of function ContScrCounter
0001FC32                            
0001FC32                            ; ===========================================================================
0001FC32                            
0001FC32                            		include	"_inc\HUD (part 2).asm"
0001FC32                            ; ---------------------------------------------------------------------------
0001FC32                            ; HUD counter sizes
0001FC32                            ; ---------------------------------------------------------------------------
0001FC32 0001 86A0                  Hud_100000:	dc.l 100000
0001FC36 0000 2710                  Hud_10000:	dc.l 10000
0001FC3A 0000 03E8                  Hud_1000:	dc.l 1000
0001FC3E 0000 0064                  Hud_100:	dc.l 100
0001FC42 0000 000A                  Hud_10:		dc.l 10
0001FC46 0000 0001                  Hud_1:		dc.l 1
0001FC4A                            
0001FC4A                            ; ---------------------------------------------------------------------------
0001FC4A                            ; Subroutine to	load time numbers patterns
0001FC4A                            ; ---------------------------------------------------------------------------
0001FC4A                            
0001FC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC4A                            
0001FC4A                            
0001FC4A                            Hud_Mins:
0001FC4A 45F9 0001 FC46             		lea	(Hud_1).l,a2
0001FC50 7C00                       		moveq	#0,d6
0001FC52 6000                       		bra.s	loc_1C9BA
0001FC54                            ; End of function Hud_Mins
0001FC54                            
0001FC54                            
0001FC54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC54                            
0001FC54                            
0001FC54                            Hud_Secs:
0001FC54 45F9 0001 FC42             		lea	(Hud_10).l,a2
0001FC5A 7C01                       		moveq	#1,d6
0001FC5C                            
0001FC5C                            loc_1C9BA:
0001FC5C 7800                       		moveq	#0,d4
0001FC5E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC62                            
0001FC62                            Hud_TimeLoop:
0001FC62 7400                       		moveq	#0,d2
0001FC64 261A                       		move.l	(a2)+,d3
0001FC66                            
0001FC66                            loc_1C9C4:
0001FC66 9283                       		sub.l	d3,d1
0001FC68 6500                       		bcs.s	loc_1C9CC
0001FC6A 5242                       		addq.w	#1,d2
0001FC6C 60F8                       		bra.s	loc_1C9C4
0001FC6E                            ; ===========================================================================
0001FC6E                            
0001FC6E                            loc_1C9CC:
0001FC6E D283                       		add.l	d3,d1
0001FC70 4A42                       		tst.w	d2
0001FC72 6700                       		beq.s	loc_1C9D6
0001FC74 383C 0001                  		move.w	#1,d4
0001FC78                            
0001FC78                            loc_1C9D6:
0001FC78 ED4A                       		lsl.w	#6,d2
0001FC7A 2D40 0004                  		move.l	d0,4(a6)
0001FC7E 47F1 2000                  		lea	(a1,d2.w),a3
0001FC82 2C9B                       		move.l	(a3)+,(a6)
0001FC84 2C9B                       		move.l	(a3)+,(a6)
0001FC86 2C9B                       		move.l	(a3)+,(a6)
0001FC88 2C9B                       		move.l	(a3)+,(a6)
0001FC8A 2C9B                       		move.l	(a3)+,(a6)
0001FC8C 2C9B                       		move.l	(a3)+,(a6)
0001FC8E 2C9B                       		move.l	(a3)+,(a6)
0001FC90 2C9B                       		move.l	(a3)+,(a6)
0001FC92 2C9B                       		move.l	(a3)+,(a6)
0001FC94 2C9B                       		move.l	(a3)+,(a6)
0001FC96 2C9B                       		move.l	(a3)+,(a6)
0001FC98 2C9B                       		move.l	(a3)+,(a6)
0001FC9A 2C9B                       		move.l	(a3)+,(a6)
0001FC9C 2C9B                       		move.l	(a3)+,(a6)
0001FC9E 2C9B                       		move.l	(a3)+,(a6)
0001FCA0 2C9B                       		move.l	(a3)+,(a6)
0001FCA2 0680 0040 0000             		addi.l	#$400000,d0
0001FCA8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FCAC                            
0001FCAC 4E75                       		rts	
0001FCAE                            ; End of function Hud_Secs
0001FCAE                            
0001FCAE                            ; ---------------------------------------------------------------------------
0001FCAE                            ; Subroutine to	load time/ring bonus numbers patterns
0001FCAE                            ; ---------------------------------------------------------------------------
0001FCAE                            
0001FCAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCAE                            
0001FCAE                            
0001FCAE                            Hud_TimeRingBonus:
0001FCAE 45F9 0001 FC3A             		lea	(Hud_1000).l,a2
0001FCB4 7C03                       		moveq	#3,d6
0001FCB6 7800                       		moveq	#0,d4
0001FCB8 43FA 0000                  		lea	Art_Hud(pc),a1
0001FCBC                            
0001FCBC                            Hud_BonusLoop:
0001FCBC 7400                       		moveq	#0,d2
0001FCBE 261A                       		move.l	(a2)+,d3
0001FCC0                            
0001FCC0                            loc_1CA1E:
0001FCC0 9283                       		sub.l	d3,d1
0001FCC2 6500                       		bcs.s	loc_1CA26
0001FCC4 5242                       		addq.w	#1,d2
0001FCC6 60F8                       		bra.s	loc_1CA1E
0001FCC8                            ; ===========================================================================
0001FCC8                            
0001FCC8                            loc_1CA26:
0001FCC8 D283                       		add.l	d3,d1
0001FCCA 4A42                       		tst.w	d2
0001FCCC 6700                       		beq.s	loc_1CA30
0001FCCE 383C 0001                  		move.w	#1,d4
0001FCD2                            
0001FCD2                            loc_1CA30:
0001FCD2 4A44                       		tst.w	d4
0001FCD4 6700                       		beq.s	Hud_ClrBonus
0001FCD6 ED4A                       		lsl.w	#6,d2
0001FCD8 47F1 2000                  		lea	(a1,d2.w),a3
0001FCDC 2C9B                       		move.l	(a3)+,(a6)
0001FCDE 2C9B                       		move.l	(a3)+,(a6)
0001FCE0 2C9B                       		move.l	(a3)+,(a6)
0001FCE2 2C9B                       		move.l	(a3)+,(a6)
0001FCE4 2C9B                       		move.l	(a3)+,(a6)
0001FCE6 2C9B                       		move.l	(a3)+,(a6)
0001FCE8 2C9B                       		move.l	(a3)+,(a6)
0001FCEA 2C9B                       		move.l	(a3)+,(a6)
0001FCEC 2C9B                       		move.l	(a3)+,(a6)
0001FCEE 2C9B                       		move.l	(a3)+,(a6)
0001FCF0 2C9B                       		move.l	(a3)+,(a6)
0001FCF2 2C9B                       		move.l	(a3)+,(a6)
0001FCF4 2C9B                       		move.l	(a3)+,(a6)
0001FCF6 2C9B                       		move.l	(a3)+,(a6)
0001FCF8 2C9B                       		move.l	(a3)+,(a6)
0001FCFA 2C9B                       		move.l	(a3)+,(a6)
0001FCFC                            
0001FCFC                            loc_1CA5A:
0001FCFC 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FD00                            
0001FD00 4E75                       		rts	
0001FD02                            ; ===========================================================================
0001FD02                            
0001FD02                            Hud_ClrBonus:
0001FD02 7A0F                       		moveq	#$F,d5
0001FD04                            
0001FD04                            Hud_ClrBonusLoop:
0001FD04 2CBC 0000 0000             		move.l	#0,(a6)
0001FD0A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FD0E                            
0001FD0E 60EC                       		bra.s	loc_1CA5A
0001FD10                            ; End of function Hud_TimeRingBonus
0001FD10                            
0001FD10                            ; ---------------------------------------------------------------------------
0001FD10                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FD10                            ; ---------------------------------------------------------------------------
0001FD10                            
0001FD10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD10                            
0001FD10                            
0001FD10                            Hud_Lives:
0001FD10 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FD16 7200                       		moveq	#0,d1
0001FD18 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FD1C 45F9 0001 FC42             		lea	(Hud_10).l,a2
0001FD22 7C01                       		moveq	#1,d6
0001FD24 7800                       		moveq	#0,d4
0001FD26 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FD2A                            
0001FD2A                            Hud_LivesLoop:
0001FD2A 2D40 0004                  		move.l	d0,4(a6)
0001FD2E 7400                       		moveq	#0,d2
0001FD30 261A                       		move.l	(a2)+,d3
0001FD32                            
0001FD32                            loc_1CA90:
0001FD32 9283                       		sub.l	d3,d1
0001FD34 6500                       		bcs.s	loc_1CA98
0001FD36 5242                       		addq.w	#1,d2
0001FD38 60F8                       		bra.s	loc_1CA90
0001FD3A                            ; ===========================================================================
0001FD3A                            
0001FD3A                            loc_1CA98:
0001FD3A D283                       		add.l	d3,d1
0001FD3C 4A42                       		tst.w	d2
0001FD3E 6700                       		beq.s	loc_1CAA2
0001FD40 383C 0001                  		move.w	#1,d4
0001FD44                            
0001FD44                            loc_1CAA2:
0001FD44 4A44                       		tst.w	d4
0001FD46 6700                       		beq.s	Hud_ClrLives
0001FD48                            
0001FD48                            loc_1CAA6:
0001FD48 EB4A                       		lsl.w	#5,d2
0001FD4A 47F1 2000                  		lea	(a1,d2.w),a3
0001FD4E 2C9B                       		move.l	(a3)+,(a6)
0001FD50 2C9B                       		move.l	(a3)+,(a6)
0001FD52 2C9B                       		move.l	(a3)+,(a6)
0001FD54 2C9B                       		move.l	(a3)+,(a6)
0001FD56 2C9B                       		move.l	(a3)+,(a6)
0001FD58 2C9B                       		move.l	(a3)+,(a6)
0001FD5A 2C9B                       		move.l	(a3)+,(a6)
0001FD5C 2C9B                       		move.l	(a3)+,(a6)
0001FD5E                            
0001FD5E                            loc_1CABC:
0001FD5E 0680 0040 0000             		addi.l	#$400000,d0
0001FD64 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FD68                            
0001FD68 4E75                       		rts	
0001FD6A                            ; ===========================================================================
0001FD6A                            
0001FD6A                            Hud_ClrLives:
0001FD6A 4A46                       		tst.w	d6
0001FD6C 67DA                       		beq.s	loc_1CAA6
0001FD6E 7A07                       		moveq	#7,d5
0001FD70                            
0001FD70                            Hud_ClrLivesLoop:
0001FD70 2CBC 0000 0000             		move.l	#0,(a6)
0001FD76 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FD7A 60E2                       		bra.s	loc_1CABC
0001FD7C                            ; End of function Hud_Lives
0001FD7C                            ; End of function Hud_Lives
0001FD7C                            
0001FD7C                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0002007C                            		even
0002007C                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
000201BC                            		even
000201BC                            
000201BC                            		include	"_incObj\DebugMode.asm"
000201BC                            ; ---------------------------------------------------------------------------
000201BC                            ; When debug mode is currently in use
000201BC                            ; ---------------------------------------------------------------------------
000201BC                            
000201BC                            DebugMode:
000201BC 7000                       		moveq	#0,d0
000201BE 1038 FE08                  		move.b	(v_debuguse).w,d0
000201C2 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000201C6 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000201CA                            ; ===========================================================================
000201CA 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000201CC 0000                       		dc.w Debug_Action-Debug_Index
000201CE                            ; ===========================================================================
000201CE                            
000201CE                            Debug_Main:	; Routine 0
000201CE 5438 FE08                  		addq.b	#2,(v_debuguse).w
000201D2 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
000201D8 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
000201DE 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000201E4 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000201EA 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000201F0 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000201F6 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000201FC 117C 0000 001A             		move.b	#0,obFrame(a0)
00020202 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020208 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0002020E 6600                       		bne.s	@islevel	; if not, branch
00020210                            
00020210 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020216 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0002021C 7006                       		moveq	#6,d0		; use 6th debug	item list
0002021E 6000                       		bra.s	@selectlist
00020220                            ; ===========================================================================
00020220                            
00020220                            @islevel:
00020220 7000                       		moveq	#0,d0
00020222 1038 FE10                  		move.b	(v_zone).w,d0
00020226                            
00020226                            @selectlist:
00020226 45F9 0000 0000             		lea	(DebugList).l,a2
0002022C D040                       		add.w	d0,d0
0002022E D4F2 0000                  		adda.w	(a2,d0.w),a2
00020232 3C1A                       		move.w	(a2)+,d6
00020234 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020238 6200                       		bhi.s	@noreset	; if not, branch
0002023A 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00020240                            
00020240                            	@noreset:
00020240 6100 0000                  		bsr.w	Debug_ShowItem
00020244 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002024A 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00020250                            
00020250                            Debug_Action:	; Routine 2
00020250 7006                       		moveq	#6,d0
00020252 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020258 6700                       		beq.s	@isntlevel
0002025A                            
0002025A 7000                       		moveq	#0,d0
0002025C 1038 FE10                  		move.b	(v_zone).w,d0
00020260                            
00020260                            	@isntlevel:
00020260 45F9 0000 0000             		lea	(DebugList).l,a2
00020266 D040                       		add.w	d0,d0
00020268 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002026C 3C1A                       		move.w	(a2)+,d6
0002026E 6100 0000                  		bsr.w	Debug_Control
00020272 4EF9 0000 F760             		jmp	(DisplaySprite).l
00020278                            
00020278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020278                            
00020278                            
00020278                            Debug_Control:
00020278 7800                       		moveq	#0,d4
0002027A 323C 0001                  		move.w	#1,d1
0002027E 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020282 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020286 6600                       		bne.s	@dirpressed	; if yes, branch
00020288                            
00020288 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002028C 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020290 6600                       		bne.s	@dirheld	; if yes, branch
00020292                            
00020292 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020298 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002029E 6000 0000                  		bra.w	Debug_ChgItem
000202A2                            ; ===========================================================================
000202A2                            
000202A2                            @dirheld:
000202A2 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000202A6 6600                       		bne.s	loc_1D01C
000202A8 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000202AE 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000202B2 6600                       		bne.s	@dirpressed
000202B4 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000202BA                            
000202BA                            @dirpressed:
000202BA 1838 F604                  		move.b	(v_jpadhold1).w,d4
000202BE                            
000202BE                            loc_1D01C:
000202BE 7200                       		moveq	#0,d1
000202C0 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000202C4 5241                       		addq.w	#1,d1
000202C6 4841                       		swap	d1
000202C8 E881                       		asr.l	#4,d1
000202CA 2428 000C                  		move.l	obY(a0),d2
000202CE 2628 0008                  		move.l	obX(a0),d3
000202D2 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000202D6 6700                       		beq.s	loc_1D03C	; if not, branch
000202D8 9481                       		sub.l	d1,d2
000202DA 6400                       		bcc.s	loc_1D03C
000202DC 7400                       		moveq	#0,d2
000202DE                            
000202DE                            loc_1D03C:
000202DE 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000202E2 6700                       		beq.s	loc_1D052	; if not, branch
000202E4 D481                       		add.l	d1,d2
000202E6 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000202EC 6500                       		bcs.s	loc_1D052
000202EE 243C 07FF 0000             		move.l	#$7FF0000,d2
000202F4                            
000202F4                            loc_1D052:
000202F4 0804 0002                  		btst	#bitL,d4
000202F8 6700                       		beq.s	loc_1D05E
000202FA 9681                       		sub.l	d1,d3
000202FC 6400                       		bcc.s	loc_1D05E
000202FE 7600                       		moveq	#0,d3
00020300                            
00020300                            loc_1D05E:
00020300 0804 0003                  		btst	#bitR,d4
00020304 6700                       		beq.s	loc_1D066
00020306 D681                       		add.l	d1,d3
00020308                            
00020308                            loc_1D066:
00020308 2142 000C                  		move.l	d2,obY(a0)
0002030C 2143 0008                  		move.l	d3,obX(a0)
00020310                            
00020310                            Debug_ChgItem:
00020310 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020316 6700                       		beq.s	@createitem	; if not, branch
00020318 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002031E 6700                       		beq.s	@nextitem	; if not, branch
00020320 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00020324 6400                       		bcc.s	@display
00020326 DD38 FE06                  		add.b	d6,(v_debugitem).w
0002032A 6000                       		bra.s	@display
0002032C                            ; ===========================================================================
0002032C                            
0002032C                            @nextitem:
0002032C 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00020332 6700                       		beq.s	@createitem	; if not, branch
00020334 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020338 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0002033C 6200                       		bhi.s	@display
0002033E 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00020344                            
00020344                            	@display:
00020344 6000 0000                  		bra.w	Debug_ShowItem
00020348                            ; ===========================================================================
00020348                            
00020348                            @createitem:
00020348 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002034E 6700                       		beq.s	@backtonormal	; if not, branch
00020350 4EB9 0000 FBEC             		jsr	(FindFreeObj).l
00020356 6600                       		bne.s	@backtonormal
00020358 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002035E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020364 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020368 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002036E 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020374 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0002037A 7000                       		moveq	#0,d0
0002037C 1038 FE06                  		move.b	(v_debugitem).w,d0
00020380 E748                       		lsl.w	#3,d0
00020382 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020388 4E75                       		rts	
0002038A                            ; ===========================================================================
0002038A                            
0002038A                            @backtonormal:
0002038A 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020390 6700                       		beq.s	@stayindebug	; if not, branch
00020392 7000                       		moveq	#0,d0
00020394 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020398 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000203A0 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000203A6 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000203AA 3140 000A                  		move.w	d0,obX+2(a0)
000203AE 3140 000E                  		move.w	d0,obY+2(a0)
000203B2 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000203B8 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000203BE 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000203C4 6600                       		bne.s	@stayindebug	; if not, branch
000203C6                            
000203C6 4278 F780                  		clr.w	(v_ssangle).w
000203CA 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000203D0 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000203D8 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000203DE 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000203E4 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000203EA 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000203F0                            
000203F0                            	@stayindebug:
000203F0 4E75                       		rts	
000203F2                            ; End of function Debug_Control
000203F2                            
000203F2                            
000203F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000203F2                            
000203F2                            
000203F2                            Debug_ShowItem:
000203F2 7000                       		moveq	#0,d0
000203F4 1038 FE06                  		move.b	(v_debugitem).w,d0
000203F8 E748                       		lsl.w	#3,d0
000203FA 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00020400 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020406 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0002040C 4E75                       		rts	
0002040E                            ; End of function Debug_ShowItem
0002040E                            ; End of function Debug_ShowItem
0002040E                            		include	"_inc\DebugList.asm"
0002040E                            ; ---------------------------------------------------------------------------
0002040E                            ; Debug	mode item lists
0002040E                            ; ---------------------------------------------------------------------------
0002040E                            DebugList:
0002040E 0000                       	dc.w @GHZ-DebugList
00020410 0000                       	dc.w @LZ-DebugList
00020412 0000                       	dc.w @MZ-DebugList
00020414 0000                       	dc.w @SLZ-DebugList
00020416 0000                       	dc.w @SYZ-DebugList
00020418 0000                       	dc.w @SBZ-DebugList
0002041A 0000                       	dc.w @Ending-DebugList
0002041C                            
0002041C                            dbug:	macro map,object,subtype,frame,vram
0002041C                            	dc.l map+(object<<24)
0002041C                            	dc.b subtype,frame
0002041C                            	dc.w vram
0002041C                            	endm
0002041C                            
0002041C                            @GHZ:
0002041C 0000                       	dc.w (@GHZend-@GHZ-2)/8
0002041E                            
0002041E                            ;		mappings	object		subtype	frame	VRAM setting
0002041E 2500 BEF6 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020426 2600 C67E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002042E 1F00 B2D6 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020436 2200 B760 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002043E 2B00 CCFA 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020446 3600 F13E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002044E 1800 9CCE 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020456 3B00 F264 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002045E 4001 17C4 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020466 4100 FE7A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002046E 4201 00A0 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020476 4401 03AE 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002047E 7901 9F84 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020486 4B00 BF46 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002048E 7D01 A146 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020496                            	@GHZend:
00020496                            
00020496                            @LZ:
00020496 0000                       	dc.w (@LZend-@LZ-2)/8
00020498                            
00020498                            ;		mappings	object		subtype	frame	VRAM setting
00020498 2500 BEF6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000204A0 2600 C67E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000204A8 4100 FE7A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000204B0 2C00 CDA0 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000204B8 2D00 CF8C 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000204C0 1601 4178 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000204C8 1601 4178 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000204D0 3300 E40A 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000204D8 3200 DFCA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000204E0 3600 F13E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000204E8 5201 224E 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000204F0 6101 43A0 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000204F8 6101 43A0 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
00020500 6101 43A0 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00020508 6201 44F4 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00020510 6101 43A0 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00020518 6101 43A0 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00020520 6301 4856 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020528 6001 40C2 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
00020530 6401 4BA4 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020538 6501 4D2C 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00020540 6501 4D2C 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020548 0B01 350E 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00020550 0C01 35DE 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020558 7901 9F84 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020560                            	@LZend:
00020560                            
00020560                            @MZ:
00020560 0000                       	dc.w (@MZend-@MZ-2)/8
00020562                            
00020562                            ;		mappings	object		subtype	frame	VRAM setting
00020562 2500 BEF6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002056A 2600 C67E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020572 2200 B760 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002057A 3600 F13E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020582 4100 FE7A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002058A 1300 D49A 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020592 4601 0A5E 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0002059A 6E01 9020 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000205A2 6A01 89D8 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000205AA 3300 E40A 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000205B2 1E00 A9EE 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000205BA 5101 1F82 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000205C2 5201 21F8 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000205CA 5300 A2D2 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000205D2 5401 132A 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000205DA 5501 23EC 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000205E2 7801 9BF0 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000205EA 7901 9F84 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000205F2                            	@MZend:
000205F2                            
000205F2                            @SLZ:
000205F2 0000                       	dc.w (@SLZend-@SLZ-2)/8
000205F4                            
000205F4                            ;		mappings	object		subtype	frame	VRAM setting
000205F4 2500 BEF6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000205FC 2600 C67E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020604 5901 2F36 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0002060C 5300 A2D2 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00020614 1800 9D2C 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0002061C 5A01 3070 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00020624 5B01 3228 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0002062C 5D01 37FC 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020634 5E01 3B8E 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0002063C 4100 FE7A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020644 1300 D49A 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0002064C 1C00 A3F0 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020654 5F01 3E0C 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002065C 6001 40C2 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020664 7901 9F84 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002066C                            	@SLZend:
0002066C                            
0002066C                            @SYZ:
0002066C 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002066E                            
0002066E                            ;		mappings	object		subtype	frame	VRAM setting
0002066E 2500 BEF6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020676 2600 C67E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002067E 3600 F13E 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020686 4100 FE7A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002068E 4301 0300 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020696 1201 0ADC 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0002069E 4701 0C80 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000206A6 1F00 B2D6 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206AE 2200 B760 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206B6 5001 1A54 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000206BE 1800 9D1A 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000206C6 5601 28F6 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000206CE 3200 DFCA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000206D6 7801 9BF0 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000206DE 7901 9F84 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000206E6                            	@SYZend:
000206E6                            
000206E6                            @SBZ:
000206E6 0000                       	dc.w (@SBZend-@SBZ-2)/8
000206E8                            
000206E8                            ;		mappings	object		subtype	frame	VRAM setting
000206E8 2500 BEF6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000206F0 2600 C67E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206F8 5F01 3E0C 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020700 6001 40C2 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020708 7801 9BF0 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020710 1501 2C92 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020718 6701 84C6 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020720 5201 21F8 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020728 3200 DFCA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020730 6901 8720 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020738 6901 877A 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020740 6A01 89D8 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020748 5300 A2D2 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020750 5201 21F8 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020758 6B01 8DA8 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020760 2A00 A580 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020768 6B01 8DA8 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020770 6A01 89D8 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020778 6B01 8DA8 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020780 6A01 89D8 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020788 6B01 8DA8 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020790 6C01 8F6A 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020798 6D01 0750 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000207A0 6D01 0750 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000207A8 6E01 9020 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000207B0 7001 9466 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000207B8 7101 36A2 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000207C0 1E00 A9EE 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000207C8 7901 9F84 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207D0                            	@SBZend:
000207D0                            
000207D0                            @Ending:
000207D0 0000                       	dc.w (@Endingend-@Ending-2)/8
000207D2                            
000207D2                            ;		mappings	object		subtype	frame	VRAM setting
000207D2 2500 BEF6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207DA 2500 BEF6 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000207E2                            	@Endingend:
000207E2                            
000207E2                            	even
000207E2                            	even
000207E2                            		include	"_inc\LevelHeaders.asm"
000207E2                            ; ---------------------------------------------------------------------------
000207E2                            ; Level Headers
000207E2                            ; ---------------------------------------------------------------------------
000207E2                            
000207E2                            LevelHeaders:
000207E2                            
000207E2                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000207E2                            	dc.l (plc1<<24)+lvlgfx
000207E2                            	dc.l (plc2<<24)+sixteen
000207E2                            	dc.l twofivesix
000207E2                            	dc.b 0, music, pal, pal
000207E2                            	endm
000207E2                            
000207E2                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000207E2                            ; music (unused), palette (unused), palette
000207E2                            
000207E2                            ;		1st PLC				2nd PLC				256x256 data			palette
000207E2                            ;				level gfx*			16x16 data			music*
000207E2                            
000207E2 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000207F2 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020802 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020812 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020822 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020832 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020842 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020852                            	even
00020852                            
00020852                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020852                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020852                            		include	"_inc\Pattern Load Cues.asm"
00020852                            ; ---------------------------------------------------------------------------
00020852                            ; Pattern load cues
00020852                            ; ---------------------------------------------------------------------------
00020852                            ArtLoadCues:
00020852                            
00020852 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020854 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020856 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020858 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
0002085A                            PLC_Levels:
0002085A 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002085C 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0002085E 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020860 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020862 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020864 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020866 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020868 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
0002086A 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002086C 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0002086E 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020870 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020872 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020874 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020876 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020878 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
0002087A 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0002087C                            PLC_Animals:
0002087C 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
0002087E 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020880 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020882 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020884 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020886 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020888 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
0002088A 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0002088C 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
0002088E 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020890 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020892 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020894                            
00020894                            plcm:	macro gfx,vram
00020894                            	dc.l gfx
00020894                            	dc.w vram
00020894                            	endm
00020894                            
00020894                            ; ---------------------------------------------------------------------------
00020894                            ; Pattern load cues - standard block 1
00020894                            ; ---------------------------------------------------------------------------
00020894 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020896 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
0002089C 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000208A2 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
000208A8 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
000208AE 0000 0000 F640             		plcm	Nem_Points, $F640 	; points from enemy
000208B4                            	PLC_Mainend:
000208B4                            ; ---------------------------------------------------------------------------
000208B4                            ; Pattern load cues - standard block 2
000208B4                            ; ---------------------------------------------------------------------------
000208B4 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000208B6 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000208BC                            	PLC_Main2end:
000208BC                            ; ---------------------------------------------------------------------------
000208BC                            ; Pattern load cues - explosion
000208BC                            ; ---------------------------------------------------------------------------
000208BC 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000208BE 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000208C4                            	PLC_Explodeend:
000208C4                            ; ---------------------------------------------------------------------------
000208C4                            ; Pattern load cues - game/time	over
000208C4                            ; ---------------------------------------------------------------------------
000208C4 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000208C6 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000208CC                            	PLC_GameOverend:
000208CC                            ; ---------------------------------------------------------------------------
000208CC                            ; Pattern load cues - Green Hill
000208CC                            ; ---------------------------------------------------------------------------
000208CC 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000208CE 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000208D4 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000208DA 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000208E0 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000208E6 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000208EC 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000208F2 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000208F8 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000208FE 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020904 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002090A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020910 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020916                            
00020916 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020918 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0002091E 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020924 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
0002092A 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020930 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020936 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
0002093C                            	PLC_GHZ2end:
0002093C                            ; ---------------------------------------------------------------------------
0002093C                            ; Pattern load cues - Labyrinth
0002093C                            ; ---------------------------------------------------------------------------
0002093C 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
0002093E 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020944                            		;plcm	Nem_LzBlock1, $3C00	; block
00020944                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020944                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020944 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
0002094A 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020950 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020956 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
0002095C 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020962 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020968 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
0002096E 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020974                            
00020974 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020976 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
0002097C 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020982 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020988 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
0002098E 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020994 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
0002099A 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
000209A0 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000209A6 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
000209AC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000209B2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000209B8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000209BE                            	PLC_LZ2end:
000209BE                            ; ---------------------------------------------------------------------------
000209BE                            ; Pattern load cues - Marble
000209BE                            ; ---------------------------------------------------------------------------
000209BE 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
000209C0 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
000209C6 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000209CC 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000209D2 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
000209D8 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000209DE 0000 0000 8000             		plcm	Nem_Bomb, $8000
000209E4 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
000209EA 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000209F0 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
000209F6 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
000209FC                            
000209FC 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
000209FE 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020A04 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020A0A                            		;plcm	Nem_MzSwitch, $A260	; switch
00020A0A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A10 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A16 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A1C 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020A22 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020A28                            	PLC_MZ2end:
00020A28                            ; ---------------------------------------------------------------------------
00020A28                            ; Pattern load cues - Star Light
00020A28                            ; ---------------------------------------------------------------------------
00020A28 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020A2A 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020A30 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020A36 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020A3C 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020A42 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020A48 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020A4E 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020A54 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A5A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A60 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A66                            
00020A66 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020A68 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020A6E 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020A74 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020A7A 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020A80 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020A86 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020A8C                            	PLC_SLZ2end:
00020A8C                            ; ---------------------------------------------------------------------------
00020A8C                            ; Pattern load cues - Spring Yard
00020A8C                            ; ---------------------------------------------------------------------------
00020A8C 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020A8E 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020A94                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020A94                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020A94 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020A9A 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020AA0 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020AA6 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020AAC 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020AB2 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020AB8                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020AB8                            
00020AB8 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020ABA                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020ABA 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020AC0 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020AC6 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020ACC                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020ACC 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020AD2                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020AD2 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020AD8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020ADE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020AE4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020AEA                            	PLC_SYZ2end:
00020AEA                            ; ---------------------------------------------------------------------------
00020AEA                            ; Pattern load cues - Scrap Brain
00020AEA                            ; ---------------------------------------------------------------------------
00020AEA 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020AEC 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020AF2 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020AF8                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020AF8                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020AF8                            		;plcm	Nem_Girder, $5E00	; girder
00020AF8 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020AFE 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020B04                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020B04 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020B0A 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020B10 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020B16 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020B1C                            
00020B1C 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020B1E                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020B1E 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020B24 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020B2A                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020B2A 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020B30 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020B36 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020B3C 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020B42 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B48 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B4E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B54 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B5A                            	PLC_SBZ2end:
00020B5A                            ; ---------------------------------------------------------------------------
00020B5A                            ; Pattern load cues - title card
00020B5A                            ; ---------------------------------------------------------------------------
00020B5A 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020B5C 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020B62                            	PLC_TitleCardend:
00020B62                            ; ---------------------------------------------------------------------------
00020B62                            ; Pattern load cues - act 3 boss
00020B62                            ; ---------------------------------------------------------------------------
00020B62 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020B64 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020B6A 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020B70 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020B76 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020B7C 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020B82 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020B88                            	PLC_Bossend:
00020B88                            ; ---------------------------------------------------------------------------
00020B88                            ; Pattern load cues - act 1/2 signpost
00020B88                            ; ---------------------------------------------------------------------------
00020B88 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020B8A 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020B90 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020B96 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020B9C                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020B9C                            	PLC_Signpostend:
00020B9C                            ; ---------------------------------------------------------------------------
00020B9C                            ; Pattern load cues - beta special stage warp effect
00020B9C                            ; ---------------------------------------------------------------------------
00020B9C                            PLC_Warp:
00020B9C                            	PLC_Warpend:
00020B9C                            ; ---------------------------------------------------------------------------
00020B9C                            ; Pattern load cues - special stage
00020B9C                            ; ---------------------------------------------------------------------------
00020B9C 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020B9E 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020BA4 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020BAA 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020BB0 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020BB6 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020BBC 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020BC2 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020BC8 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020BCE 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020BD4 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020BDA 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020BE0 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020BE6 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020BEC 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020BF2                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020BF2                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020BF2                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020BF2                            	PLC_SpeStageend:
00020BF2                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020BF2                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020BF2                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020BF2                            ; ---------------------------------------------------------------------------
00020BF2                            ; Pattern load cues - GHZ animals
00020BF2                            ; ---------------------------------------------------------------------------
00020BF2 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020BF4 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020BFA 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020C00                            	PLC_GHZAnimalsend:
00020C00                            ; ---------------------------------------------------------------------------
00020C00                            ; Pattern load cues - LZ animals
00020C00                            ; ---------------------------------------------------------------------------
00020C00 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020C02 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020C08 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020C0E                            	PLC_LZAnimalsend:
00020C0E                            ; ---------------------------------------------------------------------------
00020C0E                            ; Pattern load cues - MZ animals
00020C0E                            ; ---------------------------------------------------------------------------
00020C0E 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020C10 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020C16 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020C1C                            	PLC_MZAnimalsend:
00020C1C                            ; ---------------------------------------------------------------------------
00020C1C                            ; Pattern load cues - SLZ animals
00020C1C                            ; ---------------------------------------------------------------------------
00020C1C 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020C1E 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020C24 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020C2A                            	PLC_SLZAnimalsend:
00020C2A                            ; ---------------------------------------------------------------------------
00020C2A                            ; Pattern load cues - SYZ animals
00020C2A                            ; ---------------------------------------------------------------------------
00020C2A 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020C2C 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020C32 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020C38                            	PLC_SYZAnimalsend:
00020C38                            ; ---------------------------------------------------------------------------
00020C38                            ; Pattern load cues - SBZ animals
00020C38                            ; ---------------------------------------------------------------------------
00020C38 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020C3A 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020C40 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020C46                            	PLC_SBZAnimalsend:
00020C46                            ; ---------------------------------------------------------------------------
00020C46                            ; Pattern load cues - special stage results screen
00020C46                            ; ---------------------------------------------------------------------------
00020C46 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020C48 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020C4E 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020C54                            	PLC_SpeStResultend:
00020C54                            ; ---------------------------------------------------------------------------
00020C54                            ; Pattern load cues - ending sequence
00020C54                            ; ---------------------------------------------------------------------------
00020C54 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020C56 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020C5C 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020C62 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020C68                            		;plcm	Nem_EndFlower, $7400	; flowers
00020C68 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020C6E 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020C74 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020C7A 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020C80 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020C86 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020C8C 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020C92 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020C98 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020C9E 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020CA4                            	PLC_Endingend:
00020CA4                            ; ---------------------------------------------------------------------------
00020CA4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020CA4                            ; ---------------------------------------------------------------------------
00020CA4 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020CA6 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020CAC 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020CB2 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020CB8                            	PLC_TryAgainend:
00020CB8                            ; ---------------------------------------------------------------------------
00020CB8                            ; Pattern load cues - Eggman on SBZ 2
00020CB8                            ; ---------------------------------------------------------------------------
00020CB8 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020CBA 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020CC0 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020CC6 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020CCC                            	PLC_EggmanSBZ2end:
00020CCC                            ; ---------------------------------------------------------------------------
00020CCC                            ; Pattern load cues - final boss
00020CCC                            ; ---------------------------------------------------------------------------
00020CCC 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020CCE 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020CD4 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020CDA 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020CE0 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020CE6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020CEC                            	PLC_FZBossend:
00020CEC                            ; ---------------------------------------------------------------------------
00020CEC                            ; Pattern load cues - Eggman
00020CEC                            ; ---------------------------------------------------------------------------
00020CEC 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020CEE 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020CF4 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020CFA 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020D00 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D06 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D0C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D12                            	PLC_Eggend:
00020D12                            		even
00020D12                            ; ---------------------------------------------------------------------------
00020D12                            ; Pattern load cue IDs
00020D12                            ; ---------------------------------------------------------------------------
00020D12 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020D12 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020D12 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020D12 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020D12 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020D12 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020D12 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020D12 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020D12 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020D12 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020D12 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020D12 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020D12 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020D12 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020D12 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020D12 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020D12 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020D12 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020D12 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020D12 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020D12 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020D12 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020D12 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020D12 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020D12 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020D12 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020D12 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020D12 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020D12 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020D12 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020D12 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020D12 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020D12 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020D12 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020D12                            
00020E00                            			dcb.b	$300,$FF
00021100                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021570                            			even
00021570                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002166C                            			even
0002166C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002174C                            		even
0002174C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022BB8                            		even
00022BB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024652                            		even
00024652                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024686                            		even
00024686                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024744                            		even
00024744                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024BEC                            		even
00024BEC                            
00024BEC                            Map_Sonic:	include	"_maps\Sonic.asm"
00024BEC                            ; --------------------------------------------------------------------------------
00024BEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024BEC                            ; --------------------------------------------------------------------------------
00024BEC                            
00024BEC                            SME_Lx_Kl:	
00024BEC 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024BF0 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024BF4 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024BF8 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024BFC 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024C00 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024C04 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024C08 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024C0C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024C10 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024C14 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024C18 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024C1C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024C20 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024C24 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024C28 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024C2C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024C30 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024C34 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024C38 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024C3C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024C40 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024C44 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024C48 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024C4C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024C50 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024C54 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024C58 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024C5C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024C60 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024C64 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024C68 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024C6C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024C70 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024C74 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024C78 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024C7C 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024C80 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024C84 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024C88 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024C8C 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024C90 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024C94 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024C98 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024C9C 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024CA0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024CA4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024CA8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024CAC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024CB0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024CB4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024CB8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024CBC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024CC0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024CC4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024CC8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024CCC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024CD0 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024CD4 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024CD8 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024CDC 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024CE0 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024CE4 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024CE8 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024CEC 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024CF0 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024CF4 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024CF8 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024CFC 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024D00 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024D04 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024D08 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024D0C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024D10 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024D14 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024D18 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024D1C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024D20 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024D24 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024D28 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024D2C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024D2E 00                         SME_Lx_Kl_142:	dc.b 0	
00024D2F 04                         SME_Lx_Kl_143:	dc.b 4	
00024D30 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024D35 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024D3A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024D3F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024D44 09                         SME_Lx_Kl_158:	dc.b 9	
00024D45 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024D4A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024D4F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024D54 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024D59 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024D5E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024D63 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024D68 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024D6D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024D72 0A                         SME_Lx_Kl_186:	dc.b $A	
00024D73 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024D78 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024D7D 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024D82 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024D87 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024D8C F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024D91 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024D96 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024D9B F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024DA0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024DA5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024DA6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024DAB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024DB0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024DB5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024DBA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024DBB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024DC0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024DC5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024DCA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024DCB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024DD0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024DD5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024DDA 04                         SME_Lx_Kl_1EE:	dc.b 4	
00024DDB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024DE0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024DE5 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00024DEA 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00024DEF 02                         SME_Lx_Kl_203:	dc.b 2	
00024DF0 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00024DF5 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00024DFA 03                         SME_Lx_Kl_20E:	dc.b 3	
00024DFB FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00024E00 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00024E05 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00024E0A 03                         SME_Lx_Kl_21E:	dc.b 3	
00024E0B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00024E10 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00024E15 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00024E1A 03                         SME_Lx_Kl_22E:	dc.b 3	
00024E1B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00024E20 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00024E25 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00024E2A 04                         SME_Lx_Kl_23E:	dc.b 4	
00024E2B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00024E30 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00024E35 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00024E3A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00024E3F 03                         SME_Lx_Kl_253:	dc.b 3	
00024E40 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00024E45 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00024E4A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024E4F 07                         SME_Lx_Kl_263:	dc.b 7	
00024E50 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00024E55 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00024E5A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00024E5F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00024E64 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00024E69 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00024E6E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00024E73 05                         SME_Lx_Kl_287:	dc.b 5	
00024E74 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00024E79 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00024E7E EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00024E83 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00024E88 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00024E8D 02                         SME_Lx_Kl_2A1:	dc.b 2	
00024E8E FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00024E93 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00024E98 03                         SME_Lx_Kl_2AC:	dc.b 3	
00024E99 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00024E9E EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00024EA3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00024EA8 04                         SME_Lx_Kl_2BC:	dc.b 4	
00024EA9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00024EAE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00024EB3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00024EB8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00024EBD 02                         SME_Lx_Kl_2D1:	dc.b 2	
00024EBE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00024EC3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00024EC8 03                         SME_Lx_Kl_2DC:	dc.b 3	
00024EC9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00024ECE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00024ED3 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00024ED8 05                         SME_Lx_Kl_2EC:	dc.b 5	
00024ED9 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00024EDE 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00024EE3 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00024EE8 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00024EED ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00024EF2 05                         SME_Lx_Kl_306:	dc.b 5	
00024EF3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00024EF8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00024EFD FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00024F02 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00024F07 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00024F0C 06                         SME_Lx_Kl_320:	dc.b 6	
00024F0D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00024F12 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00024F17 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00024F1C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00024F21 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00024F26 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00024F2B 04                         SME_Lx_Kl_33F:	dc.b 4	
00024F2C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00024F31 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00024F36 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00024F3B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00024F40 03                         SME_Lx_Kl_354:	dc.b 3	
00024F41 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00024F46 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00024F4B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00024F50 05                         SME_Lx_Kl_364:	dc.b 5	
00024F51 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00024F56 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00024F5B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00024F60 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00024F65 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00024F6A 04                         SME_Lx_Kl_37E:	dc.b 4	
00024F6B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00024F70 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00024F75 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00024F7A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00024F7F 03                         SME_Lx_Kl_393:	dc.b 3	
00024F80 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00024F85 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00024F8A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00024F8F 05                         SME_Lx_Kl_3A3:	dc.b 5	
00024F90 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00024F95 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00024F9A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00024F9F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00024FA4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00024FA9 04                         SME_Lx_Kl_3BD:	dc.b 4	
00024FAA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00024FAF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
00024FB4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
00024FB9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
00024FBE 02                         SME_Lx_Kl_3D2:	dc.b 2	
00024FBF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00024FC4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
00024FC9 02                         SME_Lx_Kl_3DD:	dc.b 2	
00024FCA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00024FCF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00024FD4 05                         SME_Lx_Kl_3E8:	dc.b 5	
00024FD5 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00024FDA F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00024FDF F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00024FE4 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00024FE9 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00024FEE 04                         SME_Lx_Kl_402:	dc.b 4	
00024FEF F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00024FF4 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00024FF9 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00024FFE 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025003 02                         SME_Lx_Kl_417:	dc.b 2	
00025004 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025009 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002500E 03                         SME_Lx_Kl_422:	dc.b 3	
0002500F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025014 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025019 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002501E 03                         SME_Lx_Kl_432:	dc.b 3	
0002501F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025024 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025029 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002502E 06                         SME_Lx_Kl_442:	dc.b 6	
0002502F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025034 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025039 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002503E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025043 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025048 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002504D 06                         SME_Lx_Kl_461:	dc.b 6	
0002504E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025053 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025058 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002505D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025062 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025067 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002506C 04                         SME_Lx_Kl_480:	dc.b 4	
0002506D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025072 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00025077 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
0002507C 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025081 03                         SME_Lx_Kl_495:	dc.b 3	
00025082 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00025087 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
0002508C 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00025091 05                         SME_Lx_Kl_4A5:	dc.b 5	
00025092 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025097 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
0002509C F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000250A1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000250A6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000250AB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000250AC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000250B1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000250B6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000250BB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000250C0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000250C1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000250C6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000250CB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000250D0 05                         SME_Lx_Kl_4E4:	dc.b 5	
000250D1 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000250D6 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000250DB F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
000250E0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000250E5 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
000250EA 02                         SME_Lx_Kl_4FE:	dc.b 2	
000250EB EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000250F0 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000250F5 02                         SME_Lx_Kl_509:	dc.b 2	
000250F6 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
000250FB EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025100 02                         SME_Lx_Kl_514:	dc.b 2	
00025101 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025106 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002510B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002510C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025111 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025116 02                         SME_Lx_Kl_52A:	dc.b 2	
00025117 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002511C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025121 02                         SME_Lx_Kl_535:	dc.b 2	
00025122 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025127 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002512C 02                         SME_Lx_Kl_540:	dc.b 2	
0002512D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025132 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025137 02                         SME_Lx_Kl_54B:	dc.b 2	
00025138 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002513D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025142 04                         SME_Lx_Kl_556:	dc.b 4	
00025143 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025148 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002514D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025152 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025157 03                         SME_Lx_Kl_56B:	dc.b 3	
00025158 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002515D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025162 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025167 03                         SME_Lx_Kl_57B:	dc.b 3	
00025168 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002516D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025172 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025177 03                         SME_Lx_Kl_58B:	dc.b 3	
00025178 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002517D EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025182 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025187 04                         SME_Lx_Kl_59B:	dc.b 4	
00025188 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002518D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025192 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025197 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002519C 03                         SME_Lx_Kl_5B0:	dc.b 3	
0002519D FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000251A2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000251A7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000251AC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000251AD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000251B2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000251B7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000251BC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000251BD EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000251C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000251C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000251CC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000251CD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251D2 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251D7 02                         SME_Lx_Kl_5EB:	dc.b 2	
000251D8 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251DD F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251E2 02                         SME_Lx_Kl_5F6:	dc.b 2	
000251E3 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251E8 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251ED 02                         SME_Lx_Kl_601:	dc.b 2	
000251EE F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251F3 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251F8 02                         SME_Lx_Kl_60C:	dc.b 2	
000251F9 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251FE F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025203 02                         SME_Lx_Kl_617:	dc.b 2	
00025204 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025209 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002520E 02                         SME_Lx_Kl_622:	dc.b 2	
0002520F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025214 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025219 02                         SME_Lx_Kl_62D:	dc.b 2	
0002521A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002521F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025224 04                         SME_Lx_Kl_638:	dc.b 4	
00025225 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002522A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002522F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025234 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025239 03                         SME_Lx_Kl_64D:	dc.b 3	
0002523A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002523F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025244 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025249 02                         SME_Lx_Kl_65D:	dc.b 2	
0002524A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002524F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025254 03                         SME_Lx_Kl_668:	dc.b 3	
00025255 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002525A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002525F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025264 04                         SME_Lx_Kl_678:	dc.b 4	
00025265 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002526A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002526F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025274 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025279 03                         SME_Lx_Kl_68D:	dc.b 3	
0002527A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002527F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025284 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025289 02                         SME_Lx_Kl_69D:	dc.b 2	
0002528A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002528F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025294 03                         SME_Lx_Kl_6A8:	dc.b 3	
00025295 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002529A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002529F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000252A4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000252A5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000252AA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000252AF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000252B4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000252B5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000252BA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000252BF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000252C4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000252C5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000252CA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000252CF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000252D4 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000252D9 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000252DE 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000252E3 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000252E8 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000252ED F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000252F2 09                         SME_Lx_Kl_706:	dc.b 9	
000252F3 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000252F8 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000252FD 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025302 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025307 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002530C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025311 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025316 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002531B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025320 03                         SME_Lx_Kl_734:	dc.b 3	
00025321 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025326 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002532B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025330 03                         SME_Lx_Kl_744:	dc.b 3	
00025331 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025336 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002533B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025340 03                         SME_Lx_Kl_754:	dc.b 3	
00025341 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025346 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002534B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025350 05                         SME_Lx_Kl_764:	dc.b 5	
00025351 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025356 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002535B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025360 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025365 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002536A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002536B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025370 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025375 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002537A 03                         SME_Lx_Kl_78E:	dc.b 3	
0002537B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025380 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025385 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002538A 05                         SME_Lx_Kl_79E:	dc.b 5	
0002538B 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025390 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
00025395 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
0002539A ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
0002539F ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000253A4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000253A5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000253AA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000253AF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000253B4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000253B9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000253BE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000253BF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000253C4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000253C9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000253CE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000253D3 04                         SME_Lx_Kl_7E7:	dc.b 4	
000253D4 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000253D9 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
000253DE F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
000253E3 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
000253E8 04                         SME_Lx_Kl_7FC:	dc.b 4	
000253E9 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
000253EE F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
000253F3 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
000253F8 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
000253FD 04                         SME_Lx_Kl_811:	dc.b 4	
000253FE E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025403 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025408 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002540D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025412 01                         SME_Lx_Kl_826:	dc.b 1	
00025413 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025418 01                         SME_Lx_Kl_82C:	dc.b 1	
00025419 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002541E 01                         SME_Lx_Kl_832:	dc.b 1	
0002541F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025424 01                         SME_Lx_Kl_838:	dc.b 1	
00025425 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002542A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002542B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025430 01                         SME_Lx_Kl_844:	dc.b 1	
00025431 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025436 01                         SME_Lx_Kl_84A:	dc.b 1	
00025437 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002543C 03                         SME_Lx_Kl_850:	dc.b 3	
0002543D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025442 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025447 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002544C 01                         SME_Lx_Kl_860:	dc.b 1	
0002544D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025452 02                         SME_Lx_Kl_866:	dc.b 2	
00025453 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025458 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002545D 01                         SME_Lx_Kl_871:	dc.b 1	
0002545E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025463 02                         SME_Lx_Kl_877:	dc.b 2	
00025464 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025469 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002546E 01                         SME_Lx_Kl_882:	dc.b 1	
0002546F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025474 04                         SME_Lx_Kl_888:	dc.b 4	
00025475 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002547A FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
0002547F F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025484 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025489 07                         SME_Lx_Kl_89D:	dc.b 7	
0002548A ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002548F FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025494 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025499 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
0002549E F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000254A3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000254A8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000254AD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000254AE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000254B3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000254B8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000254BD F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000254C2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000254C7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000254C8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000254CD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000254D2 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000254D7 02                         SME_Lx_Kl_8EB:	dc.b 2	
000254D8 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
000254DD EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
000254E2 04                         SME_Lx_Kl_8F6:	dc.b 4	
000254E3 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
000254E8 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
000254ED F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
000254F2 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
000254F7 04                         SME_Lx_Kl_90B:	dc.b 4	
000254F8 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
000254FD FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025502 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025507 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002550C 04                         SME_Lx_Kl_920:	dc.b 4	
0002550D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025512 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025517 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002551C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025521 09                         SME_Lx_Kl_935:	dc.b 9	
00025522 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025527 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002552C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025531 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025536 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002553B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025540 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025545 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002554A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002554F 03                         SME_Lx_Kl_963:	dc.b 3	
00025550 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025555 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002555A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002555F 03                         SME_Lx_Kl_973:	dc.b 3	
00025560 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025565 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002556A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002556F 02                         SME_Lx_Kl_983:	dc.b 2	
00025570 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025575 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
0002557A 00                         SME_Lx_Kl_98E:	dc.b 0	
0002557B 08                         SME_Lx_Kl_98F:	dc.b 8	
0002557C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025581 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025586 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
0002558B F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025590 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025595 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
0002559A 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
0002559F 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000255A4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000255A5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000255AA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000255AF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000255B4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000255B9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000255BE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000255C3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000255C8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000255C9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000255CE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
000255D3 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
000255D8 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
000255DD 03                         SME_Lx_Kl_9F1:	dc.b 3	
000255DE F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000255E3 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000255E8 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000255ED 03                         SME_Lx_Kl_A01:	dc.b 3	
000255EE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000255F3 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000255F8 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000255FD 03                         SME_Lx_Kl_A11:	dc.b 3	
000255FE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025603 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025608 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002560D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002560E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025613 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025618 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025619 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002561E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025623 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025628 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025629 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002562E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025633 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025638 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025639 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002563E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025643 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025648 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025649 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002564E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025653 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025658 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025659 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002565E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025663 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025668 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002566D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002566E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025673 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025678 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
0002567D 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025682 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025687 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
0002568C 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025691 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025696 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025697 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
0002569C 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000256A1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000256A6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000256AB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000256AC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000256B1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000256B6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000256BB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000256C0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000256C1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000256C6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000256CB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000256D0 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000256D5 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000256DA 05                         SME_Lx_Kl_AEE:	dc.b 5	
000256DB E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000256E0 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000256E5 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000256EA 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000256EF 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000256F4 02                         SME_Lx_Kl_B08:	dc.b 2	
000256F5 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000256FA 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000256FF 05                         SME_Lx_Kl_B13:	dc.b 5	
00025700 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025705 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002570A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002570F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025714 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025719 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002571A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002571F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025724 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025729 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002572A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002572F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025734 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025739 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002573E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025743 02                         SME_Lx_Kl_B57:	dc.b 2	
00025744 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025749 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002574E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002574F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025754 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025759 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002575E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002575F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025764 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025769 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002576E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002576F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025774 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025779 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002577E 02                         SME_Lx_Kl_B92:	dc.b 2	
0002577F EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025784 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025789 03                         SME_Lx_Kl_B9D:	dc.b 3	
0002578A E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002578F E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025794 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025799 0B                         SME_Lx_Kl_BAD:	dc.b $B	
0002579A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002579F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000257A4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000257A9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000257AE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000257B3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000257B8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000257BD F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000257C2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000257C7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000257CC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000257D1 06                         SME_Lx_Kl_BE5:	dc.b 6	
000257D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000257D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000257DC F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000257E1 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000257E6 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000257EB 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000257F0 03                         SME_Lx_Kl_C04:	dc.b 3	
000257F1 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000257F6 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000257FB 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025800 07                         SME_Lx_Kl_C14:	dc.b 7	
00025801 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025806 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
0002580B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025810 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025815 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
0002581A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
0002581F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025824 02                         SME_Lx_Kl_C38:	dc.b 2	
00025825 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
0002582A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002582F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025830 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025835 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
0002583A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002583F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025844 03                         SME_Lx_Kl_C58:	dc.b 3	
00025845 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002584A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
0002584F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025854 03                         SME_Lx_Kl_C68:	dc.b 3	
00025855 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002585A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
0002585F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025864 04                         SME_Lx_Kl_C78:	dc.b 4	
00025865 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
0002586A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
0002586F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025874 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025879 01                         SME_Lx_Kl_C8D:	dc.b 1	
0002587A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002587F 01                         SME_Lx_Kl_C93:	dc.b 1	
00025880 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025885 01                         SME_Lx_Kl_C99:	dc.b 1	
00025886 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002588B 01                         SME_Lx_Kl_C9F:	dc.b 1	
0002588C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025891 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025892 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025897 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
0002589C                            		even
0002589C                            		even
0002589C                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
0002589C                            ; --------------------------------------------------------------------------------
0002589C                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
0002589C                            
0002589C                            SME_vJmm3:	
0002589C 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
000258A0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
000258A4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
000258A8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
000258AC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
000258B0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
000258B4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
000258B8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
000258BC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
000258C0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
000258C4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
000258C8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
000258CC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
000258D0 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
000258D4 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
000258D8 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
000258DC 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
000258E0 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
000258E4 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
000258E8 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
000258EC 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
000258F0 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
000258F4 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
000258F8 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
000258FC 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025900 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025904 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025908 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
0002590C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025910 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025914 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025918 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
0002591C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025920 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025924 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025928 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
0002592C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025930 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025934 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025938 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
0002593C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025940 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025944 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025948 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
0002594C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025950 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025954 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025958 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
0002595C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025960 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025964 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025968 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
0002596C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025970 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025974 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025978 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
0002597C 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025980 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025984 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025988 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
0002598C 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025990 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025994 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025998 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
0002599C 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
000259A0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
000259A4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
000259A8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
000259AC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
000259B0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
000259B4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
000259B8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
000259BC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
000259C0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
000259C4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
000259C8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
000259CC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
000259D0 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
000259D4 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
000259D8 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
000259DC 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
000259DE 00                         SME_vJmm3_142:	dc.b 0	
000259DF 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000259E8 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
000259FB 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025A10 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025A19 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025A20 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025A27 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025A30 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025A35 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025A3C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025A43 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025A4A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025A53 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025A5A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025A69 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025A74 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025A7B 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025A82 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025A8B 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025A90 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025A97 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025AA2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025AAD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025ABA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025AC3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025ACA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025AD5 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025ADE 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025AE5 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025AF0 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025AF9 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025AFE 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025B03 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025B0E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025B17 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025B1C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025B23 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025B2A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025B37 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025B44 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025B4D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025B54 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025B5F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025B68 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025B6F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025B7A 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025B7F 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025B84 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025B89 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025B8E 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025B93 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025B98 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025B9D 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025BA2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025BAB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025BB2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025BB9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025BC0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025BC9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025BD0 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025BD7 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025BDE 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025BE3 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025BE8 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025BED 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025BF2 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025BF7 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025BFC 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025C01 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025C06 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025C0F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025C16 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025C1B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025C22 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025C2B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025C32 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025C37 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025C3E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025C45 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025C4C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025C5F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025C72 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025C79 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025C80 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025C87 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025C92 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025C99 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025CA0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025CAB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025CB6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025CBF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025CC8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025CD1 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025CDA 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025CDD 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025CE0 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025CE3 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025CE6 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025CE9 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025CEC 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025CEF 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025CF6 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025CF9 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025CFE 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025D01 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025D06 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025D09 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025D12 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025D21 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025D2C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025D33 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025D38 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025D41 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025D4A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025D53 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025D66 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025D6D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025D74 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025D79 00                         SME_vJmm3_4DD:	dc.b 0	
00025D7A 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025D8B 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025D9A 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025DA3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025DAA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025DB1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025DB8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025DBB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025DC2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025DC9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025DD0 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00025DD7 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00025DE0 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00025DF1 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00025DFA 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00025E03 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00025E0E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00025E19 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
00025E1E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00025E29 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00025E30 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00025E3B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00025E40 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00025E47 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00025E4E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00025E55 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
00025E5A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00025E61 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00025E78 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00025E85 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00025E8C 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00025E9B 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
00025EA0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00025EA9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
00025EB0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00025EB7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
00025EC0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
00025EC3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
00025EC6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
00025EC9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
00025ECC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00025ED0 00                         		even
00025ED0 00                         		even
00025ED0                            
00025ED0                            ; ---------------------------------------------------------------------------
00025ED0                            ; Uncompressed graphics	- Sonic
00025ED0                            ; ---------------------------------------------------------------------------
00025ED0                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C4D0                            		even
0003C4D0                            ; ---------------------------------------------------------------------------
0003C4D0                            ; Compressed graphics - various
0003C4D0                            ; ---------------------------------------------------------------------------
0003C4D0                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003C830                            		even
0003C830                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CB90                            		even
0003CB90                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003CEF0                            		even
0003CEF0                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D250                            		even
0003D250                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D6D0                            		even
0003D6D0                            
0003D6D0                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D6D0                            ; ---------------------------------------------------------------------------
0003D6D0                            ; Sprite mappings - walls of the special stage
0003D6D0                            ; ---------------------------------------------------------------------------
0003D6D0                            Map_SSWalls_internal:
0003D6D0 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D6D2 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D6D4 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D6D6 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D6D8 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D6DA 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D6DC 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D6DE 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D6E0 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D6E2 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D6E4 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D6E6 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D6E8 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D6EA 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D6EC 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D6EE 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D6F0 01                         byte_2C584:	dc.b 1
0003D6F1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D6F6 01                         byte_2C58A:	dc.b 1
0003D6F7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D6FC 01                         byte_2C590:	dc.b 1
0003D6FD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D702 01                         byte_2C596:	dc.b 1
0003D703 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D708 01                         byte_2C59C:	dc.b 1
0003D709 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D70E 01                         byte_2C5A2:	dc.b 1
0003D70F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D714 01                         byte_2C5A8:	dc.b 1
0003D715 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D71A 01                         byte_2C5AE:	dc.b 1
0003D71B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D720 01                         byte_2C5B4:	dc.b 1
0003D721 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D726 01                         byte_2C5BA:	dc.b 1
0003D727 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D72C 01                         byte_2C5C0:	dc.b 1
0003D72D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D732 01                         byte_2C5C6:	dc.b 1
0003D733 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D738 01                         byte_2C5CC:	dc.b 1
0003D739 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D73E 01                         byte_2C5D2:	dc.b 1
0003D73F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D744 01                         byte_2C5D8:	dc.b 1
0003D745 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D74A 01                         byte_2C5DE:	dc.b 1
0003D74B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D750                            		even
0003D750                            		even
0003D750                            
0003D750                            ; ---------------------------------------------------------------------------
0003D750                            ; Compressed graphics - special stage
0003D750                            ; ---------------------------------------------------------------------------
0003D750                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E088                            		even
0003E088                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E1BC                            		even
0003E1BC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003EE4C                            		even
0003EE4C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F14C                            		even
0003F14C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F640                            		even
0003F640                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F72E                            		even
0003F72E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003F7FE                            		even
0003F7FE                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003F8F4                            		even
0003F8F4                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003F952                            		even
0003F952                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003F9E4                            		even
0003F9E4                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FAA6                            		even
0003FAA6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FB74                            		even
0003FB74                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003FC40                            		even
0003FC40                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003FD08                            		even
0003FD08                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
0003FDD2                            		even
0003FDD2                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
0003FEA2                            		even
0003FEA2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00040096                            		even
00040096                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000401FE                            		even
000401FE                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000402AE                            		even
000402AE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
00040388                            		even
00040388                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004040C                            		even
0004040C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0004058A                            		even
0004058A                            ; ---------------------------------------------------------------------------
0004058A                            ; Compressed graphics - GHZ stuff
0004058A                            ; ---------------------------------------------------------------------------
0004058A                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000405EC                            		even
000405EC                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040706                            		even
00040706                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040824                            		even
00040824                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
0004086C                            		even
0004086C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040A0A                            		even
00040A0A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040A86                            		even
00040A86                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00040C9A                            		even
00040C9A                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040DC6                            		even
00040DC6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00040F1A                            		even
00040F1A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00040FCA                            		even
00040FCA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004102A                            		even
0004102A                            ; ---------------------------------------------------------------------------
0004102A                            ; Compressed graphics - LZ stuff
0004102A                            ; ---------------------------------------------------------------------------
0004102A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041102                            		even
00041102                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000418F6                            		even
000418F6                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041A88 00                         		even
00041A88                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041BF2                            		even
00041BF2                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042232 00                         		even
00042232                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000422D4 00                         		even
000422D4                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042358                            		even
00042358                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000424B4                            		even
000424B4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004253A                            		even
0004253A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000426A8                            		even
000426A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042B8A                            		even
00042B8A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00042CFA                            		even
00042CFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00042FB2                            		even
00042FB2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000430F8                            		even
000430F8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043222                            		even
00043222                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000433A8 00                         		even
000433A8                            ; ---------------------------------------------------------------------------
000433A8                            ; Compressed graphics - MZ stuff
000433A8                            ; ---------------------------------------------------------------------------
000433A8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043636                            		even
00043636                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000436F4                            		even
000436F4                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000437CC                            		even
000437CC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043820                            		even
00043820                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043B3E 00                         		even
00043B3E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044454                            		even
00044454                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000445EA                            		even
000445EA                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044672                            		even
00044672                            ; ---------------------------------------------------------------------------
00044672                            ; Compressed graphics - SLZ stuff
00044672                            ; ---------------------------------------------------------------------------
00044672                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
000448AE                            		even
000448AE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
000449F4                            		even
000449F4                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00044C38                            		even
00044C38                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044CD4 00                         		even
00044CD4                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044DB6                            		even
00044DB6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00044F98                            		even
00044F98                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000450A4                            		even
000450A4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045148                            		even
00045148                            ; ---------------------------------------------------------------------------
00045148                            ; Compressed graphics - SYZ stuff
00045148                            ; ---------------------------------------------------------------------------
00045148                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000452D8                            		even
000452D8                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004533A                            		even
0004533A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004540A 00                         		even
0004540A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045698                            		even
00045698                            ; ---------------------------------------------------------------------------
00045698                            ; Compressed graphics - SBZ stuff
00045698                            ; ---------------------------------------------------------------------------
00045698                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000456EC                            		even
000456EC                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045988                            		even
00045988                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045B78                            		even
00045B78                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00045D16                            		even
00045D16                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046046                            		even
00046046                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046224                            		even
00046224                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0004627C                            		even
0004627C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004641C                            		even
0004641C                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004651A                            		even
0004651A                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
000466A8                            		even
000466A8                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046742                            		even
00046742                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0004679A                            		even
0004679A                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046896                            		even
00046896                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
000469AC                            		even
000469AC                            ; ---------------------------------------------------------------------------
000469AC                            ; Compressed graphics - enemies
000469AC                            ; ---------------------------------------------------------------------------
000469AC                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00046DF4 00                         		even
00046DF4                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
000472E4 00                         		even
000472E4                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
000475C8 00                         		even
000475C8                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0004793C 00                         		even
0004793C                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047B24                            		even
00047B24                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048252 00                         		even
00048252                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
000484DA 00                         		even
000484DA                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048776 00                         		even
00048776                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00048D4A                            		even
00048D4A                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
00048FDC                            		even
00048FDC                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049626 00                         		even
00049626                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049A62                            		even
00049A62                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
00049D70 00                         		even
00049D70                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
00049FD0                            		even
00049FD0                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A2CE                            		even
0004A2CE                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A4FA 00                         		even
0004A4FA                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A688                            		even
0004A688                            ; ---------------------------------------------------------------------------
0004A688                            ; Compressed graphics - various
0004A688                            ; ---------------------------------------------------------------------------
0004A688                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004ACD6 00                         		even
0004ACD6                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004AE4E 00                         		even
0004AE4E                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004AF72                            		even
0004AF72                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B0C6 00                         		even
0004B0C6                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B5C0 00                         		even
0004B5C0                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004BC34                            		even
0004BC34                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004BCCE 00                         		even
0004BCCE                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004BE60                            		even
0004BE60                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004BF7E 00                         		even
0004BF7E                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C06A                            		even
0004C06A                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C5E2 00                         		even
0004C5E2                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C6CC                            		even
0004C6CC                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004C840                            		even
0004C840                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CBC8 00                         		even
0004CBC8                            ; ---------------------------------------------------------------------------
0004CBC8                            ; Compressed graphics - continue screen
0004CBC8                            ; ---------------------------------------------------------------------------
0004CBC8                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004CE78                            		even
0004CE78                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D0B2                            		even
0004D0B2                            ; ---------------------------------------------------------------------------
0004D0B2                            ; Compressed graphics - animals
0004D0B2                            ; ---------------------------------------------------------------------------
0004D0B2                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D20A                            		even
0004D20A                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D366                            		even
0004D366                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D4E2                            		even
0004D4E2                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D5FE                            		even
0004D5FE                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004D778                            		even
0004D778                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004D8B2                            		even
0004D8B2                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DA0E                            		even
0004DA0E                            ; ---------------------------------------------------------------------------
0004DA0E                            ; Compressed graphics - primary patterns and block mappings
0004DA0E                            ; ---------------------------------------------------------------------------
0004DA0E                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E410                            		even
0004E410                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004FCB8                            		even
0004FCB8                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00051248                            		even
00051248                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053632                            		even
00053632                            Blk16_TS:	incbin	"map16\TS.bin"
000538B6                            		even
000538B6                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
000549F4                            		even
000549F4                            Blk256_TS:	incbin	"map256\TS.bin"
000555A2                            		even
000555A2                            Blk16_LZ:	incbin	"map16\LZ.bin"
0005681E                            		even
0005681E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
00059CF0                            		even
00059CF0                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D1AE                            		even
0005D1AE                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005D9B6                            		even
0005D9B6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000603AE                            		even
000603AE                            		incbin	"map256\MZ (JP1).bin"
0006228C                            		even
0006228C                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
0006290E                            		even
0006290E                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066378                            		even
00066378                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068782                            		even
00068782                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
00069308                            		even
00069308                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006C6F8                            		even
0006C6F8                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DA9A                            		even
0006DA9A                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006E694                            		even
0006E694                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00070ED6                            		even
00070ED6                            		incbin	"map256\SBZ (JP1).bin"
00071A62                            		even
00071A62                            ; ---------------------------------------------------------------------------
00071A62                            ; Compressed graphics - bosses and ending sequence
00071A62                            ; ---------------------------------------------------------------------------
00071A62                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000722DE 00                         		even
000722DE                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000725C8                            		even
000725C8                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00072E4C                            		even
00072E4C                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073678                            		even
00073678                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00073E46 00                         		even
00073E46                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
000743C6                            		even
000743C6                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000744E6                            		even
000744E6                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000746EE 00                         		even
000746EE                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
000758CC                            		even
000758CC                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076210                            		even
00076210                            		even
00076210                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
000767A0                            		even
000767A0                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076A28                            		even
00076A28                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077026                            		even
00077026                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
000772AE                            		even
000772AE                            
000772AE FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
000772EE                            ; ---------------------------------------------------------------------------
000772EE                            ; Collision data
000772EE                            ; ---------------------------------------------------------------------------
000772EE                            AngleMap:	incbin	"collide\Angle Map.bin"
000773EE                            		even
000773EE                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
000783EE                            		even
000783EE                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
000793EE                            		even
000793EE                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
000795AC 00                         		even
000795AC                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0007986A                            		even
0007986A                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
000799E4 00                         		even
000799E4                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
00079BD8                            		even
00079BD8                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
00079DC4 00                         		even
00079DC4                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
00079F94 00                         		even
00079F94                            ; ---------------------------------------------------------------------------
00079F94                            ; Special Stage layouts
00079F94                            ; ---------------------------------------------------------------------------
00079F94                            SS_1:		incbin	"sslayout\1.bin"
0007A20E                            		even
0007A20E                            SS_2:		incbin	"sslayout\2.bin"
0007A620                            		even
0007A620                            SS_3:		incbin	"sslayout\3.bin"
0007A97C                            		even
0007A97C                            SS_4:		incbin	"sslayout\4.bin"
0007AE56                            		even
0007AE56                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B306                            			even
0007B306                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007B5F8                            		even
0007B5F8                            ; ---------------------------------------------------------------------------
0007B5F8                            ; Animated uncompressed graphics
0007B5F8                            ; ---------------------------------------------------------------------------
0007B5F8                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007B7F8                            		even
0007B7F8                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007BBF8                            		even
0007BBF8                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C078                            		even
0007C078                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C378                            		even
0007C378                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007C978                            		even
0007C978                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007CC78                            		even
0007CC78                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007D6F8                            		even
0007D6F8                            
0007D6F8                            ; ---------------------------------------------------------------------------
0007D6F8                            ; Level	layout index
0007D6F8                            ; ---------------------------------------------------------------------------
0007D6F8                            Level_Index:
0007D6F8                            		; GHZ
0007D6F8 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007D6FE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007D704 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007D70A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007D710                            		; LZ
0007D710 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007D716 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007D71C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007D722 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007D728                            		; MZ
0007D728 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007D72E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007D734 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007D73A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007D740                            		; SLZ
0007D740 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D746 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D74C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D752 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007D758                            		; SYZ
0007D758 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007D75E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007D764 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007D76A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007D770                            		; SBZ
0007D770 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007D776 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007D77C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007D782 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007D788                            		; Ending
0007D788 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007D78E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007D794 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007D79A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007D7A0                            
0007D7A0                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007D9D2                            		even
0007D9D2 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007D9D6                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DAF8                            		even
0007DAF8 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DAFC                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007DD7E                            		even
0007DD7E                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007DDC0                            		even
0007DDC0 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007DDC4 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007DDC8                            
0007DDC8                            Level_LZ1:	incbin	"levels\lz1.bin"
0007DE8A                            		even
0007DE8A                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007DF8C                            		even
0007DF8C 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007DF90                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E02A                            		even
0007E02A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E02E                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E148                            		even
0007E148 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E14C                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E206                            		even
0007E206 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E20A                            
0007E20A                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E2FC                            		even
0007E2FC                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E41E                            		even
0007E41E                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E510                            		even
0007E510                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E632                            		even
0007E632 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E636                            Level_MZ3:	incbin	"levels\mz3.bin"
0007E6A8                            		even
0007E6A8                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007E7CA                            		even
0007E7CA 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007E7CE 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007E7D2                            
0007E7D2                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007E8E4                            		even
0007E8E4                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007E95E                            		even
0007E95E                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EA4E                            		even
0007EA4E                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007EB68                            		even
0007EB68 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007EB6C                            
0007EB6C                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007EC70                            		even
0007EC70                            		incbin	"levels\syzbg (JP1).bin"
0007ECAA                            		even
0007ECAA 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007ECAE                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007EDB2                            		even
0007EDB2 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007EDB6                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007EF10 00                         		even
0007EF10 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007EF14 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007EF18                            
0007EF18                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F03A                            		even
0007F03A                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F078                            		even
0007F078                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F1BA                            		even
0007F1BA                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F324                            		even
0007F324 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F328 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F32C                            Level_End:	incbin	"levels\ending.bin"
0007F35C 00                         		even
0007F35C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F360                            
0007F360                            
0007F360                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0007FFA0                            		even
0007FFA0                            
00080000                            
00080000                            ; ---------------------------------------------------------------------------
00080000                            ; Sprite locations index
00080000                            ; ---------------------------------------------------------------------------
00080000                            ObjPos_Index:
00080000                            		; GHZ
00080000 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080004 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080008 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008000C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080010                            		; LZ
00080010 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080014 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080018 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008001C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080020                            		; MZ
00080020 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080024 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080028 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008002C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080030                            		; SLZ
00080030 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080034 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080038 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008003C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080040                            		; SYZ
00080040 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080044 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080048 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008004C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080050                            		; SBZ
00080050 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080054 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080058 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008005C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080060                            		; Ending
00080060 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080064 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080068 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008006C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080070                            		; --- Put extra object data here. ---
00080070                            ObjPosLZPlatform_Index:
00080070 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080074 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080078 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008007C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080080                            ObjPosSBZPlatform_Index:
00080080 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080084 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080088 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008008C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080090 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080096                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
000806F0                            		even
000806F0                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080B46                            		even
00080B46                            		incbin	"objpos\ghz3 (JP1).bin"
00080D56                            		even
00080D56                            		incbin	"objpos\lz1 (JP1).bin"
00080D8C                            		even
00080D8C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000810CE                            		even
000810CE                            		incbin	"objpos\lz3 (JP1).bin"
00081692                            		even
00081692                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00081D22                            		even
00081D22                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00081D54                            		even
00081D54                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00081D86                            		even
00081D86                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00081DB8                            		even
00081DB8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
00081DEA                            		even
00081DEA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00081E34                            		even
00081E34                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00081E72                            		even
00081E72                            		incbin	"objpos\mz1 (JP1).bin"
0008245A                            		even
0008245A                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082766                            		even
00082766                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
0008294C                            		even
0008294C                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00082E80                            		even
00082E80                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000832EE                            		even
000832EE                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
000838D0                            		even
000838D0                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083918                            		even
00083918                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083942                            		even
00083942                            		incbin	"objpos\syz3 (JP1).bin"
00083972                            		even
00083972                            		incbin	"objpos\sbz1 (JP1).bin"
000839BA                            		even
000839BA                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
000839E4                            		even
000839E4                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083A08                            		even
00083A08                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083A3A                            		even
00083A3A                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083A6C                            		even
00083A6C                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00083A9E                            		even
00083A9E                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00083AD0                            		even
00083AD0                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00083B02                            		even
00083B02                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00083B3A                            		even
00083B3A                            ObjPos_End:	incbin	"objpos\ending.bin"
00083C96                            		even
00083C96 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00083C9C                            
00083C9C                            		dcb.b $63C,$FF
000842D8                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
000842D8                            
000842D8                            SoundDriver:	include "s1.sounddriver.asm"
000842D8                            ; ---------------------------------------------------------------------------
000842D8                            ; Modified (early?) SMPS 68k Type 1b
000842D8                            ; ---------------------------------------------------------------------------
000842D8                            ; Go_SoundTypes:
000842D8 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
000842DC                            ; Go_SoundD0:
000842DC 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
000842E0 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
000842E4 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
000842E8                            ; off_719A0:
000842E8 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
000842EC 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
000842F0                            ; ---------------------------------------------------------------------------
000842F0                            ; PSG instruments used in music
000842F0                            ; ---------------------------------------------------------------------------
000842F0                            PSG_Index:
000842F0 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
000842FC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084308 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084314                            PSG1:		incbin	"sound/psg/psg1.bin"
0008432B                            PSG2:		incbin	"sound/psg/psg2.bin"
00084332                            PSG3:		incbin	"sound/psg/psg3.bin"
00084343                            PSG4:		incbin	"sound/psg/psg4.bin"
0008434E                            PSG6:		incbin	"sound/psg/psg6.bin"
0008435D                            PSG5:		incbin	"sound/psg/psg5.bin"
00084387                            PSG7:		incbin	"sound/psg/psg7.bin"
000843A3                            PSG8:		incbin	"sound/psg/psg8.bin"
000843CB                            PSG9:		incbin	"sound/psg/psg9.bin"
000843DC                            ; ---------------------------------------------------------------------------
000843DC                            ; New tempos for songs during speed shoes
000843DC                            ; ---------------------------------------------------------------------------
000843DC                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
000843DC                            ; tempos while speed shoes are active. If you don't want that, you should add
000843DC                            ; their "correct" sped-up main tempos to the list.
000843DC                            ; byte_71A94:
000843DC                            SpeedUpIndex:
000843DC 07                         		dc.b 7		; GHZ
000843DD 72                         		dc.b $72	; LZ
000843DE 73                         		dc.b $73	; MZ
000843DF 26                         		dc.b $26	; SLZ
000843E0 15                         		dc.b $15	; SYZ
000843E1 08                         		dc.b 8		; SBZ
000843E2 FF                         		dc.b $FF	; Invincibility
000843E3 05                         		dc.b 5		; Extra Life
000843E4                            		;dc.b ?		; Special Stage
000843E4                            		;dc.b ?		; Title Screen
000843E4                            		;dc.b ?		; Ending
000843E4                            		;dc.b ?		; Boss
000843E4                            		;dc.b ?		; FZ
000843E4                            		;dc.b ?		; Sonic Got Through
000843E4                            		;dc.b ?		; Game Over
000843E4                            		;dc.b ?		; Continue Screen
000843E4                            		;dc.b ?		; Credits
000843E4                            		;dc.b ?		; Drowning
000843E4                            		;dc.b ?		; Get Emerald
000843E4                            
000843E4                            ; ---------------------------------------------------------------------------
000843E4                            ; Music	Pointers
000843E4                            ; ---------------------------------------------------------------------------
000843E4                            MusicIndex:
000843E4 0000 0000                  ptr_mus81:	dc.l Music81
000843E8 0000 0000                  ptr_mus82:	dc.l Music82
000843EC 0000 0000                  ptr_mus83:	dc.l Music83
000843F0 0000 0000                  ptr_mus84:	dc.l Music84
000843F4 0000 0000                  ptr_mus85:	dc.l Music85
000843F8 0000 0000                  ptr_mus86:	dc.l Music86
000843FC 0000 0000                  ptr_mus87:	dc.l Music87
00084400 0000 0000                  ptr_mus88:	dc.l Music88
00084404 0000 0000                  ptr_mus89:	dc.l Music89
00084408 0000 0000                  ptr_mus8A:	dc.l Music8A
0008440C 0000 0000                  ptr_mus8B:	dc.l Music8B
00084410 0000 0000                  ptr_mus8C:	dc.l Music8C
00084414 0000 0000                  ptr_mus8D:	dc.l Music8D
00084418 0000 0000                  ptr_mus8E:	dc.l Music8E
0008441C 0000 0000                  ptr_mus8F:	dc.l Music8F
00084420 0000 0000                  ptr_mus90:	dc.l Music90
00084424 0000 0000                  ptr_mus91:	dc.l Music91
00084428 0000 0000                  ptr_mus92:	dc.l Music92
0008442C 0000 0000                  ptr_mus93:	dc.l Music93
00084430 0000 0000                  ptr_mus94:	dc.l Music94
00084434 0000 0000                  ptr_mus95:	dc.l Music95
00084438 0000 0000                  ptr_mus96:	dc.l Music96
0008443C 0000 0000                  ptr_mus97:	dc.l Music97
00084440 0000 0000                  ptr_mus98:	dc.l Music98
00084444                            ptr_musend
00084444                            ; ---------------------------------------------------------------------------
00084444                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084444                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084444                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084444                            ; any music or SFX can override it (as long as it can override whatever was
00084444                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084444                            ; will only override special SFX and music will only override music.
00084444                            ; ---------------------------------------------------------------------------
00084444                            ; SoundTypes:
00084444                            SoundPriorities:
00084444 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084453 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084463 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084473 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084483 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084493 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000844A3 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000844A8                            
000844A8                            ; ---------------------------------------------------------------------------
000844A8                            ; Subroutine to update music more than once per frame
000844A8                            ; (Called by horizontal & vert. interrupts)
000844A8                            ; ---------------------------------------------------------------------------
000844A8                            
000844A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000844A8                            
000844A8                            ; sub_71B4C:
000844A8                            UpdateMusic:
000844A8 33FC 0100 00A1 1100        		stopZ80
000844B0 4E71                       		nop	
000844B2 4E71                       		nop	
000844B4 4E71                       		nop	
000844B6                            ; loc_71B5A:
000844B6                            @updateloop:
000844B6 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000844BE 66F6                       		bne.s	@updateloop			; If so, wait
000844C0                            
000844C0 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
000844C8 6700                       		beq.s	@driverinput			; Branch if yes
000844CA 33FC 0000 00A1 1100        		startZ80
000844D2 4E71                       		nop	
000844D4 4E71                       		nop	
000844D6 4E71                       		nop	
000844D8 4E71                       		nop	
000844DA 4E71                       		nop	
000844DC 60CA                       		bra.s	UpdateMusic
000844DE                            ; ===========================================================================
000844DE                            ; loc_71B82:
000844DE                            @driverinput:
000844DE 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000844E4 422E 000E                  		clr.b	f_voice_selector(a6)
000844E8 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000844EC 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000844F0 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000844F4 6600                       		bne.s	@skipdelay
000844F6 4EBA 0000                  		jsr	TempoWait(pc)
000844FA                            ; loc_71B9E:
000844FA                            @skipdelay:
000844FA 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000844FE 6700                       		beq.s	@skipfadeout
00084500 4EBA 0000                  		jsr	DoFadeOut(pc)
00084504                            ; loc_71BA8:
00084504                            @skipfadeout:
00084504 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084508 6700                       		beq.s	@skipfadein
0008450A 4EBA 0000                  		jsr	DoFadeIn(pc)
0008450E                            ; loc_71BB2:
0008450E                            @skipfadein:
0008450E                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
0008450E 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084512 6700                       		beq.s	@nosndinput		; if not, branch
00084514 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084518                            ; loc_71BBC:
00084518                            @nosndinput:
00084518 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
0008451E 6700                       		beq.s	@nonewsound		; If yes, branch
00084520 4EBA 0000                  		jsr	PlaySoundID(pc)
00084524                            ; loc_71BC8:
00084524                            @nonewsound:
00084524 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084528 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
0008452A 6A00                       		bpl.s	@dacdone		; Branch if not
0008452C 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084530                            ; loc_71BD4:
00084530                            @dacdone:
00084530 422E 0008                  		clr.b	f_updating_dac(a6)
00084534 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084536                            ; loc_71BDA:
00084536                            @bgmfmloop:
00084536 DAFC 0030                  		adda.w	#TrackSz,a5
0008453A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008453C 6A00                       		bpl.s	@bgmfmnext		; Branch if not
0008453E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084542                            ; loc_71BE6:
00084542                            @bgmfmnext:
00084542 51CF FFF2                  		dbf	d7,@bgmfmloop
00084546                            
00084546 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084548                            ; loc_71BEC:
00084548                            @bgmpsgloop:
00084548 DAFC 0030                  		adda.w	#TrackSz,a5
0008454C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008454E 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084550 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084554                            ; loc_71BF8:
00084554                            @bgmpsgnext:
00084554 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084558                            
00084558 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
0008455E 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084560                            ; loc_71C04:
00084560                            @sfxfmloop:
00084560 DAFC 0030                  		adda.w	#TrackSz,a5
00084564 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084566 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084568 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0008456C                            ; loc_71C10:
0008456C                            @sfxfmnext:
0008456C 51CF FFF2                  		dbf	d7,@sfxfmloop
00084570                            
00084570 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084572                            ; loc_71C16:
00084572                            @sfxpsgloop:
00084572 DAFC 0030                  		adda.w	#TrackSz,a5
00084576 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084578 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
0008457A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0008457E                            ; loc_71C22:
0008457E                            @sfxpsgnext:
0008457E 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084582                            		
00084582 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084588 DAFC 0030                  		adda.w	#TrackSz,a5
0008458C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008458E 6A00                       		bpl.s	@specfmdone		; Branch if not
00084590 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084594                            ; loc_71C38:
00084594                            @specfmdone:
00084594 DAFC 0030                  		adda.w	#TrackSz,a5
00084598 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
0008459A 6A00                       		bpl.s	DoStartZ80		; Branch if not
0008459C 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000845A0                            ; loc_71C44:
000845A0                            DoStartZ80:
000845A0 33FC 0000 00A1 1100        		startZ80
000845A8 4E75                       		rts	
000845AA                            ; End of function UpdateMusic
000845AA                            
000845AA                            
000845AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000845AA                            
000845AA                            ; sub_71C4E: UpdateDAC:
000845AA                            DACUpdateTrack:
000845AA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
000845AE 6600                       		bne.s	@locret				; Return if not
000845B0 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
000845B6                            ;DACDoNext:
000845B6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
000845BA                            ; loc_71C5E:
000845BA                            @sampleloop:
000845BA 7A00                       		moveq	#0,d5
000845BC 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
000845BE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000845C2 6500                       		blo.s	@notcoord	; Branch if not
000845C4 4EBA 0000                  		jsr	CoordFlag(pc)
000845C8 60F0                       		bra.s	@sampleloop
000845CA                            ; ===========================================================================
000845CA                            ; loc_71C6E:
000845CA                            @notcoord:
000845CA 4A05                       		tst.b	d5			; Is it a sample?
000845CC 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
000845CE 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
000845D2 1A1C                       		move.b	(a4)+,d5		; Get another byte
000845D4 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
000845D6 534C                       		subq.w	#1,a4			; Put byte back
000845D8 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
000845DE 6000                       		bra.s	@gotsampleduration
000845E0                            ; ===========================================================================
000845E0                            ; loc_71C84:
000845E0                            @gotduration:
000845E0 4EBA 0000                  		jsr	SetDuration(pc)
000845E4                            ; loc_71C88:
000845E4                            @gotsampleduration:
000845E4 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000845E8 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000845EC 6600                       		bne.s	@locret			; Return if yes
000845EE 7000                       		moveq	#0,d0
000845F0 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000845F4 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000845F8 6700                       		beq.s	@locret			; Return if yes
000845FA 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000845FE 6600                       		bne.s	@timpani		; Various timpani
00084600 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084606                            ; locret_71CAA:
00084606                            @locret:
00084606 4E75                       		rts	
00084608                            ; ===========================================================================
00084608                            ; loc_71CAC:
00084608                            @timpani:
00084608 0400 0088                  		subi.b	#$88,d0		; Convert into an index
0008460C 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084610                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084610                            		; use this value from then on.
00084610 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084616 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
0008461E 4E75                       		rts	
00084620                            ; End of function DACUpdateTrack
00084620                            
00084620                            ; ===========================================================================
00084620                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084620                            ; Also, $8C-$8D are so slow you may want to skip them.
00084620                            ; byte_71CC4:
00084620 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084626                            
00084626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084626                            
00084626                            ; sub_71CCA:
00084626                            FMUpdateTrack:
00084626 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
0008462A 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
0008462C 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084630 4EBA 0000                  		jsr	FMDoNext(pc)
00084634 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084638 6000 0000                  		bra.w	FMNoteOn
0008463C                            ; ===========================================================================
0008463C                            ; loc_71CE0:
0008463C                            @notegoing:
0008463C 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084640 4EBA 0000                  		jsr	DoModulation(pc)
00084644 6000 0000                  		bra.w	FMUpdateFreq
00084648                            ; End of function FMUpdateTrack
00084648                            
00084648                            
00084648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084648                            
00084648                            ; sub_71CEC:
00084648                            FMDoNext:
00084648 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
0008464C 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084650                            ; loc_71CF4:
00084650                            @noteloop:
00084650 7A00                       		moveq	#0,d5
00084652 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084654 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084658 6500                       		blo.s	@gotnote	; Branch if not
0008465A 4EBA 0000                  		jsr	CoordFlag(pc)
0008465E 60F0                       		bra.s	@noteloop
00084660                            ; ===========================================================================
00084660                            ; loc_71D04:
00084660                            @gotnote:
00084660 4EBA 0000                  		jsr	FMNoteOff(pc)
00084664 4A05                       		tst.b	d5		; Is this a note?
00084666 6A00                       		bpl.s	@gotduration	; Branch if not
00084668 4EBA 0000                  		jsr	FMSetFreq(pc)
0008466C 1A1C                       		move.b	(a4)+,d5	; Get another byte
0008466E 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084670 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084672 6000 0000                  		bra.w	FinishTrackUpdate
00084676                            ; ===========================================================================
00084676                            ; loc_71D1A:
00084676                            @gotduration:
00084676 4EBA 0000                  		jsr	SetDuration(pc)
0008467A 6000 0000                  		bra.w	FinishTrackUpdate
0008467E                            ; End of function FMDoNext
0008467E                            
0008467E                            
0008467E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008467E                            
0008467E                            ; sub_71D22:
0008467E                            FMSetFreq:
0008467E 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084682 6700                       		beq.s	TrackSetRest
00084684 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084688 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
0008468C E34D                       		lsl.w	#1,d5
0008468E 41FA 0000                  		lea	FMFrequencies(pc),a0
00084692 3C30 5000                  		move.w	(a0,d5.w),d6
00084696 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
0008469A 4E75                       		rts	
0008469C                            ; End of function FMSetFreq
0008469C                            
0008469C                            
0008469C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008469C                            
0008469C                            ; sub_71D40:
0008469C                            SetDuration:
0008469C 1005                       		move.b	d5,d0
0008469E 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
000846A2                            ; loc_71D46:
000846A2                            @multloop:
000846A2 5301                       		subq.b	#1,d1
000846A4 6700                       		beq.s	@donemult
000846A6 D005                       		add.b	d5,d0
000846A8 60F8                       		bra.s	@multloop
000846AA                            ; ===========================================================================
000846AA                            ; loc_71D4E:
000846AA                            @donemult:
000846AA 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
000846AE 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
000846B2 4E75                       		rts	
000846B4                            ; End of function SetDuration
000846B4                            
000846B4                            ; ===========================================================================
000846B4                            ; loc_71D58:
000846B4                            TrackSetRest:
000846B4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000846B8 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
000846BC                            
000846BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000846BC                            
000846BC                            ; sub_71D60:
000846BC                            FinishTrackUpdate:
000846BC 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
000846C0 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
000846C6 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
000846CA 6600                       		bne.s	@locret				; If so, branch
000846CC 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
000846D2 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
000846D6 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
000846DA 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
000846DC 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
000846E0 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000846E4 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000846E8 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
000846EC 1018                       		move.b	(a0)+,d0			; Get steps
000846EE E208                       		lsr.b	#1,d0				; Halve them
000846F0 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000846F4 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000846F8                            ; locret_71D9C:
000846F8                            @locret:
000846F8 4E75                       		rts	
000846FA                            ; End of function FinishTrackUpdate
000846FA                            
000846FA                            
000846FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000846FA                            
000846FA                            ; sub_71D9E: NoteFillUpdate
000846FA                            NoteTimeoutUpdate:
000846FA 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000846FE 6700                       		beq.s	@locret
00084700 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084704 6600                       		bne.s	@locret				; Return if it hasn't expired
00084706 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
0008470A 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
0008470E 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084712 4EBA 0000                  		jsr	FMNoteOff(pc)
00084716 584F                       		addq.w	#4,sp				; Do not return to caller
00084718 4E75                       		rts	
0008471A                            ; ===========================================================================
0008471A                            ; loc_71DBE:
0008471A                            @psgnoteoff:
0008471A 4EBA 0000                  		jsr	PSGNoteOff(pc)
0008471E 584F                       		addq.w	#4,sp		; Do not return to caller
00084720                            ; locret_71DC4:
00084720                            @locret:
00084720 4E75                       		rts	
00084722                            ; End of function NoteTimeoutUpdate
00084722                            
00084722                            
00084722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084722                            
00084722                            ; sub_71DC6:
00084722                            DoModulation:
00084722 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084724 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084728 6700                       		beq.s	@locret				; Return if not
0008472A 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
0008472E 6700                       		beq.s	@waitdone			; If yes, branch
00084730 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084734 4E75                       		rts	
00084736                            ; ===========================================================================
00084736                            ; loc_71DDA:
00084736                            @waitdone:
00084736 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
0008473A 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
0008473C 4E75                       		rts	
0008473E                            ; ===========================================================================
0008473E                            ; loc_71DE2:
0008473E                            @updatemodulation:
0008473E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084742 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084748 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
0008474C 6600                       		bne.s	@calcfreq			; If nonzero, branch
0008474E 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084754 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084758 4E75                       		rts	
0008475A                            ; ===========================================================================
0008475A                            ; loc_71DFE:
0008475A                            @calcfreq:
0008475A 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
0008475E 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084762 4886                       		ext.w	d6
00084764 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084768 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
0008476C DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084770 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084772                            ; locret_71E16:
00084772                            @locret:
00084772 4E75                       		rts	
00084774                            ; End of function DoModulation
00084774                            
00084774                            
00084774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084774                            
00084774                            ; sub_71E18:
00084774                            FMPrepareNote:
00084774 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084778 6600                       		bne.s	locret_71E48		; Return if so
0008477A 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
0008477E 6700                       		beq.s	FMSetRest		; Branch if zero
00084780                            ; loc_71E24:
00084780                            FMUpdateFreq:
00084780 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084784 4880                       		ext.w	d0
00084786 DC40                       		add.w	d0,d6			; Add note frequency
00084788 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008478C 6600                       		bne.s	locret_71E48		; Return if so
0008478E 3206                       		move.w	d6,d1
00084790 E049                       		lsr.w	#8,d1
00084792 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084796 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008479A 1206                       		move.b	d6,d1
0008479C 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
000847A0 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
000847A4                            ; locret_71E48:
000847A4                            locret_71E48:
000847A4 4E75                       		rts	
000847A6                            ; ===========================================================================
000847A6                            ; loc_71E4A:
000847A6                            FMSetRest:
000847A6 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000847AA 4E75                       		rts	
000847AC                            ; End of function FMPrepareNote
000847AC                            
000847AC                            ; ===========================================================================
000847AC                            ; loc_71E50:
000847AC                            PauseMusic:
000847AC 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
000847AE 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
000847B4 6700 0000                  		beq.w	@unpausedallfm
000847B8 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
000847BE 7602                       		moveq	#2,d3
000847C0 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
000847C4 7200                       		moveq	#0,d1		; No panning, AMS or FMS
000847C6                            ; loc_71E6A:
000847C6                            @killpanloop:
000847C6 4EBA 0000                  		jsr	WriteFMI(pc)
000847CA 4EBA 0000                  		jsr	WriteFMII(pc)
000847CE 5200                       		addq.b	#1,d0
000847D0 51CB FFF4                  		dbf	d3,@killpanloop
000847D4                            
000847D4 7602                       		moveq	#2,d3
000847D6 7028                       		moveq	#$28,d0		; Key on/off register
000847D8                            ; loc_71E7C:
000847D8                            @noteoffloop:
000847D8 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000847DA 4EBA 0000                  		jsr	WriteFMI(pc)
000847DE 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000847E0 4EBA 0000                  		jsr	WriteFMI(pc)
000847E4 51CB FFF2                  		dbf	d3,@noteoffloop
000847E8                            
000847E8 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000847EC 6000 FDB2                  		bra.w	DoStartZ80
000847F0                            ; ===========================================================================
000847F0                            ; loc_71E94:
000847F0                            @unpausemusic:
000847F0 422E 0003                  		clr.b	f_pausemusic(a6)
000847F4 7630                       		moveq	#TrackSz,d3
000847F6 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000847FA 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000847FC                            ; loc_71EA0:
000847FC                            @bgmfmloop:
000847FC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084800 6700                       		beq.s	@bgmfmnext		; Branch if not
00084802 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084806 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084808 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0008480C 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084810 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084814                            ; loc_71EB8:
00084814                            @bgmfmnext:
00084814 DAC3                       		adda.w	d3,a5
00084816 51CC FFE4                  		dbf	d4,@bgmfmloop
0008481A                            
0008481A 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
0008481E 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084820                            ; loc_71EC4:
00084820                            @sfxfmloop:
00084820 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084824 6700                       		beq.s	@sfxfmnext		; Branch if not
00084826 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008482A 6600                       		bne.s	@sfxfmnext		; Branch if yes
0008482C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084830 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084834 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084838                            ; loc_71EDC:
00084838                            @sfxfmnext:
00084838 DAC3                       		adda.w	d3,a5
0008483A 51CC FFE4                  		dbf	d4,@sfxfmloop
0008483E                            
0008483E 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084842 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084846 6700                       		beq.s	@unpausedallfm		; Branch if not
00084848 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008484C 6600                       		bne.s	@unpausedallfm		; Branch if yes
0008484E 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084852 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084856 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008485A                            ; loc_71EFE:
0008485A                            @unpausedallfm:
0008485A 6000 FD44                  		bra.w	DoStartZ80
0008485E                            
0008485E                            ; ---------------------------------------------------------------------------
0008485E                            ; Subroutine to	play a sound or	music track
0008485E                            ; ---------------------------------------------------------------------------
0008485E                            
0008485E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008485E                            
0008485E                            ; Sound_Play:
0008485E                            CycleSoundQueue:
0008485E 2079 0008 42D8             		movea.l	(Go_SoundPriorities).l,a0
00084864 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084868 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
0008486A 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
0008486C                            ; loc_71F12:
0008486C                            @inputloop:
0008486C 1011                       		move.b	(a1),d0			; move track number to d0
0008486E 1200                       		move.b	d0,d1
00084870 4219                       		clr.b	(a1)+			; Clear entry
00084872 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084876 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084878 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
0008487E 6700                       		beq.s	@havesound		; If yes, branch
00084880 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084884 6000                       		bra.s	@nextinput
00084886                            ; ===========================================================================
00084886                            ; loc_71F2C:
00084886                            @havesound:
00084886 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
0008488A 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
0008488E B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084890 6500                       		blo.s	@nextinput		; Branch if yes
00084892 1602                       		move.b	d2,d3			; Store new priority
00084894 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084898                            ; loc_71F3E:
00084898                            @nextinput:
00084898 51CC FFD2                  		dbf	d4,@inputloop
0008489C                            
0008489C 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
0008489E 6B00                       		bmi.s	@locret
000848A0 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
000848A2                            ; locret_71F4A:
000848A2                            @locret:
000848A2 4E75                       		rts	
000848A4                            ; End of function CycleSoundQueue
000848A4                            
000848A4                            
000848A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000848A4                            
000848A4                            ; Sound_ChkValue:
000848A4                            PlaySoundID:
000848A4 7E00                       		moveq	#0,d7
000848A6 1E2E 0009                  		move.b	v_sound_id(a6),d7
000848AA 6700 0000                  		beq.w	StopAllSound
000848AE 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
000848B0 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
000848B6                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
000848B6                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
000848B6                            		; See LevSel_NoCheat for more.
000848B6 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
000848BA 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
000848BE 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
000848C2 6500 0000                  		blo.w	@locret			; Return if yes
000848C6 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
000848CA 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
000848CE 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000848D2 6500 0000                  		blo.w	@locret			; Return if yes
000848D6 0C07 00D1                  		cmpi.b	#$D1,d7
000848DA 6500 0000                  		bcs.w	Sound_PlaySpecial
000848DE 0C07 00DF                  		cmp.b	#$DF,d7
000848E2 6F00 0000                  		ble.w	Sound_D1toDF
000848E6 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000848EA 6500 0000                  		blo.w	@locret			; Return if yes
000848EE 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000848F2 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000848F4                            ; locret_71F8C:
000848F4                            @locret:
000848F4 4E75                       		rts	
000848F6                            ; ===========================================================================
000848F6                            
000848F6                            Sound_E0toE4:
000848F6 0407 00E0                  		subi.b	#flg__First,d7
000848FA E54F                       		lsl.w	#2,d7
000848FC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084900                            ; ===========================================================================
00084900                            
00084900                            Sound_ExIndex:
00084900 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084904 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084908 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
0008490C 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084910 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084914                            ptr_flgend
00084914                            ; ===========================================================================
00084914                            ; ---------------------------------------------------------------------------
00084914                            ; Play "Say-gaa" PCM sound
00084914                            ; ---------------------------------------------------------------------------
00084914                            ; Sound_E1: PlaySega:
00084914                            PlaySegaSound:
00084914 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
0008491C 33FC 0000 00A1 1100        		startZ80
00084924 323C 0011                  		move.w	#$11,d1
00084928                            ; loc_71FC0:
00084928                            @busyloop_outer:
00084928 303C FFFF                  		move.w	#-1,d0
0008492C                            ; loc_71FC4:
0008492C                            @busyloop:
0008492C 4E71                       		nop	
0008492E 51C8 FFFC                  		dbf	d0,@busyloop
00084932                            
00084932 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084936                            
00084936 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084938 4E75                       		rts	
0008493A                            ; ===========================================================================
0008493A                            ; ---------------------------------------------------------------------------
0008493A                            ; Play music track $81-$9F
0008493A                            ; ---------------------------------------------------------------------------
0008493A                            ; Sound_81to9F:
0008493A                            Sound_PlayBGM:
0008493A 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
0008493E 6600                       		bne.s	@bgmnot1up		; if not, branch
00084940 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084944 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084948 4BEE 0040                  		lea	v_music_track_ram(a6),a5
0008494C 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
0008494E                            ; loc_71FE6:
0008494E                            @clearsfxloop:
0008494E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084952 DAFC 0030                  		adda.w	#TrackSz,a5
00084956 51C8 FFF6                  		dbf	d0,@clearsfxloop
0008495A                            
0008495A 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008495E 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084960                            ; loc_71FF8:
00084960                            @cleartrackplayloop:
00084960 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084964 DAFC 0030                  		adda.w	#TrackSz,a5
00084968 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
0008496C                            
0008496C 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008496E 204E                       		movea.l	a6,a0
00084970 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084974 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084978                            ; loc_72012:
00084978                            @backupramloop:
00084978 22D8                       		move.l	(a0)+,(a1)+
0008497A 51C8 FFFC                  		dbf	d0,@backupramloop
0008497E                            
0008497E 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084984 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084986 6000                       		bra.s	@bgm_loadMusic
00084988                            ; ===========================================================================
00084988                            ; loc_72024:
00084988                            @bgmnot1up:
00084988 422E 0027                  		clr.b	f_1up_playing(a6)
0008498C 422E 0026                  		clr.b	v_fadein_counter(a6)
00084990                            ; loc_7202C:
00084990                            @bgm_loadMusic:
00084990 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084994 2879 0008 42E8             		movea.l	(Go_SpeedUpIndex).l,a4
0008499A 0407 0081                  		subi.b	#bgm__First,d7
0008499E 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
000849A4 2879 0008 42E0             		movea.l	(Go_MusicIndex).l,a4
000849AA E54F                       		lsl.w	#2,d7
000849AC 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
000849B0 7000                       		moveq	#0,d0
000849B2 3014                       		move.w	(a4),d0			; load voice pointer
000849B4 D08C                       		add.l	a4,d0			; It is a relative pointer
000849B6 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
000849BA 102C 0005                  		move.b	5(a4),d0		; load tempo
000849BE 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
000849C2                            		;tst.b	f_speedup(a6)
000849C2                            		;beq.s	@nospeedshoes
000849C2                            		;move.b	v_speeduptempo(a6),d0
000849C2                            ; loc_72068:
000849C2                            ;@nospeedshoes:
000849C2 1D40 0002                  		move.b	d0,v_main_tempo(a6)
000849C6 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
000849CA 7200                       		moveq	#0,d1
000849CC 264C                       		movea.l	a4,a3
000849CE 5C4C                       		addq.w	#6,a4			; Point past header
000849D0 7E00                       		moveq	#0,d7
000849D2 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
000849D6 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
000849DA 5307                       		subq.b	#1,d7
000849DC 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
000849E0 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000849E4 7C30                       		moveq	#TrackSz,d6
000849E6 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
000849EA 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000849EE 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000849F2                            ; loc_72098:
000849F2                            @bmg_fmloadloop:
000849F2 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000849F6 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000849FA 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000849FE 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084A02 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084A06 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084A0A 7000                       		moveq	#0,d0
00084A0C 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084A0E D08B                       		add.l	a3,d0				; Relative pointer
00084A10 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084A14 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084A18 D2C6                       		adda.w	d6,a1
00084A1A 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084A1E                            		
00084A1E 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084A24 6600                       		bne.s	@silencefm6
00084A26 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084A28 7200                       		moveq	#0,d1		; Disable DAC
00084A2A 4EBA 0000                  		jsr	WriteFMI(pc)
00084A2E 6000 0000                  		bra.w	@bgm_fmdone
00084A32                            ; ===========================================================================
00084A32                            ; loc_720D8:
00084A32                            @silencefm6:
00084A32 7028                       		moveq	#$28,d0		; Key on/off register
00084A34 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084A36 4EBA 0000                  		jsr	WriteFMI(pc)
00084A3A 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084A3E 727F                       		moveq	#$7F,d1		; Total silence
00084A40 4EBA 0000                  		jsr	WriteFMII(pc)
00084A44 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084A48 727F                       		moveq	#$7F,d1		; Total silence
00084A4A 4EBA 0000                  		jsr	WriteFMII(pc)
00084A4E 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084A52 727F                       		moveq	#$7F,d1		; Total silence
00084A54 4EBA 0000                  		jsr	WriteFMII(pc)
00084A58 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00084A5C 727F                       		moveq	#$7F,d1		; Total silence
00084A5E 4EBA 0000                  		jsr	WriteFMII(pc)
00084A62 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084A66 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084A6A 4EBA 0000                  		jsr	WriteFMII(pc)
00084A6E                            ; loc_72114:
00084A6E                            @bgm_fmdone:
00084A6E 7E00                       		moveq	#0,d7
00084A70 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084A74 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084A76 5307                       		subq.b	#1,d7
00084A78 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00084A7C 45FA 0000                  		lea	PSGInitBytes(pc),a2
00084A80                            ; loc_72126:
00084A80                            @bgm_psgloadloop:
00084A80 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084A84 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084A88 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084A8C 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084A90 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084A94 7000                       		moveq	#0,d0
00084A96 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084A98 D08B                       		add.l	a3,d0				; Relative pointer
00084A9A 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084A9E 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084AA2 101C                       		move.b	(a4)+,d0			; load redundant byte
00084AA4 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084AA8 D2C6                       		adda.w	d6,a1
00084AAA 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00084AAE                            ; loc_72154:
00084AAE                            @bgm_psgdone:
00084AAE 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084AB2 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084AB4                            ; loc_7215A:
00084AB4                            @sfxstoploop:
00084AB4 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084AB6 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084ABA 7000                       		moveq	#0,d0
00084ABC 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00084AC0 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084AC2 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084AC4 E508                       		lsl.b	#2,d0			; Convert to index
00084AC6 6000                       		bra.s	@gotchannelindex
00084AC8                            ; ===========================================================================
00084AC8                            ; loc_7216E:
00084AC8                            @sfxpsgchannel:
00084AC8 E608                       		lsr.b	#3,d0		; Convert to index
00084ACA                            ; loc_72170:
00084ACA                            @gotchannelindex:
00084ACA 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00084ACE 2070 0000                  		movea.l	(a0,d0.w),a0
00084AD2 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084AD6                            ; loc_7217C:
00084AD6                            @sfxnext:
00084AD6 D2C6                       		adda.w	d6,a1
00084AD8 51CF FFDA                  		dbf	d7,@sfxstoploop
00084ADC                            
00084ADC 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084AE0 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00084AE2 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084AE8                            ; loc_7218E:
00084AE8                            @checkspecialpsg:
00084AE8 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084AEC 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00084AEE 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084AF4                            ; loc_7219A:
00084AF4                            @sendfmnoteoff:
00084AF4 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084AF8 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00084AFA                            ; loc_721A0:
00084AFA                            @fmnoteoffloop:
00084AFA 4EBA 0000                  		jsr	FMNoteOff(pc)
00084AFE DAC6                       		adda.w	d6,a5
00084B00 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00084B04 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00084B06                            ; loc_721AC:
00084B06                            @psgnoteoffloop:
00084B06 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084B0A DAC6                       		adda.w	d6,a5
00084B0C 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00084B10                            ; loc_721B6:
00084B10                            @locdblret:
00084B10 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00084B12 4E75                       		rts	
00084B14                            ; ===========================================================================
00084B14                            ; byte_721BA:
00084B14 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00084B1C 00                         		even
00084B1C                            ; byte_721C2:
00084B1C 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00084B20 00                         		even
00084B20                            ; ===========================================================================
00084B20                            ; ---------------------------------------------------------------------------
00084B20                            ; Play Spin Dash sound effect
00084B20                            ; ---------------------------------------------------------------------------
00084B20                            Sound_D1toDF:
00084B20 4A2E 0027                  	tst.b	$27(a6)
00084B24 6600 0000                  	bne.w	loc_722C6
00084B28 4A2E 0004                  	tst.b	4(a6)
00084B2C 6600 0000                  	bne.w	loc_722C6
00084B30 4A2E 0024                  	tst.b	$24(a6)
00084B34 6600 0000                  	bne.w	loc_722C6
00084B38 2079 0008 42E4             	movea.l	(Go_SoundIndex).l,a0
00084B3E 0407 00A0                  	sub.b	#$A0,d7
00084B42 6000                       	bra.s	SoundEffects_Common
00084B44                            ; ---------------------------------------------------------------------------
00084B44                            ; Play normal sound effect
00084B44                            ; ---------------------------------------------------------------------------
00084B44                            ; Sound_A0toCF:
00084B44                            Sound_PlaySFX:
00084B44 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084B48 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00084B4C 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084B50 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084B54 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084B58 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084B5C 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00084B60 6600                       		bne.s	Sound_notB5		; if not, branch
00084B62 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00084B66 6600                       		bne.s	loc_721EE		; Branch if not
00084B68 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00084B6C                            
00084B6C                            loc_721EE:
00084B6C 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00084B72                            
00084B72                            Sound_notB5:
00084B72 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00084B76 6600                       		bne.s	Sound_notA7		; if not, branch
00084B78 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00084B7C 6600 0000                  		bne.w	locret_722C4			; Return if not
00084B80 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00084B86                            		
00084B86                            Sound_notA7:
00084B86 2079 0008 42E4             		movea.l	(Go_SoundIndex).l,a0
00084B8C 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00084B90                            
00084B90                            SoundEffects_Common:		
00084B90 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00084B92 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00084B96 224B                       		movea.l	a3,a1
00084B98 7200                       		moveq	#0,d1
00084B9A 3219                       		move.w	(a1)+,d1		; Voice pointer
00084B9C D28B                       		add.l	a3,d1			; Relative pointer
00084B9E 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00084BA0                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00084BA0                            		; index entry is above $3F will cause a crash. This is actually the same way that
00084BA0                            		; this bug is fixed in Ristar's driver.
00084BA0 7E00                       		moveq	#0,d7	
00084BA2 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00084BA4 5307                       		subq.b	#1,d7
00084BA6 7C30                       		moveq	#TrackSz,d6
00084BA8                            
00084BA8                            loc_72228:
00084BA8 7600                       		moveq	#0,d3
00084BAA 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00084BAE 1803                       		move.b	d3,d4
00084BB0 6B00                       		bmi.s	loc_72244	; Branch if PSG
00084BB2 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00084BB4 E54B                       		lsl.w	#2,d3
00084BB6 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084BBA 2A75 3000                  		movea.l	(a5,d3.w),a5
00084BBE 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00084BC2 6000                       		bra.s	loc_7226E
00084BC4                            ; ===========================================================================
00084BC4                            
00084BC4                            loc_72244:
00084BC4 E64B                       		lsr.w	#3,d3
00084BC6 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084BCA 2A75 3000                  		movea.l	(a5,d3.w),a5
00084BCE 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00084BD2 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00084BD6 6600                       		bne.s	loc_7226E	; Branch if not
00084BD8 1004                       		move.b	d4,d0
00084BDA 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00084BDE 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084BE4 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00084BE8 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084BEE                            
00084BEE                            loc_7226E:
00084BEE 2A7B 3000                  		movea.l	SFX_SFXChannelRAM(pc,d3.w),a5
00084BF2 244D                       		movea.l	a5,a2
00084BF4 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00084BF6                            
00084BF6                            loc_72276:
00084BF6 429A                       		clr.l	(a2)+
00084BF8 51C8 FFFC                  		dbf	d0,loc_72276
00084BFC                            
00084BFC 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00084BFE 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00084C02 7000                       		moveq	#0,d0
00084C04 3019                       		move.w	(a1)+,d0			; Track data pointer
00084C06 D08B                       		add.l	a3,d0				; Relative pointer
00084C08 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00084C0C 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00084C10 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00084C16 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00084C1A 4A04                       		tst.b	d4				; Is this a PSG channel?
00084C1C 6B00                       		bmi.s	loc_722A8		; Branch if yes
00084C1E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00084C24 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00084C28                            
00084C28                            loc_722A8:
00084C28 51CF FF7E                  		dbf	d7,loc_72228
00084C2C                            
00084C2C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084C30 6A00                       		bpl.s	loc_722B8				; Branch if not
00084C32 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084C38                            
00084C38                            loc_722B8:
00084C38 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00084C3C 6A00                       		bpl.s	locret_722C4						; Branch if not
00084C3E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084C44                            
00084C44                            locret_722C4:
00084C44 4E75                       		rts	
00084C46                            ; ===========================================================================
00084C46                            
00084C46                            loc_722C6:
00084C46 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00084C48 4E75                       		rts	
00084C4A                            ; ===========================================================================
00084C4A                            ; ---------------------------------------------------------------------------
00084C4A                            ; RAM addresses for FM and PSG channel variables used by the SFX
00084C4A                            ; ---------------------------------------------------------------------------
00084C4A                            ; dword_722CC: BGMChannelRAM:
00084C4A                            SFX_BGMChannelRAM:
00084C4A 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00084C4E 0000 0000                  		dc.l 0
00084C52 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00084C56 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00084C5A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00084C5E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00084C62 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00084C66 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00084C6A                            ; dword_722EC: SFXChannelRAM:
00084C6A                            SFX_SFXChannelRAM:
00084C6A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00084C6E 0000 0000                  		dc.l 0
00084C72 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00084C76 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00084C7A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00084C7E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00084C82 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00084C86 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00084C8A                            ; ===========================================================================
00084C8A                            ; ---------------------------------------------------------------------------
00084C8A                            ; Play GHZ waterfall sound
00084C8A                            ; ---------------------------------------------------------------------------
00084C8A                            ; Sound_D0toDF:
00084C8A                            Sound_PlaySpecial:
00084C8A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084C8E 6600 0000                  		bne.w	@locret			; Return if so
00084C92 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084C96 6600 0000                  		bne.w	@locret			; Exit if it is
00084C9A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084C9E 6600 0000                  		bne.w	@locret			; Exit if it is
00084CA2 2079 0008 42DC             		movea.l	(Go_SpecSoundIndex).l,a0
00084CA8 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00084CAC E54F                       		lsl.w	#2,d7
00084CAE 2670 7000                  		movea.l	(a0,d7.w),a3
00084CB2 224B                       		movea.l	a3,a1
00084CB4 7000                       		moveq	#0,d0
00084CB6 3019                       		move.w	(a1)+,d0			; Voice pointer
00084CB8 D08B                       		add.l	a3,d0				; Relative pointer
00084CBA 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00084CBE 1A19                       		move.b	(a1)+,d5			; Dividing timing
00084CC0                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00084CC0                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00084CC0 7E00                       		moveq	#0,d7	
00084CC2 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00084CC4 5307                       		subq.b	#1,d7
00084CC6 7C30                       		moveq	#TrackSz,d6
00084CC8                            ; loc_72348:
00084CC8                            @sfxloadloop:
00084CC8 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00084CCC 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00084CCE 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084CD4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00084CD8 6000                       		bra.s	@sfxinitpsg
00084CDA                            ; ===========================================================================
00084CDA                            ; loc_7235A:
00084CDA                            @sfxoverridepsg:
00084CDA 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084CE0 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00084CE4                            ; loc_72364:
00084CE4                            @sfxinitpsg:
00084CE4 244D                       		movea.l	a5,a2
00084CE6 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00084CE8                            ; loc_72368:
00084CE8                            @clearsfxtrackram:
00084CE8 429A                       		clr.l	(a2)+
00084CEA 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00084CEE                            
00084CEE 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00084CF0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00084CF4 7000                       		moveq	#0,d0
00084CF6 3019                       		move.w	(a1)+,d0			; Track data pointer
00084CF8 D08B                       		add.l	a3,d0				; Relative pointer
00084CFA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00084CFE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00084D02 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00084D08 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00084D0C 4A04                       		tst.b	d4				; Is this a PSG channel?
00084D0E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00084D10 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00084D16                            ; loc_72396:
00084D16                            @sfxpsginitdone:
00084D16 51CF FFB0                  		dbf	d7,@sfxloadloop
00084D1A                            
00084D1A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00084D1E 6A00                       		bpl.s	@doneoverride					; Branch if not
00084D20 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084D26                            ; loc_723A6:
00084D26                            @doneoverride:
00084D26 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00084D2A 6A00                       		bpl.s	@locret						; Branch if not
00084D2C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084D32 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00084D36 13C4 00C0 0011             		move.b	d4,(psg_input).l
00084D3C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00084D40 13C4 00C0 0011             		move.b	d4,(psg_input).l
00084D46                            ; locret_723C6:
00084D46                            @locret:
00084D46 4E75                       		rts	
00084D48                            ; End of function PlaySoundID
00084D48                            
00084D48                            ; ===========================================================================
00084D48                            ; ---------------------------------------------------------------------------
00084D48                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00084D48                            ; ---------------------------------------------------------------------------
00084D48                            ; The first block would have been used for overriding the music tracks
00084D48                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00084D48                            ; The third block would be used to set up the Special SFX
00084D48                            ; The second block, however, is for the SFX tracks, which have a higher priority
00084D48                            ; and would be checked for if they're currently playing
00084D48                            ; If they are, then the third block would be used again, this time to mark
00084D48                            ; the new tracks as 'currently playing'
00084D48                            
00084D48                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00084D48                            
00084D48                            ; BGMFM4PSG3RAM:
00084D48                            ;SpecSFX_BGMChannelRAM:
00084D48 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00084D4C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00084D50                            ; SFXFM4PSG3RAM:
00084D50                            ;SpecSFX_SFXChannelRAM:
00084D50 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00084D54 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00084D58                            ; SpecialSFXFM4PSG3RAM:
00084D58                            ;SpecSFX_SpecSFXChannelRAM:
00084D58 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00084D5C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00084D60                            
00084D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D60                            
00084D60                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00084D60                            StopSFX:
00084D60 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084D62 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084D66 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00084D68                            ; loc_723EA:
00084D68                            @trackloop:
00084D68 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00084D6A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00084D6E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00084D72 7600                       		moveq	#0,d3
00084D74 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00084D78 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00084D7A 4EBA 0000                  		jsr	FMNoteOff(pc)
00084D7E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00084D82 6600                       		bne.s	@getfmpointer					; Branch if not
00084D84 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00084D88 6A00                       		bpl.s	@getfmpointer					; Branch if not
00084D8A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00084D8A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00084D8A                            		; is playing its sound!
00084D8A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00084D8E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00084D92 6000                       		bra.s	@gotfmpointer
00084D94                            ; ===========================================================================
00084D94                            ; loc_72416:
00084D94                            @getfmpointer:
00084D94 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00084D96 E50B                       		lsl.b	#2,d3
00084D98 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00084D9C 264D                       		movea.l	a5,a3
00084D9E 2A70 3000                  		movea.l	(a0,d3.w),a5
00084DA2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00084DA6                            ; loc_72428:
00084DA6                            @gotfmpointer:
00084DA6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084DAA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00084DAE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00084DB2 4EBA 0000                  		jsr	SetVoice(pc)
00084DB6 2A4B                       		movea.l	a3,a5
00084DB8 6000                       		bra.s	@nexttrack
00084DBA                            ; ===========================================================================
00084DBA                            ; loc_7243C:
00084DBA                            @trackpsg:
00084DBA 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084DBE 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00084DC2 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00084DC6 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00084DC8 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00084DCC 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00084DCE E60B                       		lsr.b	#3,d3
00084DD0 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00084DD4 2070 3000                  		movea.l	(a0,d3.w),a0
00084DD8                            ; loc_7245A:
00084DD8                            @gotpsgpointer:
00084DD8 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084DDC 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00084DE0 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00084DE6 6600                       		bne.s	@nexttrack			; Branch if not
00084DE8 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00084DF0                            ; loc_72472:
00084DF0                            @nexttrack:
00084DF0 DAFC 0030                  		adda.w	#TrackSz,a5
00084DF4 51CF FF72                  		dbf	d7,@trackloop
00084DF8                            
00084DF8 4E75                       		rts	
00084DFA                            ; End of function StopSFX
00084DFA                            
00084DFA                            
00084DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DFA                            
00084DFA                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00084DFA                            StopSpecialSFX:
00084DFA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00084DFE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E00 6A00                       		bpl.s	@fadedfm		; Branch if not
00084E02 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00084E06 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00084E0A 6600                       		bne.s	@fadedfm		; Branch if not
00084E0C 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00084E10 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00084E14 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084E18 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00084E1C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E1E 6A00                       		bpl.s	@fadedfm		; Branch if not
00084E20 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00084E24 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00084E28 4EBA 0000                  		jsr	SetVoice(pc)
00084E2C                            ; loc_724AE:
00084E2C                            @fadedfm:
00084E2C 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00084E30 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E32 6A00                       		bpl.s	@fadedpsg		; Branch if not
00084E34 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00084E38 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00084E3C 6600                       		bne.s	@fadedpsg		; Return if not
00084E3E 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00084E42 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00084E46 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084E4A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00084E4E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E50 6A00                       		bpl.s	@fadedpsg		; Return if not
00084E52 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00084E58 6600                       		bne.s	@fadedpsg			; Return if not
00084E5A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00084E62                            ; locret_724E4:
00084E62                            @fadedpsg:
00084E62 4E75                       		rts	
00084E64                            ; End of function StopSpecialSFX
00084E64                            
00084E64                            ; ===========================================================================
00084E64                            ; ---------------------------------------------------------------------------
00084E64                            ; Fade out music
00084E64                            ; ---------------------------------------------------------------------------
00084E64                            ; Sound_E0:
00084E64                            FadeOutMusic:
00084E64 4EBA FEFA                  		jsr	StopSFX(pc)
00084E68 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00084E6C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00084E72 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00084E78 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00084E7C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00084E80 4E75                       		rts	
00084E82                            
00084E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E82                            
00084E82                            ; sub_72504:
00084E82                            DoFadeOut:
00084E82 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00084E86 6700                       		beq.s	@continuefade		; Branch if yes
00084E88 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00084E8C 4E75                       		rts	
00084E8E                            ; ===========================================================================
00084E8E                            ; loc_72510:
00084E8E                            @continuefade:
00084E8E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00084E92 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00084E96 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00084E9C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084EA0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084EA2                            ; loc_72524:
00084EA2                            @fmloop:
00084EA2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084EA4 6A00                       		bpl.s	@nextfm			; Branch if not
00084EA6 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00084EAA 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00084EAC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00084EB0 6000                       		bra.s	@nextfm
00084EB2                            ; ===========================================================================
00084EB2                            ; loc_72534:
00084EB2                            @sendfmtl:
00084EB2 4EBA 0000                  		jsr	SendVoiceTL(pc)
00084EB6                            ; loc_72538:
00084EB6                            @nextfm:
00084EB6 DAFC 0030                  		adda.w	#TrackSz,a5
00084EBA 51CF FFE6                  		dbf	d7,@fmloop
00084EBE                            
00084EBE 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00084EC0                            ; loc_72542:
00084EC0                            @psgloop:
00084EC0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084EC2 6A00                       		bpl.s	@nextpsg		; branch if not
00084EC4 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00084EC8 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00084ECE 6500                       		blo.s	@sendpsgvol		; Branch if not
00084ED0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00084ED4 6000                       		bra.s	@nextpsg
00084ED6                            ; ===========================================================================
00084ED6                            ; loc_72558:
00084ED6                            @sendpsgvol:
00084ED6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00084EDA 4EBA 0000                  		jsr	SetPSGVolume(pc)
00084EDE                            ; loc_72560:
00084EDE                            @nextpsg:
00084EDE DAFC 0030                  		adda.w	#TrackSz,a5
00084EE2 51CF FFDC                  		dbf	d7,@psgloop
00084EE6                            
00084EE6 4E75                       		rts	
00084EE8                            ; End of function DoFadeOut
00084EE8                            
00084EE8                            
00084EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EE8                            
00084EE8                            ; sub_7256A:
00084EE8                            FMSilenceAll:
00084EE8 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00084EEA 7028                       		moveq	#$28,d0		; FM key on/off register
00084EEC                            ; loc_7256E:
00084EEC                            @noteoffloop:
00084EEC 1203                       		move.b	d3,d1
00084EEE 4EBA 0000                  		jsr	WriteFMI(pc)
00084EF2 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00084EF4 4EBA 0000                  		jsr	WriteFMI(pc)
00084EF8 51CB FFF2                  		dbf	d3,@noteoffloop
00084EFC                            
00084EFC 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00084EFE 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00084F00 7802                       		moveq	#2,d4		; ... for all 3 channels...
00084F02                            ; loc_72584:
00084F02                            @channelloop:
00084F02 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00084F04                            ; loc_72586:
00084F04                            @channeltlloop:
00084F04 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00084F08 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00084F0C 5840                       		addq.w	#4,d0		; Next TL operator
00084F0E 51CB FFF4                  		dbf	d3,@channeltlloop
00084F12                            
00084F12 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00084F16 51CC FFEA                  		dbf	d4,@channelloop
00084F1A                            
00084F1A 4E75                       		rts	
00084F1C                            ; End of function FMSilenceAll
00084F1C                            
00084F1C                            ; ===========================================================================
00084F1C                            ; ---------------------------------------------------------------------------
00084F1C                            ; Stop music
00084F1C                            ; ---------------------------------------------------------------------------
00084F1C                            ; Sound_E4: StopSoundAndMusic:
00084F1C                            StopAllSound:
00084F1C 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00084F1E 123C 0080                  		move.b	#$80,d1		; Enable DAC
00084F22 4EBA 0000                  		jsr	WriteFMI(pc)
00084F26 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00084F28 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00084F2A 4EBA 0000                  		jsr	WriteFMI(pc)
00084F2E 204E                       		movea.l	a6,a0
00084F30                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00084F30                            		; Remove the '-$10' to fix this.
00084F30 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00084F34                            ; loc_725B6:
00084F34                            @clearramloop:
00084F34 4298                       		clr.l	(a0)+
00084F36 51C8 FFFC                  		dbf	d0,@clearramloop
00084F3A                            
00084F3A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00084F40 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00084F44 6000 0000                  		bra.w	PSGSilenceAll
00084F48                            
00084F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F48                            
00084F48                            ; sub_725CA:
00084F48                            InitMusicPlayback:
00084F48 204E                       		movea.l	a6,a0
00084F4A                            		; Save several values
00084F4A 1216                       		move.b	v_sndprio(a6),d1
00084F4C 142E 0027                  		move.b	f_1up_playing(a6),d2
00084F50 162E 002A                  		move.b	f_speedup(a6),d3
00084F54 182E 0026                  		move.b	v_fadein_counter(a6),d4
00084F58                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00084F58 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00084F5C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00084F60                            ; loc_725E4:
00084F60                            @clearramloop:
00084F60 4298                       		clr.l	(a0)+
00084F62 51C8 FFFC                  		dbf	d0,@clearramloop
00084F66                            
00084F66                            		; Restore the values saved above
00084F66 1C81                       		move.b	d1,v_sndprio(a6)
00084F68 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00084F6C 1D43 002A                  		move.b	d3,f_speedup(a6)
00084F70 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00084F74 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00084F78 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00084F7E                            		; DANGER! This silences ALL channels, even the ones being used
00084F7E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00084F7E                            		; doesn't affect SFX channels, either.
00084F7E                            		; This should be replaced with an 'rts'.
00084F7E 4EBA FF68                  		jsr	FMSilenceAll(pc)
00084F82 6000 0000                  		bra.w	PSGSilenceAll
00084F86                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00084F86                            		; don't do a very good job of setting up the music tracks.
00084F86                            		; Tracks that aren't defined in a music file's header don't have
00084F86                            		; their channels defined, meaning @sendfmnoteoff won't silence
00084F86                            		; hardware properly. In combination with removing the above
00084F86                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00084F86                            		; notes.
00084F86                            		; To fix this, I suggest using this code, instead of an 'rts':
00084F86                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00084F86                            		;lea	FMDACInitBytes(pc),a2
00084F86                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00084F86                            		;bsr.s	@writeloop
00084F86                            		;lea	PSGInitBytes(pc),a2
00084F86                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00084F86                            
00084F86                            ;@writeloop:
00084F86                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00084F86                            		;lea	TrackSz(a1),a1		; Next track
00084F86                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00084F86                            
00084F86                            		;rts
00084F86                            	
00084F86                            ; End of function InitMusicPlayback
00084F86                            
00084F86                            
00084F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F86                            
00084F86                            ; sub_7260C:
00084F86                            TempoWait:
00084F86 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00084F8C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00084F90 7030                       		moveq	#TrackSz,d0
00084F92 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00084F94                            ; loc_7261A:
00084F94                            @tempoloop:
00084F94 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00084F96 D0C0                       		adda.w	d0,a0	; Advance to next track
00084F98 51C9 FFFA                  		dbf	d1,@tempoloop
00084F9C                            
00084F9C 4E75                       		rts	
00084F9E                            ; End of function TempoWait
00084F9E                            
00084F9E                            ; ===========================================================================
00084F9E                            ; ---------------------------------------------------------------------------
00084F9E                            ; Speed	up music
00084F9E                            ; ---------------------------------------------------------------------------
00084F9E                            ; Sound_E2:
00084F9E                            SpeedUpMusic:
00084F9E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00084FA2 6600                       		bne.s	@speedup_1up
00084FA4 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00084FAA 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00084FB0 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00084FB6 4E75                       		rts	
00084FB8                            ; ===========================================================================
00084FB8                            ; loc_7263E:
00084FB8                            @speedup_1up:
00084FB8 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00084FBE 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00084FC4 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00084FCA 4E75                       		rts	
00084FCC                            ; ===========================================================================
00084FCC                            ; ---------------------------------------------------------------------------
00084FCC                            ; Change music back to normal speed
00084FCC                            ; ---------------------------------------------------------------------------
00084FCC                            ; Sound_E3:
00084FCC                            SlowDownMusic:
00084FCC 4A2E 0027                  		tst.b	f_1up_playing(a6)
00084FD0 6600                       		bne.s	@slowdown_1up
00084FD2 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00084FD8 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00084FDE 422E 002A                  		clr.b	f_speedup(a6)
00084FE2 4E75                       		rts	
00084FE4                            ; ===========================================================================
00084FE4                            ; loc_7266A:
00084FE4                            @slowdown_1up:
00084FE4 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00084FEA 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00084FF0 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00084FF4 4E75                       		rts	
00084FF6                            
00084FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FF6                            
00084FF6                            ; sub_7267C:
00084FF6                            DoFadeIn:
00084FF6 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00084FFA 6700                       		beq.s	@continuefade		; Branch if yes
00084FFC 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00085000 4E75                       		rts	
00085002                            ; ===========================================================================
00085002                            ; loc_72688:
00085002                            @continuefade:
00085002 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00085006 6700                       		beq.s	@fadedone		; Branch if yes
00085008 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
0008500C 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00085012 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085016 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085018                            ; loc_7269E:
00085018                            @fmloop:
00085018 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008501A 6A00                       		bpl.s	@nextfm			; Branch if not
0008501C 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085020 4EBA 0000                  		jsr	SendVoiceTL(pc)
00085024                            ; loc_726AA:
00085024                            @nextfm:
00085024 DAFC 0030                  		adda.w	#TrackSz,a5
00085028 51CF FFEE                  		dbf	d7,@fmloop
0008502C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
0008502E                            ; loc_726B4:
0008502E                            @psgloop:
0008502E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085030 6A00                       		bpl.s	@nextpsg		; Branch if not
00085032 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085036 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
0008503A 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
0008503E 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085040 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00085042                            ; loc_726C8:
00085042                            @sendpsgvol:
00085042 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085046                            ; loc_726CC:
00085046                            @nextpsg:
00085046 DAFC 0030                  		adda.w	#TrackSz,a5
0008504A 51CF FFE2                  		dbf	d7,@psgloop
0008504E 4E75                       		rts	
00085050                            ; ===========================================================================
00085050                            ; loc_726D6:
00085050                            @fadedone:
00085050 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00085056 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0008505A 4E75                       		rts	
0008505C                            ; End of function DoFadeIn
0008505C                            
0008505C                            ; ===========================================================================
0008505C                            ; loc_726E2:
0008505C                            FMNoteOn:
0008505C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00085060 6600                       		bne.s	@locret		; Return if so
00085062 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085066 6600                       		bne.s	@locret		; Return if so
00085068 7028                       		moveq	#$28,d0		; Note on/off register
0008506A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0008506E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00085072 6000 0000                  		bra.w	WriteFMI
00085076                            ; ===========================================================================
00085076                            ; locret_726FC:
00085076                            @locret:
00085076 4E75                       		rts	
00085078                            
00085078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085078                            
00085078                            ; sub_726FE:
00085078                            FMNoteOff:
00085078 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
0008507C 6600                       		bne.s	locret_72714	; Return if yes
0008507E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085082 6600                       		bne.s	locret_72714	; Return if yes
00085084                            ; loc_7270A:
00085084                            SendFMNoteOff:
00085084 7028                       		moveq	#$28,d0		; Note on/off register
00085086 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0008508A 6000 0000                  		bra.w	WriteFMI
0008508E                            ; ===========================================================================
0008508E                            
0008508E                            locret_72714:
0008508E 4E75                       		rts	
00085090                            ; End of function FMNoteOff
00085090                            
00085090                            ; ===========================================================================
00085090                            ; loc_72716:
00085090                            WriteFMIorIIMain:
00085090 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00085094 6600                       		bne.s	@locret		; Return if yes
00085096 6000 0000                  		bra.w	WriteFMIorII
0008509A                            ; ===========================================================================
0008509A                            ; locret_72720:
0008509A                            @locret:
0008509A 4E75                       		rts	
0008509C                            
0008509C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008509C                            
0008509C                            ; sub_72722:
0008509C                            WriteFMIorII:
0008509C 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
000850A2 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
000850A4 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
000850A8                            ; End of function WriteFMIorII
000850A8                            
000850A8                            
000850A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000850A8                            
000850A8                            ; The reason I think this is an *early* SMPS 68k Type 1b
000850A8                            ; is because this subroutine is the one from Type 1a:
000850A8                            ; other Type 1b drivers have a newer, optimised version.
000850A8                            ; The driver itself is Type 1b, with this odd exception.
000850A8                            
000850A8                            ; sub_7272E:
000850A8                            WriteFMI:
000850A8 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000850AE 0802 0007                  		btst	#7,d2		; Is FM busy?
000850B2 66F4                       		bne.s	WriteFMI	; Loop if so
000850B4 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
000850BA 4E71                       		nop	
000850BC 4E71                       		nop	
000850BE 4E71                       		nop	
000850C0                            ; loc_72746:
000850C0                            @waitloop:
000850C0 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000850C6 0802 0007                  		btst	#7,d2		; Is FM busy?
000850CA 66F4                       		bne.s	@waitloop	; Loop if so
000850CC                            
000850CC 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000850D2 4E75                       		rts	
000850D4                            ; End of function WriteFMI
000850D4                            
000850D4                            ; ===========================================================================
000850D4                            ; loc_7275A:
000850D4                            WriteFMIIPart:
000850D4 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000850D8 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000850DC D002                       		add.b	d2,d0			; Add in to destination register
000850DE                            
000850DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000850DE                            
000850DE                            ; sub_72764:
000850DE                            WriteFMII:
000850DE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000850E4 0802 0007                  		btst	#7,d2		; Is FM busy?
000850E8 66F4                       		bne.s	WriteFMII	; Loop if so
000850EA 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000850F0 4E71                       		nop	
000850F2 4E71                       		nop	
000850F4 4E71                       		nop	
000850F6                            ; loc_7277C:
000850F6                            @waitloop:
000850F6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000850FC 0802 0007                  		btst	#7,d2		; Is FM busy?
00085100 66F4                       		bne.s	@waitloop	; Loop if so
00085102                            
00085102 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00085108 4E75                       		rts	
0008510A                            ; End of function WriteFMII
0008510A                            
0008510A                            ; ===========================================================================
0008510A                            ; ---------------------------------------------------------------------------
0008510A                            ; FM Note Values: b-0 to a#8
0008510A                            ; ---------------------------------------------------------------------------
0008510A                            ; word_72790: FM_Notes:
0008510A                            FMFrequencies:
0008510A 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00085122 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
0008513A 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00085152 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0008516A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00085182 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0008519A 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
000851B2 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000851CA                            
000851CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851CA                            
000851CA                            ; sub_72850:
000851CA                            PSGUpdateTrack:
000851CA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000851CE 6600                       		bne.s	@notegoing
000851D0 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000851D4 4EBA 0000                  		jsr	PSGDoNext(pc)
000851D8 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000851DC 6000 0000                  		bra.w	PSGDoVolFX
000851E0                            ; ===========================================================================
000851E0                            ; loc_72866:
000851E0                            @notegoing:
000851E0 4EBA F518                  		jsr	NoteTimeoutUpdate(pc)
000851E4 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000851E8 4EBA F538                  		jsr	DoModulation(pc)
000851EC 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000851F0 4E75                       		rts
000851F2                            ; End of function PSGUpdateTrack
000851F2                            
000851F2                            
000851F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851F2                            
000851F2                            ; sub_72878:
000851F2                            PSGDoNext:
000851F2 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000851F6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000851FA                            ; loc_72880:
000851FA                            @noteloop:
000851FA 7A00                       		moveq	#0,d5
000851FC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000851FE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00085202 6500                       		blo.s	@gotnote	; Branch if not
00085204 4EBA 0000                  		jsr	CoordFlag(pc)
00085208 60F0                       		bra.s	@noteloop
0008520A                            ; ===========================================================================
0008520A                            ; loc_72890:
0008520A                            @gotnote:
0008520A 4A05                       		tst.b	d5		; Is it a note?
0008520C 6A00                       		bpl.s	@gotduration	; Branch if not
0008520E 4EBA 0000                  		jsr	PSGSetFreq(pc)
00085212 1A1C                       		move.b	(a4)+,d5	; Get another byte
00085214 4A05                       		tst.b	d5		; Is it a duration?
00085216 6A00                       		bpl.s	@gotduration	; Branch if yes
00085218 534C                       		subq.w	#1,a4		; Put byte back
0008521A 6000 F4A0                  		bra.w	FinishTrackUpdate
0008521E                            ; ===========================================================================
0008521E                            ; loc_728A4:
0008521E                            @gotduration:
0008521E 4EBA F47C                  		jsr	SetDuration(pc)
00085222 6000 F498                  		bra.w	FinishTrackUpdate
00085226                            ; End of function PSGDoNext
00085226                            
00085226                            
00085226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085226                            
00085226                            ; sub_728AC:
00085226                            PSGSetFreq:
00085226 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
0008522A 6500                       		bcs.s	@restpsg	; If $80, put track at rest
0008522C DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085230 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00085234 E34D                       		lsl.w	#1,d5
00085236 41FA 0000                  		lea	PSGFrequencies(pc),a0
0008523A 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085240 6000 F47A                  		bra.w	FinishTrackUpdate
00085244                            ; ===========================================================================
00085244                            ; loc_728CA:
00085244                            @restpsg:
00085244 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085248 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0008524E 4EBA F46C                  		jsr	FinishTrackUpdate(pc)
00085252 6000 0000                  		bra.w	PSGNoteOff
00085256                            ; End of function PSGSetFreq
00085256                            
00085256                            
00085256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085256                            
00085256                            ; sub_728DC:
00085256                            PSGDoNoteOn:
00085256 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0008525A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0008525C                            ; End of function PSGDoNoteOn
0008525C                            
0008525C                            
0008525C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008525C                            
0008525C                            ; sub_728E2:
0008525C                            PSGUpdateFreq:
0008525C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085260 4880                       		ext.w	d0
00085262 DC40                       		add.w	d0,d6		; Add to frequency
00085264 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085268 6600                       		bne.s	@locret		; Return if yes
0008526A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0008526E 6600                       		bne.s	@locret		; Return if yes
00085270 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00085274 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085278 6600                       		bne.s	@notnoise	; Branch if not
0008527A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0008527E                            ; loc_72904:
0008527E                            @notnoise:
0008527E 3206                       		move.w	d6,d1
00085280 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00085284 8001                       		or.b	d1,d0		; Latch tone data to channel
00085286 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085288 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0008528C 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085292 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085298                            ; locret_7291E:
00085298                            @locret:
00085298 4E75                       		rts	
0008529A                            ; End of function PSGUpdateFreq
0008529A                            
0008529A                            ; ===========================================================================
0008529A                            ; loc_72920:
0008529A                            PSGSetRest:
0008529A 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
0008529E 4E75                       		rts	
000852A0                            
000852A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000852A0                            
000852A0                            ; sub_72926:
000852A0                            PSGUpdateVolFX:
000852A0 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
000852A4 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
000852A8                            ; loc_7292E:
000852A8                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
000852A8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
000852AC 7000                       		moveq	#0,d0
000852AE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
000852B2 6700                       		beq.s	SetPSGVolume
000852B4 2079 0008 42EC             		movea.l	(Go_PSGIndex).l,a0
000852BA 5340                       		subq.w	#1,d0
000852BC E548                       		lsl.w	#2,d0
000852BE 2070 0000                  		movea.l	(a0,d0.w),a0
000852C2 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
000852C6 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000852CA 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000852CE 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000852D2 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000852D4 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000852D8 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000852DA                            ; loc_72960:
000852DA                            @gotflutter:
000852DA DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000852DC 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000852E0 6500                       		blo.s	SetPSGVolume	; Branch if not
000852E2 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000852E4                            ; End of function PSGUpdateVolFX
000852E4                            
000852E4                            
000852E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000852E4                            
000852E4                            ; sub_7296A:
000852E4                            SetPSGVolume:
000852E4 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000852E8 6600                       		bne.s	locret_7298A	; Return if so
000852EA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000852EE 6600                       		bne.s	locret_7298A	; Return if so
000852F0 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000852F4 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000852F6                            ; loc_7297C:
000852F6                            PSGSendVolume:
000852F6 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000852FA 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000852FE 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085304                            
00085304                            locret_7298A:
00085304 4E75                       		rts	
00085306                            ; ===========================================================================
00085306                            ; loc_7298C: PSGCheckNoteFill:
00085306                            PSGCheckNoteTimeout:
00085306 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0008530A 67EA                       		beq.s	PSGSendVolume			; Branch if not
0008530C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00085310 66E4                       		bne.s	PSGSendVolume			; Branch if not
00085312 4E75                       		rts	
00085314                            ; End of function SetPSGVolume
00085314                            
00085314                            ; ===========================================================================
00085314                            ; loc_7299A: FlutterDone:
00085314                            VolEnvHold:
00085314 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00085318 4E75                       		rts	
0008531A                            
0008531A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008531A                            
0008531A                            ; sub_729A0:
0008531A                            PSGNoteOff:
0008531A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008531E 6600                       		bne.s	locret_729B4	; Return if so
00085320                            ; loc_729A6:
00085320                            SendPSGNoteOff:
00085320 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00085324 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085328 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008532E                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0008532E                            		; risk of music accidentally playing noise because it can't detect if
0008532E                            		; the PSG4/noise channel needs muting on track initialisation.
0008532E                            		; S&K's driver fixes it by doing this:
0008532E 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00085332 6600                       		bne.s	locret_729B4
00085334 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
0008533C                            
0008533C                            locret_729B4:
0008533C 4E75                       		rts	
0008533E                            ; End of function PSGNoteOff
0008533E                            
0008533E                            
0008533E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008533E                            
0008533E                            ; sub_729B6:
0008533E                            PSGSilenceAll:
0008533E 41F9 00C0 0011             		lea	(psg_input).l,a0
00085344 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085348 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
0008534C 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085350 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085354 4E75                       		rts	
00085356                            ; End of function PSGSilenceAll
00085356                            
00085356                            ; ===========================================================================
00085356                            ; word_729CE:
00085356                            PSGFrequencies:
00085356 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085366 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085376 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085386 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085396 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000853A6 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000853B6 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
000853C6 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000853D6 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000853E2                            
000853E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000853E2                            
000853E2                            ; sub_72A5A:
000853E2                            CoordFlag:
000853E2 0445 00E0                  		subi.w	#$E0,d5
000853E6 E54D                       		lsl.w	#2,d5
000853E8 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000853EC                            ; End of function CoordFlag
000853EC                            
000853EC                            ; ===========================================================================
000853EC                            ; loc_72A64:
000853EC                            coordflagLookup:
000853EC 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000853F0                            ; ===========================================================================
000853F0 6000 0000                  		bra.w	cfDetune		; $E1
000853F4                            ; ===========================================================================
000853F4 6000 0000                  		bra.w	cfSetCommunication	; $E2
000853F8                            ; ===========================================================================
000853F8 6000 0000                  		bra.w	cfJumpReturn		; $E3
000853FC                            ; ===========================================================================
000853FC 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085400                            ; ===========================================================================
00085400 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085404                            ; ===========================================================================
00085404 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085408                            ; ===========================================================================
00085408 6000 0000                  		bra.w	cfHoldNote		; $E7
0008540C                            ; ===========================================================================
0008540C 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085410                            ; ===========================================================================
00085410 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085414                            ; ===========================================================================
00085414 6000 0000                  		bra.w	cfSetTempo		; $EA
00085418                            ; ===========================================================================
00085418 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0008541C                            ; ===========================================================================
0008541C 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085420                            ; ===========================================================================
00085420 6000 0000                  		bra.w	cfClearPush		; $ED
00085424                            ; ===========================================================================
00085424 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085428                            ; ===========================================================================
00085428 6000 0000                  		bra.w	cfSetVoice		; $EF
0008542C                            ; ===========================================================================
0008542C 6000 0000                  		bra.w	cfModulation		; $F0
00085430                            ; ===========================================================================
00085430 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085434                            ; ===========================================================================
00085434 6000 0000                  		bra.w	cfStopTrack		; $F2
00085438                            ; ===========================================================================
00085438 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
0008543C                            ; ===========================================================================
0008543C 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085440                            ; ===========================================================================
00085440 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085444                            ; ===========================================================================
00085444 6000 0000                  		bra.w	cfJumpTo		; $F6
00085448                            ; ===========================================================================
00085448 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0008544C                            ; ===========================================================================
0008544C 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085450                            ; ===========================================================================
00085450 6000 0000                  		bra.w	cfOpF9			; $F9
00085454                            ; ===========================================================================
00085454                            ; loc_72ACC:
00085454                            cfPanningAMSFMS:
00085454 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085456 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0008545A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0008545C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085460 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085464 8200                       		or.b	d0,d1			; Mask in new value
00085466 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0008546A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0008546E 6000 FC20                  		bra.w	WriteFMIorIIMain
00085472                            ; ===========================================================================
00085472                            
00085472                            locret_72AEA:
00085472 4E75                       		rts	
00085474                            ; ===========================================================================
00085474                            ; loc_72AEC: cfAlterNotes:
00085474                            cfDetune:
00085474 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085478 4E75                       		rts	
0008547A                            ; ===========================================================================
0008547A                            ; loc_72AF2: cfUnknown1:
0008547A                            cfSetCommunication:
0008547A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0008547E 4E75                       		rts	
00085480                            ; ===========================================================================
00085480                            ; loc_72AF8:
00085480                            cfJumpReturn:
00085480 7000                       		moveq	#0,d0
00085482 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085486 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0008548A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085492 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085494 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085496 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0008549A 4E75                       		rts	
0008549C                            ; ===========================================================================
0008549C                            ; loc_72B14:
0008549C                            cfFadeInToPrevious:
0008549C 204E                       		movea.l	a6,a0
0008549E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000854A2 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000854A6                            ; loc_72B1E:
000854A6                            @restoreramloop:
000854A6 20D9                       		move.l	(a1)+,(a0)+
000854A8 51C8 FFFC                  		dbf	d0,@restoreramloop
000854AC                            
000854AC 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000854B2 264D                       		movea.l	a5,a3
000854B4 1C3C 0028                  		move.b	#$28,d6
000854B8 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000854BC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000854BE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000854C2                            ; loc_72B3A:
000854C2                            @fmloop:
000854C2 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000854C6 6700                       		beq.s	@nextfm		; Branch if not
000854C8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000854CC DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000854D0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000854D4 6600                       		bne.s	@nextfm		; Branch if yes
000854D6 7000                       		moveq	#0,d0
000854D8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000854DC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000854E0 4EBA 0000                  		jsr	SetVoice(pc)
000854E4                            ; loc_72B5C:
000854E4                            @nextfm:
000854E4 DAFC 0030                  		adda.w	#TrackSz,a5
000854E8 51CF FFD8                  		dbf	d7,@fmloop
000854EC                            
000854EC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000854EE                            ; loc_72B66:
000854EE                            @psgloop:
000854EE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000854F2 6700                       		beq.s	@nextpsg	; Branch if not
000854F4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000854F8 4EBA FE20                  		jsr	PSGNoteOff(pc)
000854FC DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085500                            ; loc_72B78:
00085500                            @nextpsg:
00085500 DAFC 0030                  		adda.w	#TrackSz,a5
00085504 51CF FFE8                  		dbf	d7,@psgloop
00085508                            		
00085508 2A4B                       		movea.l	a3,a5
0008550A 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085510 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085516 422E 0027                  		clr.b	f_1up_playing(a6)
0008551A 33FC 0000 00A1 1100        		startZ80
00085522 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085524 4E75                       		rts	
00085526                            ; ===========================================================================
00085526                            ; loc_72B9E:
00085526                            cfSetTempoDivider:
00085526 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
0008552A 4E75                       		rts	
0008552C                            ; ===========================================================================
0008552C                            ; loc_72BA4: cfSetVolume:
0008552C                            cfChangeFMVolume:
0008552C 101C                       		move.b	(a4)+,d0		; Get parameter
0008552E D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085532 6000 0000                  		bra.w	SendVoiceTL
00085536                            ; ===========================================================================
00085536                            ; loc_72BAE: cfPreventAttack:
00085536                            cfHoldNote:
00085536 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
0008553A 4E75                       		rts	
0008553C                            ; ===========================================================================
0008553C                            ; loc_72BB4: cfNoteFill
0008553C                            cfNoteTimeout:
0008553C 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085540 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085544 4E75                       		rts	
00085546                            ; ===========================================================================
00085546                            ; loc_72BBE: cfAddKey:
00085546                            cfChangeTransposition:
00085546 101C                       		move.b	(a4)+,d0		; Get parameter
00085548 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
0008554C 4E75                       		rts	
0008554E                            ; ===========================================================================
0008554E                            ; loc_72BC6:
0008554E                            cfSetTempo:
0008554E 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085552 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085556 4E75                       		rts	
00085558                            ; ===========================================================================
00085558                            ; loc_72BD0: cfSetTempoMod:
00085558                            cfSetTempoDividerAll:
00085558 41EE 0040                  		lea	v_music_track_ram(a6),a0
0008555C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0008555E 7230                       		moveq	#TrackSz,d1
00085560 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085562                            ; loc_72BDA:
00085562                            @trackloop:
00085562 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085566 D0C1                       		adda.w	d1,a0
00085568 51CA FFF8                  		dbf	d2,@trackloop
0008556C                            
0008556C 4E75                       		rts	
0008556E                            ; ===========================================================================
0008556E                            ; loc_72BE6: cfChangeVolume:
0008556E                            cfChangePSGVolume:
0008556E 101C                       		move.b	(a4)+,d0		; Get volume change
00085570 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085574 4E75                       		rts	
00085576                            ; ===========================================================================
00085576                            ; loc_72BEE:
00085576                            cfClearPush:
00085576 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0008557A 4E75                       		rts	
0008557C                            ; ===========================================================================
0008557C                            ; loc_72BF4:
0008557C                            cfStopSpecialFM4:
0008557C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085580 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085584 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085588 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0008558C 6B00                       		bmi.s	@locexit					; Branch if yes
0008558E 264D                       		movea.l	a5,a3
00085590 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085594 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085598 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008559C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000855A0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000855A4 4EBA 0000                  		jsr	SetVoice(pc)
000855A8 2A4B                       		movea.l	a3,a5
000855AA                            ; loc_72C22:
000855AA                            @locexit:
000855AA 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
000855AC 4E75                       		rts	
000855AE                            ; ===========================================================================
000855AE                            ; loc_72C26:
000855AE                            cfSetVoice:
000855AE 7000                       		moveq	#0,d0
000855B0 101C                       		move.b	(a4)+,d0		; Get new voice
000855B2 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
000855B6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000855BA 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000855BE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000855C2 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
000855C6 6700                       		beq.s	SetVoice		; If yes, branch
000855C8 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
000855CC 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
000855D0 6B00                       		bmi.s	SetVoice		; If yes, branch
000855D2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
000855D6                            
000855D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855D6                            
000855D6                            ; sub_72C4E:
000855D6                            SetVoice:
000855D6 5340                       		subq.w	#1,d0
000855D8 6B00                       		bmi.s	@havevoiceptr
000855DA 323C 0019                  		move.w	#25,d1
000855DE                            ; loc_72C56:
000855DE                            @voicemultiply:
000855DE D2C1                       		adda.w	d1,a1
000855E0 51C8 FFFC                  		dbf	d0,@voicemultiply
000855E4                            ; loc_72C5C:
000855E4                            @havevoiceptr:
000855E4 1219                       		move.b	(a1)+,d1		; feedback/algorithm
000855E6 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
000855EA 1801                       		move.b	d1,d4
000855EC 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000855F0 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000855F4 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000855F8 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000855FA                            ; loc_72C72:
000855FA                            @sendvoiceloop:
000855FA 101A                       		move.b	(a2)+,d0
000855FC 1219                       		move.b	(a1)+,d1
000855FE 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085602 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085606                            
00085606 7A03                       		moveq	#3,d5
00085608 0244 0007                  		andi.w	#7,d4			; Get algorithm
0008560C 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085610 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085614                            ; loc_72C8C:
00085614                            @sendtlloop:
00085614 101A                       		move.b	(a2)+,d0
00085616 1219                       		move.b	(a1)+,d1
00085618 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0008561A 6400                       		bcc.s	@sendtl		; Branch if not
0008561C D203                       		add.b	d3,d1		; Include additional attenuation
0008561E                            ; loc_72C96:
0008561E                            @sendtl:
0008561E 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085622 51CD FFF0                  		dbf	d5,@sendtlloop
00085626                            		
00085626 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
0008562A 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
0008562E 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085632                            
00085632                            locret_72CAA:
00085632 4E75                       		rts	
00085634                            ; End of function SetVoice
00085634                            
00085634                            ; ===========================================================================
00085634                            ; byte_72CAC:
00085634 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008563C                            
0008563C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008563C                            
0008563C                            ; sub_72CB4:
0008563C                            SendVoiceTL:
0008563C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085640 6600                       		bne.s	@locret		; Return if so
00085642 7000                       		moveq	#0,d0
00085644 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085648 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0008564C 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085650 6700                       		beq.s	@gotvoiceptr
00085652                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085652                            		; of a6!
00085652 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085656 4A2E 000E                  		tst.b	f_voice_selector(a6)
0008565A 6B00                       		bmi.s	@gotvoiceptr
0008565C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085660                            ; loc_72CD8:
00085660                            @gotvoiceptr:
00085660 5340                       		subq.w	#1,d0
00085662 6B00                       		bmi.s	@gotvoice
00085664 323C 0019                  		move.w	#25,d1
00085668                            ; loc_72CE0:
00085668                            @voicemultiply:
00085668 D2C1                       		adda.w	d1,a1
0008566A 51C8 FFFC                  		dbf	d0,@voicemultiply
0008566E                            ; loc_72CE6:
0008566E                            @gotvoice:
0008566E D2FC 0015                  		adda.w	#21,a1				; Want TL
00085672 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085676 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0008567A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0008567E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085682 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085686 6B00                       		bmi.s	@locret				; If negative, stop
00085688 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0008568A                            ; loc_72D02:
0008568A                            @sendtlloop:
0008568A 101A                       		move.b	(a2)+,d0
0008568C 1219                       		move.b	(a1)+,d1
0008568E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085690 6400                       		bcc.s	@senttl		; Branch if not
00085692 D203                       		add.b	d3,d1		; Include additional attenuation
00085694 6500                       		bcs.s	@senttl		; Branch on overflow
00085696 4EBA FA04                  		jsr	WriteFMIorII(pc)
0008569A                            ; loc_72D12:
0008569A                            @senttl:
0008569A 51CD FFEE                  		dbf	d5,@sendtlloop
0008569E                            ; locret_72D16:
0008569E                            @locret:
0008569E 4E75                       		rts	
000856A0                            ; End of function SendVoiceTL
000856A0                            
000856A0                            ; ===========================================================================
000856A0                            ; byte_72D18:
000856A0                            FMInstrumentOperatorTable:
000856A0 30                         		dc.b  $30		; Detune/multiple operator 1
000856A1 38                         		dc.b  $38		; Detune/multiple operator 3
000856A2 34                         		dc.b  $34		; Detune/multiple operator 2
000856A3 3C                         		dc.b  $3C		; Detune/multiple operator 4
000856A4 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
000856A5 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
000856A6 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
000856A7 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
000856A8 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
000856A9 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
000856AA 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
000856AB 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
000856AC 70                         		dc.b  $70		; Secondary decay rate operator 1
000856AD 78                         		dc.b  $78		; Secondary decay rate operator 3
000856AE 74                         		dc.b  $74		; Secondary decay rate operator 2
000856AF 7C                         		dc.b  $7C		; Secondary decay rate operator 4
000856B0 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
000856B1 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
000856B2 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
000856B3 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
000856B4                            FMInstrumentOperatorTable_End
000856B4                            ; byte_72D2C:
000856B4                            FMInstrumentTLTable:
000856B4 40                         		dc.b  $40		; Total level operator 1
000856B5 48                         		dc.b  $48		; Total level operator 3
000856B6 44                         		dc.b  $44		; Total level operator 2
000856B7 4C                         		dc.b  $4C		; Total level operator 4
000856B8                            FMInstrumentTLTable_End
000856B8                            ; ===========================================================================
000856B8                            ; loc_72D30:
000856B8                            cfModulation:
000856B8 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000856BC 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000856C0 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
000856C4 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
000856C8 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
000856CC 101C                       		move.b	(a4)+,d0			; Modulation steps...
000856CE E208                       		lsr.b	#1,d0				; ... divided by 2...
000856D0 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
000856D4 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
000856D8 4E75                       		rts	
000856DA                            ; ===========================================================================
000856DA                            ; loc_72D52:
000856DA                            cfEnableModulation:
000856DA 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
000856DE 4E75                       		rts	
000856E0                            ; ===========================================================================
000856E0                            ; loc_72D58:
000856E0                            cfStopTrack:
000856E0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000856E4 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000856E8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000856EC 6B00                       		bmi.s	@stoppsg		; Branch if yes
000856EE 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000856F2 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000856F6 4EBA F980                  		jsr	FMNoteOff(pc)
000856FA 6000                       		bra.s	@stoppedchannel
000856FC                            ; ===========================================================================
000856FC                            ; loc_72D74:
000856FC                            @stoppsg:
000856FC 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085700                            ; loc_72D78:
00085700                            @stoppedchannel:
00085700 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085704 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085708 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008570A 7000                       		moveq	#0,d0
0008570C 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085710 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085712 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085716 264D                       		movea.l	a5,a3
00085718 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0008571C 6600                       		bne.s	@getpointer		; Branch if not
0008571E 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085722 6A00                       		bpl.s	@getpointer		; Branch if not
00085724 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085728 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0008572C 6000                       		bra.s	@gotpointer
0008572E                            ; ===========================================================================
0008572E                            ; loc_72DA8:
0008572E                            @getpointer:
0008572E 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085730 E508                       		lsl.b	#2,d0
00085732 2A70 0000                  		movea.l	(a0,d0.w),a5
00085736 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085738 6A00                       		bpl.s	@novoiceupd		; Branch if not
0008573A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
0008573E                            ; loc_72DB8:
0008573E                            @gotpointer:
0008573E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085742 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085746 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008574A 4EBA FE8A                  		jsr	SetVoice(pc)
0008574E                            ; loc_72DC8:
0008574E                            @novoiceupd:
0008574E 2A4B                       		movea.l	a3,a5
00085750 6000                       		bra.s	@locexit
00085752                            ; ===========================================================================
00085752                            ; loc_72DCC:
00085752                            @getpsgptr:
00085752 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085756 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085758 6A00                       		bpl.s	@getchannelptr	; Branch if not
0008575A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0008575E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085760 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085764 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085766                            ; loc_72DE0:
00085766                            @getchannelptr:
00085766 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0008576A E608                       		lsr.b	#3,d0
0008576C 2070 0000                  		movea.l	(a0,d0.w),a0
00085770                            ; loc_72DEA:
00085770                            @gotchannelptr:
00085770 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085774 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085778 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0008577E 6600                       		bne.s	@locexit			; Branch if not
00085780 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085788                            ; loc_72E02:
00085788                            @locexit:
00085788 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0008578A 4E75                       		rts	
0008578C                            ; ===========================================================================
0008578C                            ; loc_72E06:
0008578C                            cfSetPSGNoise:
0008578C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085792 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085796 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
0008579A 6600                       		bne.s	@locret				; Return if yes
0008579C 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000857A4                            ; locret_72E1E:
000857A4                            @locret:
000857A4 4E75                       		rts	
000857A6                            ; ===========================================================================
000857A6                            ; loc_72E20:
000857A6                            cfDisableModulation:
000857A6 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000857AA 4E75                       		rts	
000857AC                            ; ===========================================================================
000857AC                            ; loc_72E26:
000857AC                            cfSetPSGTone:
000857AC 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000857B0 4E75                       		rts	
000857B2                            ; ===========================================================================
000857B2                            ; loc_72E2C:
000857B2                            cfJumpTo:
000857B2 101C                       		move.b	(a4)+,d0	; High byte of offset
000857B4 E148                       		lsl.w	#8,d0		; Shift it into place
000857B6 101C                       		move.b	(a4)+,d0	; Low byte of offset
000857B8 D8C0                       		adda.w	d0,a4		; Add to current position
000857BA 534C                       		subq.w	#1,a4		; Put back one byte
000857BC 4E75                       		rts	
000857BE                            ; ===========================================================================
000857BE                            ; loc_72E38:
000857BE                            cfRepeatAtPos:
000857BE 7000                       		moveq	#0,d0
000857C0 101C                       		move.b	(a4)+,d0			; Loop index
000857C2 121C                       		move.b	(a4)+,d1			; Repeat count
000857C4 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
000857C8 6600                       		bne.s	@loopexists			; Branch if yes
000857CA 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
000857CE                            ; loc_72E48:
000857CE                            @loopexists:
000857CE 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
000857D2 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
000857D4 544C                       		addq.w	#2,a4				; Skip target address
000857D6 4E75                       		rts	
000857D8                            ; ===========================================================================
000857D8                            ; loc_72E52:
000857D8                            cfJumpToGosub:
000857D8 7000                       		moveq	#0,d0
000857DA 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
000857DE 5900                       		subq.b	#4,d0				; Add space for another target
000857E0 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
000857E4 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
000857E8 60C8                       		bra.s	cfJumpTo
000857EA                            ; ===========================================================================
000857EA                            ; loc_72E64:
000857EA                            cfOpF9:
000857EA 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
000857EE 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000857F2 4EBA F8B4                  		jsr	WriteFMI(pc)
000857F6 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000857FA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000857FE 6000 F8A8                  		bra.w	WriteFMI
00085802                            ; ===========================================================================
00085802                            
00085802                            Kos_Z80:
00085802                            		incbin	"sound\z80.bin", 0, $15
00085817 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085818                            		incbin	"sound\z80.bin", $16, 6
0008581E 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
0008581F                            		incbin	"sound\z80.bin", $1D, $93
000858B2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
000858B4                            		incbin	"sound\z80.bin", $B2, 1
000858B5 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
000858B7                            		incbin	"sound\z80.bin", $B5, $16AB
00086F58                            		even
00086F58                            
00086F58                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0008827C 00                         		even
0008827C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00089B04                            		even
00089B04                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091484 00                         		even
00091484                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00092C98 00                         		even
00092C98                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00093A3E                            		even
00093A3E                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00094DF6                            		even
00094DF6                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000956EE 00                         		even
000956EE                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000956EE                            extralifejingle_Header:
000956EE                            	smpsHeaderStartSong 1
000956F0 0703                       	smpsHeaderChan      $07, $03
000956F2 0100                       	smpsHeaderTempo     $01, $00
000956F4                            
000956F8 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000956FC 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095700 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095704 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095708 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
0009570C 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095722                            
00095722                            ; DAC Data
00095722                            extralifejingle_DAC:
00095722 807F 55                    	dc.b	nRst, $7F, $55
00095725 E4                         	smpsFade
00095726                            ; PSG1 Data
00095726                            extralifejingle_PSG1:
00095726                            ; PSG2 Data
00095726                            extralifejingle_PSG2:
00095726                            ; PSG3 Data
00095726                            extralifejingle_PSG3:
00095726 F2                         	smpsStop
00095727                            
00095727                            ; FM1 Data
00095727                            extralifejingle_FM1:
00095727 EF00                       	smpsSetvoice        $00
00095729 E616                       	smpsAlterVol        $16
0009572B E0C0                       	smpsPan             panCenter, $00
0009572D A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095739 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
0009573D F2                         	smpsStop
0009573E                            
0009573E                            ; FM2 Data
0009573E                            extralifejingle_FM2:
0009573E EF01                       	smpsSetvoice        $01
00095740 E616                       	smpsAlterVol        $16
00095742 E0C0                       	smpsPan             panCenter, $00
00095744 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095750 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095754 F2                         	smpsStop
00095755                            
00095755                            ; FM3 Data
00095755                            extralifejingle_FM3:
00095755 EF01                       	smpsSetvoice        $01
00095757 E616                       	smpsAlterVol        $16
00095759 E0C0                       	smpsPan             panCenter, $00
0009575B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095767 B106 800C                  	dc.b	nC4, $06, nRst, $0C
0009576B F2                         	smpsStop
0009576C                            
0009576C                            ; FM4 Data
0009576C                            extralifejingle_FM4:
0009576C EF02                       	smpsSetvoice        $02
0009576E E0C0                       	smpsPan             panCenter, $00
00095770 8001                       	dc.b	nRst, $01
00095772 E616                       	smpsAlterVol        $16
00095774 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095780 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095784 F2                         	smpsStop
00095785                            
00095785                            ; FM5 Data
00095785                            extralifejingle_FM5:
00095785 EF03                       	smpsSetvoice        $03
00095787 E602                       	smpsAlterVol        $02
00095789 E0C0                       	smpsPan             panCenter, $00
0009578B 8001                       	dc.b	nRst, $01
0009578D EF05                       	smpsSetvoice        $05
0009578F E60A                       	smpsAlterVol        $0A
00095791 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
0009579D B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000957A9 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000957B5 C1C4 80                    	dc.b	nE5, nG5, nRst
000957B8 F2                         	smpsStop
000957B9                            
000957B9                            ; FM6 Data
000957B9                            extralifejingle_FM6:
000957B9 EF04                       	smpsSetvoice        $04
000957BB E607                       	smpsAlterVol        $07
000957BD E0C0                       	smpsPan             panCenter, $00
000957BF 8001                       	dc.b	nRst, $01
000957C1 EF06                       	smpsSetvoice        $06
000957C3 E6F9                       	smpsAlterVol        $F9
000957C5 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000957CC F2                         	smpsStop
000957CD                            
000957CD                            extralifejingle_Voices:
000957CD                            ;	Voice $00
000957CD                            ;	$3A
000957CD                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000957CD                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000957CD                            	smpsVcAlgorithm     $02
000957CD                            	smpsVcFeedback      $07
000957CD                            	smpsVcUnusedBits    $00
000957CD                            	smpsVcDetune        $03, $07, $07, $03
000957CD                            	smpsVcCoarseFreq    $01, $04, $03, $04
000957CD                            	smpsVcRateScale     $00, $00, $00, $00
000957CD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000957CD                            	smpsVcAmpMod        $00, $00, $00, $00
000957CD                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000957CD                            	smpsVcDecayRate2    $00, $00, $00, $00
000957CD                            	smpsVcDecayLevel    $00, $00, $00, $00
000957CD                            	smpsVcReleaseRate   $05, $03, $03, $03
000957E6                            
000957E6                            ;	Voice $01
000957E6                            ;	$3A
000957E6                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000957E6                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000957E6                            	smpsVcAlgorithm     $02
000957E6                            	smpsVcFeedback      $07
000957E6                            	smpsVcUnusedBits    $00
000957E6                            	smpsVcDetune        $03, $07, $07, $03
000957E6                            	smpsVcCoarseFreq    $01, $04, $03, $04
000957E6                            	smpsVcRateScale     $00, $00, $00, $00
000957E6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000957E6                            	smpsVcAmpMod        $00, $00, $00, $00
000957E6                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000957E6                            	smpsVcDecayRate2    $00, $00, $00, $00
000957E6                            	smpsVcDecayLevel    $00, $00, $00, $00
000957E6                            	smpsVcReleaseRate   $05, $03, $03, $03
000957FF                            
000957FF                            ;	Voice $02
000957FF                            ;	$3A
000957FF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000957FF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000957FF                            	smpsVcAlgorithm     $02
000957FF                            	smpsVcFeedback      $07
000957FF                            	smpsVcUnusedBits    $00
000957FF                            	smpsVcDetune        $03, $07, $07, $03
000957FF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000957FF                            	smpsVcRateScale     $00, $00, $00, $00
000957FF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000957FF                            	smpsVcAmpMod        $00, $00, $00, $00
000957FF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000957FF                            	smpsVcDecayRate2    $00, $00, $00, $00
000957FF                            	smpsVcDecayLevel    $00, $00, $00, $00
000957FF                            	smpsVcReleaseRate   $05, $03, $03, $03
00095818                            
00095818                            ;	Voice $03
00095818                            ;	$00
00095818                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095818                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095818                            	smpsVcAlgorithm     $00
00095818                            	smpsVcFeedback      $00
00095818                            	smpsVcUnusedBits    $00
00095818                            	smpsVcDetune        $00, $00, $00, $00
00095818                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095818                            	smpsVcRateScale     $00, $00, $00, $00
00095818                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095818                            	smpsVcAmpMod        $00, $00, $00, $00
00095818                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095818                            	smpsVcDecayRate2    $00, $00, $00, $00
00095818                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095818                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095831                            
00095831                            ;	Voice $04
00095831                            ;	$03
00095831                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095831                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095831                            	smpsVcAlgorithm     $03
00095831                            	smpsVcFeedback      $00
00095831                            	smpsVcUnusedBits    $00
00095831                            	smpsVcDetune        $03, $04, $04, $06
00095831                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095831                            	smpsVcRateScale     $00, $00, $00, $00
00095831                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095831                            	smpsVcAmpMod        $00, $00, $00, $00
00095831                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095831                            	smpsVcDecayRate2    $06, $04, $00, $01
00095831                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095831                            	smpsVcReleaseRate   $08, $06, $0A, $0A
0009584A                            
0009584A                            ;	Voice $05
0009584A                            ;	$34
0009584A                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
0009584A                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
0009584A                            	smpsVcAlgorithm     $04
0009584A                            	smpsVcFeedback      $06
0009584A                            	smpsVcUnusedBits    $00
0009584A                            	smpsVcDetune        $07, $00, $07, $03
0009584A                            	smpsVcCoarseFreq    $04, $01, $0E, $03
0009584A                            	smpsVcRateScale     $00, $01, $00, $02
0009584A                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
0009584A                            	smpsVcAmpMod        $00, $00, $00, $00
0009584A                            	smpsVcDecayRate1    $08, $07, $07, $14
0009584A                            	smpsVcDecayRate2    $00, $00, $00, $00
0009584A                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
0009584A                            	smpsVcReleaseRate   $07, $07, $04, $06
00095863                            
00095863                            ;	Voice $06
00095863                            ;	$30
00095863                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095863                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095863                            	smpsVcAlgorithm     $00
00095863                            	smpsVcFeedback      $06
00095863                            	smpsVcUnusedBits    $00
00095863                            	smpsVcDetune        $00, $00, $00, $00
00095863                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095863                            	smpsVcRateScale     $01, $00, $00, $02
00095863                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095863                            	smpsVcAmpMod        $00, $00, $00, $00
00095863                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095863                            	smpsVcDecayRate2    $08, $05, $18, $08
00095863                            	smpsVcDecayLevel    $01, $00, $00, $06
00095863                            	smpsVcReleaseRate   $08, $0F, $00, $0F
0009587C                            
0009587C                            
0009587C                            		even
0009587C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000960D4 00                         		even
000960D4                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000965F4                            		even
000965F4                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000968B6 00                         		even
000968B6                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
0009770E                            		even
0009770E                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
0009795A 00                         		even
0009795A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00097C90 00                         		even
00097C90                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00097E3C 00                         		even
00097E3C                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
0009804A 00                         		even
0009804A                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
0009832E 00                         		even
0009832E                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00098A5E 00                         		even
00098A5E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00098B2C                            		even
00098B2C                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00098F9A 00                         		even
00098F9A                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
00099A90                            		even
00099A90                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009A672                            		even
0009A672                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009B978 00                         		even
0009B978                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009B978                            PasswordEntry_Header:
0009B978                            	smpsHeaderStartSong 3
0009B97A 0603                       	smpsHeaderChan      $06, $03
0009B97C 0105                       	smpsHeaderTempo     $01, $05
0009B97E                            
0009B982 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009B986 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009B98A 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009B98E 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009B992 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009B9A8                            
0009B9A8                            ; FM1 Data
0009B9A8                            PasswordEntry_FM1:
0009B9A8 EF00                       	smpsSetvoice        $00
0009B9AF                            
0009B9AF                            PasswordEntry_Jump00:
0009B9AF CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009B9BB C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009B9C7 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009B9D3 C918 CB                    	dc.b	nC6, $18, nD6
0009B9D6 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009B9D9                            
0009B9D9                            ; FM2 Data
0009B9D9                            PasswordEntry_FM2:
0009B9D9 EF01                       	smpsSetvoice        $01
0009B9DB                            
0009B9DB                            PasswordEntry_Jump03:
0009B9DB B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009B9E7 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009B9F3 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009B9FF AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009BA09 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009BA0C                            
0009BA0C                            ; FM3 Data
0009BA0C                            PasswordEntry_FM3:
0009BA0C E080                       	smpsPan             panLeft, $00
0009BA0E EF02                       	smpsSetvoice        $02
0009BA10                            
0009BA10                            PasswordEntry_Jump02:
0009BA10 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009BA1C C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009BA28 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009BA34 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009BA40 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009BA4C C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009BA58 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009BA64 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009BA70 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009BA7C BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BA88 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BA90 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009BA93                            
0009BA93                            ; FM4 Data
0009BA93                            PasswordEntry_FM4:
0009BA93 E040                       	smpsPan             panRight, $00
0009BA95 EF02                       	smpsSetvoice        $02
0009BA97                            
0009BA97                            PasswordEntry_Jump01:
0009BA97 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009BAA3 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009BAAF BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009BABB C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009BAC7 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009BAD3 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009BADF C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BAEB BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009BAF7 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009BB03 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BB0F BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BB17 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009BB1A                            
0009BB1A                            ; FM5 Data
0009BB1A                            PasswordEntry_FM5:
0009BB1A EF00                       	smpsSetvoice        $00
0009BB1C E1FB                       	smpsAlterNote       $FB
0009BB1E 800C                       	dc.b	nRst, $0C
0009BB20 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009BB23                            
0009BB23                            ; PSG1 Data
0009BB23                            PasswordEntry_PSG1:
0009BB23 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BB2F CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009BB3B C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BB47 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009BB53 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009BB5F C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009BB6B C810 C408                  	dc.b	nB5, $10, nG5, $08
0009BB6F F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009BB72                            
0009BB72                            ; PSG2 Data
0009BB72                            PasswordEntry_PSG2:
0009BB72 E1FF                       	smpsAlterNote       $FF
0009BB74 800C                       	dc.b	nRst, $0C
0009BB76 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009BB79                            
0009BB79                            ; PSG3 Data
0009BB79                            PasswordEntry_PSG3:
0009BB79 F502                       	smpsPSGvoice        fTone_02
0009BB7B F3E7                       	smpsPSGform         $E7
0009BB7D C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009BB89 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009BB95 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009BB9C F503                       	smpsPSGvoice        fTone_03
0009BB9E C5                         	dc.b	nAb5
0009BB9F F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009BBA2                            
0009BBA2                            ; DAC Data
0009BBA2                            PasswordEntry_DAC:
0009BBA2 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BBAE 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009BBB6 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009BBBB 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BBC7 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009BBCF                            
0009BBCF                            PasswordEntry_Loop00:
0009BBCF 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BBDB 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009BBE3 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009BBE8 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009BBF4 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009BBFE F6FF A2                    	smpsJump            PasswordEntry_DAC
0009BC01                            
0009BC01                            PasswordEntry_Voices:
0009BC01                            ;	Voice $00
0009BC01                            ;	$04
0009BC01                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009BC01                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009BC01                            	smpsVcAlgorithm     $04
0009BC01                            	smpsVcFeedback      $00
0009BC01                            	smpsVcUnusedBits    $00
0009BC01                            	smpsVcDetune        $00, $00, $00, $00
0009BC01                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009BC01                            	smpsVcRateScale     $00, $00, $00, $00
0009BC01                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009BC01                            	smpsVcAmpMod        $00, $00, $00, $00
0009BC01                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009BC01                            	smpsVcDecayRate2    $05, $00, $00, $03
0009BC01                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009BC01                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BC1A                            
0009BC1A                            ;	Voice $01
0009BC1A                            ;	$39
0009BC1A                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009BC1A                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009BC1A                            	smpsVcAlgorithm     $01
0009BC1A                            	smpsVcFeedback      $07
0009BC1A                            	smpsVcUnusedBits    $00
0009BC1A                            	smpsVcDetune        $00, $04, $06, $00
0009BC1A                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009BC1A                            	smpsVcRateScale     $01, $01, $01, $00
0009BC1A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BC1A                            	smpsVcAmpMod        $00, $00, $00, $00
0009BC1A                            	smpsVcDecayRate1    $09, $09, $11, $10
0009BC1A                            	smpsVcDecayRate2    $00, $00, $00, $06
0009BC1A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009BC1A                            	smpsVcReleaseRate   $08, $08, $08, $08
0009BC33                            
0009BC33                            ;	Voice $02
0009BC33                            ;	$2C
0009BC33                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009BC33                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009BC33                            	smpsVcAlgorithm     $04
0009BC33                            	smpsVcFeedback      $05
0009BC33                            	smpsVcUnusedBits    $00
0009BC33                            	smpsVcDetune        $00, $02, $00, $04
0009BC33                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009BC33                            	smpsVcRateScale     $00, $00, $00, $00
0009BC33                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BC33                            	smpsVcAmpMod        $00, $00, $00, $00
0009BC33                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009BC33                            	smpsVcDecayRate2    $05, $00, $05, $04
0009BC33                            	smpsVcDecayLevel    $08, $08, $05, $04
0009BC33                            	smpsVcReleaseRate   $06, $05, $06, $05
0009BC4C                            
0009BC4C                            
0009BC4C                            		even		
0009BC4C                            ; ---------------------------------------------------------------------------
0009BC4C                            ; Sound	effect pointers
0009BC4C                            ; ---------------------------------------------------------------------------
0009BC4C                            SoundIndex:
0009BC4C 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009BC50 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009BC54 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009BC58 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009BC5C 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009BC60 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009BC64 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009BC68 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009BC6C 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009BC70 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009BC74 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009BC78 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009BC7C 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009BC80 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009BC84 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009BC88 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009BC8C 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009BC90 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009BC94 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009BC98 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009BC9C 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009BCA0 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009BCA4 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009BCA8 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009BCAC 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009BCB0 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009BCB4 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009BCB8 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009BCBC 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009BCC0 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009BCC4 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009BCC8 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009BCCC 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009BCD0 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009BCD4 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009BCD8 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009BCDC 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009BCE0 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009BCE4 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009BCE8 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009BCEC 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009BCF0 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009BCF4 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009BCF8 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009BCFC 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009BD00 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009BD04 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009BD08 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009BD0C                            ptr_sndend
0009BD0C                            ; ---------------------------------------------------------------------------
0009BD0C                            ; Special sound effect pointers
0009BD0C                            ; ---------------------------------------------------------------------------
0009BD0C                            SpecSoundIndex:
0009BD0C 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009BD10 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009BD14                            ptr_specend
0009BD14                            SoundA0:	include	"sound/sfx/Jump.asm"
0009BD14                            SndA0_Jump_Header:
0009BD14                            	smpsHeaderStartSong 1
0009BD16 01                         	smpsHeaderTempoSFX  $01
0009BD17 01                         	smpsHeaderChanSFX   $01
0009BD18                            
0009BD1E                            
0009BD1E                            ; PSG2 Data
0009BD1E                            SndA0_Jump_PSG2:
0009BD1E F500                       	smpsPSGvoice        $00
0009BD20 9E05                       	dc.b	nF2, $05
0009BD27 A315                       	dc.b	nBb2, $15
0009BD29 F2                         	smpsStop
0009BD2A                            
0009BD2A                            ; Song seems to not use any FM voices
0009BD2A                            SndA0_Jump_Voices:
0009BD2A                            SndA0_Jump_Voices:
0009BD2A                            		even
0009BD2A                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009BD54                            		even
0009BD54                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009BD54                            SndDF_Header:
0009BD54                            	smpsHeaderStartSong 3
0009BD56 01                         	smpsHeaderTempoSFX  $01
0009BD57 01                         	smpsHeaderChanSFX   $01
0009BD58                            
0009BD5E                            
0009BD5E                            ; FM5 Data
0009BD5E                            SndDF_FM5:
0009BD5E EF00                       	smpsSetvoice        $00
0009BD60                            
0009BD60                            SndDF_Loop00:
0009BD60 F800 00                    	smpsCall            SndDF_Call00
0009BD63 E905                       	smpsAlterPitch $05
0009BD65 E608                       	smpsFMAlterVol      $08
0009BD67 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009BD6C E9EC                       	smpsAlterPitch $EC
0009BD6E E6E0                       	smpsFMAlterVol      $E0
0009BD70 F2                         	smpsStop
0009BD71                            
0009BD71                            SndDF_Call00:
0009BD71 9902                       	dc.b	nC2, $02
0009BD73 E901                       	smpsAlterPitch $01
0009BD75 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009BD7A E9F6                       	smpsAlterPitch $F6
0009BD7C E3                         	smpsReturn
0009BD7D                            
0009BD7D                            SndDF_Voices:
0009BD7D                            ;	Voice $00
0009BD7D                            ;	$07
0009BD7D                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009BD7D                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009BD7D                            	smpsVcAlgorithm     $07
0009BD7D                            	smpsVcFeedback      $00
0009BD7D                            	smpsVcUnusedBits    $00
0009BD7D                            	smpsVcDetune        $00, $00, $00, $00
0009BD7D                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009BD7D                            	smpsVcRateScale     $00, $00, $00, $00
0009BD7D                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009BD7D                            	smpsVcAmpMod        $00, $00, $00, $00
0009BD7D                            	smpsVcDecayRate1    $00, $00, $00, $00
0009BD7D                            	smpsVcDecayRate2    $00, $00, $00, $00
0009BD7D                            	smpsVcDecayLevel    $01, $01, $01, $01
0009BD7D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BD96                            		even
0009BD96                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009BDC8                            		even
0009BDC8                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009BE0C 00                         		even
0009BE0C                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009BE0C                            SndD2_Header:
0009BE0C                            	smpsHeaderStartSong 3
0009BE0E 01                         	smpsHeaderTempoSFX  $01
0009BE0F 01                         	smpsHeaderChanSFX   $01
0009BE10                            
0009BE16                            
0009BE16                            ; FM4 Data
0009BE16                            SndD2_FM4:
0009BE16 EF00                       	smpsSetvoice        $00
0009BE1D C645                       	dc.b	nA5, $45
0009BE1F F2                         	smpsStop
0009BE20                            
0009BE20                            SndD2_Voices:
0009BE20                            ;	Voice $00
0009BE20                            ;	$04
0009BE20                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009BE20                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009BE20                            	smpsVcAlgorithm     $04
0009BE20                            	smpsVcFeedback      $00
0009BE20                            	smpsVcUnusedBits    $00
0009BE20                            	smpsVcDetune        $04, $00, $00, $02
0009BE20                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009BE20                            	smpsVcRateScale     $00, $00, $00, $00
0009BE20                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BE20                            	smpsVcAmpMod        $00, $00, $00, $00
0009BE20                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009BE20                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009BE20                            	smpsVcDecayLevel    $00, $01, $00, $01
0009BE20                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BE3A 00                         		even
0009BE3A                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009BE6A                            		even
0009BE6A                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009BE9A                            		even
0009BE9A                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009BECE                            		even
0009BECE                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009BEE0                            		even
0009BEE0                            SoundAA:	include	"sound/sfx/Splash.asm"
0009BEE0                            SndA2_Header:
0009BEE0                            	smpsHeaderStartSong 3
0009BEE2 01                         	smpsHeaderTempoSFX  $01
0009BEE3 02                         	smpsHeaderChanSFX   $02
0009BEE4                            
0009BEF0                            
0009BEF0                            ; FM3 Data
0009BEF0                            SndA2_FM3:
0009BEF0 EF00                       	smpsSetvoice        $00
0009BEF7 8106                       	dc.b	nC0, $06
0009BEF9                            
0009BEF9                            SndA2_Loop00:
0009BEF9 810E                       	dc.b	nC0, $0E
0009BEFB E60E                       	smpsAlterVol      $0E
0009BEFD F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009BF02 F2                         	smpsStop
0009BF03                            
0009BF03                            ; FM4 Data
0009BF03                            SndA2_FM4:
0009BF03 EF01                       	smpsSetvoice        $01
0009BF05 A606 14                    	dc.b	nCs3, $06, $14
0009BF08 F2                         	smpsStop
0009BF09                            
0009BF09                            SndA2_Voices:
0009BF09                            ;	Voice $00
0009BF09                            ;	$F9
0009BF09                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009BF09                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009BF09                            	smpsVcAlgorithm     $01
0009BF09                            	smpsVcFeedback      $07
0009BF09                            	smpsVcUnusedBits    $03
0009BF09                            	smpsVcDetune        $03, $01, $03, $02
0009BF09                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009BF09                            	smpsVcRateScale     $00, $00, $00, $00
0009BF09                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009BF09                            	smpsVcAmpMod        $00, $00, $00, $00
0009BF09                            	smpsVcDecayRate1    $02, $09, $18, $05
0009BF09                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009BF09                            	smpsVcDecayLevel    $02, $04, $02, $01
0009BF09                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BF22                            
0009BF22                            ;	Voice $01
0009BF22                            ;	$00
0009BF22                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009BF22                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009BF22                            	smpsVcAlgorithm     $00
0009BF22                            	smpsVcFeedback      $00
0009BF22                            	smpsVcUnusedBits    $00
0009BF22                            	smpsVcDetune        $00, $00, $00, $00
0009BF22                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009BF22                            	smpsVcRateScale     $00, $00, $03, $03
0009BF22                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009BF22                            	smpsVcAmpMod        $00, $00, $00, $00
0009BF22                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009BF22                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009BF22                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009BF22                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BF3C 00                         		even
0009BF3C                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009BF3C                            Sound_3E_Header:
0009BF3C                            	smpsHeaderStartSong 3
0009BF3E 01                         	smpsHeaderTempoSFX  $01
0009BF3F 01                         	smpsHeaderChanSFX   $01
0009BF40                            
0009BF46                            
0009BF46                            ; FM5 Data
0009BF46                            Sound_3E_3F_40_41_FM5:
0009BF46 EF00                       	smpsSetvoice        $00
0009BF48 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009BF4D F2                         	smpsStop
0009BF4E                            
0009BF4E                            Sound_3E_Voices:
0009BF4E                            ;	Voice $00
0009BF4E                            ;	$0C
0009BF4E                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009BF4E                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009BF4E                            	smpsVcAlgorithm     $04
0009BF4E                            	smpsVcFeedback      $01
0009BF4E                            	smpsVcUnusedBits    $00
0009BF4E                            	smpsVcDetune        $03, $03, $02, $00
0009BF4E                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009BF4E                            	smpsVcRateScale     $00, $00, $00, $00
0009BF4E                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009BF4E                            	smpsVcAmpMod        $00, $00, $00, $00
0009BF4E                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009BF4E                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009BF4E                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009BF4E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BF67                            
0009BF67                            
0009BF68 00                         		even
0009BF68                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009BF9C                            		even
0009BF9C                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009BFD2                            		even
0009BFD2                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009BFD2                            Sound_70_Header:
0009BFD2                            	smpsHeaderStartSong 3
0009BFD4 01                         	smpsHeaderTempoSFX  $01
0009BFD5 02                         	smpsHeaderChanSFX   $02
0009BFD6                            
0009BFE2                            
0009BFE2                            ; FM5 Data
0009BFE2                            Sound_70_FM5:
0009BFE2 EF00                       	smpsSetvoice        $00
0009BFE4 8001                       	dc.b	nRst, $01
0009BFEB 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009BFEF F2                         	smpsStop
0009BFF0                            
0009BFF0                            ; PSG3 Data
0009BFF0                            Sound_70_PSG3:
0009BFF0 F500                       	smpsPSGvoice        sTone_0D
0009BFF2 800B                       	dc.b	nRst, $0B
0009BFF4 F3E7                       	smpsPSGform         $E7
0009BFF6 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009BFF9                            
0009BFF9                            Sound_70_Loop00:
0009BFF9 02                         	dc.b	$02
0009BFFA EC01                       	smpsPSGAlterVol     $01
0009BFFC E7                         	dc.b	smpsNoAttack
0009BFFD F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C002 F2                         	smpsStop
0009C003                            
0009C003                            Sound_70_Voices:
0009C003                            ;	Voice $00
0009C003                            ;	$FA
0009C003                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C003                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C003                            	smpsVcAlgorithm     $02
0009C003                            	smpsVcFeedback      $07
0009C003                            	smpsVcUnusedBits    $03
0009C003                            	smpsVcDetune        $00, $00, $00, $00
0009C003                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C003                            	smpsVcRateScale     $00, $00, $00, $00
0009C003                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C003                            	smpsVcAmpMod        $00, $00, $00, $00
0009C003                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C003                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C003                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C003                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C01C                            
0009C01C                            
0009C01C                            		even
0009C01C                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C04A                            		even
0009C04A                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C07C                            		even
0009C07C                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C0A8                            		even
0009C0A8                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C0F8                            		even
0009C0F8                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C142                            		even
0009C142                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C19E                            		even
0009C19E                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C1CC                            		even
0009C1CC                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C1CC                            SpikesSFX_Header:
0009C1CC                            	smpsHeaderStartSong 3
0009C1CE 01                         	smpsHeaderTempoSFX  $01
0009C1CF 02                         	smpsHeaderChanSFX   $02
0009C1D0                            
0009C1DC                            
0009C1DC                            ; FM6 Data
0009C1DC                            SndB7_FM4:
0009C1DC EF01                       	smpsSetvoice        $01
0009C1E3 B105                       	dc.b	nC4, $05
0009C1E5 F1                         	smpsModOn
0009C1E6 E10A                       	smpsAlterNote       $0A
0009C1E8 E601                       	smpsAlterVol        $01
0009C1EA F2                         	smpsStop
0009C1EB                            
0009C1EB                            ; FM5 Data
0009C1EB                            SndB7_FM5:
0009C1EB 8005                       	dc.b	nRst, $05			 
0009C1ED EF00                       	smpsSetvoice        $00
0009C1EF DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C1F5 F2                         	smpsStop
0009C1F6                            
0009C1F6                            SndB7_Voices:
0009C1F6                            ;	Voice $00
0009C1F6                            ;	$34
0009C1F6                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C1F6                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C1F6                            	smpsVcAlgorithm     $04
0009C1F6                            	smpsVcFeedback      $06
0009C1F6                            	smpsVcUnusedBits    $00
0009C1F6                            	smpsVcDetune        $0D, $00, $00, $00
0009C1F6                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C1F6                            	smpsVcRateScale     $00, $00, $00, $00
0009C1F6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C1F6                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1F6                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C1F6                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C1F6                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C1F6                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C20F                            
0009C20F                            ;	Voice $01
0009C20F                            ;	$FA
0009C20F                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C20F                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C20F                            	smpsVcAlgorithm     $02
0009C20F                            	smpsVcFeedback      $07
0009C20F                            	smpsVcUnusedBits    $03
0009C20F                            	smpsVcDetune        $03, $01, $03, $02
0009C20F                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C20F                            	smpsVcRateScale     $00, $00, $00, $00
0009C20F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C20F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C20F                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C20F                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C20F                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C20F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C228                            		even
0009C228                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C264                            		even
0009C264                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C264                            SndBD_Header:
0009C264                            	smpsHeaderStartSong 3
0009C266 01                         	smpsHeaderTempoSFX  $01
0009C267 01                         	smpsHeaderChanSFX   $01
0009C268                            
0009C26E                            
0009C26E                            ; FM6 Data
0009C26E                            SndBD_FM3:
0009C26E EF00                       	smpsSetvoice        $00
0009C270                            
0009C270                            SndBD_Loop00:
0009C270 C009                       	dc.b	nEb5, $09
0009C272 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C277 F2                         	smpsStop
0009C278                            
0009C278                            SndBD_Voices:
0009C278                            ;	Voice $00
0009C278                            ;	$02
0009C278                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C278                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C278                            	smpsVcAlgorithm     $02
0009C278                            	smpsVcFeedback      $00
0009C278                            	smpsVcUnusedBits    $00
0009C278                            	smpsVcDetune        $00, $02, $05, $00
0009C278                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C278                            	smpsVcRateScale     $00, $00, $00, $00
0009C278                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C278                            	smpsVcAmpMod        $00, $00, $00, $00
0009C278                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C278                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C278                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C278                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C292 00                         		even
0009C292                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C292                            Sound_59_Header:
0009C292                            	smpsHeaderStartSong 3
0009C294 01                         	smpsHeaderTempoSFX  $01
0009C295 04                         	smpsHeaderChanSFX   $04
0009C296                            
0009C2AE                            
0009C2AE                            ; FM3 Data
0009C2AE                            Sound_59_FM3:
0009C2AE E040                       	smpsPan             panRight, $00
0009C2B0 8002                       	dc.b	nRst, $02
0009C2B2 F600 00                    	smpsJump            Sound_59_FM4
0009C2B5                            
0009C2B5                            ; FM5 Data
0009C2B5                            Sound_59_FM5:
0009C2B5 E080                       	smpsPan             panLeft, $00
0009C2B7 8001                       	dc.b	nRst, $01
0009C2B9                            
0009C2B9                            ; FM4 Data
0009C2B9                            Sound_59_FM4:
0009C2B9 EF00                       	smpsSetvoice        $00
0009C2C0 8110                       	dc.b	nC0, $10
0009C2C2 F2                         	smpsStop
0009C2C3                            
0009C2C3                            ; PSG3 Data
0009C2C3                            Sound_59_PSG3:
0009C2C8 F3E7                       	smpsPSGform         $E7
0009C2CA                            
0009C2CA                            Sound_59_Loop00:
0009C2CA B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C2CD EC03                       	smpsPSGAlterVol     $03
0009C2CF F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C2D4 F2                         	smpsStop
0009C2D5                            
0009C2D5                            Sound_59_Voices:
0009C2D5                            ;	Voice $00
0009C2D5                            ;	$F9
0009C2D5                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C2D5                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C2D5                            	smpsVcAlgorithm     $01
0009C2D5                            	smpsVcFeedback      $07
0009C2D5                            	smpsVcUnusedBits    $03
0009C2D5                            	smpsVcDetune        $03, $01, $03, $02
0009C2D5                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C2D5                            	smpsVcRateScale     $00, $00, $00, $00
0009C2D5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C2D5                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2D5                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C2D5                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C2D5                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C2D5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2EE                            
0009C2EE                            
0009C2EE                            		even
0009C2EE                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C316                            		even
0009C316                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009C342                            		even
0009C342                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009C342                            Sound_B6_Header:
0009C342                            	smpsHeaderStartSong 3
0009C344 01                         	smpsHeaderTempoSFX  $01
0009C345 02                         	smpsHeaderChanSFX   $02
0009C346                            
0009C352                            
0009C352                            ; FM5 Data
0009C352                            Sound_B6_FM5:
0009C352 EF00                       	smpsSetvoice        $00
0009C359 CD0F                       	dc.b	nE6, $0F
0009C35B F2                         	smpsStop
0009C35C                            
0009C35C                            ; PSG3 Data
0009C35C                            Sound_B6_PSG3:
0009C35C F507                       	smpsPSGvoice        sTone_1D
0009C35E 8006                       	dc.b	nRst, $06
0009C365 F3E7                       	smpsPSGform         $E7
0009C367 CD4F                       	dc.b	nE6, $4F
0009C369 F2                         	smpsStop
0009C36A                            
0009C36A                            Sound_B6_Voices:
0009C36A                            ;	Voice $00
0009C36A                            ;	$3D
0009C36A                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009C36A                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009C36A                            	smpsVcAlgorithm     $05
0009C36A                            	smpsVcFeedback      $07
0009C36A                            	smpsVcUnusedBits    $00
0009C36A                            	smpsVcDetune        $00, $00, $00, $00
0009C36A                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009C36A                            	smpsVcRateScale     $00, $00, $00, $00
0009C36A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C36A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C36A                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009C36A                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C36A                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C36A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C383                            
0009C383                            
0009C384 00                         		even
0009C384                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009C3D8                            		even
0009C3D8                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009C412                            		even
0009C412                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C484                            		even
0009C484                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C4B2                            		even
0009C4B2                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009C4EC                            		even
0009C4EC                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009C4EC                            SndC1_Header:
0009C4EC                            	smpsHeaderStartSong 3
0009C4EE 01                         	smpsHeaderTempoSFX  $01
0009C4EF 01                         	smpsHeaderChanSFX   $01
0009C4F0                            
0009C4F6                            
0009C4F6                            ; FM4 Data
0009C4F6                            SndC1_FM4:
0009C4F6 EF00                       	smpsSetvoice        $00
0009C4F8 D506 40                    	dc.b	nC7, $06, $40
0009C4FB F2                         	smpsStop
0009C4FC                            
0009C4FC                            SndC1_Voices:
0009C4FC                            ;	Voice $00
0009C4FC                            ;	$38
0009C4FC                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009C4FC                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009C4FC                            	smpsVcAlgorithm     $00
0009C4FC                            	smpsVcFeedback      $07
0009C4FC                            	smpsVcUnusedBits    $00
0009C4FC                            	smpsVcDetune        $00, $00, $00, $00
0009C4FC                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009C4FC                            	smpsVcRateScale     $00, $00, $00, $00
0009C4FC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C4FC                            	smpsVcAmpMod        $00, $00, $00, $00
0009C4FC                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009C4FC                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C4FC                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C4FC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C516 00                         		even
0009C516                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009C590                            		even
0009C590                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009C5B8                            		even
0009C5B8                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009C5B8                            Sound_B0_Header:
0009C5B8                            	smpsHeaderStartSong 3
0009C5BA 01                         	smpsHeaderTempoSFX  $01
0009C5BB 03                         	smpsHeaderChanSFX   $03
0009C5BC                            
0009C5CE                            
0009C5CE                            ; FM5 Data
0009C5CE                            Sound_B0_FM5:
0009C5CE EF00                       	smpsSetvoice        $00
0009C5D0 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009C5D6 F2                         	smpsStop
0009C5D7                            
0009C5D7                            ; FM4 Data
0009C5D7                            Sound_B0_FM4:
0009C5D7 EF01                       	smpsSetvoice        $01
0009C5D9 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009C5DD F2                         	smpsStop
0009C5DE                            
0009C5DE                            ; FM3 Data
0009C5DE                            Sound_B0_FM3:
0009C5DE EF02                       	smpsSetvoice        $02
0009C5E0 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009C5E7 F2                         	smpsStop
0009C5E8                            
0009C5E8                            Sound_B0_Voices:
0009C5E8                            ;	Voice $00
0009C5E8                            ;	$3B
0009C5E8                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009C5E8                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009C5E8                            	smpsVcAlgorithm     $03
0009C5E8                            	smpsVcFeedback      $07
0009C5E8                            	smpsVcUnusedBits    $00
0009C5E8                            	smpsVcDetune        $00, $00, $00, $00
0009C5E8                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009C5E8                            	smpsVcRateScale     $02, $00, $00, $00
0009C5E8                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009C5E8                            	smpsVcAmpMod        $00, $00, $00, $00
0009C5E8                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009C5E8                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C5E8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C5E8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C601                            
0009C601                            ;	Voice $01
0009C601                            ;	$04
0009C601                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C601                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009C601                            	smpsVcAlgorithm     $04
0009C601                            	smpsVcFeedback      $00
0009C601                            	smpsVcUnusedBits    $00
0009C601                            	smpsVcDetune        $04, $07, $07, $03
0009C601                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009C601                            	smpsVcRateScale     $00, $00, $00, $00
0009C601                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C601                            	smpsVcAmpMod        $00, $00, $00, $00
0009C601                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C601                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C601                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C601                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C61A                            
0009C61A                            ;	Voice $02
0009C61A                            ;	$3C
0009C61A                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009C61A                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009C61A                            	smpsVcAlgorithm     $04
0009C61A                            	smpsVcFeedback      $07
0009C61A                            	smpsVcUnusedBits    $00
0009C61A                            	smpsVcDetune        $00, $00, $00, $00
0009C61A                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009C61A                            	smpsVcRateScale     $00, $00, $00, $00
0009C61A                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009C61A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C61A                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009C61A                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009C61A                            	smpsVcDecayLevel    $02, $09, $09, $01
0009C61A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C633                            
0009C633                            
0009C634 00                         		even
0009C634                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009C676                            		even
0009C676                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009C6A4                            		even
0009C6A4                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009C6B6                            		even
0009C6B6                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009C6E4                            		even
0009C6E4                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009C712                            		even
0009C712                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009C75E                            		even
0009C75E                            SoundCC:	include	"sound/sfx/Spring.asm"
0009C75E                            Spring_Header:
0009C75E                            	smpsHeaderStartSong 1
0009C760 01                         	smpsHeaderTempoSFX  $01
0009C761 01                         	smpsHeaderChanSFX   $01
0009C762                            
0009C768                            
0009C768                            ; FM6 Data
0009C768                            Spring_FM6:
0009C768 EF00                       	smpsSetvoice        $00
0009C76A 8001                       	dc.b	nRst, $01
0009C771 B006                       	dc.b	nB3, $06
0009C773 F4                         	smpsModOff
0009C774 EF01                       	smpsSetvoice        $01
0009C776                            
0009C776                            Spring_Loop00:
0009C776 BD02                       	dc.b	nC5, $02
0009C778 E601                       	smpsAlterVol      $01
0009C77A E7                         	dc.b	smpsNoAttack
0009C77B F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009C780 F2                         	smpsStop
0009C781                            
0009C781                            Spring_Voices:
0009C781                            ;	Voice $00
0009C781                            ;	$20
0009C781                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009C781                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009C781                            	smpsVcAlgorithm     $00
0009C781                            	smpsVcFeedback      $04
0009C781                            	smpsVcUnusedBits    $00
0009C781                            	smpsVcDetune        $03, $03, $03, $03
0009C781                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009C781                            	smpsVcRateScale     $02, $02, $03, $03
0009C781                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C781                            	smpsVcAmpMod        $00, $00, $00, $00
0009C781                            	smpsVcDecayRate1    $06, $09, $06, $07
0009C781                            	smpsVcDecayRate2    $08, $06, $06, $07
0009C781                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009C781                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C79A                            
0009C79A                            ;	Voice $01
0009C79A                            ;	$20
0009C79A                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009C79A                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009C79A                            	smpsVcAlgorithm     $00
0009C79A                            	smpsVcFeedback      $04
0009C79A                            	smpsVcUnusedBits    $00
0009C79A                            	smpsVcDetune        $03, $03, $03, $03
0009C79A                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009C79A                            	smpsVcRateScale     $02, $02, $02, $02
0009C79A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C79A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C79A                            	smpsVcDecayRate1    $06, $09, $06, $07
0009C79A                            	smpsVcDecayRate2    $08, $06, $06, $07
0009C79A                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009C79A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C7B4 00                         		even
0009C7B4                            SoundCD:	include	"sound/sfx/Beep.asm"
0009C7B4                            Snd99_Header:
0009C7B4                            	smpsHeaderStartSong 3
0009C7B6 01                         	smpsHeaderTempoSFX  $01
0009C7B7 01                         	smpsHeaderChanSFX   $01
0009C7B8                            
0009C7BE                            
0009C7BE                            ; FM4 Data
0009C7BE                            Snd99_FM4:
0009C7BE EF00                       	smpsSetvoice        $00
0009C7C0 B502                       	dc.b	nE4, $02
0009C7C2 F2                         	smpsStop
0009C7C3                            
0009C7C3                            Snd99_Voices:
0009C7C3                            ;	Voice $00
0009C7C3                            ;	$07
0009C7C3                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009C7C3                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009C7C3                            	smpsVcAlgorithm     $07
0009C7C3                            	smpsVcFeedback      $00
0009C7C3                            	smpsVcUnusedBits    $00
0009C7C3                            	smpsVcDetune        $00, $00, $00, $00
0009C7C3                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009C7C3                            	smpsVcRateScale     $00, $00, $00, $00
0009C7C3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C7C3                            	smpsVcAmpMod        $00, $00, $00, $00
0009C7C3                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C7C3                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C7C3                            	smpsVcDecayLevel    $00, $00, $00, $00
0009C7C3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C7DC                            		even
0009C7DC                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009C80A                            		even
0009C80A                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009C80A                            SignpostCD_Header:
0009C80A                            	smpsHeaderStartSong 3
0009C80C 01                         	smpsHeaderTempoSFX  $01
0009C80D 02                         	smpsHeaderChanSFX   $02
0009C80E                            
0009C81A                            
0009C81A                            ; FM5 Data
0009C81A                            Snd9D_FM5:
0009C81A 8004                       	dc.b	nRst, $04
0009C81C                            
0009C81C                            ; FM4 Data
0009C81C                            Snd9D_FM4:
0009C81C EF00                       	smpsSetvoice        $00
0009C81E                            
0009C81E                            Snd9D_Loop00:
0009C81E B405                       	dc.b	nEb4, $05
0009C820 E604                       	smpsFMAlterVol      $04
0009C822 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009C827 F2                         	smpsStop
0009C828                            
0009C828                            Snd9D_Voices:
0009C828                            ;	Voice $00
0009C828                            ;	$F4
0009C828                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009C828                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009C828                            	smpsVcAlgorithm     $04
0009C828                            	smpsVcFeedback      $06
0009C828                            	smpsVcUnusedBits    $03
0009C828                            	smpsVcDetune        $00, $00, $00, $00
0009C828                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009C828                            	smpsVcRateScale     $00, $00, $00, $00
0009C828                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C828                            	smpsVcAmpMod        $00, $00, $00, $00
0009C828                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009C828                            	smpsVcDecayRate2    $08, $05, $00, $00
0009C828                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009C828                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C842 00                         		even
0009C842                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009C87C                            		even
0009C87C                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009C87C                            Sound_41_Header:
0009C87C                            	smpsHeaderStartSong 3
0009C87E 01                         	smpsHeaderTempoSFX  $01
0009C87F 01                         	smpsHeaderChanSFX   $01
0009C880                            
0009C886                            	
0009C886                            Sound41_FM5:
0009C886 EF00                       	smpsSetvoice        $00
0009C888 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C88D F2                         	smpsStop
0009C88E                            
0009C88E                            Sound_41_Voices:
0009C88E                            ;	Voice $00
0009C88E                            ;	$36
0009C88E                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009C88E                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009C88E                            	smpsVcAlgorithm     $06
0009C88E                            	smpsVcFeedback      $06
0009C88E                            	smpsVcUnusedBits    $00
0009C88E                            	smpsVcDetune        $00, $00, $01, $00
0009C88E                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009C88E                            	smpsVcRateScale     $00, $00, $00, $00
0009C88E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C88E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C88E                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C88E                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009C88E                            	smpsVcDecayLevel    $00, $00, $00, $00
0009C88E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C8A7                            
0009C8A7                            
0009C8A8 00                         		even
0009C8A8                            		; Don't let Sega sample cross $8000-byte boundary
0009C8A8                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1250                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2182                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1180                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 12FE                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 12FE                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1888                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1888                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1888                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 242C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1250                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A00                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20DC                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A00                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A2                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; green_hill_zone_act_1
000A6B04 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000A6B08 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000A6B0C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000A6B10 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000A6B16 21FC 0000 1388 FFC0        		move.l	#$1388,(v_scorelife).w ; extra life is awarded at 50000 points
000A6B1E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; => Level (Zone play mode)
000A6B24 4E75                       		rts
000A6B26                            ; ===========================================================================
000A6B26                            ; loc_90B6:
000A6B26                            OptionScreen_Select_Not1P:
000A6B26 5300                       		subq.b	#1,d0
000A6B28 6600                       		bne.s	OptionScreen_Select_Other
000A6B2A 6094                       		bra.s	OptionScreen_Main
000A6B2C                            ; ===========================================================================
000A6B2C                            ; loc_90D8:
000A6B2C                            OptionScreen_Select_Other:
000A6B2C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B32 4E75                       		rts
000A6B34                            
000A6B34                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B34                            
000A6B34                            ;sub_90E0:
000A6B34                            OptionScreen_Controls:
000A6B34 7400                       		moveq	#0,d2
000A6B36 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B3A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B3E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B42 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B44 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B46 6400                       		bcc.s	Option_Controls_Down
000A6B48 143C 0002                  		move.b	#2,d2
000A6B4C                            
000A6B4C                            Option_Controls_Down:
000A6B4C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B50 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B52 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B54 0C02 0003                  		cmpi.b	#3,d2
000A6B58 6500                       		blo.s	Option_Controls_Refresh
000A6B5A 7400                       		moveq	#0,d2
000A6B5C                            
000A6B5C                            Option_Controls_Refresh:
000A6B5C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B60 E54A                       		lsl.w	#2,d2
000A6B62 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B66 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B6A 3411                       		move.w	(a1),d2
000A6B6C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B70 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B72 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B74 6400                       		bcc.s	Option_Controls_Right
000A6B76 1403                       		move.b	d3,d2
000A6B78                            
000A6B78                            Option_Controls_Right:
000A6B78 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B7C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B7E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B80 B403                       		cmp.b	d3,d2
000A6B82 6300                       		bls.s	Option_Controls_Button_A
000A6B84 7400                       		moveq	#0,d2
000A6B86                            
000A6B86                            Option_Controls_Button_A:
000A6B86 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B8A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B8C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B90 B403                       		cmp.b	d3,d2
000A6B92 6300                       		bls.s	Option_Controls_Refresh2
000A6B94 7400                       		moveq	#0,d2
000A6B96                            
000A6B96                            Option_Controls_Refresh2:
000A6B96 3282                       		move.w	d2,(a1)
000A6B98                            
000A6B98                            Option_Controls_NoMove:
000A6B98 4E75                       		rts
000A6B9A                            ; End of function OptionScreen_Controls
000A6B9A                            
000A6B9A                            ; ===========================================================================
000A6B9A                            ; word_917A:
000A6B9A                            OptionScreen_Choices:
000A6B9A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B9E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6BA2 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6BA6                            		even
000A6BA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6BA6                            
000A6BA6                            
000A6BA6                            OptionScreen_DrawSelected:
000A6BA6 6100 0000                  		bsr.w	loc_9268
000A6BAA 7200                       		moveq	#0,d1
000A6BAC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BB0 E749                       		lsl.w	#3,d1
000A6BB2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BB8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BBC 303C 6000                  		move.w	#$6000,d0
000A6BC0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BC6 225B                       		movea.l	(a3)+,a1
000A6BC8 6100 FE5C                  		bsr.w	MenuScreenTextToRAM
000A6BCC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BD2 7200                       		moveq	#0,d1
000A6BD4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BDA 6700                       		beq.s	loc_9186
000A6BDC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BE0 E549                       		lsl.w	#2,d1
000A6BE2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BE6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BEA 3211                       		move.w	(a1),d1
000A6BEC E549                       		lsl.w	#2,d1
000A6BEE                            
000A6BEE                            loc_9186:		
000A6BEE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BF2 6100 FE32                  		bsr.w	MenuScreenTextToRAM
000A6BF6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BF6                            		;bne.s	loc2_9186
000A6BF6                            		;lea	($FFFF00C2).l,a2
000A6BF6                            		;bsr.w	loc_9296
000A6BF6                            
000A6BF6                            loc2_9186:		
000A6BF6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BFC 201B                       		move.l	(a3)+,d0
000A6BFE 7215                       		moveq	#$15,d1
000A6C00 7407                       		moveq	#7,d2
000A6C02 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C06                            ; ===========================================================================
000A6C06                            
000A6C06                            OptionScreen_DrawUnselected:
000A6C06 6100 0000                  		bsr.w	loc_9268
000A6C0A 7200                       		moveq	#0,d1
000A6C0C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C10 E749                       		lsl.w	#3,d1
000A6C12 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6C18 47F3 1000                  		lea	(a3,d1.w),a3
000A6C1C 7000                       		moveq	#0,d0
000A6C1E 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C24 225B                       		movea.l	(a3)+,a1
000A6C26 6100 FDFE                  		bsr.w	MenuScreenTextToRAM
000A6C2A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C30 7200                       		moveq	#0,d1
000A6C32 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C38 6700                       		beq.s	loc2_91F8
000A6C3A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C3E E549                       		lsl.w	#2,d1
000A6C40 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C44 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C48 3211                       		move.w	(a1),d1
000A6C4A E549                       		lsl.w	#2,d1
000A6C4C                            
000A6C4C                            loc2_91F8		
000A6C4C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C50 6100 FDD4                  		bsr.w	MenuScreenTextToRAM
000A6C54                            		;cmpi.b	#2,(Options_menu_box).w
000A6C54                            		;bne.s	loc3_91F8
000A6C54                            		;lea	($FFFF0222).l,a2
000A6C54                            		;bsr.w	loc_9296
000A6C54                            
000A6C54                            loc3_91F8		
000A6C54 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C5A 201B                       		move.l	(a3)+,d0
000A6C5C 7215                       		moveq	#$15,d1
000A6C5E 7407                       		moveq	#7,d2
000A6C60 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C64                            ; ===========================================================================
000A6C64                            
000A6C64                            loc_9268:
000A6C64 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C6A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C6E 6A00                       		bpl.s	loc2_9268
000A6C70 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C76                            
000A6C76                            loc2_9268:
000A6C76 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C7A 6700                       		beq.s	loc3_9268
000A6C7C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C82                            
000A6C82                            loc3_9268:
000A6C82 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C88 6600                       		bne.s	loc4_9268		; rts
000A6C8A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C90                            
000A6C90                            loc4_9268:
000A6C90 4E75                       		rts
000A6C92                            ; ===========================================================================
000A6C92                            
000A6C92                            loc_9296:
000A6C92 4E75                       		rts
000A6C94                            
000A6C94                            Dynamic_Menu:
000A6C94 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C98                            
000A6C98                            loc_3FF30:
000A6C98 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C9A                            
000A6C9A                            loc_3FF32:
000A6C9A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C9C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C9E 7000                       	moveq	#0,d0
000A6CA0 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6CA4 B02A 0006                  	cmp.b	6(a2),d0
000A6CA8 6500                       	blo.s	loc_3FF48
000A6CAA 7000                       	moveq	#0,d0
000A6CAC 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6CB0                            
000A6CB0                            loc_3FF48:
000A6CB0 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6CB4 1692                       	move.b	(a2),(a3)	; set timer
000A6CB6 6A00                       	bpl.s	loc_3FF56
000A6CB8 D040                       	add.w	d0,d0
000A6CBA 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6CBE                            
000A6CBE                            loc_3FF56:
000A6CBE 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CC2 EB48                       	lsl.w	#5,d0
000A6CC4 342A 0004                  	move.w	4(a2),d2
000A6CC8 2212                       	move.l	(a2),d1
000A6CCA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CD0 D280                       	add.l	d0,d1
000A6CD2 7600                       	moveq	#0,d3
000A6CD4 162A 0007                  	move.b	7(a2),d3
000A6CD8 E94B                       	lsl.w	#4,d3
000A6CDA 4EB9 0000 1426             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CE0                            
000A6CE0                            loc_3FF78:
000A6CE0 102A 0006                  	move.b	6(a2),d0
000A6CE4 4A12                       	tst.b	(a2)
000A6CE6 6A00                       	bpl.s	loc_3FF82
000A6CE8 D000                       	add.b	d0,d0
000A6CEA                            
000A6CEA                            loc_3FF82:
000A6CEA 5200                       	addq.b	#1,d0
000A6CEC 0240 00FE                  	andi.w	#$FE,d0
000A6CF0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CF4 544B                       	addq.w	#2,a3
000A6CF6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CFA 4E75                       	rts
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ; MENU ANIMATION SCRIPT
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ;word_87C6:
000A6CFC                            Anim_SonicMilesBG:
000A6CFC 0000                       	dc.w   0
000A6CFE                            ; Sonic/Miles animated background
000A6CFE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6D02 0020                       	dc.w $20
000A6D04 06                         	dc.b 6
000A6D05 0A                         	dc.b $A
000A6D06 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6D08 0A05                       	dc.b  $A,  5	; 2
000A6D0A 1405                       	dc.b $14,  5	; 4
000A6D0C 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6D0E 1405                       	dc.b $14,  5	; 8
000A6D10 0A05                       	dc.b  $A,  5	; 10	
000A6D12                            ; ===========================================================================
000A6D12                            ; off_92BA:
000A6D12                            OptScrBoxData:
000A6D12                            
000A6D12 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6D16 4192                       		dc.w $4192
000A6D18 0003                       		dc.w 3
000A6D1A 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6D1E 4592                       		dc.w $4592
000A6D20 0003                       		dc.w 3
000A6D22 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D26 4992                       		dc.w $4992
000A6D28 0003                       		dc.w 3
000A6D2A                            
000A6D2A                            off_92D2:
000A6D2A 0000 0000                  		dc.l TextOptScr_Default
000A6D2E 0000 0000                  		dc.l TextOptScr_Original
000A6D32 0000 0000                  		dc.l TextOptScr_Beta
000A6D36 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3A 0000 0000                  		dc.l TextOptScr_C2
000A6D3E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D42 0000 0000                  		dc.l TextOptScr_RHS
000A6D46 0000 0000                  		dc.l TextOptScr_Socket
000A6D4A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D4E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D52                            off_92DE:
000A6D52 0000 0000                  		dc.l TextOptScr_Default
000A6D56 0000 0000                  		dc.l TextOptScr_Original
000A6D5A 0000 0000                  		dc.l TextOptScr_Beta
000A6D5E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D62 0000 0000                  		dc.l TextOptScr_C2
000A6D66 0000 0000                  		dc.l TextOptScr_Clackers
000A6D6A 0000 0000                  		dc.l TextOptScr_RHS
000A6D6E 0000 0000                  		dc.l TextOptScr_Socket
000A6D72 0000 0000                  		dc.l TextOptScr_Cringe
000A6D76 0000 0000                  		dc.l TextOptScr_Dark	
000A6D7A                            off_92EA:
000A6D7A 0000 0000                  		dc.l TextOptScr_On
000A6D7E 0000 0000                  		dc.l TextOptScr_Off
000A6D82                            off_92F2:
000A6D82 0000 0000                  		dc.l TextOptScr_Null
000A6D86 0000 0000                  		dc.l TextOptScr_Null2
000A6D8A                            ; ===========================================================================
000A6D8A                            
000A6EA9                            ; ============================================================================
000A6EA9                            
000A6EA9                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A73AA 00                         		even
000A73AA                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7556                            		even
000A7556                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AC0                            		even
000A7AC0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B40                            		even
000A7B40                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B6C                            		even
000A7B6C                            		even
000A7B6C                            
000A7B6C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253F0                                        even
001253F0                            
001253F0                            Art_Dust:	incbin	artunc\spindust.bin
00126D30                            
00126D30                            ; ===============================================================
00126D30                            ; ---------------------------------------------------------------
00126D30                            ; Error handling module
00126D30                            ; ---------------------------------------------------------------
00126D30                             
00126D30 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D34 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D3E 01                                 dc.b    1               ; extended stack frame
00126D40 00                                 even
00126D40                             
00126D40 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D44 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D52 01                                 dc.b    1               ; extended stack frame
00126D54 00                                 even
00126D54                             
00126D54 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D58 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D6C 00                                 dc.b    0               ; extended stack frame
00126D6E 00                                 even
00126D6E                             
00126D6E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D72 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D7E 00                                 dc.b    0               ; extended stack frame
00126D80 00                                 even
00126D80                             
00126D80 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D84 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D94 00                                 dc.b    0               ; extended stack frame
00126D96 00                                 even
00126D96                             
00126D96 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D9A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126DAC 00                                 dc.b    0               ; extended stack frame
00126DAE 00                                 even
00126DAE                             
00126DAE 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126DB2 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DC6 00                                 dc.b    0               ; extended stack frame
00126DC8 00                                 even
00126DC8                             
00126DC8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DCC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DD2 00                                 dc.b    0               ; extended stack frame
00126DD4 00                                 even
00126DD4                             
00126DD4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DD8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DEB 00                                 dc.b    0               ; extended stack frame
00126DEC                                    even
00126DEC                             
00126DEC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DF0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126E03 00                                 dc.b    0               ; extended stack frame
00126E04                                    even
00126E04                             
00126E04 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126E08 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126E18 00                                 dc.b    0               ; extended stack frame
00126E1A 00                                 even
00126E1A                             
00126E1A                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275FE                            
001275FE                            ; end of 'ROM'
001275FE                            		even
001275FE                            EndOfRom:
001275FE                            
001275FE                            
