00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ===========================================================================
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b   (v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 23FC 4000 0010 00C0 0004           move.l	#$40000010,(vdp_control_port).l
00000AD2 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000ADA 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000ADE 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AE4 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AEA 0240 003E                  		andi.w	#$3E,d0
00000AEE 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AF2 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000AF6                            
00000AF6                            VBla_Music:
00000AF6 46FC 2300                  		enable_ints		; enable interrupts (we can accept horizontal interrupts from now on)
00000AFA 08F8 0000 F64F                     bset    #0,(f_wtr_state+$1).w    ; set "SMPS running flag"
00000B00 6600                       		bne.s   VBla_Exit       ; if it was set already, don't call another instance of SMPS
00000B02 4EB9 0000 0000                     jsr UpdateMusic     ; run SMPS
00000B08 4238 F64F                          clr.b   (f_wtr_state+$1).w       ; reset "SMPS running flag"
00000B0C                            
00000B0C                            VBla_Exit:
00000B0C 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B10 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B14 4E73                       		rte
00000B16                            ; ===========================================================================
00000B16 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B1A 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B1E 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B22 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B26 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B2A 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B2E 0000                       		dc.w VBla_0C-VBla_Index
00000B30                            ; ===========================================================================
00000B30                            
00000B30                            VBla_00:
00000B30 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B36 6700                       		beq.s	@islevel
00000B38 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B3E 66B6                       		bne.s	VBla_Music	; if not, branch
00000B40                            
00000B40                            	@islevel:
00000B40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B46 66AE                       		bne.s	VBla_Music	; if not, branch
00000B48                            
00000B48 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4E 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B54 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B58 6600                       		bne.s	@waterabove 	; if yes, branch
00000B5A                            
00000B5A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B7E 6000                       		bra.s	@waterbelow
00000B80                            
00000B80                            @waterabove:
00000B80 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BA4                            
00000BA4                            	@waterbelow:
00000BA4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BA8 6000 FF4C                  		bra.w	VBla_Music
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            VBla_10:
00000BAC 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000BB2 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000BB6                            
00000BB6                            VBla_08:
00000BB6 6100 0000                  		bsr.w   VBla_06
00000BBA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BBE 4EBA 0000                  		jsr     ProcessDMAQueue(pc)
00000BC2                            
00000BC2                            	@nochg:		
00000BC2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000BC8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000BCE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000BD4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            ; Subroutine to	run a demo for an amount of time
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            
00000BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000BDA                            
00000BDA                            
00000BDA                            Demo_Time:
00000BDA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000BDE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000BE4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000BEA 6100 0000                  		bsr.w	ProcessDPLC2
00000BEE                            
00000BEE                            VBla_14:
00000BEE 4A78 F614                  		tst.w	(v_demolength).w
00000BF2 6700                       		beq.s	@end
00000BF4 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF8                            
00000BF8                            	@end:
00000BF8 4E75                       		rts
00000BFA                            ; ===========================================================================
00000BFA                            
00000BFA                            VBla_04:
00000BFA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFE 6100 0000                  		bsr.w	sub_1642
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            VBla_02:
00000C02 6100                       		bsr.s	VBla_06
00000C04 60E8                       		bra.s	VBla_14
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_0C:
00000C06 61AE                       		bsr.s   VBla_08
00000C08 6000 0000                  		bra.w	sub_1642
00000C0C                            ; ===========================================================================
00000C0C                            
00000C0C                            VBla_0E:
00000C0C 6100                       		bsr.s	VBla_06
00000C0E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000C12 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000C18 4E75                       		rts
00000C1A                            ; ===========================================================================
00000C1A                            
00000C1A                            VBla_12:
00000C1A 6100                       		bsr.s	VBla_06
00000C1C 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C20 6000 0000                  		bra.w	sub_1642
00000C24                            ; ===========================================================================
00000C24                            
00000C24                            VBla_0A:
00000C24 6100 0000                  		bsr.w	PalCycle_SS
00000C28                            
00000C28                            VBla_16:
00000C28 6100                       		bsr.s   CRAMWriteDry
00000C2A 4EBA 0000                  		jsr     ProcessDMAQueue(pc)
00000C2E                            		
00000C2E                            	@nochg:			
00000C2E 61BE                       		bsr.s	VBla_14
00000C30                            
00000C30                            ; ---------------------------------------------------------------------------
00000C30                            ; Subroutine to	read joypad input, and send it to the RAM
00000C30                            ; ---------------------------------------------------------------------------
00000C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C30                            
00000C30                            
00000C30                            ReadJoypads:
00000C30 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
00000C34 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000C3A 6100                       		bsr.s	@read		; do the first joypad
00000C3C 5449                       		addq.w	#2,a1		; do the second	joypad
00000C3E                            
00000C3E                            	@read:
00000C3E 12BC 0000                  		move.b	#0,(a1)
00000C42 1011                       		move.b	(a1),d0
00000C44 E508                       		lsl.b	#2,d0
00000C46 0200 00C0                  		andi.b	#$C0,d0
00000C4A 12BC 0040                  		move.b	#$40,(a1)
00000C4E 1211                       		move.b	(a1),d1
00000C50 0201 003F                  		andi.b	#$3F,d1
00000C54 8001                       		or.b	d1,d0
00000C56 4600                       		not.b	d0
00000C58 1210                       		move.b	(a0),d1
00000C5A B101                       		eor.b	d0,d1
00000C5C 10C0                       		move.b	d0,(a0)+
00000C5E C200                       		and.b	d0,d1
00000C60 10C1                       		move.b	d1,(a0)+
00000C62 4E75                       		rts
00000C64                            ; End of function ReadJoypads
00000C64                            
00000C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C64                            
00000C64                            
00000C64                            VBla_06:
00000C64 61CA                       		bsr.s	ReadJoypads
00000C66 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000C6A 6600                       		bne.s	AboveWater1	; if yes, branch
00000C6C                            	CRAMWriteDry:
00000C6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C90 6000                       		bra.s	BelowWater
00000C92                            
00000C92                            	AboveWater1:
00000C92 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000CB6                            
00000CB6                            	BelowWater:
00000CB6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CDA 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CFE 4E75                       		rts
00000D00                            ; End of function VBla_06
00000D00                            
00000D00                            
00000D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D00                            
00000D00                            
00000D00                            sub_106E:
00000D00 33FC 0100 00A1 1100        		stopZ80
00000D08 0839 0000 00A1 1100 66F6   		waitZ80
00000D12 6100 FF1C                  		bsr.w	ReadJoypads
00000D16 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000D1A 6600                       		bne.s	@waterabove	; if yes, branch
00000D1C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D40 6000                       		bra.s	@waterbelow
00000D42                            
00000D42                            	@waterabove:
00000D42 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000D66                            
00000D66                            	@waterbelow:
00000D66 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DAE 33FC 0000 00A1 1100        		startZ80
00000DB6 4E75                       		rts	
00000DB8                            ; End of function sub_106E
00000DB8                            
00000DB8                            ; ---------------------------------------------------------------------------
00000DB8                            ; Horizontal interrupt
00000DB8                            ; ---------------------------------------------------------------------------
00000DB8                            
00000DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000DB8                            
00000DB8                            
00000DB8                            HBlank:
00000DB8 46FC 2700                  		disable_ints
00000DBC 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000DC0 6700                       		beq.s	@nochg		; if not, branch
00000DC2 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000DC8 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000DCC 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000DD2 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00000DD6 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000DDE 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
00000DE0 2298                       		move.l	(a0)+,(a1)
00000DE2 2298                       		move.l	(a0)+,(a1)
00000DE4 2298                       		move.l	(a0)+,(a1)
00000DE6 2298                       		move.l	(a0)+,(a1)
00000DE8 2298                       		move.l	(a0)+,(a1)
00000DEA 2298                       		move.l	(a0)+,(a1)
00000DEC 2298                       		move.l	(a0)+,(a1)
00000DEE 2298                       		move.l	(a0)+,(a1)
00000DF0 2298                       		move.l	(a0)+,(a1)
00000DF2 2298                       		move.l	(a0)+,(a1)
00000DF4 2298                       		move.l	(a0)+,(a1)
00000DF6 2298                       		move.l	(a0)+,(a1)
00000DF8 2298                       		move.l	(a0)+,(a1)
00000DFA 2298                       		move.l	(a0)+,(a1)
00000DFC 2298                       		move.l	(a0)+,(a1)
00000DFE 2298                       		move.l	(a0)+,(a1)
00000E00 2298                       		move.l	(a0)+,(a1)
00000E02 2298                       		move.l	(a0)+,(a1)
00000E04 2298                       		move.l	(a0)+,(a1)
00000E06 2298                       		move.l	(a0)+,(a1)
00000E08 2298                       		move.l	(a0)+,(a1)
00000E0A 2298                       		move.l	(a0)+,(a1)
00000E0C 2298                       		move.l	(a0)+,(a1)
00000E0E 2298                       		move.l	(a0)+,(a1)
00000E10 2298                       		move.l	(a0)+,(a1)
00000E12 2298                       		move.l	(a0)+,(a1)
00000E14 2298                       		move.l	(a0)+,(a1)
00000E16 2298                       		move.l	(a0)+,(a1)
00000E18 2298                       		move.l	(a0)+,(a1)
00000E1A 2298                       		move.l	(a0)+,(a1)
00000E1C 2298                       		move.l	(a0)+,(a1)
00000E1E 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
00000E24 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000E28                            
00000E28                            	@nochg:
00000E28 4E73                       		rte	
00000E2A                            ; ===========================================================================
00000E2A                            ; End of function HBlank
00000E2A                            
00000E2A                            ; ---------------------------------------------------------------------------
00000E2A                            ; Subroutine to	initialise joypads
00000E2A                            ; ---------------------------------------------------------------------------
00000E2A                            
00000E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E2A                            
00000E2A                            
00000E2A                            JoypadInit:
00000E2A 33FC 0100 00A1 1100        		stopZ80
00000E32 0839 0000 00A1 1100 66F6   		waitZ80
00000E3C 7040                       		moveq	#$40,d0
00000E3E 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000E44 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000E4A 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00000E50 33FC 0000 00A1 1100        		startZ80
00000E58 4E75                       		rts	
00000E5A                            ; End of function JoypadInit
00000E5A                            
00000E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E5A                            
00000E5A                            
00000E5A                            VDPSetupGame:
00000E5A 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00000E60 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000E66 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00000E6C 7E12                       		moveq	#$12,d7
00000E6E                            
00000E6E                            	@setreg:
00000E6E 309A                       		move.w	(a2)+,(a0)
00000E70 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00000E74                            
00000E74 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00000E7A 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00000E7E 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00000E84 7000                       		moveq	#0,d0
00000E86 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00000E90 3E3C 003F                  		move.w	#$3F,d7
00000E94                            
00000E94                            	@clrCRAM:
00000E94 3280                       		move.w	d0,(a1)
00000E96 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00000E9A                            
00000E9A 42B8 F616                  		clr.l	(v_scrposy_dup).w
00000E9E 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00000EA2 2F01                       		move.l	d1,-(sp)
00000EA4 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
00000EC6                            
00000EC6                            	@waitforDMA:
00000EC6 3215                       		move.w	(a5),d1
00000EC8 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00000ECC 66F8                       		bne.s	@waitforDMA	; if yes, branch
00000ECE                            
00000ECE 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00000ED2 221F                       		move.l	(sp)+,d1
00000ED4 4E75                       		rts	
00000ED6                            ; End of function VDPSetupGame
00000ED6                            
00000ED6                            ; ===========================================================================
00000ED6 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00000ED8 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00000EDA 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00000EDC 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00000EDE 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00000EE0 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00000EE2 8600                       		dc.w $8600		; unused
00000EE4 8700                       		dc.w $8700		; set background colour (palette entry 0)
00000EE6 8800                       		dc.w $8800		; unused
00000EE8 8900                       		dc.w $8900		; unused
00000EEA 8A00                       		dc.w $8A00		; default H.interrupt register
00000EEC 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00000EEE 8C81                       		dc.w $8C81		; 40-cell display mode
00000EF0 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00000EF2 8E00                       		dc.w $8E00		; unused
00000EF4 8F02                       		dc.w $8F02		; set VDP increment size
00000EF6 9001                       		dc.w $9001		; 64-cell hscroll size
00000EF8 9100                       		dc.w $9100		; window horizontal position
00000EFA 9200                       		dc.w $9200		; window vertical position
00000EFC                            
00000EFC                            ; ---------------------------------------------------------------------------
00000EFC                            ; Subroutine to	clear the screen
00000EFC                            ; ---------------------------------------------------------------------------
00000EFC                            
00000EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EFC                            
00000EFC                            
00000EFC                            ClearScreen:
00000EFC 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
00000F1E                            
00000F1E                            	@wait1:
00000F1E 3215                       		move.w	(a5),d1
00000F20 0801 0001                  		btst	#1,d1
00000F24 66F8                       		bne.s	@wait1
00000F26                            
00000F26 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F2A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00000F4C                            
00000F4C                            	@wait2:
00000F4C 3215                       		move.w	(a5),d1
00000F4E 0801 0001                  		btst	#1,d1
00000F52 66F8                       		bne.s	@wait2
00000F54                            
00000F54 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F58 42B8 F616                  		clr.l	(v_scrposy_dup).w
00000F5C 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00000F60                            
00000F60 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00000F64 7000                       		moveq	#0,d0
00000F66 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
00000F6A                            
00000F6A                            	@clearsprites:
00000F6A 22C0                       		move.l	d0,(a1)+
00000F6C 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00000F70                            
00000F70 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00000F74 7000                       		moveq	#0,d0
00000F76 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00000F7A                            
00000F7A                            	@clearhscroll:
00000F7A 22C0                       		move.l	d0,(a1)+
00000F7C 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00000F80 4E75                       		rts	
00000F82                            ; End of function ClearScreen
00000F82                            
00000F82                            ; ---------------------------------------------------------------------------
00000F82                            ; Subroutine to	load the sound driver
00000F82                            ; ---------------------------------------------------------------------------
00000F82                            
00000F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F82                            
00000F82                            
00000F82                            SoundDriverLoad:
00000F82 4E71                       		nop	
00000F84 33FC 0100 00A1 1100        		stopZ80
00000F8C 33FC 0100 00A1 1200        		resetZ80
00000F94 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00000F9A 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00000FA0 6100 0000                  		bsr.w	KosDec		; decompress
00000FA4 33FC 0000 00A1 1200        		resetZ80a
00000FAC 4E71                       		nop	
00000FAE 4E71                       		nop	
00000FB0 4E71                       		nop	
00000FB2 4E71                       		nop	
00000FB4 33FC 0100 00A1 1200        		resetZ80
00000FBC 33FC 0000 00A1 1100        		startZ80
00000FC4 4E75                       		rts	
00000FC6                            ; End of function SoundDriverLoad
00000FC6                            
00000FC6                            		include	"_incObj\sub PlaySound.asm"
00000FC6                            ; ---------------------------------------------------------------------------
00000FC6                            ; Subroutine to	play a music track
00000FC6                            
00000FC6                            ; input:
00000FC6                            ;	d0 = track to play
00000FC6                            ; ---------------------------------------------------------------------------
00000FC6                            
00000FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC6                            
00000FC6                            
00000FC6                            PlaySound:
00000FC6 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
00000FCA 4E75                       		rts	
00000FCC                            ; End of function PlaySound
00000FCC                            
00000FCC                            ; ---------------------------------------------------------------------------
00000FCC                            ; Subroutine to	play a sound effect
00000FCC                            ; ---------------------------------------------------------------------------
00000FCC                            
00000FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FCC                            
00000FCC                            
00000FCC                            PlaySound_Special:
00000FCC 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00000FD0 4E75                       		rts	
00000FD2                            ; End of function PlaySound_Special
00000FD2                            
00000FD2                            ; ===========================================================================
00000FD2                            ; ---------------------------------------------------------------------------
00000FD2                            ; Unused sound/music subroutine
00000FD2                            ; ---------------------------------------------------------------------------
00000FD2                            
00000FD2                            PlaySound_Unused:
00000FD2 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
00000FD6 4E75                       		rts	
00000FD6 4E75                       		rts	
00000FD8                            		include	"_inc\PauseGame.asm"
00000FD8                            ; ---------------------------------------------------------------------------
00000FD8                            ; Subroutine to	pause the game
00000FD8                            ; ---------------------------------------------------------------------------
00000FD8                            
00000FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FD8                            
00000FD8                            
00000FD8                            PauseGame:
00000FD8 4E71                       		nop	
00000FDA 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00000FDE 6700                       		beq.s	Unpause		; if not, branch
00000FE0 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00000FE4 6600                       		bne.s	Pause_StopGame	; if yes, branch
00000FE6 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00000FEC 6700                       		beq.s	Pause_DoNothing	; if not, branch
00000FEE                            
00000FEE                            Pause_StopGame:
00000FEE 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00000FF4 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
00000FFA                            
00000FFA                            Pause_Loop:
00000FFA 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001000 6100 0000                  		bsr.w	WaitForVBla
00001004 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
00001008 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000100A 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001010 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001012 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
00001018 4E71                       		nop	
0000101A 6000                       		bra.s	Pause_EndMusic
0000101C                            ; ===========================================================================
0000101C                            
0000101C                            Pause_ChkBC:
0000101C 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
00001022 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001024 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0000102A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000102C                            
0000102C                            Pause_ChkStart:
0000102C 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001032 67C6                       		beq.s	Pause_Loop	; if not, branch
00001034                            
00001034                            Pause_EndMusic:
00001034 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000103A                            
0000103A                            Unpause:
0000103A 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001040                            
00001040                            Pause_DoNothing:
00001040 4E75                       		rts	
00001042                            ; ===========================================================================
00001042                            
00001042                            Pause_SlowMo:
00001042 31FC 0001 F63A             		move.w	#1,(f_pause).w
00001048 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
0000104E 4E75                       		rts	
00001050                            ; End of function PauseGame
00001050                            ; End of function PauseGame
00001050                            
00001050                            ; ---------------------------------------------------------------------------
00001050                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001050                            
00001050                            ; input:
00001050                            ;	a1 = tile map address
00001050                            ;	d0 = VRAM address
00001050                            ;	d1 = width (cells)
00001050                            ;	d2 = height (cells)
00001050                            ; ---------------------------------------------------------------------------
00001050                            
00001050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001050                            
00001050                            
00001050                            TilemapToVRAM:
00001050 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00001056 283C 0080 0000             		move.l	#$800000,d4
0000105C                            
0000105C                            	Tilemap_Line:
0000105C 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001060 3601                       		move.w	d1,d3
00001062                            
00001062                            	Tilemap_Cell:
00001062 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001064 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
00001068 D084                       		add.l	d4,d0		; goto next line
0000106A 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
0000106E 4E75                       		rts	
00001070                            ; End of function TilemapToVRAM
00001070                            
00001070                            		include	"_inc\Nemesis Decompression.asm"
00001070                            ; ==============================================================================
00001070                            ; ------------------------------------------------------------------------------
00001070                            ; Nemesis decompression routine
00001070                            ; ------------------------------------------------------------------------------
00001070                            ; Optimized by vladikcomper
00001070                            ; ------------------------------------------------------------------------------
00001070                             
00001070                            NemDec_RAM:
00001070 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001074 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001078 6000                           bra.s   NemDec_Main
0000107A                             
0000107A                            ; ------------------------------------------------------------------------------
0000107A                            NemDec:
0000107A 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
0000107E 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001084 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
00001088                             
00001088                            NemDec_Main:
00001088 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
0000108C 3418                           move.w  (a0)+,d2        ; get number of patterns
0000108E 6A00                           bpl.s   @0          ; are we in Mode 0?
00001090 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001094 E74A                       @0  lsl.w   #3,d2
00001096 3A42                           movea.w d2,a5
00001098 7607                           moveq   #7,d3
0000109A 7400                           moveq   #0,d2
0000109C 7800                           moveq   #0,d4
0000109E 6100 0000                      bsr.w   NemDec_BuildCodeTable
000010A2 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
000010A4 E145                           asl.w   #8,d5           ; shift up by a byte
000010A6 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
000010A8 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
000010AC 6100                           bsr.s   NemDec2
000010AE 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
000010B2 4E75                           rts
000010B4                             
000010B4                            ; ---------------------------------------------------------------------------
000010B4                            ; Part of the Nemesis decompressor, processes the actual compressed data
000010B4                            ; ---------------------------------------------------------------------------
000010B4                             
000010B4                            NemDec2:
000010B4 3E06                           move.w  d6,d7
000010B6 5147                           subq.w  #8,d7           ; get shift value
000010B8 3205                           move.w  d5,d1
000010BA EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
000010BC 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
000010C0 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
000010C2 0241 00FF                      andi.w  #$FF,d1
000010C6 D241                           add.w   d1,d1
000010C8 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000010CC 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000010D0 6400                           bcc.s   @0          ; if not, branch
000010D2 5046                           addq.w  #8,d6
000010D4 E145                           asl.w   #8,d5
000010D6 1A18                           move.b  (a0)+,d5        ; read next byte
000010D8 1231 1001                  @0  move.b  1(a1,d1.w),d1
000010DC 3001                           move.w  d1,d0
000010DE 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000010E2 0240 00F0                      andi.w  #$F0,d0
000010E6                             
000010E6                            NemDec_GetRepeatCount:
000010E6 E848                           lsr.w   #4,d0           ; get repeat count
000010E8                             
000010E8                            NemDec_WritePixel:
000010E8 E98C                           lsl.l   #4,d4           ; shift up by a nybble
000010EA 8801                           or.b    d1,d4           ; write pixel
000010EC 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000010F0 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000010F2                            ; ---------------------------------------------------------------------------
000010F2                             
000010F2                            NemPCD_NewRow:
000010F2 7800                           moveq   #0,d4           ; reset row
000010F4 7607                           moveq   #7,d3           ; reset nybble counter
000010F6                             
000010F6                            NemDec_WritePixelLoop:
000010F6 51C8 FFF0                      dbf d0,NemDec_WritePixel
000010FA 60B8                           bra.s   NemDec2
000010FC                            ; ---------------------------------------------------------------------------
000010FC                             
000010FC                            NemDec_InlineData:
000010FC 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000010FE 0C46 0009                      cmpi.w  #9,d6
00001102 6400                           bcc.s   @0
00001104 5046                           addq.w  #8,d6
00001106 E145                           asl.w   #8,d5
00001108 1A18                           move.b  (a0)+,d5
0000110A 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000110C 3205                           move.w  d5,d1
0000110E EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001110 3001                           move.w  d1,d0
00001112 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001116 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000111A 0C46 0009                      cmpi.w  #9,d6
0000111E 64C6                           bcc.s   NemDec_GetRepeatCount
00001120 5046                           addq.w  #8,d6
00001122 E145                           asl.w   #8,d5
00001124 1A18                           move.b  (a0)+,d5
00001126 60BE                           bra.s   NemDec_GetRepeatCount
00001128                             
00001128                            ; ---------------------------------------------------------------------------
00001128                            ; Subroutines to output decompressed entry
00001128                            ; Selected depending on current decompression mode
00001128                            ; ---------------------------------------------------------------------------
00001128                             
00001128                            NemPCD_WriteRowToVDP:
00001128                            loc_1502:
00001128 2884                           move.l  d4,(a4)         ; write 8-pixel row
0000112A 534D                           subq.w  #1,a5
0000112C 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000112E 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001130 4E75                           rts
00001132                            ; ---------------------------------------------------------------------------
00001132                             
00001132                            NemPCD_WriteRowToVDP_XOR:
00001132 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001134 2882                           move.l  d2,(a4)         ; and write the result
00001136 534D                           subq.w  #1,a5
00001138 380D                           move.w  a5,d4
0000113A 66B6                           bne.s   NemPCD_NewRow
0000113C 4E75                           rts
0000113E                            ; ---------------------------------------------------------------------------
0000113E                             
0000113E                            NemDec_WriteRowToRAM:
0000113E 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001140 534D                           subq.w  #1,a5
00001142 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001144 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
00001146 4E75                           rts
00001148                            ; ---------------------------------------------------------------------------
00001148                             
00001148                            NemDec_WriteRowToRAM_XOR:
00001148 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000114A 28C2                           move.l  d2,(a4)+        ; and write the result
0000114C 534D                           subq.w  #1,a5
0000114E 380D                           move.w  a5,d4
00001150 66A0                           bne.s   NemPCD_NewRow
00001152 4E75                           rts
00001154                             
00001154                            ; ---------------------------------------------------------------------------
00001154                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001154                            ; ---------------------------------------------------------------------------
00001154                             
00001154                            NemDec_BuildCodeTable:
00001154 1018                           move.b  (a0)+,d0        ; read first byte
00001156                             
00001156                            @ChkEnd:
00001156 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000115A 6600                           bne.s   @NewPalIndex        ; if not, branch
0000115C 4E75                           rts
0000115E                            ; ---------------------------------------------------------------------------
0000115E                             
0000115E                            @NewPalIndex:
0000115E 3E00                           move.w  d0,d7
00001160                             
00001160                            @ItemLoop:
00001160 1018                           move.b  (a0)+,d0        ; read next byte
00001162 6BF2                           bmi.s   @ChkEnd         ; ~~
00001164 1200                           move.b  d0,d1
00001166 0247 000F                      andi.w  #$F,d7          ; get palette index
0000116A 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
0000116E 8E41                           or.w    d1,d7           ; combine the two
00001170 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001174 1200                           move.b  d0,d1
00001176 E149                           lsl.w   #8,d1
00001178 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000117A 7208                           moveq   #8,d1
0000117C 9240                           sub.w   d0,d1           ; is the code 8 bits long?
0000117E 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001180 1018                           move.b  (a0)+,d0        ; get code
00001182 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001184 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001188 60D6                           bra.s   @ItemLoop       ; repeat
0000118A                            ; ---------------------------------------------------------------------------
0000118A                             
0000118A                            @ItemShortCode:
0000118A 1018                           move.b  (a0)+,d0        ; get code
0000118C E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
0000118E D040                           add.w   d0,d0           ; get index into code table
00001190 7A01                           moveq   #1,d5
00001192 E36D                           lsl.w   d1,d5
00001194 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001196 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000119A                             
0000119A                            @ItemShortCodeLoop:
0000119A 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000119C 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
000011A0 60BE                           bra.s   @ItemLoop
000011A0 60BE                           bra.s   @ItemLoop
000011A2                            
000011A2                              
000011A2                                pusho	; buffer local label symbol config
000011A2                                opt ws+  ; change local label symbol to '.'
000011A2                            
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; MACRO ResetDMAQueue
000011A2                            ; Clears the DMA queue, discarding all previously-queued DMAs.
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
000011A2                            ; Performs all queued DMA transfers and clears the DMA queue.
000011A2                            ;
000011A2                            ; Output:
000011A2                            ; 	a1,a5	trashed
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE InitDMAQueue
000011A2                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
000011A2                            ; Must be called before the queue is used, and the queue expects that only it
000011A2                            ; write to this region of RAM.
000011A2                            ;
000011A2                            ; Output:
000011A2                            ; 	a0,d0,d1	trashed
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
000011A2                            ; Queues a DMA with parameters given in registers.
000011A2                            ;
000011A2                            ; Options:
000011A2                            ; 	AssumeSourceAddressInBytes (default 1)
000011A2                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
000011A2                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
000011A2                            ; 	Use128kbSafeDMA (default 0)
000011A2                            ; 	UseVIntSafeDMA (default 0)
000011A2                            ; Input:
000011A2                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
000011A2                            ; 		set to 0)
000011A2                            ; 	d2	Destination address
000011A2                            ; 	d3	Transfer length (in words)
000011A2                            ; Output:
000011A2                            ; 	d0,d1,d2,d3,a1	trashed
000011A2                            ;
000011A2                            ; With the default settings, runs in:
000011A2                            ; * 48(11/0) cycles if queue is full (DMA discarded)
000011A2                            ; * 184(29/9) cycles otherwise (DMA queued)
000011A2                            ;
000011A2                            ; With Use128kbSafeDMA = 1, runs in:
000011A2                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
000011A2                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
000011A2                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
000011A2                            ;   fills the queue (second piece is discarded)
000011A2                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
000011A2                            ;   space for both pieces (both pieces queued)
000011A2                            ;
000011A2                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
000011A2                            ;
000011A2                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
000011A2                            ; but only if the DMA is not entirely discarded. However, all callers must be
000011A2                            ; edited to make sure the adresss given is correct.
000011A2                            ;
000011A2                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
000011A2                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
000011A2                            ; discarded. However, all callers must be edited to make sure the adresss given
000011A2                            ; in the correct form. You can use the dmaSource function for that.
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; MACRO QueueStaticDMA
000011A2                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
000011A2                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
000011A2                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
000011A2                            ;
000011A2                            ; Options:
000011A2                            ; 	UseVIntSafeDMA (default 0)
000011A2                            ; Input:
000011A2                            ; 	Source address (in bytes), transfer length (in bytes), destination address
000011A2                            ; Output:
000011A2                            ; 	d0,a1	trashed
000011A2                            ;
000011A2                            ; With the default settings, runs in:
000011A2                            ; * 32(7/0) cycles if queue is full (DMA discarded)
000011A2                            ; * 122(21/8) cycles otherwise (DMA queued)
000011A2                            ;
000011A2                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
000011A2                            ; ===========================================================================
000011A2                            ; option: AssumeSourceAddressInBytes
000011A2                            ;
000011A2                            ; This option makes the function work as a drop-in replacement of the original
000011A2                            ; functions. If you modify all callers to supply a position in words instead of
000011A2                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
000011A2 =00000001                  AssumeSourceAddressInBytes = 1
000011A2                            ; ===========================================================================
000011A2                            ; option: AssumeSourceAddressIsRAMSafe
000011A2                            ;
000011A2                            ; This option (which is disabled by default) makes the DMA queue assume that the
000011A2                            ; source address is given to the function in a way that makes them safe to use
000011A2                            ; with RAM sources. You need to edit all callers to ensure this.
000011A2                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
000011A2 =00000000                  AssumeSourceAddressIsRAMSafe = 0
000011A2                            ; ===========================================================================
000011A2                            ; option: UseRAMSourceSafeDMA
000011A2                            ;
000011A2                            ; This option (which is enabled by default) makes source addresses in RAM safe
000011A2                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
000011A2                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
000011A2 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
000011A2                            ; ===========================================================================
000011A2                            ; option: Use128kbSafeDMA
000011A2                            ;
000011A2                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
000011A2                            ; disabled by default because you can simply align the art in ROM and avoid the
000011A2                            ; issue altogether. It is here so that you have a high-performance routine to do
000011A2                            ; the job in situations where you can't align it in ROM.
000011A2 =00000001                  Use128kbSafeDMA = 1
000011A2                            ; ===========================================================================
000011A2                            ; option UseVIntSafeDMA
000011A2                            ;
000011A2                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
000011A2                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
000011A2                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
000011A2                            ; KosM decoder) prevent these by masking off interrupts before calling and then
000011A2                            ; restore interrupts after.
000011A2 =00000000                  UseVIntSafeDMA = 0
000011A2                            ; ===========================================================================
000011A2                            
000011A2                            
000011A2                            ; Convenience macros, for increased maintainability of the code.
000011A2 =00000027                  DMA = %100111
000011A2 =00000021                  VRAM = %100001
000011A2                            ; Like vdpComm, but starting from an address contained in a register
000011A2 =00000001                  vdpCommReg_defined = 1
000011A2                            vdpCommReg macro reg,type,rwd,clr
000011A2                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
000011A2                            	if ((\type&\rwd)&3)<>0
000011A2                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
000011A2                            	endif
000011A2                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
000011A2                            	swap	\reg								; Put all bits in proper places
000011A2                            	if \clr <> 0
000011A2                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
000011A2                            	endif
000011A2                            	if ((\type&\rwd)&$FC)=$20
000011A2                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
000011A2                            	elseif ((\type&\rwd)&$FC)<>0
000011A2                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
000011A2                            	endif
000011A2                            	endm
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000001                  intMacros_defined = 1
000011A2                            enableInts macro
000011A2                            	move	#$2300,sr
000011A2                            	endm
000011A2                            
000011A2                            disableInts macro
000011A2                            	move	#$2700,sr
000011A2                            	endm
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000001                  DMAEntry_defined = 1
000011A2                                    rsreset
000011A2 =00000000                  DMAEntry.Reg94:		rs.b	1
000011A2                            			  
000011A2 =00000001                  DMAEntry.Size:      rs.b    0
000011A2 =00000001                  DMAEntry.SizeH:		rs.b	1
000011A2 =00000002                  DMAEntry.Reg93:		rs.b	1
000011A2 =00000003                  DMAEntry.Source:    rs.b    0
000011A2 =00000003                  DMAEntry.SizeL:		rs.b	1
000011A2 =00000004                  DMAEntry.Reg97:		rs.b	1
000011A2 =00000005                  DMAEntry.SrcH:		rs.b	1
000011A2 =00000006                  DMAEntry.Reg96:		rs.b	1
000011A2 =00000007                  DMAEntry.SrcM:		rs.b	1
000011A2 =00000008                  DMAEntry.Reg95:		rs.b	1
000011A2 =00000009                  DMAEntry.SrcL:		rs.b	1
000011A2 =0000000A                  DMAEntry.Command:	rs.l	1
000011A2 =0000000E                  DMAEntry.len:   rs.w    0
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            						
000011A2                            										   
000011A2                            									   
000011A2                            	  
000011A2                            																			 
000011A2                            							  
000011A2 =00000001                  QueueStaticDMA_defined = 1
000011A2                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
000011A2                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
000011A2                            ; crosses a 128kB boundary, or has size 0.
000011A2                            QueueStaticDMA macro src,length,dest
000011A2                                local   len
000011A2                            		if ((\src)&1)<>0
000011A2                            			inform 3,"DMA queued from odd source \1!"
000011A2                            		endif
000011A2                            		if ((\length)&1)<>0
000011A2                            			inform 3,"DMA an odd number of bytes \2!"
000011A2                            		endif
000011A2                            		if (\length)=0
000011A2                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
000011A2                            		endif
000011A2                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
000011A2                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
000011A2                            		endif
000011A2                            	  
000011A2                            	if UseVIntSafeDMA=1
000011A2                            		move.w	sr,-(sp)										; Save current interrupt mask
000011A2                            		disableInts												; Mask off interrupts
000011A2                            	endif ; UseVIntSafeDMA=1
000011A2                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
000011A2                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
000011A2                            	beq.s	.done												; Return if there's no more room in the buffer
000011A2                            	len: = ((length>>1)&$7FFF)
000011A2                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
000011A2                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
000011A2                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
000011A2                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
000011A2                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
000011A2                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
000011A2                            .done:
000011A2                            	if UseVIntSafeDMA=1
000011A2                            		move.w	(sp)+,sr										; Restore interrupts to previous state
000011A2                            	endif ;UseVIntSafeDMA=1
000011A2                            	endm
000011A2                            
000011A2                                
000011A2                            
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ResetDMAQueue: macro
000011A2                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
000011A2                            	endm
000011A2                            ; ===========================================================================
000011A2                            
000011A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000011A2                            
000011A2                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
000011A2                            Add_To_DMA_Queue:
000011A2                            QueueDMATransfer:
000011A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000011A6 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000011AA 6700                       	beq.s	.done											; Return if there's no more room in the buffer
000011AC                            
000011AC E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
000011AE 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
000011B2 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
000011B6 7000                       	moveq	#0,d0											; We need a zero on d0
000011B8                            
000011B8                            		; Detect if transfer crosses 128KB boundary
000011B8                            		; Using sub+sub instead of move+add handles the following edge cases:
000011B8                            		; (1) d3.w = 0 => 128kB transfer
000011B8                            		;   (a) d1.w = 0 => no carry, don't split the DMA
000011B8                            		;   (b) d1.w != 0 => carry, need to split the DMA
000011B8                            		; (2) d3.w != 0
000011B8                            		;   (a) if there is carry on d1.w + d3.w
000011B8                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
000011B8                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
000011B8                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
000011B8                            		; The reason this works is that carry on d1.w + d3.w means that
000011B8                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
000011B8                            		; d1.w + d3.w > $10000.
000011B8 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
000011BA 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
000011BC 6500                       		bcs.s	.doubletransfer								; Branch if yes
000011BE                            	; It does not cross a 128kB boundary. So just finish writing it.
000011BE 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
000011C2                            
000011C2                            .finishxfer:
000011C2                            	; Command to specify destination address and begin DMA
000011C2 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000011CE 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000011D2 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000011D4 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000011D8                            
000011D8                            .done:
000011D8 4E75                       	rts
000011DA                            ; ---------------------------------------------------------------------------
000011DA                            .doubletransfer:
000011DA                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000011DA D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000011DC 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000011E0                            
000011E0 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000011E4 67DC                       		beq.s	.finishxfer									; Branch if not
000011E6                            
000011E6                            		; Get second transfer's source, destination, and length
000011E6 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000011E8 D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000011EA D040                       		add.w	d0,d0										; Convert to number of bytes
000011EC D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000011EE                            
000011EE                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000011EE                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000011FC 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001200                            
00001200                            		; Do second transfer
00001200 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001204 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
00001208                            
00001208                            		; Command to specify destination address and begin DMA
00001212 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
00001216 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
00001218                            
00001218 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
0000121C 4E75                       		rts
0000121E                            ; End of function QueueDMATransfer
0000121E                            ; ===========================================================================
0000121E                            
0000121E                            ; ---------------------------------------------------------------------------
0000121E                            ; Subroutine for issuing all VDP commands that were queued
0000121E                            ; (by earlier calls to QueueDMATransfer)
0000121E                            ; Resets the queue when it's done
0000121E                            ; ---------------------------------------------------------------------------
0000121E                            
0000121E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000121E                            
0000121E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
0000121E                            Process_DMA_Queue:
0000121E                            ProcessDMAQueue:
0000121E 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001222 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
00001226                            ; ---------------------------------------------------------------------------
00001226                            .jump_table:
00001226 4E75                       	rts
00001228                            	rept 6
00001228                            		trap	#0											; Just in case
00001228 4E40 4E40 4E40 4E40 4E40+  	endr
00001234                            ; ---------------------------------------------------------------------------
00001234 =00000001                      c: = 1
00001234                            	rept QueueSlotCount
00001234                            		lea	(vdp_control_port).l,a5
00001234                            		lea	(VDP_Command_Buffer).w,a1
00001234                            		if c<>QueueSlotCount
00001234                            			bra.w	.jump0 - c*8
00001234                            		endif
00001234                                c: = c + 1
0000132C                            ; ---------------------------------------------------------------------------
0000132C                            	rept QueueSlotCount
0000132C                            		move.l	(a1)+,(a5)									; Transfer length
0000132C                            		move.l	(a1)+,(a5)									; Source address high
0000132C                            		move.l	(a1)+,(a5)									; Source address low + destination high
0000132C                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
0000132C 2A99 2A99 2A99 3A99 2A99+  	endr
000013BC                            
000013BC                            .jump0:
000013BC 31FC C800 C8FC             	ResetDMAQueue
000013C2 4E75                       	rts
000013C4                            ; End of function ProcessDMAQueue
000013C4                            ; ===========================================================================
000013C4                            
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            ; Subroutine for initializing the DMA queue.
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            
000013C4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000013C4                            
000013C4                            InitDMAQueue:
000013C4 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
000013C8 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
000013CA 223C 9397 9695             	move.l	#$93979695,d1
000013D0 =00000000                      c: = 0
000013D0                            	rept QueueSlotCount
000013D0                            		move.b	d0,c + DMAEntry.Reg94(a0)
000013D0                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000013D0                                c: = c + DMAEntry.len
000013D0 1080 03C8 0002 1140 000E+  	endr
0000145E                            
0000145E 31FC C800 C8FC             	ResetDMAQueue
00001464 4E75                       	rts
00001466                            ; End of function ProcessDMAQueue
00001466                            ; ===========================================================================
00001466                            
00001466                            
00001466                                popo	; buffer local label symbol config
00001466                            
00001466                            
00001466                            ; ---------------------------------------------------------------------------
00001466                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
00001466                            ; ---------------------------------------------------------------------------
00001466                            
00001466                            ; ARGUMENTS
00001466                            ; d0 = index of PLC list
00001466                            ; ---------------------------------------------------------------------------
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            ; LoadPLC:
00001466                            AddPLC:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000147A 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
0000147E                            
0000147E                            	@findspace:
0000147E 4A92                       		tst.l	(a2)		; is space available in RAM?
00001480 6700                       		beq.s	@copytoRAM	; if yes, branch
00001482 5C4A                       		addq.w	#6,a2		; if not, try next space
00001484 60F8                       		bra.s	@findspace
00001486                            ; ===========================================================================
00001486                            
00001486                            @copytoRAM:
00001486 3019                       		move.w	(a1)+,d0	; get length of PLC
00001488 6B00                       		bmi.s	@skip
0000148A                            
0000148A                            	@loop:
0000148A 24D9                       		move.l	(a1)+,(a2)+
0000148C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000148E 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001492                            
00001492                            	@skip:
00001492 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
00001496 4E75                       		rts	
00001498                            ; End of function AddPLC
00001498                            
00001498                            
00001498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001498                            ; Queue pattern load requests, but clear the PLQ first
00001498                            
00001498                            ; ARGUMENTS
00001498                            ; d0 = index of PLC list (see ArtLoadCues)
00001498                            
00001498                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
00001498                            ;	  (or hacker) is responsible for making sure that no more than
00001498                            ;	  16 load requests are copied into the buffer.
00001498                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
00001498                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
00001498                            
00001498                            ; LoadPLC2:
00001498                            NewPLC:
00001498 48E7 0060                  		movem.l	a1-a2,-(sp)
0000149C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000014A2 D040                       		add.w	d0,d0
000014A4 3031 0000                  		move.w	(a1,d0.w),d0
000014A8 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
000014AC 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
000014AE 45F8 F680                  		lea	(v_plc_buffer).w,a2
000014B2 3019                       		move.w	(a1)+,d0	; get length of PLC
000014B4 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
000014B6                            
000014B6                            	@loop:
000014B6 24D9                       		move.l	(a1)+,(a2)+
000014B8 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000014BA 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
000014BE                            
000014BE                            	@skip:
000014BE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014C2 4E75                       		rts	
000014C4                            ; End of function NewPLC
000014C4                            
000014C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C4                            
000014C4                            ; ---------------------------------------------------------------------------
000014C4                            ; Subroutine to	clear the pattern load cues
000014C4                            ; ---------------------------------------------------------------------------
000014C4                            
000014C4                            ; Clear the pattern load queue ($FFF680 - $FFF700)
000014C4                            
000014C4                            
000014C4                            ClearPLC:
000014C4 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
000014C8 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
000014CA                            
000014CA                            	@loop:
000014CA 429A                       		clr.l	(a2)+
000014CC 51C8 FFFC                  		dbf	d0,@loop
000014D0 4E75                       		rts	
000014D2                            ; End of function ClearPLC
000014D2                            
000014D2                            ; ---------------------------------------------------------------------------
000014D2                            ; Subroutine to	use graphics listed in a pattern load cue
000014D2                            ; ---------------------------------------------------------------------------
000014D2                            
000014D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014D2                            
000014D2                            
000014D2                            RunPLC:
000014D2 4AB8 F680                  		tst.l	(v_plc_buffer).w
000014D6 6700                       		beq.s	Rplc_Exit
000014D8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000014DC 6600                       		bne.s	Rplc_Exit
000014DE 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000014E2 47F9 0000 1128             		lea	(NemPCD_WriteRowToVDP).l,a3
000014E8 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000014EC 3418                       		move.w	(a0)+,d2
000014EE 6A00                       		bpl.s	loc_160E
000014F0 D6FC 000A                  		adda.w	#$A,a3
000014F4                            
000014F4                            loc_160E:
000014F4 0242 7FFF                  		andi.w	#$7FFF,d2
000014F8 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000014FC 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001500 1A18                       		move.b	(a0)+,d5
00001502 E145                       		asl.w	#8,d5
00001504 1A18                       		move.b	(a0)+,d5
00001506 7C10                       		moveq	#$10,d6
00001508 7000                       		moveq	#0,d0
0000150A 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000150E 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001512 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001516 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000151A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000151E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001522 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001526                            
00001526                            Rplc_Exit:
00001526 4E75                       		rts	
00001528                            ; End of function RunPLC
00001528                            
00001528                            
00001528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001528                            
00001528                            
00001528                            sub_1642:
00001528 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000152C 6700 0000                  		beq.w	locret_16DA
00001530 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001536 7000                       		moveq	#0,d0
00001538 3038 F684                  		move.w	($FFFFF684).w,d0
0000153C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001542 6000                       		bra.s	loc_1676
00001544                            ; End of function sub_1642
00001544                            
00001544                            
00001544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001544                            
00001544                            
00001544                            ; sub_165E:
00001544                            ProcessDPLC2:
00001544 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001548 6700                       		beq.s	locret_16DA
0000154A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001550 7000                       		moveq	#0,d0
00001552 3038 F684                  		move.w	($FFFFF684).w,d0
00001556 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000155C                            
0000155C                            loc_1676:
0000155C 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001562 E588                       		lsl.l	#2,d0
00001564 E448                       		lsr.w	#2,d0
00001566 0040 4000                  		ori.w	#$4000,d0
0000156A 4840                       		swap	d0
0000156C 2880                       		move.l	d0,(a4)
0000156E 594C                       		subq.w	#4,a4
00001570 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001574 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001578 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000157C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001580 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001584 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001588 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000158C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001590                            
00001590                            loc_16AA:
00001590 3A7C 0008                  		movea.w	#8,a5
00001594 6100 FB5C                  		bsr.w	NemPCD_NewRow
00001598 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
0000159C 6700                       		beq.s	loc_16DC
0000159E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000015A2 66EC                       		bne.s	loc_16AA
000015A4 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000015A8 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000015AC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015B0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015B4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015B8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015BC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015C0                            
000015C0                            locret_16DA:
000015C0 4E75                       		rts	
000015C2                            ; ===========================================================================
000015C2                            
000015C2                            loc_16DC:
000015C2 41F8 F680                  		lea	(v_plc_buffer).w,a0
000015C6 7015                       		moveq	#$15,d0
000015C8                            
000015C8                            loc_16E2:
000015C8 20E8 0006                  		move.l	6(a0),(a0)+
000015CC 51C8 FFFA                  		dbf	d0,loc_16E2
000015D0 4E75                       		rts	
000015D2                            ; End of function ProcessDPLC2
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	execute	the pattern load cue
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            QuickPLC:
000015D2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015D8 D040                       		add.w	d0,d0
000015DA 3031 0000                  		move.w	(a1,d0.w),d0
000015DE 43F1 0000                  		lea	(a1,d0.w),a1
000015E2 3219                       		move.w	(a1)+,d1	; get length of PLC
000015E4                            
000015E4                            	Qplc_Loop:
000015E4 2059                       		movea.l	(a1)+,a0	; get art pointer
000015E6 7000                       		moveq	#0,d0
000015E8 3019                       		move.w	(a1)+,d0	; get VRAM address
000015EA E588                       		lsl.l	#2,d0
000015EC E448                       		lsr.w	#2,d0
000015EE 0040 4000                  		ori.w	#$4000,d0
000015F2 4840                       		swap	d0
000015F4 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000015FA 6100 FA7E                  		bsr.w	NemDec		; decompress
000015FE 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001602 4E75                       		rts	
00001604                            ; End of function QuickPLC
00001604                            
00001604                            		include	"_inc\Enigma Decompression.asm"
00001604                            ; ---------------------------------------------------------------------------
00001604                            ; Enigma decompression algorithm
00001604                            
00001604                            ; input:
00001604                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001604                            ;	a0 = source address
00001604                            ;	a1 = destination address
00001604                            
00001604                            ; usage:
00001604                            ;	lea	(source).l,a0
00001604                            ;	lea	(destination).l,a1
00001604                            ;	move.w	#arttile,d0
00001604                            ;	bsr.w	EniDec
00001604                            
00001604                            ; See http://www.segaretro.org/Enigma_compression for format description
00001604                            ; ---------------------------------------------------------------------------
00001604                            
00001604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001604                            
00001604                            
00001604                            EniDec:
00001604 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001608 3640                       		movea.w	d0,a3		; store starting art tile
0000160A 1018                       		move.b	(a0)+,d0
0000160C 4880                       		ext.w	d0
0000160E 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001610 1818                       		move.b	(a0)+,d4
00001612 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001614 3458                       		movea.w	(a0)+,a2
00001616 D4CB                       		adda.w	a3,a2		; store incremental copy word
00001618 3858                       		movea.w	(a0)+,a4
0000161A D8CB                       		adda.w	a3,a4		; store literal copy word
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001622 7C10                       		moveq	#16,d6		; initial shift value
00001624                            ; loc_173E:
00001624                            Eni_Loop:
00001624 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
00001626 3E06                       		move.w	d6,d7
00001628 9E40                       		sub.w	d0,d7
0000162A 3205                       		move.w	d5,d1
0000162C EE69                       		lsr.w	d7,d1
0000162E 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001632 3401                       		move.w	d1,d2		; and copy it
00001634 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
00001638 6400                       		bhs.s	@sevenbitentry
0000163A 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
0000163C E24A                       		lsr.w	#1,d2
0000163E                            ; loc_1758:
0000163E                            @sevenbitentry:
0000163E 6100 0000                  		bsr.w	EniDec_FetchByte
00001642 0242 000F                  		andi.w	#$F,d2		; get repeat count
00001646 E849                       		lsr.w	#4,d1
00001648 D241                       		add.w	d1,d1
0000164A 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
0000164E                            ; End of function EniDec
0000164E                            
0000164E                            ; ===========================================================================
0000164E                            ; loc_1768:
0000164E                            EniDec_00:
0000164E 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001650 524A                       		addq.w	#1,a2		; increment it
00001652 51CA FFFA                  		dbf	d2,@loop	; repeat
00001656 60CC                       		bra.s	Eni_Loop
00001658                            ; ===========================================================================
00001658                            ; loc_1772:
00001658                            EniDec_01:
00001658 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000165A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000165E 60C4                       		bra.s	Eni_Loop
00001660                            ; ===========================================================================
00001660                            ; loc_177A:
00001660                            EniDec_100:
00001660 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001664                            ; loc_177E:
00001664 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001666 51CA FFFC                  		dbf	d2,@loop	; repeat
0000166A                            
0000166A 60B8                       		bra.s	Eni_Loop
0000166C                            ; ===========================================================================
0000166C                            ; loc_1786:
0000166C                            EniDec_101:
0000166C 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001670                            ; loc_178A:
00001670 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001672 5241                       		addq.w	#1,d1		; increment
00001674 51CA FFFA                  		dbf	d2,@loop	; repeat
00001678                            
00001678 60AA                       		bra.s	Eni_Loop
0000167A                            ; ===========================================================================
0000167A                            ; loc_1794:
0000167A                            EniDec_110:
0000167A 6100 0000                  		bsr.w	EniDec_FetchInlineValue
0000167E                            ; loc_1798:
0000167E 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001680 5341                       		subq.w	#1,d1		; decrement
00001682 51CA FFFA                  		dbf	d2,@loop	; repeat
00001686                            
00001686 609C                       		bra.s	Eni_Loop
00001688                            ; ===========================================================================
00001688                            ; loc_17A2:
00001688                            EniDec_111:
00001688 0C42 000F                  		cmpi.w	#$F,d2
0000168C 6700                       		beq.s	EniDec_Done
0000168E                            ; loc_17A8:
0000168E 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001692 32C1                       		move.w	d1,(a1)+	; copy it
00001694 51CA FFF8                  		dbf	d2,@loop	; and repeat
00001698                            
00001698 608A                       		bra.s	Eni_Loop
0000169A                            ; ===========================================================================
0000169A                            ; loc_17B4:
0000169A                            EniDec_Index:
0000169A 60B2                       		bra.s	EniDec_00
0000169C 60B0                       		bra.s	EniDec_00
0000169E 60B8                       		bra.s	EniDec_01
000016A0 60B6                       		bra.s	EniDec_01
000016A2 60BC                       		bra.s	EniDec_100
000016A4 60C6                       		bra.s	EniDec_101
000016A6 60D2                       		bra.s	EniDec_110
000016A8 60DE                       		bra.s	EniDec_111
000016AA                            ; ===========================================================================
000016AA                            ; loc_17C4:
000016AA                            EniDec_Done:
000016AA 5348                       		subq.w	#1,a0		; go back by one byte
000016AC 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
000016B0 6600                       		bne.s	@notnewbyte	; if not, branch
000016B2 5348                       		subq.w	#1,a0		; and another one if needed
000016B4                            ; loc_17CE:
000016B4                            @notnewbyte:
000016B4 3008                       		move.w	a0,d0
000016B6 E248                       		lsr.w	#1,d0		; are we on an odd byte?
000016B8 6400                       		bcc.s	@evenbyte	; if not, branch
000016BA 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000016BC                            ; loc_17D6:
000016BC                            @evenbyte:
000016BC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016C0 4E75                       		rts	
000016C2                            
000016C2                            ; ---------------------------------------------------------------------------
000016C2                            ; Part of the Enigma decompressor
000016C2                            ; Fetches an inline copy value and stores it in d1
000016C2                            ; ---------------------------------------------------------------------------
000016C2                            
000016C2                            ; =============== S U B R O U T I N E =======================================
000016C2                            
000016C2                            ; loc_17DC:
000016C2                            EniDec_FetchInlineValue:
000016C2 360B                       		move.w	a3,d3		; copy starting art tile
000016C4 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000016C6 D201                       		add.b	d1,d1		; is the priority bit set?
000016C8 6400                       		bcc.s	@skippriority	; if not, branch
000016CA 5346                       		subq.w	#1,d6
000016CC 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000016CE 6700                       		beq.s	@skippriority	; if not, branch
000016D0 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000016D4                            ; loc_17EE:
000016D4                            @skippriority:
000016D4 D201                       		add.b	d1,d1		; is the high palette line bit set?
000016D6 6400                       		bcc.s	@skiphighpal	; if not, branch
000016D8 5346                       		subq.w	#1,d6
000016DA 0D05                       		btst	d6,d5
000016DC 6700                       		beq.s	@skiphighpal
000016DE 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000016E2                            ; loc_17FC:
000016E2                            @skiphighpal:
000016E2 D201                       		add.b	d1,d1		; is the low palette line bit set?
000016E4 6400                       		bcc.s	@skiplowpal	; if not, branch
000016E6 5346                       		subq.w	#1,d6
000016E8 0D05                       		btst	d6,d5
000016EA 6700                       		beq.s	@skiplowpal
000016EC 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000016F0                            ; loc_180A:
000016F0                            @skiplowpal:
000016F0 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000016F2 6400                       		bcc.s	@skipyflip	; if not, branch
000016F4 5346                       		subq.w	#1,d6
000016F6 0D05                       		btst	d6,d5
000016F8 6700                       		beq.s	@skipyflip
000016FA 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000016FE                            ; loc_1818:
000016FE                            @skipyflip:
000016FE D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001700 6400                       		bcc.s	@skipxflip	; if not, branch
00001702 5346                       		subq.w	#1,d6
00001704 0D05                       		btst	d6,d5
00001706 6700                       		beq.s	@skipxflip
00001708 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
0000170C                            ; loc_1826:
0000170C                            @skipxflip:
0000170C 3205                       		move.w	d5,d1
0000170E 3E06                       		move.w	d6,d7
00001710 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001712 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001714 3C07                       		move.w	d7,d6
00001716 0646 0010                  		addi.w	#16,d6
0000171A 4447                       		neg.w	d7		; calculate bit deficit
0000171C EF69                       		lsl.w	d7,d1		; and make space for that many bits
0000171E 1A10                       		move.b	(a0),d5		; get next byte
00001720 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001722 DE47                       		add.w	d7,d7
00001724 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001728 D245                       		add.w	d5,d1		; combine upper bits with lower bits
0000172A                            ; loc_1844:
0000172A                            @maskvalue:
0000172A 300D                       		move.w	a5,d0		; get length in bits of inline copy value
0000172C D040                       		add.w	d0,d0
0000172E C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001732 D243                       		add.w	d3,d1		; add starting art tile
00001734 1A18                       		move.b	(a0)+,d5
00001736 E14D                       		lsl.w	#8,d5
00001738 1A18                       		move.b	(a0)+,d5	; get next word
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            ; loc_1856:
0000173C                            @enoughbits:
0000173C 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
0000173E EE69                       		lsr.w	d7,d1	; get inline copy value
00001740 300D                       		move.w	a5,d0
00001742 D040                       		add.w	d0,d0
00001744 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001748 D243                       		add.w	d3,d1	; add starting art tile
0000174A 300D                       		move.w	a5,d0
0000174C 6000                       		bra.s	EniDec_FetchByte
0000174E                            ; ===========================================================================
0000174E                            ; loc_1868:
0000174E                            @justenough:
0000174E 7C10                       		moveq	#16,d6	; reset shift value
00001750 60D8                       		bra.s	@maskvalue
00001752                            ; ===========================================================================
00001752                            ; word_186C:
00001752                            EniDec_Masks:
00001752 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
0000175A 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001762 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
0000176A 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001772                            
00001772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001772                            
00001772                            ; sub_188C:
00001772                            EniDec_FetchByte:
00001772 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001774 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001778 6400                       		bhs.s	@locret	; if not, branch
0000177A 5046                       		addq.w	#8,d6
0000177C E145                       		asl.w	#8,d5
0000177E 1A18                       		move.b	(a0)+,d5
00001780                            @locret:
00001780 4E75                       		rts	
00001782                            ; End of function EniDec_FetchByte
00001782                            ; End of function EniDec_FetchByte
00001782                            		include	"_inc\Kosinski Decompression.asm"
00001782                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001782                            ; ---------------------------------------------------------------------------
00001782                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001782                            ; (sometimes called KOZINSKI decompression)
00001782                            ;
00001782                            ; ARGUMENTS:
00001782                            ; a0 = source address
00001782                            ; a1 = destination address
00001782                            ;
00001782                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001782                            ; New faster version by written by vladikcomper, with additional improvements by
00001782                            ; MarkeyJester and Flamewing
00001782                            ; Converted to ASM68K by Beta Filter.
00001782                            ; ---------------------------------------------------------------------------
00001782 =00000001                  Kos_UseLUT: equ 1
00001782 =00000003                  Kos_LoopUnroll: equ 3
00001782 =00000001                  Kos_ExtremeUnrolling: equ 1
00001782                            
00001782                            Kos_RunBitStream macro
00001782                                dbra    d2,@skip\@
00001782                                moveq   #7,d2                   ; Set repeat count to 8.
00001782                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001782                                not.w   d3                      ; Have all 16 bits been used up?
00001782                                bne.s   @skip\@                   ; Branch if not.
00001782                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001782                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001782                                if Kos_UseLUT=1
00001782                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001782                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001782                                endif
00001782                            @skip\@
00001782                                endm
00001782                            
00001782                            Kos_ReadBit macro
00001782                                if Kos_UseLUT=1
00001782                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001782                                else
00001782                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001782                                endif
00001782                                endm
00001782                            ; ===========================================================================
00001782                            ; KozDec@193A:
00001782                            KosDec:
00001782 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001784 7000                           moveq   #0,d0
00001786 7200                           moveq   #0,d1
00001788 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
0000178C 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
0000178E 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001790 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001794 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001798 7407                           moveq   #7,d2                   ; Set repeat count to 8.
0000179A 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
0000179C 6000                           bra.s   @FetchNewCode
0000179E                            ; ---------------------------------------------------------------------------
0000179E                            @FetchCodeLoop:
0000179E                                ; Code 1 (Uncompressed byte).
000017B6 12D8                           move.b  (a0)+,(a1)+
000017B8                            
000017B8                            @FetchNewCode:
000017BA 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
000017BC                            
000017BC                                ; Codes 00 and 01.
000017BC 7AFF                           moveq   #-1,d5
000017BE 4BD1                           lea (a1),a5
000017DA 6500 0000                      bcs.w   @Code_01
000017DE                            
000017DE                                ; Code 00 (Dictionary ref. short).
000017F8 6500                           bcs.s   @Copy45
00001814 6500                           bcs.s   @Copy3
0000182E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001830 DAC5                           adda.w  d5,a5
00001832 12DD                           move.b  (a5)+,(a1)+
00001834 12DD                           move.b  (a5)+,(a1)+
00001836 6080                           bra.s   @FetchNewCode
00001838                            ; ---------------------------------------------------------------------------
00001838                            @Copy3:
00001850 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001852 DAC5                           adda.w  d5,a5
00001854 12DD                           move.b  (a5)+,(a1)+
00001856 12DD                           move.b  (a5)+,(a1)+
00001858 12DD                           move.b  (a5)+,(a1)+
0000185A 6000 FF5C                      bra.w   @FetchNewCode
0000185E                            ; ---------------------------------------------------------------------------
0000185E                            @Copy45:
00001878 6500                           bcs.s   @Copy5
00001892 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001894 DAC5                           adda.w  d5,a5
00001896 12DD                           move.b  (a5)+,(a1)+
00001898 12DD                           move.b  (a5)+,(a1)+
0000189A 12DD                           move.b  (a5)+,(a1)+
0000189C 12DD                           move.b  (a5)+,(a1)+
0000189E 6000 FF18                      bra.w   @FetchNewCode
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            @Copy5:
000018BA 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
000018BC DAC5                           adda.w  d5,a5
000018BE 12DD                           move.b  (a5)+,(a1)+
000018C0 12DD                           move.b  (a5)+,(a1)+
000018C2 12DD                           move.b  (a5)+,(a1)+
000018C4 12DD                           move.b  (a5)+,(a1)+
000018C6 12DD                           move.b  (a5)+,(a1)+
000018C8 6000 FEEE                      bra.w   @FetchNewCode
000018CC                            ; ---------------------------------------------------------------------------
000018CC                            ; ---------------------------------------------------------------------------
000018CC                            @Code_01:
000018CC 7800                           moveq   #0,d4                   ; d4 will contain copy count.
000018CE                                ; Code 01 (Dictionary ref. long / special).
000018E6 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
000018E8 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
000018EA 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
000018EC EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
000018EE 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
000018F0 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
000018F2 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
000018F4                            
000018F4                                ; special mode (extended counter)
000018F4 1818                           move.b  (a0)+,d4                ; Read cnt
000018F6 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
000018F8 5304                           subq.b  #1,d4
000018FA 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
000018FE                            
000018FE DAC5                           adda.w  d5,a5
00001900 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001902 3C04                           move.w  d4,d6
00001904 4646                           not.w   d6
00001906 CC47                           and.w   d7,d6
00001908 DC46                           add.w   d6,d6
0000190A E64C                           lsr.w   #Kos_LoopUnroll,d4
0000190C 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001910                            ; ---------------------------------------------------------------------------
00001910                            @largecopy:
00001910                                rept (1<<Kos_LoopUnroll)
00001910                                move.b  (a5)+,(a1)+
00001910 12DD 12DD 12DD 12DD 12DD+      endr
00001920 51CC FFEE                      dbra    d4,@largecopy
00001924 6000 FE92                      bra.w   @FetchNewCode
00001928                            ; ---------------------------------------------------------------------------
00001928                            @StreamCopy:
00001928 DAC5                           adda.w  d5,a5
0000192A 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
0000192C BF44                           eor.w   d7,d4
0000192E D844                           add.w   d4,d4
00001930 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001934                            ; ---------------------------------------------------------------------------
00001934                            @mediumcopy:
00001934                                rept 8
00001934                                move.b  (a5)+,(a1)+
00001934 12DD 12DD 12DD 12DD 12DD+      endr
00001944 6000 FE72                      bra.w   @FetchNewCode
00001948                            ; ---------------------------------------------------------------------------
00001948                            @Quit:
00001948 4E75                           rts                             ; End of function KosDec.
0000194A                            ; ===========================================================================
0000194A                            KosDec_ByteMap:
0000194A 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000195A 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000196A 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000197A 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
0000198A 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
0000199A 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000019AA 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000019BA 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000019CA 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000019DA 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
000019EA 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
000019FA 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A0A 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A1A 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001A2A 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001A3A 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001A4A                            ; ===========================================================================
00001A4A                            ; ===========================================================================
00001A4A                            
00001A4A                            		include	"_inc\PaletteCycle.asm"
00001A4A                            ; ---------------------------------------------------------------------------
00001A4A                            ; Palette cycling routine loading subroutine
00001A4A                            ; ---------------------------------------------------------------------------
00001A4A                            
00001A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A4A                            
00001A4A                            
00001A4A                            PaletteCycle:
00001A4A 7400                       		moveq	#0,d2
00001A4C 7000                       		moveq	#0,d0
00001A4E 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001A52 D040                       		add.w	d0,d0
00001A54 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001A58 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001A5C                            ; End of function PaletteCycle
00001A5C                            
00001A5C                            ; ===========================================================================
00001A5C                            ; ---------------------------------------------------------------------------
00001A5C                            ; Palette cycling routines
00001A5C                            ; ---------------------------------------------------------------------------
00001A5C 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001A5E 0000                       		dc.w PCycle_LZ-PCycle_Index
00001A60 0000                       		dc.w PCycle_MZ-PCycle_Index
00001A62 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001A64 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001A66 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001A68 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001A6A                            
00001A6A                            
00001A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A6A                            
00001A6A                            
00001A6A                            PCycle_Title:
00001A6A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001A70 6000                       		bra.s	PCycGHZ_Go
00001A72                            ; ===========================================================================
00001A72                            
00001A72                            PCycle_GHZ:
00001A72 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001A78                            
00001A78                            PCycGHZ_Go:
00001A78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001A7C 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001A7E                            
00001A7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001A84 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001A88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001A8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001A90 E748                       		lsl.w	#3,d0
00001A92 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001A96 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A9A 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001A9E                            
00001A9E                            PCycGHZ_Skip:
00001A9E 4E75                       		rts	
00001AA0                            ; End of function PCycle_GHZ
00001AA0                            
00001AA0                            
00001AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA0                            
00001AA0                            
00001AA0                            PCycle_LZ:
00001AA0                            ; Waterfalls
00001AA0 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001AA4 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001AA6                            
00001AA6 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001AAC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001AB0 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001AB4 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001AB8 E748                       		lsl.w	#3,d0
00001ABA 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001AC0 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001AC6 6600                       		bne.s	PCycLZ_NotSBZ3
00001AC8 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001ACE                            
00001ACE                            	PCycLZ_NotSBZ3:
00001ACE 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001AD2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AD6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001ADA 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001ADE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE6                            
00001AE6                            PCycLZ_Skip1:
00001AE6                            ; Conveyor belts
00001AE6                            		;move.w	(v_framecount).w,d0
00001AE6                            		;andi.w	#7,d0
00001AE6                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001AE6                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001AE6                            		;moveq	#1,d1
00001AE6                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001AE6                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001AE6                            		;neg.w	d1
00001AE6                            
00001AE6                            	;PCycLZ_NoRev:
00001AE6                            		;move.w	(v_pal_buffer).w,d0
00001AE6                            		;andi.w	#3,d0
00001AE6                            		;add.w	d1,d0
00001AE6                            		;cmpi.w	#3,d0
00001AE6                            		;bcs.s	loc_1A0A
00001AE6                            		;move.w	d0,d1
00001AE6                            		;moveq	#0,d0
00001AE6                            		;tst.w	d1
00001AE6                            		;bpl.s	loc_1A0A
00001AE6                            		;moveq	#2,d0
00001AE6                            
00001AE6                            ;loc_1A0A:
00001AE6                            		;move.w	d0,(v_pal_buffer).w
00001AE6                            		;add.w	d0,d0
00001AE6                            		;move.w	d0,d1
00001AE6                            		;add.w	d0,d0
00001AE6                            		;add.w	d1,d0
00001AE6                            		;lea	(Pal_LZCyc2).l,a0
00001AE6                            		;lea	(v_pal_dry+$76).w,a1
00001AE6                            		;move.l	(a0,d0.w),(a1)+
00001AE6                            		;move.w	4(a0,d0.w),(a1)
00001AE6                            		;lea	(Pal_LZCyc3).l,a0
00001AE6                            		;lea	(v_pal_water+$76).w,a1
00001AE6                            		;move.l	(a0,d0.w),(a1)+
00001AE6                            		;move.w	4(a0,d0.w),(a1)
00001AE6                            
00001AE6                            ;PCycLZ_Skip2:
00001AE6 4E75                       		rts	
00001AE8                            ; End of function PCycle_LZ
00001AE8                            
00001AE8                            ; ===========================================================================
00001AE8 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001AF0                            ; ===========================================================================
00001AF0                            
00001AF0                            PCycle_MZ:
00001AF0 4E75                       		rts	
00001AF2                            
00001AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AF2                            
00001AF2                            
00001AF2                            PalCycle_SLZ:
00001AF2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001AF6 6A00                       		bpl.s	locret_1A80
00001AF8 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001AFE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B02 5240                       		addq.w	#1,d0
00001B04 0C40 0006                  		cmpi.w	#6,d0
00001B08 6500                       		bcs.s	loc_1A60
00001B0A 7000                       		moveq	#0,d0
00001B0C                            
00001B0C                            loc_1A60:
00001B0C 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001B10 3200                       		move.w	d0,d1
00001B12 D241                       		add.w	d1,d1
00001B14 D041                       		add.w	d1,d0
00001B16 D040                       		add.w	d0,d0
00001B18 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001B1E 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001B22 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001B26 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001B2C                            
00001B2C                            locret_1A80:
00001B2C 4E75                       		rts	
00001B2E                            ; End of function PalCycle_SLZ
00001B2E                            
00001B2E                            
00001B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B2E                            
00001B2E                            
00001B2E                            PalCycle_SYZ:
00001B2E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001B32 6A00                       		bpl.s	locret_1AC6
00001B34 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001B3A 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B3E 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001B42 0240 0003                  		andi.w	#3,d0
00001B46 E548                       		lsl.w	#2,d0
00001B48 3200                       		move.w	d0,d1
00001B4A D040                       		add.w	d0,d0
00001B4C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001B52 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001B56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001B64 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001B68 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001B6C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001B72                            
00001B72                            locret_1AC6:
00001B72 4E75                       		rts	
00001B74                            ; End of function PalCycle_SYZ
00001B74                            
00001B74                            
00001B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B74                            
00001B74                            
00001B74                            PalCycle_SBZ:
00001B74 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B7A 4A38 FE11                  		tst.b	(v_act).w
00001B7E 6700                       		beq.s	loc_1ADA
00001B80 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B86                            
00001B86                            loc_1ADA:
00001B86 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001B8A 321A                       		move.w	(a2)+,d1
00001B8C                            
00001B8C                            loc_1AE0:
00001B8C 5311                       		subq.b	#1,(a1)
00001B8E 6B00                       		bmi.s	loc_1AEA
00001B90 5489                       		addq.l	#2,a1
00001B92 5C8A                       		addq.l	#6,a2
00001B94 6000                       		bra.s	loc_1B06
00001B96                            ; ===========================================================================
00001B96                            
00001B96                            loc_1AEA:
00001B96 12DA                       		move.b	(a2)+,(a1)+
00001B98 1011                       		move.b	(a1),d0
00001B9A 5200                       		addq.b	#1,d0
00001B9C B01A                       		cmp.b	(a2)+,d0
00001B9E 6500                       		bcs.s	loc_1AF6
00001BA0 7000                       		moveq	#0,d0
00001BA2                            
00001BA2                            loc_1AF6:
00001BA2 12C0                       		move.b	d0,(a1)+
00001BA4 0240 000F                  		andi.w	#$F,d0
00001BA8 D040                       		add.w	d0,d0
00001BAA 305A                       		movea.w	(a2)+,a0
00001BAC 365A                       		movea.w	(a2)+,a3
00001BAE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001BB2                            
00001BB2                            loc_1B06:
00001BB2 51C9 FFD8                  		dbf	d1,loc_1AE0
00001BB6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001BBA 6A00                       		bpl.s	locret_1B64
00001BBC 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001BC2 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001BC8 4A38 FE11                  		tst.b	(v_act).w
00001BCC 6700                       		beq.s	loc_1B2E
00001BCE 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001BD4 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001BDA                            
00001BDA                            loc_1B2E:
00001BDA 72FF                       		moveq	#-1,d1
00001BDC 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001BE0 6700                       		beq.s	loc_1B38
00001BE2 4441                       		neg.w	d1
00001BE4                            
00001BE4                            loc_1B38:
00001BE4 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001BE8 0240 0003                  		andi.w	#3,d0
00001BEC D041                       		add.w	d1,d0
00001BEE 0C40 0003                  		cmpi.w	#3,d0
00001BF2 6500                       		bcs.s	loc_1B52
00001BF4 3200                       		move.w	d0,d1
00001BF6 7000                       		moveq	#0,d0
00001BF8 4A41                       		tst.w	d1
00001BFA 6A00                       		bpl.s	loc_1B52
00001BFC 7002                       		moveq	#2,d0
00001BFE                            
00001BFE                            loc_1B52:
00001BFE 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001C02 D040                       		add.w	d0,d0
00001C04 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001C08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C10                            
00001C10                            locret_1B64:
00001C10 4E75                       		rts	
00001C12                            ; End of function PalCycle_SBZ
00001C12                            ; End of function PalCycle_SBZ
00001C12                            
00001C12                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001C32                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001C52                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001C72                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001C84                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001C96                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001CFE                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001D22                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001D42                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001D52                            
00001D52                            		include	"_inc\SBZ Palette Scripts.asm"
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            ; Scrap Brain Zone palette cycling script
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            
00001D52                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001D52                            	dc.b duration, colors
00001D52                            	dc.w paladdress, ramaddress
00001D52                            	endm
00001D52                            
00001D52                            ; duration in frames, number of colors, palette address, RAM address
00001D52                            
00001D52                            Pal_SBZCycList1:
00001D52 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001D54 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001D5A 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001D60 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001D66 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001D6C 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001D72 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001D78 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001D7E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001D84 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001D8A                            end_SBZCycList1:
00001D8A                            	even
00001D8A                            
00001D8A                            Pal_SBZCycList2:
00001D8A 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00001D8C 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001D92 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001D98 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00001D9E 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001DA4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001DAA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001DB0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001DB6                            end_SBZCycList2:
00001DB6                            	even
00001DB6                            	even
00001DB6                            
00001DB6                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00001DC6                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00001DD6                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00001DE6                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00001DF2                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00001E02                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00001E12                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00001E32                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00001E3C                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00001E4C                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            ; Subroutine to	fade in from black
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            
00001E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E58                            
00001E58                            
00001E58                            PaletteFadeIn:
00001E58 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00001E5E                            
00001E5E                            PalFadeIn_Alt:				; start position and size are already set
00001E5E 7000                       		moveq	#0,d0
00001E60 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E64 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E68 D0C0                       		adda.w	d0,a0
00001E6A 7200                       		moveq	#cBlack,d1
00001E6C 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E70                            
00001E70                            	@fill:
00001E70 30C1                       		move.w	d1,(a0)+
00001E72 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
00001E76                            
00001E76 383C 0015                  		move.w	#$15,d4
00001E7A                            
00001E7A                            	@mainloop:
00001E7A 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001E80 6100 0000                  		bsr.w	WaitForVBla
00001E84 6100                       		bsr.s	FadeIn_FromBlack
00001E86 6100 F64A                  		bsr.w	RunPLC
00001E8A 51CC FFEE                  		dbf	d4,@mainloop
00001E8E 4E75                       		rts	
00001E90                            ; End of function PaletteFadeIn
00001E90                            
00001E90                            
00001E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E90                            
00001E90                            
00001E90                            FadeIn_FromBlack:
00001E90 7000                       		moveq	#0,d0
00001E92 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E96 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001E9A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E9E D0C0                       		adda.w	d0,a0
00001EA0 D2C0                       		adda.w	d0,a1
00001EA2 1038 F627                  		move.b	(v_pfade_size).w,d0
00001EA6                            
00001EA6                            	@addcolour:
00001EA6 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00001EA8 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00001EAC                            
00001EAC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001EB2 6600                       		bne.s	@exit		; if not, branch
00001EB4                            
00001EB4 7000                       		moveq	#0,d0
00001EB6 41F8 FA80                  		lea	(v_pal_water).w,a0
00001EBA 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001EBE 1038 F626                  		move.b	(v_pfade_start).w,d0
00001EC2 D0C0                       		adda.w	d0,a0
00001EC4 D2C0                       		adda.w	d0,a1
00001EC6 1038 F627                  		move.b	(v_pfade_size).w,d0
00001ECA                            
00001ECA                            	@addcolour2:
00001ECA 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00001ECC 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00001ED0                            
00001ED0                            @exit:
00001ED0 4E75                       		rts	
00001ED2                            ; End of function FadeIn_FromBlack
00001ED2                            
00001ED2                            
00001ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED2                            
00001ED2                            
00001ED2                            FadeIn_AddColour:
00001ED2                            @addblue:
00001ED2 3419                       		move.w	(a1)+,d2
00001ED4 3610                       		move.w	(a0),d3
00001ED6 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00001ED8 6700                       		beq.s	@next		; if yes, branch
00001EDA 3203                       		move.w	d3,d1
00001EDC 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001EE0 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001EE2 6200                       		bhi.s	@addgreen	; if yes, branch
00001EE4 30C1                       		move.w	d1,(a0)+	; update palette
00001EE6 4E75                       		rts	
00001EE8                            ; ===========================================================================
00001EE8                            
00001EE8                            @addgreen:
00001EE8 3203                       		move.w	d3,d1
00001EEA 0641 0020                  		addi.w	#$20,d1		; increase green value
00001EEE B242                       		cmp.w	d2,d1
00001EF0 6200                       		bhi.s	@addred
00001EF2 30C1                       		move.w	d1,(a0)+	; update palette
00001EF4 4E75                       		rts	
00001EF6                            ; ===========================================================================
00001EF6                            
00001EF6                            @addred:
00001EF6 5458                       		addq.w	#2,(a0)+	; increase red value
00001EF8 4E75                       		rts	
00001EFA                            ; ===========================================================================
00001EFA                            
00001EFA                            @next:
00001EFA 5448                       		addq.w	#2,a0		; next colour
00001EFC 4E75                       		rts	
00001EFE                            ; End of function FadeIn_AddColour
00001EFE                            
00001EFE                            
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Subroutine to fade out to black
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            
00001EFE                            
00001EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EFE                            
00001EFE                            
00001EFE                            PaletteFadeOut:
00001EFE 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F04 383C 0015                  		move.w	#$15,d4
00001F08                            
00001F08                            	@mainloop:
00001F08 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001F0E 6100 0000                  		bsr.w	WaitForVBla
00001F12 6100                       		bsr.s	FadeOut_ToBlack
00001F14 6100 F5BC                  		bsr.w	RunPLC
00001F18 51CC FFEE                  		dbf	d4,@mainloop
00001F1C 4E75                       		rts	
00001F1E                            ; End of function PaletteFadeOut
00001F1E                            
00001F1E                            
00001F1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F1E                            
00001F1E                            
00001F1E                            FadeOut_ToBlack:
00001F1E 7000                       		moveq	#0,d0
00001F20 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F24 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F28 D0C0                       		adda.w	d0,a0
00001F2A 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F2E                            
00001F2E                            	@decolour:
00001F2E 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00001F30 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001F34                            
00001F34 7000                       		moveq	#0,d0
00001F36 41F8 FA80                  		lea	(v_pal_water).w,a0
00001F3A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F3E D0C0                       		adda.w	d0,a0
00001F40 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F44                            
00001F44                            	@decolour2:
00001F44 6100                       		bsr.s	FadeOut_DecColour
00001F46 51C8 FFFC                  		dbf	d0,@decolour2
00001F4A 4E75                       		rts	
00001F4C                            ; End of function FadeOut_ToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            FadeOut_DecColour:
00001F4C                            @dered:
00001F4C 3410                       		move.w	(a0),d2
00001F4E 6700                       		beq.s	@next
00001F50 3202                       		move.w	d2,d1
00001F52 0241 000E                  		andi.w	#$E,d1
00001F56 6700                       		beq.s	@degreen
00001F58 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F5A 4E75                       		rts	
00001F5C                            ; ===========================================================================
00001F5C                            
00001F5C                            @degreen:
00001F5C 3202                       		move.w	d2,d1
00001F5E 0241 00E0                  		andi.w	#$E0,d1
00001F62 6700                       		beq.s	@deblue
00001F64 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001F68 4E75                       		rts	
00001F6A                            ; ===========================================================================
00001F6A                            
00001F6A                            @deblue:
00001F6A 3202                       		move.w	d2,d1
00001F6C 0241 0E00                  		andi.w	#$E00,d1
00001F70 6700                       		beq.s	@next
00001F72 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            @next:
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function FadeOut_DecColour
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	fade in from white (Special Stage)
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            PaletteWhiteIn:
00001F7C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F82 7000                       		moveq	#0,d0
00001F84 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F88 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F8C D0C0                       		adda.w	d0,a0
00001F8E 323C 0EEE                  		move.w	#cWhite,d1
00001F92 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F96                            
00001F96                            	@fill:
00001F96 30C1                       		move.w	d1,(a0)+
00001F98 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00001F9C                            
00001F9C 383C 0015                  		move.w	#$15,d4
00001FA0                            
00001FA0                            	@mainloop:
00001FA0 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001FA6 6100 0000                  		bsr.w	WaitForVBla
00001FAA 6100                       		bsr.s	WhiteIn_FromWhite
00001FAC 6100 F524                  		bsr.w	RunPLC
00001FB0 51CC FFEE                  		dbf	d4,@mainloop
00001FB4 4E75                       		rts	
00001FB6                            ; End of function PaletteWhiteIn
00001FB6                            
00001FB6                            
00001FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB6                            
00001FB6                            
00001FB6                            WhiteIn_FromWhite:
00001FB6 7000                       		moveq	#0,d0
00001FB8 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001FBC 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001FC0 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FC4 D0C0                       		adda.w	d0,a0
00001FC6 D2C0                       		adda.w	d0,a1
00001FC8 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FCC                            
00001FCC                            	@decolour:
00001FCC 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00001FCE 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001FD2                            
00001FD2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001FD8 6600                       		bne.s	@exit		; if not, branch
00001FDA 7000                       		moveq	#0,d0
00001FDC 41F8 FA80                  		lea	(v_pal_water).w,a0
00001FE0 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001FE4 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FE8 D0C0                       		adda.w	d0,a0
00001FEA D2C0                       		adda.w	d0,a1
00001FEC 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FF0                            
00001FF0                            	@decolour2:
00001FF0 6100                       		bsr.s	WhiteIn_DecColour
00001FF2 51C8 FFFC                  		dbf	d0,@decolour2
00001FF6                            
00001FF6                            	@exit:
00001FF6 4E75                       		rts	
00001FF8                            ; End of function WhiteIn_FromWhite
00001FF8                            
00001FF8                            
00001FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF8                            
00001FF8                            
00001FF8                            WhiteIn_DecColour:
00001FF8                            @deblue:
00001FF8 3419                       		move.w	(a1)+,d2
00001FFA 3610                       		move.w	(a0),d3
00001FFC B642                       		cmp.w	d2,d3
00001FFE 6700                       		beq.s	@next
00002000 3203                       		move.w	d3,d1
00002002 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002006 6500                       		blo.s	@degreen
00002008 B242                       		cmp.w	d2,d1
0000200A 6500                       		blo.s	@degreen
0000200C 30C1                       		move.w	d1,(a0)+
0000200E 4E75                       		rts	
00002010                            ; ===========================================================================
00002010                            
00002010                            @degreen:
00002010 3203                       		move.w	d3,d1
00002012 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002016 6500                       		blo.s	@dered
00002018 B242                       		cmp.w	d2,d1
0000201A 6500                       		blo.s	@dered
0000201C 30C1                       		move.w	d1,(a0)+
0000201E 4E75                       		rts	
00002020                            ; ===========================================================================
00002020                            
00002020                            @dered:
00002020 5558                       		subq.w	#2,(a0)+	; decrease red value
00002022 4E75                       		rts	
00002024                            ; ===========================================================================
00002024                            
00002024                            @next:
00002024 5448                       		addq.w	#2,a0
00002026 4E75                       		rts	
00002028                            ; End of function WhiteIn_DecColour
00002028                            
00002028                            ; ---------------------------------------------------------------------------
00002028                            ; Subroutine to fade to white (Special Stage)
00002028                            ; ---------------------------------------------------------------------------
00002028                            
00002028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002028                            
00002028                            
00002028                            PaletteWhiteOut:
00002028 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000202E 383C 0015                  		move.w	#$15,d4
00002032                            
00002032                            	@mainloop:
00002032 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002038 6100 0000                  		bsr.w	WaitForVBla
0000203C 6100                       		bsr.s	WhiteOut_ToWhite
0000203E 6100 F492                  		bsr.w	RunPLC
00002042 51CC FFEE                  		dbf	d4,@mainloop
00002046 4E75                       		rts	
00002048                            ; End of function PaletteWhiteOut
00002048                            
00002048                            
00002048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002048                            
00002048                            
00002048                            WhiteOut_ToWhite:
00002048 7000                       		moveq	#0,d0
0000204A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000204E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002052 D0C0                       		adda.w	d0,a0
00002054 1038 F627                  		move.b	(v_pfade_size).w,d0
00002058                            
00002058                            	@addcolour:
00002058 6100                       		bsr.s	WhiteOut_AddColour
0000205A 51C8 FFFC                  		dbf	d0,@addcolour
0000205E                            
0000205E 7000                       		moveq	#0,d0
00002060 41F8 FA80                  		lea	(v_pal_water).w,a0
00002064 1038 F626                  		move.b	(v_pfade_start).w,d0
00002068 D0C0                       		adda.w	d0,a0
0000206A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000206E                            
0000206E                            	@addcolour2:
0000206E 6100                       		bsr.s	WhiteOut_AddColour
00002070 51C8 FFFC                  		dbf	d0,@addcolour2
00002074 4E75                       		rts	
00002076                            ; End of function WhiteOut_ToWhite
00002076                            
00002076                            
00002076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002076                            
00002076                            
00002076                            WhiteOut_AddColour:
00002076                            @addred:
00002076 3410                       		move.w	(a0),d2
00002078 0C42 0EEE                  		cmpi.w	#cWhite,d2
0000207C 6700                       		beq.s	@next
0000207E 3202                       		move.w	d2,d1
00002080 0241 000E                  		andi.w	#$E,d1
00002084 0C41 000E                  		cmpi.w	#cRed,d1
00002088 6700                       		beq.s	@addgreen
0000208A 5458                       		addq.w	#2,(a0)+	; increase red value
0000208C 4E75                       		rts	
0000208E                            ; ===========================================================================
0000208E                            
0000208E                            @addgreen:
0000208E 3202                       		move.w	d2,d1
00002090 0241 00E0                  		andi.w	#$E0,d1
00002094 0C41 00E0                  		cmpi.w	#cGreen,d1
00002098 6700                       		beq.s	@addblue
0000209A 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000209E 4E75                       		rts	
000020A0                            ; ===========================================================================
000020A0                            
000020A0                            @addblue:
000020A0 3202                       		move.w	d2,d1
000020A2 0241 0E00                  		andi.w	#$E00,d1
000020A6 0C41 0E00                  		cmpi.w	#cBlue,d1
000020AA 6700                       		beq.s	@next
000020AC 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            @next:
000020B2 5448                       		addq.w	#2,a0
000020B4 4E75                       		rts	
000020B6                            ; End of function WhiteOut_AddColour
000020B6                            
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            ; Palette cycling routine - Sega logo
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            
000020B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B6                            
000020B6                            
000020B6                            PalCycle_Sega:
000020B6 4A38 F635                  		tst.b	(v_pcyc_time+1).w
000020BA 6600                       		bne.s	loc_206A
000020BC 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000020C0 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000020C6 7205                       		moveq	#5,d1
000020C8 3038 F632                  		move.w	(v_pcyc_num).w,d0
000020CC                            
000020CC                            loc_2020:
000020CC 6A00                       		bpl.s	loc_202A
000020CE 5448                       		addq.w	#2,a0
000020D0 5341                       		subq.w	#1,d1
000020D2 5440                       		addq.w	#2,d0
000020D4 60F6                       		bra.s	loc_2020
000020D6                            ; ===========================================================================
000020D6                            
000020D6                            loc_202A:
000020D6 3400                       		move.w	d0,d2
000020D8 0242 001E                  		andi.w	#$1E,d2
000020DC 6600                       		bne.s	loc_2034
000020DE 5440                       		addq.w	#2,d0
000020E0                            
000020E0                            loc_2034:
000020E0 0C40 0060                  		cmpi.w	#$60,d0
000020E4 6400                       		bhs.s	loc_203E
000020E6 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000020EA                            
000020EA                            loc_203E:
000020EA 5440                       		addq.w	#2,d0
000020EC 51C9 FFE8                  		dbf	d1,loc_202A
000020F0                            
000020F0 3038 F632                  		move.w	(v_pcyc_num).w,d0
000020F4 5440                       		addq.w	#2,d0
000020F6 3400                       		move.w	d0,d2
000020F8 0242 001E                  		andi.w	#$1E,d2
000020FC 6600                       		bne.s	loc_2054
000020FE 5440                       		addq.w	#2,d0
00002100                            
00002100                            loc_2054:
00002100 0C40 0064                  		cmpi.w	#$64,d0
00002104 6D00                       		blt.s	loc_2062
00002106 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
0000210C 70F4                       		moveq	#-$C,d0
0000210E                            
0000210E                            loc_2062:
0000210E 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002112 7001                       		moveq	#1,d0
00002114 4E75                       		rts	
00002116                            ; ===========================================================================
00002116                            
00002116                            loc_206A:
00002116 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000211A 6A00                       		bpl.s	loc_20BC
0000211C 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
00002122 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002126 0640 000C                  		addi.w	#$C,d0
0000212A 0C40 0030                  		cmpi.w	#$30,d0
0000212E 6500                       		blo.s	loc_2088
00002130 7000                       		moveq	#0,d0
00002132 4E75                       		rts	
00002134                            ; ===========================================================================
00002134                            
00002134                            loc_2088:
00002134 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002138 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000213E 41F0 0000                  		lea	(a0,d0.w),a0
00002142 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
00002146 22D8                       		move.l	(a0)+,(a1)+
00002148 22D8                       		move.l	(a0)+,(a1)+
0000214A 3298                       		move.w	(a0)+,(a1)
0000214C 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002150 7000                       		moveq	#0,d0
00002152 722C                       		moveq	#$2C,d1
00002154                            
00002154                            loc_20A8:
00002154 3400                       		move.w	d0,d2
00002156 0242 001E                  		andi.w	#$1E,d2
0000215A 6600                       		bne.s	loc_20B2
0000215C 5440                       		addq.w	#2,d0
0000215E                            
0000215E                            loc_20B2:
0000215E 3390 0000                  		move.w	(a0),(a1,d0.w)
00002162 5440                       		addq.w	#2,d0
00002164 51C9 FFEE                  		dbf	d1,loc_20A8
00002168                            
00002168                            loc_20BC:
00002168 7001                       		moveq	#1,d0
0000216A 4E75                       		rts	
0000216C                            ; End of function PalCycle_Sega
0000216C                            
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002178                            Pal_Sega2:	incbin	"palette\Sega2.bin"
000021A8                            
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            ; Subroutines to load palettes
000021A8                            
000021A8                            ; input:
000021A8                            ;	d0 = index number for palette
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            
000021A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A8                            
000021A8                            
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            ; Subroutines to load pallets
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            
000021A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000021A8                            
000021A8                            PalLoad1:
000021A8 1238 FE11                  		move.b ($FFFFFE11),d1
000021AC 43F9 0000 0000             		lea (PalPointers).l,a1
000021B2 0C01 0000                  		cmp.b #0,d1
000021B6 6700 0000                  		beq.w PalLoad1_Continue
000021BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000021C0 0C01 0001                  		cmp.b #1,d1
000021C4 6700 0000                  		beq.w PalLoad1_Continue
000021C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000021CE                            
000021CE                            PalLoad1_Continue:
000021CE E748                       		lsl.w #3,d0
000021D0 D2C0                       		adda.w d0,a1
000021D2 2459                       		movea.l (a1)+,a2
000021D4 3659                       		movea.w (a1)+,a3
000021D6 D6FC 0080                  		adda.w #$80,a3
000021DA 3E19                       		move.w (a1)+,d7
000021DC                            
000021DC                            loc_2110:
000021DC 26DA                       		move.l (a2)+,(a3)+
000021DE 51CF FFFC                  		dbf d7,loc_2110
000021E2 4E75                       		rts
000021E4                             ; End of function PalLoad1
000021E4                            
000021E4                            
000021E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000021E4                            
000021E4                            PalLoad2:
000021E4 1238 FE11                  		move.b ($FFFFFE11),d1
000021E8 43F9 0000 0000             		lea (PalPointers).l,a1
000021EE 0C01 0000                  		cmp.b #0,d1
000021F2 6700 0000                  		beq.w PalLoad2_Continue
000021F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000021FC 0C01 0001                  		cmp.b #1,d1
00002200 6700 0000                  		beq.w PalLoad2_Continue
00002204 43F9 0000 0000             		lea (PalPointers3).l,a1
0000220A                            
0000220A                            
0000220A                            PalLoad2_Continue:
0000220A E748                       		lsl.w #3,d0
0000220C D2C0                       		adda.w d0,a1
0000220E 2459                       		movea.l (a1)+,a2
00002210 3659                       		movea.w (a1)+,a3
00002212 3E19                       		move.w (a1)+,d7
00002214                            
00002214                            loc_2128:
00002214 26DA                       		move.l (a2)+,(a3)+
00002216 51CF FFFC                  		dbf d7,loc_2128
0000221A 4E75                       		rts
0000221C                            ; End of function PalLoad2
0000221C                            
0000221C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000221C                            
0000221C                            
0000221C                            PalLoad_Loop: ;Quick load - TIS
0000221C                                    
0000221C 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000221E 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
00002222 4E75                               rts
00002224                            
00002224                            ; ---------------------------------------------------------------------------
00002224                            ; Underwater pallet loading subroutine
00002224                            ; ---------------------------------------------------------------------------
00002224                            
00002224                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002224                            
00002224                            PalLoad3_Water:
00002224 1238 FE11                  		move.b ($FFFFFE11),d1
00002228 43F9 0000 0000             		lea (PalPointers).l,a1
0000222E 0C01 0000                  		cmp.b #0,d1
00002232 6700 0000                  		beq.w PalLoad3_Continue
00002236 43F9 0000 0000             		lea (PalPointers2).l,a1
0000223C 0C01 0001                  		cmp.b #1,d1
00002240 6700 0000                  		beq.w PalLoad3_Continue
00002244 43F9 0000 0000             		lea (PalPointers3).l,a1
0000224A                            
0000224A                            PalLoad3_Continue:
0000224A E748                       		lsl.w #3,d0
0000224C D2C0                       		adda.w d0,a1
0000224E 2459                       		movea.l (a1)+,a2
00002250 3659                       		movea.w (a1)+,a3
00002252 96FC 0080                  		suba.w #$80,a3
00002256 3E19                       		move.w (a1)+,d7
00002258                            
00002258                            loc_2144:
00002258 26DA                       		move.l (a2)+,(a3)+
0000225A 51CF FFFC                  		dbf d7,loc_2144
0000225E 4E75                       		rts
00002260                            ; End of function PalLoad3_Water
00002260                            
00002260                            
00002260                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002260                            
00002260                            
00002260                            PalLoad4_Water:
00002260 1238 FE11                  		move.b ($FFFFFE11),d1
00002264 43F9 0000 0000             		lea (PalPointers).l,a1
0000226A 0C01 0000                  		cmp.b #0,d1
0000226E 6700 0000                  		beq.w PalLoad4_Continue
00002272 43F9 0000 0000             		lea (PalPointers2).l,a1
00002278 0C01 0001                  		cmp.b #1,d1
0000227C 6700 0000                  		beq.w PalLoad4_Continue
00002280 43F9 0000 0000             		lea (PalPointers3).l,a1
00002286                            
00002286                            PalLoad4_Continue:
00002286 E748                       		lsl.w #3,d0
00002288 D2C0                       		adda.w d0,a1
0000228A 2459                       		movea.l (a1)+,a2
0000228C 3659                       		movea.w (a1)+,a3
0000228E 96FC 0100                  		suba.w #$100,a3
00002292 3E19                       		move.w (a1)+,d7
00002294                            loc_2160:
00002294 26DA                       		move.l (a2)+,(a3)+
00002296 51CF FFFC                  		dbf d7,loc_2160
0000229A 4E75                       		rts
0000229C                             ; End of function PalLoad4_Water
0000229C                            
0000229C                            ; ===========================================================================
0000229C                            
0000229C                            		include	"_inc\Palette Pointers.asm"
0000229C                            ; ---------------------------------------------------------------------------
0000229C                            ; Palette pointers
0000229C                            ; ---------------------------------------------------------------------------
0000229C                            
0000229C                            palp:	macro paladdress,ramaddress,colors
0000229C                            	dc.l paladdress
0000229C                            	dc.w ramaddress, (colors>>1)-1
0000229C                            	endm
0000229C                            
0000229C                            PalPointers:
0000229C                            
0000229C                            ; palette address, RAM address, colors
0000229C                            
0000229C 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000022A4 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000022AC 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000022B4 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000022BC                            Pal_Levels:
000022BC 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
000022C4 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000022CC 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000022D4 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000022DC 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000022E4 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000022EC 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000022F4 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000022FC 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002304 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000230C 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002314 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000231C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002324 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
0000232C 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002334 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000233C 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002344 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
0000234C 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002354 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
0000235C 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002364 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
0000236C 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002374 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
0000237C 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002384 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
0000238C 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002394 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
0000239C 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
000023A4 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
000023AC 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
000023B4 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
000023BC 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
000023C4 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
000023CC 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
000023D4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
000023DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
000023E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
000023EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
000023F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
000023FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002404 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
0000240C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002414 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
0000241C                            			even
0000241C                            
0000241C                            PalPointers2:
0000241C                            
0000241C                            ; palette address, RAM address, colors
0000241C                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
0000241C 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002424 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
0000242C 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002434 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
0000243C                            Pal_Levels_2:
0000243C 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002444 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
0000244C 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002454 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
0000245C 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002464 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
0000246C 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002474 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
0000247C 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002484 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000248C 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002494 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000249C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000024A4 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000024AC 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000024B4 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
000024BC 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000024C4 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000024CC 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000024D4 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000024DC 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000024E4 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000024EC 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000024F4 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000024FC 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002504 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
0000250C 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002514 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
0000251C 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002524 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
0000252C 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002534 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
0000253C 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002544 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
0000254C 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002554 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
0000255C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002564 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
0000256C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002574 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
0000257C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002584 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
0000258C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002594 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
0000259C                            			even
0000259C                            			
0000259C                            PalPointers3:
0000259C                            			
0000259C                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
0000259C 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000025A4 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000025AC 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000025B4 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000025BC                            Pal_Levels_3:
000025BC 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
000025C4 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000025CC 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000025D4 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000025DC 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000025E4 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025EC 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025F4 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
000025FC 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002604 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000260C 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002614 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000261C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002624 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
0000262C 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002634 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000263C 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002644 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
0000264C 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002654 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
0000265C 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002664 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
0000266C 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002674 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
0000267C 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002684 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
0000268C 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002694 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
0000269C 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000026A4 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000026AC 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000026B4 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000026BC 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000026C4 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000026CC 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000026D4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000026DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000026E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000026EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000026F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
000026FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002704 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
0000270C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002714 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
0000271C                            			even
0000271C                            
0000271C                            
0000271C =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
0000271C =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
0000271C =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
0000271C =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
0000271C =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
0000271C =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
0000271C =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
0000271C =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
0000271C =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
0000271C =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
0000271C =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
0000271C =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
0000271C =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
0000271C =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
0000271C =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
0000271C =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
0000271C =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
0000271C =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
0000271C =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
0000271C =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
0000271C =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
0000271C =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
0000271C =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
0000271C =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
0000271C =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
0000271C =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
0000271C =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
0000271C =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
0000271C =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
0000271C =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
0000271C =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
0000271C =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
0000271C =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
0000271C =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
0000271C =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
0000271C =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
0000271C =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
0000271C =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
0000271C =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
0000271C =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
0000271C =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
0000271C =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
0000271C =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
0000271C =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
0000271C =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
0000271C =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
0000271C =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
0000271C =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
0000271C =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
0000271C =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
0000271C =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
0000271C =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
0000271C =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
0000271C =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
0000271C =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
0000271C =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
0000271C =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
0000271C =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
0000271C =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
0000271C =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
0000271C                            		
0000271C                            		;include	"_inc\Palette Pointers2.asm"
0000271C                            		
0000271C                            		;include	"_inc\Palette Pointers3.asm"
0000271C                            		
0000271C                            
0000271C                            ; ---------------------------------------------------------------------------
0000271C                            ; Palette data
0000271C                            ; ---------------------------------------------------------------------------
0000271C                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
0000279C                            Pal_Title:	incbin	"palette\Title Screen.bin"
0000281C                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
0000289C                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
000028BC                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
0000291C                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
0000297C                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
000029DC                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002A3C                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002A9C                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002AFC                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002B7C                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002BFC                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002C7C                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002CDC                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002D3C                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00002D9C                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00002DFC                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00002E5C                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00002EBC                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00002F1C                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00002F7C                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00002FDC                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
0000303C                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
0000309C                            Pal_Special:	incbin	"palette\Special Stage.bin"
0000311C                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
0000317C                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000031FC                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
0000321C                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
0000323C                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
0000325C                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000032DC                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
0000331C                            Pal_Ending:	incbin	"palette\Ending.bin"
0000339C                            Pal_Options:	incbin	"palette\Options.bin"
0000341C                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
0000343C                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
0000345C                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
0000347C                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
0000349C                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000034BC                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000034DC                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000034FC                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
0000351C                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
0000353C                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
0000355C                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
0000357C                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
0000359C                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
000035BC                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
000035DC                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000035FC                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
0000361C                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
0000363C                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
0000365C                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
0000367C                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
0000369C                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
000036BC                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
000036DC                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
000036FC                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
0000371C                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
0000373C                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
0000375C                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
0000377C                            ; ---------------------------------------------------------------------------
0000377C                            ; Subroutine to	wait for VBlank routines to complete
0000377C                            ; ---------------------------------------------------------------------------
0000377C                            
0000377C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000377C                            
0000377C                            
0000377C                            WaitForVBla:
0000377C 46FC 2300                  		enable_ints
00003780                            
00003780                            	@wait:
00003780 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003784 66FA                       		bne.s	@wait		; if not, branch
00003786 4E75                       		rts	
00003788                            ; End of function WaitForVBla
00003788                            
00003788                            		include	"_incObj\sub RandomNumber.asm"
00003788                            ; ---------------------------------------------------------------------------
00003788                            ; Subroutine to	generate a pseudo-random number	in d0
00003788                            ; ---------------------------------------------------------------------------
00003788                            
00003788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003788                            
00003788                            
00003788                            RandomNumber:
00003788 2238 F636                  		move.l	(v_random).w,d1
0000378C 6600                       		bne.s	@scramble	; if d1 is not 0, branch
0000378E 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003794                            
00003794                            	@scramble:
00003794 2001                       		move.l	d1,d0
00003796 E581                       		asl.l	#2,d1
00003798 D280                       		add.l	d0,d1
0000379A E781                       		asl.l	#3,d1
0000379C D280                       		add.l	d0,d1
0000379E 3001                       		move.w	d1,d0
000037A0 4841                       		swap	d1
000037A2 D041                       		add.w	d1,d0
000037A4 3200                       		move.w	d0,d1
000037A6 4841                       		swap	d1
000037A8 21C1 F636                  		move.l	d1,(v_random).w
000037AC 4E75                       		rts	
000037AC 4E75                       		rts	
000037AE                            		include	"_incObj\sub CalcSine.asm"
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            ; Subroutine calculate a sine
000037AE                            
000037AE                            ; input:
000037AE                            ;	d0 = angle
000037AE                            
000037AE                            ; output:
000037AE                            ;	d0 = sine
000037AE                            ;	d1 = cosine
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            
000037AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037AE                            
000037AE                            
000037AE                            CalcSine:
000037AE 0240 00FF                          andi.w  #$FF,d0
000037B2 5040                               addq.w  #8,d0
000037B4 D040                               add.w   d0,d0
000037B6 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000037BA 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000037BE 4E75                               rts
000037C0                            ; End of function CalcSine
000037C0                            
000037C0                            ; ===========================================================================
000037C0                            
000037C0                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003A40                            
00003A40                            ; ===========================================================================
00003A40                            ; ===========================================================================
00003A40                            		include	"_incObj\sub CalcAngle.asm"
00003A40                            ; ---------------------------------------------------------------------------
00003A40                            ; Subroutine calculate an angle
00003A40                            
00003A40                            ; input:
00003A40                            ;	d1 = x-axis distance
00003A40                            ;	d2 = y-axis distance
00003A40                            
00003A40                            ; output:
00003A40                            ;	d0 = angle
00003A40                            ; ---------------------------------------------------------------------------
00003A40                            
00003A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A40                            
00003A40                            
00003A40                            CalcAngle:
00003A40 48E7 1800                  		movem.l	d3-d4,-(sp)
00003A44 7600                       		moveq	#0,d3
00003A46 7800                       		moveq	#0,d4
00003A48 3601                       		move.w	d1,d3
00003A4A 3802                       		move.w	d2,d4
00003A4C 8843                       		or.w	d3,d4
00003A4E 6700                       		beq.s	loc_2D04
00003A50 3802                       		move.w	d2,d4
00003A52 4A43                       		tst.w	d3
00003A54 6A00 0000                  		bpl.w	loc_2CC2
00003A58 4443                       		neg.w	d3
00003A5A                            
00003A5A                            loc_2CC2:
00003A5A 4A44                       		tst.w	d4
00003A5C 6A00 0000                  		bpl.w	loc_2CCA
00003A60 4444                       		neg.w	d4
00003A62                            
00003A62                            loc_2CCA:
00003A62 B843                       		cmp.w	d3,d4
00003A64 6400 0000                  		bcc.w	loc_2CDC
00003A68 E18C                       		lsl.l	#8,d4
00003A6A 88C3                       		divu.w	d3,d4
00003A6C 7000                       		moveq	#0,d0
00003A6E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003A72 6000                       		bra.s	loc_2CE6
00003A74                            ; ===========================================================================
00003A74                            
00003A74                            loc_2CDC:
00003A74 E18B                       		lsl.l	#8,d3
00003A76 86C4                       		divu.w	d4,d3
00003A78 7040                       		moveq	#$40,d0
00003A7A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003A7E                            
00003A7E                            loc_2CE6:
00003A7E 4A41                       		tst.w	d1
00003A80 6A00 0000                  		bpl.w	loc_2CF2
00003A84 4440                       		neg.w	d0
00003A86 0640 0080                  		addi.w	#$80,d0
00003A8A                            
00003A8A                            loc_2CF2:
00003A8A 4A42                       		tst.w	d2
00003A8C 6A00 0000                  		bpl.w	loc_2CFE
00003A90 4440                       		neg.w	d0
00003A92 0640 0100                  		addi.w	#$100,d0
00003A96                            
00003A96                            loc_2CFE:
00003A96 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003A9A 4E75                       		rts	
00003A9C                            ; ===========================================================================
00003A9C                            
00003A9C                            loc_2D04:
00003A9C 303C 0040                  		move.w	#$40,d0
00003AA0 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003AA4 4E75                       		rts	
00003AA6                            ; End of function CalcAngle
00003AA6                            
00003AA6                            ; ===========================================================================
00003AA6                            
00003AA6                            Angle_Data:	incbin	"misc\angles.bin"
00003BA8                            
00003BA8                            ; ===========================================================================
00003BA8                            ; ===========================================================================
00003BA8                            
00003BA8                            ; ---------------------------------------------------------------------------
00003BA8                            ; Sega screen
00003BA8                            ; ---------------------------------------------------------------------------
00003BA8                            
00003BA8                            GM_Sega:
00003BB0 6100 D912                  		bsr.w	ClearPLC
00003BB4 6100 E348                  		bsr.w	PaletteFadeOut
00003BB8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003BBE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003BC2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003BC6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003BCA 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003BCE 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003BD2 4238 F64E                  		clr.b	(f_wtr_state).w
00003BD6 46FC 2700                  		disable_ints
00003BDA 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003BDE 0200 00BF                  		andi.b	#$BF,d0
00003BE2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003BE8 6100 D312                  		bsr.w	ClearScreen
00003BF6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003BFC 6100 D47C                  		bsr.w	NemDec
00003C00 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C06 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003C0C 303C 0000                  		move.w	#0,d0
00003C10 6100 D9F2                  		bsr.w	EniDec
00003C14                            
00003C14 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003C28 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003C3C                            
00003C3C 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003C40 6B00                       			bmi.s   @loadpal
00003C42 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003C56                            
00003C56                            	@loadpal:
00003C56 7000                       		moveq	#palid_SegaBG,d0
00003C58 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003C5C 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003C62 7E3F                               moveq    #$3F,d7
00003C64                             
00003C64                                .loop:
00003C64 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003C68 51CF FFFA                          dbf        d7,.loop
00003C6C 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003C70 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003C76 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003C7C 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003C82 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003C88 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003C8C 0000 0040                  		ori.b	#$40,d0
00003C90 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003C96                            
00003C96                            Sega_WaitPal:
00003C96 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003C9C 6100 FADE                  		bsr.w	WaitForVBla
00003CA0 6100 E414                  		bsr.w	PalCycle_Sega
00003CA4 66F0                       		bne.s	Sega_WaitPal
00003CA6                            
00003CAE 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003CB4 6100 FAC6                  		bsr.w	WaitForVBla
00003CB8 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003CBE                            
00003CBE                            Sega_WaitEnd:
00003CBE 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003CC4 6100 FAB6                  		bsr.w	WaitForVBla
00003CC8 4A78 F614                  		tst.w	(v_demolength).w
00003CCC 6700                       		beq.s	Sega_GotoTitle
00003CCE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003CD4 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003CD6                            
00003CD6                            Sega_GotoTitle:
00003CD6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003CDC 4E75                       		rts	
00003CDE                            ; ===========================================================================
00003CDE                            
00003CDE                            ; ---------------------------------------------------------------------------
00003CDE                            ; Title	screen
00003CDE                            ; ---------------------------------------------------------------------------
00003CDE                            
00003CDE                            GM_Title:
00003CE6 6100 D7DC                  		bsr.w	ClearPLC
00003CEA 6100 E212                  		bsr.w	PaletteFadeOut
00003CEE 46FC 2700                  		disable_ints
00003CF2 6100 D28E                  		bsr.w	SoundDriverLoad
00003CF6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003CFC 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003D00 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003D04 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003D08 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003D0C 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003D10 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D14 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003D18 4238 F64E                  		clr.b	(f_wtr_state).w
00003D1C 6100 D1DE                  		bsr.w	ClearScreen
00003D20 4EB9 0000 0000             		jsr		SHC2022 
00003D26                            
00003D26 43F8 D000                  		lea	(v_objspace).w,a1
00003D2A 7000                       		moveq	#0,d0
00003D2C 323C 07FF                  		move.w	#$7FF,d1
00003D30                            
00003D30                            	Tit_ClrObj1:
00003D30 22C0                       		move.l	d0,(a1)+
00003D32 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003D36                            
00003D40 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003D46 6100 D332                  		bsr.w	NemDec
00003D54 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003D5A 6100 D31E                  		bsr.w	NemDec
00003D5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003D64 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003D6A 303C 0000                  		move.w	#0,d0
00003D6E 6100 D894                  		bsr.w	EniDec
00003D72                            
00003D72 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
00003D86                            
00003D86 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00003D8A 7000                       		moveq	#cBlack,d0
00003D8C 323C 001F                  		move.w	#$1F,d1
00003D90                            
00003D90                            	Tit_ClrPal:
00003D90 22C0                       		move.l	d0,(a1)+
00003D92 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00003D96                            
00003D96 4EB9 0000 0000             		jsr		LoadPlayerPal
00003D9C 6100 E40A                  		bsr.w	PalLoad1
00003DA0 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
00003DA6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003DAC 4EB9 0000 0000             		jsr	(BuildSprites).l
00003DB2 6100 E0A4                  		bsr.w	PaletteFadeIn
00003DB6 46FC 2700                  		disable_ints
00003DC4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003DCA 6100 D2AE                  		bsr.w	NemDec
00003DD8 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003DDE 6100 D29A                  		bsr.w	NemDec
00003DEC 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00003DF2 6100 D286                  		bsr.w 	NemDec
00003DF6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003E04 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
00003E0A 323C 028F                  		move.w	#$28F,d1
00003E0E                            
00003E0E                            	Tit_LoadText:
00003E0E 3C9D                       		move.w	(a5)+,(a6)
00003E10 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00003E14                            
00003E14 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00003E1A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00003E20 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00003E26 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00003E2C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
00003E32 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00003E38 6100 0000                  		bsr.w	LevelSizeLoad
00003E3C 6100 0000                  		bsr.w	DeformLayers
00003E40 43F8 B000                  		lea	(v_16x16).w,a1
00003E44 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
00003E4A 303C 0000                  		move.w	#0,d0
00003E4E 6100 D7B4                  		bsr.w	EniDec
00003E52 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
00003E58 43F9 00FF 0000             		lea	(v_256x256).l,a1
00003E5E 6100 D922                  		bsr.w	KosDec
00003E62 6100 0000                  		bsr.w	LevelLayoutLoad
00003E66 6100 E096                  		bsr.w	PaletteFadeOut
00003E6A 46FC 2700                  		disable_ints
00003E6E 6100 D08C                  		bsr.w	ClearScreen
00003E72 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00003E78 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003E7E 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00003E82 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00003E86 343C 6000                  		move.w	#$6000,d2
00003E8A 6100 0000                  		bsr.w	DrawChunks
00003E8E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E94 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003E9A 303C 0000                  		move.w	#0,d0
00003E9E 6100 D764                  		bsr.w	EniDec
00003EA2                            
00003EA2 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00003EB6                            
00003EC0 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00003EC6 6100 D1B2                  		bsr.w	NemDec
00003ECA 7001                       		moveq	#palid_Title,d0	; load title screen palette
00003ECC 6100 E2DA                  		bsr.w	PalLoad1
00003ED8 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00003EDE 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00003EE4 43F8 D080                  		lea	(v_objspace+$80).w,a1
00003EE8 7000                       		moveq	#0,d0
00003EEA 323C 0007                  		move.w	#7,d1
00003EEE                            
00003EEE                            	Tit_ClrObj2:
00003EEE 22C0                       		move.l	d0,(a1)+
00003EF0 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00003EF4                            
00003EF4 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00003EFA 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00003F00 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00003F04                            
00003F04 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003F08 6A00                       			bpl.s   @isjap		; if yes, branch
00003F0A                            
00003F0A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00003F10 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00003F16                            	@isjap:
00003F16 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
00003F1C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00003F22 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003F28 6100 0000                  		bsr.w	DeformLayers
00003F2C 4EB9 0000 0000             		jsr	(BuildSprites).l
00003F32 7000                       		moveq	#plcid_Main,d0
00003F34 6100 D562                  		bsr.w	NewPLC
00003F38 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00003F3E 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
00003F44 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F48 0000 0040                  		ori.b	#$40,d0
00003F4C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F52 6100 DF04                  		bsr.w	PaletteFadeIn
00003F56                            
00003F56                            Tit_MainLoop:
00003F56 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00003F5C 6100 F81E                  		bsr.w	WaitForVBla
00003F60 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003F66 6100 0000                  		bsr.w	DeformLayers
00003F6A 4EB9 0000 0000             		jsr	(BuildSprites).l
00003F70 6100 DAF8                  		bsr.w	PCycle_Title
00003F74 6100 D55C                  		bsr.w	RunPLC
00003F78 3038 D008                  		move.w	(v_objspace+obX).w,d0
00003F7C 5440                       		addq.w	#2,d0
00003F7E 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00003F82 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00003F86 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00003F88                            
00003F88 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00003F8E 4E75                       		rts	
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            Tit_ChkRegion:
00003F90 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00003F94 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00003F96                            
00003F96 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00003F9C 6000                       		bra.s	Tit_EnterCheat
00003F9E                            
00003F9E                            	Tit_RegionJap:
00003F9E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00003FA4                            
00003FA4                            Tit_EnterCheat:
00003FA4 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00003FA8 D0C0                       		adda.w	d0,a0
00003FAA 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00003FAE 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00003FB2 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003FB4 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00003FB6 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00003FBA 4A00                       		tst.b	d0
00003FBC 6600                       		bne.s	Tit_CountC
00003FBE 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00003FC2 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00003FC6 E249                       		lsr.w	#1,d1
00003FC8 0241 0003                  		andi.w	#3,d1
00003FCC 6700                       		beq.s	Tit_PlayRing
00003FCE 4A38 FFF8                  		tst.b	(v_megadrive).w
00003FD2 6A00                       		bpl.s	Tit_PlayRing
00003FD4 7201                       		moveq	#1,d1
00003FD6 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00003FDA                            
00003FDA                            	Tit_PlayRing:
00003FDA 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003FE8 6000                       		bra.s	Tit_CountC
00003FEA                            ; ===========================================================================
00003FEA                            
00003FEA                            Tit_ResetCheat:
00003FEA 4A00                       		tst.b	d0
00003FEC 6700                       		beq.s	Tit_CountC
00003FEE 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00003FF4 6700                       		beq.s	Tit_CountC
00003FF6 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00003FFC                            
00003FFC                            Tit_CountC:
00003FFC 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004000 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004004                            
00004004                            loc_3230:
00004004 4A78 F614                  		tst.w	(v_demolength).w
00004008 6700 0000                  		beq.w	GotoDemo
0000400C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004012 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
00004016                            
00004016                            Tit_ChkLevSel:
00004016 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
0000401A 6700 0000                  		beq.w	@cont	; if not, play level
0000401E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00004024 6700 0000                  		beq.w	@cont	; if not, play level
00004028 6000 0000                  		bra.w	Tit_LevelSelect
0000402C                            
0000402C                            	@cont:		
0000402C 7400                       		moveq   #0,d2
0000402E 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
00004032 D442                       		add.w   d2,d2            ; multiply by 2
00004034 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
00004038 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
0000403C                            
0000403C                            ; ===========================================================================
0000403C                            Tit_Menu_Choice:
0000403C 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
0000403E 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
00004040                            ; ===========================================================================
00004040                            
00004040                            Menu_Options:
00004040 11FC 0020 F600             	move.b	#$20,(v_gamemode).w
00004046 4E75                       	rts
00004048                            
00004048                            Tit_LevelSelect:	
00004048 7002                       		moveq	#palid_LevelSel,d0
0000404A 6100 E198                  		bsr.w	PalLoad2	; load level select palette
0000404E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00004052 7000                       		moveq	#0,d0
00004054 323C 00DF                  		move.w	#$DF,d1
00004058                            
00004058                            	Tit_ClrScroll1:
00004058 22C0                       		move.l	d0,(a1)+
0000405A 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
0000405E                            
0000405E 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004062 46FC 2700                  		disable_ints
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004076 323C 03FF                  		move.w	#$3FF,d1
0000407A                            
0000407A                            	Tit_ClrScroll2:
0000407A 2C80                       		move.l	d0,(a6)
0000407C 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004080                            
00004080 6100 0000                  		bsr.w	LevSelTextLoad
00004084                            
00004084                            ; ---------------------------------------------------------------------------
00004084                            ; Level	Select
00004084                            ; ---------------------------------------------------------------------------
00004084                            
00004084                            LevelSelect:
00004084 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000408A 6100 F6F0                  		bsr.w	WaitForVBla
0000408E 6100 0000                  		bsr.w	LevSelControls
00004092 6100 D43E                  		bsr.w	RunPLC
00004096 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000409A 66E8                       		bne.s	LevelSelect
0000409C 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000040A2 67E0                       		beq.s	LevelSelect	; if not, branch
000040A4 3038 FF82                  		move.w	(v_levselitem).w,d0
000040A8 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000040AC 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000040AE 3038 FF84                  		move.w	(v_levselsound).w,d0
000040B2 0640 0080                  		addi.w	#$80,d0
000040B6 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000040BA 6700                       		beq.s	LevSel_Ending	; if yes, branch
000040BC 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000040C0 6700                       		beq.s	LevSel_Credits	; if yes, branch
000040C2                            
000040C2                            LevSel_PlaySnd:
000040C2 6100 CF08                  		bsr.w	PlaySound_Special
000040C6 60BC                       		bra.s	LevelSelect
000040C8                            ; ===========================================================================
000040C8                            
000040C8                            LevSel_Ending:
000040C8 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000040CE 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000040D4 4E75                       		rts	
000040D6                            ; ===========================================================================
000040D6                            
000040D6                            LevSel_Credits:
000040D6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000040E4 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000040EA 4E75                       		rts	
000040EC                            ; ===========================================================================
000040EC                            
000040EC                            LevSel_Level_SS:
000040EC D040                       		add.w	d0,d0
000040EE 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000040F2 6B00 FF90                  		bmi.w	LevelSelect
000040F6 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000040FA 6600                       		bne.s	LevSel_Level	; if not, branch
000040FC 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004102 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004106 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000410C 7000                       		moveq	#0,d0
0000410E 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004112 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004116 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000411A 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004122 4E75                       		rts	
00004124                            ; ===========================================================================
00004124                            
00004124                            LevSel_Level:
00004124 0240 3FFF                  		andi.w	#$3FFF,d0
00004128 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000412C                            
0000412C                            PlayLevel:
0000412C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00004132 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004138 7000                       		moveq	#0,d0
0000413A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000413E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004142 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004146 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
0000414A 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
0000414E 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
00004152 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004156 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
0000415C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000416C 4E75                       		rts	
0000416E                            ; ===========================================================================
0000416E                            ; ---------------------------------------------------------------------------
0000416E                            ; Level	select - level pointers
0000416E                            ; ---------------------------------------------------------------------------
0000416E                            		; correct level order
0000416E 0000                       		dc.b id_GHZ, 0
00004170 0001                       		dc.b id_GHZ, 1
00004172 0002                       		dc.b id_GHZ, 2
00004174 0200                       		dc.b id_MZ, 0
00004176 0201                       		dc.b id_MZ, 1
00004178 0202                       		dc.b id_MZ, 2
0000417A 0400                       		dc.b id_SYZ, 0
0000417C 0401                       		dc.b id_SYZ, 1
0000417E 0402                       		dc.b id_SYZ, 2
00004180 0100                       		dc.b id_LZ, 0
00004182 0101                       		dc.b id_LZ, 1
00004184 0102                       		dc.b id_LZ, 2
00004186 0300                       		dc.b id_SLZ, 0
00004188 0301                       		dc.b id_SLZ, 1
0000418A 0302                       		dc.b id_SLZ, 2
0000418C 0500                       		dc.b id_SBZ, 0
0000418E 0501                       		dc.b id_SBZ, 1
00004190 0103                       		dc.b id_LZ, 3
00004192 0502                       		dc.b id_SBZ, 2
00004194 0700                       		dc.b id_SS, 0		; Special Stage
00004196 8000                       		dc.w $8000		; Sound Test
00004198                            		even
00004198                            ; ---------------------------------------------------------------------------
00004198                            ; Level	select codes
00004198                            ; ---------------------------------------------------------------------------
00004198 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000041A0                            		even
000041A0                            
000041A0 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000041A6                            		even
000041A6                            ; ===========================================================================
000041A6                            
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            ; Demo mode
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            
000041A6                            GotoDemo:
000041A6 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041AC                            
000041AC                            loc_33B6:
000041AC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041B2 6100 F5C8                  		bsr.w	WaitForVBla
000041B6 6100 0000                  		bsr.w	DeformLayers
000041BA 6100 D88E                  		bsr.w	PaletteCycle
000041BE 6100 D312                  		bsr.w	RunPLC
000041C2 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041C6 5440                       		addq.w	#2,d0
000041C8 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000041CC 0C40 1C00                  		cmpi.w	#$1C00,d0
000041D0 6500                       		blo.s	loc_33E4
000041D2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000041D8 4E75                       		rts	
000041DA                            ; ===========================================================================
000041DA                            
000041DA                            loc_33E4:
000041DA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041E0 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6600 FFC2                  		bne.w	loc_33B6
000041F4 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000041F8 0240 0007                  		andi.w	#7,d0
000041FC D040                       		add.w	d0,d0
000041FE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004202 31C0 FE10                  		move.w	d0,(v_zone).w
00004206 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
0000420A 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004210 6500                       		blo.s	loc_3422	; if yes, branch
00004212 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004218                            
00004218                            loc_3422:
00004218 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
0000421E 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004224 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004228 6600                       		bne.s	Demo_Level	; if not, branch
0000422A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004230 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004234 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004238                            
00004238                            Demo_Level:
00004238 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000423E 7000                       		moveq	#0,d0
00004240 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004244 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004248 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000424C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004254 4E75                       		rts	
00004256                            ; ===========================================================================
00004256                            ; ---------------------------------------------------------------------------
00004256                            ; Levels used in demos
00004256                            ; ---------------------------------------------------------------------------
00004256                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
0000425E                            		even
0000425E                            
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            ; Subroutine to	change what you're selecting in the level select
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            
0000425E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000425E                            
0000425E                            
0000425E                            LevSelControls:
0000425E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004262 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004266 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004268 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000426C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000426E                            
0000426E                            LevSel_UpDown:
0000426E 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004274 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004278 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000427C 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000427E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004282 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004286 6700                       		beq.s	LevSel_Down	; if not, branch
00004288 5340                       		subq.w	#1,d0		; move up 1 selection
0000428A 6400                       		bhs.s	LevSel_Down
0000428C 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000428E                            
0000428E                            LevSel_Down:
0000428E 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004292 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004294 5240                       		addq.w	#1,d0		; move down 1 selection
00004296 0C40 0015                  		cmpi.w	#$15,d0
0000429A 6500                       		blo.s	LevSel_Refresh
0000429C 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000429E                            
0000429E                            LevSel_Refresh:
0000429E 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000042A2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000042A6 4E75                       		rts	
000042A8                            ; ===========================================================================
000042A8                            
000042A8                            LevSel_SndTest:
000042A8 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000042AE 6600                       		bne.s	LevSel_NoMove	; if not, branch
000042B0 1238 F605                  		move.b	(v_jpadpress1).w,d1
000042B4 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000042B8 6700                       		beq.s	LevSel_NoMove	; if not, branch
000042BA 3038 FF84                  		move.w	(v_levselsound).w,d0
000042BE 0801 0002                  		btst	#bitL,d1	; is left pressed?
000042C2 6700                       		beq.s	LevSel_Right	; if not, branch
000042C4 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000042C6 6400                       		bhs.s	LevSel_Right
000042C8 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
000042CA                            
000042CA                            LevSel_Right:
000042CA 0801 0003                  		btst	#bitR,d1	; is right pressed?
000042CE 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000042D0 5240                       		addq.w	#1,d0		; add 1	to sound test
000042D2 0C40 0050                  		cmpi.w	#$50,d0
000042D6 6500                       		blo.s	LevSel_Refresh2
000042D8 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000042DA                            
000042DA                            LevSel_Refresh2:
000042DA 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000042DE 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000042E2                            
000042E2                            LevSel_NoMove:
000042E2 4E75                       		rts	
000042E4                            ; End of function LevSelControls
000042E4                            
000042E4                            ; ---------------------------------------------------------------------------
000042E4                            ; Subroutine to load level select text
000042E4                            ; ---------------------------------------------------------------------------
000042E4                            
000042E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042E4                            
000042E4                            
000042E4                            LevSelTextLoad:
000042E4                            
000042E4 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000042E4                            					; $E210 is a VRAM address
000042E4                            
000042E4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000042EA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042F0 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000042F6 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000042FA 7214                       		moveq	#$14,d1		; number of lines of text
000042FC                            
000042FC                            	LevSel_DrawAll:
000042FC 2D44 0004                  		move.l	d4,4(a6)
00004300 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004304 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
0000430A 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
0000430E                            
0000430E 7000                       		moveq	#0,d0
00004310 3038 FF82                  		move.w	(v_levselitem).w,d0
00004314 3200                       		move.w	d0,d1
00004316 283C 6210 0003             		move.l	#textpos,d4
0000431C EF48                       		lsl.w	#7,d0
0000431E 4840                       		swap	d0
00004320 D880                       		add.l	d0,d4
00004322 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004328 E749                       		lsl.w	#3,d1
0000432A 3001                       		move.w	d1,d0
0000432C D241                       		add.w	d1,d1
0000432E D240                       		add.w	d0,d1
00004330 D2C1                       		adda.w	d1,a1
00004332 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004336 2D44 0004                  		move.l	d4,4(a6)
0000433A 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
0000433E 363C E680                  		move.w	#$E680,d3
00004342 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00004348 6600                       		bne.s	LevSel_DrawSnd
0000434A 363C C680                  		move.w	#$C680,d3
0000434E                            
0000434E                            LevSel_DrawSnd:
00004358 3038 FF84                  		move.w	(v_levselsound).w,d0
0000435C 0640 0080                  		addi.w	#$80,d0
00004360 1400                       		move.b	d0,d2
00004362 E808                       		lsr.b	#4,d0
00004364 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004368 1002                       		move.b	d2,d0
0000436A 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000436E 4E75                       		rts	
00004370                            ; End of function LevSelTextLoad
00004370                            
00004370                            
00004370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004370                            
00004370                            
00004370                            LevSel_ChgSnd:
00004370 0240 000F                  		andi.w	#$F,d0
00004374 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004378 6500                       		blo.s	LevSel_Numb	; if not, branch
0000437A 5E00                       		addi.b	#7,d0		; use alpha characters
0000437C                            
0000437C                            	LevSel_Numb:
0000437C D043                       		add.w	d3,d0
0000437E 3C80                       		move.w	d0,(a6)
00004380 4E75                       		rts	
00004382                            ; End of function LevSel_ChgSnd
00004382                            
00004382                            
00004382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004382                            
00004382                            
00004382                            LevSel_ChgLine:
00004382 7417                       		moveq	#$17,d2		; number of characters per line
00004384                            
00004384                            	LevSel_LineLoop:
00004384 7000                       		moveq	#0,d0
00004386 1019                       		move.b	(a1)+,d0	; get character
00004388 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000438A 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000438E 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004392 4E75                       		rts	
00004394                            
00004394                            
00004394                            	LevSel_CharOk:
00004394 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004396 3C80                       		move.w	d0,(a6)		; send to VRAM
00004398 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000439C 4E75                       		rts	
0000439E                            ; End of function LevSel_ChgLine
0000439E                            
0000439E                            ; ===========================================================================
0000439E                            ; ---------------------------------------------------------------------------
0000439E                            ; Level	select menu text
0000439E                            ; ---------------------------------------------------------------------------
0000439E                            		incbin	"misc\Level Select Text (JP1).bin"
00004596                            		even
00004596                            ; ---------------------------------------------------------------------------
00004596                            ; Music	playlist
00004596                            ; ---------------------------------------------------------------------------
00004596                            MusicList:
00004596 00                         			dc.b bgm_GHZ    ; GHZ1
00004597 00                                 	dc.b bgm_LZ    ; GHZ2
00004598 00                                 	dc.b bgm_Seaside   ; GHZ3
00004599 00                                 	dc.b bgm_LZ    ; GHZ4
0000459A 00                                 	dc.b bgm_Stop    ; LZ1
0000459B 00                                 	dc.b bgm_Stop   ; LZ2
0000459C 00                                 	dc.b bgm_Stop    ; LZ3
0000459D 00                                 	dc.b bgm_SBZ3    ; LZ4
0000459E 00                                 	dc.b bgm_MZ    ; MZ1
0000459F 00                                 	dc.b bgm_SBZ    ; MZ2
000045A0 00                                 	dc.b bgm_ToxicLandfill   ; MZ3
000045A1 00                                 	dc.b bgm_SBZ    ; MZ4
000045A2 00                                 	dc.b bgm_LZ    ; SLZ1
000045A3 00                                 	dc.b bgm_LZ    ; SLZ2
000045A4 00                                 	dc.b bgm_LZ    ; SLZ3
000045A5 00                                 	dc.b bgm_LZ    ; SLZ4
000045A6 00                                 	dc.b bgm_SYZ    ; SYZ1
000045A7 00                                 	dc.b bgm_SLZ    ; SYZ2
000045A8 00                                 	dc.b bgm_SLZ    ; SYZ3
000045A9 00                                 	dc.b bgm_SLZ    ; SYZ4
000045AA 00                                 	dc.b bgm_SBZ    ; SBZ1
000045AB 00                                 	dc.b bgm_SBZ    ; SBZ2
000045AC 00                                 	dc.b bgm_FZ		; SBZ3
000045AD 00                                 	dc.b bgm_SBZ    ; SBZ4
000045AE 00                                 	dc.b bgm_GHZ    ; GHZ1
000045AF 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B0 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B1 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B2                                    	even
000045B2                            ; ===========================================================================
000045B2                            
000045B2                            ; ---------------------------------------------------------------------------
000045B2                            ; Level
000045B2                            ; ---------------------------------------------------------------------------
000045B2                            
000045B2                            GM_Level:
000045B2 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
000045B8 4A78 FFF0                  		tst.w	(f_demo).w
000045BC 6B00                       		bmi.s	Level_NoMusicFade
000045C6                            
000045C6                            	Level_NoMusicFade:
000045C6 6100 CEFC                  		bsr.w	ClearPLC
000045CA 6100 D932                  		bsr.w	PaletteFadeOut
000045CE 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000045D2 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000045D4 46FC 2700                  		disable_ints
000045E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000045E8 6100 CA90                  		bsr.w	NemDec
000045EC 46FC 2300                  		enable_ints
000045F0 7000                       		moveq	#0,d0
000045F2 1038 FE10                  		move.b	(v_zone).w,d0
000045F6 E948                       		lsl.w	#4,d0
000045F8 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000045FE 45F2 0000                  		lea	(a2,d0.w),a2
00004602 7000                       		moveq	#0,d0
00004604 1012                       		move.b	(a2),d0
00004606 6700                       		beq.s	loc_37FC
00004608 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
0000460C                            
0000460C                            loc_37FC:
0000460C 7000                       		moveq	#plcid_Main2,d0
0000460E 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
00004612                            
00004612                            Level_ClrRam:
00004612 43F8 D000                  		lea	(v_objspace).w,a1
00004616 7000                       		moveq	#0,d0
00004618 323C 07FF                  		move.w	#$7FF,d1
0000461C                            
0000461C                            	Level_ClrObjRam:
0000461C 22C0                       		move.l	d0,(a1)+
0000461E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004622                            
00004622 43F8 F628                  		lea	($FFFFF628).w,a1
00004626 7000                       		moveq	#0,d0
00004628 323C 0015                  		move.w	#$15,d1
0000462C                            
0000462C                            	Level_ClrVars1:
0000462C 22C0                       		move.l	d0,(a1)+
0000462E 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004632                            
00004632 43F8 F700                  		lea	(v_screenposx).w,a1
00004636 7000                       		moveq	#0,d0
00004638 323C 003F                  		move.w	#$3F,d1
0000463C                            
0000463C                            	Level_ClrVars2:
0000463C 22C0                       		move.l	d0,(a1)+
0000463E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004642                            
00004642 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004646 7000                       		moveq	#0,d0
00004648 323C 0047                  		move.w	#$47,d1
0000464C                            
0000464C                            	Level_ClrVars3:
0000464C 22C0                       		move.l	d0,(a1)+
0000464E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004652                            
00004652 46FC 2700                  		disable_ints
00004656 6100 C8A4                  		bsr.w	ClearScreen
0000465A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004660 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004664 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004668 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000466C 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004670 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004674 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004678 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000467C 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004682 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004686 31FC C800 C8FC             		ResetDMAQueue	
0000468C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004692 6600                       		bne.s	Level_LoadPal	; if not, branch
00004694                            
00004694 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004698 7000                       		moveq	#0,d0
0000469A 1038 FE11                  		move.b	(v_act).w,d0
0000469E D040                       		add.w	d0,d0
000046A0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000046A6 3031 0000                  		move.w	(a1,d0.w),d0
000046AA 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
000046AE 31C0 F648                  		move.w	d0,(v_waterpos2).w
000046B2 31C0 F64A                  		move.w	d0,(v_waterpos3).w
000046B6 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
000046BA 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
000046BE 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
000046C4                            
000046C4                            Level_LoadPal:
000046C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000046CA 46FC 2300                  		move	#$2300,sr
000046CE 4EB9 0000 0000             		jsr		LoadPlayerPal
000046D4 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000046D8 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
000046DE 6600                       		bne.s	Level_GetBgm	; if not, branch
000046E0 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
000046E6 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000046EA 4A38 FE30                  		tst.b	($FFFFFE30).w
000046EE 6700                       		beq.s	Level_GetBgm
000046F0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000046F6                            
000046F6                            	Level_GetBgm:
000046F6 4A78 FFF0                  		tst.w	(f_demo).w
000046FA 6B00                               	bmi.s	Level_SkipTtlCard
000046FC 7000                               	moveq	#0,d0
000046FE 3038 FE10                  		move.w	(v_zone).w,d0
00004702 E418                       		ror.b	#2,d0
00004704 EC48                       		lsr.w   #6,d0
00004706 43F9 0000 4596                     	lea	(MusicList).l,a1 ; load    music playlist
0000470C 1031 0000                          	move.b	(a1,d0.w),d0
00004710 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004714 6100 C8B0                          	bsr.w	PlaySound    ; play music
00004718 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
0000471E                            
0000471E                            
0000471E                            Level_TtlCardLoop:
0000471E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004724 6100 F056                  		bsr.w	WaitForVBla
00004728 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000472E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004734 6100 CD9C                  		bsr.w	RunPLC
00004738 3038 D108                  		move.w	(v_objspace+$108).w,d0
0000473C B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004740 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004742 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004746 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004748 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
0000474E                            
0000474E                            	Level_SkipTtlCard:
0000474E 4EB9 0000 0000             		jsr		LoadPlayerPal
00004754 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
00004758 6100 0000                  		bsr.w	LevelSizeLoad
0000475C 6100 0000                  		bsr.w	DeformLayers
00004760 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004766 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
0000476A 6100 0000                  		bsr.w	LoadTilesFromStart
0000476E 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004774 6100 0000                  		bsr.w	ColIndexLoad
00004778 6100 0000                  		bsr.w	LZWaterFeatures
0000477C 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004782 4A78 FFF0                  		tst.w	(f_demo).w
00004786 6B00                       		bmi.s	Level_ChkDebug
00004788 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000478E                            
0000478E                            Level_ChkDebug:
0000478E 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004792 6700                       		beq.s	Level_ChkWater	; if not, branch
00004794 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
0000479A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000479C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000047A2                            
000047A2                            Level_ChkWater:
000047A2 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
000047A8 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
000047AE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000047B4 6600                       		bne.s	Level_LoadObj	; if not, branch
000047B6 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
000047BC 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
000047C2 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
000047C8 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
000047CE                            
000047CE                            Level_LoadObj:
000047CE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000047D4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000047DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000047E0 7000                       		moveq	#0,d0
000047E2 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
000047E6 6600                       		bne.s	Level_SkipClr	; if yes, branch
000047E8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000047EC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000047F0 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
000047F4                            
000047F4                            	Level_SkipClr:
000047F4 11C0 FE1A                  		move.b	d0,(f_timeover).w
000047F8 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
000047FC 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004800 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004804 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004808 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
0000480C 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004810 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004814 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004818 31C0 FE02                  		move.w	d0,(f_restart).w
0000481C 31C0 FE04                  		move.w	d0,(v_framecount).w
00004820 6100 0000                  		bsr.w	OscillateNumInit
00004824 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000482A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004830 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004836 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
0000483C 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004842 7000                       		moveq	#0,d0
00004844 1038 FE10                  		move.b	(v_zone).w,d0
00004848 E548                       		lsl.w	#2,d0
0000484A 2271 0000                  		movea.l	(a1,d0.w),a1
0000484E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004852 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004854 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
0000485A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000485E 5340                       		subq.w	#1,d0
00004860 E548                       		lsl.w	#2,d0
00004862 2271 0000                  		movea.l	(a1,d0.w),a1
00004866                            
00004866                            Level_Demo:
00004866 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
0000486C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004870 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004876 4A78 FFF0                  		tst.w	(f_demo).w
0000487A 6A00                       		bpl.s	Level_ChkWaterPal
0000487C 31FC 021C F614             		move.w	#540,(v_demolength).w
00004882 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004888 6600                       		bne.s	Level_ChkWaterPal
0000488A 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004890                            
00004890                            Level_ChkWaterPal:
00004890 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004896 6600                       		bne.s	Level_Delay	; if not, branch
00004898 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
0000489A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
000048A0 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
000048A2 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
000048A4                            
000048A4                            	Level_WtrNotSbz:
000048A4 6100 D9BA                  		bsr.w	PalLoad4_Water
000048A8                            
000048A8                            Level_Delay:
000048A8 323C 0003                  		move.w	#3,d1
000048AC                            
000048AC                            	Level_DelayLoop:
000048AC 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
000048B2 6100 EEC8                  		bsr.w	WaitForVBla
000048B6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000048BA                            
000048BA 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
000048C0 6100 D59C                  		bsr.w	PalFadeIn_Alt
000048C4 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000048C8 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
000048CA 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
000048CE 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
000048D2 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
000048D6 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
000048DA 6000                       		bra.s	Level_StartGame
000048DC                            ; ===========================================================================
000048DC                            
000048DC                            Level_ClrCardArt:
000048DC 7000                       		moveq	#plcid_Explode,d0
000048DE 4EB9 0000 1466             		jsr	(AddPLC).l	; load explosion gfx
000048E4 7000                       		moveq	#0,d0
000048E6 1038 FE10                  		move.b	(v_zone).w,d0
000048EA 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
000048EE 4EB9 0000 1466             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
000048F4                            
000048F4                            Level_StartGame:
000048F4 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
000048FA                            
000048FA                            ; ---------------------------------------------------------------------------
000048FA                            ; Main level loop (when	all title card and loading sequences are finished)
000048FA                            ; ---------------------------------------------------------------------------
000048FA                            
000048FA                            Level_MainLoop:
000048FA 6100 C6DC                  		bsr.w	PauseGame
000048FE 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004904 6100 EE76                  		bsr.w	WaitForVBla
00004908 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
0000490C 6100 0000                  		bsr.w	MoveSonicInDemo
00004910 6100 0000                  		bsr.w	LZWaterFeatures
00004914 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000491A 4A78 FE02                  			tst.w   (f_restart).w
0000491E 6600 FC92                  			bne     GM_Level
00004922 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004926 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004928 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
0000492E 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004930                            
00004930                            	Level_DoScroll:
00004930 6100 0000                  		bsr.w	DeformLayers
00004934                            
00004934                            	Level_SkipScroll:
00004934 4EB9 0000 0000             		jsr	(BuildSprites).l
0000493A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004940 6100 D108                  		bsr.w	PaletteCycle
00004944 6100 CB8C                  		bsr.w	RunPLC
00004948 6100 0000                  		bsr.w	OscillateNumDo
0000494C 6100 0000                  		bsr.w	SynchroAnimate
00004950 6100 0000                  		bsr.w	SignpostArtLoad
00004954                            
00004954 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000495A 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
0000495C 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004962 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004966 4E75                       		rts	
00004968                            ; ===========================================================================
00004968                            
00004968                            Level_ChkDemo:
00004968 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
0000496C 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000496E 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004972 6700                       		beq.s	Level_EndDemo	; if not, branch
00004974 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000497A 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
0000497E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004984 4E75                       		rts	
00004986                            ; ===========================================================================
00004986                            
00004986                            Level_EndDemo:
00004986 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000498C 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
0000498E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004994 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004998 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
0000499A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
000049A0                            
000049A0                            Level_FadeDemo:
000049A0 31FC 003C F614             		move.w	#$3C,(v_demolength).w
000049A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000049AC 4278 F794                  		clr.w	(v_palchgspeed).w
000049B0                            
000049B0                            	Level_FDLoop:
000049B0 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
000049B6 6100 EDC4                  		bsr.w	WaitForVBla
000049BA 6100 0000                  		bsr.w	MoveSonicInDemo
000049BE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049C4 4EB9 0000 0000             		jsr	(BuildSprites).l
000049CA 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000049D0 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000049D4 6A00                       		bpl.s	loc_3BC8
000049D6 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000049DC 6100 D540                  		bsr.w	FadeOut_ToBlack
000049E0                            
000049E0                            loc_3BC8:
000049E0 4A78 F614                  		tst.w	(v_demolength).w
000049E4 66CA                       		bne.s	Level_FDLoop
000049E6 4E75                       		rts	
000049E8                            ; ===========================================================================
000049E8                            
000049E8                            		include	"_inc\LZWaterFeatures.asm"
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            ; Subroutine to	do special water effects in Labyrinth Zone
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            
000049E8                            LZWaterFeatures:
000049E8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000049EE 6600                       		bne.s	@notlabyrinth	; if not, branch
000049F0 4A38 F744                  			tst.b   (f_nobgscroll).w
000049F4 6600                       			bne.s	@setheight
000049F6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000049FC 6400                       		bcc.s	@setheight	; if yes, skip other effects
000049FE                            
000049FE 6100 0000                  		bsr.w	LZWindTunnels
00004A02 6100 0000                  		bsr.w	LZWaterSlides
00004A06 6100 0000                  		bsr.w	LZDynamicWater
00004A0A                            
00004A0A                            @setheight:
00004A0A 4238 F64E                  		clr.b	(f_wtr_state).w
00004A0E 7000                       		moveq	#0,d0
00004A10 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004A14 E248                       		lsr.w	#1,d0
00004A16 D078 F648                  		add.w	(v_waterpos2).w,d0
00004A1A 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004A1E 3038 F646                  		move.w	(v_waterpos1).w,d0
00004A22 9078 F704                  		sub.w	(v_screenposy).w,d0
00004A26 6400                       		bcc.s	@isbelow
00004A28 4A40                       		tst.w	d0
00004A2A 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004A2C                            
00004A2C 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004A32 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004A38                            
00004A38                            	@isbelow:
00004A38 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004A3C 6500                       		bcs.s	@isvisible	; if yes, branch
00004A3E 303C 00DF                  		move.w	#223,d0
00004A42                            
00004A42                            	@isvisible:
00004A42 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004A46                            
00004A46                            @notlabyrinth:
00004A46 4E75                       		rts	
00004A48                            ; ===========================================================================
00004A48                            ; ---------------------------------------------------------------------------
00004A48                            ; Initial water heights
00004A48                            ; ---------------------------------------------------------------------------
00004A48 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004A4A 0328                       		dc.w $328	; Labyrinth 2
00004A4C 0900                       		dc.w $900	; Labyrinth 3
00004A4E 0228                       		dc.w $228	; Scrap Brain 3
00004A50                            		even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Labyrinth dynamic water routines
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            LZDynamicWater:
00004A50 7000                       		moveq	#0,d0
00004A52 1038 FE11                  		move.b	(v_act).w,d0
00004A56 D040                       		add.w	d0,d0
00004A58 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004A5C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004A60 7200                       		moveq	#0,d1
00004A62 1238 F64C                  		move.b	(f_water).w,d1
00004A66 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004A6A 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004A6E 6700                       		beq.s	@exit		; if water level is correct, branch
00004A70 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004A72 4441                       		neg.w	d1		; set water to move up instead
00004A74                            
00004A74                            	@movewater:
00004A74 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004A78                            
00004A78                            	@exit:
00004A78 4E75                       		rts	
00004A7A                            ; ===========================================================================
00004A7A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004A7C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004A7E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004A80 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004A82                            ; ===========================================================================
00004A82                            
00004A82                            DynWater_LZ1:
00004A82 4E75                       		rts	
00004A84                            ; ===========================================================================
00004A84                            
00004A84                            DynWater_LZ2:
00004A84 3038 F700                  		move.w	(v_screenposx).w,d0
00004A88 323C 0328                  		move.w	#$328,d1
00004A8C 0C40 0500                  		cmpi.w	#$500,d0
00004A90 6500                       		bcs.s	@setwater
00004A92 323C 03C8                  		move.w	#$3C8,d1
00004A96 0C40 0B00                  		cmpi.w	#$B00,d0
00004A9A 6500                       		bcs.s	@setwater
00004A9C 323C 0428                  		move.w	#$428,d1
00004AA0                            
00004AA0                            	@setwater:
00004AA0 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004AA4 4E75                       		rts	
00004AA6                            ; ===========================================================================
00004AA6                            
00004AA6                            DynWater_LZ3:
00004AA6 3038 F700                  		move.w	(v_screenposx).w,d0
00004AAA 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004AAE 6600                       		bne.s	@routine2
00004AB0                            
00004AB0 323C 0900                  		move.w	#$900,d1
00004AB4 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004AB8 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004ABA 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004AC0 6500                       		bcs.s	@setwaterlz3
00004AC2 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004AC8 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004ACA                            
00004ACA 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004ACE 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004AD4 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004AE2                            
00004AE2                            	@setwaterlz3:
00004AE2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004AE6 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004AEA 4E75                       		rts	
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            @routine2:
00004AEC 5302                       		subq.b	#1,d2
00004AEE 6600                       		bne.s	@routine3
00004AF0 323C 04C8                  		move.w	#$4C8,d1
00004AF4 0C40 0770                  		cmpi.w	#$770,d0
00004AF8 6500                       		bcs.s	@setwater2
00004AFA 323C 0308                  		move.w	#$308,d1
00004AFE 0C40 1400                  		cmpi.w	#$1400,d0
00004B02 6500                       		bcs.s	@setwater2
00004B04 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004B0A 6700                       		beq.s	@sonicislow
00004B0C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004B12 6400                       		bcc.s	@sonicislow	; if yes, branch
00004B14 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004B1A 6400                       		bcc.s	@setwater2
00004B1C                            
00004B1C                            @sonicislow:
00004B1C 323C 0508                  		move.w	#$508,d1
00004B20 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004B24 0C40 1770                  		cmpi.w	#$1770,d0
00004B28 6500                       		bcs.s	@setwater2
00004B2A 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004B30                            
00004B30                            	@setwater2:
00004B30 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B34 4E75                       		rts	
00004B36                            ; ===========================================================================
00004B36                            
00004B36                            @routine3:
00004B36 5302                       		subq.b	#1,d2
00004B38 6600                       		bne.s	@routine4
00004B3A 323C 0508                  		move.w	#$508,d1
00004B3E 0C40 1860                  		cmpi.w	#$1860,d0
00004B42 6500                       		bcs.s	@setwater3
00004B44 323C 0188                  		move.w	#$188,d1
00004B48 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B4C 6400                       		bcc.s	@loc_3DC6
00004B4E B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004B52 6600                       		bne.s	@setwater3
00004B54                            
00004B54                            	@loc_3DC6:
00004B54 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004B5A                            
00004B5A                            	@setwater3:
00004B5A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B5E 4E75                       		rts	
00004B60                            ; ===========================================================================
00004B60                            
00004B60                            @routine4:
00004B60 5302                       		subq.b	#1,d2
00004B62 6600                       		bne.s	@routine5
00004B64 323C 0188                  		move.w	#$188,d1
00004B68 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B6C 6500                       		bcs.s	@setwater4
00004B6E 323C 0900                  		move.w	#$900,d1
00004B72 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004B76 6500                       		bcs.s	@setwater4
00004B78 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004B7E 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004B84 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004B8A 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004B90 4E75                       		rts	
00004B92                            ; ===========================================================================
00004B92                            
00004B92                            @setwater4:
00004B92 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B96 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004B9A 4E75                       		rts	
00004B9C                            ; ===========================================================================
00004B9C                            
00004B9C                            @routine5:
00004B9C 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004BA0 6500                       		bcs.s	@dontset	; if not, branch
00004BA2 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004BA8                            
00004BA8                            	@dontset:
00004BA8 4E75                       		rts	
00004BAA                            ; ===========================================================================
00004BAA                            
00004BAA                            DynWater_SBZ3:
00004BAA 323C 0228                  		move.w	#$228,d1
00004BAE 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004BB4 6500                       		bcs.s	@setwater
00004BB6 323C 04C8                  		move.w	#$4C8,d1
00004BBA                            
00004BBA                            	@setwater:
00004BBA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004BBE 4E75                       		rts
00004BC0                            
00004BC0                            ; ---------------------------------------------------------------------------
00004BC0                            ; Labyrinth Zone "wind tunnels"	subroutine
00004BC0                            ; ---------------------------------------------------------------------------
00004BC0                            
00004BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BC0                            
00004BC0                            
00004BC0                            LZWindTunnels:
00004BC0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004BC4 6600 0000                  		bne.w	@quit	; if yes, branch
00004BC8 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004BCE 7000                       		moveq	#0,d0
00004BD0 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004BD4 E748                       		lsl.w	#3,d0		; multiply by 8
00004BD6 D4C0                       		adda.w	d0,a2		; add to address for data
00004BD8 7200                       		moveq	#0,d1
00004BDA 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004BDE 6600                       		bne.s	@notact1	; if not, branch
00004BE0 7201                       		moveq	#1,d1
00004BE2 514A                       		subq.w	#8,a2		; use different data for act 1
00004BE4                            
00004BE4                            	@notact1:
00004BE4 43F8 D000                  		lea	(v_player).w,a1
00004BE8                            
00004BE8                            @chksonic:
00004BE8 3029 0008                  		move.w	obX(a1),d0
00004BEC B052                       		cmp.w	(a2),d0
00004BEE 6500 0000                  		bcs.w	@chknext
00004BF2 B06A 0004                  		cmp.w	4(a2),d0
00004BF6 6400 0000                  		bcc.w	@chknext
00004BFA 3429 000C                  		move.w	obY(a1),d2
00004BFE B46A 0002                  		cmp.w	2(a2),d2
00004C02 6500                       		bcs.s	@chknext
00004C04 B46A 0006                  		cmp.w	6(a2),d2
00004C08 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004C0A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004C0E 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004C12 6600                       		bne.s	@skipsound	; if not, branch
00004C1E                            
00004C1E                            	@skipsound:
00004C1E 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004C22 6600 0000                  		bne.w	@quit	; if yes, branch
00004C26 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004C2C 6400                       		bcc.s	@clrquit	; if yes, branch
00004C2E 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004C34 0440 0080                  		subi.w	#$80,d0
00004C38 B052                       		cmp.w	(a2),d0
00004C3A 6400                       		bcc.s	@movesonic
00004C3C 7002                       		moveq	#2,d0
00004C3E 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004C44 6600                       		bne.s	@notact2	; if not, branch
00004C46 4440                       		neg.w	d0
00004C48                            
00004C48                            	@notact2:
00004C48 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004C4C                            
00004C4C                            @movesonic:
00004C4C 5869 0008                  		addq.w	#4,obX(a1)
00004C50 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004C56 337C 0000 0012             		move.w	#0,obVelY(a1)
00004C5C 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004C62 08E9 0001 0022             		bset	#1,obStatus(a1)
00004C68 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004C6E 6700                       		beq.s	@down		; if not, branch
00004C70 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004C74                            
00004C74                            	@down:
00004C74 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004C7A 6700                       		beq.s	@end		; if not, branch
00004C7C 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004C80                            
00004C80                            	@end:
00004C80 4E75                       		rts	
00004C82                            ; ===========================================================================
00004C82                            
00004C82                            @chknext:
00004C82 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004C84 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004C88 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004C8C 6700                       		beq.s	@quit		; if yes, branch
00004C8E 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004C94                            
00004C94                            @clrquit:
00004C94 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004C98                            
00004C98                            @quit:
00004C98 4E75                       		rts	
00004C9A                            ; End of function LZWindTunnels
00004C9A                            
00004C9A                            ; ===========================================================================
00004C9A                            
00004C9A                            		;    left, top,  right, bottom boundaries
00004C9A 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004CA2 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004CAA 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004CB2 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004CBA 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004CC2                            		even
00004CC2                            
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            ; Labyrinth Zone water slide subroutine
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            
00004CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CC2                            
00004CC2                            
00004CC2                            LZWaterSlides:
00004CC2 43F8 D000                  		lea	(v_player).w,a1
00004CC6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004CCC 6600                       		bne.s	loc_3F6A	; if not, branch
00004CCE 3029 000C                  		move.w	obY(a1),d0
00004CD2 E248                       		lsr.w	#1,d0
00004CD4 0240 0380                  		andi.w	#$380,d0
00004CD8 1229 0008                  		move.b	obX(a1),d1
00004CDC 0241 007F                  		andi.w	#$7F,d1
00004CE0 D041                       		add.w	d1,d0
00004CE2 45F8 A400                  		lea	(v_lvllayout).w,a2
00004CE6 1032 0000                  		move.b	(a2,d0.w),d0
00004CEA 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004CEE 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004CF0                            
00004CF0                            loc_3F62:
00004CF0 B022                       		cmp.b	-(a2),d0
00004CF2 57C9 FFFC                  		dbeq	d1,loc_3F62
00004CF6 6700                       		beq.s	LZSlide_Move
00004CF8                            
00004CF8                            loc_3F6A:
00004CF8 4A38 F7CA                  		tst.b	(f_jumponly).w
00004CFC 6700                       		beq.s	locret_3F7A
00004CFE 337C 0005 003E             		move.w	#5,$3E(a1)
00004D04 4238 F7CA                  		clr.b	(f_jumponly).w
00004D08                            
00004D08                            locret_3F7A:
00004D08 4E75                       		rts	
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            LZSlide_Move:
00004D0A 0C41 0003                  		cmpi.w	#3,d1
00004D0E 6400                       		bcc.s	loc_3F84
00004D10 4E71                       		nop	
00004D12                            
00004D12                            loc_3F84:
00004D12 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004D18 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004D1C 1340 0020                  		move.b	d0,obInertia(a1)
00004D20 6A00                       		bpl.s	loc_3F9A
00004D22 08E9 0000 0022             		bset	#0,obStatus(a1)
00004D28                            
00004D28                            loc_3F9A:
00004D28 4229 0021                  		clr.b	obInertia+1(a1)
00004D2C 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004D32 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004D38 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004D3C 0200 001F                  		andi.b	#$1F,d0
00004D40 6600                       		bne.s	locret_3FBE
00004D4C                            
00004D4C                            locret_3FBE:
00004D4C 4E75                       		rts	
00004D4E                            ; End of function LZWaterSlides
00004D4E                            
00004D4E                            ; ===========================================================================
00004D4E                            ; byte_3FC0:
00004D4E                            Slide_Speeds:
00004D4E 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004D56 00                         		even
00004D56                            
00004D56                            Slide_Chunks:
00004D56 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004D57                            ; byte_3FCF
00004D57                            Slide_Chunks_End
00004D58 00                         		even
00004D58 00                         		even
00004D58                            		include	"_inc\MoveSonicInDemo.asm"
00004D58                            ; ---------------------------------------------------------------------------
00004D58                            ; Subroutine to	move Sonic in demo mode
00004D58                            ; ---------------------------------------------------------------------------
00004D58                            
00004D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D58                            
00004D58                            
00004D58                            MoveSonicInDemo:
00004D58 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004D5C 6600                       		bne.s	MDemo_On	; if yes, branch
00004D5E 4E75                       		rts	
00004D60                            ; ===========================================================================
00004D60                            
00004D60                            ; This is an unused subroutine for recording a demo
00004D60                            
00004D60                            DemoRecorder:
00004D60 43F9 0008 0000             		lea	($80000).l,a1
00004D66 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004D6A D2C0                       		adda.w	d0,a1
00004D6C 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004D70 B011                       		cmp.b	(a1),d0
00004D72 6600                       		bne.s	@next
00004D74 5229 0001                  		addq.b	#1,1(a1)
00004D78 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004D7E 6700                       		beq.s	@next
00004D80 4E75                       		rts	
00004D82                            
00004D82                            	@next:
00004D82 1340 0002                  		move.b	d0,2(a1)
00004D86 137C 0000 0003             		move.b	#0,3(a1)
00004D8C 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004D90 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004D96 4E75                       		rts	
00004D98                            ; ===========================================================================
00004D98                            
00004D98                            MDemo_On:
00004D98 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004D9C 6A00                       		bpl.s	@dontquit	; if not, branch
00004D9E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004DA2 6B00                       		bmi.s	@dontquit	; if yes, branch
00004DA4 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004DAA                            
00004DAA                            	@dontquit:
00004DAA 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00004DB0 7000                       		moveq	#0,d0
00004DB2 1038 FE10                  		move.b	(v_zone).w,d0
00004DB6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00004DBC 6600                       		bne.s	@notspecial	; if not, branch
00004DBE 7006                       		moveq	#6,d0		; use demo #6
00004DC0                            
00004DC0                            	@notspecial:
00004DC0 E548                       		lsl.w	#2,d0
00004DC2 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
00004DC6 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004DCA 6A00                       		bpl.s	@notcredits	; if not, branch
00004DCC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00004DD2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004DD6 5340                       		subq.w	#1,d0
00004DD8 E548                       		lsl.w	#2,d0
00004DDA 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00004DDE                            
00004DDE                            	@notcredits:
00004DDE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004DE2 D2C0                       		adda.w	d0,a1
00004DE4 1011                       		move.b	(a1),d0
00004DE6 41F8 F604                  		lea	(v_jpadhold1).w,a0
00004DEA 1200                       		move.b	d0,d1
00004DEC 7400                       			moveq	#0,d2
00004DEE B500                       		eor.b	d2,d0
00004DF0 10C1                       		move.b	d1,(a0)+
00004DF2 C001                       		and.b	d1,d0
00004DF4 10C0                       		move.b	d0,(a0)+
00004DF6 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00004DFA 6400                       		bcc.s	@end
00004DFC 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00004E02 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004E06                            
00004E06                            	@end:
00004E06 4E75                       		rts	
00004E08                            ; End of function MoveSonicInDemo
00004E08                            
00004E08                            ; ===========================================================================
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            ; Demo sequence	pointers
00004E08                            ; ---------------------------------------------------------------------------
00004E08 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00004E0C 0000 0000                  		dc.l Demo_GHZ
00004E10 0000 0000                  		dc.l Demo_MZ
00004E14 0000 0000                  		dc.l Demo_MZ
00004E18 0000 0000                  		dc.l Demo_SYZ
00004E1C 0000 0000                  		dc.l Demo_SYZ
00004E20 0000 0000                  		dc.l Demo_SS
00004E24 0000 0000                  		dc.l Demo_SS
00004E28                            
00004E28 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00004E2C 0000 0000                  		dc.l Demo_EndMZ
00004E30 0000 0000                  		dc.l Demo_EndSYZ
00004E34 0000 0000                  		dc.l Demo_EndLZ
00004E38 0000 0000                  		dc.l Demo_EndSLZ
00004E3C 0000 0000                  		dc.l Demo_EndSBZ1
00004E40 0000 0000                  		dc.l Demo_EndSBZ2
00004E44 0000 0000                  		dc.l Demo_EndGHZ2
00004E48                            
00004E48 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004E58 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004E68 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004E78                            		even
00004E78                            		even
00004E78                            
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            ; Collision index pointer loading subroutine
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            
00004E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E78                            
00004E78                            
00004E78                            ColIndexLoad:
00004E78 7000                       		moveq	#0,d0
00004E7A 1038 FE10                  		move.b	(v_zone).w,d0
00004E7E E548                       		lsl.w	#2,d0
00004E80 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
00004E86 4E75                       		rts	
00004E88                            ; End of function ColIndexLoad
00004E88                            
00004E88                            ; ===========================================================================
00004E88                            ; ---------------------------------------------------------------------------
00004E88                            ; Collision index pointers
00004E88                            ; ---------------------------------------------------------------------------
00004E88 0000 0000                  ColPointers:	dc.l Col_GHZ
00004E8C 0000 0000                  		dc.l Col_LZ
00004E90 0000 0000                  		dc.l Col_MZ
00004E94 0000 0000                  		dc.l Col_SLZ
00004E98 0000 0000                  		dc.l Col_SYZ
00004E9C 0000 0000                  		dc.l Col_SBZ
00004EA0                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00004EA0                            
00004EA0                            		include	"_inc\Oscillatory Routines.asm"
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            ; Oscillating number subroutines
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            
00004EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EA0                            
00004EA0                            ; Initialise the values
00004EA0                            
00004EA0                            OscillateNumInit:
00004EA0 43F8 FE5E                  		lea	(v_oscillate).w,a1
00004EA4 45F9 0000 0000             		lea	(@baselines).l,a2
00004EAA 7220                       		moveq	#$20,d1
00004EAC                            
00004EAC                            	@loop:
00004EAC 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00004EAE 51C9 FFFC                  		dbf	d1,@loop
00004EB2 4E75                       		rts	
00004EB4                            
00004EB4                            
00004EB4                            ; ===========================================================================
00004EB4 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
00004EB6 0080 0000                  		dc.w $80, 0
00004EBA 0080 0000                  		dc.w $80, 0
00004EBE 0080 0000                  		dc.w $80, 0
00004EC2 0080 0000                  		dc.w $80, 0
00004EC6 0080 0000                  		dc.w $80, 0
00004ECA 0080 0000                  		dc.w $80, 0
00004ECE 0080 0000                  		dc.w $80, 0
00004ED2 0080 0000                  		dc.w $80, 0
00004ED6 0080 0000                  		dc.w $80, 0
00004EDA 50F0 011E                  		dc.w $50F0, $11E
00004EDE 2080 00B4                  		dc.w $2080, $B4
00004EE2 3080 010E                  		dc.w $3080, $10E
00004EE6 5080 01C2                  		dc.w $5080, $1C2
00004EEA 7080 0276                  		dc.w $7080, $276
00004EEE 0080 0000                  		dc.w $80, 0
00004EF2 0080 0000                  		dc.w $80, 0
00004EF6                            		even
00004EF6                            
00004EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EF6                            
00004EF6                            ; Oscillate values
00004EF6                            
00004EF6                            OscillateNumDo:
00004EF6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EFC 6400                       		bcc.s	@end		; if yes, branch
00004EFE 43F8 FE5E                  		lea	(v_oscillate).w,a1
00004F02 45F9 0000 0000             		lea	(@settings).l,a2
00004F08 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00004F0A 720F                       		moveq	#$F,d1
00004F0C                            
00004F0C                            @loop:
00004F0C 341A                       		move.w	(a2)+,d2	; get frequency
00004F0E 381A                       		move.w	(a2)+,d4	; get amplitude
00004F10 0303                       		btst	d1,d3		; check oscillation direction
00004F12 6600                       		bne.s	@down		; branch if 1
00004F14                            
00004F14                            	@up:
00004F14 3029 0002                  		move.w	2(a1),d0	; get current rate
00004F18 D042                       		add.w	d2,d0		; add frequency
00004F1A 3340 0002                  		move.w	d0,2(a1)
00004F1E D151                       		add.w	d0,0(a1)	; add rate to value
00004F20 B811                       		cmp.b	0(a1),d4
00004F22 6200                       		bhi.s	@next
00004F24 03C3                       		bset	d1,d3
00004F26 6000                       		bra.s	@next
00004F28                            
00004F28                            	@down:
00004F28 3029 0002                  		move.w	2(a1),d0
00004F2C 9042                       		sub.w	d2,d0
00004F2E 3340 0002                  		move.w	d0,2(a1)
00004F32 D151                       		add.w	d0,0(a1)
00004F34 B811                       		cmp.b	0(a1),d4
00004F36 6300                       		bls.s	@next
00004F38 0383                       		bclr	d1,d3
00004F3A                            
00004F3A                            	@next:
00004F3A 5849                       		addq.w	#4,a1
00004F3C 51C9 FFCE                  		dbf	d1,@loop
00004F40 31C3 FE5E                  		move.w	d3,(v_oscillate).w
00004F44                            
00004F44                            @end:
00004F44 4E75                       		rts	
00004F46                            ; End of function OscillateNumDo
00004F46                            
00004F46                            ; ===========================================================================
00004F46 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00004F4A 0002 0018                  		dc.w 2,	$18
00004F4E 0002 0020                  		dc.w 2,	$20
00004F52 0002 0030                  		dc.w 2,	$30
00004F56 0004 0020                  		dc.w 4,	$20
00004F5A 0008 0008                  		dc.w 8,	8
00004F5E 0008 0040                  		dc.w 8,	$40
00004F62 0004 0040                  		dc.w 4,	$40
00004F66 0002 0050                  		dc.w 2,	$50
00004F6A 0002 0050                  		dc.w 2,	$50
00004F6E 0002 0020                  		dc.w 2,	$20
00004F72 0003 0030                  		dc.w 3,	$30
00004F76 0005 0050                  		dc.w 5,	$50
00004F7A 0007 0070                  		dc.w 7,	$70
00004F7E 0002 0010                  		dc.w 2,	$10
00004F82 0002 0010                  		dc.w 2,	$10
00004F86                            		even
00004F86                            		even
00004F86                            
00004F86                            ; ---------------------------------------------------------------------------
00004F86                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00004F86                            ; ---------------------------------------------------------------------------
00004F86                            
00004F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F86                            
00004F86                            
00004F86                            SynchroAnimate:
00004F86                            
00004F86                            ; Used for GHZ spiked log
00004F86                            Sync1:
00004F86 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00004F8A 6A00                       		bpl.s	Sync2		; if not, branch
00004F8C 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00004F92 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00004F96 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00004F9C                            
00004F9C                            ; Used for rings and giant rings
00004F9C                            Sync2:
00004F9C 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00004FA0 6A00                       		bpl.s	Sync3
00004FA2 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00004FA8 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00004FAC 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00004FB2                            
00004FB2                            ; Used for nothing
00004FB2                            Sync3:
00004FB2 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
00004FB6 6A00                       		bpl.s	Sync4
00004FB8 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00004FBE 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00004FC2 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00004FC8 6500                       		blo.s	Sync4
00004FCA 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00004FD0                            
00004FD0                            ; Used for bouncing rings
00004FD0                            Sync4:
00004FD0 4A38 FEC6                  		tst.b	(v_ani3_time).w
00004FD4 6700                       		beq.s	SyncEnd
00004FD6 7000                       		moveq	#0,d0
00004FD8 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00004FDC D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00004FE0 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00004FE4 EF58                       		rol.w	#7,d0
00004FE6 0240 0003                  		andi.w	#3,d0
00004FEA 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00004FEE 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00004FF2                            
00004FF2                            SyncEnd:
00004FF2 4E75                       		rts	
00004FF4                            ; End of function SynchroAnimate
00004FF4                            
00004FF4                            ; ---------------------------------------------------------------------------
00004FF4                            ; End-of-act signpost pattern loading subroutine
00004FF4                            ; ---------------------------------------------------------------------------
00004FF4                            
00004FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FF4                            
00004FF4                            
00004FF4                            SignpostArtLoad:
00004FF4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004FF8 6600 0000                  		bne.w	@exit		; if yes, branch
00004FFC 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005002 6700                       		beq.s	@exit		; if yes, branch
00005004                            
00005004 3038 F700                  		move.w	(v_screenposx).w,d0
00005008 3238 F72A                  		move.w	(v_limitright2).w,d1
0000500C 0441 0100                  		subi.w	#$100,d1
00005010 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005012 6D00                       		blt.s	@exit		; if not, branch
00005014 4A38 FE1E                  		tst.b	(f_timecount).w
00005018 6700                       		beq.s	@exit
0000501A B278 F728                  		cmp.w	(v_limitleft2).w,d1
0000501E 6700                       		beq.s	@exit
00005020 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005024 7000                       		moveq	#plcid_Signpost,d0
00005026 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
0000502A                            
0000502A                            	@exit:
0000502A 4E75                       		rts	
0000502C                            ; End of function SignpostArtLoad
0000502C                            
0000502C                            ; ===========================================================================
0000502C                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
000050AC                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000051DC                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
0000525C                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
0000535C                            ; ===========================================================================
0000535C                            
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            ; Special Stage
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            
0000535C                            GM_Special:
00005364 6100 CCC2                  		bsr.w	PaletteWhiteOut
00005368 46FC 2700                  		disable_ints
0000536C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005372 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005376 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000537A 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005380 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005384 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005388 0200 00BF                  		andi.b	#$BF,d0
0000538C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005392 6100 BB68                  		bsr.w	ClearScreen
00005396 46FC 2300                  		enable_ints
0000539A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000053BC                            
000053BC                            	SS_WaitForDMA:
000053BC 3215                       		move.w	(a5),d1		; read control port ($C00004)
000053BE 0801 0001                  		btst	#1,d1		; is DMA running?
000053C2 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000053C4 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000053C8 6100 0000                  		bsr.w	SS_BGLoad
000053CC 7000                       		moveq	#plcid_SpecialStage,d0
000053CE 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
000053D2                            
000053D2 43F8 D000                  		lea	(v_objspace).w,a1
000053D6 7000                       		moveq	#0,d0
000053D8 323C 07FF                  		move.w	#$7FF,d1
000053DC                            	SS_ClrObjRam:
000053DC 22C0                       		move.l	d0,(a1)+
000053DE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000053E2                            
000053E2 43F8 F700                  		lea	(v_screenposx).w,a1
000053E6 7000                       		moveq	#0,d0
000053E8 323C 003F                  		move.w	#$3F,d1
000053EC                            	SS_ClrRam1:
000053EC 22C0                       		move.l	d0,(a1)+
000053EE 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000053F2                            
000053F2 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000053F6 7000                       		moveq	#0,d0
000053F8 323C 0027                  		move.w	#$27,d1
000053FC                            	SS_ClrRam2:
000053FC 22C0                       		move.l	d0,(a1)+
000053FE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005402                            
00005402 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00005406 7000                       		moveq	#0,d0
00005408 323C 007F                  		move.w	#$7F,d1
0000540C                            	SS_ClrNemRam:
0000540C 22C0                       		move.l	d0,(a1)+
0000540E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005412                            
00005412 4238 F64E                  		clr.b	(f_wtr_state).w
00005416 4278 FE02                  		clr.w	(f_restart).w
0000541A 700A                       		moveq	#palid_Special,d0
0000541C 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
00005420 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005426 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
0000542E 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005436 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
0000543C 6100 0000                  		bsr.w	PalCycle_SS
00005440 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
00005444 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
00005452 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005458 43F9 0000 4E08             		lea	(DemoDataPtr).l,a1
0000545E 7006                       		moveq	#6,d0
00005460 E548                       		lsl.w	#2,d0
00005462 2271 0000                  		movea.l	(a1,d0.w),a1
00005466 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
0000546C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005470 4278 FE20                  		clr.w	(v_rings).w
00005474 4238 FE1B                  		clr.b	(v_lifecount).w
00005478 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
0000547E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005484 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005488 6700                       		beq.s	SS_NoDebug	; if not, branch
0000548A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005490 6700                       		beq.s	SS_NoDebug	; if not, branch
00005492 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005498                            
00005498                            	SS_NoDebug:
00005498 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000549C 0000 0040                  		ori.b	#$40,d0
000054A0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000054A6 6100 CAD4                  		bsr.w	PaletteWhiteIn
000054AA                            
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            ; Main Special Stage loop
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            
000054AA                            SS_MainLoop:
000054AA 6100 BB2C                  		bsr.w	PauseGame
000054AE 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
000054B4 6100 E2C6                  		bsr.w	WaitForVBla
000054B8 6100 F89E                  		bsr.w	MoveSonicInDemo
000054BC 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000054C2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000054C8 4EB9 0000 0000             		jsr	(BuildSprites).l
000054CE 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000054D4 6100 0000                  		bsr.w	SS_BGAnimate
000054D8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000054DC 6700                       		beq.s	SS_ChkEnd	; if not, branch
000054DE 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000054E2 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000054E6                            
000054E6                            	SS_ChkEnd:
000054E6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000054EC 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000054F0                            
000054F0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000054F4 6600 0000                  		bne.w	SS_ToLevel
000054F8 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000054FE 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005504 6500                       		blo.s	SS_Finish	; if not, branch
00005506 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000550A                            
0000550A                            SS_Finish:
0000550A 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005516 4278 F794                  		clr.w	(v_palchgspeed).w
0000551A                            
0000551A                            	SS_FinLoop:
0000551A 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005520 6100 E25A                  		bsr.w	WaitForVBla
00005524 6100 F832                  		bsr.w	MoveSonicInDemo
00005528 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000552E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005534 4EB9 0000 0000             		jsr	(BuildSprites).l
0000553A 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005540 6100 0000                  		bsr.w	SS_BGAnimate
00005544 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005548 6A00                       		bpl.s	loc_47D4
0000554A 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00005550 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
00005554                            
00005554                            loc_47D4:
00005554 4A78 F614                  		tst.w	(v_demolength).w
00005558 66C0                       		bne.s	SS_FinLoop
0000555A                            
0000555A 46FC 2700                  		disable_ints
0000555E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005564 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005568 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000556C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005570 6100 B98A                  		bsr.w	ClearScreen
0000557E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005584 6100 BAF4                  		bsr.w	NemDec
00005588 4EB9 0000 0000             		jsr	(Hud_Base).l
0000558E 31FC C800 C8FC             		ResetDMAQueue	
00005594 46FC 2300                  		enable_ints
00005598 7011                       		moveq	#palid_SSResult,d0
0000559A 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
0000559E 7000                       		moveq	#plcid_Main,d0
000055A0 6100 BEF6                  		bsr.w	NewPLC
000055A4 7000                       		moveq	#plcid_SSResult,d0
000055A6 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
000055AA 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
000055B0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
000055B6 3038 FE20                  		move.w	(v_rings).w,d0
000055BA C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000055BE 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
000055CC                            
000055CC 43F8 D000                  		lea	(v_objspace).w,a1
000055D0 7000                       		moveq	#0,d0
000055D2 323C 07FF                  		move.w	#$7FF,d1
000055D6                            	SS_EndClrObjRam:
000055D6 22C0                       		move.l	d0,(a1)+
000055D8 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000055DC                            
000055DC 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
000055E2                            
000055E2                            SS_NormalExit:
000055E2 6100 B9F4                  		bsr.w	PauseGame
000055E6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000055EC 6100 E18E                  		bsr.w	WaitForVBla
000055F0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000055F6 4EB9 0000 0000             		jsr	(BuildSprites).l
000055FC 6100 BED4                  		bsr.w	RunPLC
00005600 4A78 FE02                  		tst.w	(f_restart).w
00005604 67DC                       		beq.s	SS_NormalExit
00005606 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000560A 66D6                       		bne.s	SS_NormalExit
00005614 6100 CA12                  		bsr.w	PaletteWhiteOut
00005618 4E75                       		rts	
0000561A                            ; ===========================================================================
0000561A                            
0000561A                            SS_ToSegaScreen:
0000561A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005620 4E75                       		rts
00005622                            
00005622 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005628 67F0                       		beq.s	SS_ToSegaScreen
0000562A 4E75                       		rts
0000562C                            
0000562C                            ; ---------------------------------------------------------------------------
0000562C                            ; Special stage	background loading subroutine
0000562C                            ; ---------------------------------------------------------------------------
0000562C                            
0000562C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000562C                            
0000562C                            
0000562C                            SS_BGLoad:
0000562C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005632 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005638 303C 4051                  		move.w	#$4051,d0
0000563C 6100 BFC6                  		bsr.w	EniDec
00005640 263C 5000 0001             		move.l	#$50000001,d3
00005646 45F9 00FF 0080             		lea	($FF0080).l,a2
0000564C 7E06                       		moveq	#6,d7
0000564E                            
0000564E                            loc_48BE:
0000564E 2003                       		move.l	d3,d0
00005650 7C03                       		moveq	#3,d6
00005652 7800                       		moveq	#0,d4
00005654 0C47 0003                  		cmpi.w	#3,d7
00005658 6400                       		bhs.s	loc_48CC
0000565A 7801                       		moveq	#1,d4
0000565C                            
0000565C                            loc_48CC:
0000565C 7A07                       		moveq	#7,d5
0000565E                            
0000565E                            loc_48CE:
0000565E 224A                       		movea.l	a2,a1
00005660 0A04 0001                  		eori.b	#1,d4
00005664 6600                       		bne.s	loc_48E2
00005666 0C47 0006                  		cmpi.w	#6,d7
0000566A 6600                       		bne.s	loc_48F2
0000566C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005672                            
00005672                            loc_48E2:
00005672 48E7 F800                  		movem.l	d0-d4,-(sp)
00005676 7207                       		moveq	#7,d1
00005678 7407                       		moveq	#7,d2
0000567A 6100 B9D4                  		bsr.w	TilemapToVRAM
0000567E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005682                            
00005682                            loc_48F2:
00005682 0680 0010 0000             		addi.l	#$100000,d0
00005688 51CD FFD4                  		dbf	d5,loc_48CE
0000568C 0680 0380 0000             		addi.l	#$3800000,d0
00005692 0A04 0001                  		eori.b	#1,d4
00005696 51CE FFC4                  		dbf	d6,loc_48CC
0000569A 0683 1000 0000             		addi.l	#$10000000,d3
000056A0 6A00                       		bpl.s	loc_491C
000056A2 4843                       		swap	d3
000056A4 0683 0000 C000             		addi.l	#$C000,d3
000056AA 4843                       		swap	d3
000056AC                            
000056AC                            loc_491C:
000056AC D4FC 0080                  		adda.w	#$80,a2
000056B0 51CF FF9C                  		dbf	d7,loc_48BE
000056B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000056BA 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000056C0 303C 4000                  		move.w	#$4000,d0
000056C4 6100 BF3E                  		bsr.w	EniDec
000056C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000056CE 203C 4000 0003             		move.l	#$40000003,d0
000056D4 723F                       		moveq	#$3F,d1
000056D6 741F                       		moveq	#$1F,d2
000056D8 6100 B976                  		bsr.w	TilemapToVRAM
000056DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000056E2 203C 5000 0003             		move.l	#$50000003,d0
000056E8 723F                       		moveq	#$3F,d1
000056EA 743F                       		moveq	#$3F,d2
000056EC 6100 B962                  		bsr.w	TilemapToVRAM
000056F0 4E75                       		rts	
000056F2                            ; End of function SS_BGLoad
000056F2                            
000056F2                            ; ---------------------------------------------------------------------------
000056F2                            ; Palette cycling routine - special stage
000056F2                            ; ---------------------------------------------------------------------------
000056F2                            
000056F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056F2                            
000056F2                            
000056F2                            PalCycle_SS:
000056F2 4A78 F63A                  		tst.w	(f_pause).w
000056F6 6600                       		bne.s	locret_49E6
000056F8 5378 F79C                  		subq.w	#1,(v_palss_time).w
000056FC 6A00                       		bpl.s	locret_49E6
000056FE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005704 3038 F79A                  		move.w	(v_palss_num).w,d0
00005708 5278 F79A                  		addq.w	#1,(v_palss_num).w
0000570C 0240 001F                  		andi.w	#$1F,d0
00005710 E548                       		lsl.w	#2,d0
00005712 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005718 D0C0                       		adda.w	d0,a0
0000571A 1018                       		move.b	(a0)+,d0
0000571C 6A00                       		bpl.s	loc_4992
0000571E 303C 01FF                  		move.w	#$1FF,d0
00005722                            
00005722                            loc_4992:
00005722 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005726 7000                       		moveq	#0,d0
00005728 1018                       		move.b	(a0)+,d0
0000572A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000572E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005734 43F1 0000                  		lea	(a1,d0.w),a1
00005738 303C 8200                  		move.w	#-$7E00,d0
0000573C 1019                       		move.b	(a1)+,d0
0000573E 3C80                       		move.w	d0,(a6)
00005740 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005744 303C 8400                  		move.w	#-$7C00,d0
00005748 1018                       		move.b	(a0)+,d0
0000574A 3C80                       		move.w	d0,(a6)
0000574C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005756 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
0000575E 7000                       		moveq	#0,d0
00005760 1018                       		move.b	(a0)+,d0
00005762 6B00                       		bmi.s	loc_49E8
00005764 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000576A D2C0                       		adda.w	d0,a1
0000576C 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005770 24D9                       		move.l	(a1)+,(a2)+
00005772 24D9                       		move.l	(a1)+,(a2)+
00005774 24D9                       		move.l	(a1)+,(a2)+
00005776                            
00005776                            locret_49E6:
00005776 4E75                       		rts	
00005778                            ; ===========================================================================
00005778                            
00005778                            loc_49E8:
00005778 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000577C 0C40 008A                  		cmpi.w	#$8A,d0
00005780 6500                       		blo.s	loc_49F4
00005782 5241                       		addq.w	#1,d1
00005784                            
00005784                            loc_49F4:
00005784 C2FC 002A                  		mulu.w	#$2A,d1
00005788 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000578E D2C1                       		adda.w	d1,a1
00005790 0240 007F                  		andi.w	#$7F,d0
00005794 0880 0000                  		bclr	#0,d0
00005798 6700                       		beq.s	loc_4A18
0000579A 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
0000579E 24D1                       		move.l	(a1),(a2)+
000057A0 24E9 0004                  		move.l	4(a1),(a2)+
000057A4 24E9 0008                  		move.l	8(a1),(a2)+
000057A8                            
000057A8                            loc_4A18:
000057A8 D2FC 000C                  		adda.w	#$C,a1
000057AC 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
000057B0 0C40 000A                  		cmpi.w	#$A,d0
000057B4 6500                       		blo.s	loc_4A2E
000057B6 0440 000A                  		subi.w	#$A,d0
000057BA 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
000057BE                            
000057BE                            loc_4A2E:
000057BE 3200                       		move.w	d0,d1
000057C0 D040                       		add.w	d0,d0
000057C2 D041                       		add.w	d1,d0
000057C4 D2C0                       		adda.w	d0,a1
000057C6 24D9                       		move.l	(a1)+,(a2)+
000057C8 34D9                       		move.w	(a1)+,(a2)+
000057CA 4E75                       		rts	
000057CC                            ; End of function PalCycle_SS
000057CC                            
000057CC                            ; ===========================================================================
000057CC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000057DC                            
000057DC 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000057EC 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000057FC FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000580C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000581C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000582C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000583C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000584C                            		even
0000584C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000585A                            		even
0000585A                            
0000585A                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
000058A2                            		even
000058A2                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005974                            		even
00005974                            
00005974                            ; ---------------------------------------------------------------------------
00005974                            ; Subroutine to	make the special stage background animated
00005974                            ; ---------------------------------------------------------------------------
00005974                            
00005974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005974                            
00005974                            
00005974                            SS_BGAnimate:
00005974 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005978 6600                       		bne.s	loc_4BF6
0000597A 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005980 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005986                            
00005986                            loc_4BF6:
00005986 0C40 0008                  		cmpi.w	#8,d0
0000598A 6400                       		bhs.s	loc_4C4E
0000598C 0C40 0006                  		cmpi.w	#6,d0
00005990 6600                       		bne.s	loc_4C10
00005992 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005996 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
0000599A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000059A0                            
000059A0                            loc_4C10:
000059A0 7000                       		moveq	#0,d0
000059A2 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000059A6 4440                       		neg.w	d0
000059A8 4840                       		swap	d0
000059AA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000059B0 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
000059B4 7609                       		moveq	#9,d3
000059B6                            
000059B6                            loc_4C26:
000059B6 302B 0002                  		move.w	2(a3),d0
000059BA 6100 DDF2                  		bsr.w	CalcSine
000059BE 7400                       		moveq	#0,d2
000059C0 1419                       		move.b	(a1)+,d2
000059C2 C1C2                       		muls.w	d2,d0
000059C4 E080                       		asr.l	#8,d0
000059C6 36C0                       		move.w	d0,(a3)+
000059C8 1419                       		move.b	(a1)+,d2
000059CA 4882                       		ext.w	d2
000059CC D55B                       		add.w	d2,(a3)+
000059CE 51CB FFE6                  		dbf	d3,loc_4C26
000059D2 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
000059D6 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000059DC 6000                       		bra.s	loc_4C7E
000059DE                            ; ===========================================================================
000059DE                            
000059DE                            loc_4C4E:
000059DE 0C40 000C                  		cmpi.w	#$C,d0
000059E2 6600                       		bne.s	loc_4C74
000059E4 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
000059E8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059EC 243C 0001 8000             		move.l	#$18000,d2
000059F2 7206                       		moveq	#6,d1
000059F4                            
000059F4                            loc_4C64:
000059F4 2013                       		move.l	(a3),d0
000059F6 9082                       		sub.l	d2,d0
000059F8 26C0                       		move.l	d0,(a3)+
000059FA 0482 0000 2000             		subi.l	#$2000,d2
00005A00 51C9 FFF2                  		dbf	d1,loc_4C64
00005A04                            
00005A04                            loc_4C74:
00005A04 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005A08 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005A0E                            
00005A0E                            loc_4C7E:
00005A0E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005A12 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005A16 4440                       		neg.w	d0
00005A18 4840                       		swap	d0
00005A1A 7600                       		moveq	#0,d3
00005A1C 161A                       		move.b	(a2)+,d3
00005A1E 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005A22 4442                       		neg.w	d2
00005A24 0242 00FF                  		andi.w	#$FF,d2
00005A28 E54A                       		lsl.w	#2,d2
00005A2A                            
00005A2A                            loc_4C9A:
00005A2A 301B                       		move.w	(a3)+,d0
00005A2C 544B                       		addq.w	#2,a3
00005A2E 7200                       		moveq	#0,d1
00005A30 121A                       		move.b	(a2)+,d1
00005A32 5341                       		subq.w	#1,d1
00005A34                            
00005A34                            loc_4CA4:
00005A34 2380 2000                  		move.l	d0,(a1,d2.w)
00005A38 5842                       		addq.w	#4,d2
00005A3A 0242 03FC                  		andi.w	#$3FC,d2
00005A3E 51C9 FFF4                  		dbf	d1,loc_4CA4
00005A42 51CB FFE6                  		dbf	d3,loc_4C9A
00005A46 4E75                       		rts	
00005A48                            ; End of function SS_BGAnimate
00005A48                            
00005A48                            ; ===========================================================================
00005A48 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005A54                            		even
00005A54 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005A5C                            		even
00005A5C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005A70                            		even
00005A70                            
00005A70                            ; ===========================================================================
00005A70                            
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            ; Continue screen
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            
00005A70                            GM_Continue:
00005A70 6100 C48C                  		bsr.w	PaletteFadeOut
00005A74 46FC 2700                  		disable_ints
00005A78 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005A7C 0200 00BF                  		andi.b	#$BF,d0
00005A80 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005A86 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A8C 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005A90 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005A94 6100 B466                  		bsr.w	ClearScreen
00005A98 31FC C800 C8FC             		ResetDMAQueue
00005A9E 43F8 D000                  		lea	(v_objspace).w,a1
00005AA2 7000                       		moveq	#0,d0
00005AA4 323C 07FF                  		move.w	#$7FF,d1
00005AA8                            	Cont_ClrObjRam:
00005AA8 22C0                       		move.l	d0,(a1)+
00005AAA 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005AAE                            
00005AB8 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005ABE 6100 B5BA                  		bsr.w	NemDec
00005ACC 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005AD2 6100 B5A6                  		bsr.w	NemDec
00005AE0 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005AE6 6100 B592                  		bsr.w	NemDec
00005AEA 720A                       		moveq	#10,d1
00005AEC 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005AF2 7012                       		moveq	#palid_Continue,d0
00005AF4 6100 C6B2                  		bsr.w	PalLoad1	; load continue	screen palette
00005B00 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005B06 42B8 F700                  		clr.l	(v_screenposx).w
00005B0A 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005B12 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005B18 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005B1E 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005B24 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005B2A 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005B30 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005B36 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005B3C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B42 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B48 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005B4C 0000 0040                  		ori.b	#$40,d0
00005B50 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005B56 6100 C300                  		bsr.w	PaletteFadeIn
00005B5A                            
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            ; Continue screen main loop
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            
00005B5A                            Cont_MainLoop:
00005B5A 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005B60 6100 DC1A                  		bsr.w	WaitForVBla
00005B64 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005B6A 6400                       		bhs.s	loc_4DF2
00005B6C 46FC 2700                  		disable_ints
00005B70 3238 F614                  		move.w	(v_demolength).w,d1
00005B74 82FC 003C                  		divu.w	#$3C,d1
00005B78 0281 0000 000F             		andi.l	#$F,d1
00005B7E 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005B84 46FC 2300                  		enable_ints
00005B88                            
00005B88                            loc_4DF2:
00005B88 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B8E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B94 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005B9A 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005B9C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005BA2 64B6                       		bhs.s	Cont_MainLoop
00005BA4 4A78 F614                  		tst.w	(v_demolength).w
00005BA8 6600 FFB0                  		bne.w	Cont_MainLoop
00005BAC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005BB2 4E75                       		rts	
00005BB4                            ; ===========================================================================
00005BB4                            
00005BB4                            Cont_GotoLevel:
00005BB4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005BBA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005BC0 7000                       		moveq	#0,d0
00005BC2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005BC6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005BCA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005BCE 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005BD2 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005BD6 4E75                       		rts	
00005BD8                            ; ===========================================================================
00005BD8                            
00005BD8                            		include	"_incObj\80 Continue Screen Elements.asm"
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            ; Object 80 - Continue screen elements
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            
00005BD8                            ContScrItem:
00005BD8 7000                       		moveq	#0,d0
00005BDA 1028 0024                  		move.b	$24(a0),d0
00005BDE 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005BE2 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005BE6                            ; ===========================================================================
00005BE6 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005BE8 0000                       		dc.w CSI_Display-CSI_Index
00005BEA 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005BEC 0000                       		dc.w CSI_ChkDel-CSI_Index
00005BEE                            ; ===========================================================================
00005BEE                            
00005BEE                            CSI_Main:	; Routine 0
00005BEE 5428 0024                  		addq.b	#2,obRoutine(a0)
00005BF2 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005BFA 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005C00 117C 0000 0001             		move.b	#0,obRender(a0)
00005C06 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005C0C 317C 0120 0008             		move.w	#$120,obX(a0)
00005C12 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005C18 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005C1E                            
00005C1E                            CSI_Display:	; Routine 2
00005C1E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005C24                            ; ===========================================================================
00005C24                            
00005C24                            	CSI_MiniSonicPos:
00005C24 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005C36 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005C42                            
00005C42                            CSI_MakeMiniSonic:
00005C42                            		; Routine 4
00005C42 2248                       		movea.l	a0,a1
00005C44 45F9 0000 5C24             		lea	(CSI_MiniSonicPos).l,a2
00005C4A 7200                       		moveq	#0,d1
00005C4C 1238 FE18                  		move.b	(v_continues).w,d1
00005C50 5501                       		subq.b	#2,d1
00005C52 6400                       		bcc.s	CSI_MoreThan1
00005C54 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005C5A                            
00005C5A                            	CSI_MoreThan1:
00005C5A 7601                       		moveq	#1,d3
00005C5C 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005C60 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005C62                            
00005C62 7600                       		moveq	#0,d3
00005C64 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005C66                            
00005C66                            	CSI_FewerThan16:
00005C66 1401                       		move.b	d1,d2
00005C68 0202 0001                  		andi.b	#1,d2
00005C6C                            
00005C6C                            CSI_MiniSonicLoop:
00005C6C 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005C70 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005C74 4A02                       		tst.b	d2		; do you have an even number of continues?
00005C76 6700                       		beq.s	CSI_Even	; if yes, branch
00005C78 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005C7E                            
00005C7E                            	CSI_Even:
00005C7E 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005C84 137C 0006 001A             		move.b	#6,obFrame(a1)
00005C8A 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005C90 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005C98 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005C9E 137C 0000 0001             		move.b	#0,obRender(a1)
00005CA4 43E9 0040                  		lea	$40(a1),a1
00005CA8 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005CAC                            
00005CAC 43E9 FFC0                  		lea	-$40(a1),a1
00005CB0 1343 0028                  		move.b	d3,obSubtype(a1)
00005CB4                            
00005CB4                            CSI_ChkDel:	; Routine 6
00005CB4 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005CB8 6700                       		beq.s	CSI_Animate	; if yes, branch
00005CBA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005CC0 6500                       		bcs.s	CSI_Animate	; if not, branch
00005CC2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005CC6 0200 0001                  		andi.b	#1,d0
00005CCA 6600                       		bne.s	CSI_Animate
00005CCC 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005CD0 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005CD2 4E75                       		rts	
00005CD4                            
00005CD4                            CSI_Animate:
00005CD4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005CD8 0200 000F                  		andi.b	#$F,d0
00005CDC 6600                       		bne.s	CSI_Display2
00005CDE 0868 0000 001A             		bchg	#0,obFrame(a0)
00005CE4                            
00005CE4                            	CSI_Display2:
00005CE4 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005CEA                            ; ===========================================================================
00005CEA                            
00005CEA                            CSI_Delete:
00005CEA 4EF9 0000 0000             		jmp	(DeleteObject).l
00005CEA 4EF9 0000 0000             		jmp	(DeleteObject).l
00005CF0                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; Object 81 - Sonic on the continue screen
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            
00005CF0                            ContSonic:
00005CF0 7000                       		moveq	#0,d0
00005CF2 1028 0024                  		move.b	obRoutine(a0),d0
00005CF6 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005CFA 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005CFE 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005D04                            ; ===========================================================================
00005D04 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005D06 0000                       		dc.w CSon_ChkLand-CSon_Index
00005D08 0000                       		dc.w CSon_Animate-CSon_Index
00005D0A 0000                       		dc.w CSon_Run-CSon_Index
00005D0C                            ; ===========================================================================
00005D0C                            
00005D0C                            CSon_Main:	; Routine 0
00005D0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D10 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005D16 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005D1C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005D24 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005D2A 117C 0004 0001             		move.b	#4,obRender(a0)
00005D30 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005D36 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005D3C 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005D42                            
00005D42                            CSon_ChkLand:	; Routine 2
00005D42 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005D48 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005D4A                            
00005D4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D4E 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005D52 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005D5A 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005D60 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005D66 6000                       		bra.s	CSon_Animate
00005D68                            
00005D68                            CSon_ShowFall:
00005D68 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005D6E 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005D74 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005D7A                            ; ===========================================================================
00005D7A                            
00005D7A                            CSon_Animate:	; Routine 4
00005D7A 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005D7E 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005D80 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005D86 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005D8C                            
00005D8C                            CSon_GetUp:
00005D8C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D90 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005D98 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005D9E 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005DA4 4268 0020                  		clr.w	obInertia(a0)
00005DA8 5168 000C                  		subq.w	#8,obY(a0)
00005DB4                            
00005DB4                            CSon_Run:	; Routine 6
00005DB4 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00005DBA 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00005DBC 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00005DC2 6000                       		bra.s	CSon_ShowRun
00005DC4                            
00005DC4                            CSon_AddInertia:
00005DC4 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00005DCA                            
00005DCA                            CSon_ShowRun:
00005DCA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005DD0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005DD6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005DD6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005DDC                            		include	"_anim\Continue Screen Sonic.asm"
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            ; Animation script - Sonic on the continue screen
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00005DDE 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
00005DE8                            		even
00005DE8                            		even
00005DE8                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00005DE8                            ; --------------------------------------------------------------------------------
00005DE8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00005DE8                            ; --------------------------------------------------------------------------------
00005DE8                            
00005DE8                            SME_phED7:	
00005DE8 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00005DEC 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00005DF0 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00005DF4 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
00005DF8 0B                         SME_phED7_10:	dc.b $B	
00005DF9 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00005DFE F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00005E03 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
00005E08 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
00005E0D F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
00005E12 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
00005E17 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
00005E1C F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
00005E21 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00005E26 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00005E2B 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
00005E30 03                         SME_phED7_48:	dc.b 3	
00005E31 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
00005E36 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00005E3B F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00005E40 03                         SME_phED7_58:	dc.b 3	
00005E41 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
00005E46 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00005E4B F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00005E50 03                         SME_phED7_68:	dc.b 3	
00005E51 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
00005E56 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00005E5B F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00005E60 02                         SME_phED7_78:	dc.b 2	
00005E61 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
00005E66 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00005E6B 01                         SME_phED7_83:	dc.b 1	
00005E6C 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00005E71 01                         SME_phED7_89:	dc.b 1	
00005E72 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00005E77 01                         SME_phED7_8F:	dc.b 1	
00005E78 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00005E7E 00                         		even
00005E7E 00                         		even
00005E7E                            
00005E7E                            ; ===========================================================================
00005E7E                            ; ---------------------------------------------------------------------------
00005E7E                            ; Ending sequence in Green Hill	Zone
00005E7E                            ; ---------------------------------------------------------------------------
00005E7E                            
00005E7E                            GM_Ending:
00005E86 6100 C076                  		bsr.w	PaletteFadeOut
00005E8A                            
00005E8A 43F8 D000                  		lea	(v_objspace).w,a1
00005E8E 7000                       		moveq	#0,d0
00005E90 323C 07FF                  		move.w	#$7FF,d1
00005E94                            	End_ClrObjRam:
00005E94 22C0                       		move.l	d0,(a1)+
00005E96 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005E9A                            
00005E9A 43F8 F628                  		lea	($FFFFF628).w,a1
00005E9E 7000                       		moveq	#0,d0
00005EA0 323C 0015                  		move.w	#$15,d1
00005EA4                            	End_ClrRam1:
00005EA4 22C0                       		move.l	d0,(a1)+
00005EA6 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00005EAA                            
00005EAA 43F8 F700                  		lea	(v_screenposx).w,a1
00005EAE 7000                       		moveq	#0,d0
00005EB0 323C 003F                  		move.w	#$3F,d1
00005EB4                            	End_ClrRam2:
00005EB4 22C0                       		move.l	d0,(a1)+
00005EB6 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005EBA                            
00005EBA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00005EBE 7000                       		moveq	#0,d0
00005EC0 323C 0047                  		move.w	#$47,d1
00005EC4                            	End_ClrRam3:
00005EC4 22C0                       		move.l	d0,(a1)+
00005EC6 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005ECA                            
00005ECA 46FC 2700                  		disable_ints
00005ECE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005ED2 0200 00BF                  		andi.b	#$BF,d0
00005ED6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005EDC 6100 B01E                  		bsr.w	ClearScreen
00005EE0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005EE6 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005EEA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005EEE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005EF2 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00005EF6 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005EFA 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00005EFE 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00005F02 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00005F08 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00005F0C 31FC 001E FE14             		move.w	#30,(v_air).w
00005F12 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00005F18 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00005F1E 6700                       		beq.s	End_LoadData	; if yes, branch
00005F20 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00005F26                            
00005F26                            End_LoadData:
00005F26 7000                       		moveq	#plcid_Ending,d0
00005F28 6100 B6A8                  		bsr.w	QuickPLC	; load ending sequence patterns
00005F2C 4EB9 0000 0000             		jsr	(Hud_Base).l
00005F32 6100 0000                  		bsr.w	LevelSizeLoad
00005F36 6100 0000                  		bsr.w	DeformLayers
00005F3A 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00005F40 6100 0000                  		bsr.w	LevelDataLoad
00005F44 6100 0000                  		bsr.w	LoadTilesFromStart
00005F48 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
00005F50 46FC 2300                  		enable_ints
00005F54 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005F5A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005F5E 6100 B822                  		bsr.w	KosDec
00005F62 4EB9 0000 0000             		jsr		LoadPlayerPal
00005F68 6100 C23E                  		bsr.w	PalLoad1	; load Sonic's palette
00005F74 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00005F7A 6700                       		beq.s	End_LoadSonic	; if not, branch
00005F7C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005F82                            
00005F82                            End_LoadSonic:
00005F82 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00005F88 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00005F8E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00005F94 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00005F9A 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
00005FA0 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00005FA6 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00005FAC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FB2 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FB8 7000                       		moveq	#0,d0
00005FBA 31C0 FE20                  		move.w	d0,(v_rings).w
00005FBE 21C0 FE22                  		move.l	d0,(v_time).w
00005FC2 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00005FC6 11C0 FE2C                  		move.b	d0,(v_shield).w
00005FCA 11C0 FE2D                  		move.b	d0,(v_invinc).w
00005FCE 11C0 FE2E                  		move.b	d0,(v_shoes).w
00005FD2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005FD6 31C0 FE08                  		move.w	d0,(v_debuguse).w
00005FDA 31C0 FE02                  		move.w	d0,(f_restart).w
00005FDE 31C0 FE04                  		move.w	d0,(v_framecount).w
00005FE2 6100 EEBC                  		bsr.w	OscillateNumInit
00005FE6 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00005FEC 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00005FF2 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00005FF8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005FFE 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006004 6100 D776                  		bsr.w	WaitForVBla
00006008 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000600C 0000 0040                  		ori.b	#$40,d0
00006010 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006016 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000601C 6100 BE3A                  		bsr.w	PaletteFadeIn
00006020                            
00006020                            ; ---------------------------------------------------------------------------
00006020                            ; Main ending sequence loop
00006020                            ; ---------------------------------------------------------------------------
00006020                            
00006020                            End_MainLoop:
00006020 6100 AFB6                  		bsr.w	PauseGame
00006024 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000602A 6100 D750                  		bsr.w	WaitForVBla
0000602E 5278 FE04                  		addq.w	#1,(v_framecount).w
00006032 6100 0000                  		bsr.w	End_MoveSonic
00006036 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000603C 6100 0000                  		bsr.w	DeformLayers
00006040 4EB9 0000 0000             		jsr	(BuildSprites).l
00006046 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000604C 6100 B9FC                  		bsr.w	PaletteCycle
00006050 6100 EEA4                  		bsr.w	OscillateNumDo
00006054 6100 EF30                  		bsr.w	SynchroAnimate
00006058 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
0000605E 6700                       		beq.s	End_ChkEmerald	; if yes, branch
00006060                            
00006060 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
0000606E 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006074 4E75                       		rts	
00006076                            ; ===========================================================================
00006076                            
00006076                            End_ChkEmerald:
00006076 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
0000607A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000607E                            
0000607E 4278 FE02                  		clr.w	(f_restart).w
00006082 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006088 4278 F794                  		clr.w	(v_palchgspeed).w
0000608C                            
0000608C                            	End_AllEmlds:
0000608C 6100 AF4A                  		bsr.w	PauseGame
00006090 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006096 6100 D6E4                  		bsr.w	WaitForVBla
0000609A 5278 FE04                  		addq.w	#1,(v_framecount).w
0000609E 6100 0000                  		bsr.w	End_MoveSonic
000060A2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000060A8 6100 0000                  		bsr.w	DeformLayers
000060AC 4EB9 0000 0000             		jsr	(BuildSprites).l
000060B2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000060B8 6100 EE3C                  		bsr.w	OscillateNumDo
000060BC 6100 EEC8                  		bsr.w	SynchroAnimate
000060C0 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000060C4 6A00                       		bpl.s	End_SlowFade
000060C6 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000060CC 6100 BF7A                  		bsr.w	WhiteOut_ToWhite
000060D0                            
000060D0                            	End_SlowFade:
000060D0 4A78 FE02                  		tst.w	(f_restart).w
000060D4 6700 FFB6                  		beq.w	End_AllEmlds
000060D8 4278 FE02                  		clr.w	(f_restart).w
000060DC 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000060E2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000060E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000060EE 47F8 F700                  		lea	(v_screenposx).w,a3
000060F2 49F8 A400                  		lea	(v_lvllayout).w,a4
000060F6 343C 4000                  		move.w	#$4000,d2
000060FA 6100 0000                  		bsr.w	DrawChunks
000060FE 7013                       		moveq	#palid_Ending,d0
00006100 6100 C0A6                  		bsr.w	PalLoad1	; load ending palette
00006104 6100 BE76                  		bsr.w	PaletteWhiteIn
00006108 6000 FF16                  		bra.w	End_MainLoop
0000610C                            
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            ; Subroutine controlling Sonic on the ending sequence
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            
0000610C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000610C                            
0000610C                            
0000610C                            End_MoveSonic:
0000610C 1038 F7D7                  		move.b	(v_sonicend).w,d0
00006110 6600                       		bne.s	End_MoveSon2
00006112 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006118 6400                       		bhs.s	End_MoveSonExit	; if not, branch
0000611A                            
0000611A 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000611E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006124 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
0000612A 4E75                       		rts	
0000612C                            ; ===========================================================================
0000612C                            
0000612C                            End_MoveSon2:
0000612C 5500                       		subq.b	#2,d0
0000612E 6600                       		bne.s	End_MoveSon3
00006130 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006136 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006138                            
00006138 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000613C 7000                       		moveq	#0,d0
0000613E 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006142 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006146 31C0 D020                  		move.w	d0,(v_player+obInertia).w
0000614A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
00006150 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
00006156 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
0000615C 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
00006162 4E75                       		rts	
00006164                            ; ===========================================================================
00006164                            
00006164                            End_MoveSon3:
00006164 5500                       		subq.b	#2,d0
00006166 6600                       		bne.s	End_MoveSonExit
00006168 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000616C 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006172 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006178 4278 D024                  		clr.w	(v_player+obRoutine).w
0000617C                            
0000617C                            End_MoveSonExit:
0000617C 4E75                       		rts	
0000617E                            ; End of function End_MoveSonic
0000617E                            
0000617E                            ; ===========================================================================
0000617E                            
0000617E                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000617E                            ; ---------------------------------------------------------------------------
0000617E                            ; Object 87 - Sonic on ending sequence
0000617E                            ; ---------------------------------------------------------------------------
0000617E                            
0000617E                            EndSonic:
0000617E 7000                       		moveq	#0,d0
00006180 1028 0025                  		move.b	ob2ndRout(a0),d0
00006184 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006188 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000618C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006192                            ; ===========================================================================
00006192 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006196 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
0000619A 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000619E 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000061A2 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000061A6                            
000061A6 =00000030                  eson_time:	equ $30	; time to wait between events
000061A6                            ; ===========================================================================
000061A6                            
000061A6                            ESon_Main:	; Routine 0
000061A6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000061AC 6700                       		beq.s	ESon_Main2	; if yes, branch
000061AE 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
000061B4 317C 00D8 0030             		move.w	#216,eson_time(a0)
000061BA 4E75                       		rts	
000061BC                            ; ===========================================================================
000061BC                            
000061BC                            ESon_Main2:
000061BC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000061C0 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000061C8 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000061CE 117C 0004 0001             		move.b	#4,obRender(a0)
000061D4 4228 0022                  		clr.b	obStatus(a0)
000061D8 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061DE 117C 0000 001A             		move.b	#0,obFrame(a0)
000061E4 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000061EA                            
000061EA                            ESon_MakeEmeralds:
000061EA                            		; Routine 2
000061EA 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000061EE 6600                       		bne.s	ESon_Wait
000061F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000061F4 317C 0001 001C             		move.w	#1,obAnim(a0)
000061FA 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
00006200                            
00006200                            	ESon_Wait:
00006200 4E75                       		rts	
00006202                            ; ===========================================================================
00006202                            
00006202                            Obj87_LookUp:	; Routine 6
00006202 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
0000620A 6600                       		bne.s	locret_5480
0000620C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006212 317C 005A 0030             		move.w	#90,eson_time(a0)
00006218 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000621C                            
0000621C                            locret_5480:
0000621C 4E75                       		rts	
0000621E                            ; ===========================================================================
0000621E                            
0000621E                            Obj87_ClrObjRam:
0000621E                            		; Routine 8
0000621E 5368 0030                  		subq.w	#1,eson_time(a0)
00006222 6600                       		bne.s	ESon_Wait2
00006224 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006228 323C 00FF                  		move.w	#$FF,d1
0000622C                            
0000622C                            Obj87_ClrLoop:
0000622C 4299                       		clr.l	(a1)+
0000622E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006232 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006238 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000623C 117C 0001 001C             		move.b	#1,obAnim(a0)
00006242 317C 003C 0030             		move.w	#60,eson_time(a0)
00006248                            
00006248                            ESon_Wait2:
00006248 4E75                       		rts	
0000624A                            ; ===========================================================================
0000624A                            
0000624A                            Obj87_MakeLogo:	; Routine $C
0000624A 5368 0030                  		subq.w	#1,eson_time(a0)
0000624E 6600                       		bne.s	ESon_Wait3
00006250 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006254 317C 00B4 0030             		move.w	#180,eson_time(a0)
0000625A 117C 0002 001C             		move.b	#2,obAnim(a0)
00006260 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006266                            
00006266                            ESon_Wait3:
00006266 4E75                       		rts	
00006268                            ; ===========================================================================
00006268                            
00006268                            Obj87_Animate:	; Rountine 4, $A, $E, $12
00006268 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
0000626E 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006274                            ; ===========================================================================
00006274                            
00006274                            Obj87_Leap:	; Routine $10
00006274 5368 0030                  		subq.w	#1,eson_time(a0)
00006278 6600                       		bne.s	ESon_Wait4
0000627A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000627E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006286 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000628C 117C 0004 0001             		move.b	#4,obRender(a0)
00006292 4228 0022                  		clr.b	obStatus(a0)
00006296 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000629C 117C 0005 001A             		move.b	#5,obFrame(a0)
000062A2 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000062A8 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000062AE 60B8                       		bra.s	Obj87_Animate
000062B0                            ; ===========================================================================
000062B0                            
000062B0                            ESon_Wait4:
000062B0 4E75                       		rts	
000062B0 4E75                       		rts	
000062B2                            		include "_anim\Ending Sequence Sonic.asm"
000062B2                            ; ---------------------------------------------------------------------------
000062B2                            ; Animation script - Sonic on the ending sequence
000062B2                            ; ---------------------------------------------------------------------------
000062B2 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
000062B4 0000                       		dc.w byte_552A-AniScript_ESon
000062B6 0000                       		dc.w byte_5534-AniScript_ESon
000062B8 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000062C6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000062D0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000062D8                            		even
000062D8                            		even
000062D8                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            ; Object 88 - chaos emeralds on	the ending sequence
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            
000062D8                            EndChaos:
000062D8 7000                       		moveq	#0,d0
000062DA 1028 0024                  		move.b	obRoutine(a0),d0
000062DE 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000062E2 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000062E6 4EF9 0000 0000             		jmp	(DisplaySprite).l
000062EC                            ; ===========================================================================
000062EC 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000062EE 0000                       		dc.w ECha_Move-ECha_Index
000062F0                            
000062F0 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000062F0 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000062F0 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000062F0 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000062F0                            ; ===========================================================================
000062F0                            
000062F0                            ECha_Main:	; Routine 0
000062F0 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000062F6 6700                       		beq.s	ECha_CreateEms
000062F8 588F                       		addq.l	#4,sp
000062FA 4E75                       		rts	
000062FC                            ; ===========================================================================
000062FC                            
000062FC                            ECha_CreateEms:
000062FC 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006302 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006308 2248                       		movea.l	a0,a1
0000630A 7600                       		moveq	#0,d3
0000630C 7401                       		moveq	#1,d2
0000630E 7205                       		moveq	#5,d1
00006310                            
00006310                            	ECha_LoadLoop:
00006310 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006314 5429 0024                  		addq.b	#2,obRoutine(a1)
00006318 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006320 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006326 137C 0004 0001             		move.b	#4,obRender(a1)
0000632C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006332 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006338 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
0000633E 1342 001C                  		move.b	d2,obAnim(a1)
00006342 1342 001A                  		move.b	d2,obFrame(a1)
00006346 5202                       		addq.b	#1,d2
00006348 1343 0026                  		move.b	d3,obAngle(a1)
0000634C 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
00006350 43E9 0040                  		lea	$40(a1),a1
00006354 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
00006358                            
00006358                            ECha_Move:	; Routine 2
00006358 3028 003E                  		move.w	echa_angle(a0),d0
0000635C D168 0026                  		add.w	d0,obAngle(a0)
00006360 1028 0026                  		move.b	obAngle(a0),d0
00006364 4EB9 0000 37AE             		jsr	(CalcSine).l
0000636A 7800                       		moveq	#0,d4
0000636C 1828 003C                  		move.b	echa_radius(a0),d4
00006370 C3C4                       		muls.w	d4,d1
00006372 E081                       		asr.l	#8,d1
00006374 C1C4                       		muls.w	d4,d0
00006376 E080                       		asr.l	#8,d0
00006378 D268 0038                  		add.w	echa_origX(a0),d1
0000637C D068 003A                  		add.w	echa_origY(a0),d0
00006380 3141 0008                  		move.w	d1,obX(a0)
00006384 3140 000C                  		move.w	d0,obY(a0)
00006388                            
00006388                            	ECha_Expand:
00006388 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000638E 6700                       		beq.s	ECha_Rotate
00006390 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006396                            
00006396                            	ECha_Rotate:
00006396 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000639C 6700                       		beq.s	ECha_Rise
0000639E 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000063A4                            
000063A4                            	ECha_Rise:
000063A4 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000063AA 6700                       		beq.s	ECha_End
000063AC 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000063B0                            
000063B0                            ECha_End:
000063B0 4E75                       		rts	
000063B0 4E75                       		rts	
000063B2                            		include	"_incObj\89 Ending Sequence STH.asm"
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            
000063B2                            EndSTH:
000063B2 7000                       		moveq	#0,d0
000063B4 1028 0024                  		move.b	$24(a0),d0
000063B8 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
000063BC 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000063C0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063C6                            ; ===========================================================================
000063C6 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000063C8 0000                       		dc.w ESth_Move-ESth_Index
000063CA 0000                       		dc.w ESth_GotoCredits-ESth_Index
000063CC                            
000063CC =00000030                  esth_time:	equ $30		; time until exit
000063CC                            ; ===========================================================================
000063CC                            
000063CC                            ESth_Main:	; Routine 0
000063CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000063D0 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000063D6 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000063DC 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000063E4 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000063EA 117C 0000 0001             		move.b	#0,obRender(a0)
000063F0 317C 0000 0018             		move.w	#0,obPriority(a0)
000063F6                            
000063F6                            ESth_Move:	; Routine 2
000063F6 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000063FC 6700                       		beq.s	ESth_Delay	; if yes, branch
000063FE 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006404 4E75                       		rts
00006406                            
00006406                            ESth_Delay:
00006406 5428 0024                  		addq.b	#2,obRoutine(a0)
0000640A 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
00006410                            
00006410                            ESth_GotoCredits:
00006410                            		; Routine 4
00006410 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006414 6A00                       		bpl.s	ESth_Wait
00006416 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000641C                            
0000641C                            	ESth_Wait:
0000641C 4E75                       		rts
0000641E                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000641E                            ; ---------------------------------------------------------------------------
0000641E                            ; Sprite mappings - Sonic on the ending	sequence
0000641E                            ; ---------------------------------------------------------------------------
0000641E                            Map_ESon_internal:
0000641E 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
00006420 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
00006422 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006424 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006426 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006428 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
0000642A 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
0000642C 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
0000642E 02                         M_ESon_Hold1:	dc.b 2
0000642F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006434 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006439 03                         M_ESon_Hold2:	dc.b 3
0000643A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000643F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006444 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006449 02                         M_ESon_Up:	dc.b 2
0000644A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000644F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006454 02                         M_ESon_Conf1:	dc.b 2
00006455 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000645A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000645F 02                         M_ESon_Conf2:	dc.b 2
00006460 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006465 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000646A 03                         M_ESon_Leap1:	dc.b 3
0000646B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006470 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006475 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000647A 07                         M_ESon_Leap2:	dc.b 7
0000647B B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006480 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006485 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000648A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000648F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006494 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006499 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000649E 18                         M_ESon_Leap3:	dc.b $18
0000649F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000064A4 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000064A9 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000064AE 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000064B3 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000064B8 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000064BD 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000064C2 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000064C7 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000064CC B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000064D1 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000064D6 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000064DB C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000064E0 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000064E5 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000064EA D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000064EF D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000064F4 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000064F9 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000064FE E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006503 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006508 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000650D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006512 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006518 00                         		even
00006518 00                         		even
00006518                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006518                            ; --------------------------------------------------------------------------------
00006518                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006518                            ; --------------------------------------------------------------------------------
00006518                            
00006518                            SME_0ZTmS:	
00006518 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
0000651C 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
00006520 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006524 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006526 01                         SME_0ZTmS_E:	dc.b 1	
00006527 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000652C 01                         SME_0ZTmS_14:	dc.b 1	
0000652D F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006532 01                         SME_0ZTmS_1A:	dc.b 1	
00006533 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006538 01                         SME_0ZTmS_20:	dc.b 1	
00006539 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
0000653E 01                         SME_0ZTmS_26:	dc.b 1	
0000653F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006544 01                         SME_0ZTmS_2C:	dc.b 1	
00006545 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0000654A 01                         SME_0ZTmS_32:	dc.b 1	
0000654B F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
00006550                            		even
00006550                            		even
00006550                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
00006550                            ; ---------------------------------------------------------------------------
00006550                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006550                            ; ---------------------------------------------------------------------------
00006550                            Map_ESth_internal:
00006550 0000                       		dc.w M_ESth_1-Map_ESth_internal
00006552 03                         M_ESth_1:	dc.b 3
00006553 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006558 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000655D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006562                            		even
00006562                            		even
00006562                            
00006562                            ; ===========================================================================
00006562                            ; ---------------------------------------------------------------------------
00006562                            ; Credits ending sequence
00006562                            ; ---------------------------------------------------------------------------
00006562                            
00006562                            GM_Credits:
00006562                            		
00006562 6100 AF60                  		bsr.w	ClearPLC
00006566 6100 B996                  		bsr.w	PaletteFadeOut
0000656A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006570 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006574 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006578 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000657C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006580 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006584 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006588 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
0000658C 4238 F64E                  		clr.b	(f_wtr_state).w
00006590 6100 A96A                  		bsr.w	ClearScreen
00006594                            
00006594 43F8 D000                  		lea	(v_objspace).w,a1
00006598 7000                       		moveq	#0,d0
0000659A 323C 07FF                  		move.w	#$7FF,d1
0000659E                            	TryAg_ClrObjRam:
0000659E 22C0                       		move.l	d0,(a1)+
000065A0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000065A4                            
000065A4 7000                       		moveq	#plcid_TryAgain,d0
000065A6 6100 B02A                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000065AA                            
000065AA 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000065AE 7000                       		moveq	#0,d0
000065B0 323C 001F                  		move.w	#$1F,d1
000065B4                            	TryAg_ClrPal:
000065B4 22C0                       		move.l	d0,(a1)+
000065B6 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
000065BA                            
000065BA 7013                       		moveq	#palid_Ending,d0
000065BC 6100 BBEA                  		bsr.w	PalLoad1	; load ending palette
000065C0 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
000065C4 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
000065CA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065D0 4EB9 0000 0000             		jsr	(BuildSprites).l
000065D6 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
000065DC 6100 B87A                  		bsr.w	PaletteFadeIn
000065E0                            
000065E0                            ; ---------------------------------------------------------------------------
000065E0                            ; "TRY AGAIN" and "END"	screen main loop
000065E0                            ; ---------------------------------------------------------------------------
000065E0                            TryAg_MainLoop:
000065E0 6100 A9F6                  		bsr.w	PauseGame
000065E4 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000065EA 6100 D190                  		bsr.w	WaitForVBla
000065EE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065F4 4EB9 0000 0000             		jsr	(BuildSprites).l
000065FA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006600 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006602 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006606 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006608 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000660E 67D0                       		beq.s	TryAg_MainLoop
00006610                            
00006610                            TryAg_Exit:
00006610 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006616 4E75                       		rts	
00006618                            
00006618                            ; ===========================================================================
00006618                            
00006618                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006618                            ; ---------------------------------------------------------------------------
00006618                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006618                            ; ---------------------------------------------------------------------------
00006618                            
00006618                            EndEggman:
00006618 7000                       		moveq	#0,d0
0000661A 1028 0024                  		move.b	obRoutine(a0),d0
0000661E 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006622 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006626 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000662C                            ; ===========================================================================
0000662C 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
0000662E 0000                       		dc.w EEgg_Animate-EEgg_Index
00006630 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006632 0000                       		dc.w EEgg_Wait-EEgg_Index
00006634                            
00006634 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006634                            ; ===========================================================================
00006634                            
00006634                            EEgg_Main:	; Routine 0
00006634 5428 0024                  		addq.b	#2,obRoutine(a0)
00006638 317C 0120 0008             		move.w	#$120,obX(a0)
0000663E 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006644 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
0000664C 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006652 117C 0000 0001             		move.b	#0,obRender(a0)
00006658 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000665E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006664 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000666A 6700                       		beq.s	EEgg_Animate	; if yes, branch
0000666C                            
0000666C 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006672 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006678 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
0000667E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006684                            
00006684                            EEgg_Animate:	; Routine 2
00006684 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
0000668A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006690                            ; ===========================================================================
00006690                            
00006690                            EEgg_Juggle:	; Routine 4
00006690 5428 0024                  		addq.b	#2,obRoutine(a0)
00006694 7002                       		moveq	#2,d0
00006696 0828 0000 001C             		btst	#0,obAnim(a0)
0000669C 6700                       		beq.s	@noflip
0000669E 4440                       		neg.w	d0
000066A0                            
000066A0                            	@noflip:
000066A0 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000066A4 7205                       		moveq	#5,d1
000066A6                            
000066A6                            @emeraldloop:
000066A6 1340 003E                  		move.b	d0,$3E(a1)
000066AA 3400                       		move.w	d0,d2
000066AC E742                       		asl.w	#3,d2
000066AE D529 0026                  		add.b	d2,obAngle(a1)
000066B2 43E9 0040                  		lea	$40(a1),a1
000066B6 51C9 FFEE                  		dbf	d1,@emeraldloop
000066BA 5228 001A                  		addq.b	#1,obFrame(a0)
000066BE 317C 0070 0030             		move.w	#112,eegg_time(a0)
000066C4                            
000066C4                            EEgg_Wait:	; Routine 6
000066C4 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
000066C8 6A00                       		bpl.s	@nochg		; branch if time remains
000066CA 0868 0000 001C             		bchg	#0,obAnim(a0)
000066D0 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
000066D6                            
000066D6                            	@nochg:
000066D6 4E75                       		rts	
000066D6 4E75                       		rts	
000066D8                            		include "_anim\Try Again & End Eggman.asm"
000066D8                            ; ---------------------------------------------------------------------------
000066D8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000066D8                            ; ---------------------------------------------------------------------------
000066D8 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
000066DA 0000                       		dc.w @tryagain2-Ani_EEgg
000066DC 0000                       		dc.w @end-Ani_EEgg
000066DE 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
000066E2 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
000066E6 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
000066F8                            		even
000066F8                            		even
000066F8                            		include	"_incObj\8C Try Again Emeralds.asm"
000066F8                            ; ---------------------------------------------------------------------------
000066F8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000066F8                            ; ---------------------------------------------------------------------------
000066F8                            
000066F8                            TryChaos:
000066F8 7000                       		moveq	#0,d0
000066FA 1028 0024                  		move.b	obRoutine(a0),d0
000066FE 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006702 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006706 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000670C                            ; ===========================================================================
0000670C 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000670E 0000                       		dc.w TCha_Move-TCha_Index
00006710                            ; ===========================================================================
00006710                            
00006710                            TCha_Main:	; Routine 0
00006710 2248                       		movea.l	a0,a1
00006712 7400                       		moveq	#0,d2
00006714 7600                       		moveq	#0,d3
00006716 7205                       		moveq	#5,d1
00006718 9238 FE57                  		sub.b	(v_emeralds).w,d1
0000671C                            
0000671C                            @makeemerald:
0000671C 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006720 5429 0024                  		addq.b	#2,obRoutine(a1)
00006724 237C 0000 6518 0004        		move.l	#Map_ECha,obMap(a1)
0000672C 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006732 137C 0000 0001             		move.b	#0,obRender(a1)
00006738 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000673E 337C 0104 0008             		move.w	#$104,obX(a1)
00006744 337C 0120 0038             		move.w	#$120,$38(a1)
0000674A 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006750 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006756 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000675C 47F8 FE58                  		lea	(v_emldlist).w,a3
00006760                            
00006760                            	@chkemerald:
00006760 7000                       		moveq	#0,d0
00006762 1038 FE57                  		move.b	(v_emeralds).w,d0
00006766 5340                       		subq.w	#1,d0
00006768 6500                       		bcs.s	@loc_5B42
0000676A                            
0000676A                            	@chkloop:
0000676A B433 0000                  		cmp.b	(a3,d0.w),d2
0000676E 6600                       		bne.s	@notgot
00006770 5202                       		addq.b	#1,d2
00006772 60EC                       		bra.s	@chkemerald
00006774                            ; ===========================================================================
00006774                            
00006774                            	@notgot:
00006774 51C8 FFF4                  		dbf	d0,@chkloop
00006778                            
00006778                            @loc_5B42:
00006778 1342 001A                  		move.b	d2,obFrame(a1)
0000677C 5229 001A                  		addq.b	#1,obFrame(a1)
00006780 5202                       		addq.b	#1,d2
00006782 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006788 1343 001E                  		move.b	d3,obTimeFrame(a1)
0000678C 1343 001F                  		move.b	d3,obDelayAni(a1)
00006790 0643 000A                  		addi.w	#10,d3
00006794 43E9 0040                  		lea	$40(a1),a1
00006798 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
0000679C                            
0000679C                            TCha_Move:	; Routine 2
0000679C 4A68 003E                  		tst.w	$3E(a0)
000067A0 6700                       		beq.s	locret_5BBA
000067A2 4A28 001E                  		tst.b	obTimeFrame(a0)
000067A6 6700                       		beq.s	loc_5B78
000067A8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000067AC 6600                       		bne.s	loc_5B80
000067AE                            
000067AE                            loc_5B78:
000067AE 3028 003E                  		move.w	$3E(a0),d0
000067B2 D168 0026                  		add.w	d0,obAngle(a0)
000067B6                            
000067B6                            loc_5B80:
000067B6 1028 0026                  		move.b	obAngle(a0),d0
000067BA 6700                       		beq.s	loc_5B8C
000067BC 0C00 0080                  		cmpi.b	#$80,d0
000067C0 6600                       		bne.s	loc_5B96
000067C2                            
000067C2                            loc_5B8C:
000067C2 4268 003E                  		clr.w	$3E(a0)
000067C6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000067CC                            
000067CC                            loc_5B96:
000067CC 4EB9 0000 37AE             		jsr	(CalcSine).l
000067D2 7800                       		moveq	#0,d4
000067D4 1828 003C                  		move.b	$3C(a0),d4
000067D8 C3C4                       		muls.w	d4,d1
000067DA E081                       		asr.l	#8,d1
000067DC C1C4                       		muls.w	d4,d0
000067DE E080                       		asr.l	#8,d0
000067E0 D268 0038                  		add.w	$38(a0),d1
000067E4 D068 003A                  		add.w	$3A(a0),d0
000067E8 3141 0008                  		move.w	d1,obX(a0)
000067EC 3140 000A                  		move.w	d0,obScreenY(a0)
000067F0                            
000067F0                            locret_5BBA:
000067F0 4E75                       		rts	
000067F0 4E75                       		rts	
000067F2                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            Map_EEgg_internal:
000067F2 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
000067F4 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
000067F6 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
000067F8 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
000067FA 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
000067FC 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
000067FE 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006800 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006802 08                         M_EEgg_Try1:	dc.b 8
00006803 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006808 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000680D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006812 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006817 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000681C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006821 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006826 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000682B 08                         M_EEgg_Try2:	dc.b 8
0000682C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006831 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006836 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000683B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006840 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006845 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000684A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000684F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006854 08                         M_EEgg_Try3:	dc.b 8
00006855 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000685A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000685F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006864 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006869 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000686E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006873 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006878 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000687D 08                         M_EEgg_Try4:	dc.b 8
0000687E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006883 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006888 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000688D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006892 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006897 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000689C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000068A1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000068A6 0C                         M_EEgg_End1:	dc.b $C
000068A7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000068AC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000068B1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000068B6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000068BB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000068C0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000068C5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000068CA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000068CF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000068D4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000068D9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000068DE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000068E3 0A                         M_EEgg_End2:	dc.b $A
000068E4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000068E9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000068EE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000068F3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000068F8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000068FD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006902 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006907 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000690C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006911 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006916 0A                         M_EEgg_End3:	dc.b $A
00006917 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000691C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006921 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006926 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000692B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006930 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006935 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000693A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000693F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006944 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006949 0C                         M_EEgg_End4:	dc.b $C
0000694A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000694F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006954 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006959 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000695E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006963 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006968 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000696D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006972 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006977 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000697C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006981 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006986                            		even
00006986                            		even
00006986                            
00006986                            ; ---------------------------------------------------------------------------
00006986                            ; Ending sequence demos
00006986                            ; ---------------------------------------------------------------------------
00006986                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
000069B4                            		even
000069B4                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
000069F4                            		even
000069F4                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006A24                            		even
00006A24                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006A54                            		even
00006A54                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006A74                            		even
00006A74                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006A94                            		even
00006A94                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006AC4                            		even
00006AC4                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006AF4                            		even
00006AF4                            
00006AF4                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006AF4                            ; ---------------------------------------------------------------------------
00006AF4                            ; Subroutine to	load level boundaries and start	locations
00006AF4                            ; ---------------------------------------------------------------------------
00006AF4                            
00006AF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF4                            
00006AF4                            
00006AF4                            LevelSizeLoad:
00006AF4 7000                       		moveq	#0,d0
00006AF6 11C0 F740                  		move.b	d0,($FFFFF740).w
00006AFA 11C0 F741                  		move.b	d0,($FFFFF741).w
00006AFE 11C0 F746                  		move.b	d0,($FFFFF746).w
00006B02 11C0 F748                  		move.b	d0,($FFFFF748).w
00006B06 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006B0A 3038 FE10                  		move.w	(v_zone).w,d0
00006B0E ED08                       		lsl.b	#6,d0
00006B10 E848                       		lsr.w	#4,d0
00006B12 3200                       		move.w	d0,d1
00006B14 D040                       		add.w	d0,d0
00006B16 D041                       		add.w	d1,d0
00006B18 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006B1C 3018                       		move.w	(a0)+,d0
00006B1E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006B22 2018                       		move.l	(a0)+,d0
00006B24 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006B28 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006B2C 2018                       		move.l	(a0)+,d0
00006B2E 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006B32 21C0 F724                  		move.l	d0,(v_limittop1).w
00006B36 3038 F728                  		move.w	(v_limitleft2).w,d0
00006B3A 0640 0240                  		addi.w	#$240,d0
00006B3E 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006B42 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006B48 3018                       		move.w	(a0)+,d0
00006B4A 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006B4E 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006B54 6000 0000                  		bra.w	LevSz_ChkLamp
00006B58                            
00006B58                            ; ===========================================================================
00006B58                            ; ---------------------------------------------------------------------------
00006B58                            ; Level size array
00006B58                            ; ---------------------------------------------------------------------------
00006B58                            LevelSizeArray:
00006B58                            		; GHZ
00006B58 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006B64 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006B70 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006B7C 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006B88                            		; LZ
00006B88 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006B94 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006BA0 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006BAC 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006BB8                            		; MZ
00006BB8 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006BC4 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006BD0 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006BDC 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006BE8                            		; SLZ
00006BE8 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006BF4 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006C00 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006C0C 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006C18                            		; SYZ
00006C18 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006C24 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006C30 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006C3C 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006C48                            		; SBZ
00006C48 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006C54 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006C60 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006C6C 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006C78                            		; Ending
00006C78 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006C84 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006C90 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006C9C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006CA8                            
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            ; Ending start location array
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            EndingStLocArray:
00006CA8                            		include	"_inc\Start Location Array - Ending.asm"
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            ; Ending start location array
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            
00006CA8                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006CAC                            		incbin	"startpos\mz2 (Credits demo).bin"
00006CB0                            		incbin	"startpos\syz3 (Credits demo).bin"
00006CB4                            		incbin	"startpos\lz3 (Credits demo).bin"
00006CB8                            		incbin	"startpos\slz3 (Credits demo).bin"
00006CBC                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006CC0                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006CC4                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006CC8                            		even
00006CC8                            		even
00006CC8                            
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            LevSz_ChkLamp:
00006CC8 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006CCC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006CCE                            
00006CCE 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006CD4 3238 D008                  		move.w	(v_player+obX).w,d1
00006CD8 3038 D00C                  		move.w	(v_player+obY).w,d0
00006CDC 6000                       		bra.s	LevSz_SkipStartPos
00006CDE                            ; ===========================================================================
00006CDE                            
00006CDE                            LevSz_StartLoc:
00006CDE 3038 FE10                  		move.w	(v_zone).w,d0
00006CE2 ED08                       		lsl.b	#6,d0
00006CE4 E848                       		lsr.w	#4,d0
00006CE6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006CEA 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006CEE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006CF0                            
00006CF0 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006CF4 5340                       		subq.w	#1,d0
00006CF6 E548                       		lsl.w	#2,d0
00006CF8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006CFC                            
00006CFC                            LevSz_SonicPos:
00006CFC 7200                       		moveq	#0,d1
00006CFE 3219                       		move.w	(a1)+,d1
00006D00 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006D04 7000                       		moveq	#0,d0
00006D06 3011                       		move.w	(a1),d0
00006D08 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006D0C                            
00006D0C                            SetScreen:
00006D0C                            	LevSz_SkipStartPos:
00006D0C 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006D10 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006D14 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006D16                            @looppoint: 
00006D16 34C1                       		move.w d1,(a2)+ ; fill in X 
00006D18 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006D1A 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006D1E 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006D22 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006D24 7200                       		moveq	#0,d1
00006D26                            
00006D26                            	SetScr_WithinLeft:
00006D26 3438 F72A                  		move.w	(v_limitright2).w,d2
00006D2A B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006D2C 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006D2E 3202                       		move.w	d2,d1
00006D30                            
00006D30                            	SetScr_WithinRight:
00006D30 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006D34                            
00006D34 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006D38 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006D3A 7000                       		moveq	#0,d0
00006D3C                            
00006D3C                            	SetScr_WithinTop:
00006D3C B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006D40 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006D42 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006D46                            
00006D46                            	SetScr_WithinBottom:
00006D46 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006D4A 6100 0000                  		bsr.w	BgScrollSpeed
00006D4E 7000                       		moveq	#0,d0
00006D50 1038 FE10                  		move.b	(v_zone).w,d0
00006D54 E508                       		lsl.b	#2,d0
00006D56 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006D5C 4E75                       		rts
00006D5E                            ; ===========================================================================
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            ; Sonic start location array
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            ; Sonic start location array
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            
00006D5E                            		incbin	"startpos\ghz1.bin"
00006D62                            		incbin	"startpos\ghz2.bin"
00006D66                            		incbin	"startpos\ghz3.bin"
00006D6A 0080 00A8                  		dc.w	$80,$A8
00006D6E                            
00006D6E                            		incbin	"startpos\lz1.bin"
00006D72                            		incbin	"startpos\lz2.bin"
00006D76                            		incbin	"startpos\lz3.bin"
00006D7A                            		incbin	"startpos\sbz3.bin"
00006D7E                            
00006D7E                            		incbin	"startpos\mz1.bin"
00006D82                            		incbin	"startpos\mz2.bin"
00006D86                            		incbin	"startpos\mz3.bin"
00006D8A 0080 00A8                  		dc.w	$80,$A8
00006D8E                            
00006D8E                            		incbin	"startpos\slz1.bin"
00006D92                            		incbin	"startpos\slz2.bin"
00006D96                            		incbin	"startpos\slz3.bin"
00006D9A 0080 00A8                  		dc.w	$80,$A8
00006D9E                            
00006D9E                            		incbin	"startpos\syz1.bin"
00006DA2                            		incbin	"startpos\syz2.bin"
00006DA6                            		incbin	"startpos\syz3.bin"
00006DAA 0080 00A8                  		dc.w	$80,$A8
00006DAE                            
00006DAE                            		incbin	"startpos\sbz1.bin"
00006DB2                            		incbin	"startpos\sbz2.bin"
00006DB6                            		incbin	"startpos\fz.bin"
00006DBA 0080 00A8                  		dc.w	$80,$A8
00006DBE                            
00006DBE                            
00006DBE                            		incbin	"startpos\end1.bin"
00006DC2                            		incbin	"startpos\end2.bin"
00006DC6 0080 00A8                  		dc.w	$80,$A8
00006DCA 0080 00A8                  		dc.w	$80,$A8
00006DCE                            
00006DCE                            		even
00006DCE                            		even
00006DCE                            
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            ; Which	256x256	tiles contain loops or roll-tunnels
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            
00006DCE                            LoopTileNums:
00006DCE                            
00006DCE                            ; 		loop	loop	tunnel	tunnel
00006DCE                            
00006DCE B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00006DD2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00006DD6 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00006DDA AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00006DDE 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00006DE2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00006DE6 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00006DEA                            
00006DEA                            		even
00006DEA                            
00006DEA                            ; ---------------------------------------------------------------------------
00006DEA                            ; Subroutine to	set scroll speed of some backgrounds
00006DEA                            ; ---------------------------------------------------------------------------
00006DEA                            
00006DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEA                            
00006DEA                            
00006DEA                            BgScrollSpeed:
00006DEA 4A38 FE30                  		tst.b	(v_lastlamp).w
00006DEE 6600                       		bne.s	loc_6206
00006DF0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006DF4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00006DF8 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00006DFC 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00006E00 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00006E04                            
00006E04                            loc_6206:
00006E04 7400                       		moveq	#0,d2
00006E06 1438 FE10                  		move.b	(v_zone).w,d2
00006E0A D442                       		add.w	d2,d2
00006E0C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006E10 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006E14                            ; End of function BgScrollSpeed
00006E14                            
00006E14                            ; ===========================================================================
00006E14 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006E18 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006E1C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006E20 0000                       		dc.w BgScroll_End-BgScroll_Index
00006E22                            ; ===========================================================================
00006E22                            
00006E22                            BgScroll_GHZ:
00006E22 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E26 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006E2A 42B8 F714                  		clr.l	(v_bg2screenposy).w
00006E2E 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006E32 45F8 A800                  		lea	($FFFFA800).w,a2
00006E36 429A                       		clr.l	(a2)+
00006E38 429A                       		clr.l	(a2)+
00006E3A 429A                       		clr.l	(a2)+
00006E3C 4E75                       		rts
00006E3E                            ; ===========================================================================
00006E3E                            
00006E3E                            BgScroll_LZ:
00006E3E E280                       		asr.l	#1,d0
00006E40 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E44 4E75                       		rts	
00006E46                            ; ===========================================================================
00006E46                            
00006E46                            BgScroll_MZ:
00006E46 4E75                       		rts	
00006E48                            ; ===========================================================================
00006E48                            
00006E48                            BgScroll_SLZ:
00006E48 E280                       		asr.l	#1,d0
00006E4A 0640 00C0                  		addi.w	#$C0,d0
00006E4E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E52 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E56 4E75                       		rts	
00006E58                            ; ===========================================================================
00006E58                            
00006E58                            BgScroll_SYZ:
00006E58 E980                       		asl.l	#4,d0
00006E5A 2400                       		move.l	d0,d2
00006E5C E380                       		asl.l	#1,d0
00006E5E D082                       		add.l	d2,d0
00006E60 E080                       		asr.l	#8,d0
00006E62 5240                       		addq.w	#1,d0
00006E64 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E68 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E6C 4E75                       		rts	
00006E6E                            ; ===========================================================================
00006E6E                            
00006E6E                            BgScroll_SBZ:
00006E6E 0240 07F8                  		andi.w	#$7F8,d0
00006E72 E640                       		asr.w	#3,d0
00006E74 5240                       		addq.w	#1,d0
00006E76 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E7A 4E75                       		rts	
00006E7C                            ; ===========================================================================
00006E7C                            
00006E7C                            BgScroll_End:
00006E7C 3038 F700                  		move.w	(v_screenposx).w,d0
00006E80 E240                       		asr.w	#1,d0
00006E82 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00006E86 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00006E8A E440                       		asr.w	#2,d0
00006E8C 3200                       		move.w	d0,d1
00006E8E D040                       		add.w	d0,d0
00006E90 D041                       		add.w	d1,d0
00006E92 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00006E96 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006E9A 42B8 F714                  		clr.l	(v_bg2screenposy).w
00006E9E 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006EA2 45F8 A800                  		lea	($FFFFA800).w,a2
00006EA6 429A                       		clr.l	(a2)+
00006EA8 429A                       		clr.l	(a2)+
00006EAA 429A                       		clr.l	(a2)+
00006EAC 4E75                       		rts
00006EAC 4E75                       		rts
00006EAE                            		include	"_inc\DeformLayers (JP1).asm"
00006EAE                            ; ---------------------------------------------------------------------------
00006EAE                            ; Background layer deformation subroutines
00006EAE                            ; ---------------------------------------------------------------------------
00006EAE                            
00006EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EAE                            
00006EAE                            
00006EAE                            DeformLayers:
00006EAE 4A38 F744                  		tst.b	(f_nobgscroll).w
00006EB2 6700                       		beq.s	@bgscroll
00006EB4 4E75                       		rts	
00006EB6                            ; ===========================================================================
00006EB6                            
00006EB6                            	@bgscroll:
00006EB6 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00006EBA 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00006EBE 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00006EC2 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00006EC6 6100 0000                  		bsr.w	ScrollHoriz
00006ECA 6100 0000                  		bsr.w	ScrollVertical
00006ECE 6100 0000                  		bsr.w	DynamicLevelEvents
00006ED2 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00006ED8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00006EDE 7000                       		moveq	#0,d0
00006EE0 1038 FE10                  		move.b	(v_zone).w,d0
00006EE4 D040                       		add.w	d0,d0
00006EE6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006EEA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006EEE                            ; End of function DeformLayers
00006EEE                            
00006EEE                            ; ===========================================================================
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            ; Offset index for background layer deformation	code
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006EF2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006EF6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006EFA 0000                       		dc.w Deform_GHZ-Deform_Index
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            ; Green	Hill Zone background layer deformation code
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            
00006EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFC                            
00006EFC                            
00006EFC                            Deform_GHZ:
00006EFC                            	;cmpi.b    #id_Title,(v_gamemode).w
00006EFC                            	;beq.w    Deform_Title
00006EFC                            
00006EFC                            ;Deform_GHZ_Stage:
00006EFC                            	; block 3 - distant mountains
00006EFC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006F00 48C4                       		ext.l	d4
00006F02 EB84                       		asl.l	#5,d4
00006F04 2204                       		move.l	d4,d1
00006F06 E384                       		asl.l	#1,d4
00006F08 D881                       		add.l	d1,d4
00006F0A 7C00                       		moveq	#0,d6
00006F0C 6100 0000                  		bsr.w	BGScroll_Block3
00006F10                            	; block 2 - hills & waterfalls
00006F10 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006F14 48C4                       		ext.l	d4
00006F16 EF84                       		asl.l	#7,d4
00006F18 7C00                       		moveq	#0,d6
00006F1A 6100 0000                  		bsr.w	BGScroll_Block2
00006F1E                            	; calculate Y position
00006F1E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00006F22 3038 F704                  		move.w	(v_screenposy).w,d0
00006F26 0240 07FF                  		andi.w	#$7FF,d0
00006F2A EA48                       		lsr.w	#5,d0
00006F2C 4440                       		neg.w	d0
00006F2E 0640 0020                  		addi.w	#$20,d0
00006F32 6A00                       		bpl.s	@limitY
00006F34 7000                       		moveq	#0,d0
00006F36                            	@limitY:
00006F36 3800                       		move.w	d0,d4
00006F38 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00006F3C 3038 F700                  		move.w	(v_screenposx).w,d0
00006F40 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00006F46 6600                       		bne.s	@notTitle
00006F48 7000                       		moveq	#0,d0	; reset foreground position in title screen
00006F4A                            	@notTitle:
00006F4A 4440                       		neg.w	d0
00006F4C 4840                       		swap	d0
00006F4E                            	; auto-scroll clouds
00006F4E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00006F52 069A 0001 0000             		addi.l	#$10000,(a2)+
00006F58 069A 0000 C000             		addi.l	#$C000,(a2)+
00006F5E 069A 0000 8000             		addi.l	#$8000,(a2)+
00006F64                            	; calculate background scroll	
00006F64 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
00006F68 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F6C 4440                       		neg.w	d0
00006F6E 323C 001F                  		move.w	#$1F,d1
00006F72 9244                       		sub.w	d4,d1
00006F74 6500                       		bcs.s	@gotoCloud2
00006F76                            	@cloudLoop1:		; upper cloud (32px)
00006F76 22C0                       		move.l	d0,(a1)+
00006F78 51C9 FFFC                  		dbf	d1,@cloudLoop1
00006F7C                            
00006F7C                            	@gotoCloud2:
00006F7C 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00006F80 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F84 4440                       		neg.w	d0
00006F86 323C 000F                  		move.w	#$F,d1
00006F8A                            	@cloudLoop2:		; middle cloud (16px)
00006F8A 22C0                       		move.l	d0,(a1)+
00006F8C 51C9 FFFC                  		dbf	d1,@cloudLoop2
00006F90                            
00006F90 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00006F94 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F98 4440                       		neg.w	d0
00006F9A 323C 000F                  		move.w	#$F,d1
00006F9E                            	@cloudLoop3:		; lower cloud (16px)
00006F9E 22C0                       		move.l	d0,(a1)+
00006FA0 51C9 FFFC                  		dbf	d1,@cloudLoop3
00006FA4                            
00006FA4 323C 002F                  		move.w	#$2F,d1
00006FA8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00006FAC 4440                       		neg.w	d0
00006FAE                            	@mountainLoop:		; distant mountains (48px)
00006FAE 22C0                       		move.l	d0,(a1)+
00006FB0 51C9 FFFC                  		dbf	d1,@mountainLoop
00006FB4                            
00006FB4 323C 0027                  		move.w	#$27,d1
00006FB8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006FBC 4440                       		neg.w	d0
00006FBE                            	@hillLoop:			; hills & waterfalls (40px)
00006FBE 22C0                       		move.l	d0,(a1)+
00006FC0 51C9 FFFC                  		dbf	d1,@hillLoop
00006FC4                            
00006FC4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006FC8 3438 F700                  		move.w	(v_screenposx).w,d2
00006FCC 9440                       		sub.w	d0,d2
00006FCE 48C2                       		ext.l	d2
00006FD0 E182                       		asl.l	#8,d2
00006FD2 85FC 0068                  		divs.w	#$68,d2
00006FD6 48C2                       		ext.l	d2
00006FD8 E182                       		asl.l	#8,d2
00006FDA 7600                       		moveq	#0,d3
00006FDC 3600                       		move.w	d0,d3
00006FDE 323C 0047                  		move.w	#$47,d1
00006FE2 D244                       		add.w	d4,d1
00006FE4                            	@waterLoop:			; water deformation
00006FE4 3003                       		move.w	d3,d0
00006FE6 4440                       		neg.w	d0
00006FE8 22C0                       		move.l	d0,(a1)+
00006FEA 4843                       		swap	d3
00006FEC D682                       		add.l	d2,d3
00006FEE 4843                       		swap	d3
00006FF0 51C9 FFF2                  		dbf	d1,@waterLoop
00006FF4 4E75                       		rts
00006FF6                            ; End of function Deform_GHZ
00006FF6                            
00006FF6                            Deform_Title:
00006FF6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006FFA 48C4                       		ext.l	d4
00006FFC EB84                       		asl.l	#5,d4
00006FFE 2204                       		move.l	d4,d1
00007000 E384                       		asl.l	#1,d4
00007002 D881                       		add.l	d1,d4
00007004 7A00                       		moveq	#0,d5
00007006 6100 0000                  		bsr.w	BGScroll_Block1
0000700A 6100 0000                  		bsr.w	BGScroll_Block3
0000700E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007012 3038 F704                  		move.w	(v_screenposy).w,d0
00007016 0240 07FF                  		andi.w	#$7FF,d0
0000701A EA48                       		lsr.w	#5,d0
0000701C 4440                       		neg.w	d0
0000701E 0640 0026                  		addi.w	#$26,d0
00007022 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007026 3800                       		move.w	d0,d4
00007028 6100 0000                  		bsr.w	BGScroll_Block3
0000702C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007032 323C 006F                  		move.w	#$6F,d1
00007036 9244                       		sub.w	d4,d1
00007038 3038 F700                  		move.w	(v_screenposx).w,d0
0000703C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007042 6600                       		bne.s	loc_633C
00007044 7000                       		moveq	#0,d0
00007046                            
00007046                            loc_633C:
00007046 4440                       		neg.w	d0
00007048 4840                       		swap	d0
0000704A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000704E 4440                       		neg.w	d0
00007050                            
00007050                            loc_6346:
00007050 22C0                       		move.l	d0,(a1)+
00007052 51C9 FFFC                  		dbf	d1,loc_6346
00007056 323C 0027                  		move.w	#$27,d1
0000705A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000705E 4440                       		neg.w	d0
00007060                            
00007060                            loc_6356:
00007060 22C0                       		move.l	d0,(a1)+
00007062 51C9 FFFC                  		dbf	d1,loc_6356
00007066 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000706A 0640 0000                  		addi.w	#0,d0
0000706E 3438 F700                  		move.w	(v_screenposx).w,d2
00007072 0642 FE00                  		addi.w	#-$200,d2
00007076 9440                       		sub.w	d0,d2
00007078 48C2                       		ext.l	d2
0000707A E182                       		asl.l	#8,d2
0000707C 85FC 0068                  		divs.w	#$68,d2
00007080 48C2                       		ext.l	d2
00007082 E182                       		asl.l	#8,d2
00007084 7600                       		moveq	#0,d3
00007086 3600                       		move.w	d0,d3
00007088 323C 0047                  		move.w	#$47,d1
0000708C D244                       		add.w	d4,d1
0000708E                            
0000708E                            loc_6384:
0000708E 3003                       		move.w	d3,d0
00007090 4440                       		neg.w	d0
00007092 22C0                       		move.l	d0,(a1)+
00007094 4843                       		swap	d3
00007096 D682                       		add.l	d2,d3
00007098 4843                       		swap	d3
0000709A 51C9 FFF2                  		dbf	d1,loc_6384
0000709E 4E75                       		rts	
000070A0                            
000070A0                            ; ===========================================================================
000070A0                            ; ---------------------------------------------------------------------------
000070A0                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000070A0                            ; ---------------------------------------------------------------------------
000070A0                             
000070A0                            Deform_LZ:
000070A0 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000070A2 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000070A6 48C4                       		ext.l	d4					; extend to long-word signed
000070A8 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000070AA 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000070AE 48C5                       		ext.l	d5					; extend to long-word signed
000070B0 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
000070B2 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
000070B6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
000070BC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
000070C0 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
000070C4 4440                       		neg.w	d0					; reverse
000070C6 4840                       		swap	d0					; send to upper word
000070C8 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
000070CC 4440                       		neg.w	d0					; reverse
000070CE 7600                       		moveq	#$00,d3					; clear d3
000070D0 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
000070D4 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
000070DA 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
000070DE 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
000070E2 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
000070E6 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
000070E8 B242                       		cmp.w	d2,d1					; is the water line below the screen?
000070EA 6F00                       		ble.s	DLZ_NoWater				; if not, branch
000070EC 3202                       		move.w	d2,d1					; set at maximum
000070EE                             
000070EE                            DLZ_NoWater:
000070EE 9441                       		sub.w	d1,d2					; subtract from water-line count
000070F0 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000070F2 5301                       		subq.b	#$01,d1					; decrease above water count
000070F4 6500                       		bcs.s	DLZ_Water				; if finished, branch
000070F6                             
000070F6                            DLZ_Above:
000070F6 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000070F8 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000070FC                             
000070FC                            DLZ_Water:
000070FC 5302                       		subq.b	#$01,d2					; decrease below water count
000070FE 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00007100 3200                       		move.w	d0,d1					; copy BG position back to d1
00007102 4840                       		swap	d0					; move FG position back to lower word in d0
00007104 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007106 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
0000710A D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000710E D643                       		add.w	d3,d3					; multiply by word size (2)
00007110 D844                       		add.w	d4,d4					; ''
00007112 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007118 D6C4                       		adda.w	d4,a3					; advance to correct starting point
0000711A 1813                       		move.b	(a3),d4					; get current position byte
0000711C E404                       		asr.b	#$02,d4					; get only the position bits
0000711E 4884                       		ext.w	d4					; extend to word
00007120 D244                       		add.w	d4,d1					; adjust BG's current position
00007122 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007126 1812                       		move.b	(a2),d4					; get current position byte
00007128 E404                       		asr.b	#$02,d4					; get only the position bits
0000712A 4884                       		ext.w	d4					; extend to word
0000712C D044                       		add.w	d4,d0					; adjust FG's current position
0000712E                             
0000712E                            DLZ_Below:
0000712E D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00007130 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00007132 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007134 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007136 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
0000713A                             
0000713A                            DLZ_Finish:
0000713A 4E75                       		rts						; return
0000713C                             
0000713C                            ; ---------------------------------------------------------------------------
0000713C                            ; Scroll data for the FG
0000713C                            ; ---------------------------------------------------------------------------
0000713C                             
0000713C                            DLZ_WaveFG:
0000713C                            		rept	$02
0000713C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C 0001 0400 0401 0800 0801+  		endr
0000753C                             
0000753C                            ; ---------------------------------------------------------------------------
0000753C                            ; Scroll data for the BG
0000753C                            ; ---------------------------------------------------------------------------
0000753C                             
0000753C                            DLZ_WaveBG:	rept	$04
0000753C                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000753C                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000753C                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000753C                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000753C                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000753C                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000753C                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000753C                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000753C FC01 0000 0000 0000 0000+  		endr
0000793C                             
0000793C                            ; ===========================================================================
0000793C                            ; End of function Deform_LZ
0000793C                            
0000793C                            ; ---------------------------------------------------------------------------
0000793C                            ; Marble Zone background layer deformation code
0000793C                            ; ---------------------------------------------------------------------------
0000793C                            
0000793C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000793C                            
0000793C                            
0000793C                            Deform_MZ:
0000793C                            	; block 1 - dungeon interior
0000793C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007940 48C4                       		ext.l	d4
00007942 ED84                       		asl.l	#6,d4
00007944 2204                       		move.l	d4,d1
00007946 E384                       		asl.l	#1,d4
00007948 D881                       		add.l	d1,d4
0000794A 7C02                       		moveq	#2,d6
0000794C 6100 0000                  		bsr.w	BGScroll_Block1
00007950                            	; block 3 - mountains
00007950 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007954 48C4                       		ext.l	d4
00007956 ED84                       		asl.l	#6,d4
00007958 7C06                       		moveq	#6,d6
0000795A 6100 0000                  		bsr.w	BGScroll_Block3
0000795E                            	; block 2 - bushes & antique buildings
0000795E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007962 48C4                       		ext.l	d4
00007964 EF84                       		asl.l	#7,d4
00007966 7C04                       		moveq	#4,d6
00007968 6100 0000                  		bsr.w	BGScroll_Block2
0000796C                            	; calculate y-position of background
0000796C 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007970 3238 F704                  		move.w	(v_screenposy).w,d1
00007974 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007978 6500                       		bcs.s	@noYscroll
0000797A 3401                       		move.w	d1,d2
0000797C D241                       		add.w	d1,d1
0000797E D242                       		add.w	d2,d1
00007980 E441                       		asr.w	#2,d1
00007982 D041                       		add.w	d1,d0
00007984                            	@noYscroll:
00007984 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007988 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
0000798C 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007990 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007996                            	; do something with redraw flags
00007996 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
0000799A 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
0000799E 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
000079A2 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
000079A6 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
000079AA                            	; calculate background scroll buffer
000079AA 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000079AE 3438 F700                  		move.w	(v_screenposx).w,d2
000079B2 4442                       		neg.w	d2
000079B4 3002                       		move.w	d2,d0
000079B6 E440                       		asr.w	#2,d0
000079B8 9042                       		sub.w	d2,d0
000079BA 48C0                       		ext.l	d0
000079BC E780                       		asl.l	#3,d0
000079BE 81FC 0005                  		divs.w	#5,d0
000079C2 48C0                       		ext.l	d0
000079C4 E980                       		asl.l	#4,d0
000079C6 E180                       		asl.l	#8,d0
000079C8 7600                       		moveq	#0,d3
000079CA 3602                       		move.w	d2,d3
000079CC E243                       		asr.w	#1,d3
000079CE 323C 0004                  		move.w	#4,d1
000079D2                            	@cloudLoop:		
000079D2 32C3                       		move.w	d3,(a1)+
000079D4 4843                       		swap	d3
000079D6 D680                       		add.l	d0,d3
000079D8 4843                       		swap	d3
000079DA 51C9 FFF6                  		dbf	d1,@cloudLoop
000079DE                            
000079DE 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000079E2 4440                       		neg.w	d0
000079E4 323C 0001                  		move.w	#1,d1
000079E8                            	@mountainLoop:		
000079E8 32C0                       		move.w	d0,(a1)+
000079EA 51C9 FFFC                  		dbf	d1,@mountainLoop
000079EE                            
000079EE 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000079F2 4440                       		neg.w	d0
000079F4 323C 0008                  		move.w	#8,d1
000079F8                            	@bushLoop:		
000079F8 32C0                       		move.w	d0,(a1)+
000079FA 51C9 FFFC                  		dbf	d1,@bushLoop
000079FE                            
000079FE 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007A02 4440                       		neg.w	d0
00007A04 323C 000F                  		move.w	#$F,d1
00007A08                            	@interiorLoop:		
00007A08 32C0                       		move.w	d0,(a1)+
00007A0A 51C9 FFFC                  		dbf	d1,@interiorLoop
00007A0E                            
00007A0E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007A12 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007A16 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007A1A 3400                       		move.w	d0,d2
00007A1C 0C40 0100                  		cmpi.w	#$100,d0
00007A20 6500                       		bcs.s	@limitY
00007A22 303C 0100                  		move.w	#$100,d0
00007A26                            	@limitY:
00007A26 0240 01F0                  		andi.w	#$1F0,d0
00007A2A E648                       		lsr.w	#3,d0
00007A2C 45F2 0000                  		lea	(a2,d0),a2
00007A30 6000 0000                  		bra.w	Bg_Scroll_X
00007A34                            ; End of function Deform_MZ
00007A34                            
00007A34                            ; ---------------------------------------------------------------------------
00007A34                            ; Star Light Zone background layer deformation code
00007A34                            ; ---------------------------------------------------------------------------
00007A34                            
00007A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A34                            
00007A34                            
00007A34                            Deform_SLZ:
00007A34                            	; vertical scrolling
00007A34 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007A38 48C5                       		ext.l	d5
00007A3A EF85                       		asl.l	#7,d5
00007A3C 6100 0000                  		bsr.w	Bg_Scroll_Y
00007A40 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007A46                            	; calculate background scroll buffer
00007A46 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007A4A 3438 F700                  		move.w	(v_screenposx).w,d2
00007A4E 4442                       		neg.w	d2
00007A50 3002                       		move.w	d2,d0
00007A52 E640                       		asr.w	#3,d0
00007A54 9042                       		sub.w	d2,d0
00007A56 48C0                       		ext.l	d0
00007A58 E980                       		asl.l	#4,d0
00007A5A 81FC 001C                  		divs.w	#$1C,d0
00007A5E 48C0                       		ext.l	d0
00007A60 E980                       		asl.l	#4,d0
00007A62 E180                       		asl.l	#8,d0
00007A64 7600                       		moveq	#0,d3
00007A66 3602                       		move.w	d2,d3
00007A68 323C 001B                  		move.w	#$1B,d1
00007A6C                            	@starLoop:		
00007A6C 32C3                       		move.w	d3,(a1)+
00007A6E 4843                       		swap	d3
00007A70 D680                       		add.l	d0,d3
00007A72 4843                       		swap	d3
00007A74 51C9 FFF6                  		dbf	d1,@starLoop
00007A78                            
00007A78 3002                       		move.w	d2,d0
00007A7A E640                       		asr.w	#3,d0
00007A7C 3200                       		move.w	d0,d1
00007A7E E241                       		asr.w	#1,d1
00007A80 D041                       		add.w	d1,d0
00007A82 323C 0004                  		move.w	#4,d1
00007A86                            	@buildingLoop1:		; distant black buildings
00007A86 32C0                       		move.w	d0,(a1)+
00007A88 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007A8C                            
00007A8C 3002                       		move.w	d2,d0
00007A8E E440                       		asr.w	#2,d0
00007A90 323C 0004                  		move.w	#4,d1
00007A94                            	@buildingLoop2:		; closer buildings
00007A94 32C0                       		move.w	d0,(a1)+
00007A96 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007A9A                            
00007A9A 3002                       		move.w	d2,d0
00007A9C E240                       		asr.w	#1,d0
00007A9E 323C 001D                  		move.w	#$1D,d1
00007AA2                            	@bottomLoop:		; bottom part of background
00007AA2 32C0                       		move.w	d0,(a1)+
00007AA4 51C9 FFFC                  		dbf	d1,@bottomLoop
00007AA8                            
00007AA8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007AAC 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007AB0 3400                       		move.w	d0,d2
00007AB2 0440 00C0                  		subi.w	#$C0,d0
00007AB6 0240 03F0                  		andi.w	#$3F0,d0
00007ABA E648                       		lsr.w	#3,d0
00007ABC 45F2 0000                  		lea	(a2,d0),a2
00007AC0                            ;-------------------------------------------------------------------------------
00007AC0                            ;-------------------------------------------------------------------------------
00007AC0                            Bg_Scroll_X:
00007AC0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007AC4 323C 000E                  		move.w	#$E,d1
00007AC8 3038 F700                  		move.w	(v_screenposx).w,d0
00007ACC 4440                       		neg.w	d0
00007ACE 4840                       		swap	d0
00007AD0 0242 000F                  		andi.w	#$F,d2
00007AD4 D442                       		add.w	d2,d2
00007AD6 301A                       		move.w	(a2)+,d0
00007AD8 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007ADC                            	@blockLoop:
00007ADC 301A                       		move.w	(a2)+,d0
00007ADE                            	@pixelJump:		
00007ADE 22C0                       		move.l	d0,(a1)+
00007AE0 22C0                       		move.l	d0,(a1)+
00007AE2 22C0                       		move.l	d0,(a1)+
00007AE4 22C0                       		move.l	d0,(a1)+
00007AE6 22C0                       		move.l	d0,(a1)+
00007AE8 22C0                       		move.l	d0,(a1)+
00007AEA 22C0                       		move.l	d0,(a1)+
00007AEC 22C0                       		move.l	d0,(a1)+
00007AEE 22C0                       		move.l	d0,(a1)+
00007AF0 22C0                       		move.l	d0,(a1)+
00007AF2 22C0                       		move.l	d0,(a1)+
00007AF4 22C0                       		move.l	d0,(a1)+
00007AF6 22C0                       		move.l	d0,(a1)+
00007AF8 22C0                       		move.l	d0,(a1)+
00007AFA 22C0                       		move.l	d0,(a1)+
00007AFC 22C0                       		move.l	d0,(a1)+
00007AFE 51C9 FFDC                  		dbf	d1,@blockLoop
00007B02 4E75                       		rts
00007B04                            
00007B04                            ; ---------------------------------------------------------------------------
00007B04                            ; Spring Yard Zone background layer deformation	code
00007B04                            ; ---------------------------------------------------------------------------
00007B04                            
00007B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B04                            
00007B04                            
00007B04                            Deform_SYZ:
00007B04                            	; vertical scrolling
00007B04 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007B08 48C5                       		ext.l	d5
00007B0A E985                       		asl.l	#4,d5
00007B0C 2205                       		move.l	d5,d1
00007B0E E385                       		asl.l	#1,d5
00007B10 DA81                       		add.l	d1,d5
00007B12 6100 0000                  		bsr.w	Bg_Scroll_Y
00007B16 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007B1C                            	; calculate background scroll buffer
00007B1C 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007B20 3438 F700                  		move.w	(v_screenposx).w,d2
00007B24 4442                       		neg.w	d2
00007B26 3002                       		move.w	d2,d0
00007B28 E640                       		asr.w	#3,d0
00007B2A 9042                       		sub.w	d2,d0
00007B2C 48C0                       		ext.l	d0
00007B2E E780                       		asl.l	#3,d0
00007B30 81FC 0008                  		divs.w	#8,d0
00007B34 48C0                       		ext.l	d0
00007B36 E980                       		asl.l	#4,d0
00007B38 E180                       		asl.l	#8,d0
00007B3A 7600                       		moveq	#0,d3
00007B3C 3602                       		move.w	d2,d3
00007B3E E243                       		asr.w	#1,d3
00007B40 323C 0007                  		move.w	#7,d1
00007B44                            	@cloudLoop:		
00007B44 32C3                       		move.w	d3,(a1)+
00007B46 4843                       		swap	d3
00007B48 D680                       		add.l	d0,d3
00007B4A 4843                       		swap	d3
00007B4C 51C9 FFF6                  		dbf	d1,@cloudLoop
00007B50                            
00007B50 3002                       		move.w	d2,d0
00007B52 E640                       		asr.w	#3,d0
00007B54 323C 0004                  		move.w	#4,d1
00007B58                            	@mountainLoop:		
00007B58 32C0                       		move.w	d0,(a1)+
00007B5A 51C9 FFFC                  		dbf	d1,@mountainLoop
00007B5E                            
00007B5E 3002                       		move.w	d2,d0
00007B60 E440                       		asr.w	#2,d0
00007B62 323C 0005                  		move.w	#5,d1
00007B66                            	@buildingLoop:		
00007B66 32C0                       		move.w	d0,(a1)+
00007B68 51C9 FFFC                  		dbf	d1,@buildingLoop
00007B6C                            
00007B6C 3002                       		move.w	d2,d0
00007B6E 3202                       		move.w	d2,d1
00007B70 E241                       		asr.w	#1,d1
00007B72 9041                       		sub.w	d1,d0
00007B74 48C0                       		ext.l	d0
00007B76 E980                       		asl.l	#4,d0
00007B78 81FC 000E                  		divs.w	#$E,d0
00007B7C 48C0                       		ext.l	d0
00007B7E E980                       		asl.l	#4,d0
00007B80 E180                       		asl.l	#8,d0
00007B82 7600                       		moveq	#0,d3
00007B84 3602                       		move.w	d2,d3
00007B86 E243                       		asr.w	#1,d3
00007B88 323C 000D                  		move.w	#$D,d1
00007B8C                            	@bushLoop:		
00007B8C 32C3                       		move.w	d3,(a1)+
00007B8E 4843                       		swap	d3
00007B90 D680                       		add.l	d0,d3
00007B92 4843                       		swap	d3
00007B94 51C9 FFF6                  		dbf	d1,@bushLoop
00007B98                            
00007B98 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007B9C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007BA0 3400                       		move.w	d0,d2
00007BA2 0240 01F0                  		andi.w	#$1F0,d0
00007BA6 E648                       		lsr.w	#3,d0
00007BA8 45F2 0000                  		lea	(a2,d0),a2
00007BAC 6000 FF12                  		bra.w	Bg_Scroll_X
00007BB0                            ; End of function Deform_SYZ
00007BB0                            
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            ; Scrap	Brain Zone background layer deformation	code
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            
00007BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BB0                            
00007BB0                            
00007BB0                            Deform_SBZ:
00007BB0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BB4 48C4                       		ext.l	d4
00007BB6 ED84                       		asl.l	#6,d4
00007BB8 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007BBC 48C5                       		ext.l	d5
00007BBE E985                       		asl.l	#4,d5
00007BC0 E385                       		asl.l	#1,d5
00007BC2 6100 0000                  		bsr.w	BGScroll_XY
00007BC6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BCC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007BD0 323C 00DF                  		move.w	#223,d1
00007BD4 3038 F700                  		move.w	(v_screenposx).w,d0
00007BD8 4440                       		neg.w	d0
00007BDA 4840                       		swap	d0
00007BDC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007BE0 4440                       		neg.w	d0
00007BE2                            
00007BE2                            loc_6576:
00007BE2 22C0                       		move.l	d0,(a1)+
00007BE4 51C9 FFFC                  		dbf	d1,loc_6576
00007BE8 4E75                       		rts	
00007BEA                            ;-------------------------------------------------------------------------------
00007BEA                            Deform_SBZ2:;loc_68A2:
00007BEA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BEE 48C4                       		ext.l	d4
00007BF0 ED84                       		asl.l	#6,d4
00007BF2 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007BF6 48C5                       		ext.l	d5
00007BF8 E985                       		asl.l	#4,d5
00007BFA E385                       		asl.l	#1,d5
00007BFC 6100 0000                  		bsr.w	BGScroll_XY
00007C00 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C06 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007C0A 323C 00DF                  		move.w	#223,d1
00007C0E 3038 F700                  		move.w	(v_screenposx).w,d0
00007C12 4440                       		neg.w	d0
00007C14 4840                       		swap	d0
00007C16 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C1A 4440                       		neg.w	d0
00007C1C                            
00007C1C                            loc_6577:
00007C1C 22C0                       		move.l	d0,(a1)+
00007C1E 51C9 FFFC                  		dbf	d1,loc_6577
00007C22 4E75                       		rts	
00007C24                            
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            
00007C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C24                            
00007C24                            
00007C24                            ScrollHoriz:
00007C24 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007C28 6100                       		bsr.s	MoveScreenHoriz
00007C2A 3038 F700                  		move.w	(v_screenposx).w,d0
00007C2E 0240 0010                  		andi.w	#$10,d0
00007C32 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007C36 B300                       		eor.b	d1,d0
00007C38 6600                       		bne.s	@return
00007C3A 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007C40 3038 F700                  		move.w	(v_screenposx).w,d0
00007C44 9044                       		sub.w	d4,d0		; compare new with old screen position
00007C46 6A00                       		bpl.s	@scrollRight
00007C48                            
00007C48 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007C4E 4E75                       		rts	
00007C50                            
00007C50                            	@scrollRight:
00007C50 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007C56                            
00007C56                            	@return:
00007C56 4E75                       		rts	
00007C58                            ; End of function ScrollHoriz
00007C58                            
00007C58                            
00007C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C58                            
00007C58                            MoveScreenHoriz:
00007C58 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007C5C 6700 0000                  		beq.w	@cont		
00007C60 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007C66                            		
00007C66                            	@cont:		
00007C66 3238 C904                  		move.w	($FFFFC904).w,d1
00007C6A 6700                       		beq.s	@cont1
00007C6C 0441 0100                  		sub.w	#$100,d1
00007C70 31C1 C904                  		move.w	d1,($FFFFC904).w
00007C74 7200                       		moveq	#0,d1
00007C76 1238 C904                  		move.b	($FFFFC904).w,d1
00007C7A E509                       		lsl.b	#2,d1
00007C7C 5801                       		addq.b	#4,d1
00007C7E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007C82 9001                       		sub.b	d1,d0
00007C84 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007C88 3031 0000                  		move.w	(a1,d0.w),d0
00007C8C 0240 3FFF                  		and.w	#$3FFF,d0
00007C90 6000                       		bra.s	@cont2
00007C92                            		
00007C92                            @cont1:
00007C92 3038 D008                  		move.w	($FFFFD008).w,d0
00007C96                            		
00007C96                            @cont2:
00007C96 9078 F700                  		sub.w	($FFFFF700).w,d0
00007C9A 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007C9E 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007CA0 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007CA4 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007CA6 4278 F73A                          clr.w    (v_scrshiftx).w
00007CAA 4E75                               rts 
00007CAC                            ; ===========================================================================
00007CAC                            
00007CAC                            SH_AheadOfMid:
00007CAC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007CB0 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007CB2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007CB6                            
00007CB6                                SH_Ahead16:
00007CB6 D078 F700                          add.w    (v_screenposx).w,d0
00007CBA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007CBE 6D00                               blt.s    SH_SetScreen
00007CC0 3038 F72A                          move.w    (v_limitright2).w,d0
00007CC4                            
00007CC4                            SH_SetScreen:
00007CC4 3200                               move.w    d0,d1
00007CC6 9278 F700                          sub.w    (v_screenposx).w,d1
00007CCA E141                               asl.w    #8,d1
00007CCC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007CD0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007CD4 4E75                               rts 
00007CD6                            ; ===========================================================================
00007CD6                            
00007CD6                            SH_BehindMid:
00007CD6 0C40 FFF0                  		cmpi.w	#-$10,d0
00007CDA 6400                       		bcc.s	@cont
00007CDC 303C FFF0                  		move.w	#-$10,d0	
00007CE0                            
00007CE0                            @cont:
00007CE0 D078 F700                  		add.w	(v_screenposx).w,d0
00007CE4 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007CE8 6EDA                       		bgt.s	SH_SetScreen
00007CEA 3038 F728                  		move.w	(v_limitleft2).w,d0
00007CEE 60D4                       		bra.s	SH_SetScreen
00007CF0                            ; End of function MoveScreenHoriz
00007CF0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007CF0                            
00007CF0                            MoveScreenHorizEXT:
00007CF0 3238 C904                  		move.w	($FFFFC904).w,d1
00007CF4 6700                       		beq.s	@cont1
00007CF6 0441 0100                  		sub.w	#$100,d1
00007CFA 31C1 C904                  		move.w	d1,($FFFFC904).w
00007CFE 7200                       		moveq	#0,d1
00007D00 1238 C904                  		move.b	($FFFFC904).w,d1
00007D04 E509                       		lsl.b	#2,d1
00007D06 5801                       		addq.b	#4,d1
00007D08 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007D0C 9001                       		sub.b	d1,d0
00007D0E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007D12 3031 0000                  		move.w	(a1,d0.w),d0
00007D16 0240 3FFF                  		and.w	#$3FFF,d0
00007D1A 6000                       		bra.s	@cont2
00007D1C                            		
00007D1C                            @cont1:
00007D1C 3038 D008                  		move.w	($FFFFD008).w,d0
00007D20                            		
00007D20                            @cont2:
00007D20 9078 F700                  		sub.w	($FFFFF700).w,d0
00007D24 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007D28 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007D2A 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007D2C 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            SHEXT_ProperlyFramed:
00007D2E 4278 F73A                          clr.w    (v_scrshiftx).w
00007D32 4E75                               rts 
00007D34                            ; ===========================================================================
00007D34                            
00007D34                            SHEXT_AheadOfMid:
00007D34 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007D38 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007D3A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007D3E                            
00007D3E                            SHEXT_Ahead16:
00007D3E D078 F700                          add.w    (v_screenposx).w,d0
00007D42 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007D46 6D00                               blt.s    SHEXT_SetScreen
00007D48 3038 F72A                          move.w    (v_limitright2).w,d0
00007D4C                            
00007D4C                            SHEXT_SetScreen:
00007D4C 3200                               move.w    d0,d1
00007D4E 9278 F700                          sub.w    (v_screenposx).w,d1
00007D52 E141                               asl.w    #8,d1
00007D54 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007D58 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007D5C 4E75                               rts
00007D5E                            
00007D5E                            ; ===========================================================================
00007D5E                            
00007D5E                            SHEXT_BehindMid:
00007D5E 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007D62 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007D64 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007D68                            
00007D68                            SHEXT_Behind16:
00007D68 D078 F700                          add.w    (v_screenposx).w,d0
00007D6C B078 F728                          cmp.w    (v_limitleft2).w,d0
00007D70 6EDA                               bgt.s    SHEXT_SetScreen
00007D72 3038 F728                          move.w    (v_limitleft2).w,d0
00007D76 60D4                               bra.s    SHEXT_SetScreen
00007D78                                  
00007D78                            ; End of function MoveScreenHoriz
00007D78                            
00007D78                            
00007D78                            ; ---------------------------------------------------------------------------
00007D78                            ; Subroutine to	scroll the level vertically as Sonic moves
00007D78                            ; ---------------------------------------------------------------------------
00007D78                            
00007D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D78                            
00007D78                            
00007D78                            ScrollVertical:
00007D78 7200                       		moveq	#0,d1
00007D7A 3038 D00C                  		move.w	(v_player+obY).w,d0
00007D7E 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007D82 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007D88 6700                       		beq.s	SV_NotRolling	; if not, branch
00007D8A 5B40                       		subq.w	#5,d0
00007D8C                            
00007D8C                            	SV_NotRolling:
00007D8C 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007D92 6700                       		beq.s	loc_664A	; if not, branch
00007D94                            
00007D94 0640 0020                  		addi.w	#32,d0
00007D98 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007D9C 6500                       		bcs.s	loc_6696
00007D9E 0440 0040                  		subi.w	#64,d0
00007DA2 6400                       		bcc.s	loc_6696
00007DA4 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007DA8 6600                       		bne.s	loc_66A8
00007DAA 6000                       		bra.s	loc_6656
00007DAC                            ; ===========================================================================
00007DAC                            
00007DAC                            loc_664A:
00007DAC 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007DB0 6600                       		bne.s	loc_665C
00007DB2 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007DB6 6600                       		bne.s	loc_66A8
00007DB8                            
00007DB8                            loc_6656:
00007DB8 4278 F73C                  		clr.w	(v_scrshifty).w
00007DBC 4E75                       		rts	
00007DBE                            ; ===========================================================================
00007DBE                            
00007DBE                            loc_665C:
00007DBE 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007DC4 6600                       		bne.s	loc_6684
00007DC6 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007DCA 6A00                       		bpl.s	loc_666C
00007DCC 4441                       		neg.w	d1
00007DCE                            
00007DCE                            loc_666C:
00007DCE 0C41 0800                  		cmpi.w	#$800,d1
00007DD2 6400                       		bcc.s	loc_6696
00007DD4 323C 0600                  		move.w	#$600,d1
00007DD8 0C40 0006                  		cmpi.w	#6,d0
00007DDC 6E00                       		bgt.s	loc_66F6
00007DDE 0C40 FFFA                  		cmpi.w	#-6,d0
00007DE2 6D00                       		blt.s	loc_66C0
00007DE4 6000                       		bra.s	loc_66AE
00007DE6                            ; ===========================================================================
00007DE6                            
00007DE6                            loc_6684:
00007DE6 323C 0200                  		move.w	#$200,d1
00007DEA 0C40 0002                  		cmpi.w	#2,d0
00007DEE 6E00                       		bgt.s	loc_66F6
00007DF0 0C40 FFFE                  		cmpi.w	#-2,d0
00007DF4 6D00                       		blt.s	loc_66C0
00007DF6 6000                       		bra.s	loc_66AE
00007DF8                            ; ===========================================================================
00007DF8                            
00007DF8                            loc_6696:
00007DF8 323C 1000                  		move.w	#$1000,d1
00007DFC 0C40 0010                  		cmpi.w	#$10,d0
00007E00 6E00                       		bgt.s	loc_66F6
00007E02 0C40 FFF0                  		cmpi.w	#-$10,d0
00007E06 6D00                       		blt.s	loc_66C0
00007E08 6000                       		bra.s	loc_66AE
00007E0A                            ; ===========================================================================
00007E0A                            
00007E0A                            loc_66A8:
00007E0A 7000                       		moveq	#0,d0
00007E0C 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007E10                            
00007E10                            loc_66AE:
00007E10 7200                       		moveq	#0,d1
00007E12 3200                       		move.w	d0,d1
00007E14 D278 F704                  		add.w	(v_screenposy).w,d1
00007E18 4A40                       		tst.w	d0
00007E1A 6A00 0000                  		bpl.w	loc_6700
00007E1E 6000 0000                  		bra.w	loc_66CC
00007E22                            ; ===========================================================================
00007E22                            
00007E22                            loc_66C0:
00007E22 4441                       		neg.w	d1
00007E24 48C1                       		ext.l	d1
00007E26 E181                       		asl.l	#8,d1
00007E28 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007E2C 4841                       		swap	d1
00007E2E                            
00007E2E                            loc_66CC:
00007E2E B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007E32 6E00                       		bgt.s	loc_6724
00007E34 0C41 FF00                  		cmpi.w	#-$100,d1
00007E38 6E00                       		bgt.s	loc_66F0
00007E3A 0241 07FF                  		andi.w	#$7FF,d1
00007E3E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007E44 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007E4A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007E50 6000                       		bra.s	loc_6724
00007E52                            ; ===========================================================================
00007E52                            
00007E52                            loc_66F0:
00007E52 3238 F72C                  		move.w	(v_limittop2).w,d1
00007E56 6000                       		bra.s	loc_6724
00007E58                            ; ===========================================================================
00007E58                            
00007E58                            loc_66F6:
00007E58 48C1                       		ext.l	d1
00007E5A E181                       		asl.l	#8,d1
00007E5C D2B8 F704                  		add.l	(v_screenposy).w,d1
00007E60 4841                       		swap	d1
00007E62                            
00007E62                            loc_6700:
00007E62 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007E66 6D00                       		blt.s	loc_6724
00007E68 0441 0800                  		subi.w	#$800,d1
00007E6C 6500                       		bcs.s	loc_6720
00007E6E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007E74 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007E7A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007E80 6000                       		bra.s	loc_6724
00007E82                            ; ===========================================================================
00007E82                            
00007E82                            loc_6720:
00007E82 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007E86                            
00007E86                            loc_6724:
00007E86 3838 F704                  		move.w	(v_screenposy).w,d4
00007E8A 4841                       		swap	d1
00007E8C 2601                       		move.l	d1,d3
00007E8E 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007E92 E09B                       		ror.l	#8,d3
00007E94 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007E98 21C1 F704                  		move.l	d1,(v_screenposy).w
00007E9C 3038 F704                  		move.w	(v_screenposy).w,d0
00007EA0 0240 0010                  		andi.w	#$10,d0
00007EA4 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007EA8 B300                       		eor.b	d1,d0
00007EAA 6600                       		bne.s	@return
00007EAC 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007EB2 3038 F704                  		move.w	(v_screenposy).w,d0
00007EB6 9044                       		sub.w	d4,d0
00007EB8 6A00                       		bpl.s	@scrollBottom
00007EBA 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007EC0 4E75                       		rts	
00007EC2                            ; ===========================================================================
00007EC2                            
00007EC2                            	@scrollBottom:
00007EC2 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007EC8                            
00007EC8                            	@return:
00007EC8 4E75                       		rts	
00007ECA                            ; End of function ScrollVertical
00007ECA                            
00007ECA                            
00007ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ECA                            ; Scrolls background and sets redraw flags.
00007ECA                            ; d4 - background x offset * $10000
00007ECA                            ; d5 - background y offset * $10000
00007ECA                            
00007ECA                            BGScroll_XY:
00007ECA 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007ECE 2002                       		move.l	d2,d0
00007ED0 D084                       		add.l	d4,d0
00007ED2 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007ED6 2200                       		move.l	d0,d1
00007ED8 4841                       		swap	d1
00007EDA 0241 0010                  		andi.w	#$10,d1
00007EDE 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007EE2 B701                       		eor.b	d3,d1
00007EE4 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007EE6 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007EEC 9082                       		sub.l	d2,d0	; new - old
00007EEE 6A00                       		bpl.s	@scrollRight
00007EF0 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007EF6 6000                       		bra.s	BGScroll_YRelative
00007EF8                            	@scrollRight:
00007EF8 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007EFE                            BGScroll_YRelative:
00007EFE 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007F02 2003                       		move.l	d3,d0
00007F04 D085                       		add.l	d5,d0
00007F06 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007F0A 2200                       		move.l	d0,d1
00007F0C 4841                       		swap	d1
00007F0E 0241 0010                  		andi.w	#$10,d1
00007F12 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F16 B501                       		eor.b	d2,d1
00007F18 6600                       		bne.s	@return
00007F1A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F20 9083                       		sub.l	d3,d0
00007F22 6A00                       		bpl.s	@scrollBottom
00007F24 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007F2A 4E75                       		rts
00007F2C                            	@scrollBottom:
00007F2C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007F32                            	@return:
00007F32 4E75                       		rts
00007F34                            ; End of function BGScroll_XY
00007F34                            
00007F34                            Bg_Scroll_Y:
00007F34 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007F38 2003                       		move.l	d3,d0
00007F3A D085                       		add.l	d5,d0
00007F3C 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007F40 2200                       		move.l	d0,d1
00007F42 4841                       		swap	d1
00007F44 0241 0010                  		andi.w	#$10,d1
00007F48 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F4C B501                       		eor.b	d2,d1
00007F4E 6600                       		bne.s	@return
00007F50 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F56 9083                       		sub.l	d3,d0
00007F58 6A00                       		bpl.s	@scrollBottom
00007F5A 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007F60 4E75                       		rts
00007F62                            	@scrollBottom:
00007F62 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007F68                            	@return:
00007F68 4E75                       		rts
00007F6A                            
00007F6A                            
00007F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F6A                            
00007F6A                            
00007F6A                            BGScroll_YAbsolute:
00007F6A 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007F6E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007F72 3200                       		move.w	d0,d1
00007F74 0241 0010                  		andi.w	#$10,d1
00007F78 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F7C B501                       		eor.b	d2,d1
00007F7E 6600                       		bne.s	@return
00007F80 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F86 9043                       		sub.w	d3,d0
00007F88 6A00                       		bpl.s	@scrollBottom
00007F8A 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007F90 4E75                       		rts
00007F92                            	@scrollBottom:
00007F92 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007F98                            	@return:
00007F98 4E75                       		rts
00007F9A                            ; End of function BGScroll_YAbsolute
00007F9A                            
00007F9A                            
00007F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F9A                            ; d6 - bit to set for redraw
00007F9A                            
00007F9A                            BGScroll_Block1:
00007F9A 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007F9E 2002                       		move.l	d2,d0
00007FA0 D084                       		add.l	d4,d0
00007FA2 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007FA6 2200                       		move.l	d0,d1
00007FA8 4841                       		swap	d1
00007FAA 0241 0010                  		andi.w	#$10,d1
00007FAE 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007FB2 B701                       		eor.b	d3,d1
00007FB4 6600                       		bne.s	@return
00007FB6 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007FBC 9082                       		sub.l	d2,d0
00007FBE 6A00                       		bpl.s	@scrollRight
00007FC0 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007FC4 6000                       		bra.s	@return
00007FC6                            	@scrollRight:
00007FC6 5206                       		addq.b	#1,d6
00007FC8 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007FCC                            	@return:
00007FCC 4E75                       		rts
00007FCE                            ; End of function BGScroll_Block1
00007FCE                            
00007FCE                            
00007FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FCE                            
00007FCE                            
00007FCE                            BGScroll_Block2:
00007FCE 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007FD2 2002                       		move.l	d2,d0
00007FD4 D084                       		add.l	d4,d0
00007FD6 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007FDA 2200                       		move.l	d0,d1
00007FDC 4841                       		swap	d1
00007FDE 0241 0010                  		andi.w	#$10,d1
00007FE2 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007FE6 B701                       		eor.b	d3,d1
00007FE8 6600                       		bne.s	@return
00007FEA 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007FF0 9082                       		sub.l	d2,d0
00007FF2 6A00                       		bpl.s	@scrollRight
00007FF4 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007FF8 6000                       		bra.s	@return
00007FFA                            	@scrollRight:
00007FFA 5206                       		addq.b	#1,d6
00007FFC 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008000                            	@return:
00008000 4E75                       		rts
00008002                            ;-------------------------------------------------------------------------------
00008002                            BGScroll_Block3:
00008002 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008006 2002                       		move.l	d2,d0
00008008 D084                       		add.l	d4,d0
0000800A 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000800E 2200                       		move.l	d0,d1
00008010 4841                       		swap	d1
00008012 0241 0010                  		andi.w	#$10,d1
00008016 1638 F750                  		move.b	(v_bg3_xblock).w,d3
0000801A B701                       		eor.b	d3,d1
0000801C 6600                       		bne.s	@return
0000801E 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00008024 9082                       		sub.l	d2,d0
00008026 6A00                       		bpl.s	@scrollRight
00008028 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000802C 6000                       		bra.s	@return
0000802E                            	@scrollRight:
0000802E 5206                       		addq.b	#1,d6
00008030 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008034                            	@return:
00008034 4E75                       		rts
00008034 4E75                       		rts
00008036                            
00008036                            
00008036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008036                            
00008036                            ; sub_6886:
00008036                            LoadTilesAsYouMove_BGOnly:
00008036 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000803C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008042 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008046 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000804A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000804E 343C 6000                  		move.w	#$6000,d2
00008052 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008056 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
0000805A 47F8 F710                  		lea	(v_bg2screenposx).w,a3
0000805E 6000 0000                  		bra.w	DrawBGScrollBlock2
00008062                            ; End of function sub_6886
00008062                            
00008062                            ; ---------------------------------------------------------------------------
00008062                            ; Subroutine to	display	correct	tiles as you move
00008062                            ; ---------------------------------------------------------------------------
00008062                            
00008062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008062                            
00008062                            
00008062                            LoadTilesAsYouMove:
00008062 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008068 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000806E                            		; First, update the background
0000806E 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00008072 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00008076 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000807A 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
0000807E 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008082 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008086 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
0000808A 6100 0000                  		bsr.w	DrawBGScrollBlock2
0000808E                            		; REV01 added a third scroll block, though, technically,
0000808E                            		; the RAM for it was already there in REV00
0000808E 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00008092 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008096 6100 0000                  		bsr.w	DrawBGScrollBlock3
0000809A                            		; Then, update the foreground
0000809A 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
0000809E 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
000080A2 49F8 A400                  		lea	(v_lvllayout).w,a4
000080A6 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
000080AA                            		; The FG's update function is inlined here
000080AA 4A12                       		tst.b	(a2)
000080AC 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
000080AE 0892 0000                  		bclr	#0,(a2)
000080B2 6700                       		beq.s	loc_6908
000080B4                            		; Draw new tiles at the top
000080B4 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
000080B6 7AF0                       		moveq	#-16,d5 ; X coordinate
000080B8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080BC 78F0                       		moveq	#-16,d4 ; Y coordinate
000080BE 7AF0                       		moveq	#-16,d5 ; X coordinate
000080C0 6100 0000                  		bsr.w	DrawBlocks_LR
000080C4                            
000080C4                            loc_6908:
000080C4 0892 0001                  		bclr	#1,(a2)
000080C8 6700                       		beq.s	loc_6922
000080CA                            		; Draw new tiles at the bottom
000080CA 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000080CE 7AF0                       		moveq	#-16,d5
000080D0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080D4 383C 00E0                  		move.w	#224,d4
000080D8 7AF0                       		moveq	#-16,d5
000080DA 6100 0000                  		bsr.w	DrawBlocks_LR
000080DE                            
000080DE                            loc_6922:
000080DE 0892 0002                  		bclr	#2,(a2)
000080E2 6700                       		beq.s	loc_6938
000080E4                            		; Draw new tiles on the left
000080E4 78F0                       		moveq	#-16,d4
000080E6 7AF0                       		moveq	#-16,d5
000080E8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080EC 78F0                       		moveq	#-16,d4
000080EE 7AF0                       		moveq	#-16,d5
000080F0 6100 0000                  		bsr.w	DrawBlocks_TB
000080F4                            
000080F4                            loc_6938:
000080F4 0892 0003                  		bclr	#3,(a2)
000080F8 6700                       		beq.s	locret_6952
000080FA                            		; Draw new tiles on the right
000080FA 78F0                       		moveq	#-16,d4
000080FC 3A3C 0140                  		move.w	#320,d5
00008100 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008104 78F0                       		moveq	#-16,d4
00008106 3A3C 0140                  		move.w	#320,d5
0000810A 6100 0000                  		bsr.w	DrawBlocks_TB
0000810E                            
0000810E                            locret_6952:
0000810E 4E75                       		rts	
00008110                            ; End of function LoadTilesAsYouMove
00008110                            
00008110                            
00008110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008110                            
00008110                            ; sub_6954:
00008110                            DrawBGScrollBlock1:
00008110 4A12                       		tst.b	(a2)
00008112 6700 0000                  		beq.w	locret_69F2
00008116 0892 0000                  		bclr	#0,(a2)
0000811A 6700                       		beq.s	loc_6972
0000811C                            		; Draw new tiles at the top
0000811C 78F0                       		moveq	#-16,d4
0000811E 7AF0                       		moveq	#-16,d5
00008120 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008124 78F0                       		moveq	#-16,d4
00008126 7AF0                       		moveq	#-16,d5
00008128 6100 0000                  			bsr.w	DrawBlocks_LR
0000812C                            
0000812C                            loc_6972:
0000812C 0892 0001                  		bclr	#1,(a2)
00008130 6700                       		beq.s	loc_698E
00008132                            		; Draw new tiles at the top
00008132 383C 00E0                  		move.w	#224,d4
00008136 7AF0                       		moveq	#-16,d5
00008138 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000813C 383C 00E0                  		move.w	#224,d4
00008140 7AF0                       		moveq	#-16,d5
00008142 6100 0000                  			bsr.w	DrawBlocks_LR
00008146                            
00008146                            loc_698E:
00008146 0892 0002                  		bclr	#2,(a2)
0000814A                            
0000814A                            
0000814A 6700                       			beq.s	locj_6D56
0000814C                            			; Draw new tiles on the left
0000814C 78F0                       			moveq	#-16,d4
0000814E 7AF0                       			moveq	#-16,d5
00008150 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008154 78F0                       			moveq	#-16,d4
00008156 7AF0                       			moveq	#-16,d5
00008158 6100 0000                  			bsr.w	DrawBlocks_TB
0000815C                            	locj_6D56:
0000815C                            
0000815C 0892 0003                  			bclr	#3,(a2)
00008160 6700                       			beq.s	locj_6D70
00008162                            			; Draw new tiles on the right
00008162 78F0                       			moveq	#-16,d4
00008164 3A3C 0140                  			move.w	#320,d5
00008168 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000816C 78F0                       			moveq	#-16,d4
0000816E 3A3C 0140                  			move.w	#320,d5
00008172 6100 0000                  			bsr.w	DrawBlocks_TB
00008176                            	locj_6D70:
00008176                            
00008176 0892 0004                  			bclr	#4,(a2)
0000817A 6700                       			beq.s	locj_6D88
0000817C                            			; Draw entire row at the top
0000817C 78F0                       			moveq	#-16,d4
0000817E 7A00                       			moveq	#0,d5
00008180 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008184 78F0                       			moveq	#-16,d4
00008186 7A00                       			moveq	#0,d5
00008188 7C1F                       			moveq	#(512/16)-1,d6
0000818A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000818E                            	locj_6D88:
0000818E                            
0000818E 0892 0005                  			bclr	#5,(a2)
00008192 6700                       			beq.s	locret_69F2
00008194                            			; Draw entire row at the bottom
00008194 383C 00E0                  			move.w	#224,d4
00008198 7A00                       			moveq	#0,d5
0000819A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000819E 383C 00E0                  			move.w	#224,d4
000081A2 7A00                       			moveq	#0,d5
000081A4 7C1F                       			moveq	#(512/16)-1,d6
000081A6 6100 0000                  			bsr.w	DrawBlocks_LR_3
000081AA                            
000081AA                            locret_69F2:
000081AA 4E75                       		rts	
000081AC                            ; End of function DrawBGScrollBlock1
000081AC                            
000081AC                            
000081AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081AC                            
000081AC                            ; Essentially, this draws everything that isn't scroll block 1
000081AC                            ; sub_69F4:
000081AC                            DrawBGScrollBlock2:
000081AC                            
000081AC 4A12                       			tst.b	(a2)
000081AE 6700 0000                  			beq.w	locj_6DF2
000081B2 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
000081B8 6700 0000                  			beq.w	Draw_SBz
000081BC 0892 0000                  			bclr	#0,(a2)
000081C0 6700                       			beq.s	locj_6DD2
000081C2                            			; Draw new tiles on the left
000081C2 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
000081C6 7AF0                       			moveq	#-16,d5
000081C8 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081CC 383C 0070                  			move.w	#224/2,d4
000081D0 7AF0                       			moveq	#-16,d5
000081D2 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000081D4 6100 0000                  			bsr.w	DrawBlocks_TB_2
000081D8                            	locj_6DD2:
000081D8 0892 0001                  			bclr	#1,(a2)
000081DC 6700                       			beq.s	locj_6DF2
000081DE                            			; Draw new tiles on the right
000081DE 383C 0070                  			move.w	#224/2,d4
000081E2 3A3C 0140                  			move.w	#320,d5
000081E6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081EA 383C 0070                  			move.w	#224/2,d4
000081EE 3A3C 0140                  			move.w	#320,d5
000081F2 7C02                       			moveq	#3-1,d6
000081F4 6100 0000                  			bsr.w	DrawBlocks_TB_2
000081F8                            	locj_6DF2:
000081F8 4E75                       			rts
000081FA                            ;===============================================================================
000081FA                            	locj_6DF4:
000081FA 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
0000820A 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000821A 0200                       			dc.b $02,$00						
0000821C                            ;===============================================================================
0000821C                            	Draw_SBz:
0000821C 78F0                       			moveq	#-16,d4
0000821E 0892 0000                  			bclr	#0,(a2)
00008222 6600                       			bne.s	locj_6E28
00008224 0892 0001                  			bclr	#1,(a2)
00008228 6700                       			beq.s	locj_6E72
0000822A 383C 00E0                  			move.w	#224,d4
0000822E                            	locj_6E28:
0000822E 41F9 0000 81FB             			lea	(locj_6DF4+1).l,a0
00008234 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008238 D044                       			add.w	d4,d0
0000823A 0240 01F0                  			andi.w	#$1F0,d0
0000823E E848                       			lsr.w	#4,d0
00008240 1030 0000                  			move.b	(a0,d0.w),d0
00008244 47F9 0000 0000             			lea	(locj_6FE4).l,a3
0000824A 3673 0000                  			movea.w	(a3,d0.w),a3
0000824E 6700                       			beq.s	locj_6E5E
00008250 7AF0                       			moveq	#-16,d5
00008252 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008256 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000825A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000825E 6100 0000                  			bsr.w	DrawBlocks_LR
00008262 6000                       			bra.s	locj_6E72
00008264                            ;===============================================================================
00008264                            	locj_6E5E:
00008264 7A00                       			moveq	#0,d5
00008266 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000826A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000826E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008272 7C1F                       			moveq	#(512/16)-1,d6
00008274 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008278                            	locj_6E72:
00008278 4A12                       			tst.b	(a2)
0000827A 6600                       			bne.s	locj_6E78
0000827C 4E75                       			rts
0000827E                            ;===============================================================================			
0000827E                            	locj_6E78:
0000827E 78F0                       			moveq	#-16,d4
00008280 7AF0                       			moveq	#-16,d5
00008282 1012                       			move.b	(a2),d0
00008284 0200 00A8                  			andi.b	#$A8,d0
00008288 6700                       			beq.s	locj_6E8C
0000828A E208                       			lsr.b	#1,d0
0000828C 1480                       			move.b	d0,(a2)
0000828E 3A3C 0140                  			move.w	#320,d5
00008292                            	locj_6E8C:
00008292 41F9 0000 81FA             			lea	(locj_6DF4).l,a0
00008298 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000829C 0240 01F0                  			andi.w	#$1F0,d0
000082A0 E848                       			lsr.w	#4,d0
000082A2 41F0 0000                  			lea	(a0,d0.w),a0
000082A6 6000 0000                  			bra.w	locj_6FEC						
000082AA                            ;===============================================================================
000082AA                            
000082AA                            
000082AA                            	; locj_6EA4:
000082AA                            	DrawBGScrollBlock3:
000082AA 4A12                       			tst.b	(a2)
000082AC 6700 0000                  			beq.w	locj_6EF0
000082B0 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000082B6 6700 0000                  			beq.w	Draw_Mz
000082BA 0892 0000                  			bclr	#0,(a2)
000082BE 6700                       			beq.s	locj_6ED0
000082C0                            			; Draw new tiles on the left
000082C0 383C 0040                  			move.w	#$40,d4
000082C4 7AF0                       			moveq	#-16,d5
000082C6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000082CA 383C 0040                  			move.w	#$40,d4
000082CE 7AF0                       			moveq	#-16,d5
000082D0 7C02                       			moveq	#3-1,d6
000082D2 6100 0000                  			bsr.w	DrawBlocks_TB_2
000082D6                            	locj_6ED0:
000082D6 0892 0001                  			bclr	#1,(a2)
000082DA 6700                       			beq.s	locj_6EF0
000082DC                            			; Draw new tiles on the right
000082DC 383C 0040                  			move.w	#$40,d4
000082E0 3A3C 0140                  			move.w	#320,d5
000082E4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000082E8 383C 0040                  			move.w	#$40,d4
000082EC 3A3C 0140                  			move.w	#320,d5
000082F0 7C02                       			moveq	#3-1,d6
000082F2 6100 0000                  			bsr.w	DrawBlocks_TB_2
000082F6                            	locj_6EF0:
000082F6 4E75                       			rts
000082F8                            	locj_6EF2:
000082F8 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008308 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008318 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008328 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008338 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008348 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008358 0200                       			dc.b $02,$00
0000835A                            ;===============================================================================
0000835A                            	Draw_Mz:
0000835A 78F0                       			moveq	#-16,d4
0000835C 0892 0000                  			bclr	#0,(a2)
00008360 6600                       			bne.s	locj_6F66
00008362 0892 0001                  			bclr	#1,(a2)
00008366 6700                       			beq.s	locj_6FAE
00008368 383C 00E0                  			move.w	#224,d4
0000836C                            	locj_6F66:
0000836C 41F9 0000 82F9             			lea	(locj_6EF2+1).l,a0
00008372 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008376 0440 0200                  			subi.w	#$200,d0
0000837A D044                       			add.w	d4,d0
0000837C 0240 07F0                  			andi.w	#$7F0,d0
00008380 E848                       			lsr.w	#4,d0
00008382 1030 0000                  			move.b	(a0,d0.w),d0
00008386 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
0000838A 6700                       			beq.s	locj_6F9A
0000838C 7AF0                       			moveq	#-16,d5
0000838E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008392 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008396 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000839A 6100 0000                  			bsr.w	DrawBlocks_LR
0000839E 6000                       			bra.s	locj_6FAE
000083A0                            ;===============================================================================
000083A0                            	locj_6F9A:
000083A0 7A00                       			moveq	#0,d5
000083A2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000083A6 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083AA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000083AE 7C1F                       			moveq	#(512/16)-1,d6
000083B0 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083B4                            	locj_6FAE:
000083B4 4A12                       			tst.b	(a2)
000083B6 6600                       			bne.s	locj_6FB4
000083B8 4E75                       			rts
000083BA                            ;===============================================================================			
000083BA                            	locj_6FB4:
000083BA 78F0                       			moveq	#-16,d4
000083BC 7AF0                       			moveq	#-16,d5
000083BE 1012                       			move.b	(a2),d0
000083C0 0200 00A8                  			andi.b	#$A8,d0
000083C4 6700                       			beq.s	locj_6FC8
000083C6 E208                       			lsr.b	#1,d0
000083C8 1480                       			move.b	d0,(a2)
000083CA 3A3C 0140                  			move.w	#320,d5
000083CE                            	locj_6FC8:
000083CE 41F9 0000 82F8             			lea	(locj_6EF2).l,a0
000083D4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D8 0440 0200                  			subi.w	#$200,d0
000083DC 0240 07F0                  			andi.w	#$7F0,d0
000083E0 E848                       			lsr.w	#4,d0
000083E2 41F0 0000                  			lea	(a0,d0.w),a0
000083E6 6000 0000                  			bra.w	locj_6FEC
000083EA                            ;===============================================================================			
000083EA                            	locj_6FE4:
000083EA FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000083F2                            	locj_6FEC:
000083F2 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083F4 2E3C 0080 0000             			move.l	#$800000,d7
000083FA                            	locj_6FF4:			
000083FA 7000                       			moveq	#0,d0
000083FC 1018                       			move.b	(a0)+,d0
000083FE 0112                       			btst	d0,(a2)
00008400 6700                       			beq.s	locj_701C
00008402 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008406 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
0000840A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000840E 6100 0000                  			bsr.w	GetBlockData
00008412 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008416 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000841A 6100 0000                  			bsr.w	DrawBlock
0000841E 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008422                            	locj_701C:
00008422 0644 0010                  			addi.w	#16,d4
00008426 51CE FFD2                  			dbf	d6,locj_6FF4
0000842A 4212                       			clr.b	(a2)
0000842C 4E75                       			rts			
0000842E                            
0000842E                            
0000842E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842E                            
0000842E                            ; Don't be fooled by the name: this function's for drawing from left to right
0000842E                            ; when the camera's moving up or down
0000842E                            ; DrawTiles_LR:
0000842E                            DrawBlocks_LR:
0000842E 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
00008430                            ; DrawTiles_LR_2:
00008430                            DrawBlocks_LR_2:
00008430 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008436 2200                       		move.l	d0,d1
00008438                            
00008438                            	@loop:
00008438 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000843C 6100 0000                  		bsr.w	GetBlockData
00008440 2001                       		move.l	d1,d0
00008442 6100 0000                  		bsr.w	DrawBlock
00008446 5801                       		addq.b	#4,d1		; Two tiles ahead
00008448 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
0000844C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008450 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008454 51CE FFE2                  		dbf	d6,@loop
00008458 4E75                       		rts
0000845A                            ; End of function DrawBlocks_LR
0000845A                            
0000845A                            ; DrawTiles_LR_3:
0000845A                            DrawBlocks_LR_3:
0000845A 2E3C 0080 0000             		move.l	#$800000,d7
00008460 2200                       		move.l	d0,d1
00008462                            
00008462                            	@loop:
00008462 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008466 6100 0000                  		bsr.w	GetBlockData_2
0000846A 2001                       		move.l	d1,d0
0000846C 6100 0000                  		bsr.w	DrawBlock
00008470 5801                       		addq.b	#4,d1
00008472 0201 007F                  		andi.b	#$7F,d1
00008476 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000847A 0645 0010                  		addi.w	#16,d5
0000847E 51CE FFE2                  		dbf	d6,@loop
00008482 4E75                       		rts	
00008484                            ; End of function DrawBlocks_LR_3
00008484                            
00008484                            
00008484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008484                            
00008484                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008484                            ; when the camera's moving left or right
00008484                            ; DrawTiles_TB:
00008484                            DrawBlocks_TB:
00008484 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008486                            ; DrawTiles_TB_2:
00008486                            DrawBlocks_TB_2:
00008486 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
0000848C 2200                       		move.l	d0,d1
0000848E                            
0000848E                            	@loop:
0000848E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008492 6100 0000                  		bsr.w	GetBlockData
00008496 2001                       		move.l	d1,d0
00008498 6100 0000                  		bsr.w	DrawBlock
0000849C 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
000084A0 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000084A4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000084A8 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000084AC 51CE FFE0                  		dbf	d6,@loop
000084B0 4E75                       		rts	
000084B2                            ; End of function DrawBlocks_TB_2
000084B2                            
000084B2                            
000084B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084B2                            
000084B2                            ; Draws a block's worth of tiles
000084B2                            ; Parameters:
000084B2                            ; a0 = Pointer to block metadata (block index and X/Y flip)
000084B2                            ; a1 = Pointer to block
000084B2                            ; a5 = Pointer to VDP command port
000084B2                            ; a6 = Pointer to VDP data port
000084B2                            ; d0 = VRAM command to access plane
000084B2                            ; d2 = VRAM plane A/B specifier
000084B2                            ; d7 = Plane row delta
000084B2                            ; DrawTiles:
000084B2                            DrawBlock:
000084B2 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000084B4 4840                       		swap	d0
000084B6 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000084BA 6600                       		bne.s	DrawFlipY
000084BC 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000084C0 6600                       		bne.s	DrawFlipX
000084C2 2A80                       		move.l	d0,(a5)
000084C4 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000084C6 D087                       		add.l	d7,d0		; Next row
000084C8 2A80                       		move.l	d0,(a5)
000084CA 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000084CC 4E75                       		rts	
000084CE                            ; ===========================================================================
000084CE                            
000084CE                            DrawFlipX:
000084CE 2A80                       		move.l	d0,(a5)
000084D0 2819                       		move.l	(a1)+,d4
000084D2 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000084D8 4844                       		swap	d4		; Swap the tiles around
000084DA 2C84                       		move.l	d4,(a6)		; Write top two tiles
000084DC D087                       		add.l	d7,d0		; Next row
000084DE 2A80                       		move.l	d0,(a5)
000084E0 2819                       		move.l	(a1)+,d4
000084E2 0A84 0800 0800             		eori.l	#$8000800,d4
000084E8 4844                       		swap	d4
000084EA 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000084EC 4E75                       		rts	
000084EE                            ; ===========================================================================
000084EE                            
000084EE                            DrawFlipY:
000084EE 0810 0003                  		btst	#3,(a0)
000084F2 6600                       		bne.s	DrawFlipXY
000084F4 2A80                       		move.l	d0,(a5)
000084F6 2A19                       		move.l	(a1)+,d5
000084F8 2819                       		move.l	(a1)+,d4
000084FA 0A84 1000 1000             		eori.l	#$10001000,d4
00008500 2C84                       		move.l	d4,(a6)
00008502 D087                       		add.l	d7,d0
00008504 2A80                       		move.l	d0,(a5)
00008506 0A85 1000 1000             		eori.l	#$10001000,d5
0000850C 2C85                       		move.l	d5,(a6)
0000850E 4E75                       		rts	
00008510                            ; ===========================================================================
00008510                            
00008510                            DrawFlipXY:
00008510 2A80                       		move.l	d0,(a5)
00008512 2A19                       		move.l	(a1)+,d5
00008514 2819                       		move.l	(a1)+,d4
00008516 0A84 1800 1800             		eori.l	#$18001800,d4
0000851C 4844                       		swap	d4
0000851E 2C84                       		move.l	d4,(a6)
00008520 D087                       		add.l	d7,d0
00008522 2A80                       		move.l	d0,(a5)
00008524 0A85 1800 1800             		eori.l	#$18001800,d5
0000852A 4845                       		swap	d5
0000852C 2C85                       		move.l	d5,(a6)
0000852E 4E75                       		rts	
00008530                            ; End of function DrawBlocks
00008530                            
00008530                            ; ===========================================================================
00008530                            ; unused garbage
00008530                            
00008530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008530                            
00008530                            ; Gets address of block at a certain coordinate
00008530                            ; Parameters:
00008530                            ; a4 = Pointer to level layout
00008530                            ; d4 = Relative Y coordinate
00008530                            ; d5 = Relative X coordinate
00008530                            ; Returns:
00008530                            ; a0 = Address of block metadata
00008530                            ; a1 = Address of block
00008530                            ; DrawBlocks:
00008530                            GetBlockData:
00008530 DA53                       			add.w	(a3),d5
00008532                            	GetBlockData_2:
00008532 D86B 0004                  			add.w	4(a3),d4
00008536 43F8 B000                  			lea	(v_16x16).w,a1
0000853A                            		; Turn Y coordinate into index into level layout
0000853A 3604                       		move.w	d4,d3
0000853C E24B                       		lsr.w	#1,d3
0000853E 0243 0380                  		andi.w	#$380,d3
00008542                            		; Turn X coordinate into index into level layout
00008542 E64D                       		lsr.w	#3,d5
00008544 3005                       		move.w	d5,d0
00008546 EA48                       		lsr.w	#5,d0
00008548 0240 007F                  		andi.w	#$7F,d0
0000854C                            		; Get chunk from level layout
0000854C D043                       		add.w	d3,d0
0000854E 76FF                       		moveq	#-1,d3
00008550 1634 0000                  		move.b	(a4,d0.w),d3
00008554 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008556                            		; Turn chunk ID into index into chunk table
00008556 5303                       		subq.b	#1,d3
00008558 0243 007F                  		andi.w	#$7F,d3
0000855C EE5B                       		ror.w	#7,d3
0000855E                            		; Turn Y coordinate into index into chunk
0000855E D844                       		add.w	d4,d4
00008560 0244 01E0                  		andi.w	#$1E0,d4
00008564                            		; Turn X coordinate into index into chunk
00008564 0245 001E                  		andi.w	#$1E,d5
00008568                            		; Get block metadata from chunk
00008568 D644                       		add.w	d4,d3
0000856A D645                       		add.w	d5,d3
0000856C 2043                       		movea.l	d3,a0
0000856E 3610                       		move.w	(a0),d3
00008570                            		; Turn block ID into address
00008570 0243 03FF                  		andi.w	#$3FF,d3
00008574 E74B                       		lsl.w	#3,d3
00008576 D2C3                       		adda.w	d3,a1
00008578                            
00008578                            locret_6C1E:
00008578 4E75                       		rts	
0000857A                            ; End of function GetBlockData
0000857A                            
0000857A                            
0000857A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000857A                            
0000857A                            ; Produces a VRAM plane access command from coordinates
0000857A                            ; Parameters:
0000857A                            ; d4 = Relative Y coordinate
0000857A                            ; d5 = Relative X coordinate
0000857A                            ; Returns VDP command in d0
0000857A                            Calc_VRAM_Pos:
0000857A DA53                       			add.w	(a3),d5
0000857C                            	Calc_VRAM_Pos_2:
0000857C D86B 0004                  			add.w	4(a3),d4
00008580                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008580                            		; Also note that this wraps the value to the size of the plane:
00008580                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008580 0244 00F0                  		andi.w	#$F0,d4
00008584 0245 01F0                  		andi.w	#$1F0,d5
00008588                            		; Transform the adjusted coordinates into a VDP command
00008588 E94C                       		lsl.w	#4,d4
0000858A E44D                       		lsr.w	#2,d5
0000858C D845                       		add.w	d5,d4
0000858E 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008590 4840                       		swap	d0
00008592 3004                       		move.w	d4,d0
00008594 4E75                       		rts	
00008596                            ; End of function Calc_VRAM_Pos
00008596                            
00008596                            
00008596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008596                            ; not used
00008596                            
00008596                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008596                            ; VRAM layout: the only difference is the high bits of the
00008596                            ; plane's VRAM address, which are 10 instead of 11.
00008596                            ; Both the foreground and background are at $C000 and $E000
00008596                            ; respectively, so this one starting at $8000 makes no sense.
00008596                            ; sub_6C3C:
00008596                            Calc_VRAM_Pos_Unknown:
00008596 D86B 0004                  		add.w	4(a3),d4
0000859A DA53                       		add.w	(a3),d5
0000859C 0244 00F0                  		andi.w	#$F0,d4
000085A0 0245 01F0                  		andi.w	#$1F0,d5
000085A4 E94C                       		lsl.w	#4,d4
000085A6 E44D                       		lsr.w	#2,d5
000085A8 D845                       		add.w	d5,d4
000085AA 7002                       		moveq	#2,d0
000085AC 4840                       		swap	d0
000085AE 3004                       		move.w	d4,d0
000085B0 4E75                       		rts	
000085B2                            ; End of function Calc_VRAM_Pos_Unknown
000085B2                            
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            ; Subroutine to	load tiles as soon as the level	appears
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            
000085B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085B2                            
000085B2                            
000085B2                            LoadTilesFromStart:
000085B2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000085B8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000085BE 47F8 F700                  		lea	(v_screenposx).w,a3
000085C2 49F8 A400                  		lea	(v_lvllayout).w,a4
000085C6 343C 4000                  		move.w	#$4000,d2
000085CA 6100                       		bsr.s	DrawChunks
000085CC 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000085D0 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000085D4 343C 6000                  		move.w	#$6000,d2
000085D8 4A38 FE10                  			tst.b	(v_zone).w
000085DC 6700 0000                  			beq.w	Draw_GHz_Bg
000085E0 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000085E6 6700 0000                  			beq.w	Draw_Mz_Bg
000085EA 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000085F0 6700 0000                  			beq.w	Draw_SBz_Bg
000085F4 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000085FA 6700 0000                  			beq.w	Draw_GHz_Bg
000085FE                            ; End of function LoadTilesFromStart
000085FE                            
000085FE                            
000085FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085FE                            
000085FE                            
000085FE                            DrawChunks:
000085FE 78F0                       		moveq	#-16,d4
00008600 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008602                            
00008602                            	@loop:
00008602 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008606 7A00                       		moveq	#0,d5
00008608 3204                       		move.w	d4,d1
0000860A 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000860E 3801                       		move.w	d1,d4
00008610 7A00                       		moveq	#0,d5
00008612 7C1F                       		moveq	#(512/16)-1,d6
00008614 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008618 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000861C 0644 0010                  		addi.w	#16,d4
00008620 51CE FFE0                  		dbf	d6,@loop
00008624 4E75                       		rts	
00008626                            ; End of function DrawChunks
00008626                            
00008626                            	Draw_GHz_Bg:
00008626 7800                       			moveq	#0,d4
00008628 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000862A                            	locj_7224:			
0000862A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000862E 41F9 0000 0000             			lea	(locj_724a),a0
00008634 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008638 D044                       			add.w	d4,d0
0000863A 0240 00F0                  			andi.w	#$F0,d0
0000863E 6100 0000                  			bsr.w	locj_72Ba
00008642 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008646 0644 0010                  			addi.w	#16,d4
0000864A 51CE FFDE                  			dbf	d6,locj_7224
0000864E 4E75                       			rts
00008650                            	locj_724a:
00008650 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
00008660                            ;-------------------------------------------------------------------------------
00008660                            	Draw_Mz_Bg:;locj_725a:
00008660 78F0                       			moveq	#-16,d4
00008662 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008664                            	locj_725E:			
00008664 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008668 41FA FC8F                  			lea	(locj_6EF2+1),a0
0000866C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008670 0440 0200                  			subi.w	#$200,d0
00008674 D044                       			add.w	d4,d0
00008676 0240 07F0                  			andi.w	#$7F0,d0
0000867A 6100 0000                  			bsr.w	locj_72Ba
0000867E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008682 0644 0010                  			addi.w	#16,d4
00008686 51CE FFDC                  			dbf	d6,locj_725E
0000868A 4E75                       			rts
0000868C                            ;-------------------------------------------------------------------------------
0000868C                            	Draw_SBz_Bg:;locj_7288:
0000868C 78F0                       			moveq	#-16,d4
0000868E 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008690                            	locj_728C:			
00008690 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008694 41FA FB65                  			lea	(locj_6DF4+1),a0
00008698 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000869C D044                       			add.w	d4,d0
0000869E 0240 01F0                  			andi.w	#$1F0,d0
000086A2 6100 0000                  			bsr.w	locj_72Ba
000086A6 4CDF 0070                  			movem.l	(sp)+,d4-d6
000086AA 0644 0010                  			addi.w	#16,d4
000086AE 51CE FFE0                  			dbf	d6,locj_728C
000086B2 4E75                       			rts
000086B4                            ;-------------------------------------------------------------------------------
000086B4                            	locj_72B2:
000086B4 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000086BC                            	locj_72Ba:
000086BC E848                       			lsr.w	#4,d0
000086BE 1030 0000                  			move.b	(a0,d0.w),d0
000086C2 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000086C6 6700                       			beq.s	locj_72da
000086C8 7AF0                       			moveq	#-16,d5
000086CA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086CE 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000086D2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086D6 6100 FD56                  			bsr.w	DrawBlocks_LR
000086DA 6000                       			bra.s	locj_72EE
000086DC                            	locj_72da:
000086DC 7A00                       			moveq	#0,d5
000086DE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086E2 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000086E6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086EA 7C1F                       			moveq	#(512/16)-1,d6
000086EC 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000086F0                            	locj_72EE:
000086F0 4E75                       			rts
000086F2                            
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            ; Subroutine to load basic level data
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            
000086F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086F2                            
000086F2                            
000086F2                            LevelDataLoad:
000086F2 7000                       		moveq	#0,d0
000086F4 1038 FE10                  		move.b	(v_zone).w,d0
000086F8 E948                       		lsl.w	#4,d0
000086FA 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008700 45F2 0000                  		lea	(a2,d0.w),a2
00008704 2F0A                       		move.l	a2,-(sp)
00008706 588A                       		addq.l	#4,a2
00008708 205A                       		movea.l	(a2)+,a0
0000870A 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000870E 303C 0000                  		move.w	#0,d0
00008712 6100 8EF0                  		bsr.w	EniDec
00008716 205A                       		movea.l	(a2)+,a0
00008718 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000871E 6100 9062                  		bsr.w	KosDec
00008722 6100 0000                  		bsr.w	LevelLayoutLoad
00008726 301A                       		move.w	(a2)+,d0
00008728 3012                       		move.w	(a2),d0
0000872A 0240 00FF                  		andi.w	#$FF,d0
0000872E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008734 6600                       		bne.s	@notSBZ3	; if not, branch
00008736 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008738                            
00008738                            	@notSBZ3:
00008738 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000873E 6700                       		beq.s	@isSBZorFZ	; if yes, branch
00008740 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008746 6600                       		bne.s	@normalpal	; if not, branch
00008748                            
00008748                            	@isSBZorFZ:
00008748 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
0000874A                            
0000874A                            	@normalpal:
0000874A 6100 9A5C                  		bsr.w	PalLoad1	; load palette (based on d0)
0000874E 245F                       		movea.l	(sp)+,a2
00008750 584A                       		addq.w	#4,a2		; read number for 2nd PLC
00008752 7000                       		moveq	#0,d0
00008754 1012                       		move.b	(a2),d0
00008756 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008758 6100 8D0C                  		bsr.w	AddPLC		; load pattern load cues
0000875C                            
0000875C                            	@skipPLC:
0000875C 4E75                       		rts	
0000875E                            ; End of function LevelDataLoad
0000875E                            
0000875E                            ; ---------------------------------------------------------------------------
0000875E                            ; Level	layout loading subroutine
0000875E                            ; ---------------------------------------------------------------------------
0000875E                            
0000875E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000875E                            
0000875E                            
0000875E                            LevelLayoutLoad:
0000875E 47F8 A400                  		lea	(v_lvllayout).w,a3
00008762 323C 01FF                  		move.w	#$1FF,d1
00008766 7000                       		moveq	#0,d0
00008768                            
00008768                            LevLoad_ClrRam:
00008768 26C0                       		move.l	d0,(a3)+
0000876A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000876E                            
0000876E 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
00008772 7200                       		moveq	#0,d1
00008774 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008778 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
0000877C 7202                       		moveq	#2,d1
0000877E                            ; End of function LevelLayoutLoad
0000877E                            
0000877E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000877E                            
0000877E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877E                            
0000877E                            
0000877E                            LevelLayoutLoad2:
0000877E 3038 FE10                  		move.w	(v_zone).w,d0
00008782 ED08                       		lsl.b	#6,d0
00008784 EA48                       		lsr.w	#5,d0
00008786 3400                       		move.w	d0,d2
00008788 D040                       		add.w	d0,d0
0000878A D042                       		add.w	d2,d0
0000878C D041                       		add.w	d1,d0
0000878E 43F9 0000 0000             		lea	(Level_Index).l,a1
00008794 3031 0000                  		move.w	(a1,d0.w),d0
00008798 43F1 0000                  		lea	(a1,d0.w),a1
0000879C 7200                       		moveq	#0,d1
0000879E 3401                       		move.w	d1,d2
000087A0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000087A2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000087A4                            
000087A4                            LevLoad_NumRows:
000087A4 3001                       		move.w	d1,d0
000087A6 204B                       		movea.l	a3,a0
000087A8                            
000087A8                            LevLoad_Row:
000087A8 10D9                       		move.b	(a1)+,(a0)+
000087AA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000087AE 47EB 0080                  		lea	$80(a3),a3	; do next row
000087B2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000087B6 4E75                       		rts	
000087B8                            ; End of function LevelLayoutLoad2
000087B8                            
000087B8                            		include	"_inc\DynamicLevelEvents.asm"
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            ; Dynamic level events
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            
000087B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087B8                            
000087B8                            
000087B8                            DynamicLevelEvents:
000087B8 7000                       		moveq	#0,d0
000087BA 1038 FE10                  		move.b	(v_zone).w,d0
000087BE D040                       		add.w	d0,d0
000087C0 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000087C4 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000087C8 7202                       		moveq	#2,d1
000087CA 3038 F726                  		move.w	(v_limitbtm1).w,d0
000087CE 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000087D2 6700                       		beq.s	DLE_NoChg	; if not, branch
000087D4 6400                       		bcc.s	loc_6DAC
000087D6                            
000087D6 4441                       		neg.w	d1
000087D8 3038 F704                  		move.w	(v_screenposy).w,d0
000087DC B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000087E0 6300                       		bls.s	loc_6DA0
000087E2 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000087E6 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000087EC                            
000087EC                            loc_6DA0:
000087EC D378 F72E                  		add.w	d1,(v_limitbtm2).w
000087F0 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000087F6                            
000087F6                            DLE_NoChg:
000087F6 4E75                       		rts	
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            loc_6DAC:
000087F8 3038 F704                  		move.w	(v_screenposy).w,d0
000087FC 5040                       		addq.w	#8,d0
000087FE B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008802 6500                       		bcs.s	loc_6DC4
00008804 0838 0001 D022             		btst	#1,(v_player+obStatus).w
0000880A 6700                       		beq.s	loc_6DC4
0000880C D241                       		add.w	d1,d1
0000880E D241                       		add.w	d1,d1
00008810                            
00008810                            loc_6DC4:
00008810 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008814 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000881A 4E75                       		rts	
0000881C                            ; End of function DynamicLevelEvents
0000881C                            
0000881C                            ; ===========================================================================
0000881C                            ; ---------------------------------------------------------------------------
0000881C                            ; Offset index for dynamic level events
0000881C                            ; ---------------------------------------------------------------------------
0000881C 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008820 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008824 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008828 0000                       		dc.w DLE_Ending-DLE_Index
0000882A                            ; ===========================================================================
0000882A                            ; ---------------------------------------------------------------------------
0000882A                            ; Green	Hill Zone dynamic level events
0000882A                            ; ---------------------------------------------------------------------------
0000882A                            
0000882A                            DLE_GHZ:
0000882A 7000                       		moveq	#0,d0
0000882C 1038 FE11                  		move.b	(v_act).w,d0
00008830 D040                       		add.w	d0,d0
00008832 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008836 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
0000883A                            ; ===========================================================================
0000883A 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
0000883C 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000883E 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008840                            ; ===========================================================================
00008840                            
00008840                            DLE_GHZ1:
00008840 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008846 6600                       		bne.s	gohere
00008848 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
0000884E 4E75                       		rts
00008850                            gohere:
00008850 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008856 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
0000885C 6500                       		bcs.s	locret_6E08	; if not, branch
0000885E 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008864                            
00008864                            locret_6E08:
00008864 4E75                       		rts	
00008866                            ; ===========================================================================
00008866                            
00008866                            DLE_GHZ2:
00008866 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000886C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008872 6500                       		bcs.s	locret_6E3A
00008874 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000887A 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008880 6500                       		bcs.s	locret_6E3A
00008882 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008888 6500                       		bcs.s	loc_6E9A
0000888A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008890 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008896 6400                       		bcc.s	loc_6E8F
00008898 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000889E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000088A4                            
000088A4                            loc_6E8F:
000088A4 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
000088AA 6400                       		bcc.s	loc_6E9A
000088AC                            
000088AC                            locret_6E3A:
000088AC 4E75                       		rts	
000088AE                            ; ===========================================================================
000088AE                            
000088AE                            loc_6E9A:
000088AE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088B8 4E75                       		rts		
000088BA                            ; ===========================================================================
000088BA                            
000088BA                            DLE_GHZ3:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 F742                  		move.b	(v_dle_routine).w,d0
000088C0 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000088C4 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000088C8                            ; ===========================================================================
000088C8 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000088CA 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000088CC 0000                       		dc.w DLE_GHZ3end-off_6E4A
000088CE                            ; ===========================================================================
000088CE                            
000088CE                            DLE_GHZ3main:
000088CE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088D4 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000088DA 6500                       		bcs.s	locret_6E96
000088DC 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
000088E2 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
000088E8 6500                       		bcs.s	locret_6E96
000088EA 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000088F0 6500                       		bcs.s	loc_6E98
000088F2 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
000088F8 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
000088FE 6400                       		bcc.s	loc_6E8E
00008900 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008906 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000890C                            
0000890C                            loc_6E8E:
0000890C 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008912 6400                       		bcc.s	loc_6E98
00008914                            
00008914                            locret_6E96:
00008914 4E75                       		rts	
00008916                            ; ===========================================================================
00008916                            
00008916                            loc_6E98:
00008916 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000891C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008920 4E75                       		rts	
00008922                            ; ===========================================================================
00008922                            
00008922                            DLE_GHZ3boss:
00008922 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008928 6400                       		bcc.s	loc_6EB0
0000892A 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000892E                            
0000892E                            loc_6EB0:
0000892E 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
00008934 6500                       		bcs.s	locret_6EE8
00008936 6100 0000                  		bsr.w	FindFreeObj
0000893A 6600                       		bne.s	loc_6ED0
0000893C 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008940 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00008946 337C 0280 000C             		move.w	#$280,obY(a1)
0000894C                            
0000894C                            loc_6ED0:
00008954 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000895A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000895E 7000                       		moveq	#plcid_Boss,d0
00008960 6000 8B04                  		bra.w	AddPLC		; load boss patterns
00008964                            ; ===========================================================================
00008964                            
00008964                            locret_6EE8:
00008964 4E75                       		rts	
00008966                            ; ===========================================================================
00008966                            
00008966                            DLE_GHZ3end:
00008966 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000896C 4E75                       		rts	
0000896E                            ; ===========================================================================
0000896E                            ; ---------------------------------------------------------------------------
0000896E                            ; Labyrinth Zone dynamic level events
0000896E                            ; ---------------------------------------------------------------------------
0000896E                            
0000896E                            DLE_LZ:
0000896E 7000                       		moveq	#0,d0
00008970 1038 FE11                  		move.b	(v_act).w,d0
00008974 D040                       		add.w	d0,d0
00008976 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
0000897A 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
0000897E                            ; ===========================================================================
0000897E 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008980 0000                       		dc.w DLE_LZ12-DLE_LZx
00008982 0000                       		dc.w DLE_LZ3-DLE_LZx
00008984 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008986                            ; ===========================================================================
00008986                            
00008986                            DLE_LZ12:
00008986 4E75                       		rts	
00008988                            ; ===========================================================================
00008988                            
00008988                            DLE_LZ3:
00008988 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
0000898C 6700                       		beq.s	loc_6F28	; if not, branch
0000898E 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008992 0C11 0007                  		cmpi.b	#7,(a1)
00008996 6700                       		beq.s	loc_6F28
00008998 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000089A4                            
000089A4                            loc_6F28:
000089A4 4A38 F742                  		tst.b	(v_dle_routine).w
000089A8 6600                       		bne.s	locret_6F64
000089AA 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
000089B0 6500                       		bcs.s	locret_6F62
000089B2 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
000089B8 6400                       		bcc.s	locret_6F62
000089BA 6100 0000                  		bsr.w	FindFreeObj
000089BE 6600                       		bne.s	loc_6F4A
000089C0 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000089C4                            
000089C4                            loc_6F4A:
000089CC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089D6 7000                       		moveq	#plcid_Boss,d0
000089D8 6000 8A8C                  		bra.w	AddPLC		; load boss patterns
000089DC                            ; ===========================================================================
000089DC                            
000089DC                            locret_6F62:
000089DC 4E75                       		rts	
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            locret_6F64:
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            
000089E0                            DLE_SBZ3:
000089E0 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
000089E6 6500                       		bcs.s	locret_6F8C
000089E8 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000089EE 6400                       		bcc.s	locret_6F8C	; if not, branch
000089F0 4238 FE30                  		clr.b	(v_lastlamp).w
000089F4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000089FA 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008A00 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008A06                            
00008A06                            locret_6F8C:
00008A06 4E75                       		rts	
00008A08                            ; ===========================================================================
00008A08                            ; ---------------------------------------------------------------------------
00008A08                            ; Marble Zone dynamic level events
00008A08                            ; ---------------------------------------------------------------------------
00008A08                            
00008A08                            DLE_MZ:
00008A08 7000                       		moveq	#0,d0
00008A0A 1038 FE11                  		move.b	(v_act).w,d0
00008A0E D040                       		add.w	d0,d0
00008A10 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008A14 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008A18                            ; ===========================================================================
00008A18 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008A1A 0000                       		dc.w DLE_MZ2-DLE_MZx
00008A1C 0000                       		dc.w DLE_MZ3-DLE_MZx
00008A1E                            ; ===========================================================================
00008A1E                            
00008A1E                            DLE_MZ1:
00008A1E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A24 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008A2A 6500                       		bcs.s	locret_6FE8
00008A2C 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008A32                            
00008A32                            locret_6FE8:
00008A32 4E75                       		rts	
00008A34                            
00008A34                            ; ===========================================================================
00008A34                            
00008A34                            DLE_MZ2:
00008A34 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A3A 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008A40 6500                       		bcs.s	locret_6FE9
00008A42 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008A48                            		
00008A48                            locret_6FE9:
00008A48 4E75                       		rts	
00008A4A                            ; ===========================================================================
00008A4A                            
00008A4A                            DLE_MZ3:
00008A4A 7000                       		moveq	#0,d0
00008A4C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A50 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008A54 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008A58                            ; ===========================================================================
00008A58 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008A5A 0000                       		dc.w DLE_MZ3cutscene-off_7098
00008A5C 0000                       		dc.w DLE_MZ3boss2-off_7098
00008A5E 0000                       		dc.w DLE_MZ3end-off_7098
00008A60                            ; ===========================================================================
00008A60                            
00008A60                            DLE_MZ3boss:
00008A60 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A66 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008A6C 6500                       		bcs.s	locret_70E8
00008A6E 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008A74 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008A7A 6500                       		bcs.s	locret_70E8
00008A7C 6100 0000                  		bsr.w	FindFreeObj
00008A80 6600                       		bne.s	loc_70D0
00008A82 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008A86 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008A8C 337C 022C 000C             		move.w	#$22C,obY(a1)
00008A92                            
00008A92                            loc_70D0:
00008A9A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AA0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AA4 7000                       		moveq	#plcid_Boss,d0
00008AA6 6000 89BE                  		bra.w	AddPLC		; load boss patterns
00008AAA                            ; ===========================================================================
00008AAA                            
00008AAA                            locret_70E8:
00008AAA 4E75                       		rts	
00008AAC                            ; ===========================================================================		
00008AAC                            		
00008AAC                            DLE_MZ3cutscene:
00008AAC 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
00008AB2 6500                       		bcs.s	locret_8298
00008AB4 6100 0000                  		bsr.w	FindFreeObj
00008AB8 6600                       		bne.s	locret_8298
00008ABA 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008ABE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AC2 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008AC4 6000 89A0                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008AC8                            ; ===========================================================================
00008AC8                            
00008AC8                            locret_8298:
00008AC8 4E75                       		rts	
00008ACA                            ; ===========================================================================
00008ACA                            
00008ACA                            DLE_MZ3boss2:
00008ACA 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008AD0 6500                       		bcs.s	loc_72C6
00008AD2 6100 0000                  		bsr.w	FindFreeObj
00008AD6 6600                       		bne.s	loc_72C0
00008AD8 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008ADC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AE0                            
00008AE0                            loc_72C0:
00008AE0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AE6                            
00008AE6                            loc_72C6:
00008AE6 6000 0000                  		bra.w	loc_72C2
00008AEA                            ; ===========================================================================
00008AEA                            
00008AEA                            DLE_MZ3end:
00008AEA 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008AF0 6500                       		bcs.s	loc_72D2
00008AF2 4E75                       		rts	
00008AF4                            ; ===========================================================================
00008AF4                            
00008AF4                            loc_72D2:
00008AF4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AFA 4E75                       		rts
00008AFC                            
00008AFC                            
00008AFC                            ; ===========================================================================
00008AFC                            ; ---------------------------------------------------------------------------
00008AFC                            ; Star Light Zone dynamic level events
00008AFC                            ; ---------------------------------------------------------------------------
00008AFC                            
00008AFC                            DLE_SLZ:
00008AFC 7000                       		moveq	#0,d0
00008AFE 1038 FE11                  		move.b	(v_act).w,d0
00008B02 D040                       		add.w	d0,d0
00008B04 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008B08 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008B0C                            ; ===========================================================================
00008B0C 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008B0E 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008B10 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008B12                            ; ===========================================================================
00008B12                            
00008B12                            DLE_SLZ12:
00008B12 4E75                       		rts	
00008B14                            ; ===========================================================================
00008B14                            
00008B14                            DLE_SLZ3:
00008B14 7000                       		moveq	#0,d0
00008B16 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B1A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008B1E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008B22                            ; ===========================================================================
00008B22 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008B24 0000                       		dc.w DLE_SLZ3boss-off_7118
00008B26 0000                       		dc.w DLE_SLZ3end-off_7118
00008B28                            ; ===========================================================================
00008B28                            
00008B28                            DLE_SLZ3main:
00008B28 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008B2E 6500                       		bcs.s	locret_7130
00008B30 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008B36 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B3A                            
00008B3A                            locret_7130:
00008B3A 4E75                       		rts	
00008B3C                            ; ===========================================================================
00008B3C                            
00008B3C                            DLE_SLZ3boss:
00008B3C 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008B42 6500                       		bcs.s	locret_715C
00008B44 6100 0000                  		bsr.w	FindFreeObj
00008B48 6600                       		bne.s	loc_7144
00008B4A 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008B4E                            
00008B4E                            loc_7144:
00008B56 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B5C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B60 7000                       		moveq	#plcid_Boss,d0
00008B62 6000 8902                  		bra.w	AddPLC		; load boss patterns
00008B66                            ; ===========================================================================
00008B66                            
00008B66                            locret_715C:
00008B66 4E75                       		rts	
00008B68                            ; ===========================================================================
00008B68                            
00008B68                            DLE_SLZ3end:
00008B68 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B6E 4E75                       		rts
00008B70 4E75                       		rts
00008B72                            ; ===========================================================================
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            ; Spring Yard Zone dynamic level events
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            
00008B72                            DLE_SYZ:
00008B72 7000                       		moveq	#0,d0
00008B74 1038 FE11                  		move.b	(v_act).w,d0
00008B78 D040                       		add.w	d0,d0
00008B7A 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008B7E 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008B82                            ; ===========================================================================
00008B82 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008B84 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008B86 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008B88                            ; ===========================================================================
00008B88                            
00008B88                            DLE_SYZ1:
00008B88 4E75                       		rts	
00008B8A                            ; ===========================================================================
00008B8A                            
00008B8A                            DLE_SYZ2:
00008B8A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008B90 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008B96 6500                       		bcs.s	locret_71A2
00008B98 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008B9E 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008BA4 6500                       		bcs.s	locret_71A2
00008BA6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008BAC                            
00008BAC                            locret_71A2:
00008BAC 4E75                       		rts	
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            DLE_SYZ3:
00008BAE 7000                       		moveq	#0,d0
00008BB0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008BB4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008BB8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008BBC                            ; ===========================================================================
00008BBC 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008BBE 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008BC0 0000                       		dc.w DLE_SYZ3end-off_71B2
00008BC2                            ; ===========================================================================
00008BC2                            
00008BC2                            DLE_SYZ3main:
00008BC2 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008BC8 6500                       		bcs.s	locret_71CE
00008BCA 6100 0000                  		bsr.w	FindFreeObj
00008BCE 6600                       		bne.s	locret_71CE
00008BD0 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008BD4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BD8                            
00008BD8                            locret_71CE:
00008BD8 4E75                       		rts	
00008BDA                            ; ===========================================================================
00008BDA                            
00008BDA                            DLE_SYZ3boss:
00008BDA 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008BE0 6500                       		bcs.s	locret_7200
00008BE2 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008BE8 6100 0000                  		bsr.w	FindFreeObj
00008BEC 6600                       		bne.s	loc_71EC
00008BEE 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008BF2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BF6                            
00008BF6                            loc_71EC:
00008BFE 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C04 7000                       		moveq	#plcid_Boss,d0
00008C06 6000 885E                  		bra.w	AddPLC		; load boss patterns
00008C0A                            ; ===========================================================================
00008C0A                            
00008C0A                            locret_7200:
00008C0A 4E75                       		rts	
00008C0C                            ; ===========================================================================
00008C0C                            
00008C0C                            DLE_SYZ3end:
00008C0C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C12 4E75                       		rts	
00008C14                            ; ===========================================================================
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Scrap	Brain Zone dynamic level events
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            
00008C14                            DLE_SBZ:
00008C14 7000                       		moveq	#0,d0
00008C16 1038 FE11                  		move.b	(v_act).w,d0
00008C1A D040                       		add.w	d0,d0
00008C1C 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008C20 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008C24                            ; ===========================================================================
00008C24 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008C26 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008C28 0000                       		dc.w DLE_FZ-DLE_SBZx
00008C2A                            ; ===========================================================================
00008C2A                            
00008C2A                            DLE_SBZ1:
00008C2A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008C30 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008C36 6500                       		bcs.s	locret_7242
00008C38 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008C3E 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008C44 6500                       		bcs.s	locret_7242
00008C46 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008C4C                            
00008C4C                            locret_7242:
00008C4C 4E75                       		rts	
00008C4E                            ; ===========================================================================
00008C4E                            
00008C4E                            DLE_SBZ2:
00008C4E 7000                       		moveq	#0,d0
00008C50 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C54 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C58 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C5C                            ; ===========================================================================
00008C5C 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008C5E 0000                       		dc.w DLE_SBZ2boss-off_7252
00008C60 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008C62 0000                       		dc.w DLE_SBZ2end-off_7252
00008C64                            ; ===========================================================================
00008C64                            
00008C64                            DLE_SBZ2main:
00008C64 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008C6A 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008C70 6500                       		bcs.s	locret_727A
00008C72 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008C78 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008C7E 6500                       		bcs.s	locret_727A
00008C80 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C84                            
00008C84                            locret_727A:
00008C84 4E75                       		rts	
00008C86                            ; ===========================================================================
00008C86                            
00008C86                            DLE_SBZ2boss:
00008C86 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008C8C 6500                       		bcs.s	locret_7298
00008C8E 6100 0000                  		bsr.w	FindFreeObj
00008C92 6600                       		bne.s	locret_7298
00008C94 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008C98 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C9C 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008C9E 6000 87C6                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008CA2                            ; ===========================================================================
00008CA2                            
00008CA2                            locret_7298:
00008CA2 4E75                       		rts	
00008CA4                            ; ===========================================================================
00008CA4                            
00008CA4                            DLE_SBZ2boss2:
00008CA4 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008CAA 6500                       		bcs.s	loc_72B6
00008CAC 6100 0000                  		bsr.w	FindFreeObj
00008CB0 6600                       		bne.s	loc_72B0
00008CB2 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008CB6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CBA                            
00008CBA                            loc_72B0:
00008CBA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CC0                            
00008CC0                            loc_72B6:
00008CC0 6000                       		bra.s	loc_72C2
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            DLE_SBZ2end:
00008CC2 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008CC8 6500                       		bcs.s	loc_72C2
00008CCA 4E75                       		rts	
00008CCC                            ; ===========================================================================
00008CCC                            
00008CCC                            loc_72C2:
00008CCC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008CD2 4E75                       		rts	
00008CD4                            ; ===========================================================================
00008CD4                            
00008CD4                            DLE_FZ:
00008CD4 7000                       		moveq	#0,d0
00008CD6 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CDA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008CDE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008CE2                            ; ===========================================================================
00008CE2 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008CE6 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008CEA 0000                       		dc.w DLE_FZend2-off_72D8
00008CEC                            ; ===========================================================================
00008CEC                            
00008CEC                            DLE_FZmain:
00008CEC 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008CF2 6500                       		bcs.s	loc_72F4
00008CF4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CF8 7000                       		moveq	#plcid_FZBoss,d0
00008CFA 6100 876A                  		bsr.w	AddPLC		; load FZ boss patterns
00008CFE                            
00008CFE                            loc_72F4:
00008CFE 60CC                       		bra.s	loc_72C2
00008D00                            ; ===========================================================================
00008D00                            
00008D00                            DLE_FZboss:
00008D00 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008D06 6500                       		bcs.s	loc_7312
00008D08 6100 0000                  		bsr.w	FindFreeObj
00008D0C 6600                       		bne.s	loc_7312
00008D0E 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008D12 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D16 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D1C                            
00008D1C                            loc_7312:
00008D1C 60AE                       		bra.s	loc_72C2
00008D1E                            ; ===========================================================================
00008D1E                            
00008D1E                            DLE_FZend:
00008D1E 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008D24 6500                       		bcs.s	loc_7320
00008D26 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D2A                            
00008D2A                            loc_7320:
00008D2A 60A0                       		bra.s	loc_72C2
00008D2C                            ; ===========================================================================
00008D2C                            
00008D2C                            locret_7322:
00008D2C 4E75                       		rts	
00008D2E                            ; ===========================================================================
00008D2E                            
00008D2E                            DLE_FZend2:
00008D2E 609C                       		bra.s	loc_72C2
00008D30                            ; ===========================================================================
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            ; Ending sequence dynamic level events (empty)
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            
00008D30                            DLE_Ending:
00008D30 4E75                       		rts	
00008D30 4E75                       		rts	
00008D32                            
00008D32                            		include	"_incObj\11 Bridge (part 1).asm"
00008D32                            ; ---------------------------------------------------------------------------
00008D32                            ; Object 11 - GHZ bridge
00008D32                            ; ---------------------------------------------------------------------------
00008D32                            
00008D32                            Bridge:
00008D32 7000                       		moveq	#0,d0
00008D34 1028 0024                  		move.b	obRoutine(a0),d0
00008D38 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008D3C 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008D40                            ; ===========================================================================
00008D40 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008D44 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008D48 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008D4C                            ; ===========================================================================
00008D4C                            
00008D4C                            Bri_Main:	; Routine 0
00008D4C 5428 0024                  		addq.b	#2,obRoutine(a0)
00008D50 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008D58 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008D5E 117C 0004 0001             		move.b	#4,obRender(a0)
00008D64 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008D6A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008D70 3428 000C                  		move.w	obY(a0),d2
00008D74 3628 0008                  		move.w	obX(a0),d3
00008D78 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D7A 45E8 0028                  		lea	obSubtype(a0),a2
00008D7E 7200                       		moveq	#0,d1
00008D80 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008D82 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008D86 3001                       		move.w	d1,d0
00008D88 E248                       		lsr.w	#1,d0
00008D8A E948                       		lsl.w	#4,d0
00008D8C 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008D8E 5501                       		subq.b	#2,d1
00008D90 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008D92                            
00008D92                            @buildloop:
00008D92 6100 0000                  		bsr.w	FindFreeObj
00008D96 6600                       		bne.s	Bri_Action
00008D98 5228 0028                  		addq.b	#1,obSubtype(a0)
00008D9C B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008DA0 6600                       		bne.s	@notleftmost	; if not, branch
00008DA2                            
00008DA2 0643 0010                  		addi.w	#$10,d3
00008DA6 3142 000C                  		move.w	d2,obY(a0)
00008DAA 3142 003C                  		move.w	d2,$3C(a0)
00008DAE 3A08                       		move.w	a0,d5
00008DB0 0445 D000                  		subi.w	#$D000,d5
00008DB4 EC4D                       		lsr.w	#6,d5
00008DB6 0245 007F                  		andi.w	#$7F,d5
00008DBA 14C5                       		move.b	d5,(a2)+
00008DBC 5228 0028                  		addq.b	#1,obSubtype(a0)
00008DC0                            
00008DC0                            	@notleftmost:
00008DC0 3A09                       		move.w	a1,d5
00008DC2 0445 D000                  		subi.w	#$D000,d5
00008DC6 EC4D                       		lsr.w	#6,d5
00008DC8 0245 007F                  		andi.w	#$7F,d5
00008DCC 14C5                       		move.b	d5,(a2)+
00008DCE 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008DD4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008DD6 3342 000C                  		move.w	d2,obY(a1)
00008DDA 3342 003C                  		move.w	d2,$3C(a1)
00008DDE 3343 0008                  		move.w	d3,obX(a1)
00008DE2 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008DEA 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008DF0 137C 0004 0001             		move.b	#4,obRender(a1)
00008DF6 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008DFC 137C 0008 0014             		move.b	#8,obActWid(a1)
00008E02 0643 0010                  		addi.w	#$10,d3
00008E06 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008E0A                            
00008E0A                            Bri_Action:	; Routine 2
00008E0A 6100                       		bsr.s	Bri_Solid
00008E0C 4A28 003E                  		tst.b	$3E(a0)
00008E10 6700                       		beq.s	@display
00008E12 5928 003E                  		subq.b	#4,$3E(a0)
00008E16 6100 0000                  		bsr.w	Bri_Bend
00008E1A                            
00008E1A                            	@display:
00008E1A 6100 0000                  		bsr.w	DisplaySprite
00008E1E 6000 0000                  		bra.w	Bri_ChkDel
00008E22                            
00008E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E22                            
00008E22                            
00008E22                            Bri_Solid:
00008E22 7200                       		moveq	#0,d1
00008E24 1228 0028                  		move.b	obSubtype(a0),d1
00008E28 E749                       		lsl.w	#3,d1
00008E2A 3401                       		move.w	d1,d2
00008E2C 5041                       		addq.w	#8,d1
00008E2E D442                       		add.w	d2,d2
00008E30 43F8 D000                  		lea	(v_player).w,a1
00008E34 4A69 0012                  		tst.w	obVelY(a1)
00008E38 6B00 0000                  		bmi.w	Plat_Exit
00008E3C 3029 0008                  		move.w	obX(a1),d0
00008E40 9068 0008                  		sub.w	obX(a0),d0
00008E44 D041                       		add.w	d1,d0
00008E46 6B00 0000                  		bmi.w	Plat_Exit
00008E4A B042                       		cmp.w	d2,d0
00008E4C 6400 0000                  		bcc.w	Plat_Exit
00008E50 6000                       		bra.s	Plat_NoXCheck
00008E52                            ; End of function Bri_Solid
00008E52                            ; End of function Bri_Solid
00008E52                            
00008E52                            ; ---------------------------------------------------------------------------
00008E52                            ; Platform subroutine
00008E52                            ; ---------------------------------------------------------------------------
00008E52                            
00008E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E52                            
00008E52                            PlatformObject:
00008E52 43F8 D000                  		lea	(v_player).w,a1
00008E56 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008E5A 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008E5E                            
00008E5E                            ;		perform x-axis range check
00008E5E 3029 0008                  		move.w	obX(a1),d0
00008E62 9068 0008                  		sub.w	obX(a0),d0
00008E66 D041                       		add.w	d1,d0
00008E68 6B00 0000                  		bmi.w	Plat_Exit
00008E6C D241                       		add.w	d1,d1
00008E6E B041                       		cmp.w	d1,d0
00008E70 6400 0000                  		bhs.w	Plat_Exit
00008E74                            
00008E74                            	Plat_NoXCheck:
00008E74 3028 000C                  		move.w	obY(a0),d0
00008E78 5140                       		subq.w	#8,d0
00008E7A                            
00008E7A                            Platform3:
00008E7A                            ;		perform y-axis range check
00008E7A 3429 000C                  		move.w	obY(a1),d2
00008E7E 1229 0016                  		move.b	obHeight(a1),d1
00008E82 4881                       		ext.w	d1
00008E84 D242                       		add.w	d2,d1
00008E86 5841                       		addq.w	#4,d1
00008E88 9041                       		sub.w	d1,d0
00008E8A 6200 0000                  		bhi.w	Plat_Exit
00008E8E 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E92 6500 0000                  		blo.w	Plat_Exit
00008E96                            
00008E96 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008E9A 6B00 0000                  		bmi.w	Plat_Exit
00008E9E 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008EA4 6400 0000                  		bhs.w	Plat_Exit
00008EA8 D440                       		add.w	d0,d2
00008EAA 5642                       		addq.w	#3,d2
00008EAC 3342 000C                  		move.w	d2,obY(a1)
00008EB0 5428 0024                  		addq.b	#2,obRoutine(a0)
00008EB4                            
00008EB4                            loc_74AE:
00008EB4 0829 0003 0022             		btst	#3,obStatus(a1)
00008EBA 6700                       		beq.s	loc_74DC
00008EBC 7000                       		moveq	#0,d0
00008EBE 1029 003D                  		move.b	$3D(a1),d0
00008EC2 ED48                       		lsl.w	#6,d0
00008EC4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008ECA 2440                       		movea.l	d0,a2
00008ECC 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008ED2 422A 0025                  		clr.b	ob2ndRout(a2)
00008ED6 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008EDC 6600                       		bne.s	loc_74DC
00008EDE 552A 0024                  		subq.b	#2,obRoutine(a2)
00008EE2                            
00008EE2                            loc_74DC:
00008EE2 3008                       		move.w	a0,d0
00008EE4 0440 D000                  		subi.w	#-$3000,d0
00008EE8 EC48                       		lsr.w	#6,d0
00008EEA 0240 007F                  		andi.w	#$7F,d0
00008EEE 1340 003D                  		move.b	d0,$3D(a1)
00008EF2 137C 0000 0026             		move.b	#0,obAngle(a1)
00008EF8 337C 0000 0012             		move.w	#0,obVelY(a1)
00008EFE 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008F04 0829 0001 0022             		btst	#1,obStatus(a1)
00008F0A 6700                       		beq.s	loc_7512
00008F0C 2F08                       		move.l	a0,-(sp)
00008F0E 2049                       		movea.l	a1,a0
00008F10 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008F16 205F                       		movea.l	(sp)+,a0
00008F18                            
00008F18                            loc_7512:
00008F18 08E9 0003 0022             		bset	#3,obStatus(a1)
00008F1E 08E8 0003 0022             		bset	#3,obStatus(a0)
00008F24                            
00008F24                            Plat_Exit:
00008F24 4E75                       		rts	
00008F26                            ; End of function PlatformObject
00008F26                            
00008F26                            ; ---------------------------------------------------------------------------
00008F26                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008F26                            ; ---------------------------------------------------------------------------
00008F26                            
00008F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F26                            
00008F26                            
00008F26                            SlopeObject:
00008F26 43F8 D000                  		lea	(v_player).w,a1
00008F2A 4A69 0012                  		tst.w	obVelY(a1)
00008F2E 6B00 FFF4                  		bmi.w	Plat_Exit
00008F32 3029 0008                  		move.w	obX(a1),d0
00008F36 9068 0008                  		sub.w	obX(a0),d0
00008F3A D041                       		add.w	d1,d0
00008F3C 6BE6                       		bmi.s	Plat_Exit
00008F3E D241                       		add.w	d1,d1
00008F40 B041                       		cmp.w	d1,d0
00008F42 64E0                       		bhs.s	Plat_Exit
00008F44 0828 0000 0001             		btst	#0,obRender(a0)
00008F4A 6700                       		beq.s	loc_754A
00008F4C 4640                       		not.w	d0
00008F4E D041                       		add.w	d1,d0
00008F50                            
00008F50                            loc_754A:
00008F50 E248                       		lsr.w	#1,d0
00008F52 7600                       		moveq	#0,d3
00008F54 1632 0000                  		move.b	(a2,d0.w),d3
00008F58 3028 000C                  		move.w	obY(a0),d0
00008F5C 9043                       		sub.w	d3,d0
00008F5E 6000 FF1A                  		bra.w	Platform3
00008F62                            ; End of function SlopeObject
00008F62                            
00008F62                            
00008F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F62                            
00008F62                            
00008F62                            Swing_Solid:
00008F62 43F8 D000                  		lea	(v_player).w,a1
00008F66 4A69 0012                  		tst.w	obVelY(a1)
00008F6A 6B00 FFB8                  		bmi.w	Plat_Exit
00008F6E 3029 0008                  		move.w	obX(a1),d0
00008F72 9068 0008                  		sub.w	obX(a0),d0
00008F76 D041                       		add.w	d1,d0
00008F78 6B00 FFAA                  		bmi.w	Plat_Exit
00008F7C D241                       		add.w	d1,d1
00008F7E B041                       		cmp.w	d1,d0
00008F80 6400 FFA2                  		bhs.w	Plat_Exit
00008F84 3028 000C                  		move.w	obY(a0),d0
00008F88 9043                       		sub.w	d3,d0
00008F8A 6000 FEEE                  		bra.w	Platform3
00008F8E                            ; End of function Obj15_Solid
00008F8E                            
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            		include	"_incObj\11 Bridge (part 2).asm"
00008F8E                            
00008F8E                            Bri_Platform:	; Routine 4
00008F8E 6100                       		bsr.s	Bri_WalkOff
00008F90 6100 0000                  		bsr.w	DisplaySprite
00008F94 6000 0000                  		bra.w	Bri_ChkDel
00008F98                            
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Subroutine allowing Sonic to walk off a bridge
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            
00008F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F98                            
00008F98                            
00008F98                            Bri_WalkOff:
00008F98 7200                       		moveq	#0,d1
00008F9A 1228 0028                  		move.b	obSubtype(a0),d1
00008F9E E749                       		lsl.w	#3,d1
00008FA0 3401                       		move.w	d1,d2
00008FA2 5041                       		addq.w	#8,d1
00008FA4 6100                       		bsr.s	ExitPlatform2
00008FA6 6400                       		bcc.s	locret_75BE
00008FA8 E848                       		lsr.w	#4,d0
00008FAA 1140 003F                  		move.b	d0,$3F(a0)
00008FAE 1028 003E                  		move.b	$3E(a0),d0
00008FB2 0C00 0040                  		cmpi.b	#$40,d0
00008FB6 6700                       		beq.s	loc_75B6
00008FB8 5828 003E                  		addq.b	#4,$3E(a0)
00008FBC                            
00008FBC                            loc_75B6:
00008FBC 6100 0000                  		bsr.w	Bri_Bend
00008FC0 6100 0000                  		bsr.w	Bri_MoveSonic
00008FC4                            
00008FC4                            locret_75BE:
00008FC4 4E75                       		rts	
00008FC6                            ; End of function Bri_WalkOff
00008FC6                            ; End of function Bri_WalkOff
00008FC6                            
00008FC6                            ; ---------------------------------------------------------------------------
00008FC6                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008FC6                            ; ---------------------------------------------------------------------------
00008FC6                            
00008FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FC6                            
00008FC6                            
00008FC6                            ExitPlatform:
00008FC6 3401                       		move.w	d1,d2
00008FC8                            
00008FC8                            ExitPlatform2:
00008FC8 D442                       		add.w	d2,d2
00008FCA 43F8 D000                  		lea	(v_player).w,a1
00008FCE 0829 0001 0022             		btst	#1,obStatus(a1)
00008FD4 6600                       		bne.s	loc_75E0
00008FD6 3029 0008                  		move.w	obX(a1),d0
00008FDA 9068 0008                  		sub.w	obX(a0),d0
00008FDE D041                       		add.w	d1,d0
00008FE0 6B00                       		bmi.s	loc_75E0
00008FE2 B042                       		cmp.w	d2,d0
00008FE4 6500                       		blo.s	locret_75F2
00008FE6                            
00008FE6                            loc_75E0:
00008FE6 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008FEC 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008FF2 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008FF8                            
00008FF8                            locret_75F2:
00008FF8 4E75                       		rts	
00008FFA                            ; End of function ExitPlatform
00008FFA                            
00008FFA                            		include	"_incObj\11 Bridge (part 3).asm"
00008FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FFA                            
00008FFA                            
00008FFA                            Bri_MoveSonic:
00008FFA 7000                       		moveq	#0,d0
00008FFC 1028 003F                  		move.b	$3F(a0),d0
00009000 1030 0029                  		move.b	$29(a0,d0.w),d0
00009004 ED48                       		lsl.w	#6,d0
00009006 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000900C 2440                       		movea.l	d0,a2
0000900E 43F8 D000                  		lea	(v_player).w,a1
00009012 302A 000C                  		move.w	obY(a2),d0
00009016 5140                       		subq.w	#8,d0
00009018 7200                       		moveq	#0,d1
0000901A 1229 0016                  		move.b	obHeight(a1),d1
0000901E 9041                       		sub.w	d1,d0
00009020 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00009024 4E75                       		rts	
00009026                            ; End of function Bri_MoveSonic
00009026                            
00009026                            
00009026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009026                            
00009026                            
00009026                            Bri_Bend:
00009026 1028 003E                  		move.b	$3E(a0),d0
0000902A 6100 A782                  		bsr.w	CalcSine
0000902E 3800                       		move.w	d0,d4
00009030 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009036 7000                       		moveq	#0,d0
00009038 1028 0028                  		move.b	obSubtype(a0),d0
0000903C E948                       		lsl.w	#4,d0
0000903E 7600                       		moveq	#0,d3
00009040 1628 003F                  		move.b	$3F(a0),d3
00009044 3403                       		move.w	d3,d2
00009046 D640                       		add.w	d0,d3
00009048 7A00                       		moveq	#0,d5
0000904A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009050 1A35 3000                  		move.b	(a5,d3.w),d5
00009054 0243 000F                  		andi.w	#$F,d3
00009058 E94B                       		lsl.w	#4,d3
0000905A 47F4 3000                  		lea	(a4,d3.w),a3
0000905E 45E8 0029                  		lea	$29(a0),a2
00009062                            
00009062                            loc_765C:
00009062 7000                       		moveq	#0,d0
00009064 101A                       		move.b	(a2)+,d0
00009066 ED48                       		lsl.w	#6,d0
00009068 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000906E 2240                       		movea.l	d0,a1
00009070 7000                       		moveq	#0,d0
00009072 101B                       		move.b	(a3)+,d0
00009074 5240                       		addq.w	#1,d0
00009076 C0C5                       		mulu.w	d5,d0
00009078 C0C4                       		mulu.w	d4,d0
0000907A 4840                       		swap	d0
0000907C D069 003C                  		add.w	$3C(a1),d0
00009080 3340 000C                  		move.w	d0,obY(a1)
00009084 51CA FFDC                  		dbf	d2,loc_765C
00009088 7000                       		moveq	#0,d0
0000908A 1028 0028                  		move.b	obSubtype(a0),d0
0000908E 7600                       		moveq	#0,d3
00009090 1628 003F                  		move.b	$3F(a0),d3
00009094 5203                       		addq.b	#1,d3
00009096 9600                       		sub.b	d0,d3
00009098 4403                       		neg.b	d3
0000909A 6B00                       		bmi.s	locret_76CA
0000909C 3403                       		move.w	d3,d2
0000909E E94B                       		lsl.w	#4,d3
000090A0 47F4 3000                  		lea	(a4,d3.w),a3
000090A4 D6C2                       		adda.w	d2,a3
000090A6 5342                       		subq.w	#1,d2
000090A8 6500                       		bcs.s	locret_76CA
000090AA                            
000090AA                            loc_76A4:
000090AA 7000                       		moveq	#0,d0
000090AC 101A                       		move.b	(a2)+,d0
000090AE ED48                       		lsl.w	#6,d0
000090B0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090B6 2240                       		movea.l	d0,a1
000090B8 7000                       		moveq	#0,d0
000090BA 1023                       		move.b	-(a3),d0
000090BC 5240                       		addq.w	#1,d0
000090BE C0C5                       		mulu.w	d5,d0
000090C0 C0C4                       		mulu.w	d4,d0
000090C2 4840                       		swap	d0
000090C4 D069 003C                  		add.w	$3C(a1),d0
000090C8 3340 000C                  		move.w	d0,obY(a1)
000090CC 51CA FFDC                  		dbf	d2,loc_76A4
000090D0                            
000090D0                            locret_76CA:
000090D0 4E75                       		rts	
000090D2                            ; End of function Bri_Bend
000090D2                            
000090D2                            ; ===========================================================================
000090D2                            ; ---------------------------------------------------------------------------
000090D2                            ; GHZ bridge-bending data
000090D2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000090D2                            ; ---------------------------------------------------------------------------
000090D2                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
000091E2                            		even
000091E2                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000092E2                            		even
000092E2                            
000092E2                            ; ===========================================================================
000092E2                            
000092E2                            Bri_ChkDel:
00009300 4E75                       		rts	
00009302                            ; ===========================================================================
00009302                            
00009302                            @deletebridge:
00009302 7400                       		moveq	#0,d2
00009304 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00009308 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000930A 5302                       		subq.b	#1,d2		; subtract 1
0000930C 6500                       		bcs.s	@delparent
0000930E                            
0000930E                            	@loop:
0000930E 7000                       		moveq	#0,d0
00009310 101A                       		move.b	(a2)+,d0
00009312 ED48                       		lsl.w	#6,d0
00009314 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000931A 2240                       		movea.l	d0,a1
0000931C B048                       		cmp.w	a0,d0
0000931E 6700                       		beq.s	@skipdel
00009320 6100 0000                  		bsr.w	DeleteChild
00009324                            
00009324                            	@skipdel:
00009324 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00009328                            
00009328                            @delparent:
00009328 6100 0000                  		bsr.w	DeleteObject
0000932C 4E75                       		rts	
0000932E                            ; ===========================================================================
0000932E                            
0000932E                            Bri_Delete:	; Routine 6, 8
0000932E 6100 0000                  		bsr.w	DeleteObject
00009332 4E75                       		rts	
00009334                            ; ===========================================================================
00009334                            
00009334                            Bri_Display:	; Routine $A
00009334 6100 0000                  		bsr.w	DisplaySprite
00009338 4E75                       		rts	
00009338 4E75                       		rts	
0000933A                            Map_Bri:	include	"_maps\Bridge.asm"
0000933A                            ; ---------------------------------------------------------------------------
0000933A                            ; Sprite mappings - GHZ	bridge
0000933A                            ; ---------------------------------------------------------------------------
0000933A                            Map_Bri_internal:
0000933A 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000933C 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
0000933E 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009340 01                         M_Bri_Log:	dc.b 1
00009341 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009346 02                         M_Bri_Stump:	dc.b 2
00009347 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000934C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009351 01                         M_Bri_Rope:	dc.b 1
00009352 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009358 00                         		even
00009358 00                         		even
00009358                            
00009358                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009358                            ; ---------------------------------------------------------------------------
00009358                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009358                            ;	    - spiked ball on a chain (SBZ)
00009358                            ; ---------------------------------------------------------------------------
00009358                            
00009358                            SwingingPlatform:
00009358 7000                       		moveq	#0,d0
0000935A 1028 0024                  		move.b	obRoutine(a0),d0
0000935E 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009362 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009366                            ; ===========================================================================
00009366 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000936A 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
0000936E 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009372 0000                       		dc.w Swing_Action-Swing_Index
00009374                            
00009374 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009374 =00000038                  swing_origY:	equ $38		; original y-axis position
00009374                            ; ===========================================================================
00009374                            
00009374                            Swing_Main:	; Routine 0
00009374 5428 0024                  		addq.b	#2,obRoutine(a0)
00009378 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009380 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009386 117C 0004 0001             		move.b	#4,obRender(a0)
0000938C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009392 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009398 117C 0008 0016             		move.b	#8,obHeight(a0)
0000939E 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000093A4 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000093AA 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000093B0 6600                       		bne.s	@notSLZ
000093B2                            
000093B2 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000093BA 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000093C0 117C 0020 0014             		move.b	#$20,obActWid(a0)
000093C6 117C 0010 0016             		move.b	#$10,obHeight(a0)
000093CC 117C 0099 0020             		move.b	#$99,obColType(a0)
000093D2                            
000093D2                            	@notSLZ:
000093D2 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000093D8 6600                       		bne.s	@length
000093DA                            
000093DA 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000093E2 317C 0391 0002             		move.w	#$391,obGfx(a0)
000093E8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000093EE 117C 0018 0016             		move.b	#$18,obHeight(a0)
000093F4 117C 0086 0020             		move.b	#$86,obColType(a0)
000093FA 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009400                            
00009400                            @length:
00009400 1810                       		move.b	0(a0),d4
00009402 7200                       		moveq	#0,d1
00009404 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00009408 1212                       		move.b	(a2),d1		; move a2 to d1
0000940A 3F01                       		move.w	d1,-(sp)
0000940C 0241 000F                  		andi.w	#$F,d1
00009410 14FC 0000                  		move.b	#0,(a2)+
00009414 3601                       		move.w	d1,d3
00009416 E94B                       		lsl.w	#4,d3
00009418 5003                       		addq.b	#8,d3
0000941A 1143 003C                  		move.b	d3,$3C(a0)
0000941E 5103                       		subq.b	#8,d3
00009420 4A28 001A                  		tst.b	obFrame(a0)
00009424 6700                       		beq.s	@makechain
00009426 5003                       		addq.b	#8,d3
00009428 5341                       		subq.w	#1,d1
0000942A                            
0000942A                            @makechain:
0000942A 6100 0000                  		bsr.w	FindFreeObj
0000942E 6600                       		bne.s	@fail
00009430 5228 0028                  		addq.b	#1,obSubtype(a0)
00009434 3A09                       		move.w	a1,d5
00009436 0445 D000                  		subi.w	#$D000,d5
0000943A EC4D                       		lsr.w	#6,d5
0000943C 0245 007F                  		andi.w	#$7F,d5
00009440 14C5                       		move.b	d5,(a2)+
00009442 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
00009448 1284                       		move.b	d4,0(a1)	; load swinging	object
0000944A 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009450 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009456 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000945C 137C 0004 0001             		move.b	#4,obRender(a1)
00009462 337C 0200 0018             		move.w	#$200,obPriority(a1)
00009468 137C 0008 0014             		move.b	#8,obActWid(a1)
0000946E 137C 0001 001A             		move.b	#1,obFrame(a1)
00009474 1343 003C                  		move.b	d3,$3C(a1)
00009478 0403 0010                  		subi.b	#$10,d3
0000947C 6400                       		bcc.s	@notanchor
0000947E 137C 0002 001A             		move.b	#2,obFrame(a1)
00009484 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000948A 08E9 0006 0002             		bset	#6,obGfx(a1)
00009490                            
00009490                            	@notanchor:
00009490 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009494                            
00009494                            	@fail:
00009494 3A08                       		move.w	a0,d5
00009496 0445 D000                  		subi.w	#$D000,d5
0000949A EC4D                       		lsr.w	#6,d5
0000949C 0245 007F                  		andi.w	#$7F,d5
000094A0 14C5                       		move.b	d5,(a2)+
000094A2 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000094A8 317C FE00 003E             		move.w	#-$200,$3E(a0)
000094AE 321F                       		move.w	(sp)+,d1
000094B0 0801 0004                  		btst	#4,d1		; is object type $1X ?
000094B4 6700                       		beq.s	@not1X	; if not, branch
000094B6 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000094BE 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000094C4 117C 0001 001A             		move.b	#1,obFrame(a0)
000094CA 317C 0100 0018             		move.w	#$100,obPriority(a0)
000094D0 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000094D6                            
000094D6                            	@not1X:
000094D6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000094DC 6700                       		beq.s	Swing_Action	; if yes, branch
000094DE                            
000094DE                            Swing_SetSolid:	; Routine 2
000094DE 7200                       		moveq	#0,d1
000094E0 1228 0014                  		move.b	obActWid(a0),d1
000094E4 7600                       		moveq	#0,d3
000094E6 1628 0016                  		move.b	obHeight(a0),d3
000094EA 6100 FA76                  		bsr.w	Swing_Solid
000094EE                            
000094EE                            Swing_Action:	; Routine $C
000094EE 6100 0000                  		bsr.w	Swing_Move
000094F2 6100 0000                  		bsr.w	DisplaySprite
000094F6 6000 0000                  		bra.w	Swing_ChkDel
000094FA                            ; ===========================================================================
000094FA                            
000094FA                            Swing_Action2:	; Routine 4
000094FA 7200                       		moveq	#0,d1
000094FC 1228 0014                  		move.b	obActWid(a0),d1
00009500 6100 FAC4                  		bsr.w	ExitPlatform
00009504 3F28 0008                  		move.w	obX(a0),-(sp)
00009508 6100 0000                  		bsr.w	Swing_Move
0000950C 341F                       		move.w	(sp)+,d2
0000950E 7600                       		moveq	#0,d3
00009510 1628 0016                  		move.b	obHeight(a0),d3
00009514 5203                       		addq.b	#1,d3
00009516 6100 0000                  		bsr.w	MvSonicOnPtfm
0000951A 6100 0000                  		bsr.w	DisplaySprite
0000951E 6000 0000                  		bra.w	Swing_ChkDel
00009522                            
00009522 4E75                       		rts
00009522 4E75                       		rts
00009524                            
00009524                            ; ---------------------------------------------------------------------------
00009524                            ; Subroutine to	change Sonic's position with a platform
00009524                            ; ---------------------------------------------------------------------------
00009524                            
00009524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009524                            
00009524                            
00009524                            MvSonicOnPtfm:
00009524 43F8 D000                  		lea	(v_player).w,a1
00009528 3028 000C                  		move.w	obY(a0),d0
0000952C 9043                       		sub.w	d3,d0
0000952E 6000                       		bra.s	MvSonic2
00009530                            ; End of function MvSonicOnPtfm
00009530                            
00009530                            ; ---------------------------------------------------------------------------
00009530                            ; Subroutine to	change Sonic's position with a platform
00009530                            ; ---------------------------------------------------------------------------
00009530                            
00009530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009530                            
00009530                            
00009530                            MvSonicOnPtfm2:
00009530 43F8 D000                  		lea	(v_player).w,a1
00009534 3028 000C                  		move.w	obY(a0),d0
00009538 0440 0009                  		subi.w	#9,d0
0000953C                            
0000953C                            MvSonic2:
0000953C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009540 6B00                       		bmi.s	locret_7B62
00009542 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00009548 6400                       		bhs.s	locret_7B62
0000954A 4A78 FE08                  		tst.w	(v_debuguse).w
0000954E 6600                       		bne.s	locret_7B62
00009550 7200                       		moveq	#0,d1
00009552 1229 0016                  		move.b	obHeight(a1),d1
00009556 9041                       		sub.w	d1,d0
00009558 3340 000C                  		move.w	d0,obY(a1)
0000955C 9468 0008                  		sub.w	obX(a0),d2
00009560 9569 0008                  		sub.w	d2,obX(a1)
00009564                            
00009564                            locret_7B62:
00009564 4E75                       		rts	
00009566                            ; End of function MvSonicOnPtfm2
00009566                            
00009566                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009566                            
00009566                            
00009566                            Swing_Move:
00009566 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000956A 323C 0080                  		move.w	#$80,d1
0000956E 0828 0000 0022             		btst	#0,obStatus(a0)
00009574 6700                       		beq.s	loc_7B78
00009576 4440                       		neg.w	d0
00009578 D041                       		add.w	d1,d0
0000957A                            
0000957A                            loc_7B78:
0000957A 6000                       		bra.s	Swing_Move2
0000957C                            ; End of function Swing_Move
0000957C                            
0000957C                            
0000957C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000957C                            
0000957C                            
0000957C                            Obj48_Move:
0000957C 4A28 003D                  		tst.b	$3D(a0)
00009580 6600                       		bne.s	loc_7B9C
00009582 3028 003E                  		move.w	$3E(a0),d0
00009586 5040                       		addq.w	#8,d0
00009588 3140 003E                  		move.w	d0,$3E(a0)
0000958C D168 0026                  		add.w	d0,obAngle(a0)
00009590 0C40 0200                  		cmpi.w	#$200,d0
00009594 6600                       		bne.s	loc_7BB6
00009596 117C 0001 003D             		move.b	#1,$3D(a0)
0000959C 6000                       		bra.s	loc_7BB6
0000959E                            ; ===========================================================================
0000959E                            
0000959E                            loc_7B9C:
0000959E 3028 003E                  		move.w	$3E(a0),d0
000095A2 5140                       		subq.w	#8,d0
000095A4 3140 003E                  		move.w	d0,$3E(a0)
000095A8 D168 0026                  		add.w	d0,obAngle(a0)
000095AC 0C40 FE00                  		cmpi.w	#-$200,d0
000095B0 6600                       		bne.s	loc_7BB6
000095B2 117C 0000 003D             		move.b	#0,$3D(a0)
000095B8                            
000095B8                            loc_7BB6:
000095B8 1028 0026                  		move.b	obAngle(a0),d0
000095BC                            ; End of function Obj48_Move
000095BC                            
000095BC                            
000095BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095BC                            
000095BC                            
000095BC                            Swing_Move2:
000095BC 6100 A1F0                  		bsr.w	CalcSine
000095C0 3428 0038                  		move.w	$38(a0),d2
000095C4 3628 003A                  		move.w	$3A(a0),d3
000095C8 45E8 0028                  		lea	obSubtype(a0),a2
000095CC 7C00                       		moveq	#0,d6
000095CE 1C1A                       		move.b	(a2)+,d6
000095D0                            
000095D0                            loc_7BCE:
000095D0 7800                       		moveq	#0,d4
000095D2 181A                       		move.b	(a2)+,d4
000095D4 ED4C                       		lsl.w	#6,d4
000095D6 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000095DC 2244                       		movea.l	d4,a1
000095DE 7800                       		moveq	#0,d4
000095E0 1829 003C                  		move.b	$3C(a1),d4
000095E4 2A04                       		move.l	d4,d5
000095E6 C9C0                       		muls.w	d0,d4
000095E8 E084                       		asr.l	#8,d4
000095EA CBC1                       		muls.w	d1,d5
000095EC E085                       		asr.l	#8,d5
000095EE D842                       		add.w	d2,d4
000095F0 DA43                       		add.w	d3,d5
000095F2 3344 000C                  		move.w	d4,obY(a1)
000095F6 3345 0008                  		move.w	d5,obX(a1)
000095FA 51CE FFD4                  		dbf	d6,loc_7BCE
000095FE 4E75                       		rts	
00009600                            ; End of function Swing_Move2
00009600                            
00009600                            ; ===========================================================================
00009600                            
00009600                            Swing_ChkDel:
0000961E 4E75                       		rts	
00009620                            ; ===========================================================================
00009620                            
00009620                            Swing_DelAll:
00009620 7400                       		moveq	#0,d2
00009622 45E8 0028                  		lea	obSubtype(a0),a2
00009626 141A                       		move.b	(a2)+,d2
00009628                            
00009628                            Swing_DelLoop:
00009628 7000                       		moveq	#0,d0
0000962A 101A                       		move.b	(a2)+,d0
0000962C ED48                       		lsl.w	#6,d0
0000962E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009634 2240                       		movea.l	d0,a1
00009636 6100 0000                  		bsr.w	DeleteChild
0000963A 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
0000963E 4E75                       		rts	
00009640                            ; ===========================================================================
00009640                            
00009640                            Swing_Delete:	; Routine 6, 8
00009640 6100 0000                  		bsr.w	DeleteObject
00009644 4E75                       		rts	
00009646                            ; ===========================================================================
00009646                            
00009646                            Swing_Display:	; Routine $A
00009646 6000 0000                  		bra.w	DisplaySprite
00009646 6000 0000                  		bra.w	DisplaySprite
0000964A                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000964A                            ; ---------------------------------------------------------------------------
0000964A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000964A                            ; ---------------------------------------------------------------------------
0000964A                            Map_Swing_GHZ_internal:
0000964A 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000964C 0000                       		dc.w @chain-Map_Swing_GHZ_internal
0000964E 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009650 02                         @block:		dc.b 2
00009651 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009656 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000965B 01                         @chain:		dc.b 1
0000965C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009661 01                         @anchor:	dc.b 1
00009662 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009668 00                         		even
00009668 00                         		even
00009668                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
00009668                            ; ---------------------------------------------------------------------------
00009668                            ; Sprite mappings - SLZ	swinging platforms
00009668                            ; ---------------------------------------------------------------------------
00009668                            Map_Swing_SLZ_internal:
00009668 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000966A 0000                       		dc.w @chain-Map_Swing_SLZ_internal
0000966C 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
0000966E 08                         @block:		dc.b 8
0000966F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009674 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009679 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000967E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009683 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009688 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000968D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009692 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009697 01                         @chain:		dc.b 1
00009698 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000969D 01                         @anchor:	dc.b 1
0000969E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000096A4 00                         		even
000096A4 00                         		even
000096A4                            		include	"_incObj\17 Spiked Pole Helix.asm"
000096A4                            ; ---------------------------------------------------------------------------
000096A4                            ; Object 17 - helix of spikes on a pole	(GHZ)
000096A4                            ; ---------------------------------------------------------------------------
000096A4                            
000096A4                            Helix:
000096A4 7000                       		moveq	#0,d0
000096A6 1028 0024                  		move.b	obRoutine(a0),d0
000096AA 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000096AE 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000096B2                            ; ===========================================================================
000096B2 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000096B4 0000                       		dc.w Hel_Action-Hel_Index
000096B6 0000                       		dc.w Hel_Action-Hel_Index
000096B8 0000                       		dc.w Hel_Delete-Hel_Index
000096BA 0000                       		dc.w Hel_Display-Hel_Index
000096BC                            
000096BC =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000096BC                            
000096BC                            ;		$29-38 are used for child object addresses
000096BC                            ; ===========================================================================
000096BC                            
000096BC                            Hel_Main:	; Routine 0
000096BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000096C0 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000096C8 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000096CE 117C 0007 0022             		move.b	#7,obStatus(a0)
000096D4 117C 0004 0001             		move.b	#4,obRender(a0)
000096DA 317C 0180 0018             		move.w	#$180,obPriority(a0)
000096E0 117C 0008 0014             		move.b	#8,obActWid(a0)
000096E6 3428 000C                  		move.w	obY(a0),d2
000096EA 3628 0008                  		move.w	obX(a0),d3
000096EE 1810                       		move.b	0(a0),d4
000096F0 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000096F4 7200                       		moveq	#0,d1
000096F6 1212                       		move.b	(a2),d1		; move helix length to d1
000096F8 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000096FC 3001                       		move.w	d1,d0
000096FE E248                       		lsr.w	#1,d0
00009700 E948                       		lsl.w	#4,d0
00009702 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00009704 5501                       		subq.b	#2,d1
00009706 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00009708 7C00                       		moveq	#0,d6
0000970A                            
0000970A                            Hel_Build:
0000970A 6100 0000                  		bsr.w	FindFreeObj
0000970E 6600                       		bne.s	Hel_Action
00009710 5228 0028                  		addq.b	#1,obSubtype(a0)
00009714 3A09                       		move.w	a1,d5
00009716 0445 D000                  		subi.w	#$D000,d5
0000971A EC4D                       		lsr.w	#6,d5
0000971C 0245 007F                  		andi.w	#$7F,d5
00009720 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009722 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009728 1284                       		move.b	d4,0(a1)
0000972A 3342 000C                  		move.w	d2,ObY(a1)
0000972E 3343 0008                  		move.w	d3,obX(a1)
00009732 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009738 337C 4398 0002             		move.w	#$4398,obGfx(a1)
0000973E 137C 0004 0001             		move.b	#4,obRender(a1)
00009744 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000974A 137C 0008 0014             		move.b	#8,obActWid(a1)
00009750 1346 003E                  		move.b	d6,hel_frame(a1)
00009754 5206                       		addq.b	#1,d6
00009756 0206 0007                  		andi.b	#7,d6
0000975A 0643 0010                  		addi.w	#$10,d3
0000975E B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009762 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009764                            
00009764 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009768 5206                       		addq.b	#1,d6
0000976A 0206 0007                  		andi.b	#7,d6
0000976E 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009772 5228 0028                  		addq.b	#1,obSubtype(a0)
00009776                            
00009776                            	Hel_NotCentre:
00009776 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000977A                            
0000977A                            Hel_Action:	; Routine 2, 4
0000977A 6100 0000                  		bsr.w	Hel_RotateSpikes
0000977E 6100 0000                  		bsr.w	DisplaySprite
00009782 6000 0000                  		bra.w	Hel_ChkDel
00009786                            
00009786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009786                            
00009786                            
00009786                            Hel_RotateSpikes:
00009786 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000978A 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009790 D028 003E                  		add.b	hel_frame(a0),d0
00009794 0200 0007                  		andi.b	#7,d0
00009798 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000979C 6600                       		bne.s	locret_7DA6
0000979E 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000097A4                            
000097A4                            locret_7DA6:
000097A4 4E75                       		rts	
000097A6                            ; End of function Hel_RotateSpikes
000097A6                            
000097A6                            ; ===========================================================================
000097A6                            
000097A6                            Hel_ChkDel:
000097C4 4E75                       		rts	
000097C6                            ; ===========================================================================
000097C6                            
000097C6                            Hel_DelAll:
000097C6 7400                       		moveq	#0,d2
000097C8 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000097CC 141A                       		move.b	(a2)+,d2	; move helix length to d2
000097CE 5502                       		subq.b	#2,d2
000097D0 6500                       		bcs.s	Hel_Delete
000097D2                            
000097D2                            	Hel_DelLoop:
000097D2 7000                       		moveq	#0,d0
000097D4 101A                       		move.b	(a2)+,d0
000097D6 ED48                       		lsl.w	#6,d0
000097D8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000097DE 2240                       		movea.l	d0,a1		; get child address
000097E0 6100 0000                  		bsr.w	DeleteChild	; delete object
000097E4 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000097E8                            
000097E8                            Hel_Delete:	; Routine 6
000097E8 6100 0000                  		bsr.w	DeleteObject
000097EC 4E75                       		rts	
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            Hel_Display:	; Routine 8
000097EE 6100 FF96                  		bsr.w	Hel_RotateSpikes
000097F2 6000 0000                  		bra.w	DisplaySprite
000097F2 6000 0000                  		bra.w	DisplaySprite
000097F6                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000097F6                            ; ---------------------------------------------------------------------------
000097F6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097F6                            ; ---------------------------------------------------------------------------
000097F6                            Map_Hel_internal:
000097F6 0000                       		dc.w byte_7E08-Map_Hel_internal
000097F8 0000                       		dc.w byte_7E0E-Map_Hel_internal
000097FA 0000                       		dc.w byte_7E14-Map_Hel_internal
000097FC 0000                       		dc.w byte_7E1A-Map_Hel_internal
000097FE 0000                       		dc.w byte_7E20-Map_Hel_internal
00009800 0000                       		dc.w byte_7E26-Map_Hel_internal
00009802 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009804 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009806 01                         byte_7E08:	dc.b 1
00009807 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
0000980C 01                         byte_7E0E:	dc.b 1
0000980D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009812 01                         byte_7E14:	dc.b 1
00009813 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009818 01                         byte_7E1A:	dc.b 1
00009819 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
0000981E 01                         byte_7E20:	dc.b 1
0000981F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009824 01                         byte_7E26:	dc.b 1
00009825 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
0000982A 01                         byte_7E2C:	dc.b 1
0000982B F4                         		dc.b $F4
0000982C                            byte_7E2E:	; reads the 0 below	; not visible
0000982C 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009830                            		even
00009830                            		even
00009830                            		include	"_incObj\18 Platforms.asm"
00009830                            ; ---------------------------------------------------------------------------
00009830                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009830                            ; ---------------------------------------------------------------------------
00009830                            
00009830                            BasicPlatform:
00009830 7000                       		moveq	#0,d0
00009832 1028 0024                  		move.b	obRoutine(a0),d0
00009836 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
0000983A 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
0000983E                            ; ===========================================================================
0000983E 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009840 0000                       		dc.w Plat_Solid-Plat_Index
00009842 0000                       		dc.w Plat_Action2-Plat_Index
00009844 0000                       		dc.w Plat_Delete-Plat_Index
00009846 0000                       		dc.w Plat_Action-Plat_Index
00009848                            ; ===========================================================================
00009848                            
00009848                            Plat_Main:	; Routine 0
00009848 5428 0024                  		addq.b	#2,obRoutine(a0)
0000984C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009852 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
0000985A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009860 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009866 6600                       		bne.s	@notSYZ
00009868                            
00009868 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009870 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009876                            
00009876                            	@notSYZ:
00009876 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000987C 6600                       		bne.s	@notSLZ
0000987E 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009886 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000988C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009892 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009898                            
00009898                            	@notSLZ:
00009898 117C 0004 0001             		move.b	#4,obRender(a0)
0000989E 317C 0200 0018             		move.w	#$200,obPriority(a0)
000098A4 3168 000C 002C             		move.w	obY(a0),$2C(a0)
000098AA 3168 000C 0034             		move.w	obY(a0),$34(a0)
000098B0 3168 0008 0032             		move.w	obX(a0),$32(a0)
000098B6 317C 0080 0026             		move.w	#$80,obAngle(a0)
000098BC 7200                       		moveq	#0,d1
000098BE 1028 0028                  		move.b	obSubtype(a0),d0
000098C2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000098C6 6600                       		bne.s	@setframe	; if not, branch
000098C8 5201                       		addq.b	#1,d1		; use frame #1
000098CA 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
000098D0                            
000098D0                            	@setframe:
000098D0 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
000098D4                            
000098D4                            Plat_Solid:	; Routine 2
000098D4 4A28 0038                  		tst.b	$38(a0)
000098D8 6700                       		beq.s	loc_7EE0
000098DA 5928 0038                  		subq.b	#4,$38(a0)
000098DE                            
000098DE                            	loc_7EE0:
000098DE 7200                       		moveq	#0,d1
000098E0 1228 0014                  		move.b	obActWid(a0),d1
000098E4 6100 F56C                  		bsr.w	PlatformObject
000098E8                            
000098E8                            Plat_Action:	; Routine 8
000098E8 6100 0000                  		bsr.w	Plat_Move
000098EC 6100 0000                  		bsr.w	Plat_Nudge
000098F0 6100 0000                  		bsr.w	DisplaySprite
000098F4 6000 0000                  		bra.w	Plat_ChkDel
000098F8                            ; ===========================================================================
000098F8                            
000098F8                            Plat_Action2:	; Routine 4
000098F8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000098FE 6700                       		beq.s	loc_7F06
00009900 5828 0038                  		addq.b	#4,$38(a0)
00009904                            
00009904                            	loc_7F06:
00009904 7200                       		moveq	#0,d1
00009906 1228 0014                  		move.b	obActWid(a0),d1
0000990A 6100 F6BA                  		bsr.w	ExitPlatform
0000990E 3F28 0008                  		move.w	obX(a0),-(sp)
00009912 6100 0000                  		bsr.w	Plat_Move
00009916 6100 0000                  		bsr.w	Plat_Nudge
0000991A 341F                       		move.w	(sp)+,d2
0000991C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009920 6100 0000                  		bsr.w	DisplaySprite
00009924 6000 0000                  		bra.w	Plat_ChkDel
00009928                            
00009928 4E75                       		rts
0000992A                            
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            ; Subroutine to	move platform slightly when you	stand on it
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            
0000992A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000992A                            
0000992A                            
0000992A                            Plat_Nudge:
0000992A 1028 0038                  		move.b	$38(a0),d0
0000992E 6100 9E7E                  		bsr.w	CalcSine
00009932 323C 0400                  		move.w	#$400,d1
00009936 C1C1                       		muls.w	d1,d0
00009938 4840                       		swap	d0
0000993A D068 002C                  		add.w	$2C(a0),d0
0000993E 3140 000C                  		move.w	d0,obY(a0)
00009942 4E75                       		rts	
00009944                            ; End of function Plat_Nudge
00009944                            
00009944                            ; ---------------------------------------------------------------------------
00009944                            ; Subroutine to	move platforms
00009944                            ; ---------------------------------------------------------------------------
00009944                            
00009944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009944                            
00009944                            
00009944                            Plat_Move:
00009944 7000                       		moveq	#0,d0
00009946 1028 0028                  		move.b	obSubtype(a0),d0
0000994A 0240 000F                  		andi.w	#$F,d0
0000994E D040                       		add.w	d0,d0
00009950 323B 0000                  		move.w	@index(pc,d0.w),d1
00009954 4EFB 1000                  		jmp	@index(pc,d1.w)
00009958                            ; End of function Plat_Move
00009958                            
00009958                            ; ===========================================================================
00009958 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0000995C 0000 0000                  		dc.w @type02-@index, @type03-@index
00009960 0000 0000                  		dc.w @type04-@index, @type05-@index
00009964 0000 0000                  		dc.w @type06-@index, @type07-@index
00009968 0000 0000                  		dc.w @type08-@index, @type00-@index
0000996C 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009970 0000                       		dc.w @type0C-@index
00009972                            ; ===========================================================================
00009972                            
00009972                            @type00:
00009972 4E75                       		rts			; platform 00 doesn't move
00009974                            ; ===========================================================================
00009974                            
00009974                            @type05:
00009974 3028 0032                  		move.w	$32(a0),d0
00009978 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000997C 4401                       		neg.b	d1		; reverse platform-motion
0000997E 0601 0040                  		addi.b	#$40,d1
00009982 6000                       		bra.s	@type01_move
00009984                            ; ===========================================================================
00009984                            
00009984                            @type01:
00009984 3028 0032                  		move.w	$32(a0),d0
00009988 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000998C 0401 0040                  		subi.b	#$40,d1
00009990                            
00009990                            	@type01_move:
00009990 4881                       		ext.w	d1
00009992 D041                       		add.w	d1,d0
00009994 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009998 6000 0000                  		bra.w	@chgmotion
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            @type0C:
0000999C 3028 0034                  		move.w	$34(a0),d0
000099A0 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000099A4 4401                       		neg.b	d1		; reverse platform-motion
000099A6 0601 0030                  		addi.b	#$30,d1
000099AA 6000                       		bra.s	@type02_move
000099AC                            ; ===========================================================================
000099AC                            
000099AC                            @type0B:
000099AC 3028 0034                  		move.w	$34(a0),d0
000099B0 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000099B4 0401 0030                  		subi.b	#$30,d1
000099B8 6000                       		bra.s	@type02_move
000099BA                            ; ===========================================================================
000099BA                            
000099BA                            @type06:
000099BA 3028 0034                  		move.w	$34(a0),d0
000099BE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000099C2 4401                       		neg.b	d1		; reverse platform-motion
000099C4 0601 0040                  		addi.b	#$40,d1
000099C8 6000                       		bra.s	@type02_move
000099CA                            ; ===========================================================================
000099CA                            
000099CA                            @type02:
000099CA 3028 0034                  		move.w	$34(a0),d0
000099CE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000099D2 0401 0040                  		subi.b	#$40,d1
000099D6                            
000099D6                            	@type02_move:
000099D6 4881                       		ext.w	d1
000099D8 D041                       		add.w	d1,d0
000099DA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000099DE 6000 0000                  		bra.w	@chgmotion
000099E2                            ; ===========================================================================
000099E2                            
000099E2                            @type03:
000099E2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000099E6 6600                       		bne.s	@type03_wait	; if yes, branch
000099E8 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000099EE 6700                       		beq.s	@type03_nomove	; if not, branch
000099F0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000099F6                            
000099F6                            	@type03_nomove:
000099F6 4E75                       		rts	
000099F8                            
000099F8                            	@type03_wait:
000099F8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000099FC 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000099FE 317C 0020 003A             		move.w	#32,$3A(a0)
00009A04 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009A08 4E75                       		rts	
00009A0A                            ; ===========================================================================
00009A0A                            
00009A0A                            @type04:
00009A0A 4A68 003A                  		tst.w	$3A(a0)
00009A0E 6700                       		beq.s	@loc_8048
00009A10 5368 003A                  		subq.w	#1,$3A(a0)
00009A14 6600                       		bne.s	@loc_8048
00009A16 0828 0003 0022             		btst	#3,obStatus(a0)
00009A1C 6700                       		beq.s	@loc_8042
00009A1E 08E9 0001 0022             		bset	#1,obStatus(a1)
00009A24 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009A2A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009A30 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009A36 4228 0025                  		clr.b	$25(a0)
00009A3A 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009A40                            
00009A40                            	@loc_8042:
00009A40 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009A46                            
00009A46                            	@loc_8048:
00009A46 2628 002C                  		move.l	$2C(a0),d3
00009A4A 3028 0012                  		move.w	obVelY(a0),d0
00009A4E 48C0                       		ext.l	d0
00009A50 E180                       		asl.l	#8,d0
00009A52 D680                       		add.l	d0,d3
00009A54 2143 002C                  		move.l	d3,$2C(a0)
00009A58 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009A5E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009A62 0640 00E0                  		addi.w	#$E0,d0
00009A66 B068 002C                  		cmp.w	$2C(a0),d0
00009A6A 6400                       		bcc.s	@locret_8074
00009A6C 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009A72                            
00009A72                            	@locret_8074:
00009A72 4E75                       		rts	
00009A74                            ; ===========================================================================
00009A74                            
00009A74                            @type07:
00009A74 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A78 6600                       		bne.s	@type07_wait	; if yes, branch
00009A7A 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009A7E 7000                       		moveq	#0,d0
00009A80 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009A84 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A86 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A8A 6700                       		beq.s	@type07_nomove	; if not, branch
00009A8C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009A92                            
00009A92                            	@type07_nomove:
00009A92 4E75                       		rts	
00009A94                            
00009A94                            	@type07_wait:
00009A94 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009A98 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009A9A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009A9E 4E75                       		rts	
00009AA0                            ; ===========================================================================
00009AA0                            
00009AA0                            @type08:
00009AA0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009AA4 3028 0034                  		move.w	$34(a0),d0
00009AA8 0440 0200                  		subi.w	#$200,d0
00009AAC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009AB0 6600                       		bne.s	@type08_nostop	; if not, branch
00009AB2 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009AB6                            
00009AB6                            	@type08_nostop:
00009AB6 4E75                       		rts	
00009AB8                            ; ===========================================================================
00009AB8                            
00009AB8                            @type0A:
00009AB8 3028 0034                  		move.w	$34(a0),d0
00009ABC 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009AC0 0401 0040                  		subi.b	#$40,d1
00009AC4 4881                       		ext.w	d1
00009AC6 E241                       		asr.w	#1,d1
00009AC8 D041                       		add.w	d1,d0
00009ACA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009ACE                            
00009ACE                            @chgmotion:
00009ACE 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009AD4 4E75                       		rts	
00009AD6                            ; ===========================================================================
00009AD6                            
00009AD6                            Plat_ChkDel:
00009AF2 4E75                       		rts	
00009AF4                            ; ===========================================================================
00009AF4                            
00009AF4                            Plat_Delete:	; Routine 6
00009AF4 6000 0000                  		bra.w	DeleteObject
00009AF4 6000 0000                  		bra.w	DeleteObject
00009AF8                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009AF8                            ; ---------------------------------------------------------------------------
00009AF8                            ; Sprite mappings - unused
00009AF8                            ; ---------------------------------------------------------------------------
00009AF8                            Map_Plat_Unused_internal:
00009AF8 0000                       		dc.w @small-Map_Plat_Unused_internal
00009AFA 0000                       		dc.w @large-Map_Plat_Unused_internal
00009AFC 02                         @small:		dc.b 2
00009AFD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009B02 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009B07 0A                         @large:		dc.b $A
00009B08 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009B0D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009B12 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009B17 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009B1C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009B21 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009B26 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009B2B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009B30 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009B35 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009B3A                            		even
00009B3A                            		even
00009B3A                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009B3A                            ; ---------------------------------------------------------------------------
00009B3A                            ; Sprite mappings - GHZ	platforms
00009B3A                            ; ---------------------------------------------------------------------------
00009B3A                            Map_Plat_GHZ_internal:
00009B3A 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009B3C 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009B3E 04                         @small:		dc.b 4
00009B3F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009B44 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009B49 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B4E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B53 0A                         @large:		dc.b $A
00009B54 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B59 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B5E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B63 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B68 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B6D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B72 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B77 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B7C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B81 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B86                            		even
00009B86                            		even
00009B86                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009B86                            ; ---------------------------------------------------------------------------
00009B86                            ; Sprite mappings - SYZ	platforms
00009B86                            ; ---------------------------------------------------------------------------
00009B86                            Map_Plat_SYZ_internal:
00009B86 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009B88 03                         @platform:	dc.b 3
00009B89 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009B8E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009B93 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009B98                            		even
00009B98                            		even
00009B98                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Sprite mappings - SLZ	platforms
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            Map_Plat_SLZ_internal:
00009B98 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009B9A 02                         @platform:	dc.b 2
00009B9B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009BA0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009BA6 00                         		even
00009BA6 00                         		even
00009BA6                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009BA6                            ; ---------------------------------------------------------------------------
00009BA6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009BA6                            ; ---------------------------------------------------------------------------
00009BA6                            Map_GBall_internal:
00009BA6 0000                       		dc.w @shiny-Map_GBall_internal
00009BA8 0000                       		dc.w @check1-Map_GBall_internal
00009BAA 0000                       		dc.w @check2-Map_GBall_internal
00009BAC 0000                       		dc.w @check3-Map_GBall_internal
00009BAE 06                         @shiny:		dc.b 6
00009BAF F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009BB4 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009BB9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009BBE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009BC3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009BC8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009BCD 04                         @check1:	dc.b 4
00009BCE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009BD3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009BD8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009BDD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009BE2 04                         @check2:	dc.b 4
00009BE3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009BE8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009BED 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009BF2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009BF7 04                         @check3:	dc.b 4
00009BF8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009BFD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009C02 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009C07 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009C0C                            		even
00009C0C                            		even
00009C0C                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009C0C                            ; ---------------------------------------------------------------------------
00009C0C                            ; Object 1A - GHZ collapsing ledge
00009C0C                            ; ---------------------------------------------------------------------------
00009C0C                            
00009C0C                            CollapseLedge:
00009C0C 7000                       		moveq	#0,d0
00009C0E 1028 0024                  		move.b	obRoutine(a0),d0
00009C12 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009C16 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009C1A                            ; ===========================================================================
00009C1A 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009C1E 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009C22 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009C26                            
00009C26 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009C26 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009C26                            ; ===========================================================================
00009C26                            
00009C26                            Ledge_Main:	; Routine 0
00009C26 5428 0024                  		addq.b	#2,obRoutine(a0)
00009C2A 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009C32 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009C38 0028 0004 0001             		ori.b	#4,obRender(a0)
00009C3E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009C44 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009C4A 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009C50 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009C56 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009C5C 08E8 0004 0001             		bset	#4,obRender(a0)
00009C62                            
00009C62                            Ledge_Touch:	; Routine 2
00009C62 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009C66 6700                       		beq.s	@slope		; if not, branch
00009C68 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009C6C 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009C70 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009C74                            
00009C74                            	@slope:
00009C74 323C 0030                  		move.w	#$30,d1
00009C78 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009C7E 6100 F2A6                  		bsr.w	SlopeObject
00009C82 6000 0000                  		bra.w	RememberState
00009C86                            ; ===========================================================================
00009C86                            
00009C86                            Ledge_Collapse:	; Routine 4
00009C86 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009C8A 6700 0000                  		beq.w	loc_847A
00009C8E 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009C94 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009C98                            
00009C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C98                            
00009C98                            
00009C98                            Ledge_WalkOff:	; Routine $A
00009C98 323C 0030                  		move.w	#$30,d1
00009C9C 6100 F328                  		bsr.w	ExitPlatform
00009CA0 323C 0030                  		move.w	#$30,d1
00009CA4 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009CAA 3428 0008                  		move.w	obX(a0),d2
00009CAE 6100 0000                  		bsr.w	SlopeObject2
00009CB2 6000 0000                  		bra.w	RememberState
00009CB6                            ; End of function Ledge_WalkOff
00009CB6                            
00009CB6                            ; ===========================================================================
00009CB6                            
00009CB6                            Ledge_Display:	; Routine 6
00009CB6 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009CBA 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009CBC 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009CC0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009CC4 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009CC8 6000 0000                  		bra.w	DisplaySprite
00009CCC                            ; ===========================================================================
00009CCC                            
00009CCC                            loc_82D0:
00009CCC 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009CD0 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009CD4 43F8 D000                  		lea	(v_player).w,a1
00009CD8 0829 0003 0022             		btst	#3,obStatus(a1)
00009CDE 6700                       		beq.s	loc_82FC
00009CE0 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009CE4 6600                       		bne.s	locret_8308
00009CE6 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009CEC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009CF2 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009CF8                            
00009CF8                            loc_82FC:
00009CF8 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009CFE 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009D04                            
00009D04                            locret_8308:
00009D04 4E75                       		rts	
00009D06                            ; ===========================================================================
00009D06                            
00009D06                            Ledge_TimeZero:
00009D06 6100 0000                  		bsr.w	ObjectFall
00009D0A 6100 0000                  		bsr.w	DisplaySprite
00009D0E 4A28 0001                  		tst.b	obRender(a0)
00009D12 6A00                       		bpl.s	Ledge_Delete
00009D14 4E75                       		rts	
00009D16                            ; ===========================================================================
00009D16                            
00009D16                            Ledge_Delete:	; Routine 8
00009D16 6100 0000                  		bsr.w	DeleteObject
00009D1A 4E75                       		rts	
00009D1A 4E75                       		rts	
00009D1C                            		include	"_incObj\53 Collapsing Floors.asm"
00009D1C                            ; ---------------------------------------------------------------------------
00009D1C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009D1C                            ; ---------------------------------------------------------------------------
00009D1C                            
00009D1C                            CollapseFloor:
00009D1C 7000                       		moveq	#0,d0
00009D1E 1028 0024                  		move.b	obRoutine(a0),d0
00009D22 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009D26 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009D2A                            ; ===========================================================================
00009D2A 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009D2E 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009D32 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009D36                            
00009D36 =00000038                  cflo_timedelay:		equ $38
00009D36 =0000003A                  cflo_collapse_flag:	equ $3A
00009D36                            ; ===========================================================================
00009D36                            
00009D36                            CFlo_Main:	; Routine 0
00009D36 5428 0024                  		addq.b	#2,obRoutine(a0)
00009D3A 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009D42 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009D48 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009D4E 6600                       		bne.s	@notSLZ
00009D50                            
00009D50 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009D56 5428 001A                  		addq.b	#2,obFrame(a0)
00009D5A                            
00009D5A                            	@notSLZ:
00009D5A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009D60 6600                       		bne.s	@notSBZ
00009D62 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009D68                            
00009D68                            	@notSBZ:
00009D68 0028 0004 0001             		ori.b	#4,obRender(a0)
00009D6E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009D74 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009D7A 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009D80                            
00009D80                            CFlo_Touch:	; Routine 2
00009D80 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009D84 6700                       		beq.s	@solid		; if not, branch
00009D86 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009D8A 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009D8E 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009D92                            
00009D92                            	@solid:
00009D92 323C 0020                  		move.w	#$20,d1
00009D96 6100 F0BA                  		bsr.w	PlatformObject
00009D9A 4A28 0028                  		tst.b	obSubtype(a0)
00009D9E 6A00                       		bpl.s	@remstate
00009DA0 0829 0003 0022             		btst	#3,obStatus(a1)
00009DA6 6700                       		beq.s	@remstate
00009DA8 08A8 0000 0001             		bclr	#0,obRender(a0)
00009DAE 3029 0008                  		move.w	obX(a1),d0
00009DB2 9068 0008                  		sub.w	obX(a0),d0
00009DB6 6400                       		bcc.s	@remstate
00009DB8 08E8 0000 0001             		bset	#0,obRender(a0)
00009DBE                            
00009DBE                            	@remstate:
00009DBE 6000 0000                  		bra.w	RememberState
00009DC2                            ; ===========================================================================
00009DC2                            
00009DC2                            CFlo_Collapse:	; Routine 4
00009DC2 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009DC6 6700 0000                  		beq.w	loc_8458
00009DCA 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009DD0 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009DD4                            
00009DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DD4                            
00009DD4                            
00009DD4                            CFlo_WalkOff:	; Routine $A
00009DD4 323C 0020                  		move.w	#$20,d1
00009DD8 6100 F1EC                  		bsr.w	ExitPlatform
00009DDC 3428 0008                  		move.w	obX(a0),d2
00009DE0 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009DE4 6000 0000                  		bra.w	RememberState
00009DE8                            ; End of function CFlo_WalkOff
00009DE8                            
00009DE8                            ; ===========================================================================
00009DE8                            
00009DE8                            CFlo_Display:	; Routine 6
00009DE8 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009DEC 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009DEE 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009DF2 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009DF6 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009DFA 6000 0000                  		bra.w	DisplaySprite
00009DFE                            ; ===========================================================================
00009DFE                            
00009DFE                            loc_8402:
00009DFE 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009E02 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009E06 43F8 D000                  		lea	(v_player).w,a1
00009E0A 0829 0003 0022             		btst	#3,obStatus(a1)
00009E10 6700                       		beq.s	loc_842E
00009E12 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009E16 6600                       		bne.s	locret_843A
00009E18 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009E1E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009E24 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009E2A                            
00009E2A                            loc_842E:
00009E2A 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009E30 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009E36                            
00009E36                            locret_843A:
00009E36 4E75                       		rts	
00009E38                            ; ===========================================================================
00009E38                            
00009E38                            CFlo_TimeZero:
00009E38 6100 0000                  		bsr.w	ObjectFall
00009E3C 6100 0000                  		bsr.w	DisplaySprite
00009E40 4A28 0001                  		tst.b	obRender(a0)
00009E44 6A00                       		bpl.s	CFlo_Delete
00009E46 4E75                       		rts	
00009E48                            ; ===========================================================================
00009E48                            
00009E48                            CFlo_Delete:	; Routine 8
00009E48 6100 0000                  		bsr.w	DeleteObject
00009E4C 4E75                       		rts	
00009E4E                            ; ===========================================================================
00009E4E                            
00009E4E                            CFlo_Fragment:
00009E4E 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009E54                            
00009E54                            loc_8458:
00009E54 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009E5A 0828 0000 0028             		btst	#0,obSubtype(a0)
00009E60 6700                       		beq.s	loc_846C
00009E62 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009E68                            
00009E68                            loc_846C:
00009E68 7207                       		moveq	#7,d1
00009E6A 5228 001A                  		addq.b	#1,obFrame(a0)
00009E6E 6000                       		bra.s	loc_8486
00009E6E 6000                       		bra.s	loc_8486
00009E70                            
00009E70                            ; ===========================================================================
00009E70                            
00009E70                            Ledge_Fragment:
00009E70 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009E76                            
00009E76                            loc_847A:
00009E76 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009E7C 7218                       		moveq	#$18,d1
00009E7E 5428 001A                  		addq.b	#2,obFrame(a0)
00009E82                            
00009E82                            loc_8486:
00009E82 7000                       		moveq	#0,d0
00009E84 1028 001A                  		move.b	obFrame(a0),d0
00009E88 D040                       		add.w	d0,d0
00009E8A 2668 0004                  		movea.l	obMap(a0),a3
00009E8E D6F3 0000                  		adda.w	(a3,d0.w),a3
00009E92 524B                       		addq.w	#1,a3
00009E94 08E8 0005 0001             		bset	#5,obRender(a0)
00009E9A 1810                       		move.b	0(a0),d4
00009E9C 1A28 0001                  		move.b	obRender(a0),d5
00009EA0 2248                       		movea.l	a0,a1
00009EA2 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009EA8 1284                       		move.b	d4,0(a1)
00009EAA 234B 0004                  		move.l	a3,obMap(a1)
00009EAE 1345 0001                  		move.b	d5,obRender(a1)
00009EB2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009EB8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009EBE 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009EC4 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009ECA 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009ED0 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009ED4 5341                       		subq.w	#1,d1
00009ED6 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009EDA 303C 005F                  		move.w	#$5F,d0
00009EDE                            ; ===========================================================================
00009EDE                            
00009EDE                            loc_84AA:
00009EDE 4A11                       		tst.b	(a1)
00009EE0 6700                       		beq.s	@cont		
00009EE2 43E9 0040                  		lea		$40(a1),a1
00009EE6 51C8 FFF6                  		dbf		d0,loc_84AA	
00009EEA 6600                       		bne.s	loc_84F2	
00009EEC                            	@cont:
00009EEC 5A4B                       		addq.w	#5,a3
00009EEE                            
00009EEE                            loc_84B2:
00009EEE 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009EF4 1284                       		move.b	d4,0(a1)
00009EF6 234B 0004                  		move.l	a3,obMap(a1)
00009EFA 1345 0001                  		move.b	d5,obRender(a1)
00009EFE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009F04 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009F0A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009F10 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009F16 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009F1C 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009F20 6100 0000                  		bsr.w	DisplaySprite1
00009F24                            
00009F24                            loc_84EE:
00009F24 51C9 FFB8                  		dbf	d1,loc_84AA
00009F28                            
00009F28                            loc_84F2:
00009F28 6100 0000                  		bsr.w	DisplaySprite
00009F36                            ; ===========================================================================
00009F36                            ; ---------------------------------------------------------------------------
00009F36                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009F36                            ; ---------------------------------------------------------------------------
00009F36 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009F46 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009F50 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F58 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F60                            
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            
00009F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F60                            
00009F60                            
00009F60                            SlopeObject2:
00009F60 43F8 D000                  		lea	(v_player).w,a1
00009F64 0829 0003 0022             		btst	#3,obStatus(a1)
00009F6A 6700                       		beq.s	locret_856E
00009F6C 3029 0008                  		move.w	obX(a1),d0
00009F70 9068 0008                  		sub.w	obX(a0),d0
00009F74 D041                       		add.w	d1,d0
00009F76 E248                       		lsr.w	#1,d0
00009F78 0828 0000 0001             		btst	#0,obRender(a0)
00009F7E 6700                       		beq.s	loc_854E
00009F80 4640                       		not.w	d0
00009F82 D041                       		add.w	d1,d0
00009F84                            
00009F84                            loc_854E:
00009F84 7200                       		moveq	#0,d1
00009F86 1232 0000                  		move.b	(a2,d0.w),d1
00009F8A 3028 000C                  		move.w	obY(a0),d0
00009F8E 9041                       		sub.w	d1,d0
00009F90 7200                       		moveq	#0,d1
00009F92 1229 0016                  		move.b	obHeight(a1),d1
00009F96 9041                       		sub.w	d1,d0
00009F98 3340 000C                  		move.w	d0,obY(a1)
00009F9C 9468 0008                  		sub.w	obX(a0),d2
00009FA0 9569 0008                  		sub.w	d2,obX(a1)
00009FA4                            
00009FA4                            locret_856E:
00009FA4 4E75                       		rts	
00009FA6                            ; End of function SlopeObject2
00009FA6                            
00009FA6                            ; ===========================================================================
00009FA6                            ; ---------------------------------------------------------------------------
00009FA6                            ; Collision data for GHZ collapsing ledge
00009FA6                            ; ---------------------------------------------------------------------------
00009FA6                            Ledge_SlopeData:
00009FA6                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009FD6                            		even
00009FD6                            
00009FD6                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009FD6                            ; ---------------------------------------------------------------------------
00009FD6                            ; Sprite mappings - GHZ	collapsing ledge
00009FD6                            ; ---------------------------------------------------------------------------
00009FD6                            Map_Ledge_internal:
00009FD6 0000                       		dc.w @left-Map_Ledge_internal
00009FD8 0000                       		dc.w @right-Map_Ledge_internal
00009FDA 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009FDC 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009FDE 10                         @left:		dc.b $10
00009FDF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009FE4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FE9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FEE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FF3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FF8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FFD F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A002 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A007 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A00C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A011 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A016 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A01B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A020 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A025 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A02A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A02F 10                         @right:		dc.b $10
0000A030 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A035 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A03A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A03F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A044 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A049 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A04E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A053 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A058 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A05D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A062 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A067 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A06C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A071 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A076 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A07B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A080 19                         @leftsmash:	dc.b $19
0000A081 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A086 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A08B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A090 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A095 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A09A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A09F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0A4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0A9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0AE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A0B3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A0B8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A0BD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A0C2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A0C7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A0CC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A0D1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A0D6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A0DB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A0E0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A0E5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A0EA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0EF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0F4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0F9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0FE 19                         @rightsmash:	dc.b $19
0000A0FF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A104 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A109 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A10E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A113 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A118 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A11D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A122 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A127 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A12C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A131 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A136 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A13B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A140 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A145 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A14A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A14F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A154 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A159 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A15E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A163 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A168 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A16D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A172 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A177 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A17C                            		even
0000A17C                            		even
0000A17C                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A17C                            ; --------------------------------------------------------------------------------
0000A17C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A17C                            ; --------------------------------------------------------------------------------
0000A17C                            
0000A17C                            SME_WNa9T:	
0000A17C 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
0000A180 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
0000A184 08                         SME_WNa9T_8:	dc.b 8	
0000A185 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A18A 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A18F F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A194 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A199 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A19E 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A1A3 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A1A8 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A1AD 08                         SME_WNa9T_31:	dc.b 8	
0000A1AE F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A1B3 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A1B8 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A1BD 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A1C2 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A1C7 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A1CC F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A1D1 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A1D6 04                         SME_WNa9T_5A:	dc.b 4	
0000A1D7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0000A1DC 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
0000A1E1 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0000A1E6 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
0000A1EB 08                         SME_WNa9T_6F:	dc.b 8	
0000A1EC F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A1F1 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
0000A1F6 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A1FB F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
0000A200 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
0000A205 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
0000A20A 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
0000A20F 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
0000A214                            		even
0000A214                            		even
0000A214                            
0000A214                            		include	"_incObj\1C Scenery.asm"
0000A214                            ; ---------------------------------------------------------------------------
0000A214                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A214                            ; ---------------------------------------------------------------------------
0000A214                            
0000A214                            Scenery:
0000A214 7000                       		moveq	#0,d0
0000A216 1028 0024                  		move.b	obRoutine(a0),d0
0000A21A 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A21E 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A222                            ; ===========================================================================
0000A222 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A224 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A226                            ; ===========================================================================
0000A226                            
0000A226                            Scen_Main:	; Routine 0
0000A226 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A22A 7000                       		moveq	#0,d0
0000A22C 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A230 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A234 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A238 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A23C 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A240 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A246 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A24A 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A24E 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A252 3028 0018                  		move.w obPriority(a0),d0 
0000A256 E248                       		lsr.w #1,d0 
0000A258 0240 0380                  		andi.w #$380,d0 
0000A25C 3140 0018                  		move.w d0,obPriority(a0)		
0000A260 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A264                            
0000A264                            Scen_ChkDel:	; Routine 2
0000A282 6000 0000                  		bra.w	DisplaySprite
0000A286                            ; ===========================================================================
0000A286                            ; ---------------------------------------------------------------------------
0000A286                            ; Variables for	object $1C are stored in an array
0000A286                            ; ---------------------------------------------------------------------------
0000A286 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A28A 44D8                       		dc.w $44D8		; VRAM setting
0000A28C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A290 0000 0000                  		dc.l Map_Scen
0000A294 44D8                       		dc.w $44D8
0000A296 0008 0200                  		dc.b 0,	8, 2, 0
0000A29A 0000 0000                  		dc.l Map_Scen
0000A29E 44D8                       		dc.w $44D8
0000A2A0 0008 0200                  		dc.b 0,	8, 2, 0
0000A2A4 0000 933A                  		dc.l Map_Bri
0000A2A8 438E                       		dc.w $438E
0000A2AA 0110 0100                  		dc.b 1,	$10, 1,	0
0000A2AE                            		even
0000A2AE                            		even
0000A2AE                            Map_Scen:	include	"_maps\Scenery.asm"
0000A2AE                            ; ---------------------------------------------------------------------------
0000A2AE                            ; Sprite mappings - SLZ	lava thrower
0000A2AE                            ; ---------------------------------------------------------------------------
0000A2AE                            Map_Scen_internal:
0000A2AE 0000                       		dc.w byte_8858-Map_Scen_internal
0000A2B0 01                         byte_8858:	dc.b 1
0000A2B1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A2B6                            		even
0000A2B6                            		even
0000A2B6                            
0000A2B6                            		include	"_incObj\1D Unused Switch.asm"
0000A2B6                            ; ---------------------------------------------------------------------------
0000A2B6                            ; Object 1D - switch that activates when Sonic touches it
0000A2B6                            ; (this	is not used anywhere in	the game)
0000A2B6                            ; ---------------------------------------------------------------------------
0000A2B6                            
0000A2B6                            MagicSwitch:
0000A2B6 7000                       		moveq	#0,d0
0000A2B8 1028 0024                  		move.b	obRoutine(a0),d0
0000A2BC 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A2C0 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A2C4                            ; ===========================================================================
0000A2C4 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A2C6 0000                       		dc.w Swi_Action-Swi_Index
0000A2C8 0000                       		dc.w Swi_Delete-Swi_Index
0000A2CA                            
0000A2CA =00000030                  swi_origY:	equ $30		; original y-axis position
0000A2CA                            ; ===========================================================================
0000A2CA                            
0000A2CA                            Swi_Main:	; Routine 0
0000A2CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A2CE 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A2D6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A2DC 117C 0004 0001             		move.b	#4,obRender(a0)
0000A2E2 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A2E8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A2EE 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A2F4                            
0000A2F4                            Swi_Action:	; Routine 2
0000A2F4 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A2FA 323C 0010                  		move.w	#$10,d1
0000A2FE 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A302 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A304                            
0000A304 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A308 7001                       		moveq	#1,d0
0000A30A 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A30E                            
0000A30E                            Swi_ChkDel:
0000A30E 6100 0000                  		bsr.w	DisplaySprite
0000A330 4E75                       		rts	
0000A332                            ; ===========================================================================
0000A332                            
0000A332                            Swi_Delete:	; Routine 4
0000A332 6100 0000                  		bsr.w	DeleteObject
0000A336 4E75                       		rts	
0000A338                            
0000A338                            ; ---------------------------------------------------------------------------
0000A338                            ; Subroutine to	check if Sonic touches the object
0000A338                            ; ---------------------------------------------------------------------------
0000A338                            
0000A338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A338                            
0000A338                            
0000A338                            Swi_ChkTouch:
0000A338 43F8 D000                  		lea	(v_player).w,a1
0000A33C 3029 0008                  		move.w	obX(a1),d0
0000A340 9068 0008                  		sub.w	obX(a0),d0
0000A344 D041                       		add.w	d1,d0
0000A346 6B00                       		bmi.s	Swi_NoTouch
0000A348 D241                       		add.w	d1,d1
0000A34A B041                       		cmp.w	d1,d0
0000A34C 6400                       		bcc.s	Swi_NoTouch
0000A34E 3429 000C                  		move.w	obY(a1),d2
0000A352 1229 0016                  		move.b	obHeight(a1),d1
0000A356 4881                       		ext.w	d1
0000A358 D242                       		add.w	d2,d1
0000A35A 3028 000C                  		move.w	obY(a0),d0
0000A35E 0440 0010                  		subi.w	#$10,d0
0000A362 9041                       		sub.w	d1,d0
0000A364 6200                       		bhi.s	Swi_NoTouch
0000A366 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A36A 6500                       		bcs.s	Swi_NoTouch
0000A36C 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A36E 4E75                       		rts	
0000A370                            ; ===========================================================================
0000A370                            
0000A370                            Swi_NoTouch:
0000A370 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A372 4E75                       		rts	
0000A374                            ; End of function Swi_ChkTouch
0000A374                            ; End of function Swi_ChkTouch
0000A374                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A374                            ; ---------------------------------------------------------------------------
0000A374                            ; Sprite mappings - Unused switch thingy
0000A374                            ; ---------------------------------------------------------------------------
0000A374                            Map_Swi_internal:
0000A374 0000                       		dc.w byte_891E-Map_Swi_internal
0000A376 04                         byte_891E:	dc.b 4
0000A377 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A37C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A381 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A386 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A38C 00                         		even
0000A38C 00                         		even
0000A38C                            
0000A38C                            		include	"_incObj\2A SBZ Small Door.asm"
0000A38C                            ; ---------------------------------------------------------------------------
0000A38C                            ; Object 2A - small vertical door (SBZ)
0000A38C                            ; ---------------------------------------------------------------------------
0000A38C                            
0000A38C                            AutoDoor:
0000A38C 7000                       		moveq	#0,d0
0000A38E 1028 0024                  		move.b	obRoutine(a0),d0
0000A392 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A396 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A39A                            ; ===========================================================================
0000A39A 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A39C 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A39E                            ; ===========================================================================
0000A39E                            
0000A39E                            ADoor_Main:	; Routine 0
0000A39E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3A2 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A3AA 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A3B0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A3B6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A3BC                            		;move.b	#4,obPriority(a0)
0000A3BC                            
0000A3BC                            ADoor_OpenShut:	; Routine 2
0000A3BC 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A3C0 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A3C4 3038 D008                  		move.w	(v_player+obX).w,d0
0000A3C8 D041                       		add.w	d1,d0
0000A3CA B068 0008                  		cmp.w	obX(a0),d0
0000A3CE 6500                       		bcs.s	ADoor_Animate
0000A3D0 9041                       		sub.w	d1,d0
0000A3D2 9041                       		sub.w	d1,d0
0000A3D4 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A3D8 6400                       		bcc.s	ADoor_Animate	; close door
0000A3DA D041                       		add.w	d1,d0
0000A3DC B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A3E0 6400                       		bcc.s	loc_899A	; if yes, branch
0000A3E2 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3E8 6600                       		bne.s	ADoor_Animate
0000A3EA 6000                       		bra.s	ADoor_Open
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            loc_899A:
0000A3EC 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3F2 6700                       		beq.s	ADoor_Animate
0000A3F4                            
0000A3F4                            ADoor_Open:
0000A3F4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A3FA                            
0000A3FA                            ADoor_Animate:
0000A3FA 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A400 6100 0000                  		bsr.w	AnimateSprite
0000A404 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A408 6600                       		bne.s	@remember	; if yes, branch
0000A40A 323C 0011                  		move.w	#$11,d1
0000A40E 343C 0020                  		move.w	#$20,d2
0000A412 3602                       		move.w	d2,d3
0000A414 5243                       		addq.w	#1,d3
0000A416 3828 0008                  		move.w	obX(a0),d4
0000A41A 6100 0000                  		bsr.w	SolidObject
0000A41E                            
0000A41E                            	@remember:
0000A41E 6000 0000                  		bra.w	RememberState
0000A41E 6000 0000                  		bra.w	RememberState
0000A422                            		include	"_anim\SBZ Small Door.asm"
0000A422                            ; ---------------------------------------------------------------------------
0000A422                            ; Animation script - doors (SBZ)
0000A422                            ; ---------------------------------------------------------------------------
0000A422 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A424 0000                       		dc.w @open-Ani_ADoor
0000A426 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A432 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A43E                            		even
0000A43E                            		even
0000A43E                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A43E                            ; --------------------------------------------------------------------------------
0000A43E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A43E                            ; --------------------------------------------------------------------------------
0000A43E                            
0000A43E                            SME_YnmwF:	
0000A43E 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A442 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A446 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A44A 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A44E 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A450 02                         SME_YnmwF_12:	dc.b 2	
0000A451 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A456 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A45B 02                         SME_YnmwF_1D:	dc.b 2	
0000A45C DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A461 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A466 02                         SME_YnmwF_28:	dc.b 2	
0000A467 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A46C 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A471 02                         SME_YnmwF_33:	dc.b 2	
0000A472 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A477 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A47C 02                         SME_YnmwF_3E:	dc.b 2	
0000A47D D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A482 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A487 02                         SME_YnmwF_49:	dc.b 2	
0000A488 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A48D 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A492 02                         SME_YnmwF_54:	dc.b 2	
0000A493 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A498 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A49D 02                         SME_YnmwF_5F:	dc.b 2	
0000A49E C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A4A3 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A4A8 02                         SME_YnmwF_6A:	dc.b 2	
0000A4A9 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A4AE 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A4B4 00                         		even
0000A4B4 00                         		even
0000A4B4                            
0000A4B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4B4                            
0000A4B4                            
0000A4B4                            Obj44_SolidWall:
0000A4B4 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A4B8 6700                       		beq.s	loc_8AA8
0000A4BA 6B00 0000                  		bmi.w	loc_8AC4
0000A4BE 4A40                       		tst.w	d0
0000A4C0 6700 0000                  		beq.w	loc_8A92
0000A4C4 6B00                       		bmi.s	loc_8A7C
0000A4C6 4A69 0010                  		tst.w	obVelX(a1)
0000A4CA 6B00                       		bmi.s	loc_8A92
0000A4CC 6000                       		bra.s	loc_8A82
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            loc_8A7C:
0000A4CE 4A69 0010                  		tst.w	obVelX(a1)
0000A4D2 6A00                       		bpl.s	loc_8A92
0000A4D4                            
0000A4D4                            loc_8A82:
0000A4D4 9169 0008                  		sub.w	d0,obX(a1)
0000A4D8 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A4DE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A4E4                            
0000A4E4                            loc_8A92:
0000A4E4 0829 0001 0022             		btst	#1,obStatus(a1)
0000A4EA 6600                       		bne.s	loc_8AB6
0000A4EC 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A4F2 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A4F8 4E75                       		rts	
0000A4FA                            ; ===========================================================================
0000A4FA                            
0000A4FA                            loc_8AA8:
0000A4FA 0828 0005 0022             		btst	#5,obStatus(a0)
0000A500 6700                       		beq.s	locret_8AC2
0000A502 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A508                            
0000A508                            loc_8AB6:
0000A508 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A50E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A514                            
0000A514                            locret_8AC2:
0000A514 4E75                       		rts	
0000A516                            ; ===========================================================================
0000A516                            
0000A516                            loc_8AC4:
0000A516 4A69 0012                  		tst.w	obVelY(a1)
0000A51A 6A00                       		bpl.s	locret_8AD8
0000A51C 4A43                       		tst.w	d3
0000A51E 6A00                       		bpl.s	locret_8AD8
0000A520 9769 000C                  		sub.w	d3,obY(a1)
0000A524 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A52A                            
0000A52A                            locret_8AD8:
0000A52A 4E75                       		rts	
0000A52C                            ; End of function Obj44_SolidWall
0000A52C                            
0000A52C                            
0000A52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A52C                            
0000A52C                            
0000A52C                            Obj44_SolidWall2:
0000A52C 43F8 D000                  		lea	(v_player).w,a1
0000A530 3029 0008                  		move.w	obX(a1),d0
0000A534 9068 0008                  		sub.w	obX(a0),d0
0000A538 D041                       		add.w	d1,d0
0000A53A 6B00                       		bmi.s	loc_8B48
0000A53C 3601                       		move.w	d1,d3
0000A53E D643                       		add.w	d3,d3
0000A540 B043                       		cmp.w	d3,d0
0000A542 6200                       		bhi.s	loc_8B48
0000A544 1629 0016                  		move.b	obHeight(a1),d3
0000A548 4883                       		ext.w	d3
0000A54A D443                       		add.w	d3,d2
0000A54C 3629 000C                  		move.w	obY(a1),d3
0000A550 9668 000C                  		sub.w	obY(a0),d3
0000A554 D642                       		add.w	d2,d3
0000A556 6B00                       		bmi.s	loc_8B48
0000A558 3802                       		move.w	d2,d4
0000A55A D844                       		add.w	d4,d4
0000A55C B644                       		cmp.w	d4,d3
0000A55E 6400                       		bhs.s	loc_8B48
0000A560 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A564 6B00                       		bmi.s	loc_8B48
0000A566 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A56C 6400                       		bhs.s	loc_8B48
0000A56E 4A78 FE08                  		tst.w	(v_debuguse).w
0000A572 6600                       		bne.s	loc_8B48
0000A574 3A00                       		move.w	d0,d5
0000A576 B240                       		cmp.w	d0,d1
0000A578 6400                       		bhs.s	loc_8B30
0000A57A D241                       		add.w	d1,d1
0000A57C 9041                       		sub.w	d1,d0
0000A57E 3A00                       		move.w	d0,d5
0000A580 4445                       		neg.w	d5
0000A582                            
0000A582                            loc_8B30:
0000A582 3203                       		move.w	d3,d1
0000A584 B443                       		cmp.w	d3,d2
0000A586 6400                       		bhs.s	loc_8B3C
0000A588 9644                       		sub.w	d4,d3
0000A58A 3203                       		move.w	d3,d1
0000A58C 4441                       		neg.w	d1
0000A58E                            
0000A58E                            loc_8B3C:
0000A58E BA41                       		cmp.w	d1,d5
0000A590 6200                       		bhi.s	loc_8B44
0000A592 7801                       		moveq	#1,d4
0000A594 4E75                       		rts	
0000A596                            ; ===========================================================================
0000A596                            
0000A596                            loc_8B44:
0000A596 78FF                       		moveq	#-1,d4
0000A598 4E75                       		rts	
0000A59A                            ; ===========================================================================
0000A59A                            
0000A59A                            loc_8B48:
0000A59A 7800                       		moveq	#0,d4
0000A59C 4E75                       		rts	
0000A59E                            ; End of function Obj44_SolidWall2
0000A59E                            
0000A59E                            ; ===========================================================================
0000A59E                            
0000A59E                            		include	"_incObj\1E Ball Hog.asm"
0000A59E                            ; ---------------------------------------------------------------------------
0000A59E                            ; Object 1E - Ball Hog enemy (SBZ)
0000A59E                            ; ---------------------------------------------------------------------------
0000A59E                            
0000A59E                            BallHog:
0000A59E 7000                       		moveq	#0,d0
0000A5A0 1028 0024                  		move.b	obRoutine(a0),d0
0000A5A4 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A5A8 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A5AC                            ; ===========================================================================
0000A5AC 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A5AE 0000                       		dc.w Hog_Action-Hog_Index
0000A5B0                            
0000A5B0 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A5B0                            ; ===========================================================================
0000A5B0                            
0000A5B0                            Hog_Main:	; Routine 0
0000A5B0 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A5B6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A5BC 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A5C4 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A5CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5D0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A5D6 117C 0005 0020             		move.b	#5,obColType(a0)
0000A5DC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A5E2 6100 0000                  		bsr.w	ObjectFall
0000A5E6 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A5EC 4A41                       		tst.w	d1
0000A5EE 6A00                       		bpl.s	@floornotfound
0000A5F0 D368 000C                  		add.w	d1,obY(a0)
0000A5F4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A5FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5FE                            
0000A5FE                            	@floornotfound:
0000A5FE 4E75                       		rts	
0000A600                            ; ===========================================================================
0000A600                            
0000A600                            Hog_Action:	; Routine 2
0000A600 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A606 6100 0000                  		bsr.w	AnimateSprite
0000A60A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A610 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A612 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A616 6700                       		beq.s	@makeball	; if yes, branch
0000A618 6000                       		bra.s	@remember
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            @setlaunchflag:
0000A61A 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A61E                            
0000A61E                            @remember:
0000A61E 6000 0000                  		bra.w	RememberState
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            @makeball:
0000A622 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A628 6100 0000                  		bsr.w	FindFreeObj
0000A62C 6600                       		bne.s	@fail
0000A62E 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A632 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A638 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A63E 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A644 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A64A 70FC                       		moveq	#-4,d0
0000A64C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A652 6700                       		beq.s	@noflip		; if not, branch
0000A654 4440                       		neg.w	d0
0000A656 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A65A                            
0000A65A                            	@noflip:
0000A65A D169 0008                  		add.w	d0,obX(a1)
0000A65E 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A664 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A66A                            
0000A66A                            	@fail:
0000A66A 60B2                       		bra.s	@remember
0000A66A 60B2                       		bra.s	@remember
0000A66C                            		include	"_incObj\20 Cannonball.asm"
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            
0000A66C                            Cannonball:
0000A66C 7000                       		moveq	#0,d0
0000A66E 1028 0024                  		move.b	obRoutine(a0),d0
0000A672 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A676 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A67A                            ; ===========================================================================
0000A67A 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A67C 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A67E                            
0000A67E =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            Cbal_Main:	; Routine 0
0000A67E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A682 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A688 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A690 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A696 117C 0004 0001             		move.b	#4,obRender(a0)
0000A69C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A6A2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A6A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A6AE 7000                       		moveq	#0,d0
0000A6B0 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A6B4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A6B8 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A6BC 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A6C2                            
0000A6C2                            Cbal_Bounce:	; Routine 2
0000A6C2 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A6C8 4A68 0012                  		tst.w	obVelY(a0)
0000A6CC 6B00                       		bmi.s	Cbal_ChkExplode
0000A6CE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A6D4 4A41                       		tst.w	d1		; has ball hit the floor?
0000A6D6 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A6D8                            
0000A6D8 D368 000C                  		add.w	d1,obY(a0)
0000A6DC 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A6E2 4A03                       		tst.b	d3
0000A6E4 6700                       		beq.s	Cbal_ChkExplode
0000A6E6 6B00                       		bmi.s	loc_8CA4
0000A6E8 4A68 0010                  		tst.w	obVelX(a0)
0000A6EC 6A00                       		bpl.s	Cbal_ChkExplode
0000A6EE 4468 0010                  		neg.w	obVelX(a0)
0000A6F2 6000                       		bra.s	Cbal_ChkExplode
0000A6F4                            ; ===========================================================================
0000A6F4                            
0000A6F4                            loc_8CA4:
0000A6F4 4A68 0010                  		tst.w	obVelX(a0)
0000A6F8 6B00                       		bmi.s	Cbal_ChkExplode
0000A6FA 4468 0010                  		neg.w	obVelX(a0)
0000A6FE                            
0000A6FE                            Cbal_ChkExplode:
0000A6FE 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A702 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A704                            
0000A704                            	Cbal_Explode:
0000A704 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A708 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A70C 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A712 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A716                            ; ===========================================================================
0000A716                            
0000A716                            Cbal_Animate:
0000A716 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A71A 6A00                       		bpl.s	Cbal_Display
0000A71C 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A722 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A728                            
0000A728                            Cbal_Display:
0000A728 6100 0000                  		bsr.w	DisplaySprite
0000A72C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A730 0640 00E0                  		addi.w	#$E0,d0
0000A734 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A738 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A73C 4E75                       		rts	
0000A73C 4E75                       		rts	
0000A73E                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            
0000A73E                            MissileDissolve:
0000A73E 7000                       		moveq	#0,d0
0000A740 1028 0024                  		move.b	obRoutine(a0),d0
0000A744 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A748 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A74C                            ; ===========================================================================
0000A74C 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A74E 0000                       		dc.w MDis_Animate-MDis_Index
0000A750                            ; ===========================================================================
0000A750                            
0000A750                            MDis_Main:	; Routine 0
0000A750 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A754 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A75C 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A762 117C 0004 0001             		move.b	#4,obRender(a0)
0000A768 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A76E 117C 0000 0020             		move.b	#0,obColType(a0)
0000A774 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A77A 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A780 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A790                            
0000A790                            MDis_Animate:	; Routine 2
0000A790 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A794 6A00                       		bpl.s	@display
0000A796 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A79C 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A7A0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A7A6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7AA                            
0000A7AA                            	@display:
0000A7AA 6000 0000                  		bra.w	DisplaySprite
0000A7AE                            ; ===========================================================================
0000A7AE                            
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            
0000A7AE                            ExplosionItem:
0000A7AE 7000                       		moveq	#0,d0
0000A7B0 1028 0024                  		move.b	obRoutine(a0),d0
0000A7B4 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A7B8 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A7BC                            ; ===========================================================================
0000A7BC 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A7BE 0000                       		dc.w ExItem_Main-ExItem_Index
0000A7C0 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            ExItem_Animal:	; Routine 0
0000A7C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C6 6100 0000                  		bsr.w	FindFreeObj
0000A7CA 6600                       		bne.s	ExItem_Main
0000A7CC 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A7D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A7DC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A7E2                            
0000A7E2                            ExItem_Main:	; Routine 2
0000A7E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7E6 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A7EE 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A7F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7FA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A800 117C 0000 0020             		move.b	#0,obColType(a0)
0000A806 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A80C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A812 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A822                            
0000A822                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A822 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A826 6A00                       		bpl.s	@display
0000A828 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A82E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A832 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A838 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A83C                            
0000A83C                            	@display:
0000A83C 6000 0000                  		bra.w	DisplaySprite
0000A840                            ; ===========================================================================
0000A840                            ; ---------------------------------------------------------------------------
0000A840                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A840                            ; ---------------------------------------------------------------------------
0000A840                            
0000A840                            ExplosionBomb:
0000A840 7000                       		moveq	#0,d0
0000A842 1028 0024                  		move.b	obRoutine(a0),d0
0000A846 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A84A 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A84E                            ; ===========================================================================
0000A84E 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A850 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A852                            ; ===========================================================================
0000A852                            
0000A852                            ExBom_Main:	; Routine 0
0000A852 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A856 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A85E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A864 117C 0004 0001             		move.b	#4,obRender(a0)
0000A86A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A870 117C 0000 0020             		move.b	#0,obColType(a0)
0000A876 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A87C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A882 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A892                            		include	"_anim\Ball Hog.asm"
0000A892                            ; ---------------------------------------------------------------------------
0000A892                            ; Animation script - doors (SBZ)
0000A892                            ; ---------------------------------------------------------------------------
0000A892 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A894 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A8AC 00                         		even
0000A8AC 00                         		even
0000A8AC                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A8AC                            ; --------------------------------------------------------------------------------
0000A8AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A8AC                            ; --------------------------------------------------------------------------------
0000A8AC                            
0000A8AC                            SME_ZER01:	
0000A8AC 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A8B0 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A8B4 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A8B8 02                         SME_ZER01_C:	dc.b 2	
0000A8B9 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8BE FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A8C3 02                         SME_ZER01_17:	dc.b 2	
0000A8C4 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8C9 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A8CE 02                         SME_ZER01_22:	dc.b 2	
0000A8CF F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A8D4 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A8D9 02                         SME_ZER01_2D:	dc.b 2	
0000A8DA E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A8DF F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A8E4 01                         SME_ZER01_38:	dc.b 1	
0000A8E5 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A8EA 01                         SME_ZER01_3E:	dc.b 1	
0000A8EB F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A8F0                            		even
0000A8F0                            		even
0000A8F0                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            ; Sprite mappings - buzz bomber missile vanishing
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            Map_MisDissolve_internal:
0000A8F0 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A8F2 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A8F4 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A8F6 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A8F8 01                         byte_8EAE:	dc.b 1
0000A8F9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8FE 01                         byte_8EB4:	dc.b 1
0000A8FF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A904 01                         byte_8EBA:	dc.b 1
0000A905 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A90A 01                         byte_8EC0:	dc.b 1
0000A90B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A910                            		even
0000A910                            		even
0000A910                            		include	"_maps\Explosions.asm"
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            ; Sprite mappings - explosion from a badnik or monitor
0000A910                            ; ---------------------------------------------------------------------------
0000A910 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A914 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A918 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A91A 01                         byte_8ED0:	dc.b 1
0000A91B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A920 01                         byte_8ED6:	dc.b 1
0000A921 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A926 01                         byte_8EDC:	dc.b 1
0000A927 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A92C 04                         byte_8EE2:	dc.b 4
0000A92D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A932 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A937 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A93C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A941 04                         byte_8EF7:	dc.b 4
0000A942 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A947 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A94C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A951 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A956                            		even
0000A956                            ; ---------------------------------------------------------------------------
0000A956                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A956                            ; ---------------------------------------------------------------------------
0000A956 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A958 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A95A 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A95C FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A95E FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A960 01                         byte_8F16:	dc.b 1
0000A961 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A966 01                         byte_8F1C:	dc.b 1
0000A967 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A96C                            		even
0000A96C                            		even
0000A96C                            
0000A96C                            		include	"_incObj\28 Animals.asm"
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            ; Object 28 - animals
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            
0000A96C                            Animals:
0000A96C 7000                       		moveq	#0,d0
0000A96E 1028 0024                  		move.b	obRoutine(a0),d0
0000A972 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A976 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A97A                            ; ===========================================================================
0000A97A 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A97E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A982 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A986 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A98A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A98E 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A992 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A996 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A9A2 0000                       		dc.w loc_92D6-Anml_Index
0000A9A4                            
0000A9A4 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A9B0                            
0000A9B0 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A9B4 0000 0000                  		dc.l Map_Animal1
0000A9B8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A9BC 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A9C0 FE80 FD00                  		dc.w $FE80, $FD00
0000A9C4 0000 0000                  		dc.l Map_Animal1
0000A9C8 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A9CC 0000 0000                  		dc.l Map_Animal2
0000A9D0 FE40 FD00                  		dc.w $FE40, $FD00
0000A9D4 0000 0000                  		dc.l Map_Animal3
0000A9D8 FD00 FC00                  		dc.w $FD00, $FC00
0000A9DC 0000 0000                  		dc.l Map_Animal2
0000A9E0 FD80 FC80                  		dc.w $FD80, $FC80
0000A9E4 0000 0000                  		dc.l Map_Animal3
0000A9E8                            
0000A9E8 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A9F8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA08 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA14                            
0000AA14 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AA28 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AA3C 0000 0000                  		dc.l Map_Animal3
0000AA40                            
0000AA40 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AA52 0565 05B3                  		dc.w $565, $5B3
0000AA56                            ; ===========================================================================
0000AA56                            
0000AA56                            Anml_Ending:	; Routine 0
0000AA56 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AA5A 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AA5E 7000                       		moveq	#0,d0
0000AA60 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AA64 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA66 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AA6A 0440 0014                  		subi.w	#$14,d0
0000AA6E 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AA74 D040                       		add.w	d0,d0
0000AA76 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AA7C 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AA80 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA86 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AA8C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA92 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AA98 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AA9E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AAA4 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAAA 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AAB0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AAB6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AABC 6000 0000                  		bra.w	DisplaySprite
0000AAC0                            ; ===========================================================================
0000AAC0                            
0000AAC0                            Anml_FromEnemy:
0000AAC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAC4 6100 8CC2                  		bsr.w	RandomNumber
0000AAC8 0240 0001                  		andi.w	#1,d0
0000AACC 7200                       		moveq	#0,d1
0000AACE 1238 FE10                  		move.b	(v_zone).w,d1
0000AAD2 D241                       		add.w	d1,d1
0000AAD4 D240                       		add.w	d0,d1
0000AAD6 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AADA 1031 1000                  		move.b	(a1,d1.w),d0
0000AADE 1140 0030                  		move.b	d0,$30(a0)
0000AAE2 E748                       		lsl.w	#3,d0
0000AAE4 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AAE8 D2C0                       		adda.w	d0,a1
0000AAEA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AAEE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AAF2 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AAF6 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AAFC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AB02 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB04 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AB0A                            
0000AB0A                            loc_90C0:
0000AB0A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB10 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB16 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB1C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB22 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB28 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB2E 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AB34 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AB3A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AB3E 6600                       		bne.s	loc_911C
0000AB40 6100 0000                  		bsr.w	FindFreeObj
0000AB44 6600                       		bne.s	Anml_Display
0000AB46 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AB4A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AB50 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AB56 3028 003E                  		move.w	$3E(a0),d0
0000AB5A E248                       		lsr.w	#1,d0
0000AB5C 1340 001A                  		move.b	d0,obFrame(a1)
0000AB60                            
0000AB60                            Anml_Display:
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            
0000AB64                            loc_911C:
0000AB64 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AB6A 4268 0010                  		clr.w	obVelX(a0)
0000AB6E 6000 0000                  		bra.w	DisplaySprite
0000AB72                            ; ===========================================================================
0000AB72                            
0000AB72                            loc_912A:
0000AB72 4A28 0001                  		tst.b	obRender(a0)
0000AB76 6A00 0000                  		bpl.w	DeleteObject
0000AB7A 6100 0000                  		bsr.w	ObjectFall
0000AB7E 4A68 0012                  		tst.w	obVelY(a0)
0000AB82 6B00                       		bmi.s	loc_9180
0000AB84 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB8A 4A41                       		tst.w	d1
0000AB8C 6A00                       		bpl.s	loc_9180
0000AB8E D368 000C                  		add.w	d1,obY(a0)
0000AB92 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AB98 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB9E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABA4 1028 0030                  		move.b	$30(a0),d0
0000ABA8 D000                       		add.b	d0,d0
0000ABAA 5800                       		addq.b	#4,d0
0000ABAC 1140 0024                  		move.b	d0,obRoutine(a0)
0000ABB0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ABB4 6700                       		beq.s	loc_9180
0000ABB6 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ABBC 6700                       		beq.s	loc_9180
0000ABBE 4468 0010                  		neg.w	obVelX(a0)
0000ABC2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABC8                            
0000ABC8                            loc_9180:
0000ABC8 6000 0000                  		bra.w	DisplaySprite
0000ABCC                            ; ===========================================================================
0000ABCC                            
0000ABCC                            loc_9184:
0000ABCC 6100 0000                  		bsr.w	ObjectFall
0000ABD0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABD6 4A68 0012                  		tst.w	obVelY(a0)
0000ABDA 6B00                       		bmi.s	loc_91AE
0000ABDC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ABE2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABE8 4A41                       		tst.w	d1
0000ABEA 6A00                       		bpl.s	loc_91AE
0000ABEC D368 000C                  		add.w	d1,obY(a0)
0000ABF0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABF6                            
0000ABF6                            loc_91AE:
0000ABF6 4A28 0028                  		tst.b	obSubtype(a0)
0000ABFA 6600                       		bne.s	loc_9224
0000ABFC 4A28 0001                  		tst.b	obRender(a0)
0000AC00 6A00 0000                  		bpl.w	DeleteObject
0000AC04 6000 0000                  		bra.w	DisplaySprite
0000AC08                            ; ===========================================================================
0000AC08                            
0000AC08                            loc_91C0:
0000AC08 6100 0000                  		bsr.w	SpeedToPos
0000AC0C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC12 4A68 0012                  		tst.w	obVelY(a0)
0000AC16 6B00                       		bmi.s	loc_91FC
0000AC18 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC1E 4A41                       		tst.w	d1
0000AC20 6A00                       		bpl.s	loc_91FC
0000AC22 D368 000C                  		add.w	d1,obY(a0)
0000AC26 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC2C 4A28 0028                  		tst.b	obSubtype(a0)
0000AC30 6700                       		beq.s	loc_91FC
0000AC32 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AC38 6700                       		beq.s	loc_91FC
0000AC3A 4468 0010                  		neg.w	obVelX(a0)
0000AC3E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AC44                            
0000AC44                            loc_91FC:
0000AC44 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AC48 6A00                       		bpl.s	loc_9212
0000AC4A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AC50 5228 001A                  		addq.b	#1,obFrame(a0)
0000AC54 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AC5A                            
0000AC5A                            loc_9212:
0000AC5A 4A28 0028                  		tst.b	obSubtype(a0)
0000AC5E 6600                       		bne.s	loc_9224
0000AC60 4A28 0001                  		tst.b	obRender(a0)
0000AC64 6A00 0000                  		bpl.w	DeleteObject
0000AC68 6000 0000                  		bra.w	DisplaySprite
0000AC6C                            ; ===========================================================================
0000AC6C                            
0000AC6C                            loc_9224:
0000AC6C 3028 0008                  		move.w	obX(a0),d0
0000AC70 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC74 6500                       		bcs.s	loc_923C
0000AC76 0440 0180                  		subi.w	#$180,d0
0000AC7A 6A00                       		bpl.s	loc_923C
0000AC7C 4A28 0001                  		tst.b	obRender(a0)
0000AC80 6A00 0000                  		bpl.w	DeleteObject
0000AC84                            
0000AC84                            loc_923C:
0000AC84 6000 0000                  		bra.w	DisplaySprite
0000AC88                            ; ===========================================================================
0000AC88                            
0000AC88                            loc_9240:
0000AC88 4A28 0001                  		tst.b	obRender(a0)
0000AC8C 6A00 0000                  		bpl.w	DeleteObject
0000AC90 5368 0036                  		subq.w	#1,$36(a0)
0000AC94 6600 0000                  		bne.w	loc_925C
0000AC98 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AC9E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ACA4                            
0000ACA4                            loc_925C:
0000ACA4 6000 0000                  		bra.w	DisplaySprite
0000ACA8                            ; ===========================================================================
0000ACA8                            
0000ACA8                            loc_9260:
0000ACA8 6100 0000                  		bsr.w	sub_9404
0000ACAC 6400                       		bcc.s	loc_927C
0000ACAE 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACB4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACBA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000ACC0 6000 FF46                  		bra.w	loc_91C0
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            loc_927C:
0000ACC4 6000 FFA6                  		bra.w	loc_9224
0000ACC8                            ; ===========================================================================
0000ACC8                            
0000ACC8                            loc_9280:
0000ACC8 6100 0000                  		bsr.w	sub_9404
0000ACCC 6A00                       		bpl.s	loc_92B6
0000ACCE 4268 0010                  		clr.w	obVelX(a0)
0000ACD2 4268 0032                  		clr.w	$32(a0)
0000ACD6 6100 0000                  		bsr.w	SpeedToPos
0000ACDA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ACE0 6100 0000                  		bsr.w	loc_93C4
0000ACE4 6100 0000                  		bsr.w	loc_93EC
0000ACE8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ACEC 6A00                       		bpl.s	loc_92B6
0000ACEE 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ACF4 5228 001A                  		addq.b	#1,obFrame(a0)
0000ACF8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACFE                            
0000ACFE                            loc_92B6:
0000ACFE 6000 FF6C                  		bra.w	loc_9224
0000AD02                            ; ===========================================================================
0000AD02                            
0000AD02                            loc_92BA:
0000AD02 6100 0000                  		bsr.w	sub_9404
0000AD06 6A00                       		bpl.s	loc_9310
0000AD08 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD0E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD14 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AD1A 6000 FEB0                  		bra.w	loc_9184
0000AD1E                            ; ===========================================================================
0000AD1E                            
0000AD1E                            loc_92D6:
0000AD1E 6100 0000                  		bsr.w	ObjectFall
0000AD22 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD28 4A68 0012                  		tst.w	obVelY(a0)
0000AD2C 6B00                       		bmi.s	loc_9310
0000AD2E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD34 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD3A 4A41                       		tst.w	d1
0000AD3C 6A00                       		bpl.s	loc_9310
0000AD3E 4628 0029                  		not.b	$29(a0)
0000AD42 6600                       		bne.s	loc_9306
0000AD44 4468 0010                  		neg.w	obVelX(a0)
0000AD48 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD4E                            
0000AD4E                            loc_9306:
0000AD4E D368 000C                  		add.w	d1,obY(a0)
0000AD52 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD58                            
0000AD58                            loc_9310:
0000AD58 6000 FF12                  		bra.w	loc_9224
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            loc_9314:
0000AD5C 6100 0000                  		bsr.w	sub_9404
0000AD60 6A00                       		bpl.s	loc_932E
0000AD62 4268 0010                  		clr.w	obVelX(a0)
0000AD66 4268 0032                  		clr.w	$32(a0)
0000AD6A 6100 0000                  		bsr.w	ObjectFall
0000AD6E 6100 0000                  		bsr.w	loc_93C4
0000AD72 6100 0000                  		bsr.w	loc_93EC
0000AD76                            
0000AD76                            loc_932E:
0000AD76 6000 FEF4                  		bra.w	loc_9224
0000AD7A                            ; ===========================================================================
0000AD7A                            
0000AD7A                            loc_9332:
0000AD7A 6100 0000                  		bsr.w	sub_9404
0000AD7E 6A00                       		bpl.s	loc_936C
0000AD80 6100 0000                  		bsr.w	ObjectFall
0000AD84 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD8A 4A68 0012                  		tst.w	obVelY(a0)
0000AD8E 6B00                       		bmi.s	loc_936C
0000AD90 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD96 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD9C 4A41                       		tst.w	d1
0000AD9E 6A00                       		bpl.s	loc_936C
0000ADA0 4468 0010                  		neg.w	obVelX(a0)
0000ADA4 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADAA D368 000C                  		add.w	d1,obY(a0)
0000ADAE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADB4                            
0000ADB4                            loc_936C:
0000ADB4 6000 FEB6                  		bra.w	loc_9224
0000ADB8                            ; ===========================================================================
0000ADB8                            
0000ADB8                            loc_9370:
0000ADB8 6100 0000                  		bsr.w	sub_9404
0000ADBC 6A00                       		bpl.s	loc_93C0
0000ADBE 6100 0000                  		bsr.w	SpeedToPos
0000ADC2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ADC8 4A68 0012                  		tst.w	obVelY(a0)
0000ADCC 6B00                       		bmi.s	loc_93AA
0000ADCE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADD4 4A41                       		tst.w	d1
0000ADD6 6A00                       		bpl.s	loc_93AA
0000ADD8 4628 0029                  		not.b	$29(a0)
0000ADDC 6600                       		bne.s	loc_93A0
0000ADDE 4468 0010                  		neg.w	obVelX(a0)
0000ADE2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADE8                            
0000ADE8                            loc_93A0:
0000ADE8 D368 000C                  		add.w	d1,obY(a0)
0000ADEC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADF2                            
0000ADF2                            loc_93AA:
0000ADF2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ADF6 6A00                       		bpl.s	loc_93C0
0000ADF8 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ADFE 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE02 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE08                            
0000AE08                            loc_93C0:
0000AE08 6000 FE62                  		bra.w	loc_9224
0000AE0C                            ; ===========================================================================
0000AE0C                            
0000AE0C                            loc_93C4:
0000AE0C 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE12 4A68 0012                  		tst.w	obVelY(a0)
0000AE16 6B00                       		bmi.s	locret_93EA
0000AE18 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE1E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE24 4A41                       		tst.w	d1
0000AE26 6A00                       		bpl.s	locret_93EA
0000AE28 D368 000C                  		add.w	d1,obY(a0)
0000AE2C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE32                            
0000AE32                            locret_93EA:
0000AE32 4E75                       		rts	
0000AE34                            ; ===========================================================================
0000AE34                            
0000AE34                            loc_93EC:
0000AE34 08E8 0000 0001             		bset	#0,obRender(a0)
0000AE3A 3028 0008                  		move.w	obX(a0),d0
0000AE3E 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE42 6400                       		bcc.s	locret_9402
0000AE44 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AE4A                            
0000AE4A                            locret_9402:
0000AE4A 4E75                       		rts	
0000AE4C                            
0000AE4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE4C                            
0000AE4C                            
0000AE4C                            sub_9404:
0000AE4C 3038 D008                  		move.w	(v_player+obX).w,d0
0000AE50 9068 0008                  		sub.w	obX(a0),d0
0000AE54 0440 00B8                  		subi.w	#$B8,d0
0000AE58 4E75                       		rts	
0000AE5A                            ; End of function sub_9404
0000AE5A                            ; End of function sub_9404
0000AE5A                            		include	"_incObj\29 Points.asm"
0000AE5A                            ; ---------------------------------------------------------------------------
0000AE5A                            ; Object 29 - points that appear when you destroy something
0000AE5A                            ; ---------------------------------------------------------------------------
0000AE5A                            
0000AE5A                            Points:
0000AE5A 7000                       		moveq	#0,d0
0000AE5C 1028 0024                  		move.b	obRoutine(a0),d0
0000AE60 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AE64 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AE68 6000 0000                  		bra.w	DisplaySprite
0000AE6C                            ; ===========================================================================
0000AE6C 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AE6E 0000                       		dc.w Poi_Slower-Poi_Index
0000AE70                            ; ===========================================================================
0000AE70                            
0000AE70                            Poi_Main:	; Routine 0
0000AE70 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE74 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AE7C 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000AE82 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE88 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AE8E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE94 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AE9A                            
0000AE9A                            Poi_Slower:	; Routine 2
0000AE9A 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AE9E 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AEA2 6100 0000                  		bsr.w	SpeedToPos
0000AEA6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AEAC 4E75                       		rts	
0000AEAC 4E75                       		rts	
0000AEAE                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            ; Sprite mappings - animals
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            Map_Animal1_internal:
0000AEAE 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AEB0 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AEB2 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AEB4 01                         byte_946C:	dc.b 1
0000AEB5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEBA 01                         byte_9472:	dc.b 1
0000AEBB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AEC0 01                         byte_9478:	dc.b 1
0000AEC1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AEC6                            		even
0000AEC6                            		even
0000AEC6                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            ; Sprite mappings - animals
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            Map_Animal2_internal:
0000AEC6 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AEC8 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AECA 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AECC 01                         byte_9484:	dc.b 1
0000AECD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AED2 01                         byte_948A:	dc.b 1
0000AED3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AED8 01                         byte_9490:	dc.b 1
0000AED9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AEDE                            		even
0000AEDE                            		even
0000AEDE                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            ; Sprite mappings - animals
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            Map_Animal3_internal:
0000AEDE 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AEE0 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AEE2 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AEE4 01                         byte_949C:	dc.b 1
0000AEE5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEEA 01                         byte_94A2:	dc.b 1
0000AEEB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AEF0 01                         byte_94A8:	dc.b 1
0000AEF1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AEF6                            		even
0000AEF6                            		even
0000AEF6                            Map_Poi:	include	"_maps\Points.asm"
0000AEF6                            ; --------------------------------------------------------------------------------
0000AEF6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AEF6                            ; --------------------------------------------------------------------------------
0000AEF6                            
0000AEF6                            SME_qLvsg:	
0000AEF6 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AEFA 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AEFE 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AF02 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AF04 01                         SME_qLvsg_E:	dc.b 1	
0000AF05 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AF0A 01                         SME_qLvsg_14:	dc.b 1	
0000AF0B FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000AF10 01                         SME_qLvsg_1A:	dc.b 1	
0000AF11 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000AF16 01                         SME_qLvsg_20:	dc.b 1	
0000AF17 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000AF1C 01                         SME_qLvsg_26:	dc.b 1	
0000AF1D FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000AF22 02                         SME_qLvsg_2C:	dc.b 2	
0000AF23 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AF28 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000AF2D 02                         SME_qLvsg_37:	dc.b 2	
0000AF2E FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AF33 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AF38                            		even
0000AF38                            		even
0000AF38                            
0000AF38                            		include	"_incObj\1F Crabmeat.asm"
0000AF38                            ; ---------------------------------------------------------------------------
0000AF38                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AF38                            ; ---------------------------------------------------------------------------
0000AF38                            
0000AF38                            Crabmeat:
0000AF38 7000                       		moveq	#0,d0
0000AF3A 1028 0024                  		move.b	obRoutine(a0),d0
0000AF3E 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AF42 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AF46                            ; ===========================================================================
0000AF46                            Crab_Index:
0000AF46 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AF48 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AF4A 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AF4C 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AF4E 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AF50                            
0000AF50 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AF50 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AF50 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AF50 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AF50 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AF50                            
0000AF50 =00000030                  crab_timedelay:	equ $30
0000AF50 =00000032                  crab_mode:	equ $32
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            Crab_Main:	; Routine 0
0000AF50 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AF56 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AF5C 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AF64 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AF6A 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF70 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF76 117C 0006 0020             		move.b	#6,obColType(a0)
0000AF7C 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AF82 6100 0000                  		bsr.w	ObjectFall
0000AF86 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AF8C 4A41                       		tst.w	d1
0000AF8E 6A00                       		bpl.s	@floornotfound
0000AF90 D368 000C                  		add.w	d1,obY(a0)
0000AF94 1143 0026                  		move.b	d3,obAngle(a0)
0000AF98 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AF9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AFA2                            
0000AFA2                            	@floornotfound:
0000AFA2 4E75                       		rts	
0000AFA4                            ; ===========================================================================
0000AFA4                            
0000AFA4                            Crab_Action:	; Routine 2
0000AFA4 7000                       		moveq	#0,d0
0000AFA6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AFAA 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AFAE 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AFB2 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AFB8 6100 0000                  		bsr.w	AnimateSprite
0000AFBC 6000 0000                  		bra.w	RememberState
0000AFC0                            ; ===========================================================================
0000AFC0 0000                       @index:		dc.w @waittofire-@index
0000AFC2 0000                       		dc.w @walkonfloor-@index
0000AFC4                            ; ===========================================================================
0000AFC4                            
0000AFC4                            @waittofire:
0000AFC4 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AFC8 6A00                       		bpl.s	@dontmove
0000AFCA 4A28 0001                  		tst.b	obRender(a0)
0000AFCE 6A00                       		bpl.s	@movecrab
0000AFD0 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AFD6 6600                       		bne.s	@fire
0000AFD8                            
0000AFD8                            	@movecrab:
0000AFD8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AFDC 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AFE2 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AFE8 6100 0000                  		bsr.w	Crab_SetAni
0000AFEC 5600                       		addq.b	#3,d0
0000AFEE 1140 001C                  		move.b	d0,obAnim(a0)
0000AFF2 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AFF8 6600                       		bne.s	@noflip
0000AFFA 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AFFE                            
0000AFFE                            	@dontmove:
0000AFFE                            	@noflip:
0000AFFE 4E75                       		rts	
0000B000                            ; ===========================================================================
0000B000                            
0000B000                            @fire:
0000B000 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B006 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B00C 6100 0000                  		bsr.w	FindFreeObj
0000B010 6600                       		bne.s	@failleft
0000B012 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B016 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B01C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B022 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B028 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B02E 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B034                            
0000B034                            	@failleft:
0000B034 6100 0000                  		bsr.w	FindFreeObj
0000B038 6600                       		bne.s	@failright
0000B03A 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B03E 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B044 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B04A 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B050 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B056 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B05C                            
0000B05C                            	@failright:
0000B05C 4E75                       		rts	
0000B05E                            ; ===========================================================================
0000B05E                            
0000B05E                            @walkonfloor:
0000B05E 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B062 6B00                       		bmi.s	loc_966E
0000B064 6100 0000                  		bsr.w	SpeedToPos
0000B068 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B06E 6600                       		bne.s	loc_9654
0000B070 3628 0008                  		move.w	obX(a0),d3
0000B074 0643 0010                  		addi.w	#$10,d3
0000B078 0828 0000 0022             		btst	#0,obStatus(a0)
0000B07E 6700                       		beq.s	loc_9640
0000B080 0443 0020                  		subi.w	#$20,d3
0000B084                            
0000B084                            loc_9640:
0000B084 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B08A 0C41 FFF8                  		cmpi.w	#-8,d1
0000B08E 6D00                       		blt.s	loc_966E
0000B090 0C41 000C                  		cmpi.w	#$C,d1
0000B094 6C00                       		bge.s	loc_966E
0000B096 4E75                       		rts	
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            loc_9654:
0000B098 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B09E D368 000C                  		add.w	d1,obY(a0)
0000B0A2 1143 0026                  		move.b	d3,obAngle(a0)
0000B0A6 6100 0000                  		bsr.w	Crab_SetAni
0000B0AA 5600                       		addq.b	#3,d0
0000B0AC 1140 001C                  		move.b	d0,obAnim(a0)
0000B0B0 4E75                       		rts	
0000B0B2                            ; ===========================================================================
0000B0B2                            
0000B0B2                            loc_966E:
0000B0B2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B0B6 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B0BC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B0C2 6100 0000                  		bsr.w	Crab_SetAni
0000B0C6 1140 001C                  		move.b	d0,obAnim(a0)
0000B0CA 4E75                       		rts	
0000B0CC                            ; ---------------------------------------------------------------------------
0000B0CC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B0CC                            ; ---------------------------------------------------------------------------
0000B0CC                            
0000B0CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0CC                            
0000B0CC                            
0000B0CC                            Crab_SetAni:
0000B0CC 7000                       		moveq	#0,d0
0000B0CE 1628 0026                  		move.b	obAngle(a0),d3
0000B0D2 6B00                       		bmi.s	loc_96A4
0000B0D4 0C03 0006                  		cmpi.b	#6,d3
0000B0D8 6500                       		bcs.s	locret_96A2
0000B0DA 7001                       		moveq	#1,d0
0000B0DC 0828 0000 0022             		btst	#0,obStatus(a0)
0000B0E2 6600                       		bne.s	locret_96A2
0000B0E4 7002                       		moveq	#2,d0
0000B0E6                            
0000B0E6                            locret_96A2:
0000B0E6 4E75                       		rts	
0000B0E8                            ; ===========================================================================
0000B0E8                            
0000B0E8                            loc_96A4:
0000B0E8 0C03 00FA                  		cmpi.b	#-6,d3
0000B0EC 6200                       		bhi.s	locret_96B6
0000B0EE 7002                       		moveq	#2,d0
0000B0F0 0828 0000 0022             		btst	#0,obStatus(a0)
0000B0F6 6600                       		bne.s	locret_96B6
0000B0F8 7001                       		moveq	#1,d0
0000B0FA                            
0000B0FA                            locret_96B6:
0000B0FA 4E75                       		rts	
0000B0FC                            ; End of function Crab_SetAni
0000B0FC                            
0000B0FC                            ; ===========================================================================
0000B0FC                            
0000B0FC                            Crab_Delete:	; Routine 4
0000B0FC 6100 0000                  		bsr.w	DeleteObject
0000B100 4E75                       		rts	
0000B102                            ; ===========================================================================
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            ; Sub-object - missile that the	Crabmeat throws
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            
0000B102                            Crab_BallMain:	; Routine 6
0000B102 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B106 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B10E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B114 117C 0004 0001             		move.b	#4,obRender(a0)
0000B11A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B120 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B126 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B12C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B132 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B138                            
0000B138                            Crab_BallMove:	; Routine 8
0000B138 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B13E 6100 0000                  		bsr.w	AnimateSprite
0000B142 6100 0000                  		bsr.w	ObjectFall
0000B146 6100 0000                  		bsr.w	DisplaySprite
0000B14A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B14E 0640 00E0                  		addi.w	#$E0,d0
0000B152 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B156 6500                       		bcs.s	@delete		; if yes, branch
0000B158 4E75                       		rts	
0000B15A                            
0000B15A                            	@delete:
0000B15A 6000 0000                  		bra.w	DeleteObject
0000B15A 6000 0000                  		bra.w	DeleteObject
0000B15E                            		include	"_anim\Crabmeat.asm"
0000B15E                            ; ---------------------------------------------------------------------------
0000B15E                            ; Animation script - Crabmeat enemy
0000B15E                            ; ---------------------------------------------------------------------------
0000B15E 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B164 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B16A 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B16E 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B172 00                         		even
0000B172 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B176 00                         		even
0000B176 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B17A 00                         		even
0000B17A 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B180 00                         		even
0000B180 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B186 00                         		even
0000B186 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B18C 00                         		even
0000B18C 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B190 00                         		even
0000B190 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B194                            		even
0000B194                            		even
0000B194                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B194                            ; ---------------------------------------------------------------------------
0000B194                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B194                            ; ---------------------------------------------------------------------------
0000B194                            Map_Crab_internal:
0000B194 0000                       		dc.w @stand-Map_Crab_internal
0000B196 0000                       		dc.w @walk-Map_Crab_internal
0000B198 0000                       		dc.w @slope1-Map_Crab_internal
0000B19A 0000                       		dc.w @slope2-Map_Crab_internal
0000B19C 0000                       		dc.w @firing-Map_Crab_internal
0000B19E 0000                       		dc.w @ball1-Map_Crab_internal
0000B1A0 0000                       		dc.w @ball2-Map_Crab_internal
0000B1A2 04                         @stand:		dc.b 4
0000B1A3 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B1A8 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B1AD 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B1B2 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B1B7 04                         @walk:		dc.b 4
0000B1B8 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B1BD F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B1C2 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B1C7 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B1CC 04                         @slope1:	dc.b 4
0000B1CD EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B1D2 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B1D7 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B1DC FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B1E1 04                         @slope2:	dc.b 4
0000B1E2 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B1E7 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B1EC FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B1F1 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B1F6 06                         @firing:	dc.b 6
0000B1F7 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B1FC F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B201 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B206 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B20B 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B210 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B215 01                         @ball1:		dc.b 1
0000B216 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B21B 01                         @ball2:		dc.b 1
0000B21C F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B222 00                         		even
0000B222 00                         		even
0000B222                            		include	"_incObj\06 Mozzietron.asm"
0000B222                            ; ===========================================================================
0000B222                            ; ---------------------------------------------------------------------------
0000B222                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B222                            ; ---------------------------------------------------------------------------
0000B222                            
0000B222                            Mozzietron:					; XREF: Obj_Index
0000B222 7000                       		moveq	#0,d0
0000B224 1028 0024                  		move.b	$24(a0),d0
0000B228 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B22C 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B230                            ; ===========================================================================
0000B230 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B232 0000                       		dc.w MozAction-MozIndex
0000B234 0000                       		dc.w MozDelete-MozIndex
0000B236                            ; ===========================================================================
0000B236                            
0000B236                            MozMain:				; XREF: MozIndex
0000B236 5428 0024                  		addq.b	#2,$24(a0)
0000B23A 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B242 317C 0444 0002             		move.w	#$444,2(a0)
0000B248 117C 0004 0001             		move.b	#4,1(a0)
0000B24E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B254 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B25A 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B260                            MozAction:				; XREF: MozIndex
0000B260 7000                       		moveq	#0,d0
0000B262 1028 0025                  		move.b	$25(a0),d0
0000B266 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B26A 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B26E 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B274 6100 0000                  		bsr.w	AnimateSprite
0000B278 6000 0000                  		bra.w	RememberState
0000B27C                            ; ===========================================================================
0000B27C 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B27E 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B280 0000                       		dc.w MozPinned-MozIndex2
0000B282                            ; ===========================================================================
0000B282                            
0000B282                            MozMove:				; XREF: MozIndex2
0000B282 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B286 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B288 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B28E 6600                       		bne.s	MozFire	; if yes, branch
0000B290 5428 0025                  		addq.b	#2,$25(a0)
0000B294 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B29A 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B2A0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B2A6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B2AC 6600                       		bne.s	locret_986C	; if not, branch
0000B2AE 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B2B2                            
0000B2B2                            locret_986C:
0000B2B2 4E75                       		rts	
0000B2B4                            ; ===========================================================================
0000B2B4                            
0000B2B4                            MozFire:				; XREF: MozMove
0000B2B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B2BA 6100 0000                  		bsr.w	ObjectFall
0000B2BE 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B2C4 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B2C6 6A00                       		bpl.s   @return ; if yes, branch 
0000B2C8 303C 00B6                  		move.w    #$B6,d0
0000B2CC 4EB9 0000 0FCC             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B2D2 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B2D8 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B2DC 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B2E0 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B2E4                            		@return:
0000B2E4 4E75                       	    		rts
0000B2E6                            		
0000B2E6                            
0000B2E6                            ; ===========================================================================
0000B2E6                            
0000B2E6                            MozPinned:
0000B2E6 4E75                               rts
0000B2E8                                    
0000B2E8                            ; ===========================================================================
0000B2E8                            
0000B2E8                            MozChkDel:				; XREF: Obj55_DropFly
0000B2E8 4A28 0001                  		tst.b	1(a0)
0000B2EC 6A00 0000                  		bpl.w	DeleteObject
0000B2F0 4E75                       		rts	
0000B2F2                            ; ===========================================================================
0000B2F2                            
0000B2F2                            MozChkNrSonic:			; XREF: MozIndex2
0000B2F2                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2F2 6B00                       		bmi.s	MozChgDir
0000B2F4 6100 0000                  		bsr.w	SpeedToPos
0000B2F8 4A28 0034                  		tst.b	$34(a0)
0000B2FC 6600                       		bne.s	locret_992A
0000B2FE 3038 D008                  		move.w	($FFFFD008).w,d0
0000B302 9068 0008                  		sub.w	8(a0),d0
0000B306 6A00                       		bpl.s	MozSetNrSonic
0000B308 4440                       		neg.w	d0
0000B30A                            
0000B30A                            MozSetNrSonic:
0000B30A 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B30E 6400                       		bcc.s	locret_992A	; if not, branch
0000B310 4A28 0001                  		tst.b	1(a0)
0000B314 6A00                       		bpl.s	locret_992A
0000B316 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B31C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B322 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B328 6000                       		bra.s	MozStop
0000B32A                            ; ===========================================================================
0000B32A                            
0000B32A                            MozChgDir:				; XREF: MozChkNrSonic
0000B32A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B330 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B336 317C 003B 0032             		move.w	#59,$32(a0)
0000B33C                            
0000B33C                            MozStop:				; XREF: MozSetNrSonic
0000B33C 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B340 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B346 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B34C                            
0000B34C                            locret_992A:
0000B34C 4E75                       		rts	
0000B34E                            ; ===========================================================================
0000B34E                            
0000B34E                            MozDelete:				; XREF: MozIndex
0000B34E 6100 0000                  		bsr.w	DeleteObject
0000B352 4E75                       		rts	
0000B352 4E75                       		rts	
0000B354                            		include	"_incObj\22 Buzz Bomber.asm"
0000B354                            ; ===========================================================================
0000B354                            ; ---------------------------------------------------------------------------
0000B354                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B354                            ; ---------------------------------------------------------------------------
0000B354                            
0000B354                            BuzzBomber:
0000B354 7000                       		moveq	#0,d0
0000B356 1028 0024                  		move.b	obRoutine(a0),d0
0000B35A 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B35E 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B362                            ; ===========================================================================
0000B362 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B364 0000                       		dc.w Buzz_Action-Buzz_Index
0000B366 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B368                            
0000B368 =00000032                  buzz_timedelay:	equ $32
0000B368 =00000034                  buzz_buzzstatus:	equ $34
0000B368 =0000003C                  buzz_parent:	equ $3C
0000B368                            ; ===========================================================================
0000B368                            
0000B368                            Buzz_Main:	; Routine 0
0000B368 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B36C 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B374 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B37A 117C 0004 0001             		move.b	#4,obRender(a0)
0000B380 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B386 117C 0008 0020             		move.b	#8,obColType(a0)
0000B38C 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B392                            
0000B392                            Buzz_Action:	; Routine 2
0000B392 7000                       		moveq	#0,d0
0000B394 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B398 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B39C 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B3A0 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B3A6 6100 0000                  		bsr.w	AnimateSprite
0000B3AA 6000 0000                  		bra.w	RememberState
0000B3AE                            ; ===========================================================================
0000B3AE 0000                       @index:		dc.w @move-@index
0000B3B0 0000                       		dc.w @chknearsonic-@index
0000B3B2                            ; ===========================================================================
0000B3B2                            
0000B3B2                            @move:
0000B3B2 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B3B6 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B3B8 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B3BE 6600                       		bne.s	@fire		; if yes, branch
0000B3C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B3C4 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B3CA 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B3D0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B3D6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B3DC 6600                       		bne.s	@noflip		; if not, branch
0000B3DE 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B3E2                            
0000B3E2                            	@noflip:
0000B3E2 4E75                       		rts	
0000B3E4                            ; ===========================================================================
0000B3E4                            
0000B3E4                            	@fire:
0000B3E4 6100 0000                  		bsr.w	FindFreeObj
0000B3E8 6600                       		bne.s	@fail
0000B3EA 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B3EE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B3F4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B3FA 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B400 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B406 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B40C 303C 0018                  		move.w	#$18,d0
0000B410 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B416 6600                       		bne.s	@noflip2	; if not, branch
0000B418 4440                       		neg.w	d0
0000B41A 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B41E                            
0000B41E                            	@noflip2:
0000B41E D169 0008                  		add.w	d0,obX(a1)
0000B422 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B428 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B42E 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B432 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B438 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B43E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B444                            
0000B444                            	@fail:
0000B444 4E75                       		rts	
0000B446                            ; ===========================================================================
0000B446                            
0000B446                            @chknearsonic:
0000B446 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B44A 6B00                       		bmi.s	@chgdirection
0000B44C 6100 0000                  		bsr.w	SpeedToPos
0000B450 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B454 6600                       		bne.s	@keepgoing
0000B456 3038 D008                  		move.w	(v_player+obX).w,d0
0000B45A 9068 0008                  		sub.w	obX(a0),d0
0000B45E 6A00                       		bpl.s	@isleft
0000B460 4440                       		neg.w	d0
0000B462                            
0000B462                            	@isleft:
0000B462 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B466 6400                       		bcc.s	@keepgoing	; if not, branch
0000B468 4A28 0001                  		tst.b	obRender(a0)
0000B46C 6A00                       		bpl.s	@keepgoing
0000B46E 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B474 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B47A 6000                       		bra.s	@stop
0000B47C                            ; ===========================================================================
0000B47C                            
0000B47C                            	@chgdirection:
0000B47C 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B482 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B488 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B48E                            
0000B48E                            	@stop:
0000B48E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B492 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B498 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B49E                            
0000B49E                            @keepgoing:
0000B49E 4E75                       		rts	
0000B4A0                            ; ===========================================================================
0000B4A0                            
0000B4A0                            Buzz_Delete:	; Routine 4
0000B4A0 6100 0000                  		bsr.w	DeleteObject
0000B4A4 4E75                       		rts	
0000B4A4 4E75                       		rts	
0000B4A6                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B4A6                            ; ---------------------------------------------------------------------------
0000B4A6                            ; Object 23 - missile that Buzz	Bomber throws
0000B4A6                            ; ---------------------------------------------------------------------------
0000B4A6                            
0000B4A6                            Missile:
0000B4A6 7000                       		moveq	#0,d0
0000B4A8 1028 0024                  		move.b	obRoutine(a0),d0
0000B4AC 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B4B0 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B4B4                            ; ===========================================================================
0000B4B4 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B4B6 0000                       		dc.w Msl_Animate-Msl_Index
0000B4B8 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B4BA 0000                       		dc.w Msl_Delete-Msl_Index
0000B4BC 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B4BE                            
0000B4BE =0000003C                  msl_parent:	equ $3C
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            Msl_Main:	; Routine 0
0000B4BE 5368 0032                  		subq.w	#1,$32(a0)
0000B4C2 6A00                       		bpl.s	Msl_ChkCancel
0000B4C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B4C8 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B4D0 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B4D6 117C 0004 0001             		move.b	#4,obRender(a0)
0000B4DC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B4E2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B4E8 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B4EE 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B4F2 6700                       		beq.s	Msl_Animate	; if not, branch
0000B4F4                            
0000B4F4 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B4FA 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B500 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B506 6000                       		bra.s	Msl_Animate2
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            Msl_Animate:	; Routine 2
0000B508 6100                       		bsr.s	Msl_ChkCancel
0000B50A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B510 6100 0000                  		bsr.w	AnimateSprite
0000B514 6000 0000                  		bra.w	DisplaySprite
0000B518                            
0000B518                            ; ---------------------------------------------------------------------------
0000B518                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B518                            ; destroyed, and if it has, then cancel	the missile
0000B518                            ; ---------------------------------------------------------------------------
0000B518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B518                            
0000B518                            
0000B518                            Msl_ChkCancel:
0000B518 2268 003C                  		movea.l	msl_parent(a0),a1
0000B51C 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B520 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B522 4E75                       		rts	
0000B524                            ; End of function Msl_ChkCancel
0000B524                            
0000B524                            ; ===========================================================================
0000B524                            
0000B524                            Msl_FromBuzz:	; Routine 4
0000B524 0828 0007 0022             		btst	#7,obStatus(a0)
0000B52A 6600                       		bne.s	@explode
0000B52C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B532 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B538 6100 0000                  		bsr.w	SpeedToPos
0000B53C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B542 6100 0000                  		bsr.w	AnimateSprite
0000B546 6100 0000                  		bsr.w	DisplaySprite
0000B54A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B54E 0640 00E0                  		addi.w	#$E0,d0
0000B552 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B556 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B558 4E75                       		rts	
0000B55A                            ; ===========================================================================
0000B55A                            
0000B55A                            	@explode:
0000B55A 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B55E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B564 6000 F1D8                  		bra.w	MissileDissolve
0000B568                            ; ===========================================================================
0000B568                            
0000B568                            Msl_Delete:	; Routine 6
0000B568 6100 0000                  		bsr.w	DeleteObject
0000B56C 4E75                       		rts	
0000B56E                            ; ===========================================================================
0000B56E                            
0000B56E                            Msl_FromNewt:	; Routine 8
0000B56E 4A28 0001                  		tst.b	obRender(a0)
0000B572 6AF4                       		bpl.s	Msl_Delete
0000B574 6100 0000                  		bsr.w	SpeedToPos
0000B578                            
0000B578                            Msl_Animate2:
0000B578 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B57E 6100 0000                  		bsr.w	AnimateSprite
0000B582 6100 0000                  		bsr.w	DisplaySprite
0000B586 4E75                       		rts	
0000B586 4E75                       		rts	
0000B588                            		include	"_anim\Mozzietron.asm"
0000B588                            ; ---------------------------------------------------------------------------
0000B588                            ; Animation script - Buzz Bomber enemy
0000B588                            ; ---------------------------------------------------------------------------
0000B588 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B58A 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B58C 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B58E 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B592 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B596 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B59E 00                         		even
0000B59E 00                         		even
0000B59E                            		include	"_anim\Buzz Bomber.asm"
0000B59E                            ; ---------------------------------------------------------------------------
0000B59E                            ; Animation script - Buzz Bomber enemy
0000B59E                            ; ---------------------------------------------------------------------------
0000B59E 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B5A0 0000                       		dc.w @fly2-Ani_Buzz
0000B5A2 0000                       		dc.w @fires-Ani_Buzz
0000B5A4 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B5A8 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B5AC 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B5B0                            		even
0000B5B0                            		even
0000B5B0                            		include	"_anim\Buzz Bomber Missile.asm"
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            ; Animation script - missile that Buzz Bomber throws
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B5B2 0000                       		dc.w @missile-Ani_Missile
0000B5B4 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B5B8 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B5BC                            		even
0000B5BC                            		even
0000B5BC                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B5BC                            ; --------------------------------------------------------------------------------
0000B5BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B5BC                            ; --------------------------------------------------------------------------------
0000B5BC                            
0000B5BC                            SME_qvHIs:	
0000B5BC 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B5C0 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B5C4 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B5C8 02                         SME_qvHIs_C:	dc.b 2	
0000B5C9 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B5CE ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B5D3 01                         SME_qvHIs_17:	dc.b 1	
0000B5D4 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B5D9 02                         SME_qvHIs_1D:	dc.b 2	
0000B5DA E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B5DF F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B5E4 03                         SME_qvHIs_28:	dc.b 3	
0000B5E5 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B5EA E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B5EF FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B5F4 04                         SME_qvHIs_38:	dc.b 4	
0000B5F5 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B5FA F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5FF F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B604 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B609 04                         SME_qvHIs_4D:	dc.b 4	
0000B60A E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B60F F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B614 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B619 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B61E                            		even
0000B61E                            		even
0000B61E                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B61E                            ; --------------------------------------------------------------------------------
0000B61E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B61E                            ; --------------------------------------------------------------------------------
0000B61E                            
0000B61E                            SME_yccqJ:	
0000B61E 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B622 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B626 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B62A 06                         SME_yccqJ_C:	dc.b 6	
0000B62B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B630 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B635 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B63A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B63F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B644 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B649 06                         SME_yccqJ_2B:	dc.b 6	
0000B64A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B64F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B654 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B659 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B65E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B663 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B668 06                         SME_yccqJ_4A:	dc.b 6	
0000B669 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B66E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B673 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B678 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B67D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B682 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B687 06                         SME_yccqJ_69:	dc.b 6	
0000B688 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B68D F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B692 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B697 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B69C F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B6A1 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B6A6 07                         SME_yccqJ_88:	dc.b 7	
0000B6A7 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6AC 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6B1 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6B6 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B6BB 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B6C0 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B6C5 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B6CA 04                         SME_yccqJ_AC:	dc.b 4	
0000B6CB F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6D0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6D5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6DA 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B6E0 00                         		even
0000B6E0 00                         		even
0000B6E0                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            ; Sprite mappings - missile that Buzz Bomber throws
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            Map_Missile_internal:
0000B6E0 0000                       		dc.w @Flare1-Map_Missile_internal
0000B6E2 0000                       		dc.w @Flare2-Map_Missile_internal
0000B6E4 0000                       		dc.w @Ball1-Map_Missile_internal
0000B6E6 0000                       		dc.w @Ball2-Map_Missile_internal
0000B6E8 01                         @Flare1:	dc.b 1
0000B6E9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B6EE 01                         @Flare2:	dc.b 1
0000B6EF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B6F4 01                         @Ball1:		dc.b 1
0000B6F5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B6FA 01                         @Ball2:		dc.b 1
0000B6FB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B700                            		even
0000B700                            		even
0000B700                            
0000B700                            		include	"_incObj\25 & 37 Rings.asm"
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            ; Object 25 - rings
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            
0000B700                            Rings:
0000B700 7000                       		moveq	#0,d0
0000B702 1028 0024                  		move.b	obRoutine(a0),d0
0000B706 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B70A 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B70E                            ; ===========================================================================
0000B70E                            Ring_Index:
0000B70E 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B710 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B712 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B714 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B716 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B718 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B71A 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B71C 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B71E 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B720                            
0000B720 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B720 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B720 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B720 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B720 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B720 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B720 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B720 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B720 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B720                            ; ---------------------------------------------------------------------------
0000B720                            ; Distances between rings (format: horizontal, vertical)
0000B720                            ; ---------------------------------------------------------------------------
0000B720 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B722 1800                       		dc.b $18, 0		; horizontal normal
0000B724 2000                       		dc.b $20, 0		; horizontal wide
0000B726 0010                       		dc.b 0,	$10		; vertical tight
0000B728 0018                       		dc.b 0,	$18		; vertical normal
0000B72A 0020                       		dc.b 0,	$20		; vertical wide
0000B72C 1010                       		dc.b $10, $10		; diagonal
0000B72E 1818                       		dc.b $18, $18
0000B730 2020                       		dc.b $20, $20
0000B732 F010                       		dc.b $F0, $10
0000B734 E818                       		dc.b $E8, $18
0000B736 E020                       		dc.b $E0, $20
0000B738 1008                       		dc.b $10, 8
0000B73A 1810                       		dc.b $18, $10
0000B73C F008                       		dc.b $F0, 8
0000B73E E810                       		dc.b $E8, $10
0000B740                            ; ===========================================================================
0000B740                            
0000B740                            Ring_Main:	; Routine 0
0000B740 45F8 FC00                  		lea	(v_objstate).w,a2
0000B744 7000                       		moveq	#0,d0
0000B746 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B74A 45F2 0002                  		lea	2(a2,d0.w),a2
0000B74E 1812                       		move.b	(a2),d4
0000B750 1228 0028                  		move.b	obSubtype(a0),d1
0000B754 1001                       		move.b	d1,d0
0000B756 0241 0007                  		andi.w	#7,d1
0000B75A 0C41 0007                  		cmpi.w	#7,d1
0000B75E 6600                       		bne.s	loc_9B80
0000B760 7206                       		moveq	#6,d1
0000B762                            
0000B762                            	loc_9B80:
0000B762 4841                       		swap	d1
0000B764 323C 0000                  		move.w	#0,d1
0000B768 E808                       		lsr.b	#4,d0
0000B76A D040                       		add.w	d0,d0
0000B76C 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B770 4885                       		ext.w	d5
0000B772 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B776 4886                       		ext.w	d6
0000B778 2248                       		movea.l	a0,a1
0000B77A 3428 0008                  		move.w	obX(a0),d2
0000B77E 3628 000C                  		move.w	obY(a0),d3
0000B782 E20C                       		lsr.b	#1,d4
0000B784 6500                       		bcs.s	loc_9C02
0000B786 0892 0007                  		bclr	#7,(a2)
0000B78A 6000                       		bra.s	loc_9BBA
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            Ring_MakeRings:
0000B78C 4841                       		swap	d1
0000B78E E20C                       		lsr.b	#1,d4
0000B790 6500                       		bcs.s	loc_9C02
0000B792 0892 0007                  		bclr	#7,(a2)
0000B796 6100 0000                  		bsr.w	FindFreeObj
0000B79A 6600                       		bne.s	loc_9C0E
0000B79C                            
0000B79C                            loc_9BBA:
0000B79C 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B7A0 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B7A4 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B7A8 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B7AE 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B7B2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B7BA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B7C0 137C 0004 0001             		move.b	#4,obRender(a1)
0000B7C6 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B7CC 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B7D2 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B7D8 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B7DE 1341 0034                  		move.b	d1,$34(a1)
0000B7E2                            
0000B7E2                            loc_9C02:
0000B7E2 5241                       		addq.w	#1,d1
0000B7E4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B7E6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B7E8 4841                       		swap	d1
0000B7EA 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B7EE                            
0000B7EE                            loc_9C0E:
0000B7EE 0812 0000                  		btst	#0,(a2)
0000B7F2 6600 0000                  		bne.w	DeleteObject
0000B7F6                            
0000B7F6                            Ring_Animate:	; Routine 2
0000B7F6 4A38 F5C9                  		tst.b	(v_gshield).w
0000B7FA 6700                       		beq.s	@skip
0000B7FC 4A28 0001                  		tst.b	obRender(a0)
0000B800 6A00                       		bpl.s	@skip
0000B802                            		
0000B802 43F8 D000                  		lea (v_player).w,a1
0000B806                            		
0000B806 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B80A 9068 0008                  		sub.w	obX(a0),d0
0000B80E 6A00                       		bpl.s	@a1
0000B810 4440                       		neg.w	d0
0000B812                            		
0000B812                            	@a1:
0000B812 0C40 0040                  		cmpi.w	#$40,d0
0000B816 6200                       		bhi.s	@skip
0000B818                            		
0000B818 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B81C 9068 000C                  		sub.w	obY(a0),d0
0000B820 6A00                       		bpl.s	@a2
0000B822 4440                       		neg.w	d0
0000B824                            		
0000B824                            	@a2:
0000B824 0C40 0040                  		cmpi.w	#$40,d0
0000B828 6200                       		bhi.s	@skip
0000B82A                            		
0000B82A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B830 45F8 FC00                  		lea	(v_objstate).w,a2
0000B834 7000                       		moveq	#0,d0
0000B836 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B83A 1228 0034                  		move.b	$34(a0),d1
0000B83E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B842                            		
0000B842                            	@skip:
0000B842 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B848 6100 0000                  		bsr.w	DisplaySprite
0000B868 4E75                       		rts	
0000B86A                            ; ===========================================================================
0000B86A                            
0000B86A                            Ring_Collect:	; Routine 4
0000B86A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B86E 117C 0000 0020             		move.b	#0,obColType(a0)
0000B874 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B87A 6100 0000                  		bsr.w	CollectRing
0000B87E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B882 7000                       		moveq	#0,d0
0000B884 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B888 1228 0034                  		move.b	$34(a0),d1
0000B88C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B890                            
0000B890                            Ring_Sparkle:	; Routine 6
0000B890 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B896 6100 0000                  		bsr.w	AnimateSprite
0000B89A 6000 0000                  		bra.w	DisplaySprite
0000B89E                            ; ===========================================================================
0000B89E                            
0000B89E                            Ring_Delete:	; Routine 8
0000B89E 6000 0000                  		bra.w	DeleteObject
0000B8A2                            
0000B8A2                            Ring_Attract:	; Routine $A
0000B8A2 4A38 F5C9                  		tst.b	(v_gshield).w
0000B8A6 6600                       		bne.s	@skip
0000B8A8 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B8AC 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B8B2 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B8B8 6000                       		bra.s	@display
0000B8BA                            		
0000B8BA                            	@skip:
0000B8BA 323C 0030                  		move.w	#$30,d1	; horizontal
0000B8BE 3038 D008                  		move.w	(v_player+obX).w,d0
0000B8C2 B068 0008                  		cmp.w	obX(a0),d0
0000B8C6 6400                       		bcc.s	@a1
0000B8C8 4441                       		neg.w	d1
0000B8CA 4A68 0010                  		tst.w	obVelX(a0)
0000B8CE 6B00                       		bmi.s	@a2
0000B8D0 D241                       		add.w	d1,d1
0000B8D2 D241                       		add.w	d1,d1
0000B8D4 6000                       		bra.s	@a2
0000B8D6                            
0000B8D6                            	@a1:
0000B8D6 4A68 0010                  		tst.w	obVelX(a0)
0000B8DA 6A00                       		bpl.s	@a2
0000B8DC D241                       		add.w	d1,d1
0000B8DE D241                       		add.w	d1,d1
0000B8E0                            
0000B8E0                            	@a2:
0000B8E0 D368 0010                  		add.w	d1,obVelX(a0)
0000B8E4 323C 0030                  		move.w	#$30,d1	; vertical
0000B8E8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B8EC B068 000C                  		cmp.w	obY(a0),d0
0000B8F0 6400                       		bcc.s	@a3
0000B8F2 4441                       		neg.w	d1
0000B8F4 4A68 0012                  		tst.w	obVelY(a0)
0000B8F8 6B00                       		bmi.s	@a4
0000B8FA D241                       		add.w	d1,d1
0000B8FC D241                       		add.w	d1,d1
0000B8FE 6000                       		bra.s	@a4
0000B900                            
0000B900                            	@a3:
0000B900 4A68 0012                  		tst.w	obVelY(a0)
0000B904 6A00                       		bpl.s	@a4
0000B906 D241                       		add.w	d1,d1
0000B908 D241                       		add.w	d1,d1
0000B90A                            
0000B90A                            	@a4:
0000B90A D368 0012                  		add.w	d1,obVelY(a0)
0000B90E 6100 0000                  		bsr.w	SpeedToPos
0000B912                            		
0000B912                            	@display:
0000B912 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B918 6000 0000                  		bra.w	DisplaySprite
0000B91C                            
0000B91C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B91C                            
0000B91C                            
0000B91C                            CollectRing:
0000B91C 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B920 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B926 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B92A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B930 6500                       		bcs.s	@playsnd	; if yes, branch
0000B932 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B938 6700                       		beq.s	@got100
0000B93A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B940 6500                       		bcs.s	@playsnd	; if yes, branch
0000B942 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B948 6600                       		bne.s	@playsnd
0000B94A                            
0000B94A                            	@got100:
0000B94A 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B94E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B952 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B956                            		
0000B956                            
0000B956                            	@playsnd:
0000B956 4EF9 0000 0FCC             		jmp	(PlaySound_Special).l
0000B95C                            ; End of function CollectRing
0000B95C                            
0000B95C                            ; ===========================================================================
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            
0000B95C                            RingLoss:
0000B95C 7000                       		moveq	#0,d0
0000B95E 1028 0024                  		move.b	obRoutine(a0),d0
0000B962 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B966 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B96A                            ; ===========================================================================
0000B96A 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B96C 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B96E 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B970 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B972 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B974                            ; ===========================================================================
0000B974                            
0000B974                            RLoss_Count:	; Routine 0
0000B974 2248                       		movea.l	a0,a1
0000B976 7A00                       		moveq	#0,d5
0000B978 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B97C 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B982 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B984 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B988 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B98E 6700                               beq.s   @cont                       ; if not, branch
0000B990 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B996 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B998                            @cont:
0000B998 BA40                               cmp.w   d0,d5
0000B99A 6500                               bcs.s   @belowmax
0000B99C 3A00                               move.w  d0,d5
0000B99E                            
0000B99E                            @belowmax:
0000B99E 5345                               subq.w  #1,d5
0000B9A0 383C 0288                          move.w  #$288,d4
0000B9A4 6000                       		bra.s	@makerings
0000B9A6                            ; ===========================================================================
0000B9A6                            
0000B9A6                            	@loop:
0000B9A6 6100 0000                  		bsr.w	FindFreeObj
0000B9AA 6600 0000                  		bne.w	@resetcounter
0000B9AE                            
0000B9AE                            @makerings:
0000B9AE 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B9B2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9B6 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B9BC 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B9C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B9C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B9CE 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9D6 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9DC 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9E2 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9E8 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9EE 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B9F2 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B9F4 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B9F8 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B9FC 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B9FE E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BA00 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BA02                            @skiphalvingvel:
0000BA02 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BA06 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BA0A 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BA0E                            
0000BA0E                            @resetcounter:
0000BA0E 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BA14 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BA1A 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BA20 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BA22 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BA26 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BA34                            
0000BA34                            RLoss_Bounce:	; Routine 2
0000BA34 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BA3A 6100 0000                  		bsr.w	SpeedToPos
0000BA3E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BA44 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA48 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BA4A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA4E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BA52 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BA54 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BA5A                            	@skipbounceslow:
0000BA5A 6B00                       		bmi.s	@chkdel
0000BA5C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BA60 D007                       		add.b	d7,d0
0000BA62 0200 0003                  		andi.b	#3,d0
0000BA66 6600                       		bne.s	@chkdel
0000BA68 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BA6E 4A41                       		tst.w	d1
0000BA70 6A00                       		bpl.s	@chkdel
0000BA72 D368 000C                  		add.w	d1,obY(a0)
0000BA76 3028 0012                  		move.w	obVelY(a0),d0
0000BA7A E440                       		asr.w	#2,d0
0000BA7C 9168 0012                  		sub.w	d0,obVelY(a0)
0000BA80 4468 0012                  		neg.w	obVelY(a0)
0000BA84                            
0000BA84                            	@chkdel:
0000BA84 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BA88 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BA8C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BA90 0640 00E0                  		addi.w	#$E0,d0
0000BA94 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BA98 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BA9C 4A38 F5C9                  		tst.b	(v_gshield).w
0000BAA0 6700                       		beq.s	@skip
0000BAA2 4A28 0001                  		tst.b	obRender(a0)
0000BAA6 6A00                       		bpl.s	@skip
0000BAA8                            		
0000BAA8 43F8 D000                  		lea (v_player).w,a1
0000BAAC                            		
0000BAAC 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BAB0 9068 0008                  		sub.w	obX(a0),d0
0000BAB4 6A00                       		bpl.s	@a1
0000BAB6 4440                       		neg.w	d0
0000BAB8                            		
0000BAB8                            	@a1:
0000BAB8 0C40 00A0                  		cmpi.w	#$A0,d0
0000BABC 6200                       		bhi.s	@skip
0000BABE                            		
0000BABE 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BAC2 9068 000C                  		sub.w	obY(a0),d0
0000BAC6 6A00                       		bpl.s	@a2
0000BAC8 4440                       		neg.w	d0
0000BACA                            		
0000BACA                            	@a2:
0000BACA 0C40 00A0                  		cmpi.w	#$A0,d0
0000BACE 6200                       		bhi.s	@skip
0000BAD0                            		
0000BAD0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BAD6 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BADA                            		
0000BADA                            	@skip:		
0000BADA 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BADE D2FC 0080                          adda.w  #$80,a1
0000BAE2 0C51 007E                          cmpi.w  #$7E,(a1)
0000BAE6 6400                               bcc.s   @cont
0000BAE8 5451                               addq.w  #2,(a1)
0000BAEA D2D1                               adda.w  (a1),a1
0000BAEC 3288                               move.w  a0,(a1)
0000BAEE                            		
0000BAEE                            	@cont:
0000BAEE 4E75                               rts		
0000BAF0                            ; ===========================================================================
0000BAF0                            
0000BAF0                            RLoss_Collect:	; Routine 4
0000BAF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BAF4 117C 0000 0020             		move.b	#0,obColType(a0)
0000BAFA 6100 FE20                  		bsr.w	CollectRing
0000BAFE                            
0000BAFE                            RLoss_Sparkle:	; Routine 6
0000BAFE 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB04 6100 0000                  		bsr.w	AnimateSprite
0000BB08 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BB0C 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB10 6400                               bcc.s   @cont
0000BB12 5451                               addq.w  #2,(a1)
0000BB14 D2D1                               adda.w  (a1),a1
0000BB16 3288                               move.w  a0,(a1)
0000BB18                            			
0000BB18                            	@cont:
0000BB18 4E75                               rts
0000BB1A                            ; ===========================================================================
0000BB1A                            
0000BB1A                            RLoss_Delete:	; Routine 8
0000BB1A 6000 0000                  		bra.w	DeleteObject
0000BB1E                            
0000BB1E                            ; ----------------------------------------------------------------------------------------------
0000BB1E                            ; Ring Spawn Array 
0000BB1E                            ; ----------------------------------------------------------------------------------------------
0000BB1E                            
0000BB1E FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BB2E FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BB3E FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BB4E FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BB5E FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BB6E FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BB7E FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BB8E FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BB9E                                            even
0000BB9E                            ; ===========================================================================
0000BB9E                            ; -------------------------------------------------------------------------------------
0000BB9E                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BB9E                            ; -------------------------------------------------------------------------------------
0000BB9E                            
0000BB9E                            SpillRingData_Water:
0000BB9E FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BBAE FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BBBE FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BBCE FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BBDE FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BBEE FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BBFE FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BC0E FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BC1E                                            even
0000BC1E                            ; ===========================================================================				
0000BC1E                            ; ===========================================================================				
0000BC1E                            		include	"_incObj\4B Giant Ring.asm"
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            ; Object 4B - giant ring for entry to special stage
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            
0000BC1E                            GiantRing:
0000BC1E 7000                       		moveq	#0,d0
0000BC20 1028 0024                  		move.b	obRoutine(a0),d0
0000BC24 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BC28 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BC2C                            ; ===========================================================================
0000BC2C 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BC2E 0000                       		dc.w GRing_Animate-GRing_Index
0000BC30 0000                       		dc.w GRing_Collect-GRing_Index
0000BC32 0000                       		dc.w GRing_Delete-GRing_Index
0000BC34                            ; ===========================================================================
0000BC34                            
0000BC34                            GRing_Main:    ; Routine 0
0000BC34 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BC3C 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BC42 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BC48 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BC4E 4A28 0001                  		tst.b	obRender(a0)
0000BC52 6A00                       		bpl.s	GRing_Animate
0000BC54 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BC5A 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BC5E 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BC64 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BC66                            
0000BC66 4E75                       		rts    
0000BC68                            ; ===========================================================================
0000BC68                            
0000BC68                            GRing_Okay:
0000BC68 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC6C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BC72 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BC78 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BC7E                            
0000BC7E                            GRing_Animate:	; Routine 2
0000BC7E 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BCA2 6000 0000                  		bra.w	DisplaySprite
0000BCA6                            ; ===========================================================================
0000BCA6                            
0000BCA6                            GRing_Collect:	; Routine 4
0000BCA6 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BCAA 117C 0000 0020             		move.b	#0,obColType(a0)
0000BCB0 6100 0000                  		bsr.w	FindFreeObj
0000BCB4 6600 0000                  		bne.w	GRing_PlaySnd
0000BCB8 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BCBC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BCC2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BCC8 2348 003C                  		move.l	a0,$3C(a1)
0000BCCC 3038 D008                  		move.w	(v_player+obX).w,d0
0000BCD0 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BCD4 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BCD6 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BCDC 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BCE2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BCE8                            		
0000BCE8                            GRing_PlaySnd:
0000BCF2 608A                       		bra.s	GRing_Animate
0000BCF4                            ; ===========================================================================
0000BCF4                            
0000BCF4                            GRing_Delete:	; Routine 6
0000BCF4 6000 0000                  		bra.w	DeleteObject
0000BCF4 6000 0000                  		bra.w	DeleteObject
0000BCF8                            		include	"_incObj\7C Ring Flash.asm"
0000BCF8                            ; ---------------------------------------------------------------------------
0000BCF8                            ; Object 7C - flash effect when	you collect the	giant ring
0000BCF8                            ; ---------------------------------------------------------------------------
0000BCF8                            
0000BCF8                            RingFlash:
0000BCF8 7000                       		moveq	#0,d0
0000BCFA 1028 0024                  		move.b	obRoutine(a0),d0
0000BCFE 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BD02 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BD06                            ; ===========================================================================
0000BD06 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BD08 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BD0A 0000                       		dc.w Flash_Delete-Flash_Index
0000BD0C                            ; ===========================================================================
0000BD0C                            
0000BD0C                            Flash_Main:	; Routine 0
0000BD0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD10 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BD18 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BD1E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BD24 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BD2A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BD30 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BD36                            
0000BD36                            Flash_ChkDel:	; Routine 2
0000BD36 6100                       		bsr.s	Flash_Collect
0000BD56 6000 0000                  		bra.w	DisplaySprite
0000BD5A                            
0000BD5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD5A                            
0000BD5A                            
0000BD5A                            Flash_Collect:
0000BD5A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BD5E 6A00                       		bpl.s	locret_9F76
0000BD60 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BD66 5228 001A                  		addq.b	#1,obFrame(a0)
0000BD6A 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BD70 6400                       		bcc.s	Flash_End	; if yes, branch
0000BD72 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BD78 6600                       		bne.s	locret_9F76	; if not, branch
0000BD7A 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BD7E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BD84 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BD8A 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BD90 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BD94 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BD98                            
0000BD98                            locret_9F76:
0000BD98 4E75                       		rts	
0000BD9A                            ; ===========================================================================
0000BD9A                            
0000BD9A                            Flash_End:
0000BD9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD9E 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BDA4 588F                       		addq.l	#4,sp
0000BDA6 4E75                       		rts	
0000BDA8                            ; End of function Flash_Collect
0000BDA8                            
0000BDA8                            ; ===========================================================================
0000BDA8                            
0000BDA8                            Flash_Delete:	; Routine 4
0000BDA8 6000 0000                  		bra.w	DeleteObject
0000BDA8 6000 0000                  		bra.w	DeleteObject
0000BDAC                            
0000BDAC                            		include	"_anim\Rings.asm"
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            ; Animation script - ring
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BDAE 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BDB4                            		even
0000BDB4                            		even
0000BDB4                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BDB4                            ; --------------------------------------------------------------------------------
0000BDB4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BDB4                            ; --------------------------------------------------------------------------------
0000BDB4                            
0000BDB4                            SME_aSMQh:	
0000BDB4 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BDB8 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BDBC 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BDC0 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BDC4 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BDC8 01                         SME_aSMQh_14:	dc.b 1	
0000BDC9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BDCE 01                         SME_aSMQh_1A:	dc.b 1	
0000BDCF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BDD4 01                         SME_aSMQh_20:	dc.b 1	
0000BDD5 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BDDA 01                         SME_aSMQh_26:	dc.b 1	
0000BDDB F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BDE0 01                         SME_aSMQh_2C:	dc.b 1	
0000BDE1 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BDE6 01                         SME_aSMQh_32:	dc.b 1	
0000BDE7 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BDEC 01                         SME_aSMQh_38:	dc.b 1	
0000BDED F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BDF2 01                         SME_aSMQh_3E:	dc.b 1	
0000BDF3 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BDF8 01                         SME_aSMQh_44:	dc.b 1	
0000BDF9 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BDFE 01                         SME_aSMQh_4A:	dc.b 1	
0000BDFF F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BE04                            		even
0000BE04                            		even
0000BE04                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BE04                            ; ---------------------------------------------------------------------------
0000BE04                            ; Sprite mappings - giant ring
0000BE04                            ; ---------------------------------------------------------------------------
0000BE04                            Map_GRing_internal:
0000BE04 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BE06 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BE08 0000                       		dc.w byte_A036-Map_GRing_internal
0000BE0A 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BE0C 0A                         byte_9FDA:	dc.b $A
0000BE0D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BE12 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BE17 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BE1C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BE21 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BE26 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BE2B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BE30 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BE35 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BE3A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BE3F 08                         byte_A00D:	dc.b 8
0000BE40 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BE45 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BE4A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BE4F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BE54 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BE59 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BE5E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BE63 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BE68 04                         byte_A036:	dc.b 4
0000BE69 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BE6E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BE73 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BE78 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BE7D 08                         byte_A04B:	dc.b 8
0000BE7E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BE83 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BE88 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BE8D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BE92 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BE97 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BE9C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BEA1 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BEA6                            		even
0000BEA6                            		even
0000BEA6                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BEA6                            ; ---------------------------------------------------------------------------
0000BEA6                            ; Sprite mappings - flash effect when you collect the giant ring
0000BEA6                            ; ---------------------------------------------------------------------------
0000BEA6                            Map_Flash_internal:
0000BEA6 0000                       		dc.w byte_A084-Map_Flash_internal
0000BEA8 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BEAA 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BEAC 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BEAE 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BEB0 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BEB2 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BEB4 0000                       		dc.w byte_A103-Map_Flash_internal
0000BEB6 02                         byte_A084:	dc.b 2
0000BEB7 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BEBC 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BEC1 04                         byte_A08F:	dc.b 4
0000BEC2 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BEC7 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BECC 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BED1 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BED6 04                         byte_A0A4:	dc.b 4
0000BED7 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BEDC E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BEE1 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BEE6 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BEEB 04                         byte_A0B9:	dc.b 4
0000BEEC E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BEF1 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BEF6 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BEFB 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BF00 04                         byte_A0CE:	dc.b 4
0000BF01 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BF06 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BF0B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BF10 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BF15 04                         byte_A0E3:	dc.b 4
0000BF16 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BF1B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BF20 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BF25 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BF2A 02                         byte_A0F8:	dc.b 2
0000BF2B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BF30 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BF35 04                         byte_A103:	dc.b 4
0000BF36 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BF3B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BF40 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BF45 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BF4A                            		even
0000BF4A                            		even
0000BF4A                            		include	"_incObj\26 Monitor.asm"
0000BF4A                            ; ---------------------------------------------------------------------------
0000BF4A                            ; Object 26 - monitors
0000BF4A                            ; ---------------------------------------------------------------------------
0000BF4A                            
0000BF4A                            Monitor:
0000BF4A 7000                       		moveq	#0,d0
0000BF4C 1028 0024                  		move.b	obRoutine(a0),d0
0000BF50 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BF54 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BF58                            ; ===========================================================================
0000BF58 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BF5A 0000                       		dc.w Mon_Solid-Mon_Index
0000BF5C 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BF5E 0000                       		dc.w Mon_Animate-Mon_Index
0000BF60 0000                       		dc.w Mon_Display-Mon_Index
0000BF62                            ; ===========================================================================
0000BF62                            
0000BF62                            Mon_Main:	; Routine 0
0000BF62 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF66 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BF6C 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BF72 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BF7A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF80 117C 0004 0001             		move.b	#4,obRender(a0)
0000BF86 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BF8C 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BF92 45F8 FC00                  		lea	(v_objstate).w,a2
0000BF96 7000                       		moveq	#0,d0
0000BF98 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BF9C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BFA2 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BFA8 6700                       		beq.s	@notbroken	; if not, branch
0000BFAA 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BFB0 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BFB6 4E75                       		rts	
0000BFB8                            ; ===========================================================================
0000BFB8                            
0000BFB8                            	@notbroken:
0000BFB8 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BFBE 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BFC4                            
0000BFC4                            Mon_Solid:	; Routine 2
0000BFC4 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BFC8 6700                       		beq.s	@normal		; if not, branch
0000BFCA 5500                       		subq.b	#2,d0
0000BFCC 6600                       		bne.s	@fall
0000BFCE                            
0000BFCE                            		; 2nd Routine 2
0000BFCE 7200                       		moveq	#0,d1
0000BFD0 1228 0014                  		move.b	obActWid(a0),d1
0000BFD4 0641 000B                  		addi.w	#$B,d1
0000BFD8 6100 CFEC                  		bsr.w	ExitPlatform
0000BFDC 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BFE2 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BFE6 4228 0025                  		clr.b	ob2ndRout(a0)
0000BFEA 6000 0000                  		bra.w	Mon_Animate
0000BFEE                            ; ===========================================================================
0000BFEE                            
0000BFEE                            	@ontop:
0000BFEE 363C 0010                  		move.w	#$10,d3
0000BFF2 3428 0008                  		move.w	obX(a0),d2
0000BFF6 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000BFFA 6000 0000                  		bra.w	Mon_Animate
0000BFFE                            ; ===========================================================================
0000BFFE                            
0000BFFE                            @fall:		; 2nd Routine 4
0000BFFE 6100 0000                  		bsr.w	ObjectFall
0000C002 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C008 4A41                       		tst.w	d1
0000C00A 6A00 0000                  		bpl.w	Mon_Animate
0000C00E D368 000C                  		add.w	d1,obY(a0)
0000C012 4268 0012                  		clr.w	obVelY(a0)
0000C016 4228 0025                  		clr.b	ob2ndRout(a0)
0000C01A 6000 0000                  		bra.w	Mon_Animate
0000C01E                            ; ===========================================================================
0000C01E                            
0000C01E                            @normal:	; 2nd Routine 0
0000C01E 323C 001A                  		move.w	#$1A,d1
0000C022 343C 000F                  		move.w	#$F,d2
0000C026 6100 0000                  		bsr.w	Mon_SolidSides
0000C02A 6700 0000                  		beq.w	loc_A25C
0000C02E 4A69 0012                  		tst.w	obVelY(a1)
0000C032 6B00                       		bmi.s	loc_A20A
0000C034 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C03A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C03C 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C042 6700                       		beq.s	loc_A25C	; if yes, branch
0000C044 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C04A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C04C                            
0000C04C                            loc_A20A:
0000C04C 4A41                       		tst.w	d1
0000C04E 6A00                       		bpl.s	loc_A220
0000C050 9769 000C                  		sub.w	d3,obY(a1)
0000C054 6100 CE5E                  		bsr.w	loc_74AE
0000C058 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C05E 6000 0000                  		bra.w	Mon_Animate
0000C062                            ; ===========================================================================
0000C062                            
0000C062                            loc_A220:
0000C062 4A40                       		tst.w	d0
0000C064 6700 0000                  		beq.w	loc_A246
0000C068 6B00                       		bmi.s	loc_A230
0000C06A 4A69 0010                  		tst.w	obVelX(a1)
0000C06E 6B00                       		bmi.s	loc_A246
0000C070 6000                       		bra.s	loc_A236
0000C072                            ; ===========================================================================
0000C072                            
0000C072                            loc_A230:
0000C072 4A69 0010                  		tst.w	obVelX(a1)
0000C076 6A00                       		bpl.s	loc_A246
0000C078                            
0000C078                            loc_A236:
0000C078 9169 0008                  		sub.w	d0,obX(a1)
0000C07C 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C082 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C088                            
0000C088                            loc_A246:
0000C088 0829 0001 0022             		btst	#1,obStatus(a1)
0000C08E 6600                       		bne.s	loc_A26A
0000C090 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C096 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C09C 6000                       		bra.s	Mon_Animate
0000C09E                            ; ===========================================================================
0000C09E                            
0000C09E                            loc_A25C:
0000C09E 0828 0005 0022             		btst	#5,obStatus(a0)
0000C0A4 6700                       		beq.s	Mon_Animate
0000C0A6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C0AC 6700                       		beq.s	loc_A26A	; if so, branch
0000C0AE 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C0B4                            
0000C0B4                            loc_A26A:
0000C0B4 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C0BA 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C0C0                            
0000C0C0                            Mon_Animate:	; Routine 6
0000C0C0 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C0C6 6100 0000                  		bsr.w	AnimateSprite
0000C0CA                            
0000C0CA                            Mon_Display:	; Routine 8
0000C0CA 6100 0000                  		bsr.w	DisplaySprite
0000C0EC 4E75                       		rts	
0000C0EE                            ; ===========================================================================
0000C0EE                            
0000C0EE                            Mon_BreakOpen:	; Routine 4
0000C0EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C0F2 117C 0000 0020             		move.b	#0,obColType(a0)
0000C0F8 6100 0000                  		bsr.w	FindFreeObj
0000C0FC 6600                       		bne.s	Mon_Explode
0000C0FE 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C102 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C108 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C10E 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C114                            
0000C114                            Mon_Explode:
0000C114 6100 0000                  		bsr.w	FindFreeObj
0000C118 6600                       		bne.s	@fail
0000C11A 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C11E 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C122 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C128 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C12E                            
0000C12E                            	@fail:
0000C12E 45F8 FC00                  		lea	(v_objstate).w,a2
0000C132 7000                       		moveq	#0,d0
0000C134 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C138 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C13E 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C144 6000 0000                  		bra.w	DisplaySprite
0000C144 6000 0000                  		bra.w	DisplaySprite
0000C148                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            ; Object 2E - contents of monitors
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            
0000C148                            PowerUp:
0000C148 7000                       		moveq	#0,d0
0000C14A 1028 0024                  		move.b	obRoutine(a0),d0
0000C14E 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C152 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C156 6000 0000                  		bra.w	DisplaySprite
0000C15A                            ; ===========================================================================
0000C15A 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C15C 0000                       		dc.w Pow_Move-Pow_Index
0000C15E 0000                       		dc.w Pow_Delete-Pow_Index
0000C160                            ; ===========================================================================
0000C160                            
0000C160                            Pow_Main:	; Routine 0
0000C160 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C164 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C16A 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C170 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C176 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C17C 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C182 7000                       		moveq	#0,d0
0000C184 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C188 5400                       		addq.b	#2,d0
0000C18A 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C18E 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C194 D000                       		add.b	d0,d0
0000C196 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C19A 5249                       		addq.w	#1,a1
0000C19C 2149 0004                  		move.l	a1,obMap(a0)
0000C1A0                            
0000C1A0                            Pow_Move:	; Routine 2
0000C1A0 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C1A4 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C1A8 6100 0000                  		bsr.w	SpeedToPos
0000C1AC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C1B2 4E75                       		rts	
0000C1B4                            ; ===========================================================================
0000C1B4                            
0000C1B4                            Pow_Checks:
0000C1B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C1B8 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C1BE                            
0000C1BE                            Pow_ChkEggman:
0000C1BE 1028 001C                  		move.b	obAnim(a0),d0
0000C1C2 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C1C6 6600                       		bne.s	Pow_ChkSonic
0000C1C8                            		
0000C1C8 4EF9 0000 0000             		jmp	Spik_Hurt
0000C1CE                            		
0000C1CE 4E75                       		rts
0000C1D0                            ; ===========================================================================
0000C1D0                            
0000C1D0                            Pow_ChkSonic:
0000C1D0 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C1D4 6600                       		bne.s	Pow_ChkShoes
0000C1D6                            
0000C1D6                            	ExtraLife:
0000C1D6 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C1DA 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C1E8                            
0000C1E8                            ; ===========================================================================
0000C1E8                            
0000C1E8                            Pow_ChkShoes:
0000C1E8 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C1EC 6600                       		bne.s	Pow_ChkShield
0000C1EE                            
0000C1EE 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C1F4 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C1FA 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C200 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C206 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C20C 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C210 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C212 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C218 6300                       			bls.s	Pow_NoMus
0000C224                            ; ===========================================================================
0000C224                            
0000C224                            Pow_NoMus:
0000C224 4E75                       		rts	
0000C226                            ; ===========================================================================
0000C226                            
0000C226                            Pow_ChkShield:
0000C226 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C22A 6600                       		bne.s	Pow_ChkInvinc
0000C22C                            
0000C22C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C232 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C238 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C23E 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C244 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C254                            ; ===========================================================================
0000C254                            
0000C254                            Pow_ChkInvinc:
0000C254 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C258 6600                       		bne.s	Pow_ChkRings
0000C25A                            
0000C25A 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C260 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C266 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C26C 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C272 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C278 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C27E 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C284 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C28A 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C290 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C296 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C29A 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C29C 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C2A2 6300                       			bls.s	Pow_NoMusic
0000C2AE                            ; ===========================================================================
0000C2AE                            
0000C2AE                            Pow_NoMusic:
0000C2AE 4E75                       		rts	
0000C2B0                            ; ===========================================================================
0000C2B0                            
0000C2B0                            Pow_ChkRings:
0000C2B0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C2B4 6600                       		bne.s	Pow_ChkS
0000C2B6                            
0000C2B6 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C2BC 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C2C2 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C2C8 6500                       		bcs.s	Pow_RingSound
0000C2CA 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C2D0 6700 FF04                  		beq.w	ExtraLife
0000C2D4 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C2DA 6500                       		bcs.s	Pow_RingSound
0000C2DC 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C2E2 6700 FEF2                  		beq.w	ExtraLife
0000C2E6                            
0000C2E6                            	Pow_RingSound:
0000C2F0                            ; ===========================================================================
0000C2F0                            
0000C2F0                            Pow_ChkS:
0000C2F0 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C2F4 6600                       		bne.s	Pow_ChkSRing
0000C2F6                            		
0000C2F6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C2FC 6700                       		beq.s	PowS2	; if yes, branch
0000C2FE 0404 003B                  		subi.b	#$3B,d4
0000C302 7000                       		moveq	#0,d0
0000C304 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C30A 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C310 6000                       		bra.s	PowSPlay
0000C312                            
0000C312                            PowS2:
0000C312 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C318 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C31E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C324 6500                       		bcs.s	PowSPlay
0000C326 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C32C 6700 FEA8                  		beq.w	ExtraLife
0000C330 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C336 6500                       		bcs.s	PowSPlay
0000C338 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C33E 6700 FE96                  		beq.w	ExtraLife	
0000C342                            
0000C342                            PowSPlay:
0000C34C                            
0000C34C                            		
0000C34C                            
0000C34C                            
0000C34C                            Pow_ChkSRing:
0000C34C 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C350 6600                       		bne.s	Pow_ChkRShield
0000C352                            
0000C352                            		
0000C352 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C358 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C35E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C364 6500                       		bcs.s	Pow_ChkSRingSound
0000C366 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C36C 6700 FE68                  		beq.w	ExtraLife
0000C370 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C376 6500                       		bcs.s	Pow_ChkSRingSound
0000C378 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C37E 6700 FE56                  		beq.w	ExtraLife	
0000C382                            
0000C382                            Pow_ChkSRingSound:
0000C38C                            
0000C38C                            
0000C38C                            Pow_ChkRShield:
0000C38C 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C390 6600                       		bne.s	Pow_ChkGShield
0000C392                            
0000C392 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C398 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C39E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3A4 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C3AA 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C3BA                            
0000C3BA                            Pow_ChkGShield:
0000C3BA 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C3BE 6600                       		bne.s	Pow_ChkSpShield
0000C3C0                            
0000C3C0                            
0000C3C0 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C3C6 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C3CC 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3D2 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C3D8 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C3DE                            		
0000C3DE 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C3E4 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C3EA 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C3F0 6500                       		bcs.s	Pow_ChkGSound
0000C3F2 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C3F8 6700 FDDC                  		beq.w	ExtraLife
0000C3FC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C402 6500                       		bcs.s	Pow_ChkGSound
0000C404 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C40A 6700 FDCA                  		beq.w	ExtraLife	
0000C40E                            
0000C40E                            Pow_ChkGSound:		
0000C418                            
0000C418                            Pow_ChkSpShield:
0000C418 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C41C 6600                       		bne.s	Pow_ChkEnd
0000C41E                            
0000C41E 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C424 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C42A 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C430 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C436 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C446 4E71                       		nop
0000C448                            
0000C448                            Pow_ChkEnd:
0000C448 4E75                       		rts
0000C44A                            ; ===========================================================================
0000C44A                            
0000C44A                            Pow_Delete:	; Routine 4
0000C44A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C44E 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C452 4E75                       		rts	
0000C452 4E75                       		rts	
0000C454                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            ; Subroutine to	make the sides of a monitor solid
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            
0000C454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C454                            
0000C454                            
0000C454                            Mon_SolidSides:
0000C454 43F8 D000                  		lea	(v_player).w,a1
0000C458 3029 0008                  		move.w	obX(a1),d0
0000C45C 9068 0008                  		sub.w	obX(a0),d0
0000C460 D041                       		add.w	d1,d0
0000C462 6B00                       		bmi.s	loc_A4E6
0000C464 3601                       		move.w	d1,d3
0000C466 D643                       		add.w	d3,d3
0000C468 B043                       		cmp.w	d3,d0
0000C46A 6200                       		bhi.s	loc_A4E6
0000C46C 1629 0016                  		move.b	obHeight(a1),d3
0000C470 4883                       		ext.w	d3
0000C472 D443                       		add.w	d3,d2
0000C474 3629 000C                  		move.w	obY(a1),d3
0000C478 9668 000C                  		sub.w	obY(a0),d3
0000C47C D642                       		add.w	d2,d3
0000C47E 6B00                       		bmi.s	loc_A4E6
0000C480 D442                       		add.w	d2,d2
0000C482 B642                       		cmp.w	d2,d3
0000C484 6400                       		bcc.s	loc_A4E6
0000C486 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C48A 6B00                       		bmi.s	loc_A4E6
0000C48C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C492 6400                       		bcc.s	loc_A4E6
0000C494 4A78 FE08                  		tst.w	(v_debuguse).w
0000C498 6600                       		bne.s	loc_A4E6
0000C49A B240                       		cmp.w	d0,d1
0000C49C 6400                       		bcc.s	loc_A4DC
0000C49E D241                       		add.w	d1,d1
0000C4A0 9041                       		sub.w	d1,d0
0000C4A2                            
0000C4A2                            loc_A4DC:
0000C4A2 0C43 0010                  		cmpi.w	#$10,d3
0000C4A6 6500                       		bcs.s	loc_A4EA
0000C4A8                            
0000C4A8                            loc_A4E2:
0000C4A8 7201                       		moveq	#1,d1
0000C4AA 4E75                       		rts	
0000C4AC                            ; ===========================================================================
0000C4AC                            
0000C4AC                            loc_A4E6:
0000C4AC 7200                       		moveq	#0,d1
0000C4AE 4E75                       		rts	
0000C4B0                            ; ===========================================================================
0000C4B0                            
0000C4B0                            loc_A4EA:
0000C4B0 7200                       		moveq	#0,d1
0000C4B2 1228 0014                  		move.b	obActWid(a0),d1
0000C4B6 5841                       		addq.w	#4,d1
0000C4B8 3401                       		move.w	d1,d2
0000C4BA D442                       		add.w	d2,d2
0000C4BC D269 0008                  		add.w	obX(a1),d1
0000C4C0 9268 0008                  		sub.w	obX(a0),d1
0000C4C4 6BE2                       		bmi.s	loc_A4E2
0000C4C6 B242                       		cmp.w	d2,d1
0000C4C8 64DE                       		bcc.s	loc_A4E2
0000C4CA 72FF                       		moveq	#-1,d1
0000C4CC 4E75                       		rts	
0000C4CE                            ; End of function Obj26_SolidSides
0000C4CE                            ; End of function Obj26_SolidSides
0000C4CE                            		include	"_anim\Monitor.asm"
0000C4CE                            ; ---------------------------------------------------------------------------
0000C4CE                            ; Animation script - monitors
0000C4CE                            ; ---------------------------------------------------------------------------
0000C4CE 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C4D4 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C4DA 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C4E0 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C4E6 0000                       		dc.w @spshield-Ani_Monitor
0000C4E8                            		
0000C4E8 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C4EE 00                         		even
0000C4EE 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C4FA 00                         		even
0000C4FA 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C506 00                         		even
0000C506 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C512 00                         		even
0000C512 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C51E 00                         		even
0000C51E 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C52A 00                         		even
0000C52A 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C536 00                         		even
0000C536 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C542 00                         		even
0000C542 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C54E 00                         		even
0000C54E 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C556 00                         		even
0000C556 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C562 00                         		even
0000C562 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C56E 00                         		even
0000C56E 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C57A 00                         		even
0000C57A 00                         		even
0000C57A                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C57A                            ; --------------------------------------------------------------------------------
0000C57A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C57A                            ; --------------------------------------------------------------------------------
0000C57A                            
0000C57A                            SME_YYb7z:	
0000C57A 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C57E 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C582 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C586 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C58A 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C58E 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C592 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C596 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C598 01                         SME_YYb7z_1E:	dc.b 1	
0000C599 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C59E 02                         SME_YYb7z_24:	dc.b 2	
0000C59F F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C5A4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5A9 02                         SME_YYb7z_2F:	dc.b 2	
0000C5AA F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C5AF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5B4 02                         SME_YYb7z_3A:	dc.b 2	
0000C5B5 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C5BA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5BF 02                         SME_YYb7z_45:	dc.b 2	
0000C5C0 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C5C5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5CA 02                         SME_YYb7z_50:	dc.b 2	
0000C5CB F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C5D0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5D5 02                         SME_YYb7z_5B:	dc.b 2	
0000C5D6 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C5DB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5E0 02                         SME_YYb7z_66:	dc.b 2	
0000C5E1 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C5E6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5EB 02                         SME_YYb7z_71:	dc.b 2	
0000C5EC F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C5F1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5F6 02                         SME_YYb7z_7C:	dc.b 2	
0000C5F7 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C5FC F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C601 02                         SME_YYb7z_87:	dc.b 2	
0000C602 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C607 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C60C 05                         SME_YYb7z_92:	dc.b 5	
0000C60D 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C612 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C617 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C61C 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C621 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C626 02                         SME_YYb7z_AC:	dc.b 2	
0000C627 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C62C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C631 02                         SME_YYb7z_B7:	dc.b 2	
0000C632 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C637 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C63C 02                         SME_YYb7z_C2:	dc.b 2	
0000C63D F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C642 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C648 00                         		even
0000C648 00                         		even
0000C648                            
0000C648                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C648                            ; ---------------------------------------------------------------------------
0000C648                            ; Object 0E - Sonic on the title screen
0000C648                            ; ---------------------------------------------------------------------------
0000C648                            
0000C648                            TitleSonic:
0000C648 7000                       		moveq	#0,d0
0000C64A 1028 0024                  		move.b	obRoutine(a0),d0
0000C64E 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C652 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C656                            ; ===========================================================================
0000C656 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C658 0000                       		dc.w TSon_Delay-TSon_Index
0000C65A 0000                       		dc.w TSon_Move-TSon_Index
0000C65C 0000                       		dc.w TSon_Animate-TSon_Index
0000C65E                            ; ===========================================================================
0000C65E                            
0000C65E                            TSon_Main:	; Routine 0
0000C65E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C662 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C668 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C66E 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C676 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C67C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C682 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C688 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C68E 6100 0000                  		bsr.w	AnimateSprite
0000C692                            
0000C692                            TSon_Delay:	;Routine 2
0000C692 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C696 6A00                       		bpl.s	@wait		; if time remains, branch
0000C698 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C69C 6000 0000                  		bra.w	DisplaySprite
0000C6A0                            
0000C6A0                            	@wait:
0000C6A0 4E75                       		rts	
0000C6A2                            ; ===========================================================================
0000C6A2                            
0000C6A2                            TSon_Move:	; Routine 4
0000C6A2 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C6A6 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C6AC 6600                       		bne.s	@display	; if not, branch
0000C6AE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6B2                            
0000C6B2                            	@display:
0000C6B2 6000 0000                  		bra.w	DisplaySprite
0000C6B6                            
0000C6B6 4E75                       		rts	
0000C6B8                            ; ===========================================================================
0000C6B8                            
0000C6B8                            TSon_Animate:	; Routine 6
0000C6B8 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C6BE 6100 0000                  		bsr.w	AnimateSprite
0000C6C2 6000 0000                  		bra.w	DisplaySprite
0000C6C6                            
0000C6C6 4E75                       		rts	
0000C6C6 4E75                       		rts	
0000C6C8                            		include	"_incObj\0F Press Start and TM.asm"
0000C6C8                            ; ---------------------------------------------------------------------------
0000C6C8                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C6C8                            ; ---------------------------------------------------------------------------
0000C6C8                            
0000C6C8                            PSBTM:
0000C6C8 7000                       		moveq	#0,d0
0000C6CA 1028 0024                  		move.b	obRoutine(a0),d0
0000C6CE 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C6D2 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C6D6 6000 0000                  		bra.w	DisplaySprite
0000C6DA                            ; ===========================================================================
0000C6DA 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C6DC 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C6DE 0000                       		dc.w MENURTS-Obj0F_Index	
0000C6E0                            ; ===========================================================================
0000C6E0                            Obj0F_Init:
0000C6E0 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C6E4 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C6EC 317C 0101 0008                 move.w   #$101,8(a0)
0000C6F2 317C 0151 000A                 move.w   #$151,$A(a0)
0000C6F8 317C 056F 0002             	move.w	#$56F,2(a0)
0000C6FE 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C704 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C70A                            
0000C70A                            
0000C70A                            Obj0F_Main:
0000C70A 7400                             moveq   #0,d2
0000C70C 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C710 1038 F605                        move.b   ($FFFFF605).w,d0
0000C714 0800 0000                        btst   #0,d0
0000C718 6700                             beq.s   MAIN2
0000C71A 5302                             subq.b   #1,d2
0000C71C 6400                             bcc.s   MAIN2
0000C71E 143C 0001                        move.b   #1,d2
0000C722                            
0000C722                            MAIN2:
0000C722 0800 0001                        btst   #1,d0
0000C726 6700                             beq.s   MAIN3
0000C728 5202                             addq.b   #1,d2
0000C72A 0C02 0002                        cmpi.b   #2,d2
0000C72E 6500                             blo.s   MAIN3
0000C730 7400                             moveq   #0,d2
0000C732                            
0000C732                            MAIN3:
0000C732 1142 001A                        move.b   d2,$1A(a0)
0000C736 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C73A 0200 0003                        andi.b   #3,d0
0000C73E 6700                             beq.s   MENURTS   ; rts
0000C740 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C744 4EB8 0FCC                        jsr   PlaySound_Special
0000C748                            
0000C748                            MENURTS:
0000C748 4E75                             rts															 
0000C74A                            ; ===========================================================================
0000C74A                            
0000C74A                            Map_TitleMenu:
0000C74A                            		include "_maps\Title Screen Menu.asm"		
0000C74A                            ; --------------------------------------------------------------------------------
0000C74A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C74A                            ; --------------------------------------------------------------------------------
0000C74A                            
0000C74A                            SME_g2Qfx:	
0000C74A 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C74E 10                         SME_g2Qfx_6:	dc.b $10	
0000C74F E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C754 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C759 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C75E E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C763 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C768 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C76D E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C772 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C777 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C77C F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C781 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C786 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C78B F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C790 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C795 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C79A E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C79F 10                         SME_g2Qfx_6B:	dc.b $10	
0000C7A0 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C7A5 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C7AA E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C7AF E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C7B4 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C7B9 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C7BE E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C7C3 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C7C8 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C7CD F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C7D2 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C7D7 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C7DC F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C7E1 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C7E6 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C7EB F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C7F0                            		even
0000C7F0                            		even
0000C7F0                            		even
0000C7F0                            
0000C7F0                            		include	"_anim\Title Screen Sonic.asm"
0000C7F0                            ; ---------------------------------------------------------------------------
0000C7F0                            ; Animation script - Sonic on the title screen
0000C7F0                            ; ---------------------------------------------------------------------------
0000C7F0 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C7F2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C7FE 00                         		even
0000C7FE 00                         		even
0000C7FE                            		include	"_anim\Press Start and TM.asm"
0000C7FE                            ; ---------------------------------------------------------------------------
0000C7FE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C7FE                            ; ---------------------------------------------------------------------------
0000C7FE 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C800 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C804                            		even
0000C804                            		even
0000C804                            
0000C804                            		include	"_incObj\sub AnimateSprite.asm"
0000C804                            ; ---------------------------------------------------------------------------
0000C804                            ; Subroutine to	animate	a sprite using an animation script
0000C804                            ; ---------------------------------------------------------------------------
0000C804                            
0000C804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C804                            
0000C804                            
0000C804                            AnimateSprite:
0000C804 7000                       		moveq	#0,d0
0000C806 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C80A B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C80E 6700                       		beq.s	Anim_Run	; if not, branch
0000C810                            
0000C810 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C814 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C81A 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C820                            
0000C820                            Anim_Run:
0000C820 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C824 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C826 D040                       		add.w	d0,d0
0000C828 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C82C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C830 7200                       		moveq	#0,d1
0000C832 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C836 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C83A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C83C                            
0000C83C                            Anim_Next:
0000C83C 1200                       		move.b	d0,d1
0000C83E 0200 001F                  		andi.b	#$1F,d0
0000C842 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C846 1028 0022                  		move.b	obStatus(a0),d0
0000C84A E719                       		rol.b	#3,d1
0000C84C B101                       		eor.b	d0,d1
0000C84E 0201 0003                  		andi.b	#3,d1
0000C852 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C858 8328 0001                  		or.b	d1,obRender(a0)
0000C85C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C860                            
0000C860                            Anim_Wait:
0000C860 4E75                       		rts	
0000C862                            ; ===========================================================================
0000C862                            
0000C862                            Anim_End_FF:
0000C862 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C864 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C866 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C86C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C870 60CA                       		bra.s	Anim_Next
0000C872                            ; ===========================================================================
0000C872                            
0000C872                            Anim_End_FE:
0000C872 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C874 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C876 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C87A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C87E 9200                       		sub.b	d0,d1
0000C880 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C884 60B6                       		bra.s	Anim_Next
0000C886                            ; ===========================================================================
0000C886                            
0000C886                            Anim_End_FD:
0000C886 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C888 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C88A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C890                            
0000C890                            Anim_End_FC:
0000C890 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C892 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C894 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C898                            
0000C898                            Anim_End_FB:
0000C898 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C89A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C89C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C8A2 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C8A6                            
0000C8A6                            Anim_End_FA:
0000C8A6 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C8A8 6600                       		bne.s	Anim_End	; if not, branch
0000C8AA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C8AE                            
0000C8AE                            Anim_End:
0000C8AE 4E75                       		rts	
0000C8B0                            ; End of function AnimateSprite
0000C8B0                            ; End of function AnimateSprite
0000C8B0                            
0000C8B0                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C8B0                            ; ---------------------------------------------------------------------------
0000C8B0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C8B0                            ; ---------------------------------------------------------------------------
0000C8B0                            Map_PSB_internal:
0000C8B0 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C8B2 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C8B4 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C8B6 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C8B8 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C8B9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C8BE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C8C3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C8C8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C8CD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C8D2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C8D7 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C8D8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8DD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8E2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8E7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8EC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8F1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8F6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8FB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C900 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C905 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C90A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C90F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C914 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C919 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C91E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C923 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C928 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C92D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C932 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C937 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C93C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C941 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C946 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C94B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C950 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C955 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C95A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C95F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C964 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C969 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C96E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C96F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C974                            		even
0000C974                            		even
0000C974                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C974                            ; ---------------------------------------------------------------------------
0000C974                            ; Sprite mappings - Sonic on the title screen
0000C974                            ; ---------------------------------------------------------------------------
0000C974                            Map_TSon_internal:
0000C974 0000                       		dc.w byte_A898-Map_TSon_internal
0000C976 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C978 0000                       		dc.w byte_A917-Map_TSon_internal
0000C97A 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C97C 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C97E 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C980 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C982 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C984 0A                         byte_A898:	dc.b $A
0000C985 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C98A 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C98F 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C994 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C999 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C99E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C9A3 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C9A8 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C9AD 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C9B2 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C9B7 0F                         byte_A8CB:	dc.b $F
0000C9B8 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C9BD 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C9C2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C9C7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C9CC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C9D1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C9D6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C9DB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C9E0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C9E5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C9EA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C9EF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C9F4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C9F9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C9FE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA03 11                         byte_A917:	dc.b $11
0000CA04 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CA09 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CA0E 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CA13 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CA18 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CA1D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CA22 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CA27 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA2C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA31 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA36 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA3B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA40 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA45 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA4A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA4F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA54 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA59 0D                         byte_A96D:	dc.b $D
0000CA5A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CA5F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CA64 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CA69 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CA6E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CA73 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CA78 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CA7D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CA82 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CA87 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CA8C 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CA91 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CA96 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CA9B 0B                         byte_A9AF:	dc.b $B
0000CA9C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CAA1 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CAA6 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CAAB 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CAB0 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CAB5 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CABA 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CABF 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CAC4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CAC9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CACE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CAD3 13                         byte_A9E7:	dc.b $13
0000CAD4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CAD9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CADE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CAE3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CAE8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CAED 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CAF2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CAF7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CAFC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB01 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB06 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB0B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB10 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB15 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB1A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB1F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB24 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB29 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB2E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB33 15                         byte_AA47:	dc.b $15
0000CB34 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB39 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB3E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB43 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB48 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CB4D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CB52 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB57 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB5C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB61 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB66 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB6B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB70 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB75 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB7A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB7F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB84 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB89 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB8E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB93 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB98 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB9D 16                         byte_AAB1:	dc.b $16
0000CB9E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CBA3 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CBA8 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CBAD 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CBB2 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CBB7 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CBBC 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CBC1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBC6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBCB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBD0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBD5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBDA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBDF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBE4 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBE9 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBEE 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CBF3 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CBF8 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBFD 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC02 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC07 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC0C                            		even
0000CC0C                            		even
0000CC0C                            
0000CC0C                            		include	"_incObj\2B Chopper.asm"
0000CC0C                            ; ---------------------------------------------------------------------------
0000CC0C                            ; Object 2B - Chopper enemy (GHZ)
0000CC0C                            ; ---------------------------------------------------------------------------
0000CC0C                            
0000CC0C                            Chopper:
0000CC0C 7000                       		moveq	#0,d0
0000CC0E 1028 0024                  		move.b	obRoutine(a0),d0
0000CC12 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CC16 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CC1A 6000 0000                  		bra.w	RememberState
0000CC1E                            ; ===========================================================================
0000CC1E 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CC20 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CC22                            
0000CC22 =00000030                  chop_origY:	equ $30
0000CC22                            ; ===========================================================================
0000CC22                            
0000CC22                            Chop_Main:	; Routine 0
0000CC22 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC26 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CC2E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CC34 117C 0004 0001             		move.b	#4,obRender(a0)
0000CC3A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CC40 117C 0009 0020             		move.b	#9,obColType(a0)
0000CC46 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CC4C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC52 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CC58                            
0000CC58                            Chop_ChgSpeed:	; Routine 2
0000CC58 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CC5E 6100 FBA4                  		bsr.w	AnimateSprite
0000CC62 6100 0000                  		bsr.w	SpeedToPos
0000CC66 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CC6C 3028 0030                  		move.w	chop_origY(a0),d0
0000CC70 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CC74 6400                       		bcc.s	@chganimation	; if not, branch
0000CC76 3140 000C                  		move.w	d0,obY(a0)
0000CC7A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC80                            
0000CC80                            	@chganimation:
0000CC80 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CC86 0440 00C0                  		subi.w	#$C0,d0
0000CC8A B068 000C                  		cmp.w	obY(a0),d0
0000CC8E 6400                       		bcc.s	@nochg
0000CC90 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CC96 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CC9A 6B00                       		bmi.s	@nochg		; if not, branch
0000CC9C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CCA2                            
0000CCA2                            	@nochg:
0000CCA2 4E75                       		rts	
0000CCA2 4E75                       		rts	
0000CCA4                            		include	"_anim\Chopper.asm"
0000CCA4                            ; ---------------------------------------------------------------------------
0000CCA4                            ; Animation script - Chopper enemy
0000CCA4                            ; ---------------------------------------------------------------------------
0000CCA4 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CCA6 0000                       		dc.w @fast-Ani_Chop
0000CCA8 0000                       		dc.w @still-Ani_Chop
0000CCAA 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CCAE 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CCB2 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CCB6 00                         		even
0000CCB6 00                         		even
0000CCB6                            Map_Chop:	include	"_maps\Chopper.asm"
0000CCB6                            ; ---------------------------------------------------------------------------
0000CCB6                            ; Sprite mappings - Chopper enemy (GHZ)
0000CCB6                            ; ---------------------------------------------------------------------------
0000CCB6                            Map_Chop_internal:
0000CCB6 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CCB8 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CCBA 01                         @mouthshut:	dc.b 1
0000CCBB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CCC0 01                         @mouthopen:	dc.b 1
0000CCC1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CCC6                            		even
0000CCC6                            		even
0000CCC6                            		include	"_incObj\2C Jaws.asm"
0000CCC6                            ; ---------------------------------------------------------------------------
0000CCC6                            ; Object 2C - Jaws enemy (LZ)
0000CCC6                            ; ---------------------------------------------------------------------------
0000CCC6                            
0000CCC6                            Jaws:
0000CCC6 7000                       		moveq	#0,d0
0000CCC8 1028 0024                  		move.b	obRoutine(a0),d0
0000CCCC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CCD0 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CCD4                            ; ===========================================================================
0000CCD4 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CCD6 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CCD8                            
0000CCD8 =00000030                  jaws_timecount:	equ $30
0000CCD8 =00000032                  jaws_timedelay:	equ $32
0000CCD8                            ; ===========================================================================
0000CCD8                            
0000CCD8                            Jaws_Main:	; Routine 0
0000CCD8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCDC 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CCE4 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CCEA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CCF0 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CCF6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCFC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD02 7000                       		moveq	#0,d0
0000CD04 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CD08 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CD0A 5340                       		subq.w	#1,d0
0000CD0C 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CD10 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CD14 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CD1A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CD20 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CD22 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CD26                            
0000CD26                            Jaws_Turn:	; Routine 2
0000CD26 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CD2A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CD2C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CD32 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CD36 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CD3C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CD42                            
0000CD42                            	@animate:
0000CD42 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CD48 6100 FABA                  		bsr.w	AnimateSprite
0000CD4C 6100 0000                  		bsr.w	SpeedToPos
0000CD50 6000 0000                  		bra.w	RememberState
0000CD50 6000 0000                  		bra.w	RememberState
0000CD54                            		include	"_anim\Jaws.asm"
0000CD54                            ; ---------------------------------------------------------------------------
0000CD54                            ; Animation script - Jaws enemy
0000CD54                            ; ---------------------------------------------------------------------------
0000CD54 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CD56 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CD5C                            		even
0000CD5C                            		even
0000CD5C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CD5C                            ; --------------------------------------------------------------------------------
0000CD5C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CD5C                            ; --------------------------------------------------------------------------------
0000CD5C                            
0000CD5C                            SME_O5C0c:	
0000CD5C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CD60 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CD64 02                         SME_O5C0c_8:	dc.b 2	
0000CD65 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD6A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD6F 02                         SME_O5C0c_13:	dc.b 2	
0000CD70 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD75 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD7A 02                         SME_O5C0c_1E:	dc.b 2	
0000CD7B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD80 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD85 02                         SME_O5C0c_29:	dc.b 2	
0000CD86 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD8B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD90                            		even
0000CD90                            		even
0000CD90                            		include	"_incObj\2D Burrobot.asm"
0000CD90                            ; ---------------------------------------------------------------------------
0000CD90                            ; Object 2D - Burrobot enemy (LZ)
0000CD90                            ; ---------------------------------------------------------------------------
0000CD90                            
0000CD90                            Burrobot:
0000CD90 7000                       		moveq	#0,d0
0000CD92 1028 0024                  		move.b	obRoutine(a0),d0
0000CD96 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CD9A 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CD9E                            ; ===========================================================================
0000CD9E 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CDA0 0000                       		dc.w Burro_Action-Burro_Index
0000CDA2                            
0000CDA2 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CDA2                            ; ===========================================================================
0000CDA2                            
0000CDA2                            Burro_Main:	; Routine 0
0000CDA2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDA6 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CDAC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CDB2 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CDBA 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CDC0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CDC6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CDCC 117C 0005 0020             		move.b	#5,obColType(a0)
0000CDD2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CDD8 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CDDC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CDE2                            
0000CDE2                            Burro_Action:	; Routine 2
0000CDE2 7000                       		moveq	#0,d0
0000CDE4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CDE8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CDEC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CDF0 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CDF6 6100 FA0C                  		bsr.w	AnimateSprite
0000CDFA 6000 0000                  		bra.w	RememberState
0000CDFE                            ; ===========================================================================
0000CDFE 0000                       @index:		dc.w @changedir-@index
0000CE00 0000                       		dc.w Burro_Move-@index
0000CE02 0000                       		dc.w Burro_Jump-@index
0000CE04 0000                       		dc.w Burro_ChkSonic-@index
0000CE06                            ; ===========================================================================
0000CE06                            
0000CE06                            @changedir:
0000CE06 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE0A 6A00                       		bpl.s	@nochg
0000CE0C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE10 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE16 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CE1C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE22 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CE28 6700                       		beq.s	@nochg
0000CE2A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CE2E                            
0000CE2E                            	@nochg:
0000CE2E 4E75                       		rts	
0000CE30                            ; ===========================================================================
0000CE30                            
0000CE30                            Burro_Move:
0000CE30 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE34 6B00                       		bmi.s	loc_AD84
0000CE36 6100 0000                  		bsr.w	SpeedToPos
0000CE3A 0868 0000 0032             		bchg	#0,$32(a0)
0000CE40 6600                       		bne.s	loc_AD78
0000CE42 3628 0008                  		move.w	obX(a0),d3
0000CE46 0643 000C                  		addi.w	#$C,d3
0000CE4A 0828 0000 0022             		btst	#0,obStatus(a0)
0000CE50 6600                       		bne.s	loc_AD6A
0000CE52 0443 0018                  		subi.w	#$18,d3
0000CE56                            
0000CE56                            loc_AD6A:
0000CE56 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CE5C 0C41 000C                  		cmpi.w	#$C,d1
0000CE60 6C00                       		bge.s	loc_AD84
0000CE62 4E75                       		rts	
0000CE64                            ; ===========================================================================
0000CE64                            
0000CE64                            loc_AD78:
0000CE64 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CE6A D368 000C                  		add.w	d1,obY(a0)
0000CE6E 4E75                       		rts	
0000CE70                            ; ===========================================================================
0000CE70                            
0000CE70                            loc_AD84:
0000CE70 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CE76 6700                       		beq.s	loc_ADA4
0000CE78 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CE7C 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CE82 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CE88 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CE8E 4E75                       		rts	
0000CE90                            ; ===========================================================================
0000CE90                            
0000CE90                            loc_ADA4:
0000CE90 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE94 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CE9A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CEA0 4E75                       		rts	
0000CEA2                            ; ===========================================================================
0000CEA2                            
0000CEA2                            Burro_Jump:
0000CEA2 6100 0000                  		bsr.w	SpeedToPos
0000CEA6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CEAC 6B00                       		bmi.s	locret_ADF0
0000CEAE 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CEB4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEBA 4A41                       		tst.w	d1
0000CEBC 6A00                       		bpl.s	locret_ADF0
0000CEBE D368 000C                  		add.w	d1,obY(a0)
0000CEC2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CEC8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CECE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CED4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CED8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CEDC                            
0000CEDC                            locret_ADF0:
0000CEDC 4E75                       		rts	
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            Burro_ChkSonic:
0000CEDE 343C 0060                  		move.w	#$60,d2
0000CEE2 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CEE6 6400                       		bcc.s	locret_AE20
0000CEE8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CEEC 9068 000C                  		sub.w	obY(a0),d0
0000CEF0 6400                       		bcc.s	locret_AE20
0000CEF2 0C40 FF80                  		cmpi.w	#-$80,d0
0000CEF6 6500                       		bcs.s	locret_AE20
0000CEF8 4A78 FE08                  		tst.w	(v_debuguse).w
0000CEFC 6600                       		bne.s	locret_AE20
0000CEFE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF02 3141 0010                  		move.w	d1,obVelX(a0)
0000CF06 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF0C                            
0000CF0C                            locret_AE20:
0000CF0C 4E75                       		rts	
0000CF0E                            
0000CF0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF0E                            
0000CF0E                            
0000CF0E                            Burro_ChkSonic2:
0000CF0E 323C 0080                  		move.w	#$80,d1
0000CF12 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CF18 3038 D008                  		move.w	(v_player+obX).w,d0
0000CF1C 9068 0008                  		sub.w	obX(a0),d0
0000CF20 6400                       		bcc.s	loc_AE40
0000CF22 4440                       		neg.w	d0
0000CF24 4441                       		neg.w	d1
0000CF26 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CF2C                            
0000CF2C                            loc_AE40:
0000CF2C B042                       		cmp.w	d2,d0
0000CF2E 4E75                       		rts	
0000CF30                            ; End of function Burro_ChkSonic2
0000CF30                            ; End of function Burro_ChkSonic2
0000CF30                            		include	"_anim\Burrobot.asm"
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30                            ; Animation script - Burrobot enemy
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CF32 0000                       		dc.w @walk2-Ani_Burro
0000CF34 0000                       		dc.w @digging-Ani_Burro
0000CF36 0000                       		dc.w @fall-Ani_Burro
0000CF38 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CF3C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CF40 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CF44 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CF48 00                         		even
0000CF48 00                         		even
0000CF48                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CF48                            ; --------------------------------------------------------------------------------
0000CF48                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF48                            ; --------------------------------------------------------------------------------
0000CF48                            
0000CF48                            SME_Ag_86:	
0000CF48 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CF4C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CF50 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CF54 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CF56 02                         SME_Ag_86_E:	dc.b 2	
0000CF57 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CF5C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF61 02                         SME_Ag_86_19:	dc.b 2	
0000CF62 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF67 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CF6C 02                         SME_Ag_86_24:	dc.b 2	
0000CF6D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CF72 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CF77 02                         SME_Ag_86_2F:	dc.b 2	
0000CF78 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CF7D 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CF82 02                         SME_Ag_86_3A:	dc.b 2	
0000CF83 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CF88 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CF8D 02                         SME_Ag_86_45:	dc.b 2	
0000CF8E F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CF93 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CF98 02                         SME_Ag_86_50:	dc.b 2	
0000CF99 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF9E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFA4 00                         		even
0000CFA4 00                         		even
0000CFA4                            
0000CFA4                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CFA4                            ; ---------------------------------------------------------------------------
0000CFA4                            ; Object 2F - large grass-covered platforms (MZ)
0000CFA4                            ; ---------------------------------------------------------------------------
0000CFA4                            
0000CFA4                            LargeGrass:
0000CFA4 7000                       		moveq	#0,d0
0000CFA6 1028 0024                  		move.b	obRoutine(a0),d0
0000CFAA 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CFAE 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CFB2                            ; ===========================================================================
0000CFB2 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CFB4 0000                       		dc.w LGrass_Action-LGrass_Index
0000CFB6                            
0000CFB6 =0000002A                  lgrass_origX:	equ $2A
0000CFB6 =0000002C                  lgrass_origY:	equ $2C
0000CFB6                            
0000CFB6 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CFB8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CFBA 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CFBC 0140                       		dc.b 1,	$40
0000CFBE 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CFC0 0220                       		dc.b 2,	$20
0000CFC2                            ; ===========================================================================
0000CFC2                            
0000CFC2                            LGrass_Main:	; Routine 0
0000CFC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFC6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CFCE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CFD4 117C 0004 0001             		move.b	#4,obRender(a0)
0000CFDA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CFE0 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CFE6 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CFEC 7000                       		moveq	#0,d0
0000CFEE 1028 0028                  		move.b	obSubtype(a0),d0
0000CFF2 E448                       		lsr.w	#2,d0
0000CFF4 0240 001C                  		andi.w	#$1C,d0
0000CFF8 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CFFC 3019                       		move.w	(a1)+,d0
0000CFFE 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D002 214A 0030                  		move.l	a2,$30(a0)
0000D006 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D00A 1151 0014                  		move.b	(a1),obActWid(a0)
0000D00E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D014 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D01A 08E8 0004 0001             		bset	#4,1(a0)
0000D020                            
0000D020                            LGrass_Action:	; Routine 2
0000D020 6100 0000                  		bsr.w	LGrass_Types
0000D024 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D028 6700                       		beq.s	LGrass_Solid
0000D02A 7200                       		moveq	#0,d1
0000D02C 1228 0014                  		move.b	obActWid(a0),d1
0000D030 0641 000B                  		addi.w	#$B,d1
0000D034 6100 BF90                  		bsr.w	ExitPlatform
0000D038 0829 0003 0022             		btst	#3,obStatus(a1)
0000D03E 6600 0000                  		bne.w	LGrass_Slope
0000D042 4228 0025                  		clr.b	ob2ndRout(a0)
0000D046 6000                       		bra.s	LGrass_Display
0000D048                            ; ===========================================================================
0000D048                            
0000D048                            LGrass_Slope:
0000D048 7200                       		moveq	#0,d1
0000D04A 1228 0014                  		move.b	obActWid(a0),d1
0000D04E 0641 000B                  		addi.w	#$B,d1
0000D052 2468 0030                  		movea.l	$30(a0),a2
0000D056 3428 0008                  		move.w	obX(a0),d2
0000D05A 6100 CF04                  		bsr.w	SlopeObject2
0000D05E 6000                       		bra.s	LGrass_Display
0000D060                            ; ===========================================================================
0000D060                            
0000D060                            LGrass_Solid:
0000D060 7200                       		moveq	#0,d1
0000D062 1228 0014                  		move.b	obActWid(a0),d1
0000D066 0641 000B                  		addi.w	#$B,d1
0000D06A 343C 0020                  		move.w	#$20,d2
0000D06E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D074 6600                       		bne.s	loc_AF8E
0000D076 343C 0030                  		move.w	#$30,d2
0000D07A                            
0000D07A                            loc_AF8E:
0000D07A 2468 0030                  		movea.l	$30(a0),a2
0000D07E 6100 0000                  		bsr.w	SolidObject2F
0000D082                            
0000D082                            LGrass_Display:
0000D082 6100 0000                  		bsr.w	DisplaySprite
0000D086 6000 0000                  		bra.w	LGrass_ChkDel
0000D08A                            
0000D08A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D08A                            
0000D08A                            
0000D08A                            LGrass_Types:
0000D08A 7000                       		moveq	#0,d0
0000D08C 1028 0028                  		move.b	obSubtype(a0),d0
0000D090 0240 0007                  		andi.w	#7,d0
0000D094 D040                       		add.w	d0,d0
0000D096 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D09A 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D09E                            ; End of function LGrass_Types
0000D09E                            
0000D09E                            ; ===========================================================================
0000D09E 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D0A0 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D0A2 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D0A4 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D0A6 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D0A8 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D0AA                            ; ===========================================================================
0000D0AA                            
0000D0AA                            LGrass_Type00:
0000D0AA 4E75                       		rts			; type 00 platform doesn't move
0000D0AC                            ; ===========================================================================
0000D0AC                            
0000D0AC                            LGrass_Type01:
0000D0AC 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D0B0 323C 0020                  		move.w	#$20,d1
0000D0B4 6000                       		bra.s	LGrass_Move
0000D0B6                            ; ===========================================================================
0000D0B6                            
0000D0B6                            LGrass_Type02:
0000D0B6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D0BA 323C 0030                  		move.w	#$30,d1
0000D0BE 6000                       		bra.s	LGrass_Move
0000D0C0                            ; ===========================================================================
0000D0C0                            
0000D0C0                            LGrass_Type03:
0000D0C0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D0C4 323C 0040                  		move.w	#$40,d1
0000D0C8 6000                       		bra.s	LGrass_Move
0000D0CA                            ; ===========================================================================
0000D0CA                            
0000D0CA                            LGrass_Type04:
0000D0CA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D0CE 323C 0060                  		move.w	#$60,d1
0000D0D2                            
0000D0D2                            LGrass_Move:
0000D0D2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D0D8 6700                       		beq.s	loc_AFF2
0000D0DA 4440                       		neg.w	d0
0000D0DC D041                       		add.w	d1,d0
0000D0DE                            
0000D0DE                            loc_AFF2:
0000D0DE 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D0E2 9240                       		sub.w	d0,d1
0000D0E4 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D0E8 4E75                       		rts	
0000D0EA                            ; ===========================================================================
0000D0EA                            
0000D0EA                            LGrass_Type05:
0000D0EA 1028 0034                  		move.b	$34(a0),d0
0000D0EE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D0F2 6600                       		bne.s	loc_B010
0000D0F4 5500                       		subq.b	#2,d0
0000D0F6 6400                       		bcc.s	loc_B01C
0000D0F8 7000                       		moveq	#0,d0
0000D0FA 6000                       		bra.s	loc_B01C
0000D0FC                            ; ===========================================================================
0000D0FC                            
0000D0FC                            loc_B010:
0000D0FC 5800                       		addq.b	#4,d0
0000D0FE 0C00 0040                  		cmpi.b	#$40,d0
0000D102 6500                       		bcs.s	loc_B01C
0000D104 103C 0040                  		move.b	#$40,d0
0000D108                            
0000D108                            loc_B01C:
0000D108 1140 0034                  		move.b	d0,$34(a0)
0000D10C 4EB9 0000 37AE             		jsr	(CalcSine).l
0000D112 E848                       		lsr.w	#4,d0
0000D114 3200                       		move.w	d0,d1
0000D116 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D11A 3140 000C                  		move.w	d0,obY(a0)
0000D11E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D124 6600                       		bne.s	loc_B07A
0000D126 4A28 0035                  		tst.b	$35(a0)
0000D12A 6600                       		bne.s	loc_B07A
0000D12C 117C 0001 0035             		move.b	#1,$35(a0)
0000D132 6100 0000                  		bsr.w	FindNextFreeObj
0000D136 6600                       		bne.s	loc_B07A
0000D138 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D13C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D142 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D148 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D14C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D150 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D156 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D15C 2348 0038                  		move.l	a0,$38(a1)
0000D160 2448                       		movea.l	a0,a2
0000D162 6100                       		bsr.s	sub_B09C
0000D164                            
0000D164                            loc_B07A:
0000D164 7400                       		moveq	#0,d2
0000D166 45E8 0036                  		lea	$36(a0),a2
0000D16A 141A                       		move.b	(a2)+,d2
0000D16C 5302                       		subq.b	#1,d2
0000D16E 6500                       		bcs.s	locret_B09A
0000D170                            
0000D170                            loc_B086:
0000D170 7000                       		moveq	#0,d0
0000D172 101A                       		move.b	(a2)+,d0
0000D174 ED48                       		lsl.w	#6,d0
0000D176 0640 D000                  		addi.w	#$D000,d0
0000D17A 3240                       		movea.w	d0,a1
0000D17C 3341 003C                  		move.w	d1,$3C(a1)
0000D180 51CA FFEE                  		dbf	d2,loc_B086
0000D184                            
0000D184                            locret_B09A:
0000D184 4E75                       		rts	
0000D186                            
0000D186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D186                            
0000D186                            
0000D186                            sub_B09C:
0000D186 45EA 0036                  		lea	$36(a2),a2
0000D18A 7000                       		moveq	#0,d0
0000D18C 1012                       		move.b	(a2),d0
0000D18E 5212                       		addq.b	#1,(a2)
0000D190 45F2 0001                  		lea	1(a2,d0.w),a2
0000D194 3009                       		move.w	a1,d0
0000D196 0440 D000                  		subi.w	#$D000,d0
0000D19A EC48                       		lsr.w	#6,d0
0000D19C 0240 007F                  		andi.w	#$7F,d0
0000D1A0 1480                       		move.b	d0,(a2)
0000D1A2 4E75                       		rts	
0000D1A4                            ; End of function sub_B09C
0000D1A4                            
0000D1A4                            ; ===========================================================================
0000D1A4                            
0000D1A4                            LGrass_ChkDel:
0000D1A4 4A28 0035                  		tst.b	$35(a0)
0000D1A8 6700                       		beq.s	loc_B0C6
0000D1AA 4A28 0001                  		tst.b	obRender(a0)
0000D1AE 6A00                       		bpl.s	LGrass_DelFlames
0000D1B0                            
0000D1B0                            loc_B0C6:
0000D1CE 4E75                       		rts	
0000D1D0                            ; ===========================================================================
0000D1D0                            
0000D1D0                            LGrass_DelFlames:
0000D1D0 7400                       		moveq	#0,d2
0000D1D2                            
0000D1D2                            loc_B0E8:
0000D1D2 45E8 0036                  		lea	$36(a0),a2
0000D1D6 1412                       		move.b	(a2),d2
0000D1D8 421A                       		clr.b	(a2)+
0000D1DA 5302                       		subq.b	#1,d2
0000D1DC 6500                       		bcs.s	locret_B116
0000D1DE                            
0000D1DE                            loc_B0F4:
0000D1DE 7000                       		moveq	#0,d0
0000D1E0 1012                       		move.b	(a2),d0
0000D1E2 421A                       		clr.b	(a2)+
0000D1E4 ED48                       		lsl.w	#6,d0
0000D1E6 0640 D000                  		addi.w	#$D000,d0
0000D1EA 3240                       		movea.w	d0,a1
0000D1EC 6100 0000                  		bsr.w	DeleteChild
0000D1F0 51CA FFEC                  		dbf	d2,loc_B0F4
0000D1F4 117C 0000 0035             		move.b	#0,$35(a0)
0000D1FA 117C 0000 0034             		move.b	#0,$34(a0)
0000D200                            
0000D200                            locret_B116:
0000D200 4E75                       		rts	
0000D202                            ; ===========================================================================
0000D202                            ; ---------------------------------------------------------------------------
0000D202                            ; Collision data for large moving platforms (MZ)
0000D202                            ; ---------------------------------------------------------------------------
0000D202                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D24E                            		even
0000D24E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D27A                            		even
0000D27A                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D2C6                            		even
0000D2C6                            		even
0000D2C6                            		include	"_incObj\35 Burning Grass.asm"
0000D2C6                            ; ---------------------------------------------------------------------------
0000D2C6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D2C6                            ; (appears when	you walk on sinking platforms)
0000D2C6                            ; ---------------------------------------------------------------------------
0000D2C6                            
0000D2C6                            GrassFire:
0000D2C6 7000                       		moveq	#0,d0
0000D2C8 1028 0024                  		move.b	obRoutine(a0),d0
0000D2CC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D2D0 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D2D4                            ; ===========================================================================
0000D2D4 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D2D6 0000                       		dc.w loc_B238-GFire_Index
0000D2D8 0000                       		dc.w GFire_Move-GFire_Index
0000D2DA                            
0000D2DA =0000002A                  gfire_origX:	equ $2A
0000D2DA                            ; ===========================================================================
0000D2DA                            
0000D2DA                            GFire_Main:	; Routine 0
0000D2DA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D2DE 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D2E6 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D2EC 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D2F2 117C 0004 0001             		move.b	#4,obRender(a0)
0000D2F8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D2FE 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D304 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D314 4A28 0028                  		tst.b	obSubtype(a0)
0000D318 6700                       		beq.s	loc_B238
0000D31A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D31E 6000 0000                  		bra.w	GFire_Move
0000D322                            ; ===========================================================================
0000D322                            
0000D322                            loc_B238:	; Routine 2
0000D322 2268 0030                  		movea.l	$30(a0),a1
0000D326 3228 0008                  		move.w	obX(a0),d1
0000D32A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D32E 0641 000C                  		addi.w	#$C,d1
0000D332 3001                       		move.w	d1,d0
0000D334 E248                       		lsr.w	#1,d0
0000D336 1031 0000                  		move.b	(a1,d0.w),d0
0000D33A 4440                       		neg.w	d0
0000D33C D068 002C                  		add.w	$2C(a0),d0
0000D340 3400                       		move.w	d0,d2
0000D342 D068 003C                  		add.w	$3C(a0),d0
0000D346 3140 000C                  		move.w	d0,obY(a0)
0000D34A 0C41 0084                  		cmpi.w	#$84,d1
0000D34E 6400                       		bcc.s	loc_B2B0
0000D350 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D358 0C41 0080                  		cmpi.w	#$80,d1
0000D35C 6400                       		bcc.s	loc_B2B0
0000D35E 2028 0008                  		move.l	obX(a0),d0
0000D362 0680 0008 0000             		addi.l	#$80000,d0
0000D368 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D36E 6600                       		bne.s	loc_B2B0
0000D370 6100 0000                  		bsr.w	FindNextFreeObj
0000D374 6600                       		bne.s	loc_B2B0
0000D376 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D37A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D380 3342 002C                  		move.w	d2,$2C(a1)
0000D384 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D38A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D390 2468 0038                  		movea.l	$38(a0),a2
0000D394 6100 FDF0                  		bsr.w	sub_B09C
0000D398                            
0000D398                            loc_B2B0:
0000D398 6000                       		bra.s	GFire_Animate
0000D39A                            ; ===========================================================================
0000D39A                            
0000D39A                            GFire_Move:	; Routine 4
0000D39A 3028 002C                  		move.w	$2C(a0),d0
0000D39E D068 003C                  		add.w	$3C(a0),d0
0000D3A2 3140 000C                  		move.w	d0,obY(a0)
0000D3A6                            
0000D3A6                            GFire_Animate:
0000D3A6 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D3AC 6100 F456                  		bsr.w	AnimateSprite
0000D3B0 6000 0000                  		bra.w	DisplaySprite
0000D3B0 6000 0000                  		bra.w	DisplaySprite
0000D3B4                            		include	"_anim\Burning Grass.asm"
0000D3B4                            ; ---------------------------------------------------------------------------
0000D3B4                            ; Animation script - burning grass that sits on the floor (MZ)
0000D3B4                            ; ---------------------------------------------------------------------------
0000D3B4 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D3B6 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D3BC                            		even
0000D3BC                            		even
0000D3BC                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D3BC                            ; ---------------------------------------------------------------------------
0000D3BC                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D3BC                            ; ---------------------------------------------------------------------------
0000D3BC                            Map_LGrass_internal:
0000D3BC 0000                       		dc.w @wide-Map_LGrass_internal
0000D3BE 0000                       		dc.w @sloped-Map_LGrass_internal
0000D3C0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D3C2 0D                         @wide:		dc.b $D
0000D3C3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D3C8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D3CD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D3D2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D3D7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D3DC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D3E1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D3E6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D3EB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D3F0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D3F5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D3FA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D3FF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D404 0A                         @sloped:	dc.b $A
0000D405 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D40A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D40F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D414 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D419 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D41E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D423 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D428 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D42D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D432 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D437 06                         @narrow:	dc.b 6
0000D438 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D43D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D442 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D447 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D44C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D451 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D456                            		even
0000D456                            		even
0000D456                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D456                            ; --------------------------------------------------------------------------------
0000D456                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D456                            ; --------------------------------------------------------------------------------
0000D456                            
0000D456                            SME_gyvTV:	
0000D456 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D45A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D45E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D462 01                         SME_gyvTV_C:	dc.b 1	
0000D463 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D468 01                         SME_gyvTV_12:	dc.b 1	
0000D469 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D46E 01                         SME_gyvTV_18:	dc.b 1	
0000D46F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D474 01                         SME_gyvTV_1E:	dc.b 1	
0000D475 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D47A 01                         SME_gyvTV_24:	dc.b 1	
0000D47B F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D480 01                         SME_gyvTV_2A:	dc.b 1	
0000D481 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D486                            		even
0000D486                            		even
0000D486                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D486                            ; ---------------------------------------------------------------------------
0000D486                            ; Object 30 - large green glass blocks (MZ)
0000D486                            ; ---------------------------------------------------------------------------
0000D486                            
0000D486                            GlassBlock:
0000D486 7000                       		moveq	#0,d0
0000D488 1028 0024                  		move.b	obRoutine(a0),d0
0000D48C 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D490 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D4B2 6000 0000                  		bra.w	DisplaySprite
0000D4B6                            ; ===========================================================================
0000D4B6                            
0000D4B6                            Glass_Delete:
0000D4B6 6000 0000                  		bra.w	DeleteObject
0000D4BA                            ; ===========================================================================
0000D4BA 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D4BC 0000                       		dc.w Glass_Block012-Glass_Index
0000D4BE 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D4C0 0000                       		dc.w Glass_Block34-Glass_Index
0000D4C2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D4C4                            
0000D4C4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D4C4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D4C4                            
0000D4C4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D4C7 0400 01                    		dc.b 4,	0, 1
0000D4CA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D4CD 0800 01                    		dc.b 8,	0, 1
0000D4D0                            ; ===========================================================================
0000D4D0                            
0000D4D0                            Glass_Main:	; Routine 0
0000D4D0 45F9 0000 D4C4             		lea	(Glass_Vars1).l,a2
0000D4D6 7201                       		moveq	#1,d1
0000D4D8 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D4DE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D4E4 6500                       		bcs.s	@IsType012	; if yes, branch
0000D4E6                            
0000D4E6 45F9 0000 D4CA             		lea	(Glass_Vars2).l,a2
0000D4EC 7201                       		moveq	#1,d1
0000D4EE 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D4F4                            
0000D4F4                            	@IsType012:
0000D4F4 2248                       		movea.l	a0,a1
0000D4F6 6000                       		bra.s	@Load		; load main object
0000D4F8                            ; ===========================================================================
0000D4F8                            
0000D4F8                            	@Repeat:
0000D4F8 6100 0000                  		bsr.w	FindNextFreeObj
0000D4FC 6600                       		bne.s	@Fail
0000D4FE                            
0000D4FE                            @Load:
0000D4FE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D502 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D506 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D50C 101A                       		move.b	(a2)+,d0
0000D50E 4880                       		ext.w	d0
0000D510 D068 000C                  		add.w	obY(a0),d0
0000D514 3340 000C                  		move.w	d0,obY(a1)
0000D518 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D520 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D526 137C 0004 0001             		move.b	#4,obRender(a1)
0000D52C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D532 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D538 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D53E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D544 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D548 2348 003C                  		move.l	a0,glass_parent(a1)
0000D54C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D550                            
0000D550 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D556 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D55C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D560 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D566                            
0000D566                            	@Fail:
0000D566 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D56C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D572                            
0000D572                            Glass_Block012:	; Routine 2
0000D572 6100 0000                  		bsr.w	Glass_Types
0000D576 323C 002B                  		move.w	#$2B,d1
0000D57A 343C 0048                  		move.w	#$48,d2
0000D57E 363C 0049                  		move.w	#$49,d3
0000D582 3828 0008                  		move.w	obX(a0),d4
0000D586 6000 0000                  		bra.w	SolidObject
0000D58A                            ; ===========================================================================
0000D58A                            
0000D58A                            Glass_Reflect012:
0000D58A                            		; Routine 4
0000D58A 2268 003C                  		movea.l	$3C(a0),a1
0000D58E 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D594 6000 0000                  		bra.w	Glass_Types
0000D598                            ; ===========================================================================
0000D598                            
0000D598                            Glass_Block34:	; Routine 6
0000D598 6100 0000                  		bsr.w	Glass_Types
0000D59C 323C 002B                  		move.w	#$2B,d1
0000D5A0 343C 0038                  		move.w	#$38,d2
0000D5A4 363C 0039                  		move.w	#$39,d3
0000D5A8 3828 0008                  		move.w	obX(a0),d4
0000D5AC 6000 0000                  		bra.w	SolidObject
0000D5B0                            ; ===========================================================================
0000D5B0                            
0000D5B0                            Glass_Reflect34:
0000D5B0                            		; Routine 8
0000D5B0 2268 003C                  		movea.l	$3C(a0),a1
0000D5B4 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D5BA 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D5C0 6000 0000                  		bra.w	Glass_Types
0000D5C4                            
0000D5C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5C4                            
0000D5C4                            
0000D5C4                            Glass_Types:
0000D5C4 7000                       		moveq	#0,d0
0000D5C6 1028 0028                  		move.b	obSubtype(a0),d0
0000D5CA 0240 0007                  		andi.w	#7,d0
0000D5CE D040                       		add.w	d0,d0
0000D5D0 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D5D4 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D5D8                            ; End of function Glass_Types
0000D5D8                            
0000D5D8                            ; ===========================================================================
0000D5D8 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D5DA 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D5DC 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D5DE 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D5E0 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D5E2                            ; ===========================================================================
0000D5E2                            
0000D5E2                            Glass_Type00:
0000D5E2 4E75                       		rts	
0000D5E4                            ; ===========================================================================
0000D5E4                            
0000D5E4                            Glass_Type01:
0000D5E4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D5E8 323C 0040                  		move.w	#$40,d1
0000D5EC 6000                       		bra.s	loc_B514
0000D5EE                            ; ===========================================================================
0000D5EE                            
0000D5EE                            Glass_Type02:
0000D5EE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D5F2 323C 0040                  		move.w	#$40,d1
0000D5F6 4440                       		neg.w	d0
0000D5F8 D041                       		add.w	d1,d0
0000D5FA                            
0000D5FA                            loc_B514:
0000D5FA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D600 6700                       		beq.s	loc_B526
0000D602 4440                       		neg.w	d0
0000D604 D041                       		add.w	d1,d0
0000D606 E208                       		lsr.b	#1,d0
0000D608 0640 0020                  		addi.w	#$20,d0
0000D60C                            
0000D60C                            loc_B526:
0000D60C 6000 0000                  		bra.w	loc_B5EE
0000D610                            ; ===========================================================================
0000D610                            
0000D610                            Glass_Type03:
0000D610 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D616 6700                       		beq.s	loc_B53E
0000D618 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D61C 0440 0010                  		subi.w	#$10,d0
0000D620 6000 0000                  		bra.w	loc_B5EE
0000D624                            ; ===========================================================================
0000D624                            
0000D624                            loc_B53E:
0000D624 0828 0003 0022             		btst	#3,obStatus(a0)
0000D62A 6600                       		bne.s	loc_B54E
0000D62C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D632 6000                       		bra.s	loc_B582
0000D634                            ; ===========================================================================
0000D634                            
0000D634                            loc_B54E:
0000D634 4A28 0034                  		tst.b	$34(a0)
0000D638 6600                       		bne.s	loc_B582
0000D63A 117C 0001 0034             		move.b	#1,$34(a0)
0000D640 08E8 0000 0035             		bset	#0,$35(a0)
0000D646 6700                       		beq.s	loc_B582
0000D648 08E8 0007 0034             		bset	#7,$34(a0)
0000D64E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D654 117C 000A 0038             		move.b	#$A,$38(a0)
0000D65A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D660 6600                       		bne.s	loc_B582
0000D662 317C 0040 0036             		move.w	#$40,$36(a0)
0000D668                            
0000D668                            loc_B582:
0000D668 4A28 0034                  		tst.b	$34(a0)
0000D66C 6A00                       		bpl.s	loc_B5AA
0000D66E 4A28 0038                  		tst.b	$38(a0)
0000D672 6700                       		beq.s	loc_B594
0000D674 5328 0038                  		subq.b	#1,$38(a0)
0000D678 6600                       		bne.s	loc_B5AA
0000D67A                            
0000D67A                            loc_B594:
0000D67A 4A68 0032                  		tst.w	glass_dist(a0)
0000D67E 6700                       		beq.s	loc_B5A4
0000D680 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D684 5368 0036                  		subq.w	#1,$36(a0)
0000D688 6600                       		bne.s	loc_B5AA
0000D68A                            
0000D68A                            loc_B5A4:
0000D68A 08A8 0007 0034             		bclr	#7,$34(a0)
0000D690                            
0000D690                            loc_B5AA:
0000D690 3028 0032                  		move.w	glass_dist(a0),d0
0000D694 6000                       		bra.s	loc_B5EE
0000D696                            ; ===========================================================================
0000D696                            
0000D696                            Glass_Type04:
0000D696 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D69C 6700                       		beq.s	Glass_ChkSwitch
0000D69E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6A2 0440 0010                  		subi.w	#$10,d0
0000D6A6 6000                       		bra.s	loc_B5EE
0000D6A8                            ; ===========================================================================
0000D6A8                            
0000D6A8                            Glass_ChkSwitch:
0000D6A8 4A28 0034                  		tst.b	$34(a0)
0000D6AC 6600                       		bne.s	loc_B5E0
0000D6AE 45F8 F7E0                  		lea	(f_switch).w,a2
0000D6B2 7000                       		moveq	#0,d0
0000D6B4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D6B8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D6BA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D6BE 6700                       		beq.s	loc_B5EA	; if not, branch
0000D6C0 117C 0001 0034             		move.b	#1,$34(a0)
0000D6C6                            
0000D6C6                            loc_B5E0:
0000D6C6 4A68 0032                  		tst.w	glass_dist(a0)
0000D6CA 6700                       		beq.s	loc_B5EA
0000D6CC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D6D0                            
0000D6D0                            loc_B5EA:
0000D6D0 3028 0032                  		move.w	glass_dist(a0),d0
0000D6D4                            
0000D6D4                            loc_B5EE:
0000D6D4 3228 0030                  		move.w	$30(a0),d1
0000D6D8 9240                       		sub.w	d0,d1
0000D6DA 3141 000C                  		move.w	d1,obY(a0)
0000D6DE 4E75                       		rts	
0000D6DE 4E75                       		rts	
0000D6E0                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D6E0                            ; --------------------------------------------------------------------------------
0000D6E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D6E0                            ; --------------------------------------------------------------------------------
0000D6E0                            
0000D6E0                            SME_NEyTf:	
0000D6E0 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D6E4 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D6E6 0C                         SME_NEyTf_6:	dc.b $C	
0000D6E7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D6EC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D6F1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D6F6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D6FB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D700 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D705 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D70A 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D70F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D714 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D719 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D71E 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D723 02                         SME_NEyTf_43:	dc.b 2	
0000D724 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D729 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D72E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D72F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D734 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D739 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D73E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D743 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D748 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D74D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D752 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D757 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D75C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D762 00                         		even
0000D762 00                         		even
0000D762                            		include	"_incObj\31 Chained Stompers.asm"
0000D762                            ; ---------------------------------------------------------------------------
0000D762                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D762                            ; ---------------------------------------------------------------------------
0000D762                            
0000D762                            ChainStomp:
0000D762 7000                       		moveq	#0,d0
0000D764 1028 0024                  		move.b	obRoutine(a0),d0
0000D768 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D76C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D770                            ; ===========================================================================
0000D770 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D772 0000                       		dc.w loc_B798-CStom_Index
0000D774 0000                       		dc.w loc_B7FE-CStom_Index
0000D776 0000                       		dc.w CStom_Display2-CStom_Index
0000D778 0000                       		dc.w loc_B7E2-CStom_Index
0000D77A                            
0000D77A =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D77A                            
0000D77A 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D77C 0100                       		dc.b 1,	0
0000D77E                            
0000D77E 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D781 041C 01                    		dc.b 4,	$1C, 1
0000D784 08CC 03                    		dc.b 8,	$CC, 3
0000D787 06F0 02                    		dc.b 6,	$F0, 2
0000D78A                            
0000D78A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D78E 5000 7800                  		dc.w $5000, $7800
0000D792 3800 5800                  		dc.w $3800, $5800
0000D796 B800                       		dc.w $B800
0000D798                            ; ===========================================================================
0000D798                            
0000D798                            CStom_Main:	; Routine 0
0000D798 7000                       		moveq	#0,d0
0000D79A 1028 0028                  		move.b	obSubtype(a0),d0
0000D79E 6A00                       		bpl.s	loc_B6CE
0000D7A0 0240 007F                  		andi.w	#$7F,d0
0000D7A4 D040                       		add.w	d0,d0
0000D7A6 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D7AA 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D7AE 101A                       		move.b	(a2)+,d0
0000D7B0 1140 0028                  		move.b	d0,obSubtype(a0)
0000D7B4                            
0000D7B4                            loc_B6CE:
0000D7B4 0200 000F                  		andi.b	#$F,d0
0000D7B8 D040                       		add.w	d0,d0
0000D7BA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D7BE 4A40                       		tst.w	d0
0000D7C0 6600                       		bne.s	loc_B6E0
0000D7C2 3142 0032                  		move.w	d2,$32(a0)
0000D7C6                            
0000D7C6                            loc_B6E0:
0000D7C6 45F9 0000 D77E             		lea	(CStom_Var).l,a2
0000D7CC 2248                       		movea.l	a0,a1
0000D7CE 7203                       		moveq	#3,d1
0000D7D0 6000                       		bra.s	CStom_MakeStomper
0000D7D2                            ; ===========================================================================
0000D7D2                            
0000D7D2                            CStom_Loop:
0000D7D2 6100 0000                  		bsr.w	FindNextFreeObj
0000D7D6 6600 0000                  		bne.w	CStom_SetSize
0000D7DA                            
0000D7DA                            CStom_MakeStomper:
0000D7DA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D7DE 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D7E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D7E8 101A                       		move.b	(a2)+,d0
0000D7EA 4880                       		ext.w	d0
0000D7EC D068 000C                  		add.w	obY(a0),d0
0000D7F0 3340 000C                  		move.w	d0,obY(a1)
0000D7F4 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D7FC 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D802 137C 0004 0001             		move.b	#4,obRender(a1)
0000D808 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D80E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D814 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D81A 3342 0034                  		move.w	d2,$34(a1)
0000D81E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D824 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D828 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D82E 6600                       		bne.s	loc_B76A
0000D830 5341                       		subq.w	#1,d1
0000D832 1028 0028                  		move.b	obSubtype(a0),d0
0000D836 0240 00F0                  		andi.w	#$F0,d0
0000D83A 0C40 0020                  		cmpi.w	#$20,d0
0000D83E 679A                       		beq.s	CStom_MakeStomper
0000D840 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D846 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D84C 5241                       		addq.w	#1,d1
0000D84E                            
0000D84E                            loc_B76A:
0000D84E 2348 003C                  		move.l	a0,$3C(a1)
0000D852 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D856                            
0000D856 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D85C                            
0000D85C                            CStom_SetSize:
0000D85C 7000                       		moveq	#0,d0
0000D85E 1028 0028                  		move.b	obSubtype(a0),d0
0000D862 E648                       		lsr.w	#3,d0
0000D864 0200 000E                  		andi.b	#$E,d0
0000D868 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D86C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D870 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D874 6000                       		bra.s	loc_B798
0000D876                            ; ===========================================================================
0000D876 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D878 3009                       		dc.b $30, 9
0000D87A 100A                       		dc.b $10, $A
0000D87C                            ; ===========================================================================
0000D87C                            
0000D87C                            loc_B798:	; Routine 2
0000D87C 6100 0000                  		bsr.w	CStom_Types
0000D880 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D886 7200                       		moveq	#0,d1
0000D888 1228 0014                  		move.b	obActWid(a0),d1
0000D88C 0641 000B                  		addi.w	#$B,d1
0000D890 343C 000C                  		move.w	#$C,d2
0000D894 363C 000D                  		move.w	#$D,d3
0000D898 3828 0008                  		move.w	obX(a0),d4
0000D89C 6100 0000                  		bsr.w	SolidObject
0000D8A0 0828 0003 0022             		btst	#3,obStatus(a0)
0000D8A6 6700                       		beq.s	CStom_Display
0000D8A8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D8AE 6400                       		bcc.s	CStom_Display
0000D8B0 2448                       		movea.l	a0,a2
0000D8B2 41F8 D000                  		lea	(v_player).w,a0
0000D8B6 4EB9 0000 0000             		jsr	(KillSonic).l
0000D8BC 204A                       		movea.l	a2,a0
0000D8BE                            
0000D8BE                            CStom_Display:
0000D8BE 6100 0000                  		bsr.w	DisplaySprite
0000D8C2 6000 0000                  		bra.w	CStom_ChkDel
0000D8C6                            ; ===========================================================================
0000D8C6                            
0000D8C6                            loc_B7E2:	; Routine 8
0000D8C6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D8CC 08E8 0004 0001             		bset	#4,obRender(a0)
0000D8D2 2268 003C                  		movea.l	$3C(a0),a1
0000D8D6 1029 0032                  		move.b	$32(a1),d0
0000D8DA EA08                       		lsr.b	#5,d0
0000D8DC 5600                       		addq.b	#3,d0
0000D8DE 1140 001A                  		move.b	d0,obFrame(a0)
0000D8E2                            
0000D8E2                            loc_B7FE:	; Routine 4
0000D8E2 2268 003C                  		movea.l	$3C(a0),a1
0000D8E6 7000                       		moveq	#0,d0
0000D8E8 1029 0032                  		move.b	$32(a1),d0
0000D8EC D068 0030                  		add.w	$30(a0),d0
0000D8F0 3140 000C                  		move.w	d0,obY(a0)
0000D8F4                            
0000D8F4                            CStom_Display2:	; Routine 6
0000D8F4 6100 0000                  		bsr.w	DisplaySprite
0000D8F8                            
0000D8F8                            CStom_ChkDel:
0000D916 4E75                       		rts	
0000D918                            ; ===========================================================================
0000D918                            
0000D918                            CStom_Types:
0000D918 1028 0028                  		move.b	obSubtype(a0),d0
0000D91C 0240 000F                  		andi.w	#$F,d0
0000D920 D040                       		add.w	d0,d0
0000D922 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D926 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D92A                            ; ===========================================================================
0000D92A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D92C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D92E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D930 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D932 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D934 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D936 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D938                            ; ===========================================================================
0000D938                            
0000D938                            CStom_Type00:
0000D938 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D93C 7000                       		moveq	#0,d0
0000D93E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D942 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D946 6700                       		beq.s	loc_B8A8	; if not, branch
0000D948 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D94C 6A00                       		bpl.s	loc_B872
0000D94E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D954 6700                       		beq.s	loc_B8A0
0000D956                            
0000D956                            loc_B872:
0000D956 4A68 0032                  		tst.w	$32(a0)
0000D95A 6700                       		beq.s	loc_B8A0
0000D95C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D960 0200 000F                  		andi.b	#$F,d0
0000D964 6600                       		bne.s	loc_B892
0000D966 4A28 0001                  		tst.b	1(a0)
0000D96A 6A00                       		bpl.s	loc_B892
0000D976                            
0000D976                            loc_B892:
0000D976 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D97C 6400                       		bcc.s	CStom_Restart
0000D97E 317C 0000 0032             		move.w	#0,$32(a0)
0000D984                            
0000D984                            loc_B8A0:
0000D984 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D98A 6000                       		bra.s	CStom_Restart
0000D98C                            ; ===========================================================================
0000D98C                            
0000D98C                            loc_B8A8:
0000D98C 3228 0034                  		move.w	$34(a0),d1
0000D990 B268 0032                  		cmp.w	$32(a0),d1
0000D994 6700                       		beq.s	CStom_Restart
0000D996 3028 0012                  		move.w	obVelY(a0),d0
0000D99A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D9A0 D168 0032                  		add.w	d0,$32(a0)
0000D9A4 B268 0032                  		cmp.w	$32(a0),d1
0000D9A8 6200                       		bhi.s	CStom_Restart
0000D9AA 3141 0032                  		move.w	d1,$32(a0)
0000D9AE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D9B4 4A28 0001                  		tst.b	obRender(a0)
0000D9B8 6A00                       		bpl.s	CStom_Restart
0000D9C4                            
0000D9C4                            CStom_Restart:
0000D9C4 7000                       		moveq	#0,d0
0000D9C6 1028 0032                  		move.b	$32(a0),d0
0000D9CA D068 0030                  		add.w	$30(a0),d0
0000D9CE 3140 000C                  		move.w	d0,obY(a0)
0000D9D2 4E75                       		rts	
0000D9D4                            ; ===========================================================================
0000D9D4                            
0000D9D4                            CStom_Type01:
0000D9D4 4A68 0036                  		tst.w	$36(a0)
0000D9D8 6700                       		beq.s	loc_B938
0000D9DA 4A68 0038                  		tst.w	$38(a0)
0000D9DE 6700                       		beq.s	loc_B902
0000D9E0 5368 0038                  		subq.w	#1,$38(a0)
0000D9E4 6000                       		bra.s	loc_B97C
0000D9E6                            ; ===========================================================================
0000D9E6                            
0000D9E6                            loc_B902:
0000D9E6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D9EA 0200 000F                  		andi.b	#$F,d0
0000D9EE 6600                       		bne.s	loc_B91C
0000D9F0 4A28 0001                  		tst.b	obRender(a0)
0000D9F4 6A00                       		bpl.s	loc_B91C
0000DA00                            
0000DA00                            loc_B91C:
0000DA00 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA06 6400                       		bcc.s	loc_B97C
0000DA08 317C 0000 0032             		move.w	#0,$32(a0)
0000DA0E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA14 317C 0000 0036             		move.w	#0,$36(a0)
0000DA1A 6000                       		bra.s	loc_B97C
0000DA1C                            ; ===========================================================================
0000DA1C                            
0000DA1C                            loc_B938:
0000DA1C 3228 0034                  		move.w	$34(a0),d1
0000DA20 B268 0032                  		cmp.w	$32(a0),d1
0000DA24 6700                       		beq.s	loc_B97C
0000DA26 3028 0012                  		move.w	obVelY(a0),d0
0000DA2A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA30 D168 0032                  		add.w	d0,$32(a0)
0000DA34 B268 0032                  		cmp.w	$32(a0),d1
0000DA38 6200                       		bhi.s	loc_B97C
0000DA3A 3141 0032                  		move.w	d1,$32(a0)
0000DA3E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA44 317C 0001 0036             		move.w	#1,$36(a0)
0000DA4A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DA50 4A28 0001                  		tst.b	obRender(a0)
0000DA54 6A00                       		bpl.s	loc_B97C
0000DA60                            
0000DA60                            loc_B97C:
0000DA60 6000 FF62                  		bra.w	CStom_Restart
0000DA64                            ; ===========================================================================
0000DA64                            
0000DA64                            CStom_Type03:
0000DA64 3038 D008                  		move.w	(v_player+obX).w,d0
0000DA68 9068 0008                  		sub.w	obX(a0),d0
0000DA6C 6400                       		bcc.s	loc_B98C
0000DA6E 4440                       		neg.w	d0
0000DA70                            
0000DA70                            loc_B98C:
0000DA70 0C40 0090                  		cmpi.w	#$90,d0
0000DA74 6400                       		bcc.s	loc_B996
0000DA76 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DA7A                            
0000DA7A                            loc_B996:
0000DA7A 6000 FF48                  		bra.w	CStom_Restart
0000DA7A 6000 FF48                  		bra.w	CStom_Restart
0000DA7E                            		include	"_incObj\45 Sideways Stomper.asm"
0000DA7E                            ; ---------------------------------------------------------------------------
0000DA7E                            ; Object 45 - spiked metal block from beta version (MZ)
0000DA7E                            ; ---------------------------------------------------------------------------
0000DA7E                            
0000DA7E                            SideStomp:
0000DA7E 7000                       		moveq	#0,d0
0000DA80 1028 0024                  		move.b	obRoutine(a0),d0
0000DA84 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DA88 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DA8C                            ; ===========================================================================
0000DA8C 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DA8E 0000                       		dc.w SStom_Solid-SStom_Index
0000DA90 0000                       		dc.w loc_BA8E-SStom_Index
0000DA92 0000                       		dc.w SStom_Display-SStom_Index
0000DA94 0000                       		dc.w SStom_Pole-SStom_Index
0000DA96                            
0000DA96                            		;	routine		frame
0000DA96                            		;		 xpos
0000DA96 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DA99 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DA9C 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DA9F 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DAA2                            
0000DAA2                            ;word_B9BE:	; Note that this indicates three subtypes
0000DAA2 3800                       SStom_Len:	dc.w $3800	; short
0000DAA4 A000                       		dc.w $A000	; long
0000DAA6 5000                       		dc.w $5000	; medium
0000DAA8                            ; ===========================================================================
0000DAA8                            
0000DAA8                            SStom_Main:	; Routine 0
0000DAA8 7000                       		moveq	#0,d0
0000DAAA 1028 0028                  		move.b	obSubtype(a0),d0
0000DAAE D040                       		add.w	d0,d0
0000DAB0 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DAB4 45F9 0000 DA96             		lea	(SStom_Var).l,a2
0000DABA 2248                       		movea.l	a0,a1
0000DABC 7203                       		moveq	#3,d1
0000DABE 6000                       		bra.s	@load
0000DAC0                            
0000DAC0                            	@loop:
0000DAC0 6100 0000                  		bsr.w	FindNextFreeObj
0000DAC4 6600                       		bne.s	@fail
0000DAC6                            
0000DAC6                            	@load:
0000DAC6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DACA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DACE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DAD4 101A                       		move.b	(a2)+,d0
0000DAD6 4880                       		ext.w	d0
0000DAD8 D068 0008                  		add.w	obX(a0),d0
0000DADC 3340 0008                  		move.w	d0,obX(a1)
0000DAE0 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DAE8 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DAEE 137C 0004 0001             		move.b	#4,obRender(a1)
0000DAF4 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DAFA 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DB00 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DB06 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DB0C 3342 0034                  		move.w	d2,$34(a1)
0000DB10 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB16 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DB1A 6600                       		bne.s	@notspikes	; if not, branch
0000DB1C 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DB22                            
0000DB22                            	@notspikes:
0000DB22 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB26 2348 003C                  		move.l	a0,$3C(a1)
0000DB2A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DB2E                            
0000DB2E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DB34                            
0000DB34                            	@fail:
0000DB34 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB3A                            
0000DB3A                            SStom_Solid:	; Routine 2
0000DB3A 3F28 0008                  		move.w	obX(a0),-(sp)
0000DB3E 6100 0000                  		bsr.w	SStom_Move
0000DB42 323C 0017                  		move.w	#$17,d1
0000DB46 343C 0020                  		move.w	#$20,d2
0000DB4A 363C 0020                  		move.w	#$20,d3
0000DB4E 381F                       		move.w	(sp)+,d4
0000DB50 6100 0000                  		bsr.w	SolidObject
0000DB54 6100 0000                  		bsr.w	DisplaySprite
0000DB58 6000 0000                  		bra.w	SStom_ChkDel
0000DB5C                            ; ===========================================================================
0000DB5C                            
0000DB5C                            SStom_Pole:	; Routine 8
0000DB5C 2268 003C                  		movea.l	$3C(a0),a1
0000DB60 1029 0032                  		move.b	$32(a1),d0
0000DB64 0600 0010                  		addi.b	#$10,d0
0000DB68 EA08                       		lsr.b	#5,d0
0000DB6A 5600                       		addq.b	#3,d0
0000DB6C 1140 001A                  		move.b	d0,obFrame(a0)
0000DB70                            
0000DB70                            loc_BA8E:	; Routine 4
0000DB70 2268 003C                  		movea.l	$3C(a0),a1
0000DB74 7000                       		moveq	#0,d0
0000DB76 1029 0032                  		move.b	$32(a1),d0
0000DB7A 4440                       		neg.w	d0
0000DB7C D068 0030                  		add.w	$30(a0),d0
0000DB80 3140 0008                  		move.w	d0,obX(a0)
0000DB84                            
0000DB84                            SStom_Display:	; Routine 6
0000DB84 6100 0000                  		bsr.w	DisplaySprite
0000DB88                            
0000DB88                            SStom_ChkDel:
0000DBA6 4E75                       		rts	
0000DBA8                            
0000DBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA8                            
0000DBA8                            
0000DBA8                            SStom_Move:
0000DBA8 7000                       		moveq	#0,d0
0000DBAA 1028 0028                  		move.b	obSubtype(a0),d0
0000DBAE D040                       		add.w	d0,d0
0000DBB0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DBB4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DBB8                            ; End of function SStom_Move
0000DBB8                            
0000DBB8                            ; ===========================================================================
0000DBB8                            		; This indicates only two subtypes... that do the same thing
0000DBB8                            		; Compare to SStom_Len. This breaks subtype 02
0000DBB8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DBBA 0000                       		dc.w loc_BADA-off_BAD6
0000DBBC                            ; ===========================================================================
0000DBBC                            
0000DBBC                            loc_BADA:
0000DBBC 4A68 0036                  		tst.w	$36(a0)
0000DBC0 6700                       		beq.s	loc_BB08
0000DBC2 4A68 0038                  		tst.w	$38(a0)
0000DBC6 6700                       		beq.s	loc_BAEC
0000DBC8 5368 0038                  		subq.w	#1,$38(a0)
0000DBCC 6000                       		bra.s	loc_BB3C
0000DBCE                            ; ===========================================================================
0000DBCE                            
0000DBCE                            loc_BAEC:
0000DBCE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DBD4 6400                       		bcc.s	loc_BB3C
0000DBD6 317C 0000 0032             		move.w	#0,$32(a0)
0000DBDC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DBE2 317C 0000 0036             		move.w	#0,$36(a0)
0000DBE8 6000                       		bra.s	loc_BB3C
0000DBEA                            ; ===========================================================================
0000DBEA                            
0000DBEA                            loc_BB08:
0000DBEA 3228 0034                  		move.w	$34(a0),d1
0000DBEE B268 0032                  		cmp.w	$32(a0),d1
0000DBF2 6700                       		beq.s	loc_BB3C
0000DBF4 3028 0010                  		move.w	obVelX(a0),d0
0000DBF8 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DBFE D168 0032                  		add.w	d0,$32(a0)
0000DC02 B268 0032                  		cmp.w	$32(a0),d1
0000DC06 6200                       		bhi.s	loc_BB3C
0000DC08 3141 0032                  		move.w	d1,$32(a0)
0000DC0C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC12 317C 0001 0036             		move.w	#1,$36(a0)
0000DC18 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC1E                            
0000DC1E                            loc_BB3C:
0000DC1E 7000                       		moveq	#0,d0
0000DC20 1028 0032                  		move.b	$32(a0),d0
0000DC24 4440                       		neg.w	d0
0000DC26 D068 0030                  		add.w	$30(a0),d0
0000DC2A 3140 0008                  		move.w	d0,obX(a0)
0000DC2E 4E75                       		rts	
0000DC2E 4E75                       		rts	
0000DC30                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DC30                            ; ---------------------------------------------------------------------------
0000DC30                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DC30                            ; ---------------------------------------------------------------------------
0000DC30                            Map_CStom_internal:
0000DC30 0000                       		dc.w @wideblock-Map_CStom_internal
0000DC32 0000                       		dc.w @spikes-Map_CStom_internal
0000DC34 0000                       		dc.w @ceiling-Map_CStom_internal
0000DC36 0000                       		dc.w @chain1-Map_CStom_internal
0000DC38 0000                       		dc.w @chain2-Map_CStom_internal
0000DC3A 0000                       		dc.w @chain3-Map_CStom_internal
0000DC3C 0000                       		dc.w @chain4-Map_CStom_internal
0000DC3E 0000                       		dc.w @chain5-Map_CStom_internal
0000DC40 0000                       		dc.w @chain5-Map_CStom_internal
0000DC42 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DC44 0000                       		dc.w @smallblock-Map_CStom_internal
0000DC46 05                         @wideblock:	dc.b 5
0000DC47 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DC4C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DC51 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DC56 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DC5B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DC60 05                         @spikes:	dc.b 5
0000DC61 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DC66 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DC6B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DC70 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DC75 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DC7A 01                         @ceiling:	dc.b 1
0000DC7B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DC80 02                         @chain1:	dc.b 2
0000DC81 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC86 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC8B 04                         @chain2:	dc.b 4
0000DC8C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC91 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC96 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC9B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCA0 06                         @chain3:	dc.b 6
0000DCA1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCA6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCAB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCB0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCB5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCBA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCBF 08                         @chain4:	dc.b 8
0000DCC0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DCC5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DCCA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCCF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCD4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCD9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCDE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCE3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCE8 0A                         @chain5:	dc.b $A
0000DCE9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DCEE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DCF3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DCF8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DCFD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD02 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD07 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD0C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD11 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD16 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD1B 05                         @mediumblock:	dc.b 5
0000DD1C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DD21 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DD26 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DD2B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DD30 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD35 01                         @smallblock:	dc.b 1
0000DD36 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DD3C 00                         		even
0000DD3C 00                         		even
0000DD3C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DD3C                            ; ---------------------------------------------------------------------------
0000DD3C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DD3C                            ; ---------------------------------------------------------------------------
0000DD3C                            Map_SStom_internal:
0000DD3C 0000                       		dc.w @block-Map_SStom_internal
0000DD3E 0000                       		dc.w @spikes-Map_SStom_internal
0000DD40 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DD42 0000                       		dc.w @pole1-Map_SStom_internal
0000DD44 0000                       		dc.w @pole2-Map_SStom_internal
0000DD46 0000                       		dc.w @pole3-Map_SStom_internal
0000DD48 0000                       		dc.w @pole4-Map_SStom_internal
0000DD4A 0000                       		dc.w @pole5-Map_SStom_internal
0000DD4C 0000                       		dc.w @pole5-Map_SStom_internal
0000DD4E 03                         @block:		dc.b 3
0000DD4F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DD54 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DD59 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DD5E 03                         @spikes:	dc.b 3
0000DD5F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DD64 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DD69 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DD6E 01                         @wallbracket:	dc.b 1
0000DD6F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DD74 02                         @pole1:		dc.b 2
0000DD75 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DD7A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD7F 04                         @pole2:		dc.b 4
0000DD80 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD85 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD8A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD8F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD94 06                         @pole3:		dc.b 6
0000DD95 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD9A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD9F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDA4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDA9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DDAE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDB3 08                         @pole4:		dc.b 8
0000DDB4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDB9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDBE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDC3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDC8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DDCD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDD2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DDD7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DDDC 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DDDD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDE2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDE7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDEC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDF1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DDF6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDFB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE00 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE05 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DE0A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DE0F                            		; @pole6 should be here, but it isn't...
0000DE10 00                         		even
0000DE10 00                         		even
0000DE10                            
0000DE10                            		include	"_incObj\32 Button.asm"
0000DE10                            ; ---------------------------------------------------------------------------
0000DE10                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DE10                            ; ---------------------------------------------------------------------------
0000DE10                            
0000DE10                            Button:
0000DE10 7000                       		moveq	#0,d0
0000DE12 1028 0024                  		move.b	obRoutine(a0),d0
0000DE16 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DE1A 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DE1E                            ; ===========================================================================
0000DE1E 0000                       But_Index:	dc.w But_Main-But_Index
0000DE20 0000                       		dc.w But_Pressed-But_Index
0000DE22                            ; ===========================================================================
0000DE22                            
0000DE22                            But_Main:	; Routine 0
0000DE22 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DE26 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DE2E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DE34 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DE3A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DE3C                            
0000DE3C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DE42                            
0000DE42                            	But_IsMZ:
0000DE42 117C 0004 0001             		move.b	#4,obRender(a0)
0000DE48 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DE4E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DE54 5668 000C                  		addq.w	#3,obY(a0)
0000DE58                            
0000DE58                            But_Pressed:	; Routine 2
0000DE58 4A28 0001                  		tst.b	obRender(a0)
0000DE5C 6A00                       		bpl.s	But_Display
0000DE5E 323C 001B                  		move.w	#$1B,d1
0000DE62 343C 0005                  		move.w	#5,d2
0000DE66 363C 0005                  		move.w	#5,d3
0000DE6A 3828 0008                  		move.w	obX(a0),d4
0000DE6E 6100 0000                  		bsr.w	SolidObject
0000DE72 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DE78 1028 0028                  		move.b	obSubtype(a0),d0
0000DE7C 0240 000F                  		andi.w	#$F,d0
0000DE80 47F8 F7E0                  		lea	(f_switch).w,a3
0000DE84 47F3 0000                  		lea	(a3,d0.w),a3
0000DE88 7600                       		moveq	#0,d3
0000DE8A 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DE90 6700                       		beq.s	loc_BDB2
0000DE92 7607                       		moveq	#7,d3
0000DE94                            
0000DE94                            loc_BDB2:
0000DE94 4A28 0028                  		tst.b	obSubtype(a0)
0000DE98 6A00                       		bpl.s	loc_BDBE
0000DE9A 6100 0000                  		bsr.w	But_MZBlock
0000DE9E 6600                       		bne.s	loc_BDC8
0000DEA0                            
0000DEA0                            loc_BDBE:
0000DEA0 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DEA4 6600                       		bne.s	loc_BDC8
0000DEA6 0793                       		bclr	d3,(a3)
0000DEA8 6000                       		bra.s	loc_BDDE
0000DEAA                            ; ===========================================================================
0000DEAA                            
0000DEAA                            loc_BDC8:
0000DEAA 4A13                       		tst.b	(a3)
0000DEAC 6600                       		bne.s	loc_BDD6
0000DEB8                            
0000DEB8                            loc_BDD6:
0000DEB8 07D3                       		bset	d3,(a3)
0000DEBA 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DEC0                            
0000DEC0                            loc_BDDE:
0000DEC0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DEC6 6700                       		beq.s	But_Display
0000DEC8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DECC 6A00                       		bpl.s	But_Display
0000DECE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DED4 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DEDA                            
0000DEDA                            But_Display:
0000DEDA 6100 0000                  		bsr.w	DisplaySprite
0000DEFC 4E75                       		rts	
0000DEFE                            ; ===========================================================================
0000DEFE                            
0000DEFE                            But_Delete:
0000DEFE 6100 0000                  		bsr.w	DeleteObject
0000DF02 4E75                       		rts	
0000DF04                            
0000DF04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF04                            
0000DF04                            
0000DF04                            But_MZBlock:
0000DF04 3F03                       		move.w	d3,-(sp)
0000DF06 3428 0008                  		move.w	obX(a0),d2
0000DF0A 3628 000C                  		move.w	obY(a0),d3
0000DF0E 0442 0010                  		subi.w	#$10,d2
0000DF12 5143                       		subq.w	#8,d3
0000DF14 383C 0020                  		move.w	#$20,d4
0000DF18 3A3C 0010                  		move.w	#$10,d5
0000DF1C 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DF20 3C3C 005F                  		move.w	#$5F,d6
0000DF24                            
0000DF24                            But_MZLoop:
0000DF24 4A29 0001                  		tst.b	obRender(a1)
0000DF28 6A00                       		bpl.s	loc_BE4E
0000DF2A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DF2E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DF30                            
0000DF30                            loc_BE4E:
0000DF30 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DF34 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DF38                            
0000DF38 361F                       		move.w	(sp)+,d3
0000DF3A 7000                       		moveq	#0,d0
0000DF3C                            
0000DF3C                            locret_BE5A:
0000DF3C 4E75                       		rts	
0000DF3E                            ; ===========================================================================
0000DF3E 1010                       But_MZData:	dc.b $10, $10
0000DF40                            ; ===========================================================================
0000DF40                            
0000DF40                            loc_BE5E:
0000DF40 7001                       		moveq	#1,d0
0000DF42 0240 003F                  		andi.w	#$3F,d0
0000DF46 D040                       		add.w	d0,d0
0000DF48 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DF4C 121A                       		move.b	(a2)+,d1
0000DF4E 4881                       		ext.w	d1
0000DF50 3029 0008                  		move.w	obX(a1),d0
0000DF54 9041                       		sub.w	d1,d0
0000DF56 9042                       		sub.w	d2,d0
0000DF58 6400                       		bcc.s	loc_BE80
0000DF5A D241                       		add.w	d1,d1
0000DF5C D041                       		add.w	d1,d0
0000DF5E 6500                       		bcs.s	loc_BE84
0000DF60 60CE                       		bra.s	loc_BE4E
0000DF62                            ; ===========================================================================
0000DF62                            
0000DF62                            loc_BE80:
0000DF62 B044                       		cmp.w	d4,d0
0000DF64 62CA                       		bhi.s	loc_BE4E
0000DF66                            
0000DF66                            loc_BE84:
0000DF66 121A                       		move.b	(a2)+,d1
0000DF68 4881                       		ext.w	d1
0000DF6A 3029 000C                  		move.w	obY(a1),d0
0000DF6E 9041                       		sub.w	d1,d0
0000DF70 9043                       		sub.w	d3,d0
0000DF72 6400                       		bcc.s	loc_BE9A
0000DF74 D241                       		add.w	d1,d1
0000DF76 D041                       		add.w	d1,d0
0000DF78 6500                       		bcs.s	loc_BE9E
0000DF7A 60B4                       		bra.s	loc_BE4E
0000DF7C                            ; ===========================================================================
0000DF7C                            
0000DF7C                            loc_BE9A:
0000DF7C B045                       		cmp.w	d5,d0
0000DF7E 62B0                       		bhi.s	loc_BE4E
0000DF80                            
0000DF80                            loc_BE9E:
0000DF80 361F                       		move.w	(sp)+,d3
0000DF82 7001                       		moveq	#1,d0
0000DF84 4E75                       		rts	
0000DF86                            ; End of function But_MZBlock
0000DF86                            ; End of function But_MZBlock
0000DF86                            Map_But:	include	"_maps\Button.asm"
0000DF86                            ; ---------------------------------------------------------------------------
0000DF86                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DF86                            ; ---------------------------------------------------------------------------
0000DF86                            Map_But_internal:
0000DF86 0000                       		dc.w byte_BEAC-Map_But_internal
0000DF88 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF8A 0000                       		dc.w byte_BEC2-Map_But_internal
0000DF8C 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF8E 02                         byte_BEAC:	dc.b 2
0000DF8F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DF94 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DF99 02                         byte_BEB7:	dc.b 2
0000DF9A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DF9F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DFA4 02                         byte_BEC2:	dc.b 2
0000DFA5 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DFAA F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DFAF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DFB4                            		even
0000DFB4                            		even
0000DFB4                            
0000DFB4                            		include	"_incObj\33 Pushable Blocks.asm"
0000DFB4                            ; ---------------------------------------------------------------------------
0000DFB4                            ; Object 33 - pushable blocks (MZ, LZ)
0000DFB4                            ; ---------------------------------------------------------------------------
0000DFB4                            
0000DFB4                            PushBlock:
0000DFB4 7000                       		moveq	#0,d0
0000DFB6 1028 0024                  		move.b	obRoutine(a0),d0
0000DFBA 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DFBE 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DFC2                            ; ===========================================================================
0000DFC2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DFC4 0000                       		dc.w loc_BF6E-PushB_Index
0000DFC6 0000                       		dc.w loc_C02C-PushB_Index
0000DFC8                            
0000DFC8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DFCA 4001                       		dc.b $40, 1
0000DFCC                            ; ===========================================================================
0000DFCC                            
0000DFCC                            PushB_Main:	; Routine 0
0000DFCC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DFD0 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DFD6 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DFDC 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DFE4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DFEA 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DFF0 6600                       		bne.s	@notLZ
0000DFF2 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DFF8                            
0000DFF8                            	@notLZ:
0000DFF8 117C 0004 0001             		move.b	#4,obRender(a0)
0000DFFE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E004 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E00A 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E010 7000                       		moveq	#0,d0
0000E012 1028 0028                  		move.b	obSubtype(a0),d0
0000E016 D040                       		add.w	d0,d0
0000E018 0240 000E                  		andi.w	#$E,d0
0000E01C 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E020 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E024 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E028 4A28 0028                  		tst.b	obSubtype(a0)
0000E02C 6700                       		beq.s	@chkgone
0000E02E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E034                            
0000E034                            	@chkgone:
0000E034 45F8 FC00                  		lea	(v_objstate).w,a2
0000E038 7000                       		moveq	#0,d0
0000E03A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E03E 6700                       		beq.s	loc_BF6E
0000E040 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E046 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E04C 6600 0000                  		bne.w	DeleteObject
0000E050                            
0000E050                            loc_BF6E:	; Routine 2
0000E050 4A28 0032                  		tst.b	$32(a0)
0000E054 6600 0000                  		bne.w	loc_C046
0000E058 7200                       		moveq	#0,d1
0000E05A 1228 0014                  		move.b	obActWid(a0),d1
0000E05E 0641 000B                  		addi.w	#$B,d1
0000E062 343C 0010                  		move.w	#$10,d2
0000E066 363C 0011                  		move.w	#$11,d3
0000E06A 3828 0008                  		move.w	obX(a0),d4
0000E06E 6100 0000                  		bsr.w	loc_C186
0000E072 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E078 6600                       		bne.s	loc_BFC6	; if not, branch
0000E07A 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E080 3028 0008                  		move.w	obX(a0),d0
0000E084 0C40 0A20                  		cmpi.w	#$A20,d0
0000E088 6500                       		bcs.s	loc_BFC6
0000E08A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E08E 6400                       		bcc.s	loc_BFC6
0000E090 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E094 0440 001C                  		subi.w	#$1C,d0
0000E098 3140 000C                  		move.w	d0,obY(a0)
0000E09C 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E0A2 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E0A8                            
0000E0A8                            	loc_BFC6:
0000E0C4 6000 0000                  		bra.w	DisplaySprite
0000E0C8                            ; ===========================================================================
0000E0C8                            
0000E0C8                            loc_ppppp:
0000E0E4 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E0EA 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E0F0 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E0F6 6000                       		bra.s	loc_C02C
0000E0F8                            ; ===========================================================================
0000E0F8                            
0000E0F8                            loc_C016:
0000E0F8 45F8 FC00                  		lea	(v_objstate).w,a2
0000E0FC 7000                       		moveq	#0,d0
0000E0FE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E102 6700                       		beq.s	loc_C028
0000E104 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E10A                            
0000E10A                            loc_C028:
0000E10A 6000 0000                  		bra.w	DeleteObject
0000E10E                            ; ===========================================================================
0000E10E                            
0000E10E                            loc_C02C:	; Routine 4
0000E10E 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E112 6700                       		beq.s	locret_C044
0000E114 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E11A 4228 0032                  		clr.b	$32(a0)
0000E11E 4268 0010                  		clr.w	obVelX(a0)
0000E122 4268 0012                  		clr.w	obVelY(a0)
0000E126                            
0000E126                            locret_C044:
0000E126 4E75                       		rts	
0000E128                            ; ===========================================================================
0000E128                            
0000E128                            loc_C046:
0000E128 3F28 0008                  		move.w	obX(a0),-(sp)
0000E12C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E132 6400                       		bcc.s	loc_C056
0000E134 6100 0000                  		bsr.w	SpeedToPos
0000E138                            
0000E138                            loc_C056:
0000E138 0828 0001 0022             		btst	#1,obStatus(a0)
0000E13E 6700                       		beq.s	loc_C0A0
0000E140 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E146 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E14C 4A41                       		tst.w	d1
0000E14E 6A00 0000                  		bpl.w	loc_C09E
0000E152 D368 000C                  		add.w	d1,obY(a0)
0000E156 4268 0012                  		clr.w	obVelY(a0)
0000E15A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E160 3011                       		move.w	(a1),d0
0000E162 0240 03FF                  		andi.w	#$3FF,d0
0000E166 0C40 016A                  		cmpi.w	#$16A,d0
0000E16A 6500                       		bcs.s	loc_C09E
0000E16C 3028 0030                  		move.w	$30(a0),d0
0000E170 E640                       		asr.w	#3,d0
0000E172 3140 0010                  		move.w	d0,obVelX(a0)
0000E176 117C 0001 0032             		move.b	#1,$32(a0)
0000E17C 4268 000E                  		clr.w	$E(a0)
0000E180                            
0000E180                            loc_C09E:
0000E180 6000                       		bra.s	loc_C0E6
0000E182                            ; ===========================================================================
0000E182                            
0000E182                            loc_C0A0:
0000E182 4A68 0010                  		tst.w	obVelX(a0)
0000E186 6700 0000                  		beq.w	loc_C0D6
0000E18A 6B00                       		bmi.s	loc_C0BC
0000E18C 7600                       		moveq	#0,d3
0000E18E 1628 0014                  		move.b	obActWid(a0),d3
0000E192 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E198 4A41                       		tst.w	d1		; has block touched a wall?
0000E19A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E19C 6000                       		bra.s	loc_C0E6
0000E19E                            ; ===========================================================================
0000E19E                            
0000E19E                            loc_C0BC:
0000E19E 7600                       		moveq	#0,d3
0000E1A0 1628 0014                  		move.b	obActWid(a0),d3
0000E1A4 4643                       		not.w	d3
0000E1A6 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E1AC 4A41                       		tst.w	d1		; has block touched a wall?
0000E1AE 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E1B0 6000                       		bra.s	loc_C0E6
0000E1B2                            ; ===========================================================================
0000E1B2                            
0000E1B2                            PushB_StopPush:
0000E1B2 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E1B6 6000                       		bra.s	loc_C0E6
0000E1B8                            ; ===========================================================================
0000E1B8                            
0000E1B8                            loc_C0D6:
0000E1B8 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E1C0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E1C6 6400                       		bcc.s	loc_C104
0000E1C8                            
0000E1C8                            loc_C0E6:
0000E1C8 7200                       		moveq	#0,d1
0000E1CA 1228 0014                  		move.b	obActWid(a0),d1
0000E1CE 0641 000B                  		addi.w	#$B,d1
0000E1D2 343C 0010                  		move.w	#$10,d2
0000E1D6 363C 0011                  		move.w	#$11,d3
0000E1DA 381F                       		move.w	(sp)+,d4
0000E1DC 6100 0000                  		bsr.w	loc_C186
0000E1E0 6100                       		bsr.s	PushB_ChkLava
0000E1E2 6000 FEC4                  		bra.w	loc_BFC6
0000E1E6                            ; ===========================================================================
0000E1E6                            
0000E1E6                            loc_C104:
0000E1E6 381F                       		move.w	(sp)+,d4
0000E1E8 43F8 D000                  		lea	(v_player).w,a1
0000E1EC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E1F2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E1F8 6000 FECE                  		bra.w	loc_ppppp
0000E1FC                            ; ===========================================================================
0000E1FC                            
0000E1FC                            PushB_ChkLava:
0000E1FC 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E202 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E204 343C FFE0                  		move.w	#-$20,d2
0000E208 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E20E 6700                       		beq.s	PushB_LoadLava
0000E210 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E216 6700                       		beq.s	PushB_LoadLava
0000E218 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E21E 6700                       		beq.s	PushB_LoadLava
0000E220 4E75                       		rts	
0000E222                            ; ===========================================================================
0000E222                            
0000E222                            PushB_ChkLava2:
0000E222 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E228 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E22A 343C 0020                  		move.w	#$20,d2
0000E22E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E234 6700                       		beq.s	PushB_LoadLava
0000E236 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E23C 6700                       		beq.s	PushB_LoadLava
0000E23E                            
0000E23E                            PushB_NoLava:
0000E23E 4E75                       		rts	
0000E240                            ; ===========================================================================
0000E240                            
0000E240                            PushB_LoadLava:
0000E240 6100 0000                  		bsr.w	FindFreeObj
0000E244 6600                       		bne.s	locret_C184
0000E246 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E24A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E250 D569 0008                  		add.w	d2,obX(a1)
0000E254 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E25A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E260 2348 003C                  		move.l	a0,$3C(a1)
0000E264                            
0000E264                            locret_C184:
0000E264 4E75                       		rts	
0000E266                            ; ===========================================================================
0000E266                            
0000E266                            loc_C186:
0000E266 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E26A 6700 0000                  		beq.w	loc_C218
0000E26E 5500                       		subq.b	#2,d0
0000E270 6600                       		bne.s	loc_C1AA
0000E272 6100 AD52                  		bsr.w	ExitPlatform
0000E276 0829 0003 0022             		btst	#3,obStatus(a1)
0000E27C 6600                       		bne.s	loc_C1A4
0000E27E 4228 0025                  		clr.b	ob2ndRout(a0)
0000E282 4E75                       		rts	
0000E284                            ; ===========================================================================
0000E284                            
0000E284                            loc_C1A4:
0000E284 3404                       		move.w	d4,d2
0000E286 6000 B29C                  		bra.w	MvSonicOnPtfm
0000E28A                            ; ===========================================================================
0000E28A                            
0000E28A                            loc_C1AA:
0000E28A 5500                       		subq.b	#2,d0
0000E28C 6600                       		bne.s	loc_C1F2
0000E28E 6100 0000                  		bsr.w	SpeedToPos
0000E292 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E298 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E29E 4A41                       		tst.w	d1
0000E2A0 6A00 0000                  		bpl.w	locret_C1F0
0000E2A4 D368 000C                  		add.w	d1,obY(a0)
0000E2A8 4268 0012                  		clr.w	obVelY(a0)
0000E2AC 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2B0 3011                       		move.w	(a1),d0
0000E2B2 0240 03FF                  		andi.w	#$3FF,d0
0000E2B6 0C40 016A                  		cmpi.w	#$16A,d0
0000E2BA 6500                       		bcs.s	locret_C1F0
0000E2BC 3028 0030                  		move.w	$30(a0),d0
0000E2C0 E640                       		asr.w	#3,d0
0000E2C2 3140 0010                  		move.w	d0,obVelX(a0)
0000E2C6 117C 0001 0032             		move.b	#1,$32(a0)
0000E2CC 4268 000E                  		clr.w	obY+2(a0)
0000E2D0                            
0000E2D0                            locret_C1F0:
0000E2D0 4E75                       		rts	
0000E2D2                            ; ===========================================================================
0000E2D2                            
0000E2D2                            loc_C1F2:
0000E2D2 6100 0000                  		bsr.w	SpeedToPos
0000E2D6 3028 0008                  		move.w	obX(a0),d0
0000E2DA 0240 000C                  		andi.w	#$C,d0
0000E2DE 6600 0000                  		bne.w	locret_C2E4
0000E2E2 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E2E8 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E2EE 4268 0010                  		clr.w	obVelX(a0)
0000E2F2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E2F6 4E75                       		rts	
0000E2F8                            ; ===========================================================================
0000E2F8                            
0000E2F8                            loc_C218:
0000E2F8 6100 0000                  		bsr.w	Solid_ChkEnter
0000E2FC 4A44                       		tst.w	d4
0000E2FE 6700 0000                  		beq.w	locret_C2E4
0000E302 6B00 0000                  		bmi.w	locret_C2E4
0000E306 4A28 0032                  		tst.b	$32(a0)
0000E30A 6700                       		beq.s	loc_C230
0000E30C 6000 0000                  		bra.w	locret_C2E4
0000E310                            ; ===========================================================================
0000E310                            
0000E310                            loc_C230:
0000E310 4A40                       		tst.w	d0
0000E312 6700 0000                  		beq.w	locret_C2E4
0000E316 6B00                       		bmi.s	loc_C268
0000E318 0829 0000 0022             		btst	#0,obStatus(a1)
0000E31E 6600 0000                  		bne.w	locret_C2E4
0000E322 3F00                       		move.w	d0,-(sp)
0000E324 7600                       		moveq	#0,d3
0000E326 1628 0014                  		move.b	obActWid(a0),d3
0000E32A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E330 301F                       		move.w	(sp)+,d0
0000E332 4A41                       		tst.w	d1
0000E334 6B00 0000                  		bmi.w	locret_C2E4
0000E338 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E340 7001                       		moveq	#1,d0
0000E342 323C 0040                  		move.w	#$40,d1
0000E346 6000                       		bra.s	loc_C294
0000E348                            ; ===========================================================================
0000E348                            
0000E348                            loc_C268:
0000E348 0829 0000 0022             		btst	#0,obStatus(a1)
0000E34E 6700                       		beq.s	locret_C2E4
0000E350 3F00                       		move.w	d0,-(sp)
0000E352 7600                       		moveq	#0,d3
0000E354 1628 0014                  		move.b	obActWid(a0),d3
0000E358 4643                       		not.w	d3
0000E35A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E360 301F                       		move.w	(sp)+,d0
0000E362 4A41                       		tst.w	d1
0000E364 6B00                       		bmi.s	locret_C2E4
0000E366 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E36E 70FF                       		moveq	#-1,d0
0000E370 323C FFC0                  		move.w	#-$40,d1
0000E374                            
0000E374                            loc_C294:
0000E374 43F8 D000                  		lea	(v_player).w,a1
0000E378 D169 0008                  		add.w	d0,obX(a1)
0000E37C 3341 0020                  		move.w	d1,obInertia(a1)
0000E380 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E386 3F00                       		move.w	d0,-(sp)
0000E392 301F                       		move.w	(sp)+,d0
0000E394 4A28 0028                  		tst.b	obSubtype(a0)
0000E398 6B00                       		bmi.s	locret_C2E4
0000E39A 3F00                       		move.w	d0,-(sp)
0000E39C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E3A2 301F                       		move.w	(sp)+,d0
0000E3A4 0C41 0004                  		cmpi.w	#4,d1
0000E3A8 6F00                       		ble.s	loc_C2E0
0000E3AA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E3B0 4A40                       		tst.w	d0
0000E3B2 6A00                       		bpl.s	loc_C2D8
0000E3B4 4468 0010                  		neg.w	obVelX(a0)
0000E3B8                            
0000E3B8                            loc_C2D8:
0000E3B8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E3BE 6000                       		bra.s	locret_C2E4
0000E3C0                            ; ===========================================================================
0000E3C0                            
0000E3C0                            loc_C2E0:
0000E3C0 D368 000C                  		add.w	d1,obY(a0)
0000E3C4                            
0000E3C4                            locret_C2E4:
0000E3C4 4E75                       		rts	
0000E3C4 4E75                       		rts	
0000E3C6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            Map_Push_internal:
0000E3C6 0000                       		dc.w @single-Map_Push_internal
0000E3C8 0000                       		dc.w @four-Map_Push_internal
0000E3CA 01                         @single:	dc.b 1
0000E3CB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E3D0 04                         @four:		dc.b 4
0000E3D1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E3D6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E3DB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E3E0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E3E6 00                         		even
0000E3E6 00                         		even
0000E3E6                            
0000E3E6                            		include	"_incObj\34 Title Cards.asm"
0000E3E6                            ; ---------------------------------------------------------------------------
0000E3E6                            ; Object 34 - zone title cards
0000E3E6                            ; ---------------------------------------------------------------------------
0000E3E6                            
0000E3E6                            TitleCard:
0000E3E6 7000                       		moveq	#0,d0
0000E3E8 1028 0024                  		move.b	obRoutine(a0),d0
0000E3EC 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E3F0 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E3F4                            ; ===========================================================================
0000E3F4 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E3F6 0000                       		dc.w Card_ChkPos-Card_Index
0000E3F8 0000                       		dc.w Card_Wait-Card_Index
0000E3FA 0000                       		dc.w Card_Wait-Card_Index
0000E3FC                            
0000E3FC =00000030                  card_mainX:	equ $30		; position for card to display on
0000E3FC =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E3FC                            ; ===========================================================================
0000E3FC                            
0000E3FC                            Card_CheckSBZ3:	; Routine 0
0000E3FC 2248                       		movea.l	a0,a1
0000E3FE 7000                       		moveq	#0,d0
0000E400 1038 FE10                  		move.b	(v_zone).w,d0
0000E404 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E40A 6600                       		bne.s	Card_CheckFZ
0000E40C 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E40E                            
0000E40E                            	Card_CheckFZ:
0000E40E 3400                       		move.w	d0,d2
0000E410 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E416 6600                       		bne.s	Card_LoadConfig
0000E418 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E41A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E41C                            
0000E41C                            	Card_LoadConfig:
0000E41C 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E422 E948                       		lsl.w	#4,d0
0000E424 D6C0                       		adda.w	d0,a3
0000E426 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E42C 7203                       		moveq	#3,d1
0000E42E                            
0000E42E                            Card_Loop:
0000E42E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E432 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E436 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E43A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E43E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E442 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E446 101A                       		move.b	(a2)+,d0
0000E448 6600                       		bne.s	Card_ActNumber
0000E44A 1002                       		move.b	d2,d0
0000E44C                            
0000E44C                            	Card_ActNumber:
0000E44C 0C00 0007                  		cmpi.b	#7,d0
0000E450 6600                       		bne.s	Card_MakeSprite
0000E452 D038 FE11                  		add.b	(v_act).w,d0
0000E456 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E45C 6600                       		bne.s	Card_MakeSprite
0000E45E 5300                       		subq.b	#1,d0
0000E460                            
0000E460                            	Card_MakeSprite:
0000E460 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E464 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E46C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E472 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E478 137C 0000 0001             		move.b	#0,obRender(a1)
0000E47E 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E484 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E48A 43E9 0040                  		lea	$40(a1),a1	; next object
0000E48E 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E492                            
0000E492                            Card_ChkPos:	; Routine 2
0000E492 7210                       		moveq	#$10,d1		; set horizontal speed
0000E494 3028 0030                  		move.w	card_mainX(a0),d0
0000E498 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E49C 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E49E 6C00                       		bge.s	Card_Move
0000E4A0 4441                       		neg.w	d1
0000E4A2                            
0000E4A2                            Card_Move:
0000E4A2 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E4A6                            
0000E4A6                            Card_NoMove:
0000E4A6 3028 0008                  		move.w	obX(a0),d0
0000E4AA 6B00                       		bmi.s	locret_C3D8
0000E4AC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E4B0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E4B2 6000 0000                  		bra.w	DisplaySprite
0000E4B6                            ; ===========================================================================
0000E4B6                            
0000E4B6                            locret_C3D8:
0000E4B6 4E75                       		rts	
0000E4B8                            ; ===========================================================================
0000E4B8                            
0000E4B8                            Card_Wait:	; Routine 4/6
0000E4B8 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E4BC 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E4BE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E4C2 6000 0000                  		bra.w	DisplaySprite
0000E4C6                            ; ===========================================================================
0000E4C6                            
0000E4C6                            Card_ChkPos2:
0000E4C6 4A28 0001                  		tst.b	obRender(a0)
0000E4CA 6A00                       		bpl.s	Card_ChangeArt
0000E4CC 7220                       		moveq	#$20,d1
0000E4CE 3028 0032                  		move.w	card_finalX(a0),d0
0000E4D2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E4D6 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E4D8 6C00                       		bge.s	Card_Move2
0000E4DA 4441                       		neg.w	d1
0000E4DC                            
0000E4DC                            Card_Move2:
0000E4DC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E4E0 3028 0008                  		move.w	obX(a0),d0
0000E4E4 6B00                       		bmi.s	locret_C412
0000E4E6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E4EA 6400                       		bcc.s	locret_C412	; if yes, branch
0000E4EC 6000 0000                  		bra.w	DisplaySprite
0000E4F0                            ; ===========================================================================
0000E4F0                            
0000E4F0                            locret_C412:
0000E4F0 4E75                       		rts	
0000E4F2                            ; ===========================================================================
0000E4F2                            
0000E4F2                            Card_ChangeArt:
0000E4F2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E4F8 6600                       		bne.s	Card_Delete
0000E4FA 7000                       		moveq	#plcid_Explode,d0
0000E4FC 4EB9 0000 1466             		jsr	(AddPLC).l	; load explosion patterns
0000E502 7000                       		moveq	#0,d0
0000E504 1038 FE10                  		move.b	(v_zone).w,d0
0000E508 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E50C 4EB9 0000 1466             		jsr	(AddPLC).l	; load animal patterns
0000E512                            
0000E512                            Card_Delete:
0000E512 6000 0000                  		bra.w	DeleteObject
0000E516                            ; ===========================================================================
0000E516 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E518 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E51A 00E4                       		dc.w $E4
0000E51C 0206                       		dc.b 2,	6
0000E51E 00EA                       		dc.w $EA
0000E520 0207                       		dc.b 2,	7
0000E522 00E0                       		dc.w $E0
0000E524 020A                       		dc.b 2,	$A
0000E526                            ; ---------------------------------------------------------------------------
0000E526                            ; Title	card configuration data
0000E526                            ; Format:
0000E526                            ; 4 bytes per item (YYYY XXXX)
0000E526                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E526                            ; ---------------------------------------------------------------------------
0000E526 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E536 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E546 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E556 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E566 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E576 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E586 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E596                            ; ===========================================================================
0000E596                            ; ===========================================================================
0000E596                            		include	"_incObj\39 Game Over.asm"
0000E596                            ; ---------------------------------------------------------------------------
0000E596                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E596                            ; ---------------------------------------------------------------------------
0000E596                            
0000E596                            GameOverCard:
0000E596 7000                       		moveq	#0,d0
0000E598 1028 0024                  		move.b	obRoutine(a0),d0
0000E59C 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E5A0 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E5A4                            ; ===========================================================================
0000E5A4 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E5A6 0000                       		dc.w Over_Move-Over_Index
0000E5A8 0000                       		dc.w Over_Wait-Over_Index
0000E5AA                            ; ===========================================================================
0000E5AA                            
0000E5AA                            Over_ChkPLC:	; Routine 0
0000E5AA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E5AE 6700                       		beq.s	Over_Main	; if yes, branch
0000E5B0 4E75                       		rts	
0000E5B2                            ; ===========================================================================
0000E5B2                            
0000E5B2                            Over_Main:
0000E5B2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5B6 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E5BC 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E5C2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E5C4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E5CA                            
0000E5CA                            	Over_1stWord:
0000E5CA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E5D0 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E5D8 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E5DE 117C 0000 0001             		move.b	#0,obRender(a0)
0000E5E4 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E5EA                            
0000E5EA                            Over_Move:	; Routine 2
0000E5EA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E5EC 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E5F2 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E5F4 6500                       		bcs.s	Over_UpdatePos
0000E5F6 4441                       		neg.w	d1
0000E5F8                            
0000E5F8                            	Over_UpdatePos:
0000E5F8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5FC 6000 0000                  		bra.w	DisplaySprite
0000E600                            ; ===========================================================================
0000E600                            
0000E600                            Over_SetWait:
0000E600 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E606 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E60A 4E75                       		rts	
0000E60C                            ; ===========================================================================
0000E60C                            
0000E60C                            Over_Wait:	; Routine 4
0000E60C 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E610 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E614 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E616 0828 0000 001A             		btst	#0,obFrame(a0)
0000E61C 6600                       		bne.s	Over_Display
0000E61E 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E622 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E624 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E628 6000 0000                  		bra.w	DisplaySprite
0000E62C                            ; ===========================================================================
0000E62C                            
0000E62C                            Over_ChgMode:
0000E62C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E630 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E632 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E638 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E63C 6600                       		bne.s	Over_Display	; if yes, branch
0000E63E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E644 6000                       		bra.s	Over_Display
0000E646                            ; ===========================================================================
0000E646                            
0000E646                            Over_ResetLvl:
0000E646 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E64A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E650                            
0000E650                            Over_Display:
0000E650 6000 0000                  		bra.w	DisplaySprite
0000E650 6000 0000                  		bra.w	DisplaySprite
0000E654                            		include	"_incObj\3A Got Through Card.asm"
0000E654                            ; ---------------------------------------------------------------------------
0000E654                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E654                            ; ---------------------------------------------------------------------------
0000E654                            
0000E654                            GotThroughCard:
0000E654 7000                       		moveq	#0,d0
0000E656 1028 0024                  		move.b	obRoutine(a0),d0
0000E65A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E65E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E662                            ; ===========================================================================
0000E662 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E664 0000                       		dc.w Got_Move-Got_Index
0000E666 0000                       		dc.w Got_Wait-Got_Index
0000E668 0000                       		dc.w Got_TimeBonus-Got_Index
0000E66A 0000                       		dc.w Got_Wait-Got_Index
0000E66C 0000                       		dc.w Got_NextLevel-Got_Index
0000E66E 0000                       		dc.w Got_Wait-Got_Index
0000E670 0000                       		dc.w Got_Move2-Got_Index
0000E672 0000                       		dc.w loc_C766-Got_Index
0000E674                            
0000E674 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E674 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E674                            ; ===========================================================================
0000E674                            
0000E674                            Got_ChkPLC:	; Routine 0
0000E674 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E678 6700                       		beq.s	Got_Main	; if yes, branch
0000E67A 4E75                       		rts	
0000E67C                            ; ===========================================================================
0000E67C                            
0000E67C                            Got_Main:
0000E67C 2248                       		movea.l	a0,a1
0000E67E 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E684 7206                       		moveq	#6,d1
0000E686                            
0000E686                            Got_Loop:
0000E686 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E68A 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E68E 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E692 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E696 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E69A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E69E 101A                       		move.b	(a2)+,d0
0000E6A0 0C00 0006                  		cmpi.b	#6,d0
0000E6A4 6600                       		bne.s	loc_C5CA
0000E6A6 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E6AA                            
0000E6AA                            	loc_C5CA:
0000E6AA 1340 001A                  		move.b	d0,obFrame(a1)
0000E6AE 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E6B6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E6BC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E6C2 43E9 0040                  		lea	$40(a1),a1
0000E6C6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E6CA                            
0000E6CA                            Got_Move:	; Routine 2
0000E6CA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6CC 3028 0030                  		move.w	got_mainX(a0),d0
0000E6D0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E6D4 6700                       		beq.s	loc_C61A	; if yes, branch
0000E6D6 6C00                       		bge.s	Got_ChgPos
0000E6D8 4441                       		neg.w	d1
0000E6DA                            
0000E6DA                            	Got_ChgPos:
0000E6DA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6DE                            
0000E6DE                            	loc_C5FE:
0000E6DE 3028 0008                  		move.w	obX(a0),d0
0000E6E2 6B00                       		bmi.s	locret_C60E
0000E6E4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6E8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E6EA 6000 0000                  		bra.w	DisplaySprite
0000E6EE                            ; ===========================================================================
0000E6EE                            
0000E6EE                            locret_C60E:
0000E6EE 4E75                       		rts	
0000E6F0                            ; ===========================================================================
0000E6F0                            
0000E6F0                            loc_C610:
0000E6F0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E6F6 6000 0000                  		bra.w	Got_Move2
0000E6FA                            ; ===========================================================================
0000E6FA                            
0000E6FA                            loc_C61A:
0000E6FA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E700 67EE                       		beq.s	loc_C610
0000E702 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E708 66D4                       		bne.s	loc_C5FE
0000E70A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E70E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E714                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E714                            
0000E714                            Got_Wait:	; Routine 4, 8, $C
0000E714 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E718 6600                       		bne.s	Got_Display
0000E71A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E71E                            
0000E71E                            Got_Display:
0000E71E 6000 0000                  		bra.w	DisplaySprite
0000E722                            ; ===========================================================================
0000E722                            
0000E722                            Got_TimeBonus:	; Routine 6
0000E722 6100 0000                  		bsr.w	DisplaySprite
0000E726 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E72C 7000                       		moveq	#0,d0
0000E72E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E732 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E734 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E738 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E73E                            
0000E73E                            Got_RingBonus:
0000E73E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E742 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E744 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E748 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E74E                            
0000E74E                            Got_ChkBonus:
0000E74E 4A40                       		tst.w	d0		; is there any bonus?
0000E750 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E75C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E760 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E766 6600                       		bne.s	Got_SetDelay
0000E768 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E76C                            
0000E76C                            Got_SetDelay:
0000E76C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E772                            
0000E772                            locret_C692:
0000E772 4E75                       		rts	
0000E774                            ; ===========================================================================
0000E774                            
0000E774                            Got_AddBonus:
0000E774 4EB9 0000 0000             		jsr	(AddPoints).l
0000E77A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E77E 0200 0003                  		andi.b	#3,d0
0000E782 66EE                       		bne.s	locret_C692
0000E78E                            ; ===========================================================================
0000E78E                            
0000E78E                            Got_NextLevel:	; Routine $A
0000E78E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E794 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E79A 1038 FE10                  		move.b	(v_zone).w,d0
0000E79E 0240 0007                  		andi.w	#7,d0
0000E7A2 E748                       		lsl.w	#3,d0
0000E7A4 1238 FE11                  		move.b	(v_act).w,d1
0000E7A8 0241 0003                  		andi.w	#3,d1
0000E7AC D241                       		add.w	d1,d1
0000E7AE D041                       		add.w	d1,d0
0000E7B0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E7B4 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E7B8 4A40                       		tst.w	d0
0000E7BA 6600                       		bne.s	Got_ChkSS
0000E7BC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E7C2 6000                       		bra.s	Got_Display2
0000E7C4                            ; ===========================================================================
0000E7C4                            
0000E7C4                            Got_ChkSS:	
0000E7C4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E7C8                            		;tst.b	(f_emeraldm).w
0000E7C8                            		;beq.s	VBla_08A
0000E7C8                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E7C8                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E7C8                            		;bra.s	Got_Display2
0000E7C8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E7CE                            		
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            VBla_08A:
0000E7CE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E7D4                            
0000E7D4                            Got_Display2:
0000E7D4 6000 0000                  		bra.w	DisplaySprite
0000E7D8                            ; ===========================================================================
0000E7D8                            ; ---------------------------------------------------------------------------
0000E7D8                            ; Level	order array
0000E7D8                            ; ---------------------------------------------------------------------------
0000E7D8                            LevelOrder:
0000E7D8                            		; Green Hill Zone
0000E7D8 0001                       		dc.b id_GHZ, 1	; Act 2
0000E7DA 0002                       		dc.b id_GHZ, 2	; Act 2
0000E7DC 0200                       		dc.b id_MZ, 0	; Act 3
0000E7DE 0000                       		dc.b 0, 0
0000E7E0                            
0000E7E0                            		; Labyrinth Zone
0000E7E0 0101                       		dc.b id_LZ, 1	; Act 1
0000E7E2 0102                       		dc.b id_LZ, 2	; Act 2
0000E7E4 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E7E6 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E7E8                            
0000E7E8                            		; Marble Zone
0000E7E8 0201                       		dc.b id_MZ, 1	; Act 1
0000E7EA 0202                       		dc.b id_MZ, 2	; Act 2
0000E7EC 0502                       		dc.b id_SBZ, 2	; Act 3
0000E7EE 0000                       		dc.b 0, 0
0000E7F0                            
0000E7F0                            		; Star Light Zone
0000E7F0 0301                       		dc.b id_SLZ, 1	; Act 1
0000E7F2 0302                       		dc.b id_SLZ, 2	; Act 2
0000E7F4 0500                       		dc.b id_SBZ, 0	; Act 3
0000E7F6 0000                       		dc.b 0, 0
0000E7F8                            
0000E7F8                            		; Spring Yard Zone
0000E7F8 0502                       		dc.b id_SBZ, 2	; Act 1
0000E7FA 0402                       		dc.b id_SYZ, 2	; Act 2
0000E7FC 0200                       		dc.b id_MZ,	 0	; Act 3
0000E7FE 0000                       		dc.b 0, 0
0000E800                            
0000E800                            		; Scrap Brain Zone
0000E800 0501                       		dc.b id_SBZ, 1	; Act 1
0000E802 0103                       		dc.b id_LZ, 3	; Act 2
0000E804 0000                       		dc.b 0, 0	; Final Zone
0000E806 0000                       		dc.b 0, 0
0000E808                            		even
0000E808                            ; ===========================================================================
0000E808                            
0000E808                            Got_Move2:	; Routine $E
0000E808 7220                       		moveq	#$20,d1		; set horizontal speed
0000E80A 3028 0032                  		move.w	got_finalX(a0),d0
0000E80E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E812 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E814 6C00                       		bge.s	Got_ChgPos2
0000E816 4441                       		neg.w	d1
0000E818                            
0000E818                            	Got_ChgPos2:
0000E818 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E81C 3028 0008                  		move.w	obX(a0),d0
0000E820 6B00                       		bmi.s	locret_C748
0000E822 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E826 6400                       		bcc.s	locret_C748	; if yes, branch
0000E828 6000 0000                  		bra.w	DisplaySprite
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            locret_C748:
0000E82C 4E75                       		rts	
0000E82E                            ; ===========================================================================
0000E82E                            
0000E82E                            Got_SBZ2:
0000E82E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E834 6600 0000                  		bne.w	DeleteObject
0000E838 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E83C 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E840 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E850                            ; ===========================================================================
0000E850                            
0000E850                            loc_C766:	; Routine $10
0000E850 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E854 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E85A 6700 0000                  		beq.w	DeleteObject
0000E85E 4E75                       		rts	
0000E860                            ; ===========================================================================
0000E860                            		;    x-start,	x-main,	y-main,
0000E860                            		;				routine, frame number
0000E860                            
0000E860 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E866 0200                       		dc.b 				2,	0
0000E868                            
0000E868 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E86E 0201                       		dc.b 				2,	1
0000E870                            
0000E870 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E876 0206                       		dc.b 				2,	6
0000E878                            
0000E878 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E87E 0202                       		dc.b 				2,	2
0000E880                            
0000E880 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E886 0203                       		dc.b 				2,	3
0000E888                            
0000E888 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E88E 0204                       		dc.b 				2,	4
0000E890                            
0000E890 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E896 0205                       		dc.b 				2,	5
0000E896 0205                       		dc.b 				2,	5
0000E898                            		include	"_incObj\7E Special Stage Results.asm"
0000E898                            ; ---------------------------------------------------------------------------
0000E898                            ; Object 7E - special stage results screen
0000E898                            ; ---------------------------------------------------------------------------
0000E898                            
0000E898                            SSResult:
0000E898 7000                       		moveq	#0,d0
0000E89A 1028 0024                  		move.b	obRoutine(a0),d0
0000E89E 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E8A2 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E8A6                            ; ===========================================================================
0000E8A6 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E8A8 0000                       		dc.w SSR_Move-SSR_Index
0000E8AA 0000                       		dc.w SSR_Wait-SSR_Index
0000E8AC 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E8AE 0000                       		dc.w SSR_Wait-SSR_Index
0000E8B0 0000                       		dc.w SSR_Exit-SSR_Index
0000E8B2 0000                       		dc.w SSR_Wait-SSR_Index
0000E8B4 0000                       		dc.w SSR_Continue-SSR_Index
0000E8B6 0000                       		dc.w SSR_Wait-SSR_Index
0000E8B8 0000                       		dc.w SSR_Exit-SSR_Index
0000E8BA 0000                       		dc.w loc_C91A-SSR_Index
0000E8BC                            
0000E8BC =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E8BC                            ; ===========================================================================
0000E8BC                            
0000E8BC                            SSR_ChkPLC:	; Routine 0
0000E8BC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E8C0 6700                       		beq.s	SSR_Main	; if yes, branch
0000E8C2 4E75                       		rts	
0000E8C4                            ; ===========================================================================
0000E8C4                            
0000E8C4                            SSR_Main:
0000E8C4 2248                       		movea.l	a0,a1
0000E8C6 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E8CC 7203                       		moveq	#3,d1
0000E8CE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E8D4 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E8D6 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E8D8                            
0000E8D8                            	SSR_Loop:
0000E8D8 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E8DC 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E8E0 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E8E4 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8E8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8EC 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E8F0 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E8F8 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8FE 137C 0000 0001             		move.b	#0,obRender(a1)
0000E904 43E9 0040                  		lea	$40(a1),a1
0000E908 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E90C                            
0000E90C 7007                       		moveq	#7,d0
0000E90E 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E912 6700                       		beq.s	loc_C842
0000E914 7000                       		moveq	#0,d0
0000E916 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E91A 6600                       		bne.s	loc_C842	; if not, branch
0000E91C 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E91E 317C 0018 0008             		move.w	#$18,obX(a0)
0000E924 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E92A                            
0000E92A                            loc_C842:
0000E92A 1140 001A                  		move.b	d0,obFrame(a0)
0000E92E                            
0000E92E                            SSR_Move:	; Routine 2
0000E92E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E930 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E934 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E938 6700                       		beq.s	loc_C86C	; if yes, branch
0000E93A 6C00                       		bge.s	SSR_ChgPos
0000E93C 4441                       		neg.w	d1
0000E93E                            
0000E93E                            SSR_ChgPos:
0000E93E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E942                            
0000E942                            loc_C85A:
0000E942 3028 0008                  		move.w	obX(a0),d0
0000E946 6B00                       		bmi.s	locret_C86A
0000E948 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E94C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E94E 6000 0000                  		bra.w	DisplaySprite
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            locret_C86A:
0000E952 4E75                       		rts	
0000E954                            ; ===========================================================================
0000E954                            
0000E954                            loc_C86C:
0000E954 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E95A 66E6                       		bne.s	loc_C85A
0000E95C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E960 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E966 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E96C                            
0000E96C                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E96C 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E970 6600                       		bne.s	SSR_Display
0000E972 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E976                            
0000E976                            SSR_Display:
0000E976 6000 0000                  		bra.w	DisplaySprite
0000E97A                            ; ===========================================================================
0000E97A                            
0000E97A                            SSR_RingBonus:	; Routine 6
0000E97A 6100 0000                  		bsr.w	DisplaySprite
0000E97E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E984 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E988 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E98A 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E990 700A                       		moveq	#10,d0		; add 10 to score
0000E992 4EB9 0000 0000             		jsr	(AddPoints).l
0000E998 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E99C 0200 0003                  		andi.b	#3,d0
0000E9A0 6600                       		bne.s	locret_C8EA
0000E9AC                            ; ===========================================================================
0000E9AC                            
0000E9AC                            loc_C8C4:
0000E9B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9BA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9C0 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E9C6 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E9C8 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E9CE 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E9D2                            
0000E9D2                            locret_C8EA:
0000E9D2 4E75                       		rts	
0000E9D4                            ; ===========================================================================
0000E9D4                            
0000E9D4                            SSR_Exit:	; Routine $A, $12
0000E9D4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E9DA 6000 0000                  		bra.w	DisplaySprite
0000E9DE                            ; ===========================================================================
0000E9DE                            
0000E9DE                            SSR_Continue:	; Routine $E
0000E9DE 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E9E4 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E9F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9F8 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E9FE 6000 0000                  		bra.w	DisplaySprite
0000EA02                            ; ===========================================================================
0000EA02                            
0000EA02                            loc_C91A:	; Routine $14
0000EA02 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA06 0200 000F                  		andi.b	#$F,d0
0000EA0A 6600                       		bne.s	SSR_Display2
0000EA0C 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EA12                            
0000EA12                            SSR_Display2:
0000EA12 6000 0000                  		bra.w	DisplaySprite
0000EA16                            ; ===========================================================================
0000EA16 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EA1C 0200                       		dc.b 2,	0		; rountine number, frame number
0000EA1E 0320 0120 0118             		dc.w $320, $120, $118
0000EA24 0201                       		dc.b 2,	1
0000EA26 0360 0120 0128             		dc.w $360, $120, $128
0000EA2C 0202                       		dc.b 2,	2
0000EA2E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EA34 0203                       		dc.b 2,	3
0000EA36 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EA3C 0206                       		dc.b 2,	6
0000EA3C 0206                       		dc.b 2,	6
0000EA3E                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            ; Object 7F - chaos emeralds from the special stage results screen
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            
0000EA3E                            SSRChaos:
0000EA3E 7000                       		moveq	#0,d0
0000EA40 1028 0024                  		move.b	obRoutine(a0),d0
0000EA44 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA48 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EA4C                            ; ===========================================================================
0000EA4C 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EA4E 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EA50                            
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            ; X-axis positions for chaos emeralds
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EA5C                            ; ===========================================================================
0000EA5C                            
0000EA5C                            SSRC_Main:	; Routine 0
0000EA5C 2248                       		movea.l	a0,a1
0000EA5E 45F9 0000 EA50             		lea	(SSRC_PosData).l,a2
0000EA64 7400                       		moveq	#0,d2
0000EA66 7200                       		moveq	#0,d1
0000EA68 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EA6C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EA6E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EA72                            
0000EA72                            	SSRC_Loop:
0000EA72 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EA76 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EA7A 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EA80 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EA84 1633 2000                  		move.b	(a3,d2.w),d3
0000EA88 1343 001A                  		move.b	d3,obFrame(a1)
0000EA8C 1343 001C                  		move.b	d3,obAnim(a1)
0000EA90 5202                       		addq.b	#1,d2
0000EA92 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EA96 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EA9E 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EAA4 137C 0000 0001             		move.b	#0,obRender(a1)
0000EAAA 43E9 0040                  		lea	$40(a1),a1	; next object
0000EAAE 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EAB2                            
0000EAB2                            SSRC_Flash:	; Routine 2
0000EAB2 1028 001A                  		move.b	obFrame(a0),d0
0000EAB6 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EABC 0C00 0006                  		cmpi.b	#6,d0
0000EAC0 6600                       		bne.s	SSRC_Display
0000EAC2 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EAC8                            
0000EAC8                            	SSRC_Display:
0000EAC8 6000 0000                  		bra.w	DisplaySprite
0000EAC8 6000 0000                  		bra.w	DisplaySprite
0000EACC                            
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC                            ; Sprite mappings - zone title cards
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EACE 0000                       		dc.w M_Card_LZ-Map_Card
0000EAD0 0000                       		dc.w M_Card_MZ-Map_Card
0000EAD2 0000                       		dc.w M_Card_SLZ-Map_Card
0000EAD4 0000                       		dc.w M_Card_SYZ-Map_Card
0000EAD6 0000                       		dc.w M_Card_SBZ-Map_Card
0000EAD8 0000                       		dc.w M_Card_Zone-Map_Card
0000EADA 0000                       		dc.w M_Card_Act1-Map_Card
0000EADC 0000                       		dc.w M_Card_Act2-Map_Card
0000EADE 0000                       		dc.w M_Card_Act3-Map_Card
0000EAE0 0000                       		dc.w M_Card_Oval-Map_Card
0000EAE2 0000                       		dc.w M_Card_FZ-Map_Card
0000EAE4 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EAE5 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EAEA F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EAEF F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EAF4 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EAF9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EAFE F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EB03 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EB08 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EB0D F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EB12                            		even
0000EB12 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EB13 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EB18 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EB1D F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EB22 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EB27 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EB2C F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EB31 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EB36 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EB3B F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EB40                            		even
0000EB40 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EB41 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EB46 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EB4B F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EB50 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EB55 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EB5A F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EB5F F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EB64 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EB69 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EB6E F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EB73 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EB78 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EB79 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EB7E F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EB83 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EB88 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EB8D F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EB92 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EB97 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EB9C F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EBA1 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EBA6                            		even
0000EBA6 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EBA7 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EBAC F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EBB1 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EBB6 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EBBB F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EBC0 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EBC5 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EBCA F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EBCF F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EBD4 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EBDA 00                         		even
0000EBDA 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EBDB F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EBE0 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EBE5 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EBEA F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EBEF F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EBF4 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EBF9 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EBFE F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EC03 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EC08 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EC0E 00                         		even
0000EC0E 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EC0F F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EC14 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EC19 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EC1E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EC24 00                         		even
0000EC24 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EC25 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC2A F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EC2F 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EC30 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC35 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EC3A 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EC3B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC40 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EC45 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EC46 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EC4B E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EC50 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EC55 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EC5A 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EC5F 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EC64 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EC69 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EC6E EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EC73 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EC78 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EC7D 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EC82 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EC88 00                         		even
0000EC88 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EC89 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EC8E F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EC93 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EC98 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EC9D F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ECA2                            		even
0000ECA2                            
0000ECA2                            Map_Over:	include	"_maps\Game Over.asm"
0000ECA2                            ; ---------------------------------------------------------------------------
0000ECA2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ECA2                            ; ---------------------------------------------------------------------------
0000ECA2                            Map_Over_internal:
0000ECA2 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ECA4 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ECA6 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ECA8 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ECAA 02                         byte_CBAC:	dc.b 2			; GAME
0000ECAB F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ECB0 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ECB5 02                         byte_CBB7:	dc.b 2			; OVER
0000ECB6 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000ECBB F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000ECC0 02                         byte_CBC2:	dc.b 2			; TIME
0000ECC1 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000ECC6 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000ECCB 02                         byte_CBCD:	dc.b 2			; OVER
0000ECCC F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000ECD1 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000ECD6                            		even
0000ECD6                            		even
0000ECD6                            
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000ECD8 0000                       		dc.w M_Got_Passed-Map_Got
0000ECDA 0000                       		dc.w M_Got_Score-Map_Got
0000ECDC 0000                       		dc.w M_Got_TBonus-Map_Got
0000ECDE 0000                       		dc.w M_Got_RBonus-Map_Got
0000ECE0 FF6F                       		dc.w M_Card_Oval-Map_Got
0000ECE2 FF4E                       		dc.w M_Card_Act1-Map_Got
0000ECE4 FF59                       		dc.w M_Card_Act2-Map_Got
0000ECE6 FF64                       		dc.w M_Card_Act3-Map_Got
0000ECE8 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ECE9 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ECEE F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ECF3 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ECF8 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ECFD F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ED02 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ED07 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ED0C F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ED11 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ED12 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ED17 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ED1C F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ED21 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ED26 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED2B F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ED30 06                         M_Got_Score:	dc.b 6			; SCORE
0000ED31 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ED36 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ED3B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000ED40 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000ED45 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ED4A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000ED4F 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000ED50 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000ED55 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED5A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED5F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED64 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED69 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000ED6E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED73 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000ED74 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000ED79 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED7E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED83 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED88 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED8D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000ED92 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED98 00                         		even
0000ED98                            ; ---------------------------------------------------------------------------
0000ED98                            ; Sprite mappings - special stage results screen
0000ED98                            ; ---------------------------------------------------------------------------
0000ED98 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000ED9A 0000                       		dc.w M_SSR_Score-Map_SSR
0000ED9C 0000                       		dc.w byte_CD0D-Map_SSR
0000ED9E FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EDA0 0000                       		dc.w byte_CD31-Map_SSR
0000EDA2 0000                       		dc.w byte_CD46-Map_SSR
0000EDA4 0000                       		dc.w byte_CD5B-Map_SSR
0000EDA6 0000                       		dc.w byte_CD6B-Map_SSR
0000EDA8 0000                       		dc.w byte_CDA8-Map_SSR
0000EDAA 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EDAB F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EDB0 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EDB5 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EDBA F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EDBF F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EDC4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EDC9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EDCE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EDD3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EDD8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EDDD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EDE2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EDE7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EDEC 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EDED F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EDF2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EDF7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDFC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE01 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE06 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE0B 07                         byte_CD0D:	dc.b 7
0000EE0C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE11 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE16 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE1B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE20 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE25 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE2A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE2F 04                         byte_CD31:	dc.b 4
0000EE30 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE35 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE3A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE3F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EE44 04                         byte_CD46:	dc.b 4
0000EE45 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE4A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE4F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE54 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EE59 03                         byte_CD5B:	dc.b 3
0000EE5A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE5F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE64 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE69 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EE6A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EE6F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EE74 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EE79 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EE7E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EE83 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EE88 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EE8D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EE92 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EE97 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EE9C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EEA1 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EEA6 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EEA7 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EEAC F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EEB1 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EEB6 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EEBB F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EEC0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EEC5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EECA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EECF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EED4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EED9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EEDE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EEE3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EEE8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EEED F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EEF2                            		even
0000EEF2                            
0000EEF2                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2                            Map_SSRC_internal:
0000EEF2 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EEF4 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EEF6 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EEF8 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EEFA 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EEFC 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EEFE 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EF00 01                         byte_CE02:	dc.b 1
0000EF01 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EF06 01                         byte_CE08:	dc.b 1
0000EF07 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EF0C 01                         byte_CE0E:	dc.b 1
0000EF0D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EF12 01                         byte_CE14:	dc.b 1
0000EF13 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EF18 01                         byte_CE1A:	dc.b 1
0000EF19 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EF1E 01                         byte_CE20:	dc.b 1
0000EF1F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EF24 00                         byte_CE26:	dc.b 0			; Blank frame
0000EF26 00                         		even
0000EF26 00                         		even
0000EF26                            
0000EF26                            		include	"_incObj\36 Spikes.asm"
0000EF26                            ; ---------------------------------------------------------------------------
0000EF26                            ; Object 36 - spikes
0000EF26                            ; ---------------------------------------------------------------------------
0000EF26                            
0000EF26                            Spikes:
0000EF26 7000                       		moveq	#0,d0
0000EF28 1028 0024                  		move.b	obRoutine(a0),d0
0000EF2C 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EF30 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EF34                            ; ===========================================================================
0000EF34 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EF36 0000                       		dc.w Spik_Solid-Spik_Index
0000EF38                            
0000EF38 =00000030                  spik_origX:	equ $30		; start X position
0000EF38 =00000032                  spik_origY:	equ $32		; start Y position
0000EF38                            
0000EF38 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EF3A 0110                       		dc.b 1,	$10
0000EF3C 0204                       		dc.b 2,	4
0000EF3E 031C                       		dc.b 3,	$1C
0000EF40 0440                       		dc.b 4,	$40
0000EF42 0510                       		dc.b 5,	$10
0000EF44                            ; ===========================================================================
0000EF44                            
0000EF44                            Spik_Main:	; Routine 0
0000EF44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF48 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EF50 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EF56 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EF5C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF62 1028 0028                  		move.b	obSubtype(a0),d0
0000EF66 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EF6C 0240 00F0                  		andi.w	#$F0,d0
0000EF70 43F9 0000 EF38             		lea	(Spik_Var).l,a1
0000EF76 E648                       		lsr.w	#3,d0
0000EF78 D2C0                       		adda.w	d0,a1
0000EF7A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EF7E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EF82 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EF88 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EF8E                            
0000EF8E                            Spik_Solid:	; Routine 2
0000EF8E 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EF92 343C 0004                  		move.w	#4,d2
0000EF96 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EF9C 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EF9E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EFA4 6600                       		bne.s	Spik_Upright	; if not, branch
0000EFA6 343C 0014                  		move.w	#$14,d2
0000EFAA                            
0000EFAA                            ; Spikes types $1x and $5x face	sideways
0000EFAA                            
0000EFAA                            Spik_SideWays:
0000EFAA 323C 001B                  		move.w	#$1B,d1
0000EFAE 3602                       		move.w	d2,d3
0000EFB0 5243                       		addq.w	#1,d3
0000EFB2 3828 0008                  		move.w	obX(a0),d4
0000EFB6 6100 0000                  		bsr.w	SolidObject
0000EFBA 0828 0003 0022             		btst	#3,obStatus(a0)
0000EFC0 6600                       		bne.s	Spik_Display
0000EFC2 0C44 0001                  		cmpi.w	#1,d4
0000EFC6 6700                       		beq.s	Spik_Hurt
0000EFC8 6000                       		bra.s	Spik_Display
0000EFCA                            ; ===========================================================================
0000EFCA                            
0000EFCA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EFCA                            
0000EFCA                            Spik_Upright:
0000EFCA 7200                       		moveq	#0,d1
0000EFCC 1228 0014                  		move.b	obActWid(a0),d1
0000EFD0 0641 000B                  		addi.w	#$B,d1
0000EFD4 343C 0010                  		move.w	#$10,d2
0000EFD8 363C 0011                  		move.w	#$11,d3
0000EFDC 3828 0008                  		move.w	obX(a0),d4
0000EFE0 6100 0000                  		bsr.w	SolidObject
0000EFE4 0828 0003 0022             		btst	#3,obStatus(a0)
0000EFEA 6600                       		bne.s	Spik_Hurt
0000EFEC 4A44                       		tst.w	d4
0000EFEE 6A00                       		bpl.s	Spik_Display
0000EFF0                            
0000EFF0                            Spik_Hurt:
0000EFF0 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000EFF4 6600                       		bne.s	Spik_Display	; if yes, branch
0000EFF6 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000EFFA 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000EFFC 2F08                       		move.l	a0,-(sp)
0000EFFE 2448                       		movea.l	a0,a2
0000F000 41F8 D000                  		lea	(v_player).w,a0
0000F004 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F00A 6400                       		bcc.s	loc_CF20
0000F00C                            		; This fixes the infamous "spike bug"
0000F00C 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F010 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F012 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F018                            loc_D5A2:
0000F018 9680                       		sub.l	d0,d3
0000F01A 2143 000C                  		move.l	d3,obY(a0)
0000F01E 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F024                            
0000F024                            loc_CF20:
0000F024 205F                       		movea.l	(sp)+,a0
0000F026                            
0000F026                            Spik_Display:
0000F026 6100 0000                  		bsr.w	DisplaySprite
0000F048 4E75                       		rts	
0000F04A                            ; ===========================================================================
0000F04A                            
0000F04A                            Spik_Type0x:
0000F04A 7000                       		moveq	#0,d0
0000F04C 1028 0028                  		move.b	obSubtype(a0),d0
0000F050 D040                       		add.w	d0,d0
0000F052 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F056 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F05A                            ; ===========================================================================
0000F05A 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F05C 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F05E 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F060                            ; ===========================================================================
0000F060                            
0000F060                            Spik_Type00:
0000F060 4E75                       		rts			; don't move the object
0000F062                            ; ===========================================================================
0000F062                            
0000F062                            Spik_Type01:
0000F062 6100 0000                  		bsr.w	Spik_Wait
0000F066 7000                       		moveq	#0,d0
0000F068 1028 0034                  		move.b	$34(a0),d0
0000F06C D068 0032                  		add.w	spik_origY(a0),d0
0000F070 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F074 4E75                       		rts	
0000F076                            ; ===========================================================================
0000F076                            
0000F076                            Spik_Type02:
0000F076 6100 0000                  		bsr.w	Spik_Wait
0000F07A 7000                       		moveq	#0,d0
0000F07C 1028 0034                  		move.b	$34(a0),d0
0000F080 D068 0030                  		add.w	spik_origX(a0),d0
0000F084 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F088 4E75                       		rts	
0000F08A                            ; ===========================================================================
0000F08A                            
0000F08A                            Spik_Wait:
0000F08A 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F08E 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F090 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F094 6600                       		bne.s	locret_CFE6
0000F096 4A28 0001                  		tst.b	obRender(a0)
0000F09A 6A00                       		bpl.s	locret_CFE6
0000F0A6 6000                       		bra.s	locret_CFE6
0000F0A8                            ; ===========================================================================
0000F0A8                            
0000F0A8                            loc_CFA4:
0000F0A8 4A68 0036                  		tst.w	$36(a0)
0000F0AC 6700                       		beq.s	loc_CFC6
0000F0AE 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F0B4 6400                       		bcc.s	locret_CFE6
0000F0B6 317C 0000 0034             		move.w	#0,$34(a0)
0000F0BC 317C 0000 0036             		move.w	#0,$36(a0)
0000F0C2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F0C8 6000                       		bra.s	locret_CFE6
0000F0CA                            ; ===========================================================================
0000F0CA                            
0000F0CA                            loc_CFC6:
0000F0CA 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F0D0 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F0D6 6500                       		bcs.s	locret_CFE6
0000F0D8 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F0DE 317C 0001 0036             		move.w	#1,$36(a0)
0000F0E4 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F0EA                            
0000F0EA                            locret_CFE6:
0000F0EA 4E75                       		rts	
0000F0EA 4E75                       		rts	
0000F0EC                            Map_Spike:	include	"_maps\Spikes.asm"
0000F0EC                            ; --------------------------------------------------------------------------------
0000F0EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F0EC                            ; --------------------------------------------------------------------------------
0000F0EC                            
0000F0EC                            SME_XgeaQ:	
0000F0EC 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F0F0 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F0F4 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F0F8 03                         SME_XgeaQ_C:	dc.b 3	
0000F0F9 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F0FE F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F103 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F108 03                         SME_XgeaQ_1C:	dc.b 3	
0000F109 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F10E FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F113 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F118 01                         SME_XgeaQ_2C:	dc.b 1	
0000F119 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F11E 03                         SME_XgeaQ_32:	dc.b 3	
0000F11F F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F124 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F129 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F12E 06                         SME_XgeaQ_42:	dc.b 6	
0000F12F F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F134 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F139 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F13E F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F143 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F148 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F14D 01                         SME_XgeaQ_61:	dc.b 1	
0000F14E FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F154 00                         		even
0000F154 00                         		even
0000F154                            		include	"_incObj\3B Purple Rock.asm"
0000F154                            ; ---------------------------------------------------------------------------
0000F154                            ; Object 3B - purple rock (GHZ)
0000F154                            ; ---------------------------------------------------------------------------
0000F154                            
0000F154                            PurpleRock:
0000F154 7000                       		moveq	#0,d0
0000F156 1028 0024                  		move.b	obRoutine(a0),d0
0000F15A 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F15E 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F162                            ; ===========================================================================
0000F162 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F164 0000                       		dc.w Rock_Solid-Rock_Index
0000F166                            ; ===========================================================================
0000F166                            
0000F166                            Rock_Main:	; Routine 0
0000F166 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F16A 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F172 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F178 117C 0004 0001             		move.b	#4,obRender(a0)
0000F17E 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F184 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F18A                            
0000F18A                            Rock_Solid:	; Routine 2
0000F18A 323C 001B                  		move.w	#$1B,d1
0000F18E 343C 0010                  		move.w	#$10,d2
0000F192 363C 0010                  		move.w	#$10,d3
0000F196 3828 0008                  		move.w	obX(a0),d4
0000F19A 6100 0000                  		bsr.w	SolidObject
0000F19E 6100 0000                  		bsr.w	DisplaySprite
0000F1C0 4E75                       		rts	
0000F1C0 4E75                       		rts	
0000F1C2                            		include	"_incObj\49 Waterfall Sound.asm"
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Object 49 - waterfall	sound effect (GHZ)
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            
0000F1C2                            WaterSound:
0000F1C2 7000                       		moveq	#0,d0
0000F1C4 1028 0024                  		move.b	obRoutine(a0),d0
0000F1C8 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F1CC 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F1D0                            ; ===========================================================================
0000F1D0 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F1D2 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F1D4                            ; ===========================================================================
0000F1D4                            
0000F1D4                            WSnd_Main:	; Routine 0
0000F1D4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1D8 117C 0004 0001             		move.b	#4,obRender(a0)
0000F1DE                            
0000F1DE                            WSnd_PlaySnd:	; Routine 2
0000F1DE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F1E2 0200 003F                  		andi.b	#$3F,d0
0000F1E6 6600                       		bne.s	WSnd_ChkDel
0000F1F2                            
0000F1F2                            	WSnd_ChkDel:
0000F210 4E75                       		rts	
0000F210 4E75                       		rts	
0000F212                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F212                            ; ---------------------------------------------------------------------------
0000F212                            ; Sprite mappings - purple rock	(GHZ)
0000F212                            ; ---------------------------------------------------------------------------
0000F212                            Map_PRock_internal:
0000F212 0000                       		dc.w byte_D110-Map_PRock_internal
0000F214 02                         byte_D110:	dc.b 2
0000F215 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F21A F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F220 00                         		even
0000F220 00                         		even
0000F220                            		include	"_incObj\3C Smashable Wall.asm"
0000F220                            ; ---------------------------------------------------------------------------
0000F220                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F220                            ; ---------------------------------------------------------------------------
0000F220                            
0000F220                            SmashWall:
0000F220 7000                       		moveq	#0,d0
0000F222 1028 0024                  		move.b	obRoutine(a0),d0
0000F226 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F22A 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F22E 6000 0000                  		bra.w	RememberState
0000F232                            ; ===========================================================================
0000F232 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F234 0000                       		dc.w Smash_Solid-Smash_Index
0000F236 0000                       		dc.w Smash_FragMove-Smash_Index
0000F238                            
0000F238 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F238                            ; ===========================================================================
0000F238                            
0000F238                            Smash_Main:	; Routine 0
0000F238 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F23C 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F244 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F24A 117C 0004 0001             		move.b	#4,obRender(a0)
0000F250 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F256 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F25C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F262                            
0000F262                            Smash_Solid:	; Routine 2
0000F262 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F268 323C 001B                  		move.w	#$1B,d1
0000F26C 343C 0020                  		move.w	#$20,d2
0000F270 363C 0020                  		move.w	#$20,d3
0000F274 3828 0008                  		move.w	obX(a0),d4
0000F278 6100 0000                  		bsr.w	SolidObject	
0000F27C 4A04                       		tst.b	d4
0000F27E 6E00 0000                  		bgt.w	@chkroll	
0000F282 6700 0000                  		beq.w	@donothing								
0000F286 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F28C 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F290                            ; ===========================================================================
0000F290                            
0000F290                            @chkroll:
0000F290 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F296 6600                       		bne.s	@donothing	; if not, branch	
0000F298 3028 0030                  		move.w	smash_speed(a0),d0
0000F29C 6A00                       		bpl.s	@chkspeed
0000F29E 4440                       		neg.w	d0
0000F2A0                            
0000F2A0                            	@chkspeed:
0000F2A0 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F2A4 6500                       		bcs.s	@donothing	; if not, branch	
0000F2A6                            		
0000F2A6                            	@continue:	
0000F2A6 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F2AC 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F2B2 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F2B8 3028 0008                  		move.w	obX(a0),d0
0000F2BC B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F2C0 6500                       		bcs.s	@smash		; if yes, branch
0000F2C2 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F2C8                            
0000F2C8                            	@smash:
0000F2C8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F2CE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F2D4 7206                       		moveq	#6,d1		; load 7 fragments
0000F2D6 343C 0070                  		move.w	#$70,d2
0000F2DA 6100                       		bsr.s	SmashObject
0000F2DC                            
0000F2DC                            @donothing:
0000F2DC 4E75                       		rts	
0000F2DE                            
0000F2DE                            Smash_FragMove:	; Routine 4
0000F2DE 588F                       		addq.l	#4,sp
0000F2E0 6100 0000                  		bsr.w	SpeedToPos
0000F2E4 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F2EA 4A28 0001                  		tst.b	obRender(a0)
0000F2EE 6A00 0000                  		bpl.w	DeleteObject
0000F2F2 6000 0000                  		bra.w	DisplaySprite
0000F2F6                            
0000F2F6                            
0000F2F6                            
0000F2F6                            		include	"_incObj\sub SmashObject.asm"
0000F2F6                            ; ---------------------------------------------------------------------------
0000F2F6                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F2F6                            ; ---------------------------------------------------------------------------
0000F2F6                            
0000F2F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2F6                            
0000F2F6                            
0000F2F6                            SmashObject:
0000F2F6 7000                       		moveq	#0,d0
0000F2F8 1028 001A                  		move.b	obFrame(a0),d0
0000F2FC D040                       		add.w	d0,d0
0000F2FE 2668 0004                  		movea.l	obMap(a0),a3
0000F302 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F306 524B                       		addq.w	#1,a3
0000F308 08E8 0005 0001             		bset	#5,obRender(a0)
0000F30E 1810                       		move.b	0(a0),d4
0000F310 1A28 0001                  		move.b	obRender(a0),d5
0000F314 2248                       		movea.l	a0,a1
0000F316 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F31C 1284                       		move.b	d4,0(a1)
0000F31E 234B 0004                  		move.l	a3,obMap(a1)
0000F322 1345 0001                  		move.b	d5,obRender(a1)
0000F326 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F32C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F332 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F338 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F33E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F344 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F348 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F34C 5341                       		subq.w #1,d1
0000F34E 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F352 303C 005F                  		move.w #$5F,d0
0000F356                            ; ===========================================================================
0000F356                            
0000F356                            Smash_Loop:
0000F356 4A11                       		tst.b	(a1)
0000F358 6700                       		beq.s	@cont
0000F35A 43E9 0040                  		lea		$40(a1),a1
0000F35E 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F362 6600                       		bne.s	Smash_PlaySnd
0000F364                            
0000F364                            	@cont:
0000F364 5A4B                       		addq.w #5,a3
0000F366                            
0000F366                            Smash_LoadFrag:				; XREF: SmashObject
0000F366 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F36C 1284                       		move.b	d4,0(a1)
0000F36E 234B 0004                  		move.l	a3,obMap(a1)
0000F372 1345 0001                  		move.b	d5,obRender(a1)
0000F376 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F37C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F382 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F388 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F38E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F394 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F398 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F39C 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F3A0                            
0000F3A0                            Smash_PlaySnd:
0000F3A0 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F3A4 4EF9 0000 0FCC             		jmp	(PlaySound_Special).l ; play smashing sound
0000F3AA                            
0000F3AA                            ; End of function SmashObject
0000F3AA                            ; End of function SmashObject
0000F3AA                            
0000F3AA                            ; ===========================================================================
0000F3AA                            ; Smashed block	fragment speeds
0000F3AA                            ;
0000F3AA 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F3AE 0600 FF00                  		dc.w $600, -$100
0000F3B2 0600 0100                  		dc.w $600, $100
0000F3B6 0400 0500                  		dc.w $400, $500
0000F3BA 0600 FA00                  		dc.w $600, -$600
0000F3BE 0800 FE00                  		dc.w $800, -$200
0000F3C2 0800 0200                  		dc.w $800, $200
0000F3C6 0600 0600                  		dc.w $600, $600
0000F3CA                            
0000F3CA FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F3CE F800 FE00                  		dc.w -$800, -$200
0000F3D2 F800 0200                  		dc.w -$800, $200
0000F3D6 FA00 0600                  		dc.w -$600, $600
0000F3DA FC00 FB00                  		dc.w -$400, -$500
0000F3DE FA00 FF00                  		dc.w -$600, -$100
0000F3E2 FA00 0100                  		dc.w -$600, $100
0000F3E6 FC00 0500                  		dc.w -$400, $500
0000F3EA                            
0000F3EA                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F3EA                            ; ---------------------------------------------------------------------------
0000F3EA                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F3EA                            ; ---------------------------------------------------------------------------
0000F3EA                            Map_Smash_internal:
0000F3EA 0000                       		dc.w @left-Map_Smash_internal
0000F3EC 0000                       		dc.w @middle-Map_Smash_internal
0000F3EE 0000                       		dc.w @right-Map_Smash_internal
0000F3F0 08                         @left:		dc.b 8
0000F3F1 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F3F6 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F3FB 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F400 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F405 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F40A F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F40F 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F414 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F419 08                         @middle:	dc.b 8
0000F41A E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F41F F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F424 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F429 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F42E E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F433 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F438 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F43D 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F442 08                         @right:		dc.b 8
0000F443 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F448 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F44D 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F452 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F457 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F45C F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F461 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F466 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F46C 00                         		even
0000F46C 00                         		even
0000F46C                            
0000F46C                            ; ---------------------------------------------------------------------------
0000F46C                            ; Object code execution subroutine
0000F46C                            ; ---------------------------------------------------------------------------
0000F46C                            
0000F46C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F46C                            
0000F46C                            
0000F46C                            
0000F46C                            ExecuteObjects: ; XREF: GM_Title; et al
0000F46C 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F470 7E7F                       		moveq #$7F,d7
0000F472 7000                       		moveq #0,d0
0000F474 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F47A 6400                       		bcc.s loc_D362
0000F47C                            
0000F47C                            loc_D348:
0000F47C 1010                       		move.b (a0),d0 ; load object number from RAM
0000F47E 6700                       		beq.s loc_D358
0000F480 D040                       		add.w d0,d0
0000F482 D040                       		add.w d0,d0
0000F484 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F488 4E91                       		jsr (a1) ; run the object's code
0000F48A 7000                       		moveq #0,d0
0000F48C                            
0000F48C                            loc_D358:
0000F48C 41E8 0040                  		lea $40(a0),a0 ; next object
0000F490 51CF FFEA                  		dbf d7,loc_D348
0000F494 4E75                       		rts
0000F496                            ; ===========================================================================
0000F496                            
0000F496                            loc_D362:
0000F496 7E1F                       		moveq #$1F,d7
0000F498 61E2                       		bsr.s loc_D348
0000F49A 7E5F                       		moveq #$5F,d7
0000F49C                            
0000F49C                            loc_D368:
0000F49C 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F49E 1010                       		move.b (a0),d0 ; get the object's ID
0000F4A0 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F4A2 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F4A6 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F4A8 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F4AC 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F4B2 6700                       		beq.s loc_D378 ; if not, branch
0000F4B4 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F4B8                            
0000F4B8                            loc_D378:
0000F4B8 6100 0000                  		bsr.w DisplaySprite2
0000F4BC                            		
0000F4BC                            loc_D37C:
0000F4BC 41E8 0040                  		lea $40(a0),a0
0000F4C0 51CF FFDA                  		dbf d7,loc_D368
0000F4C4 4E75                       		rts
0000F4C6                            ; End of function ExecuteObjects
0000F4C6                            
0000F4C6                            ; ===========================================================================
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            ; Object pointers
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            Obj_Index:
0000F4C6                            		include	"_inc\Object Pointers.asm"
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            ; Object pointers
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F4CA 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F4CE 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F4D2 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F4D6 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F4DA 0000 B222                  ptr_Mozzietron:		dc.l Mozzietron
0000F4DE 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F4E2 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F4E6 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F4EA 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F4EE 0000 0000                  ptr_Pole:		dc.l Pole
0000F4F2 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F4F6 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F4FA 0000 C648                  ptr_TitleSonic:		dc.l TitleSonic
0000F4FE 0000 C6C8                  ptr_PSBTM:		dc.l PSBTM
0000F502 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F506 0000 8D32                  ptr_Bridge:		dc.l Bridge
0000F50A 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F50E 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F512 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F516 0000 9358                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F51A 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F51E 0000 96A4                  ptr_Helix:		dc.l Helix
0000F522 0000 9830                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F526 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F52A 0000 9C0C                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F52E 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F532 0000 A214                  ptr_Scenery:		dc.l Scenery
0000F536 0000 A2B6                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F53A 0000 A59E                  ptr_BallHog:		dc.l BallHog
0000F53E 0000 AF38                  ptr_Crabmeat:		dc.l Crabmeat
0000F542 0000 A66C                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F546 0000 0000                  ptr_HUD:		dc.l HUD
0000F54A 0000 B354                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F54E 0000 B4A6                  ptr_Missile:		dc.l Missile
0000F552 0000 A73E                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F556 0000 B700                  ptr_Rings:		dc.l Rings
0000F55A 0000 BF4A                  ptr_Monitor:		dc.l Monitor
0000F55E 0000 A7AE                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F562 0000 A96C                  ptr_Animals:		dc.l Animals		; $28
0000F566 0000 AE5A                  ptr_Points:		dc.l Points
0000F56A 0000 A38C                  ptr_AutoDoor:		dc.l AutoDoor
0000F56E 0000 CC0C                  ptr_Chopper:		dc.l Chopper
0000F572 0000 CCC6                  ptr_Jaws:		dc.l Jaws
0000F576 0000 CD90                  ptr_Burrobot:		dc.l Burrobot
0000F57A 0000 C148                  ptr_PowerUp:		dc.l PowerUp
0000F57E 0000 CFA4                  ptr_LargeGrass:		dc.l LargeGrass
0000F582 0000 D486                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F586 0000 D762                  ptr_ChainStomp:		dc.l ChainStomp
0000F58A 0000 DE10                  ptr_Button:		dc.l Button
0000F58E 0000 DFB4                  ptr_PushBlock:		dc.l PushBlock
0000F592 0000 E3E6                  ptr_TitleCard:		dc.l TitleCard
0000F596 0000 D2C6                  ptr_GrassFire:		dc.l GrassFire
0000F59A 0000 EF26                  ptr_Spikes:		dc.l Spikes
0000F59E 0000 B95C                  ptr_RingLoss:		dc.l RingLoss
0000F5A2 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F5A6 0000 E596                  ptr_GameOverCard:	dc.l GameOverCard
0000F5AA 0000 E654                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F5AE 0000 F154                  ptr_PurpleRock:		dc.l PurpleRock
0000F5B2 0000 F220                  ptr_SmashWall:		dc.l SmashWall
0000F5B6 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F5BA 0000 0000                  ptr_Prison:		dc.l Prison
0000F5BE 0000 A840                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F5C2 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F5C6 0000 0000                  ptr_Springs:		dc.l Springs
0000F5CA 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F5CE 0000 0000                  ptr_Roller:		dc.l Roller
0000F5D2 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F5D6 0000 DA7E                  ptr_SideStomp:		dc.l SideStomp
0000F5DA 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F5DE 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F5E2 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F5E6 0000 F1C2                  ptr_WaterSound:		dc.l WaterSound
0000F5EA 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F5EE 0000 BC1E                  ptr_GiantRing:		dc.l GiantRing
0000F5F2 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F5F6 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F5FA 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F5FE 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F602 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F606 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F60A 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F60E 0000 9D1C                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F612 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F616 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F61A 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F61E 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F622 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F626 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F62A 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F62E 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F632 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F636 0000 0000                  ptr_Fan:		dc.l Fan
0000F63A 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F63E 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F642 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F646 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F64A 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F64E 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F652 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F656 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F65A 0000 0000                  ptr_Junction:		dc.l Junction
0000F65E 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F662 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F666 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F66A 0000 0000                  ptr_Saws:		dc.l Saws
0000F66E 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F672 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F676 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F67A 0000 0000                  ptr_Electro:		dc.l Electro
0000F67E 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F682 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F686 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F68A 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F68E 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F692 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F696 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F69A 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F69E 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F6A2 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F6A6 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F6AA 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F6AE 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F6B2 0000 BCF8                  ptr_RingFlash:		dc.l RingFlash
0000F6B6 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F6BA 0000 E898                  ptr_SSResult:		dc.l SSResult
0000F6BE 0000 EA3E                  ptr_SSRChaos:		dc.l SSRChaos
0000F6C2 0000 5BD8                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F6C6 0000 5CF0                  ptr_ContSonic:		dc.l ContSonic
0000F6CA 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F6CE 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F6D2 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F6D6 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F6DA 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F6DE 0000 617E                  ptr_EndSonic:		dc.l EndSonic
0000F6E2 0000 62D8                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F6E6 0000 63B2                  ptr_EndSTH:		dc.l EndSTH
0000F6EA 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F6EE 0000 6618                  ptr_EndEggman:		dc.l EndEggman
0000F6F2 0000 66F8                  ptr_TryChaos:		dc.l TryChaos
0000F6F6                            
0000F6F6                            NullObject:
0000F6F6                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F6F6                            
0000F6F6 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F6F6 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F6F6 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F6F6 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F6F6 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F6F6 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F6F6 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F6F6 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F6F6 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F6F6 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F6F6 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F6F6 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F6F6 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F6F6 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F6F6 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F6F6 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F6F6 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F6F6 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F6F6 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F6F6 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F6F6 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F6F6 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F6F6 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F6F6 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F6F6 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F6F6 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F6F6 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F6F6 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F6F6 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F6F6 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F6F6 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F6F6 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F6F6 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F6F6 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F6F6 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F6F6 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F6F6 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F6F6 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F6F6 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F6F6 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F6F6 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F6F6 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F6F6 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F6F6 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F6F6 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F6F6 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F6F6 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F6F6 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F6F6 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F6F6 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F6F6 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F6F6 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F6F6 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F6F6 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F6F6 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F6F6 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F6F6 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F6F6 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F6F6 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F6F6 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F6F6 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F6F6 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F6F6 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F6F6 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F6F6 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F6F6 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F6F6 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F6F6 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F6F6 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F6F6 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F6F6 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F6F6 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F6F6 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F6F6 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F6F6 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F6F6 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F6F6 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F6F6 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F6F6 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F6F6 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F6F6 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F6F6 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F6F6 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F6F6 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F6F6 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F6F6 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F6F6 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F6F6 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F6F6 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F6F6 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F6F6 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F6F6 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F6F6 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F6F6 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F6F6 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F6F6 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F6F6 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F6F6 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F6F6 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F6F6 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F6F6 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F6F6 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F6F6 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F6F6 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F6F6 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F6F6 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F6F6 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F6F6 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F6F6 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F6F6 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F6F6 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F6F6 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F6F6 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F6F6 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F6F6 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F6F6 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F6F6 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F6F6 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F6F6 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F6F6 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F6F6 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F6F6 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F6F6 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F6F6 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F6F6 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F6F6 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F6F6 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F6F6 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F6F6 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F6F6 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F6F6 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F6F6 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F6F6 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F6F6 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F6F6 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F6F6 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F6F6 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F6F6 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F6F6 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F6F6 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6F6 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6F6                            
0000F6F6                            		include	"_incObj\sub ObjectFall.asm"
0000F6F6                            ; ---------------------------------------------------------------------------
0000F6F6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F6F6                            ; ---------------------------------------------------------------------------
0000F6F6                            
0000F6F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6F6                            
0000F6F6                            
0000F6F6                            ObjectFall:
0000F6F6 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F6FC 6700                       		beq.s	@donothing
0000F6FE 3028 0010                  		move.w	obVelX(a0),d0
0000F702 48C0                       		ext.l	d0
0000F704 E188                       		lsl.l	#8,d0
0000F706 D1A8 0008                  		add.l	d0,obX(a0)
0000F70A 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F710 6F00                               ble.s   @skipline       ; if yes, branch
0000F712 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F718                                @skipline:		
0000F718 3028 0012                  		move.w	obVelY(a0),d0
0000F71C 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F722 48C0                       		ext.l	d0
0000F724 E188                       		lsl.l	#8,d0
0000F726 D1A8 000C                  		add.l	d0,obY(a0)
0000F72A 4E75                       		rts	
0000F72C                            	
0000F72C                            	@donothing:
0000F72C 4E75                       		rts
0000F72E                            
0000F72E                            ; End of function ObjectFall
0000F72E                            ; End of function ObjectFall
0000F72E                            		include	"_incObj\sub SpeedToPos.asm"
0000F72E                            ; ---------------------------------------------------------------------------
0000F72E                            ; Subroutine translating object	speed to update	object position
0000F72E                            ; ---------------------------------------------------------------------------
0000F72E                            
0000F72E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F72E                            
0000F72E                            
0000F72E                            SpeedToPos:
0000F72E 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F734 E188                       		lsl.l	#8,d0
0000F736 D1A8 0008                  		add.l	d0,obX(a0)
0000F73A E18A                       		lsl.l	#8,d2
0000F73C D5A8 000C                  		add.l	d2,obY(a0)
0000F740 4E75                       		rts
0000F742                            ; End of function SpeedToPos
0000F742                            ; End of function SpeedToPos
0000F742                            		include	"_incObj\sub DisplaySprite.asm"
0000F742                            ; ---------------------------------------------------------------------------
0000F742                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F742                            ; ---------------------------------------------------------------------------
0000F742                            
0000F742                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F742                            
0000F742                            
0000F742                            DisplaySprite:
0000F742 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F746 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F74A 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F74E 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F750 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F752 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F754 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F756                            
0000F756                                DSpr_Full:
0000F756 4E75                               rts    
0000F758                            
0000F758                            ; End of function DisplaySprite
0000F758                            
0000F758                            
0000F758                            ; ---------------------------------------------------------------------------
0000F758                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F758                            ; ---------------------------------------------------------------------------
0000F758                            
0000F758                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F758                            
0000F758                            
0000F758                            DisplaySprite1:
0000F758 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F75C D4E9 0018                          adda.w  obpriority(a1),a2
0000F760 0C52 007E                          cmpi.w    #$7E,(a2)
0000F764 6400                               bcc.s    DSpr1_Full
0000F766 5452                               addq.w    #2,(a2)
0000F768 D4D2                               adda.w    (a2),a2
0000F76A 3489                               move.w    a1,(a2)
0000F76C                            
0000F76C                                DSpr1_Full:
0000F76C 4E75                               rts    
0000F76E                            
0000F76E                            ; End of function DisplaySprite1
0000F76E                            
0000F76E                            ; ---------------------------------------------------------------------------
0000F76E                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F76E                            ; and d0 is already (priority/2)&$380
0000F76E                            ; ---------------------------------------------------------------------------
0000F76E                            
0000F76E                            ; loc_16530:
0000F76E                            DisplaySprite2:
0000F76E 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F772 D2C0                           adda.w    d0,a1
0000F774 0C51 007E                      cmpi.w    #$7E,(a1)
0000F778 6400                           bhs.s    return_16542
0000F77A 5451                           addq.w    #2,(a1)
0000F77C D2D1                           adda.w    (a1),a1
0000F77E 3288                           move.w    a0,(a1)
0000F780                            
0000F780                            return_16542:
0000F780 4E75                           rts
0000F780 4E75                           rts
0000F782                            		include	"_incObj\sub DeleteObject.asm"
0000F782                            ; ---------------------------------------------------------------------------
0000F782                            ; Subroutine to	delete an object
0000F782                            ; ---------------------------------------------------------------------------
0000F782                            
0000F782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F782                            
0000F782                            
0000F782                            DeleteObject:
0000F782 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F784                            
0000F784                            DeleteChild:				; child objects are already in (a1)
0000F784 7200                       		moveq	#0,d1
0000F786 700F                       		moveq	#$F,d0
0000F788                            
0000F788                            	DelObj_Loop:
0000F788 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F78A 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F78E 4E75                       		rts	
0000F790                            
0000F790                            ; End of function DeleteObject
0000F790                            ; End of function DeleteObject
0000F790                            
0000F790                            ; ===========================================================================
0000F790 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F794 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F798 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F79C 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            
0000F7A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7A0                            
0000F7A0                            
0000F7A0                            BuildSprites:
0000F7A0 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F7A4 7A00                       		moveq	#0,d5
0000F7A6 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F7AA 7E07                       		moveq	#7,d7
0000F7AC                            
0000F7AC                            	@priorityLoop:
0000F7AC 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F7AE 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F7B2 7C02                       		moveq	#2,d6
0000F7B4                            
0000F7B4                            	@objectLoop:
0000F7B4 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F7B8 4A10                       		tst.b	(a0)		; if null, branch
0000F7BA 6700 0000                  		beq.w	@skipObject
0000F7BE 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F7C4                            
0000F7C4 1028 0001                  		move.b	obRender(a0),d0
0000F7C8 1800                       		move.b	d0,d4
0000F7CA 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F7CE 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F7D0 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F7D4                            	; check object bounds
0000F7D4 7000                       		moveq	#0,d0
0000F7D6 1028 0014                  		move.b	obActWid(a0),d0
0000F7DA 3628 0008                  		move.w	obX(a0),d3
0000F7DE 9651                       		sub.w	(a1),d3
0000F7E0 3203                       		move.w	d3,d1
0000F7E2 D240                       		add.w	d0,d1
0000F7E4 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F7E8 3203                       		move.w	d3,d1
0000F7EA 9240                       		sub.w	d0,d1
0000F7EC 0C41 0140                  		cmpi.w	#320,d1
0000F7F0 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F7F2 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F7F6                            
0000F7F6 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F7FA 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F7FC 7000                       		moveq	#0,d0
0000F7FE 1028 0016                  		move.b	obHeight(a0),d0
0000F802 3428 000C                  		move.w	obY(a0),d2
0000F806 9469 0004                  		sub.w	4(a1),d2
0000F80A 3202                       		move.w	d2,d1
0000F80C D240                       		add.w	d0,d1
0000F80E 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F810 3202                       		move.w	d2,d1
0000F812 9240                       		sub.w	d0,d1
0000F814 0C41 00E0                  		cmpi.w	#224,d1
0000F818 6C00                       		bge.s	@skipObject
0000F81A 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F81E 6000                       		bra.s	@drawObject
0000F820                            ; ===========================================================================
0000F820                            
0000F820                            	@screenCoords:
0000F820 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F824 3628 0008                  		move.w	obX(a0),d3
0000F828 6000                       		bra.s	@drawObject
0000F82A                            ; ===========================================================================
0000F82A                            
0000F82A                            	@assumeHeight:
0000F82A 3428 000C                  		move.w	obY(a0),d2
0000F82E 9469 0004                  		sub.w	obMap(a1),d2
0000F832 0642 0080                  		addi.w	#$80,d2
0000F836 0C42 0060                  		cmpi.w	#$60,d2
0000F83A 6500                       		blo.s	@skipObject
0000F83C 0C42 0180                  		cmpi.w	#$180,d2
0000F840 6400                       		bhs.s	@skipObject
0000F842                            
0000F842                            	@drawObject:
0000F842 2268 0004                  		movea.l	obMap(a0),a1
0000F846 7200                       		moveq	#0,d1
0000F848 0804 0005                  		btst	#5,d4
0000F84C 6600                       		bne.s	@drawFrame
0000F84E 1228 001A                  		move.b	$1A(a0),d1
0000F852 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F854 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F858 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F85A 1219                       		move.b	(a1)+,d1
0000F85C 5301                       		subq.b	#1,d1
0000F85E 6B00                       		bmi.s	@setVisible
0000F860                            
0000F860                            	@drawFrame:
0000F860 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F864                            
0000F864                            	@setVisible:
0000F864 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F86A                            
0000F86A                            	@skipObject:
0000F86A 5446                       		addq.w	#2,d6
0000F86C 5554                       		subq.w	#2,(a4)			; number of objects left
0000F86E 6600 FF44                  		bne.w	@objectLoop
0000F872                            
0000F872                            	@nextPriority:
0000F872 49EC 0080                  		lea	$80(a4),a4
0000F876 51CF FF34                  		dbf	d7,@priorityLoop
0000F87A 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F87E 0C05 0050                  		cmpi.b	#$50,d5
0000F882 6700                       		beq.s	@spriteLimit
0000F884 24BC 0000 0000             		move.l	#0,(a2)
0000F88A 4E75                       		rts	
0000F88C                            ; ===========================================================================
0000F88C                            
0000F88C                            	@spriteLimit:
0000F88C 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F892 4E75                       		rts	
0000F894                            ; End of function BuildSprites
0000F894                            
0000F894                            
0000F894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F894                            
0000F894                            
0000F894                            BuildSpr_Draw:
0000F894 3668 0002                  		movea.w	obGfx(a0),a3
0000F898 0804 0000                  		btst	#0,d4
0000F89C 6600                       		bne.s	BuildSpr_FlipX
0000F89E 0804 0001                  		btst	#1,d4
0000F8A2 6600 0000                  		bne.w	BuildSpr_FlipY
0000F8A6                            ; End of function BuildSpr_Draw
0000F8A6                            
0000F8A6                            
0000F8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8A6                            
0000F8A6                            
0000F8A6                            BuildSpr_Normal:
0000F8A6 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8AA 6700                       		beq.s	@return
0000F8AC 1019                       		move.b	(a1)+,d0	; get y-offset
0000F8AE 4880                       		ext.w	d0
0000F8B0 D042                       		add.w	d2,d0		; add y-position
0000F8B2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8B4 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000F8B6 5205                       		addq.b	#1,d5		; increase sprite counter
0000F8B8 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000F8BA 1019                       		move.b	(a1)+,d0	; get art tile
0000F8BC E148                       		lsl.w	#8,d0
0000F8BE 1019                       		move.b	(a1)+,d0
0000F8C0 D04B                       		add.w	a3,d0		; add art tile offset
0000F8C2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8C4 1019                       		move.b	(a1)+,d0	; get x-offset
0000F8C6 4880                       		ext.w	d0
0000F8C8 D043                       		add.w	d3,d0		; add x-position
0000F8CA 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F8CE 6600                       		bne.s	@writeX
0000F8D0 5240                       		addq.w	#1,d0
0000F8D2                            
0000F8D2                            	@writeX:
0000F8D2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8D4 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000F8D8                            
0000F8D8                            	@return:
0000F8D8 4E75                       		rts	
0000F8DA                            ; End of function BuildSpr_Normal
0000F8DA                            
0000F8DA                            ; ===========================================================================
0000F8DA                            
0000F8DA                            BuildSpr_FlipX:
0000F8DA 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000F8DE 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000F8E2                            
0000F8E2                            	@loop:
0000F8E2 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8E6 6700                       		beq.s	@return
0000F8E8 1019                       		move.b	(a1)+,d0	; y position
0000F8EA 4880                       		ext.w	d0
0000F8EC D042                       		add.w	d2,d0
0000F8EE 34C0                       		move.w	d0,(a2)+
0000F8F0 1819                       		move.b	(a1)+,d4	; size
0000F8F2 14C4                       		move.b	d4,(a2)+	
0000F8F4 5205                       		addq.b	#1,d5		; link
0000F8F6 14C5                       		move.b	d5,(a2)+
0000F8F8 1019                       		move.b	(a1)+,d0	; art tile
0000F8FA E148                       		lsl.w	#8,d0
0000F8FC 1019                       		move.b	(a1)+,d0	
0000F8FE D04B                       		add.w	a3,d0
0000F900 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000F904 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F906 1019                       		move.b	(a1)+,d0	; get x-offset
0000F908 4880                       		ext.w	d0
0000F90A 4440                       		neg.w	d0			; negate it
0000F90C D804                       		add.b	d4,d4		; calculate flipped position by size
0000F90E 0244 0018                  		andi.w	#$18,d4
0000F912 5044                       		addq.w	#8,d4
0000F914 9044                       		sub.w	d4,d0
0000F916 D043                       		add.w	d3,d0
0000F918 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F91C 6600                       		bne.s	@writeX
0000F91E 5240                       		addq.w	#1,d0
0000F920                            
0000F920                            	@writeX:
0000F920 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F922 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000F926                            
0000F926                            	@return:
0000F926 4E75                       		rts	
0000F928                            ; ===========================================================================
0000F928                            
0000F928                            BuildSpr_FlipY:
0000F928 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F92C 6700                       		beq.s	@return
0000F92E 1019                       		move.b	(a1)+,d0	; get y-offset
0000F930 1811                       		move.b	(a1),d4		; get size
0000F932 4880                       		ext.w	d0
0000F934 4440                       		neg.w	d0		; negate y-offset
0000F936 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000F938 0244 0018                  		andi.w	#$18,d4
0000F93C 5044                       		addq.w	#8,d4
0000F93E 9044                       		sub.w	d4,d0
0000F940 D042                       		add.w	d2,d0	; add y-position
0000F942 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F944 14D9                       		move.b	(a1)+,(a2)+	; size
0000F946 5205                       		addq.b	#1,d5
0000F948 14C5                       		move.b	d5,(a2)+	; link
0000F94A 1019                       		move.b	(a1)+,d0	; art tile
0000F94C E148                       		lsl.w	#8,d0
0000F94E 1019                       		move.b	(a1)+,d0
0000F950 D04B                       		add.w	a3,d0
0000F952 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000F956 34C0                       		move.w	d0,(a2)+
0000F958 1019                       		move.b	(a1)+,d0	; x-position
0000F95A 4880                       		ext.w	d0
0000F95C D043                       		add.w	d3,d0
0000F95E 0240 01FF                  		andi.w	#$1FF,d0
0000F962 6600                       		bne.s	@writeX
0000F964 5240                       		addq.w	#1,d0
0000F966                            
0000F966                            	@writeX:
0000F966 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F968 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000F96C                            
0000F96C                            	@return:
0000F96C 4E75                       		rts	
0000F96E                            ; ===========================================================================
0000F96E                            
0000F96E                            BuildSpr_FlipXY:
0000F96E 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F972 6700                       		beq.s	@return
0000F974 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000F976 1811                       		move.b	(a1),d4
0000F978 4880                       		ext.w	d0
0000F97A 4440                       		neg.w	d0
0000F97C E70C                       		lsl.b	#3,d4
0000F97E 0244 0018                  		andi.w	#$18,d4
0000F982 5044                       		addq.w	#8,d4
0000F984 9044                       		sub.w	d4,d0
0000F986 D042                       		add.w	d2,d0
0000F988 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F98A 1819                       		move.b	(a1)+,d4	; size
0000F98C 14C4                       		move.b	d4,(a2)+	; link
0000F98E 5205                       		addq.b	#1,d5
0000F990 14C5                       		move.b	d5,(a2)+	; art tile
0000F992 1019                       		move.b	(a1)+,d0
0000F994 E148                       		lsl.w	#8,d0
0000F996 1019                       		move.b	(a1)+,d0
0000F998 D04B                       		add.w	a3,d0
0000F99A 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000F99E 34C0                       		move.w	d0,(a2)+
0000F9A0 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000F9A2 4880                       		ext.w	d0
0000F9A4 4440                       		neg.w	d0
0000F9A6 D804                       		add.b	d4,d4
0000F9A8 0244 0018                  		andi.w	#$18,d4
0000F9AC 5044                       		addq.w	#8,d4
0000F9AE 9044                       		sub.w	d4,d0
0000F9B0 D043                       		add.w	d3,d0
0000F9B2 0240 01FF                  		andi.w	#$1FF,d0
0000F9B6 6600                       		bne.s	@writeX
0000F9B8 5240                       		addq.w	#1,d0
0000F9BA                            
0000F9BA                            	@writeX:
0000F9BA 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9BC 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000F9C0                            
0000F9C0                            	@return:
0000F9C0 4E75                       		rts	
0000F9C2                            
0000F9C2                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F9C2                            ; ---------------------------------------------------------------------------
0000F9C2                            ; Subroutine to	check if an object is off screen
0000F9C2                            
0000F9C2                            ; output:
0000F9C2                            ;	d0 = flag set if object is off screen
0000F9C2                            ; ---------------------------------------------------------------------------
0000F9C2                            
0000F9C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9C2                            
0000F9C2                            
0000F9C2                            ChkObjectVisible:
0000F9C2 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F9C6 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F9CA 6B00                       		bmi.s	@offscreen
0000F9CC 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F9D0 6C00                       		bge.s	@offscreen	; if not, branch
0000F9D2                            
0000F9D2 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F9D6 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F9DA 6B00                       		bmi.s	@offscreen
0000F9DC 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F9E0 6C00                       		bge.s	@offscreen	; if not, branch
0000F9E2                            
0000F9E2 7000                       		moveq	#0,d0		; set flag to 0
0000F9E4 4E75                       		rts	
0000F9E6                            
0000F9E6                            	@offscreen:
0000F9E6 7001                       		moveq	#1,d0		; set flag to 1
0000F9E8 4E75                       		rts	
0000F9EA                            ; End of function ChkObjectVisible
0000F9EA                            
0000F9EA                            ; ---------------------------------------------------------------------------
0000F9EA                            ; Subroutine to	check if an object is off screen
0000F9EA                            ; More precise than above subroutine, taking width into account
0000F9EA                            
0000F9EA                            ; output:
0000F9EA                            ;	d0 = flag set if object is off screen
0000F9EA                            ; ---------------------------------------------------------------------------
0000F9EA                            
0000F9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9EA                            
0000F9EA                            
0000F9EA                            ChkPartiallyVisible:
0000F9EA 7200                       		moveq	#0,d1
0000F9EC 1228 0014                  		move.b	obActWid(a0),d1
0000F9F0 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F9F4 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F9F8 D041                       		add.w	d1,d0		; add object width
0000F9FA 6B00                       		bmi.s	@offscreen2
0000F9FC D241                       		add.w	d1,d1
0000F9FE 9041                       		sub.w	d1,d0
0000FA00 0C40 0140                  		cmpi.w	#320,d0
0000FA04 6C00                       		bge.s	@offscreen2
0000FA06                            
0000FA06 3228 000C                  		move.w	obY(a0),d1
0000FA0A 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FA0E 6B00                       		bmi.s	@offscreen2
0000FA10 0C41 00E0                  		cmpi.w	#224,d1
0000FA14 6C00                       		bge.s	@offscreen2
0000FA16                            
0000FA16 7000                       		moveq	#0,d0
0000FA18 4E75                       		rts	
0000FA1A                            
0000FA1A                            	@offscreen2:
0000FA1A 7001                       		moveq	#1,d0
0000FA1C 4E75                       		rts	
0000FA1E                            ; End of function ChkPartiallyVisible
0000FA1E                            ; End of function ChkPartiallyVisible
0000FA1E                            
0000FA1E                            ; ---------------------------------------------------------------------------
0000FA1E                            ; Subroutine to	load a level's objects
0000FA1E                            ; ---------------------------------------------------------------------------
0000FA1E                            
0000FA1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA1E                            
0000FA1E                            
0000FA1E                            ObjPosLoad:
0000FA1E 7000                       		moveq	#0,d0
0000FA20 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FA24 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FA28 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FA2C                            ; End of function ObjPosLoad
0000FA2C                            
0000FA2C                            ; ===========================================================================
0000FA2C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FA2E 0000                       		dc.w OPL_Next-OPL_Index
0000FA30                            ; ===========================================================================
0000FA30                            
0000FA30                            OPL_Main:
0000FA30 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FA34 3038 FE10                  		move.w	(v_zone).w,d0
0000FA38 ED08                       		lsl.b	#6,d0
0000FA3A E848                       		lsr.w	#4,d0
0000FA3C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FA42 2248                       		movea.l	a0,a1
0000FA44 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FA48 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA4C 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA50 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FA54 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FA58 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FA5C 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA60 34FC 0101                  		move.w	#$101,(a2)+
0000FA64 303C 005E                  		move.w	#$5E,d0
0000FA68                            
0000FA68                            OPL_ClrList:
0000FA68 429A                       		clr.l	(a2)+
0000FA6A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FA6E                            
0000FA6E 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA72 7400                       		moveq	#0,d2
0000FA74 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA78 0446 0080                  		subi.w	#$80,d6
0000FA7C 6400                       		bhs.s	loc_D93C
0000FA7E 7C00                       		moveq	#0,d6
0000FA80                            
0000FA80                            loc_D93C:
0000FA80 0246 FF80                  		andi.w	#$FF80,d6
0000FA84 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FA88                            
0000FA88                            loc_D944:
0000FA88 BC50                       		cmp.w	(a0),d6
0000FA8A 6300                       		bls.s	loc_D956
0000FA8C 4A28 0004                  		tst.b	4(a0)
0000FA90 6A00                       		bpl.s	loc_D952
0000FA92 1412                       		move.b	(a2),d2
0000FA94 5212                       		addq.b	#1,(a2)
0000FA96                            
0000FA96                            loc_D952:
0000FA96 5C48                       		addq.w	#6,a0
0000FA98 60EE                       		bra.s	loc_D944
0000FA9A                            ; ===========================================================================
0000FA9A                            
0000FA9A                            loc_D956:
0000FA9A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA9E 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FAA2 0446 0080                  		subi.w	#$80,d6
0000FAA6 6500                       		blo.s	loc_D976
0000FAA8                            
0000FAA8                            loc_D964:
0000FAA8 BC50                       		cmp.w	(a0),d6
0000FAAA 6300                       		bls.s	loc_D976
0000FAAC 4A28 0004                  		tst.b	4(a0)
0000FAB0 6A00                       		bpl.s	loc_D972
0000FAB2 522A 0001                  		addq.b	#1,1(a2)
0000FAB6                            
0000FAB6                            loc_D972:
0000FAB6 5C48                       		addq.w	#6,a0
0000FAB8 60EE                       		bra.s	loc_D964
0000FABA                            ; ===========================================================================
0000FABA                            
0000FABA                            loc_D976:
0000FABA 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FABE 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FAC4                            
0000FAC4                            OPL_Next:
0000FAC4 45F8 FC00                  		lea	(v_objstate).w,a2
0000FAC8 7400                       		moveq	#0,d2
0000FACA 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FACE 0246 FF80                  		andi.w	#$FF80,d6
0000FAD2 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FAD6 6700 0000                  		beq.w	locret_DA3A
0000FADA 6C00                       		bge.s	loc_D9F6
0000FADC 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FAE0 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FAE4 0446 0080                  		subi.w	#$80,d6
0000FAE8 6500                       		blo.s	loc_D9D2
0000FAEA                            
0000FAEA                            loc_D9A6:
0000FAEA BC68 FFFA                  		cmp.w	-6(a0),d6
0000FAEE 6C00                       		bge.s	loc_D9D2
0000FAF0 5D48                       		subq.w	#6,a0
0000FAF2 4A28 0004                  		tst.b	4(a0)
0000FAF6 6A00                       		bpl.s	loc_D9BC
0000FAF8 532A 0001                  		subq.b	#1,1(a2)
0000FAFC 142A 0001                  		move.b	1(a2),d2
0000FB00                            
0000FB00                            loc_D9BC:
0000FB00 6100 0000                  		bsr.w	loc_DA3C
0000FB04 6600                       		bne.s	loc_D9C6
0000FB06 5D48                       		subq.w	#6,a0
0000FB08 60E0                       		bra.s	loc_D9A6
0000FB0A                            ; ===========================================================================
0000FB0A                            
0000FB0A                            loc_D9C6:
0000FB0A 4A28 0004                  		tst.b	4(a0)
0000FB0E 6A00                       		bpl.s	loc_D9D0
0000FB10 522A 0001                  		addq.b	#1,1(a2)
0000FB14                            
0000FB14                            loc_D9D0:
0000FB14 5C48                       		addq.w	#6,a0
0000FB16                            
0000FB16                            loc_D9D2:
0000FB16 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB1A 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FB1E 0646 0300                  		addi.w	#$300,d6
0000FB22                            
0000FB22                            loc_D9DE:
0000FB22 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FB26 6E00                       		bgt.s	loc_D9F0
0000FB28 4A28 FFFE                  		tst.b	-2(a0)
0000FB2C 6A00                       		bpl.s	loc_D9EC
0000FB2E 5312                       		subq.b	#1,(a2)
0000FB30                            
0000FB30                            loc_D9EC:
0000FB30 5D48                       		subq.w	#6,a0
0000FB32 60EE                       		bra.s	loc_D9DE
0000FB34                            ; ===========================================================================
0000FB34                            
0000FB34                            loc_D9F0:
0000FB34 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB38 4E75                       		rts	
0000FB3A                            ; ===========================================================================
0000FB3A                            
0000FB3A                            loc_D9F6:
0000FB3A 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FB3E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FB42 0646 0280                  		addi.w	#$280,d6
0000FB46                            
0000FB46                            loc_DA02:
0000FB46 BC50                       		cmp.w	(a0),d6
0000FB48 6300                       		bls.s	loc_DA16
0000FB4A 4A28 0004                  		tst.b	4(a0)
0000FB4E 6A00                       		bpl.s	loc_DA10
0000FB50 1412                       		move.b	(a2),d2
0000FB52 5212                       		addq.b	#1,(a2)
0000FB54                            
0000FB54                            loc_DA10:
0000FB54 6100 0000                  		bsr.w	loc_DA3C
0000FB58 67EC                       		beq.s	loc_DA02
0000FB5A                            
0000FB5A                            loc_DA16:
0000FB5A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB5E 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FB62 0446 0300                  		subi.w	#$300,d6
0000FB66 6500                       		blo.s	loc_DA36
0000FB68                            
0000FB68                            loc_DA24:
0000FB68 BC50                       		cmp.w	(a0),d6
0000FB6A 6300                       		bls.s	loc_DA36
0000FB6C 4A28 0004                  		tst.b	4(a0)
0000FB70 6A00                       		bpl.s	loc_DA32
0000FB72 522A 0001                  		addq.b	#1,1(a2)
0000FB76                            
0000FB76                            loc_DA32:
0000FB76 5C48                       		addq.w	#6,a0
0000FB78 60EE                       		bra.s	loc_DA24
0000FB7A                            ; ===========================================================================
0000FB7A                            
0000FB7A                            loc_DA36:
0000FB7A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB7E                            
0000FB7E                            locret_DA3A:
0000FB7E 4E75                       		rts	
0000FB80                            ; ===========================================================================
0000FB80                            
0000FB80                            loc_DA3C:
0000FB80 4A28 0004                  		tst.b	4(a0)
0000FB84 6A00                       		bpl.s	OPL_MakeItem
0000FB86 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FB8C 6700                       		beq.s	OPL_MakeItem
0000FB8E 5C48                       		addq.w	#6,a0
0000FB90 7000                       		moveq	#0,d0
0000FB92 4E75                       		rts	
0000FB94                            ; ===========================================================================
0000FB94                            
0000FB94                            OPL_MakeItem:
0000FB94 6100 0000                  		bsr.w	FindFreeObj
0000FB98 6600                       		bne.s	locret_DA8A
0000FB9A 3358 0008                  		move.w	(a0)+,obX(a1)
0000FB9E 3018                       		move.w	(a0)+,d0
0000FBA0 3200                       		move.w	d0,d1
0000FBA2 0240 0FFF                  		andi.w	#$FFF,d0
0000FBA6 3340 000C                  		move.w	d0,obY(a1)
0000FBAA E559                       		rol.w	#2,d1
0000FBAC 0201 0003                  		andi.b	#3,d1
0000FBB0 1341 0001                  		move.b	d1,obRender(a1)
0000FBB4 1341 0022                  		move.b	d1,obStatus(a1)
0000FBB8 1018                       		move.b	(a0)+,d0
0000FBBA 6A00                       		bpl.s	loc_DA80
0000FBBC 0200 007F                  		andi.b	#$7F,d0
0000FBC0 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FBC4                            
0000FBC4                            loc_DA80:
0000FBC4 1280                       		move.b	d0,0(a1)
0000FBC6 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FBCA 7000                       		moveq	#0,d0
0000FBCC                            
0000FBCC                            locret_DA8A:
0000FBCC 4E75                       		rts	
0000FBCE                            
0000FBCE                            		include	"_incObj\sub FindFreeObj.asm"
0000FBCE                            ; ---------------------------------------------------------------------------
0000FBCE                            ; Subroutine to find a free object space
0000FBCE                            
0000FBCE                            ; output:
0000FBCE                            ;	a1 = free position in object RAM
0000FBCE                            ; ---------------------------------------------------------------------------
0000FBCE                            
0000FBCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBCE                            
0000FBCE                            
0000FBCE                            FindFreeObj:
0000FBCE 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FBD2 303C 005F                  		move.w	#$5F,d0
0000FBD6                            
0000FBD6                            	FFree_Loop:
0000FBD6 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FBD8 6700                       		beq.s	FFree_Found	; if yes, branch
0000FBDA 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FBDE 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FBE2                            
0000FBE2                            	FFree_Found:
0000FBE2 4E75                       		rts	
0000FBE4                            
0000FBE4                            ; End of function FindFreeObj
0000FBE4                            
0000FBE4                            
0000FBE4                            ; ---------------------------------------------------------------------------
0000FBE4                            ; Subroutine to find a free object space AFTER the current one
0000FBE4                            
0000FBE4                            ; output:
0000FBE4                            ;	a1 = free position in object RAM
0000FBE4                            ; ---------------------------------------------------------------------------
0000FBE4                            
0000FBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBE4                            
0000FBE4                            
0000FBE4                            FindNextFreeObj:
0000FBE4 2248                       		movea.l	a0,a1
0000FBE6 303C F000                  		move.w	#$F000,d0
0000FBEA 9048                       		sub.w	a0,d0
0000FBEC EC48                       		lsr.w	#6,d0
0000FBEE 5340                       		subq.w	#1,d0
0000FBF0 6500                       		bcs.s	NFree_Found
0000FBF2                            
0000FBF2                            	NFree_Loop:
0000FBF2 4A11                       		tst.b	(a1)
0000FBF4 6700                       		beq.s	NFree_Found
0000FBF6 43E9 0040                  		lea	$40(a1),a1
0000FBFA 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FBFE                            
0000FBFE                            	NFree_Found:
0000FBFE 4E75                       		rts	
0000FC00                            
0000FC00                            ; End of function FindNextFreeObj
0000FC00                            ; End of function FindNextFreeObj
0000FC00                            		include	"_incObj\41 Springs.asm"
0000FC00                            ; ---------------------------------------------------------------------------
0000FC00                            ; Object 41 - springs
0000FC00                            ; ---------------------------------------------------------------------------
0000FC00                            
0000FC00                            Springs:
0000FC00 7000                       		moveq	#0,d0
0000FC02 1028 0024                  		move.b	obRoutine(a0),d0
0000FC06 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FC0A 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FC0E 6100 FB32                  		bsr.w	DisplaySprite
0000FC30 4E75                       		rts	
0000FC32                            ; ===========================================================================
0000FC32 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FC34 0000                       		dc.w Spring_Up-Spring_Index
0000FC36 0000                       		dc.w Spring_AniUp-Spring_Index
0000FC38 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FC3A 0000                       		dc.w Spring_LR-Spring_Index
0000FC3C 0000                       		dc.w Spring_AniLR-Spring_Index
0000FC3E 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FC40 0000                       		dc.w Spring_Dwn-Spring_Index
0000FC42 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FC44 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FC46                            
0000FC46 =00000030                  spring_pow:	equ $30			; power of current spring
0000FC46                            
0000FC46 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FC48 F600                       		dc.w -$A00		; power	of yellow spring
0000FC4A                            ; ===========================================================================
0000FC4A                            
0000FC4A                            Spring_Main:	; Routine 0
0000FC4A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC4E 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FC56 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FC5C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FC62 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FC68 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FC6E 1028 0028                  		move.b	obSubtype(a0),d0
0000FC72 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FC76 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FC78                            
0000FC78 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FC7E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FC84 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FC8A 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FC90 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FC96                            
0000FC96                            	Spring_NotLR:
0000FC96 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FC9A 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FC9C                            
0000FC9C 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FCA2 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FCA8                            
0000FCA8                            	Spring_NotDwn:
0000FCA8 0800 0001                  		btst	#1,d0
0000FCAC 6700                       		beq.s	loc_DB72
0000FCAE 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FCB4                            
0000FCB4                            loc_DB72:
0000FCB4 0240 000F                  		andi.w	#$F,d0
0000FCB8 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FCBE 4E75                       		rts	
0000FCC0                            ; ===========================================================================
0000FCC0                            
0000FCC0                            Spring_Up:	; Routine 2
0000FCC0 323C 001B                  		move.w	#$1B,d1
0000FCC4 343C 0008                  		move.w	#8,d2
0000FCC8 363C 0010                  		move.w	#$10,d3
0000FCCC 3828 0008                  		move.w	obX(a0),d4
0000FCD0 6100 0000                  		bsr.w	SolidObject
0000FCD4 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FCD8 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FCDA 4E75                       		rts	
0000FCDC                            ; ===========================================================================
0000FCDC                            
0000FCDC                            Spring_BounceUp:
0000FCDC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCE0 5069 000C                  		addq.w	#8,obY(a1)
0000FCE4 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FCEA 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FCF0 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FCF6 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FCFC 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FD02 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FD08 4228 0025                  		clr.b	obSolid(a0)
0000FD16                            
0000FD16                            Spring_AniUp:	; Routine 4
0000FD16 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD1C 6000 CAE6                  		bra.w	AnimateSprite
0000FD20                            ; ===========================================================================
0000FD20                            
0000FD20                            Spring_ResetUp:	; Routine 6
0000FD20 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FD26 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FD2A 4E75                       		rts	
0000FD2C                            ; ===========================================================================
0000FD2C                            
0000FD2C                            Spring_LR:	; Routine 8
0000FD2C 323C 0013                  		move.w	#$13,d1
0000FD30 343C 000E                  		move.w	#$E,d2
0000FD34 363C 000F                  		move.w	#$F,d3
0000FD38 3828 0008                  		move.w	obX(a0),d4
0000FD3C 6100 0000                  		bsr.w	SolidObject
0000FD40 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD46 6600                       		bne.s	loc_DC0C
0000FD48 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FD4E                            
0000FD4E                            loc_DC0C:
0000FD4E 0828 0005 0022             		btst	#5,obStatus(a0)
0000FD54 6600                       		bne.s	Spring_BounceLR
0000FD56 4E75                       		rts	
0000FD58                            ; ===========================================================================
0000FD58                            
0000FD58                            Spring_BounceLR:
0000FD58 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD5C 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FD62 5069 0008                  		addq.w	#8,obX(a1)
0000FD66 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FD6C 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FD6E 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FD74 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FD78                            
0000FD78                            	Spring_Flipped:
0000FD78 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FD7E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FD84 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FD8A 0829 0002 0022             		btst	#2,obStatus(a1)
0000FD90 6600                       		bne.s	loc_DC56
0000FD92 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FD98                            
0000FD98                            loc_DC56:
0000FD98 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FD9E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FDAE                            
0000FDAE                            Spring_AniLR:	; Routine $A
0000FDAE 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FDB2 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FDB8 6000 CA4A                  		bra.w	AnimateSprite
0000FDBC                            ; ===========================================================================
0000FDBC                            
0000FDBC                            Spring_ResetLR:	; Routine $C
0000FDBC 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FDC2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FDC6 4E75                       		rts	
0000FDC8                            ; ===========================================================================
0000FDC8                            
0000FDC8                            Spring_Dwn:	; Routine $E
0000FDC8 323C 001B                  		move.w	#$1B,d1
0000FDCC 343C 0008                  		move.w	#8,d2
0000FDD0 363C 0010                  		move.w	#$10,d3
0000FDD4 3828 0008                  		move.w	obX(a0),d4
0000FDD8 6100 0000                  		bsr.w	SolidObject
0000FDDC 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FDE2 6600                       		bne.s	loc_DCA4
0000FDE4 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FDEA                            
0000FDEA                            loc_DCA4:
0000FDEA 4A28 0025                  		tst.b	obSolid(a0)
0000FDEE 6600                       		bne.s	locret_DCAE
0000FDF0 4A44                       		tst.w	d4
0000FDF2 6B00                       		bmi.s	Spring_BounceDwn
0000FDF4                            
0000FDF4                            locret_DCAE:
0000FDF4 4E75                       		rts	
0000FDF6                            ; ===========================================================================
0000FDF6                            
0000FDF6                            Spring_BounceDwn:
0000FDF6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDFA 5169 000C                  		subq.w	#8,obY(a1)
0000FDFE 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FE04 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FE08 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FE0E 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FE14 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE1A 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE20 4228 0025                  		clr.b	obSolid(a0)
0000FE2E                            
0000FE2E                            Spring_AniDwn:	; Routine $10
0000FE2E 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FE34 6000 C9CE                  		bra.w	AnimateSprite
0000FE38                            ; ===========================================================================
0000FE38                            
0000FE38                            Spring_ResetDwn:
0000FE38                            		; Routine $12
0000FE38 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE3E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FE42 4E75                       		rts	
0000FE42 4E75                       		rts	
0000FE44                            		include	"_anim\Springs.asm"
0000FE44                            ; ---------------------------------------------------------------------------
0000FE44                            ; Animation script - springs
0000FE44                            ; ---------------------------------------------------------------------------
0000FE44 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FE46 0000                       		dc.w byte_DD0E-Ani_Spring
0000FE48 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FE54 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FE60                            		even
0000FE60                            		even
0000FE60                            Map_Spring:	include	"_maps\Springs.asm"
0000FE60                            ; ---------------------------------------------------------------------------
0000FE60                            ; Sprite mappings - springs
0000FE60                            ; ---------------------------------------------------------------------------
0000FE60                            Map_Spring_internal:
0000FE60 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FE62 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FE64 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FE66 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FE68 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FE6A 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FE6C 02                         M_Spg_Up:	dc.b 2			; facing up
0000FE6D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FE72 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FE77 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FE78 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FE7D 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FE7E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FE83 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FE88 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FE8D 01                         M_Spg_Left:	dc.b 1			; facing left
0000FE8E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FE93 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FE94 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FE99 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FE9A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FE9F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FEA4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FEA9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FEAE                            		even
0000FEAE                            		even
0000FEAE                            
0000FEAE                            		include	"_incObj\42 Newtron.asm"
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            ; Object 42 - Newtron enemy (GHZ)
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            
0000FEAE                            Newtron:
0000FEAE 7000                       		moveq	#0,d0
0000FEB0 1028 0024                  		move.b	obRoutine(a0),d0
0000FEB4 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FEB8 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FEBC                            ; ===========================================================================
0000FEBC 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FEBE 0000                       		dc.w Newt_Action-Newt_Index
0000FEC0 0000                       		dc.w Newt_Delete-Newt_Index
0000FEC2                            ; ===========================================================================
0000FEC2                            
0000FEC2                            Newt_Main:	; Routine 0
0000FEC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FEC6 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FECE 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FED4 117C 0004 0001             		move.b	#4,obRender(a0)
0000FEDA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEE0 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FEE6 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FEEC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FEF2                            
0000FEF2                            Newt_Action:	; Routine 2
0000FEF2 7000                       		moveq	#0,d0
0000FEF4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FEF8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FEFC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FF00 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FF06 6100 C8FC                  		bsr.w	AnimateSprite
0000FF0A 6000 0000                  		bra.w	RememberState
0000FF0E                            ; ===========================================================================
0000FF0E 0000                       @index:		dc.w @chkdistance-@index
0000FF10 0000                       		dc.w @type00-@index
0000FF12 0000                       		dc.w @matchfloor-@index
0000FF14 0000                       		dc.w @speed-@index
0000FF16 0000                       		dc.w @type01-@index
0000FF18                            ; ===========================================================================
0000FF18                            
0000FF18                            @chkdistance:
0000FF18 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF1E 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF22 9068 0008                  		sub.w	obX(a0),d0
0000FF26 6400                       		bcc.s	@sonicisright
0000FF28 4440                       		neg.w	d0
0000FF2A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF30                            
0000FF30                            	@sonicisright:
0000FF30 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FF34 6400                       		bcc.s	@outofrange	; if not, branch
0000FF36 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FF3A 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FF40 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FF44 6700                       		beq.s	@istype00	; if type is 00, branch
0000FF46                            
0000FF46 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FF4C 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FF52 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FF58                            
0000FF58                            	@outofrange:
0000FF58                            	@istype00:
0000FF58 4E75                       		rts	
0000FF5A                            ; ===========================================================================
0000FF5A                            
0000FF5A                            @type00:
0000FF5A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FF60 6400                       		bcc.s	@fall		; is yes, branch
0000FF62 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF68 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF6C 9068 0008                  		sub.w	obX(a0),d0
0000FF70 6400                       		bcc.s	@sonicisright2
0000FF72 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF78                            
0000FF78                            	@sonicisright2:
0000FF78 4E75                       		rts	
0000FF7A                            ; ===========================================================================
0000FF7A                            
0000FF7A                            	@fall:
0000FF7A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FF80 6600                       		bne.s	@loc_DE42
0000FF82 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FF88                            
0000FF88                            	@loc_DE42:
0000FF88 6100 F76C                  		bsr.w	ObjectFall
0000FF8C 6100 0000                  		bsr.w	ObjFloorDist
0000FF90 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FF92 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FF94                            
0000FF94 D368 000C                  		add.w	d1,obY(a0)
0000FF98 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FF9E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FFA2 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FFA8 0828 0005 0002             		btst	#5,obGfx(a0)
0000FFAE 6700                       		beq.s	@pppppppp
0000FFB0 5228 001C                  		addq.b	#1,obAnim(a0)
0000FFB4                            
0000FFB4                            	@pppppppp:
0000FFB4 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FFBA 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FFC0 0828 0000 0022             		btst	#0,obStatus(a0)
0000FFC6 6600                       		bne.s	@keepfalling
0000FFC8 4468 0010                  		neg.w	obVelX(a0)
0000FFCC                            
0000FFCC                            	@keepfalling:
0000FFCC 4E75                       		rts	
0000FFCE                            ; ===========================================================================
0000FFCE                            
0000FFCE                            @matchfloor:
0000FFCE 6100 F75E                  		bsr.w	SpeedToPos
0000FFD2 6100 0000                  		bsr.w	ObjFloorDist
0000FFD6 0C41 FFF8                  		cmpi.w	#-8,d1
0000FFDA 6D00                       		blt.s	@nextroutine
0000FFDC 0C41 000C                  		cmpi.w	#$C,d1
0000FFE0 6C00                       		bge.s	@nextroutine
0000FFE2 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FFE6 4E75                       		rts	
0000FFE8                            ; ===========================================================================
0000FFE8                            
0000FFE8                            	@nextroutine:
0000FFE8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FFEC 4E75                       		rts	
0000FFEE                            ; ===========================================================================
0000FFEE                            
0000FFEE                            @speed:
0000FFEE 6100 F73E                  		bsr.w	SpeedToPos
0000FFF2 4E75                       		rts	
0000FFF4                            ; ===========================================================================
0000FFF4                            
0000FFF4                            @type01:
0000FFF4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FFFA 6600                       		bne.s	@firemissile
0000FFFC 117C 000C 0020             		move.b	#$C,obColType(a0)
00010002                            
00010002                            	@firemissile:
00010002 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010008 6600                       		bne.s	@fail
0001000A 4A28 0032                  		tst.b	$32(a0)
0001000E 6600                       		bne.s	@fail
00010010 117C 0001 0032             		move.b	#1,$32(a0)
00010016 6100 FBB6                  		bsr.w	FindFreeObj
0001001A 6600                       		bne.s	@fail
0001001C 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010020 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010026 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001002C 5169 000C                  		subq.w	#8,obY(a1)
00010030 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010036 303C 0014                  		move.w	#$14,d0
0001003A 0828 0000 0022             		btst	#0,obStatus(a0)
00010040 6600                       		bne.s	@noflip
00010042 4440                       		neg.w	d0
00010044 4469 0010                  		neg.w	obVelX(a1)
00010048                            
00010048                            	@noflip:
00010048 D169 0008                  		add.w	d0,obX(a1)
0001004C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010052 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010058                            
00010058                            	@fail:
00010058 4E75                       		rts	
0001005A                            ; ===========================================================================
0001005A                            
0001005A                            Newt_Delete:	; Routine 4
0001005A 6000 F726                  		bra.w	DeleteObject
0001005A 6000 F726                  		bra.w	DeleteObject
0001005E                            		include	"_anim\Newtron.asm"
0001005E                            ; ---------------------------------------------------------------------------
0001005E                            ; Animation script - Newtron enemy
0001005E                            ; ---------------------------------------------------------------------------
0001005E 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010060 0000                       		dc.w A_Newt_Drop-Ani_Newt
00010062 0000                       		dc.w A_Newt_Fly1-Ani_Newt
00010064 0000                       		dc.w A_Newt_Fly2-Ani_Newt
00010066 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010068 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0001006C 00                         		even
0001006C 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
00010074 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010078 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0001007C 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
00010086 00                         		even
00010086 00                         		even
00010086                            Map_Newt:	include	"_maps\Newtron.asm"
00010086                            ; ---------------------------------------------------------------------------
00010086                            ; Sprite mappings - Newtron enemy (GHZ)
00010086                            ; ---------------------------------------------------------------------------
00010086                            Map_Newt_internal:
00010086 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010088 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0001008A 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0001008C 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0001008E 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
00010090 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
00010092 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
00010094 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
00010096 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010098 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0001009A 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0001009C 03                         M_Newt_Trans:	dc.b 3
0001009D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000100A2 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000100A7 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000100AC 03                         M_Newt_Norm:	dc.b 3
000100AD EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000100B2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000100B7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000100BC 03                         M_Newt_Fires:	dc.b 3
000100BD EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000100C2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000100C7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000100CC 04                         M_Newt_Drop1:	dc.b 4
000100CD EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
000100D2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000100D7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
000100DC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
000100E1 03                         M_Newt_Drop2:	dc.b 3
000100E2 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000100E7 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000100EC 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000100F1 02                         M_Newt_Drop3:	dc.b 2
000100F2 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100F7 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100FC 03                         M_Newt_Fly1a:	dc.b 3
000100FD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
00010102 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010107 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0001010C 03                         M_Newt_Fly1b:	dc.b 3
0001010D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010112 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010117 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0001011C 03                         M_Newt_Fly2a:	dc.b 3
0001011D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010122 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010127 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0001012C 03                         M_Newt_Fly2b:	dc.b 3
0001012D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010132 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010137 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0001013C 00                         M_Newt_Blank:	dc.b 0
0001013E 00                         		even
0001013E 00                         		even
0001013E                            		include	"_incObj\43 Roller.asm"
0001013E                            ; ---------------------------------------------------------------------------
0001013E                            ; Object 43 - Roller enemy (SYZ)
0001013E                            ; ---------------------------------------------------------------------------
0001013E                            
0001013E                            Roller:
0001013E 7000                       		moveq	#0,d0
00010140 1028 0024                  		move.b	obRoutine(a0),d0
00010144 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010148 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0001014C                            ; ===========================================================================
0001014C 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0001014E 0000                       		dc.w Roll_Action-Roll_Index
00010150                            ; ===========================================================================
00010150                            
00010150                            Roll_Main:	; Routine 0
00010150 117C 000E 0016             		move.b	#$E,obHeight(a0)
00010156 117C 0008 0017             		move.b	#8,obWidth(a0)
0001015C 6100 F598                  		bsr.w	ObjectFall
00010160 6100 0000                  		bsr.w	ObjFloorDist
00010164 4A41                       		tst.w	d1
00010166 6A00                       		bpl.s	locret_E052
00010168 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0001016C 317C 0000 0012             		move.w	#0,obVelY(a0)
00010172 5428 0024                  		addq.b	#2,obRoutine(a0)
00010176 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0001017E 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010184 117C 0004 0001             		move.b	#4,obRender(a0)
0001018A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010190 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010196                            
00010196                            	locret_E052:
00010196 4E75                       		rts	
00010198                            ; ===========================================================================
00010198                            
00010198                            Roll_Action:	; Routine 2
00010198 7000                       		moveq	#0,d0
0001019A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001019E 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000101A2 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000101A6 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000101AC 6100 C656                  		bsr.w	AnimateSprite
000101B0 3028 0008                  		move.w	obX(a0),d0
000101B4 0240 FF80                  		andi.w	#$FF80,d0
000101B8 3238 F700                  		move.w	(v_screenposx).w,d1
000101BC 0441 0080                  		subi.w	#$80,d1
000101C0 0241 FF80                  		andi.w	#$FF80,d1
000101C4 9041                       		sub.w	d1,d0
000101C6 0C40 0280                  		cmpi.w	#$280,d0
000101CA 6E00 0000                  		bgt.w	Roll_ChkGone
000101CE 6000 F572                  		bra.w	DisplaySprite
000101D2                            ; ===========================================================================
000101D2                            
000101D2                            Roll_ChkGone:
000101D2 45F8 FC00                  		lea	(v_objstate).w,a2
000101D6 7000                       		moveq	#0,d0
000101D8 1028 0023                  		move.b	obRespawnNo(a0),d0
000101DC 6700                       		beq.s	Roll_Delete
000101DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101E4                            
000101E4                            Roll_Delete:
000101E4 6000 F59C                  		bra.w	DeleteObject
000101E8                            ; ===========================================================================
000101E8 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000101EA 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000101EC 0000                       		dc.w Roll_ChkJump-Roll_Index2
000101EE 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000101F0                            ; ===========================================================================
000101F0                            
000101F0                            Roll_RollChk:
000101F0 3038 D008                  		move.w	(v_player+obX).w,d0
000101F4 0440 0100                  		subi.w	#$100,d0
000101F8 6500                       		bcs.s	loc_E0D2
000101FA 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
000101FE 6500                       		bcs.s	loc_E0D2
00010200 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010204 117C 0002 001C             		move.b	#2,obAnim(a0)
0001020A 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010210 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010216                            
00010216                            loc_E0D2:
00010216 588F                       		addq.l	#4,sp
00010218 4E75                       		rts	
0001021A                            ; ===========================================================================
0001021A                            
0001021A                            Roll_RollNoChk:
0001021A 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010220 6700                       		beq.s	loc_E0F8
00010222 5368 0030                  		subq.w	#1,$30(a0)
00010226 6A00                       		bpl.s	locret_E0F6
00010228 117C 0001 001C             		move.b	#1,obAnim(a0)
0001022E 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010234 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001023A                            
0001023A                            locret_E0F6:
0001023A 4E75                       		rts	
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            loc_E0F8:
0001023C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010240 4E75                       		rts	
00010242                            ; ===========================================================================
00010242                            
00010242                            Roll_ChkJump:
00010242 6100 0000                  		bsr.w	Roll_Stop
00010246 6100 F4E6                  		bsr.w	SpeedToPos
0001024A 6100 0000                  		bsr.w	ObjFloorDist
0001024E 0C41 FFF8                  		cmpi.w	#-8,d1
00010252 6D00                       		blt.s	Roll_Jump
00010254 0C41 000C                  		cmpi.w	#$C,d1
00010258 6C00                       		bge.s	Roll_Jump
0001025A D368 000C                  		add.w	d1,obY(a0)
0001025E 4E75                       		rts	
00010260                            ; ===========================================================================
00010260                            
00010260                            Roll_Jump:
00010260 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010264 08E8 0000 0032             		bset	#0,$32(a0)
0001026A 6700                       		beq.s	locret_E12E
0001026C 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010272                            
00010272                            locret_E12E:
00010272 4E75                       		rts	
00010274                            ; ===========================================================================
00010274                            
00010274                            Roll_MatchFloor:
00010274 6100 F480                  		bsr.w	ObjectFall
00010278 4A68 0012                  		tst.w	obVelY(a0)
0001027C 6B00                       		bmi.s	locret_E150
0001027E 6100 0000                  		bsr.w	ObjFloorDist
00010282 4A41                       		tst.w	d1
00010284 6A00                       		bpl.s	locret_E150
00010286 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001028A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001028E 317C 0000 0012             		move.w	#0,obVelY(a0)
00010294                            
00010294                            locret_E150:
00010294 4E75                       		rts	
00010296                            
00010296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010296                            
00010296                            
00010296                            Roll_Stop:
00010296 4A28 0032                  		tst.b	$32(a0)
0001029A 6B00                       		bmi.s	locret_E188
0001029C 3038 D008                  		move.w	(v_player+obX).w,d0
000102A0 0440 0030                  		subi.w	#$30,d0
000102A4 9068 0008                  		sub.w	obX(a0),d0
000102A8 6400                       		bcc.s	locret_E188
000102AA 117C 0000 001C             		move.b	#0,obAnim(a0)
000102B0 117C 000E 0020             		move.b	#$E,obColType(a0)
000102B6 4268 0010                  		clr.w	obVelX(a0)
000102BA 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000102C0 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000102C6 08E8 0007 0032             		bset	#7,$32(a0)
000102CC                            
000102CC                            locret_E188:
000102CC 4E75                       		rts	
000102CE                            ; End of function Roll_Stop
000102CE                            ; End of function Roll_Stop
000102CE                            		include	"_anim\Roller.asm"
000102CE                            ; ---------------------------------------------------------------------------
000102CE                            ; Animation script - Roller enemy
000102CE                            ; ---------------------------------------------------------------------------
000102CE 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000102D0 0000                       		dc.w A_Roll_Fold-Ani_Roll
000102D2 0000                       		dc.w A_Roll_Roll-Ani_Roll
000102D4 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000102DA 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000102E0 00                         		even
000102E0 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000102E6 00                         		even
000102E6 00                         		even
000102E6                            Map_Roll:	include	"_maps\Roller.asm"
000102E6                            ; --------------------------------------------------------------------------------
000102E6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000102E6                            ; --------------------------------------------------------------------------------
000102E6                            
000102E6                            SME_q3BmU:	
000102E6 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000102EA 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000102EE 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000102F0 02                         SME_q3BmU_A:	dc.b 2	
000102F1 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000102F6 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000102FB 02                         SME_q3BmU_15:	dc.b 2	
000102FC E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010301 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010306 01                         SME_q3BmU_20:	dc.b 1	
00010307 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
0001030C 01                         SME_q3BmU_26:	dc.b 1	
0001030D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010312 01                         SME_q3BmU_2C:	dc.b 1	
00010313 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010318                            		even
00010318                            		even
00010318                            
00010318                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010318                            ; ---------------------------------------------------------------------------
00010318                            ; Object 44 - edge walls (GHZ)
00010318                            ; ---------------------------------------------------------------------------
00010318                            
00010318                            EdgeWalls:
00010318 7000                       		moveq	#0,d0
0001031A 1028 0024                  		move.b	obRoutine(a0),d0
0001031E 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010322 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010326                            ; ===========================================================================
00010326 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010328 0000                       		dc.w Edge_Solid-Edge_Index
0001032A 0000                       		dc.w Edge_Display-Edge_Index
0001032C                            ; ===========================================================================
0001032C                            
0001032C                            Edge_Main:	; Routine 0
0001032C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010330 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010338 317C 434C 0002             		move.w	#$434C,obGfx(a0)
0001033E 0028 0004 0001             		ori.b	#4,obRender(a0)
00010344 117C 0008 0014             		move.b	#8,obActWid(a0)
0001034A 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010350 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010356 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
0001035C 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
0001035E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010362 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010364                            ; ===========================================================================
00010364                            
00010364                            Edge_Solid:	; Routine 2
00010364 323C 0013                  		move.w	#$13,d1
00010368 343C 0028                  		move.w	#$28,d2
0001036C 6100 A146                  		bsr.w	Obj44_SolidWall
00010370                            
00010370                            Edge_Display:	; Routine 4
00010370 6100 F3D0                  		bsr.w	DisplaySprite
00010392 4E75                       		rts	
00010392 4E75                       		rts	
00010394                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010394                            ; ---------------------------------------------------------------------------
00010394                            ; Sprite mappings - walls (GHZ)
00010394                            ; ---------------------------------------------------------------------------
00010394                            Map_Edge_internal:
00010394 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010396 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010398 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001039A 04                         M_Edge_Shadow:	dc.b 4
0001039B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000103A0 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000103A5 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000103AA 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000103AF 04                         M_Edge_Light:	dc.b 4
000103B0 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000103B5 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000103BA 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000103BF 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000103C4 04                         M_Edge_Dark:	dc.b 4
000103C5 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000103CA F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000103CF 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000103D4 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000103DA 00                         		even
000103DA 00                         		even
000103DA                            
000103DA                            		include	"_incObj\13 Lava Ball Maker.asm"
000103DA                            ; ---------------------------------------------------------------------------
000103DA                            ; Object 13 - lava ball	maker (MZ, SLZ)
000103DA                            ; ---------------------------------------------------------------------------
000103DA                            
000103DA                            LavaMaker:
000103DA 7000                       		moveq	#0,d0
000103DC 1028 0024                  		move.b	obRoutine(a0),d0
000103E0 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000103E4 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000103E8 6000 0000                  		bra.w	LBall_ChkDel
000103EC                            ; ===========================================================================
000103EC 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000103EE 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000103F0                            ; ---------------------------------------------------------------------------
000103F0                            ;
000103F0                            ; Lava ball production rates
000103F0                            ;
000103F0 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000103F6                            ; ===========================================================================
000103F6                            
000103F6                            LavaM_Main:	; Routine 0
000103F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000103FA 1028 0028                  		move.b	obSubtype(a0),d0
000103FE E848                       		lsr.w	#4,d0
00010400 0240 000F                  		andi.w	#$F,d0
00010404 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0001040A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010410 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010416                            
00010416                            LavaM_MakeLava:	; Routine 2
00010416 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001041A 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0001041C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010422 6100 F59E                  		bsr.w	ChkObjectVisible
00010426 6600                       		bne.s	LavaM_Wait
00010428 6100 F7A4                  		bsr.w	FindFreeObj
0001042C 6600                       		bne.s	LavaM_Wait
0001042E 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010432 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010438 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001043E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010444                            
00010444                            	LavaM_Wait:
00010444 4E75                       		rts	
00010444 4E75                       		rts	
00010446                            		include	"_incObj\14 Lava Ball.asm"
00010446                            ; ---------------------------------------------------------------------------
00010446                            ; Object 14 - lava balls (MZ, SLZ)
00010446                            ; ---------------------------------------------------------------------------
00010446                            
00010446                            LavaBall:
00010446 7000                       		moveq	#0,d0
00010448 1028 0024                  		move.b	obRoutine(a0),d0
0001044C 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010450 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010454 6000 F2EC                  		bra.w	DisplaySprite
00010458                            ; ===========================================================================
00010458 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0001045A 0000                       		dc.w LBall_Action-LBall_Index
0001045C 0000                       		dc.w LBall_Delete-LBall_Index
0001045E                            
0001045E FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010468 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010470                            ; ===========================================================================
00010470                            
00010470                            LBall_Main:	; Routine 0
00010470 5428 0024                  		addq.b	#2,obRoutine(a0)
00010474 117C 0008 0016             		move.b	#8,obHeight(a0)
0001047A 117C 0008 0017             		move.b	#8,obWidth(a0)
00010480 217C 0000 D456 0004        		move.l	#Map_Fire,obMap(a0)
00010488 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001048E 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010494 6600                       		bne.s	@notSLZ
00010496 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0001049C                            
0001049C                            	@notSLZ:
0001049C 117C 0004 0001             		move.b	#4,obRender(a0)
000104A2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000104A8 117C 008B 0020             		move.b	#$8B,obColType(a0)
000104AE 3168 000C 0030             		move.w	obY(a0),$30(a0)
000104B4 4A28 0029                  		tst.b	$29(a0)
000104B8 6700                       		beq.s	@speed
000104BA 5428 0018                  		addq.b	#2,obPriority(a0)
000104BE                            
000104BE                            	@speed:
000104BE 7000                       		moveq	#0,d0
000104C0 1028 0028                  		move.b	obSubtype(a0),d0
000104C4 D040                       		add.w	d0,d0
000104C6 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000104CC 117C 0008 0014             		move.b	#8,obActWid(a0)
000104D2 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000104D8 6500                       		bcs.s	@sound		; if yes, branch
000104DA                            
000104DA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000104E0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000104E6 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000104EC 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000104F2                            
000104F2                            	@sound:
000104FC                            
000104FC                            LBall_Action:	; Routine 2
000104FC 7000                       		moveq	#0,d0
000104FE 1028 0028                  		move.b	obSubtype(a0),d0
00010502 D040                       		add.w	d0,d0
00010504 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010508 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
0001050C 6100 F220                  		bsr.w	SpeedToPos
00010510 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010516 6100 C2EC                  		bsr.w	AnimateSprite
0001051A                            
0001051A                            LBall_ChkDel:
00010538 4E75                       		rts	
0001053A                            ; ===========================================================================
0001053A 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001053E 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010542 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010546 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001054A 0000                       		dc.w LBall_Type08-LBall_TypeIndex
0001054C                            ; ===========================================================================
0001054C                            ; lavaball types 00-03 fly up and fall back down
0001054C                            
0001054C                            LBall_Type00:
0001054C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010552 3028 0030                  		move.w	$30(a0),d0
00010556 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0001055A 6400                       		bcc.s	loc_E41E	; if not, branch
0001055C 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010560                            
00010560                            loc_E41E:
00010560 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010566 4A68 0012                  		tst.w	obVelY(a0)
0001056A 6A00                       		bpl.s	locret_E430
0001056C 08E8 0001 0022             		bset	#1,obStatus(a0)
00010572                            
00010572                            locret_E430:
00010572 4E75                       		rts	
00010574                            ; ===========================================================================
00010574                            ; lavaball type	04 flies up until it hits the ceiling
00010574                            
00010574                            LBall_Type04:
00010574 08E8 0001 0022             		bset	#1,obStatus(a0)
0001057A 6100 0000                  		bsr.w	ObjHitCeiling
0001057E 4A41                       		tst.w	d1
00010580 6A00                       		bpl.s	locret_E452
00010582 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010588 117C 0001 001C             		move.b	#1,obAnim(a0)
0001058E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010594                            
00010594                            locret_E452:
00010594 4E75                       		rts	
00010596                            ; ===========================================================================
00010596                            ; lavaball type	05 falls down until it hits the	floor
00010596                            
00010596                            LBall_Type05:
00010596 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001059C 6100 0000                  		bsr.w	ObjFloorDist
000105A0 4A41                       		tst.w	d1
000105A2 6A00                       		bpl.s	locret_E474
000105A4 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105AA 117C 0001 001C             		move.b	#1,obAnim(a0)
000105B0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000105B6                            
000105B6                            locret_E474:
000105B6 4E75                       		rts	
000105B8                            ; ===========================================================================
000105B8                            ; lavaball types 06-07 move sideways
000105B8                            
000105B8                            LBall_Type06:
000105B8 08E8 0000 0022             		bset	#0,obStatus(a0)
000105BE 76F8                       		moveq	#-8,d3
000105C0 6100 0000                  		bsr.w	ObjHitWallLeft
000105C4 4A41                       		tst.w	d1
000105C6 6A00                       		bpl.s	locret_E498
000105C8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105CE 117C 0003 001C             		move.b	#3,obAnim(a0)
000105D4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105DA                            
000105DA                            locret_E498:
000105DA 4E75                       		rts	
000105DC                            ; ===========================================================================
000105DC                            
000105DC                            LBall_Type07:
000105DC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000105E2 7608                       		moveq	#8,d3
000105E4 6100 0000                  		bsr.w	ObjHitWallRight
000105E8 4A41                       		tst.w	d1
000105EA 6A00                       		bpl.s	locret_E4BC
000105EC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105F2 117C 0003 001C             		move.b	#3,obAnim(a0)
000105F8 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105FE                            
000105FE                            locret_E4BC:
000105FE 4E75                       		rts	
00010600                            ; ===========================================================================
00010600                            
00010600                            LBall_Type08:
00010600 4E75                       		rts	
00010602                            ; ===========================================================================
00010602                            
00010602                            LBall_Delete:
00010602 6000 F17E                  		bra.w	DeleteObject
00010602 6000 F17E                  		bra.w	DeleteObject
00010606                            		include	"_anim\Fireballs.asm"
00010606                            ; ---------------------------------------------------------------------------
00010606                            ; Animation script - lava balls
00010606                            ; ---------------------------------------------------------------------------
00010606 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010608 0000                       		dc.w @vertcollide-Ani_Fire
0001060A 0000                       		dc.w @horizontal-Ani_Fire
0001060C 0000                       		dc.w @horicollide-Ani_Fire
0001060E 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010614 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010618 00                         		even
00010618 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
0001061E 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010622 00                         		even
00010622 00                         		even
00010622                            
00010622                            		include	"_incObj\6D Flamethrower.asm"
00010622                            ; ---------------------------------------------------------------------------
00010622                            ; Object 6D - flame thrower (SBZ)
00010622                            ; ---------------------------------------------------------------------------
00010622                            
00010622                            Flamethrower:
00010622 7000                       		moveq	#0,d0
00010624 1028 0024                  		move.b	obRoutine(a0),d0
00010628 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
0001062C 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010630                            ; ===========================================================================
00010630 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010632 0000                       		dc.w Flame_Action-Flame_Index
00010634                            ; ===========================================================================
00010634                            
00010634                            Flame_Main:	; Routine 0
00010634 5428 0024                  		addq.b	#2,obRoutine(a0)
00010638 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010640 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010646 0028 0004 0001             		ori.b	#4,obRender(a0)
0001064C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010652 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010658 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001065E 1028 0028                  		move.b	obSubtype(a0),d0
00010662 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010666 D040                       		add.w	d0,d0		; multiply by 2
00010668 3140 0030                  		move.w	d0,$30(a0)
0001066C 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010670 1028 0028                  		move.b	obSubtype(a0),d0
00010674 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010678 EB48                       		lsl.w	#5,d0		; multiply by $20
0001067A 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001067E 117C 000A 0036             		move.b	#$A,$36(a0)
00010684 0828 0001 0022             		btst	#1,obStatus(a0)
0001068A 6700                       		beq.s	Flame_Action
0001068C 117C 0002 001C             		move.b	#2,obAnim(a0)
00010692 117C 0015 0036             		move.b	#$15,$36(a0)
00010698                            
00010698                            Flame_Action:	; Routine 2
00010698 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001069C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0001069E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000106A4 0868 0000 001C             		bchg	#0,obAnim(a0)
000106AA 6700                       		beq.s	loc_E57A
000106AC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000106BC                            
000106BC                            loc_E57A:
000106BC 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000106C2 6100 C140                  		bsr.w	AnimateSprite
000106C6 117C 0000 0020             		move.b	#0,obColType(a0)
000106CC 1028 0036                  		move.b	$36(a0),d0
000106D0 B028 001A                  		cmp.b	obFrame(a0),d0
000106D4 6600                       		bne.s	Flame_ChkDel
000106D6 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000106DC                            
000106DC                            Flame_ChkDel:
000106FA 6000 F046                  		bra.w	DisplaySprite
000106FA 6000 F046                  		bra.w	DisplaySprite
000106FE                            		include	"_anim\Flamethrower.asm"
000106FE                            ; ---------------------------------------------------------------------------
000106FE                            ; Animation script - flamethrower (SBZ)
000106FE                            ; ---------------------------------------------------------------------------
000106FE 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010700 0000                       		dc.w @pipe2-Ani_Flame
00010702 0000                       		dc.w @valve1-Ani_Flame
00010704 0000                       		dc.w @valve2-Ani_Flame
00010706 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010714 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
0001071E 00                         		even
0001071E 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
0001072C 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010736 00                         		even
00010736 00                         		even
00010736                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010736                            ; ---------------------------------------------------------------------------
00010736                            ; Sprite mappings - flame thrower (SBZ)
00010736                            ; ---------------------------------------------------------------------------
00010736                            Map_Flame_internal:
00010736 0000                       		dc.w @pipe1-Map_Flame_internal
00010738 0000                       		dc.w @pipe2-Map_Flame_internal
0001073A 0000                       		dc.w @pipe3-Map_Flame_internal
0001073C 0000                       		dc.w @pipe4-Map_Flame_internal
0001073E 0000                       		dc.w @pipe5-Map_Flame_internal
00010740 0000                       		dc.w @pipe6-Map_Flame_internal
00010742 0000                       		dc.w @pipe7-Map_Flame_internal
00010744 0000                       		dc.w @pipe8-Map_Flame_internal
00010746 0000                       		dc.w @pipe9-Map_Flame_internal
00010748 0000                       		dc.w @pipe10-Map_Flame_internal
0001074A 0000                       		dc.w @pipe11-Map_Flame_internal
0001074C 0000                       		dc.w @valve1-Map_Flame_internal
0001074E 0000                       		dc.w @valve2-Map_Flame_internal
00010750 0000                       		dc.w @valve3-Map_Flame_internal
00010752 0000                       		dc.w @valve4-Map_Flame_internal
00010754 0000                       		dc.w @valve5-Map_Flame_internal
00010756 0000                       		dc.w @valve6-Map_Flame_internal
00010758 0000                       		dc.w @valve7-Map_Flame_internal
0001075A 0000                       		dc.w @valve8-Map_Flame_internal
0001075C 0000                       		dc.w @valve9-Map_Flame_internal
0001075E 0000                       		dc.w @valve10-Map_Flame_internal
00010760 0000                       		dc.w @valve11-Map_Flame_internal
00010762 01                         @pipe1:		dc.b 1
00010763 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010768 02                         @pipe2:		dc.b 2
00010769 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001076E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010773 02                         @pipe3:		dc.b 2
00010774 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010779 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001077E 03                         @pipe4:		dc.b 3
0001077F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010784 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010789 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001078E 03                         @pipe5:		dc.b 3
0001078F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010794 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010799 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001079E 04                         @pipe6:		dc.b 4
0001079F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107A4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000107A9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107AE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107B3 04                         @pipe7:		dc.b 4
000107B4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107B9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107BE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107C8 05                         @pipe8:		dc.b 5
000107C9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000107CE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107D3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000107D8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107E2 05                         @pipe9:		dc.b 5
000107E3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107E8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107ED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107F2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107F7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107FC 06                         @pipe10:	dc.b 6
000107FD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010802 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010807 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001080C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010811 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010816 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001081B 06                         @pipe11:	dc.b 6
0001081C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010821 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010826 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001082B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010830 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010835 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001083A 01                         @valve1:	dc.b 1
0001083B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010840 02                         @valve2:	dc.b 2
00010841 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010846 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001084B 02                         @valve3:	dc.b 2
0001084C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010851 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010856 03                         @valve4:	dc.b 3
00010857 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001085C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010861 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010866 03                         @valve5:	dc.b 3
00010867 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001086C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010871 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010876 04                         @valve6:	dc.b 4
00010877 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001087C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010881 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010886 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001088B 04                         @valve7:	dc.b 4
0001088C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010891 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010896 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001089B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108A0 05                         @valve8:	dc.b 5
000108A1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000108A6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108AB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000108B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108B5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108BA 05                         @valve9:	dc.b 5
000108BB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108C0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000108C5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108CA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108CF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108D4 06                         @valve10:	dc.b 6
000108D5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000108DA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000108DF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108E4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000108E9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108EE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108F3 06                         @valve11:	dc.b 6
000108F4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000108F9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108FE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010903 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010908 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001090D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010912                            		even
00010912                            		even
00010912                            
00010912                            		include	"_incObj\46 MZ Bricks.asm"
00010912                            ; ---------------------------------------------------------------------------
00010912                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010912                            ; ---------------------------------------------------------------------------
00010912                            
00010912                            MarbleBrick:
00010912 7000                       		moveq	#0,d0
00010914 1028 0024                  		move.b	obRoutine(a0),d0
00010918 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
0001091C 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010920                            ; ===========================================================================
00010920 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010922 0000                       		dc.w Brick_Action-Brick_Index
00010924                            
00010924 =00000030                  brick_origY:	equ $30
00010924                            ; ===========================================================================
00010924                            
00010924                            Brick_Main:	; Routine 0
00010924 5428 0024                  		addq.b	#2,obRoutine(a0)
00010928 117C 000F 0016             		move.b	#$F,obHeight(a0)
0001092E 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010934 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
0001093C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010942 117C 0004 0001             		move.b	#4,obRender(a0)
00010948 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001094E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010954 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
0001095A 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010960                            
00010960                            Brick_Action:	; Routine 2
00010960 4A28 0001                  		tst.b	obRender(a0)
00010964 6A00                       		bpl.s	@chkdel
00010966 7000                       		moveq	#0,d0
00010968 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001096C 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010970 D040                       		add.w	d0,d0
00010972 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010976 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
0001097A 323C 001B                  		move.w	#$1B,d1
0001097E 343C 0010                  		move.w	#$10,d2
00010982 363C 0011                  		move.w	#$11,d3
00010986 3828 0008                  		move.w	obX(a0),d4
0001098A 6100 0000                  		bsr.w	SolidObject
0001098E                            
0001098E                            	@chkdel:
000109AC 6000 ED94                  			bra.w	DisplaySprite
000109B0                            ; ===========================================================================
000109B0 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
000109B2 0000                       		dc.w Brick_Type01-Brick_TypeIndex
000109B4 0000                       		dc.w Brick_Type02-Brick_TypeIndex
000109B6 0000                       		dc.w Brick_Type03-Brick_TypeIndex
000109B8 0000                       		dc.w Brick_Type04-Brick_TypeIndex
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Brick_Type00:
000109BA 4E75                       		rts	
000109BC                            ; ===========================================================================
000109BC                            
000109BC                            Brick_Type02:
000109BC 3038 D008                  		move.w	(v_player+obX).w,d0
000109C0 9068 0008                  		sub.w	obX(a0),d0
000109C4 6400                       		bcc.s	loc_E888
000109C6 4440                       		neg.w	d0
000109C8                            
000109C8                            loc_E888:
000109C8 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
000109CC 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
000109CE 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
000109D4                            
000109D4                            Brick_Type01:
000109D4 7000                       		moveq	#0,d0
000109D6 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
000109DA 0828 0003 0028             		btst	#3,obSubtype(a0)
000109E0 6700                       		beq.s	loc_E8A8
000109E2 4440                       		neg.w	d0
000109E4 0640 0010                  		addi.w	#$10,d0
000109E8                            
000109E8                            loc_E8A8:
000109E8 3228 0030                  		move.w	brick_origY(a0),d1
000109EC 9240                       		sub.w	d0,d1
000109EE 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
000109F2 4E75                       		rts	
000109F4                            ; ===========================================================================
000109F4                            
000109F4                            Brick_Type03:
000109F4 6100 ED38                  		bsr.w	SpeedToPos
000109F8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
000109FE 6100 0000                  		bsr.w	ObjFloorDist
00010A02 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010A04 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010A08 D368 000C                  		add.w	d1,obY(a0)
00010A0C 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010A10 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010A16 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010A1C 3011                       		move.w	(a1),d0
00010A1E 0240 03FF                  		andi.w	#$3FF,d0
00010A22 0C40 016A                  			cmpi.w	#$16A,d0
00010A26 6400                       		bcc.s	locret_E8EE
00010A28 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010A2E                            
00010A2E                            locret_E8EE:
00010A2E 4E75                       		rts	
00010A30                            ; ===========================================================================
00010A30                            
00010A30                            Brick_Type04:
00010A30 7000                       		moveq	#0,d0
00010A32 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010A36 E648                       		lsr.w	#3,d0
00010A38 3228 0030                  		move.w	brick_origY(a0),d1
00010A3C 9240                       		sub.w	d0,d1
00010A3E 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010A42 4E75                       		rts	
00010A42 4E75                       		rts	
00010A44                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010A44                            ; ---------------------------------------------------------------------------
00010A44                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010A44                            ; ---------------------------------------------------------------------------
00010A44                            Map_Brick_internal:
00010A44 0000                       		dc.w @brick-Map_Brick_internal
00010A46 01                         @brick:		dc.b 1
00010A47 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010A4C                            		even
00010A4C                            		even
00010A4C                            
00010A4C                            		include	"_incObj\12 Light.asm"
00010A4C                            ; ---------------------------------------------------------------------------
00010A4C                            ; Object 12 - lamp (SYZ)
00010A4C                            ; ---------------------------------------------------------------------------
00010A4C                            
00010A4C                            SpinningLight:
00010A4C 7000                       		moveq	#0,d0
00010A4E 1028 0024                  		move.b	obRoutine(a0),d0
00010A52 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010A56 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010A5A                            ; ===========================================================================
00010A5A 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010A5C 0000                       		dc.w Light_Animate-Light_Index
00010A5E                            ; ===========================================================================
00010A5E                            
00010A5E                            Light_Main:	; Routine 0
00010A5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A62 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010A6A 317C 0000 0002             		move.w	#0,obGfx(a0)
00010A70 117C 0004 0001             		move.b	#4,obRender(a0)
00010A76 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A7C 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010A82                            
00010A82                            Light_Animate:	; Routine 2
00010A82 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010A86 6A00                       		bpl.s	@chkdel
00010A88 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010A8E 5228 001A                  		addq.b	#1,obFrame(a0)
00010A92 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010A98 6500                       		bcs.s	@chkdel
00010A9A 117C 0000 001A             		move.b	#0,obFrame(a0)
00010AA0                            
00010AA0                            	@chkdel:
00010ABE 6000 EC82                  		bra.w	DisplaySprite
00010ABE 6000 EC82                  		bra.w	DisplaySprite
00010AC2                            Map_Light	include	"_maps\Light.asm"
00010AC2                            ; --------------------------------------------------------------------------------
00010AC2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010AC2                            ; --------------------------------------------------------------------------------
00010AC2                            
00010AC2                            SME_FBl1X:	
00010AC2 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010AC6 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010ACA 05                         SME_FBl1X_8:	dc.b 5	
00010ACB E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010AD0 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010AD5 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010ADA F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010ADF F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AE4 05                         SME_FBl1X_22:	dc.b 5	
00010AE5 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010AEA E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010AEF E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010AF4 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010AF9 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010AFE 06                         SME_FBl1X_3C:	dc.b 6	
00010AFF E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010B04 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010B09 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010B0E F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010B13 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010B18 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010B1D 05                         SME_FBl1X_5B:	dc.b 5	
00010B1E E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010B23 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010B28 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010B2D F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010B32 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010B38 00                         		even
00010B38 00                         		even
00010B38                            		include	"_incObj\47 Bumper.asm"
00010B38                            ; ---------------------------------------------------------------------------
00010B38                            ; Object 47 - pinball bumper (SYZ)
00010B38                            ; ---------------------------------------------------------------------------
00010B38                            
00010B38                            Bumper:
00010B38 7000                       		moveq	#0,d0
00010B3A 1028 0024                  		move.b	obRoutine(a0),d0
00010B3E 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010B42 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010B46                            ; ===========================================================================
00010B46 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010B48 0000                       		dc.w Bump_Hit-Bump_Index
00010B4A                            ; ===========================================================================
00010B4A                            
00010B4A                            Bump_Main:	; Routine 0
00010B4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B4E 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010B56 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010B5C 117C 0004 0001             		move.b	#4,obRender(a0)
00010B62 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B68 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010B6E 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010B74                            
00010B74                            Bump_Hit:	; Routine 2
00010B74 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010B78 6700 0000                  		beq.w	@display	; if not, branch
00010B7C 4228 0021                  		clr.b	obColProp(a0)
00010B80 43F8 D000                  		lea	(v_player).w,a1
00010B84 3228 0008                  		move.w	obX(a0),d1
00010B88 3428 000C                  		move.w	obY(a0),d2
00010B8C 9269 0008                  		sub.w	obX(a1),d1
00010B90 9469 000C                  		sub.w	obY(a1),d2
00010B94 4EB9 0000 3A40             		jsr	(CalcAngle).l
00010B9A 4EB9 0000 37AE             		jsr	(CalcSine).l
00010BA0 C3FC F900                  		muls.w	#-$700,d1
00010BA4 E081                       		asr.l	#8,d1
00010BA6 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010BAA C1FC F900                  		muls.w	#-$700,d0
00010BAE E080                       		asr.l	#8,d0
00010BB0 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010BB4 08E9 0001 0022             		bset	#1,obStatus(a1)
00010BBA 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010BC0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010BC6 4229 003C                  		clr.b	$3C(a1)
00010BCA 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010BDA 45F8 FC00                  		lea	(v_objstate).w,a2
00010BDE 7000                       		moveq	#0,d0
00010BE0 1028 0023                  		move.b	obRespawnNo(a0),d0
00010BE4 6700                       		beq.s	@addscore
00010BE6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010BEC 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010BEE 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010BF2                            
00010BF2                            	@addscore:
00010BF2 7001                       		moveq	#1,d0
00010BF4 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010BFA 6100 EFD2                  		bsr.w	FindFreeObj
00010BFE 6600                       		bne.s	@display
00010C00 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010C04 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010C0A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010C10 137C 0004 001A             		move.b	#4,obFrame(a1)
00010C16                            
00010C16                            	@display:
00010C16 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010C1C 6100 BBE6                  		bsr.w	AnimateSprite
00010C3C 6000 EB04                  		bra.w	DisplaySprite
00010C40                            ; ===========================================================================
00010C40                            
00010C40                            @resetcount:
00010C40 45F8 FC00                  		lea	(v_objstate).w,a2
00010C44 7000                       		moveq	#0,d0
00010C46 1028 0023                  		move.b	obRespawnNo(a0),d0
00010C4A 6700                       		beq.s	@delete
00010C4C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C52                            
00010C52                            	@delete:
00010C52 6000 EB2E                  		bra.w	DeleteObject
00010C52 6000 EB2E                  		bra.w	DeleteObject
00010C56                            		include	"_anim\Bumper.asm"
00010C56                            ; ---------------------------------------------------------------------------
00010C56                            ; Animation script - flamethrower (SBZ)
00010C56                            ; ---------------------------------------------------------------------------
00010C56 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010C58 0000                       		dc.w byte_EAF8-Ani_Bump
00010C5A 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010C5E 00                         		even
00010C5E 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010C66 00                         		even
00010C66 00                         		even
00010C66                            Map_Bump:	include	"_maps\Bumper.asm"
00010C66                            ; ---------------------------------------------------------------------------
00010C66                            ; Sprite mappings - pinball bumper (SYZ)
00010C66                            ; ---------------------------------------------------------------------------
00010C66                            Map_Bump_internal:
00010C66 0000                       		dc.w @normal-Map_Bump_internal
00010C68 0000                       		dc.w @bumped1-Map_Bump_internal
00010C6A 0000                       		dc.w @bumped2-Map_Bump_internal
00010C6C 02                         @normal:	dc.b 2
00010C6D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010C72 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010C77 02                         @bumped1:	dc.b 2
00010C78 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010C7D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010C82 02                         @bumped2:	dc.b 2
00010C83 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010C88 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010C8E 00                         		even
00010C8E 00                         		even
00010C8E                            
00010C8E                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010C8E                            ; ---------------------------------------------------------------------------
00010C8E                            ; Object 0D - signpost at the end of a level
00010C8E                            ; ---------------------------------------------------------------------------
00010C8E                            
00010C8E                            Signpost:
00010C8E 7000                       		moveq	#0,d0
00010C90 1028 0024                  		move.b	obRoutine(a0),d0
00010C94 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010C98 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010C9C 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010CA2 6100 BB60                  		bsr.w	AnimateSprite
00010CA6 6100 EA9A                  		bsr.w	DisplaySprite
00010CC8 4E75                       		rts	
00010CCA                            ; ===========================================================================
00010CCA 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010CCC 0000                       		dc.w Sign_Touch-Sign_Index
00010CCE 0000                       		dc.w Sign_Spin-Sign_Index
00010CD0 0000                       		dc.w Sign_SonicRun-Sign_Index
00010CD2 0000                       		dc.w Sign_Exit-Sign_Index
00010CD4                            
00010CD4 =00000030                  spintime:	equ $30		; time for signpost to spin
00010CD4 =00000032                  sparkletime:	equ $32		; time between sparkles
00010CD4 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010CD4                            ; ===========================================================================
00010CD4                            
00010CD4                            Sign_Main:	; Routine 0
00010CD4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CD8 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010CE0 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010CE6 117C 0004 0001             		move.b	#4,obRender(a0)
00010CEC 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010CF2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010CF8                            
00010CF8                            Sign_Touch:	; Routine 2
00010CF8 3038 D008                  		move.w	(v_player+obX).w,d0
00010CFC 9068 0008                  		sub.w	obX(a0),d0
00010D00 6500                       		bcs.s	@notouch
00010D02 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010D06 6400                       		bcc.s	@notouch	; if not, branch
00010D08 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010D18 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010D1C 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010D22 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D26 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010D2C 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010D30 6700                       		beq.s	@notouch
00010D32 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010D40                            
00010D40                            	@notouch:
00010D40 4E75                       		rts	
00010D42                            	
00010D42                            ; ===========================================================================
00010D42                            
00010D42                            Sign_Spin:	; Routine 4
00010D42 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010D46 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010D48 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010D4E 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010D52 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010D58 6600                       		bne.s	@chksparkle	; if not, branch
00010D5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D5E                            
00010D5E                            	@chksparkle:
00010D5E 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010D62 6A00                       		bpl.s	@fail		; if time remains, branch
00010D64 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010D6A 7000                       		moveq	#0,d0
00010D6C 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010D70 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010D74 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010D7A 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010D7E 6100 EE4E                  		bsr.w	FindFreeObj
00010D82 6600                       		bne.s	@fail
00010D84 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010D88 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010D8E 101A                       		move.b	(a2)+,d0
00010D90 4880                       		ext.w	d0
00010D92 D068 0008                  		add.w	obX(a0),d0
00010D96 3340 0008                  		move.w	d0,obX(a1)
00010D9A 101A                       		move.b	(a2)+,d0
00010D9C 4880                       		ext.w	d0
00010D9E D068 000C                  		add.w	obY(a0),d0
00010DA2 3340 000C                  		move.w	d0,obY(a1)
00010DA6 237C 0000 BDB4 0004        		move.l	#Map_Ring,obMap(a1)
00010DAE 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010DB4 137C 0004 0001             		move.b	#4,obRender(a1)
00010DBA 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010DC0 137C 0008 0014             		move.b	#8,obActWid(a1)
00010DC6                            
00010DC6                            	@fail:
00010DC6 4E75                       		rts	
00010DC8                            ; ===========================================================================
00010DC8 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010DCA 0808                       		dc.b	8,   8
00010DCC F000                       		dc.b -$10,   0
00010DCE 18F8                       		dc.b  $18,  -8
00010DD0 00F8                       		dc.b	0,  -8
00010DD2 1000                       		dc.b  $10,   0
00010DD4 E808                       		dc.b -$18,   8
00010DD6 1810                       		dc.b  $18, $10
00010DD8                            ; ===========================================================================
00010DD8                            
00010DD8                            Sign_SonicRun:	; Routine 6
00010DD8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010DDC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010DE0 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010DE6                            		
00010DE6                            
00010DE6                            	loc_EC86:
00010DE6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DEA                            
00010DEA                            ; ---------------------------------------------------------------------------
00010DEA                            ; Subroutine to	set up bonuses at the end of an	act
00010DEA                            ; ---------------------------------------------------------------------------
00010DEA                            
00010DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010DEA                            
00010DEA                            
00010DEA                            GotThroughAct:
00010DEA 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010DEE 6600                       		bne.s	locret_ECEE
00010DF0 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010DF6 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010DFA 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010DFE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E02 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010E08 7000                       		moveq	#plcid_TitleCard,d0
00010E0A 4EB9 0000 1498             		jsr	(NewPLC).l	; load title card patterns
00010E10 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010E16 7000                       		moveq	#0,d0
00010E18 1038 FE23                  		move.b	(v_timemin).w,d0
00010E1C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010E20 7200                       		moveq	#0,d1
00010E22 1238 FE24                  		move.b	(v_timesec).w,d1
00010E26 D041                       		add.w	d1,d0		; add up your time
00010E28 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010E2C 7214                       		moveq	#$14,d1
00010E2E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010E30 6500                       		bcs.s	hastimebonus	; if not, branch
00010E32 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010E34                            
00010E34                            	hastimebonus:
00010E34 D040                       		add.w	d0,d0
00010E36 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010E3C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010E40 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010E44 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010E52 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E58                            
00010E58                            locret_ECEE:
00010E58 4E75                       		rts	
00010E5A                            
00010E5A                            ; End of function GotThroughAct
00010E5A                            
00010E5A                            ; ===========================================================================
00010E5A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010E6E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E84                            ; ===========================================================================
00010E84                            
00010E84                            Sign_Exit:	; Routine 8
00010E84 4E75                       		rts	
00010E86                            
00010E86                            ; ---------------------------------------------------------------------------
00010E86                            ; Subroutine to	set up bonuses at the end of an	zone
00010E86                            ; ---------------------------------------------------------------------------
00010E86                            
00010E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E86                            
00010E86                            
00010E86                            GotThroughAct1:
00010E86 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010E8A 6600                       		bne.s	locret_ECEE1
00010E8C 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010E92 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E96 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010E9A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E9E 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010EA4 7000                       		moveq	#plcid_TitleCard,d0
00010EA6 4EB9 0000 1498             		jsr	(NewPLC).l	; load title card patterns
00010EAC 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010EB2 7000                       		moveq	#0,d0
00010EB4 1038 FE23                  		move.b	(v_timemin).w,d0
00010EB8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010EBC 7200                       		moveq	#0,d1
00010EBE 1238 FE24                  		move.b	(v_timesec).w,d1
00010EC2 D041                       		add.w	d1,d0		; add up your time
00010EC4 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010EC8 7214                       		moveq	#$14,d1
00010ECA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010ECC 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010ED0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010ED2                            
00010ED2                            	hastimebonus2:
00010ED2 D040                       		add.w	d0,d0
00010ED4 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010EDA 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010EDE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010EE2 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010EF0 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010EF6                            
00010EF6                            locret_ECEE1:
00010EF6 4E75                       		rts	
00010EF8                            
00010EF8                            ; End of function GotThroughAct		
00010EF8                            
00010EF8 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010F0C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010F0C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010F22                            		include	"_anim\Signpost.asm"
00010F22                            ; ---------------------------------------------------------------------------
00010F22                            ; Animation script - signpost
00010F22                            ; ---------------------------------------------------------------------------
00010F22 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010F24 0000                       		dc.w @spin1-Ani_Sign
00010F26 0000                       		dc.w @spin2-Ani_Sign
00010F28 0000                       		dc.w @sonic-Ani_Sign
00010F2A 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010F2E 00                         		even
00010F2E 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010F34 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010F3A 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010F3E 00                         		even
00010F3E 00                         		even
00010F3E                            Map_Sign:	include	"_maps\Signpost.asm"
00010F3E                            ; --------------------------------------------------------------------------------
00010F3E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010F3E                            ; --------------------------------------------------------------------------------
00010F3E                            
00010F3E                            SME_KvSue:	
00010F3E 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010F42 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010F46 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010F48 04                         SME_KvSue_A:	dc.b 4	
00010F49 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010F4E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010F53 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F58 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F5D 03                         SME_KvSue_1F:	dc.b 3	
00010F5E F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010F63 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F68 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F6D 03                         SME_KvSue_2F:	dc.b 3	
00010F6E F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010F73 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F78 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F7D 03                         SME_KvSue_3F:	dc.b 3	
00010F7E F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010F83 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F88 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F8D 04                         SME_KvSue_4F:	dc.b 4	
00010F8E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010F93 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010F98 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F9D 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010FA2                            		even
00010FA2                            		even
00010FA2                            
00010FA2                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010FA2                            ; ---------------------------------------------------------------------------
00010FA2                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010FA2                            ; ---------------------------------------------------------------------------
00010FA2                            
00010FA2                            GeyserMaker:
00010FA2 7000                       		moveq	#0,d0
00010FA4 1028 0024                  		move.b	obRoutine(a0),d0
00010FA8 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010FAC 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010FB0 6000 0000                  		bra.w	Geyser_ChkDel
00010FB4                            ; ===========================================================================
00010FB4 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010FB6 0000                       		dc.w GMake_Wait-GMake_Index
00010FB8 0000                       		dc.w GMake_ChkType-GMake_Index
00010FBA 0000                       		dc.w GMake_MakeLava-GMake_Index
00010FBC 0000                       		dc.w GMake_Display-GMake_Index
00010FBE 0000                       		dc.w GMake_Delete-GMake_Index
00010FC0                            
00010FC0 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010FC0 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010FC0 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010FC0                            ; ===========================================================================
00010FC0                            
00010FC0                            GMake_Main:	; Routine 0
00010FC0 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FC4 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010FCC 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010FD2 117C 0004 0001             		move.b	#4,obRender(a0)
00010FD8 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010FDE 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010FE4 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010FEA                            
00010FEA                            GMake_Wait:	; Routine 2
00010FEA 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010FEE 6A00                       		bpl.s	@cancel		; if time remains, branch
00010FF0                            
00010FF0 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010FF6 3038 D00C                  		move.w	(v_player+obY).w,d0
00010FFA 3228 000C                  		move.w	obY(a0),d1
00010FFE B041                       		cmp.w	d1,d0
00011000 6400                       		bcc.s	@cancel
00011002 0441 0170                  		subi.w	#$170,d1
00011006 B041                       		cmp.w	d1,d0
00011008 6500                       		bcs.s	@cancel
0001100A 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
0001100E                            
0001100E                            	@cancel:
0001100E 4E75                       		rts	
00011010                            ; ===========================================================================
00011010                            
00011010                            GMake_MakeLava:	; Routine 6
00011010 5428 0024                  		addq.b	#2,obRoutine(a0)
00011014 6100 EBCE                  		bsr.w	FindNextFreeObj
00011018 6600                       		bne.s	@fail
0001101A 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
0001101E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011024 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001102A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011030 2348 003C                  		move.l	a0,gmake_parent(a1)
00011034                            
00011034                            	@fail:
00011034 117C 0001 001C             		move.b	#1,obAnim(a0)
0001103A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
0001103E 6700                       		beq.s	@isgeyser	; if yes, branch
00011040 117C 0004 001C             		move.b	#4,obAnim(a0)
00011046 6000                       		bra.s	GMake_Display
00011048                            ; ===========================================================================
00011048                            
00011048                            	@isgeyser:
00011048 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0001104C 08E9 0001 0022             		bset	#1,obStatus(a1)
00011052 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00011058 6000                       		bra.s	GMake_Display
0001105A                            ; ===========================================================================
0001105A                            
0001105A                            GMake_ChkType:	; Routine 4
0001105A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
0001105E 6700                       		beq.s	GMake_Display	; if yes, branch
00011060 5428 0024                  		addq.b	#2,obRoutine(a0)
00011064 4E75                       		rts	
00011066                            ; ===========================================================================
00011066                            
00011066                            GMake_Display:	; Routine 8
00011066 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001106C 6100 B796                  		bsr.w	AnimateSprite
00011070 6100 E6D0                  		bsr.w	DisplaySprite
00011074 4E75                       		rts	
00011076                            ; ===========================================================================
00011076                            
00011076                            GMake_Delete:	; Routine $A
00011076 117C 0000 001C             		move.b	#0,obAnim(a0)
0001107C 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011082 4A28 0028                  		tst.b	obSubtype(a0)
00011086 6700 E6FA                  		beq.w	DeleteObject
0001108A 4E75                       		rts	
0001108C                            
0001108C                            
0001108C                            ; ---------------------------------------------------------------------------
0001108C                            ; Object 4D - lava geyser / lavafall (MZ)
0001108C                            ; ---------------------------------------------------------------------------
0001108C                            
0001108C                            LavaGeyser:
0001108C 7000                       		moveq	#0,d0
0001108E 1028 0024                  		move.b	obRoutine(a0),d0
00011092 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00011096 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001109A 6000 E6A6                  		bra.w	DisplaySprite
0001109E                            ; ===========================================================================
0001109E 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000110A0 0000                       		dc.w Geyser_Action-Geyser_Index
000110A2 0000                       		dc.w loc_EFFC-Geyser_Index
000110A4 0000                       		dc.w Geyser_Delete-Geyser_Index
000110A6                            
000110A6 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000110AA                            ; ===========================================================================
000110AA                            
000110AA                            Geyser_Main:	; Routine 0
000110AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000110AE 3168 000C 0030             		move.w	obY(a0),$30(a0)
000110B4 4A28 0028                  		tst.b	obSubtype(a0)
000110B8 6700                       		beq.s	@isgeyser
000110BA 0468 0250 000C             		subi.w	#$250,obY(a0)
000110C0                            
000110C0                            	@isgeyser:
000110C0 7000                       		moveq	#0,d0
000110C2 1028 0028                  		move.b	obSubtype(a0),d0
000110C6 D040                       		add.w	d0,d0
000110C8 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000110CE 2248                       		movea.l	a0,a1
000110D0 7201                       		moveq	#1,d1
000110D2 6100                       		bsr.s	@makelava
000110D4 6000                       		bra.s	@activate
000110D6                            ; ===========================================================================
000110D6                            
000110D6                            	@loop:
000110D6 6100 EB0C                  		bsr.w	FindNextFreeObj
000110DA 6600                       		bne.s	@fail
000110DC                            
000110DC                            @makelava:
000110DC 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
000110E0 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
000110E8 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
000110EE 137C 0004 0001             		move.b	#4,obRender(a1)
000110F4 137C 0020 0014             		move.b	#$20,obActWid(a1)
000110FA 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011100 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011106 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001110C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011112 137C 0005 001C             		move.b	#5,obAnim(a1)
00011118 4A28 0028                  		tst.b	obSubtype(a0)
0001111C 6700                       		beq.s	@fail
0001111E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011124                            
00011124                            	@fail:
00011124 51C9 FFB0                  		dbf	d1,@loop
00011128 4E75                       		rts	
0001112A                            ; ===========================================================================
0001112A                            
0001112A                            @activate:
0001112A 0669 0060 000C             		addi.w	#$60,obY(a1)
00011130 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011136 0669 0060 0030             		addi.w	#$60,$30(a1)
0001113C 137C 0093 0020             		move.b	#$93,obColType(a1)
00011142 137C 0080 0016             		move.b	#$80,obHeight(a1)
00011148 08E9 0004 0001             		bset	#4,obRender(a1)
0001114E 5829 0024                  		addq.b	#4,obRoutine(a1)
00011152 2348 003C                  		move.l	a0,$3C(a1)
00011156 4A28 0028                  		tst.b	obSubtype(a0)
0001115A 6700                       		beq.s	@sound
0001115C 7200                       		moveq	#0,d1
0001115E 6100 FF76                  		bsr.w	@loop
00011162 5429 0024                  		addq.b	#2,obRoutine(a1)
00011166 08E9 0004 0002             		bset	#4,obGfx(a1)
0001116C 0669 0100 000C             		addi.w	#$100,obY(a1)
00011172 337C 0000 0018             		move.w	#0,obPriority(a1)
00011178 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001117E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011184 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001118A                            
0001118A                            	@sound:
00011194                            
00011194                            Geyser_Action:	; Routine 2
00011194 7000                       		moveq	#0,d0
00011196 1028 0028                  		move.b	obSubtype(a0),d0
0001119A D040                       		add.w	d0,d0
0001119C 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000111A0 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000111A4 6100 E588                  		bsr.w	SpeedToPos
000111A8 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000111AE 6100 B654                  		bsr.w	AnimateSprite
000111B2                            
000111B2                            Geyser_ChkDel:
000111D0 4E75                       		rts	
000111D2                            ; ===========================================================================
000111D2 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000111D4 0000                       		dc.w Geyser_Type01-Geyser_Types
000111D6                            ; ===========================================================================
000111D6                            
000111D6                            Geyser_Type00:
000111D6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000111DC 3028 0030                  		move.w	$30(a0),d0
000111E0 B068 000C                  		cmp.w	obY(a0),d0
000111E4 6400                       		bcc.s	locret_EFDA
000111E6 5828 0024                  		addq.b	#4,obRoutine(a0)
000111EA 2268 003C                  		movea.l	$3C(a0),a1
000111EE 137C 0003 001C             		move.b	#3,obAnim(a1)
000111F4                            
000111F4                            locret_EFDA:
000111F4 4E75                       		rts	
000111F6                            ; ===========================================================================
000111F6                            
000111F6                            Geyser_Type01:
000111F6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000111FC 3028 0030                  		move.w	$30(a0),d0
00011200 B068 000C                  		cmp.w	obY(a0),d0
00011204 6400                       		bcc.s	locret_EFFA
00011206 5828 0024                  		addq.b	#4,obRoutine(a0)
0001120A 2268 003C                  		movea.l	$3C(a0),a1
0001120E 137C 0001 001C             		move.b	#1,obAnim(a1)
00011214                            
00011214                            locret_EFFA:
00011214 4E75                       		rts	
00011216                            ; ===========================================================================
00011216                            
00011216                            loc_EFFC:	; Routine 4
00011216 2268 003C                  		movea.l	$3C(a0),a1
0001121A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011220 6700 0000                  		beq.w	Geyser_Delete
00011224 3029 000C                  		move.w	obY(a1),d0
00011228 0640 0060                  		addi.w	#$60,d0
0001122C 3140 000C                  		move.w	d0,obY(a0)
00011230 9068 0030                  		sub.w	$30(a0),d0
00011234 4440                       		neg.w	d0
00011236 7208                       		moveq	#8,d1
00011238 0C40 0040                  		cmpi.w	#$40,d0
0001123C 6C00                       		bge.s	loc_F026
0001123E 720B                       		moveq	#$B,d1
00011240                            
00011240                            loc_F026:
00011240 0C40 0080                  		cmpi.w	#$80,d0
00011244 6F00                       		ble.s	loc_F02E
00011246 720E                       		moveq	#$E,d1
00011248                            
00011248                            loc_F02E:
00011248 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001124C 6A00                       		bpl.s	loc_F04C
0001124E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011254 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011258 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0001125E 6500                       		bcs.s	loc_F04C
00011260 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011266                            
00011266                            loc_F04C:
00011266 1028 001B                  		move.b	obAniFrame(a0),d0
0001126A D001                       		add.b	d1,d0
0001126C 1140 001A                  		move.b	d0,obFrame(a0)
00011270 6000 FF40                  		bra.w	Geyser_ChkDel
00011274                            ; ===========================================================================
00011274                            
00011274                            Geyser_Delete:	; Routine 6
00011274 6000 E50C                  		bra.w	DeleteObject
00011274 6000 E50C                  		bra.w	DeleteObject
00011278                            		include	"_incObj\54 Lava Tag.asm"
00011278                            ; ---------------------------------------------------------------------------
00011278                            ; Object 54 - invisible	lava tag (MZ)
00011278                            ; ---------------------------------------------------------------------------
00011278                            
00011278                            LavaTag:
00011278 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
0001127E 6E00 0000                  		bgt	WaterTag	;TIS
00011282 7000                       		moveq	#0,d0
00011284 1028 0024                  		move.b	obRoutine(a0),d0
00011288 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0001128C 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011290                            ; ===========================================================================
00011290 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011292 0000                       		dc.w LTag_ChkDel-LTag_Index
00011294                            
00011294 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
00011298 00                         		even
00011298                            ; ===========================================================================
00011298                            
00011298                            LTag_Main:	; Routine 0
00011298 5428 0024                  		addq.b	#2,obRoutine(a0)
0001129C 7000                       		moveq	#0,d0
0001129E 1028 0028                  		move.b	obSubtype(a0),d0
000112A2 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000112A8 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000112B0 117C 0084 0001             		move.b	#$84,obRender(a0)
000112B6                            
000112B6                            LTag_ChkDel:	; Routine 2
000112B6 3028 0008                  		move.w	obX(a0),d0
000112BA 0240 FF80                  		andi.w	#$FF80,d0
000112BE 3238 F700                  		move.w	(v_screenposx).w,d1
000112C2 0441 0080                  		subi.w	#$80,d1
000112C6 0241 FF80                  		andi.w	#$FF80,d1
000112CA 9041                       		sub.w	d1,d0
000112CC 6B00 E4B4                  		bmi.w	DeleteObject
000112D0 0C40 0280                  		cmpi.w	#$280,d0
000112D4 6200 E4AC                  		bhi.w	DeleteObject
000112D8 4E75                       		rts
000112DA                            
000112DA                            
000112DA                            ; ---------------------------------------------------------------------------
000112DA                            ; Object 54a - invisible	water tag (MZ) - TIS
000112DA                            ; ---------------------------------------------------------------------------
000112DA                            
000112DA                            WaterTag:	
000112DA 7000                       		moveq	#0,d0
000112DC 1028 0024                  		move.b	obRoutine(a0),d0
000112E0 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000112E4 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000112E8                            ; ===========================================================================
000112E8 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000112EA 0000                       		dc.w WTag_ChkDel-WTag_Index
000112EC                            
000112EC 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000112F0 00                         		even
000112F0                            ; ===========================================================================
000112F0                            
000112F0                            
000112F0                            WTag_Main:	; Routine 0
000112F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000112F4 7000                       		moveq	#0,d0
000112F6                            		;move.b	obSubtype(a0),d0
000112F6                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
000112F6 0400 00F0                  		sub.b	#$F0,d0
000112FA 1178 0096 0020             		move.b	$96,obColType(a0)							
00011300                            		;move.l	#Map_LTag,obMap(a0)
00011300                            		;move.b	#$84,obRender(a0)
00011300                            
00011300                            WTag_ChkDel:	; Routine 2
00011300 3028 0008                  		move.w	obX(a0),d0
00011304 0240 FF80                  		andi.w	#$FF80,d0
00011308 3238 F700                  		move.w	(v_screenposx).w,d1
0001130C 0441 0080                  		subi.w	#$80,d1
00011310 0241 FF80                  		andi.w	#$FF80,d1
00011314 9041                       		sub.w	d1,d0
00011316 6B00 E46A                  		bmi.w	DeleteObject
0001131A 0C40 0280                  		cmpi.w	#$280,d0
0001131E 6200 E462                  		bhi.w	DeleteObject
00011322 4E75                       		rts
00011324                            
00011324                            
00011324                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011324                            ; ---------------------------------------------------------------------------
00011324                            ; Sprite mappings - invisible lava tag (MZ)
00011324                            ; ---------------------------------------------------------------------------
00011324                            Map_LTag_internal:
00011324 0000                       		dc.w @0-Map_LTag_internal
00011326 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011328 00                         		even
00011328 00                         		even
00011328                            		include	"_anim\Lava Geyser.asm"
00011328                            ; ---------------------------------------------------------------------------
00011328                            ; Animation script - geyser of lava (MZ)
00011328                            ; ---------------------------------------------------------------------------
00011328 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001132A 0000                       		dc.w @bubble2-Ani_Geyser
0001132C 0000                       		dc.w @end-Ani_Geyser
0001132E 0000                       		dc.w @bubble3-Ani_Geyser
00011330 0000                       		dc.w @blank-Ani_Geyser
00011332 0000                       		dc.w @bubble4-Ani_Geyser
00011334 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0001133E 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011342 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011346 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0001134E 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011352 00                         		even
00011352 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011356                            		even
00011356                            		even
00011356                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011356                            ; ---------------------------------------------------------------------------
00011356                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011356                            ; ---------------------------------------------------------------------------
00011356                            Map_Geyser_internal:
00011356 0000                       		dc.w @bubble1-Map_Geyser_internal
00011358 0000                       		dc.w @bubble2-Map_Geyser_internal
0001135A 0000                       		dc.w @bubble3-Map_Geyser_internal
0001135C 0000                       		dc.w @bubble4-Map_Geyser_internal
0001135E 0000                       		dc.w @bubble5-Map_Geyser_internal
00011360 0000                       		dc.w @bubble6-Map_Geyser_internal
00011362 0000                       		dc.w @end1-Map_Geyser_internal
00011364 0000                       		dc.w @end2-Map_Geyser_internal
00011366 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011368 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001136A 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001136C 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
0001136E 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011370 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011372 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011374 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011376 0000                       		dc.w @longcolumn3-Map_Geyser_internal
00011378 0000                       		dc.w @bubble7-Map_Geyser_internal
0001137A 0000                       		dc.w @bubble8-Map_Geyser_internal
0001137C 0000                       		dc.w @blank-Map_Geyser_internal
0001137E 02                         @bubble1:	dc.b 2
0001137F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011384 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011389 02                         @bubble2:	dc.b 2
0001138A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0001138F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011394 04                         @bubble3:	dc.b 4
00011395 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001139A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001139F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000113A4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000113A9 04                         @bubble4:	dc.b 4
000113AA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000113AF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000113B4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000113B9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000113BE 06                         @bubble5:	dc.b 6
000113BF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000113C4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000113C9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000113CE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000113D3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000113D8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000113DD 06                         @bubble6:	dc.b 6
000113DE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000113E3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000113E8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000113ED EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000113F2 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000113F7 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000113FC 02                         @end1:		dc.b 2
000113FD E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011402 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011407 02                         @end2:		dc.b 2
00011408 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001140D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011412 0A                         @medcolumn1:	dc.b $A
00011413 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011418 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001141D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011422 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011427 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001142C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011431 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011436 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001143B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011440 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011445 0A                         @medcolumn2:	dc.b $A
00011446 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001144B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011450 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011455 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001145A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001145F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011464 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011469 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001146E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011473 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011478 0A                         @medcolumn3:	dc.b $A
00011479 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001147E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011483 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011488 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001148D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011492 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011497 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001149C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000114A1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000114A6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000114AB 06                         @shortcolumn1:	dc.b 6
000114AC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000114B1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000114B6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000114BB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000114C0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000114C5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000114CA 06                         @shortcolumn2:	dc.b 6
000114CB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000114D0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000114D5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000114DA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000114DF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000114E4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000114E9 06                         @shortcolumn3:	dc.b 6
000114EA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000114EF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000114F4 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000114F9 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000114FE D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011503 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011508 10                         @longcolumn1:	dc.b $10
00011509 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001150E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011513 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011518 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001151D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011522 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011527 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001152C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011531 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011536 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001153B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011540 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011545 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001154A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001154F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011554 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011559 10                         @longcolumn2:	dc.b $10
0001155A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001155F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011564 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011569 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001156E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011573 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011578 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001157D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011582 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011587 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001158C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011591 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011596 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001159B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000115A0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000115A5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000115AA 10                         @longcolumn3:	dc.b $10
000115AB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000115B0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000115B5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000115BA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000115BF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000115C4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000115C9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000115CE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000115D3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000115D8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000115DD 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000115E2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000115E7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000115EC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000115F1 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000115F6 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000115FB 06                         @bubble7:	dc.b 6
000115FC E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011601 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011606 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001160B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011610 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011615 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001161A 06                         @bubble8:	dc.b 6
0001161B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011620 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011625 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001162A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001162F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011634 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011639 00                         @blank:	dc.b 0
0001163A                            		even
0001163A                            		even
0001163A                            
0001163A                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001163A                            ; ---------------------------------------------------------------------------
0001163A                            ; Object 40 - Moto Bug enemy (GHZ)
0001163A                            ; ---------------------------------------------------------------------------
0001163A                            
0001163A                            MotoBug:
0001163A 7000                       		moveq	#0,d0
0001163C 1028 0024                  		move.b	obRoutine(a0),d0
00011640 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011644 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011648                            ; ===========================================================================
00011648 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001164A 0000                       		dc.w Moto_Action-Moto_Index
0001164C 0000                       		dc.w Moto_Animate-Moto_Index
0001164E 0000                       		dc.w Moto_Delete-Moto_Index
00011650                            ; ===========================================================================
00011650                            
00011650                            Moto_Main:	; Routine 0
00011650 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011658 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001165E 117C 0004 0001             		move.b	#4,obRender(a0)
00011664 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001166A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011670 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011674 6600                       		bne.s	@smoke		; if yes, branch
00011676 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001167C 117C 0008 0017             		move.b	#8,obWidth(a0)
00011682 117C 000C 0020             		move.b	#$C,obColType(a0)
00011688 6100 E06C                  		bsr.w	ObjectFall
0001168C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011692 4A41                       		tst.w	d1
00011694 6A00                       		bpl.s	@notonfloor
00011696 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001169A 317C 0000 0012             		move.w	#0,obVelY(a0)
000116A0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000116A4 0868 0000 0022             		bchg	#0,obStatus(a0)
000116AA                            
000116AA                            	@notonfloor:
000116AA 4E75                       		rts	
000116AC                            ; ===========================================================================
000116AC                            
000116AC                            @smoke:
000116AC 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000116B0 6000 0000                  		bra.w	Moto_Animate
000116B4                            ; ===========================================================================
000116B4                            
000116B4                            Moto_Action:	; Routine 2
000116B4 7000                       		moveq	#0,d0
000116B6 1028 0025                  		move.b	ob2ndRout(a0),d0
000116BA 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000116BE 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000116C2 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000116C8 6100 B13A                  		bsr.w	AnimateSprite
000116CC                            
000116CC                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000116CC                            ; ---------------------------------------------------------------------------
000116CC                            ; Subroutine to remember whether an object is destroyed/collected
000116CC                            ; ---------------------------------------------------------------------------
000116CC                            
000116CC                            RememberState:
000116EA 6000 E056                  		bra.w	DisplaySprite
000116EE                            
000116EE                            	@offscreen:
000116EE 45F8 FC00                  		lea	(v_objstate).w,a2
000116F2 7000                       		moveq	#0,d0
000116F4 1028 0023                  		move.b	obRespawnNo(a0),d0
000116F8 6700                       		beq.s	@delete
000116FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011700                            
00011700                            	@delete:
00011700 6000 E080                  		bra.w	DeleteObject
00011700 6000 E080                  		bra.w	DeleteObject
00011704                            
00011704                            ; ===========================================================================
00011704 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011706 0000                       		dc.w @findfloor-Moto_ActIndex
00011708                            
00011708 =00000030                  @time:		equ $30
00011708 =00000033                  @smokedelay:	equ $33
00011708                            ; ===========================================================================
00011708                            
00011708                            @move:
00011708 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001170C 6A00                       		bpl.s	@wait		; if time remains, branch
0001170E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011712 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011718 117C 0001 001C             		move.b	#1,obAnim(a0)
0001171E 0868 0000 0022             		bchg	#0,obStatus(a0)
00011724 6600                       		bne.s	@wait
00011726 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001172A                            
0001172A                            	@wait:
0001172A 4E75                       		rts	
0001172C                            ; ===========================================================================
0001172C                            
0001172C                            @findfloor:
0001172C 6100 E000                  		bsr.w	SpeedToPos
00011730 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011736 0C41 FFF8                  		cmpi.w	#-8,d1
0001173A 6D00                       		blt.s	@pause
0001173C 0C41 000C                  		cmpi.w	#$C,d1
00011740 6C00                       		bge.s	@pause
00011742 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011746 5328 0033                  		subq.b	#1,@smokedelay(a0)
0001174A 6A00                       		bpl.s	@nosmoke
0001174C 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011752 6100 E47A                  		bsr.w	FindFreeObj
00011756 6600                       		bne.s	@nosmoke
00011758 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001175C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011762 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011768 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001176E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011774                            
00011774                            	@nosmoke:
00011774 4E75                       		rts	
00011776                            
00011776                            @pause:
00011776 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001177A 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011780 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011786 117C 0000 001C             		move.b	#0,obAnim(a0)
0001178C 4E75                       		rts	
0001178E                            ; ===========================================================================
0001178E                            
0001178E                            Moto_Animate:	; Routine 4
0001178E 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011794 6100 B06E                  		bsr.w	AnimateSprite
00011798 6000 DFA8                  		bra.w	DisplaySprite
0001179C                            ; ===========================================================================
0001179C                            
0001179C                            Moto_Delete:	; Routine 6
0001179C 6000 DFE4                  		bra.w	DeleteObject
0001179C 6000 DFE4                  		bra.w	DeleteObject
000117A0                            		include	"_anim\Moto Bug.asm"
000117A0                            ; ---------------------------------------------------------------------------
000117A0                            ; Animation script - Motobug enemy
000117A0                            ; ---------------------------------------------------------------------------
000117A0 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000117A2 0000                       		dc.w @walk-Ani_Moto
000117A4 0000                       		dc.w @smoke-Ani_Moto
000117A6                            
000117A6 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000117AA 00                         		even
000117AA 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000117B0 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000117BE 00                         		even
000117BE 00                         		even
000117BE                            Map_Moto:	include	"_maps\Moto Bug.asm"
000117BE                            ; --------------------------------------------------------------------------------
000117BE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000117BE                            ; --------------------------------------------------------------------------------
000117BE                            
000117BE                            SME_TTY9T:	
000117BE 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000117C2 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000117C6 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000117CA 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000117CC 04                         SME_TTY9T_E:	dc.b 4	
000117CD F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000117D2 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000117D7 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000117DC 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000117E1 04                         SME_TTY9T_23:	dc.b 4	
000117E2 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000117E7 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
000117EC F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000117F1 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
000117F6 05                         SME_TTY9T_38:	dc.b 5	
000117F7 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000117FC 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011801 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011806 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
0001180B 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011810 01                         SME_TTY9T_52:	dc.b 1	
00011811 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011816 01                         SME_TTY9T_58:	dc.b 1	
00011817 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
0001181C 01                         SME_TTY9T_5E:	dc.b 1	
0001181D FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011822 00                         SME_TTY9T_64:	dc.b 0	
00011824 00                         		even
00011824 00                         		even
00011824                            		include	"_incObj\4F.asm"
00011824                            ; ---------------------------------------------------------------------------
00011824                            ; Object 4F - Splats
00011824                            ; ---------------------------------------------------------------------------
00011824                            
00011824                            Obj4F:
00011824 7000                                       moveq   #0,d0
00011826 1028 0024                                  move.b  $24(a0),d0
0001182A 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
0001182E 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011832                            ; ---------------------------------------------------------------------------
00011832 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011834 0000                                       dc.w loc_D246-ObjSplats_Index
00011836 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011838 0000                                       dc.w loc_D2C8-ObjSplats_Index
0001183A                            ; ---------------------------------------------------------------------------
0001183A                            
0001183A                            ObjSplats_Init:
0001183A 5428 0024                                  addq.b  #2,$24(a0)
0001183E 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011846 317C 24E4 0002                             move.w  #$24E4,2(a0)
0001184C 117C 0004 0001                             move.b  #4,1(a0)
00011852 117C 0004 0014                             move.b  #4,obActWid(a0)
00011858 317C 0200 0018             				move.w	#$200,obPriority(a0)
0001185E 117C 0014 0016                             move.b  #$14,$16(a0)
00011864 117C 0002 0020                             move.b  #2,$20(a0)
0001186A 4A28 0028                                  tst.b   $28(a0)
0001186E 6700                                       beq.s   loc_D246
00011870 343C 0300                                  move.w  #$300,d2
00011874 6000                                       bra.s   ObjSplats_FaceRight
00011876                            ; ---------------------------------------------------------------------------
00011876                            
00011876                            loc_D246:
00011876 343C 00E0                                  move.w  #$E0,d2
0001187A                            
0001187A                            ObjSplats_FaceRight:
0001187A 323C 0100                                  move.w  #$100,d1
0001187E 08E8 0000 0001                             bset    #0,1(a0)
00011884 3038 D008                                  move.w  ($FFFFD008).w,d0
00011888 9068 0008                                  sub.w   8(a0),d0
0001188C 6400                                       bcc.s   ObjSplats_Move
0001188E 4440                                       neg.w   d0
00011890 4441                                       neg.w   d1
00011892 08A8 0000 0001                             bclr    #0,1(a0)
00011898                            
00011898                            ObjSplats_Move:
00011898 B042                                       cmp.w   d2,d0
0001189A 6400                                       bcc.s   ObjSplats_Bounce
0001189C 3141 0010                                  move.w  d1,$10(a0)
000118A0 5428 0024                                  addq.b  #2,$24(a0)
000118A4                            
000118A4                            ObjSplats_Bounce:
000118A4 6100 DE50                                  bsr.w   ObjectFall
000118A8 117C 0001 001A                             move.b  #1,$1A(a0)
000118AE 4A68 0012                                  tst.w   $12(a0)
000118B2 6B00                                       bmi.s   ObjSplats_Turn
000118B4 117C 0000 001A                             move.b  #0,$1A(a0)
000118BA 6100 0000                                  bsr.w   ObjFloorDist
000118BE 4A41                                       tst.w   d1
000118C0 6A00                                       bpl.s   ObjSplats_Turn
000118C2 3011                                       move.w  (a1),d0
000118C4 0240 03FF                                  andi.w  #$3FF,d0
000118C8 0C40 02D2                                  cmpi.w  #$2D2,d0
000118CC 6500                                       bcs.s   ObjSplats_Fall
000118CE 5428 0024                                  addq.b  #2,$24(a0)
000118D2 6000                                       bra.s   ObjSplats_Turn
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            
000118D4                            ObjSplats_Fall:
000118D4 D368 000C                                  add.w   d1,$C(a0)
000118D8 317C FC00 0012                             move.w  #$FC00,$12(a0)
000118DE                            
000118DE                            ObjSplats_Turn:
000118DE 6100 0000                                  bsr.w   Yad_ChkWall
000118E2 6700                                       beq.s   loc_D2C4
000118E4 4468 0010                                  neg.w   $10(a0)
000118E8 0868 0000 0001                             bchg    #0,1(a0)
000118EE 0868 0000 0022                             bchg    #0,$22(a0)
000118F4                            
000118F4                            loc_D2C4:
000118F4 6000 FDD6                                  bra.w   RememberState
000118F8                            ; ---------------------------------------------------------------------------
000118F8                            
000118F8                            loc_D2C8:
000118F8 6100 DDFC                                  bsr.w   ObjectFall
000118FC 6100 DE44                                  bsr.w   DisplaySprite
00011900 4A28 0001                                  tst.b   1(a0)
00011904 6A00 DE7C                                  bpl.w   DeleteObject
00011908 4E75                                       rts
00011908 4E75                                       rts
0001190A                            Map_Splats:	include	"_maps\Splats.asm"
0001190A 0000                       Map_Splats_internal:     dc.w unk_D310-*
0001190C 0000                                       dc.w unk_D31B-Map_Splats_internal
0001190E 02                         unk_D310:       dc.b   2
0001190F EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011919 02                         unk_D31B:       dc.b   2
0001191A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
0001191A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011924                            
00011924                            		include	"_incObj\50 Yadrin.asm"
00011924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011924                            
00011924                            
00011924                            Yad_ChkWall:
00011924 3038 FE04                  		move.w	(v_framecount).w,d0
00011928 D047                       		add.w	d7,d0
0001192A 0240 0003                  		andi.w	#3,d0
0001192E 6600                       		bne.s	loc_F836
00011930 7600                       		moveq	#0,d3
00011932 1628 0014                  		move.b	obActWid(a0),d3
00011936 4A68 0010                  		tst.w	obVelX(a0)
0001193A 6B00                       		bmi.s	loc_F82C
0001193C 6100 0000                  		bsr.w	ObjHitWallRight
00011940 4A41                       		tst.w	d1
00011942 6A00                       		bpl.s	loc_F836
00011944                            
00011944                            loc_F828:
00011944 7001                       		moveq	#1,d0
00011946 4E75                       		rts	
00011948                            ; ===========================================================================
00011948                            
00011948                            loc_F82C:
00011948 4643                       		not.w	d3
0001194A 6100 0000                  		bsr.w	ObjHitWallLeft
0001194E 4A41                       		tst.w	d1
00011950 6BF2                       		bmi.s	loc_F828
00011952                            
00011952                            loc_F836:
00011952 7000                       		moveq	#0,d0
00011954 4E75                       		rts	
00011956                            ; End of function Yad_ChkWall
00011956                            
00011956                            ; ===========================================================================
00011956                            ; ---------------------------------------------------------------------------
00011956                            ; Object 50 - Yadrin enemy (SYZ)
00011956                            ; ---------------------------------------------------------------------------
00011956                            
00011956                            Yadrin:
00011956 7000                       		moveq	#0,d0
00011958 1028 0024                  		move.b	obRoutine(a0),d0
0001195C 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011960 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011964                            ; ===========================================================================
00011964 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011966 0000                       		dc.w Yad_Action-Yad_Index
00011968                            
00011968 =00000030                  yad_timedelay:	equ $30
00011968                            ; ===========================================================================
00011968                            
00011968                            Yad_Main:	; Routine 0
00011968 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011970 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011976 117C 0004 0001             		move.b	#4,obRender(a0)
0001197C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011982 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011988 117C 0011 0016             		move.b	#$11,obHeight(a0)
0001198E 117C 0008 0017             		move.b	#8,obWidth(a0)
00011994 117C 00CC 0020             		move.b	#$CC,obColType(a0)
0001199A 6100 DD5A                  		bsr.w	ObjectFall
0001199E 6100 0000                  		bsr.w	ObjFloorDist
000119A2 4A41                       		tst.w	d1
000119A4 6A00                       		bpl.s	locret_F89E
000119A6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000119AA 317C 0000 0012             		move.w	#0,obVelY(a0)
000119B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000119B4 0868 0000 0022             		bchg	#0,obStatus(a0)
000119BA                            
000119BA                            	locret_F89E:
000119BA 4E75                       		rts	
000119BC                            ; ===========================================================================
000119BC                            
000119BC                            Yad_Action:	; Routine 2
000119BC 7000                       		moveq	#0,d0
000119BE 1028 0025                  		move.b	ob2ndRout(a0),d0
000119C2 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
000119C6 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
000119CA 43F9 0000 0000             		lea	(Ani_Yad).l,a1
000119D0 6100 AE32                  		bsr.w	AnimateSprite
000119D4 6000 FCF6                  		bra.w	RememberState
000119D8                            ; ===========================================================================
000119D8 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
000119DA 0000                       		dc.w Yad_FixToFloor-Yad_Index2
000119DC                            ; ===========================================================================
000119DC                            
000119DC                            Yad_Move:
000119DC 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
000119E0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000119E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000119E6 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
000119EC 117C 0001 001C             		move.b	#1,obAnim(a0)
000119F2 0868 0000 0022             		bchg	#0,obStatus(a0)
000119F8 6600                       		bne.s	locret_F8E2
000119FA 4468 0010                  		neg.w	obVelX(a0)	; change direction
000119FE                            
000119FE                            	locret_F8E2:
000119FE 4E75                       		rts	
00011A00                            ; ===========================================================================
00011A00                            
00011A00                            Yad_FixToFloor:
00011A00 6100 DD2C                  		bsr.w	SpeedToPos
00011A04 6100 0000                  		bsr.w	ObjFloorDist
00011A08 0C41 FFF8                  		cmpi.w	#-8,d1
00011A0C 6D00                       		blt.s	Yad_Pause
00011A0E 0C41 000C                  		cmpi.w	#$C,d1
00011A12 6C00                       		bge.s	Yad_Pause
00011A14 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011A18 6100 FF0A                  		bsr.w	Yad_ChkWall
00011A1C 6600                       		bne.s	Yad_Pause
00011A1E 4E75                       		rts	
00011A20                            ; ===========================================================================
00011A20                            
00011A20                            Yad_Pause:
00011A20 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011A24 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011A2A 317C 0000 0010             		move.w	#0,obVelX(a0)
00011A30 117C 0000 001C             		move.b	#0,obAnim(a0)
00011A36 4E75                       		rts	
00011A36 4E75                       		rts	
00011A38                            		include	"_anim\Yadrin.asm"
00011A38                            ; ---------------------------------------------------------------------------
00011A38                            ; Animation script - Yadrin enemy
00011A38                            ; ---------------------------------------------------------------------------
00011A38 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011A3A 0000                       		dc.w @walk-Ani_Yad
00011A3C                            
00011A3C 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011A40 00                         		even
00011A40 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011A4E                            		even
00011A4E                            		even
00011A4E                            Map_Yad:	include	"_maps\Yadrin.asm"
00011A4E                            ; --------------------------------------------------------------------------------
00011A4E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011A4E                            ; --------------------------------------------------------------------------------
00011A4E                            
00011A4E                            SME_4WhIu:	
00011A4E 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011A52 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011A56 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011A5A 09                         SME_4WhIu_C:	dc.b 9	
00011A5B F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A60 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A65 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A6A FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A6F FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A74 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A79 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A7E F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A83 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A88 09                         SME_4WhIu_3A:	dc.b 9	
00011A89 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A8E FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A93 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A98 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A9D FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011AA2 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011AA7 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011AAC EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011AB1 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011AB6 0C                         SME_4WhIu_68:	dc.b $C	
00011AB7 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011ABC FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011AC1 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011AC6 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011ACB FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011AD0 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011AD5 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011ADA FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011ADF FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011AE4 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011AE9 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011AEE 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011AF3 0C                         SME_4WhIu_A5:	dc.b $C	
00011AF4 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011AF9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011AFE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011B03 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011B08 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011B0D F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011B12 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011B17 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011B1C FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011B21 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011B26 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011B2B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011B30 05                         SME_4WhIu_E2:	dc.b 5	
00011B31 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011B36 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011B3B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011B40 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011B45 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011B4A 05                         SME_4WhIu_FC:	dc.b 5	
00011B4B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011B50 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011B55 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011B5A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011B5F 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011B64                            		even
00011B64                            		even
00011B64                            
00011B64                            		include	"_incObj\sub SolidObject.asm"
00011B64                            ; ---------------------------------------------------------------------------
00011B64                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011B64                            ;
00011B64                            ; input:
00011B64                            ;	d1 = width
00011B64                            ;	d2 = height / 2 (when jumping)
00011B64                            ;	d3 = height / 2 (when walking)
00011B64                            ;	d4 = x-axis position
00011B64                            ; ---------------------------------------------------------------------------
00011B64                            
00011B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B64                            
00011B64                            
00011B64                            SolidObject:
00011B64 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011B68 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011B6C 3401                       		move.w	d1,d2
00011B6E D442                       		add.w	d2,d2
00011B70 43F8 D000                  		lea	(v_player).w,a1
00011B74 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B7A 6600                       		bne.s	@leave		; if yes, branch
00011B7C 3029 0008                  		move.w	obX(a1),d0
00011B80 9068 0008                  		sub.w	obX(a0),d0
00011B84 D041                       		add.w	d1,d0
00011B86 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011B88 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011B8A 6500                       		bcs.s	@stand		; if not, branch
00011B8C                            
00011B8C                            	@leave:
00011B8C 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011B92 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011B98 4228 0025                  		clr.b	obSolid(a0)
00011B9C 7800                       		moveq	#0,d4
00011B9E 4E75                       		rts	
00011BA0                            
00011BA0                            	@stand:
00011BA0 3404                       		move.w	d4,d2
00011BA2 4EB9 0000 9524             		jsr	MvSonicOnPtfm
00011BA8 7800                       		moveq	#0,d4
00011BAA 4E75                       		rts	
00011BAC                            ; ===========================================================================
00011BAC                            
00011BAC                            SolidObject71:
00011BAC 4A28 0025                  		tst.b	obSolid(a0)
00011BB0 6700 0000                  		beq.w	loc_FAD0
00011BB4 3401                       		move.w	d1,d2
00011BB6 D442                       		add.w	d2,d2
00011BB8 43F8 D000                  		lea	(v_player).w,a1
00011BBC 0829 0001 0022             		btst	#1,obStatus(a1)
00011BC2 6600                       		bne.s	@leave
00011BC4 3029 0008                  		move.w	obX(a1),d0
00011BC8 9068 0008                  		sub.w	obX(a0),d0
00011BCC D041                       		add.w	d1,d0
00011BCE 6B00                       		bmi.s	@leave
00011BD0 B042                       		cmp.w	d2,d0
00011BD2 6500                       		bcs.s	@stand
00011BD4                            
00011BD4                            	@leave:
00011BD4 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011BDA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011BE0 4228 0025                  		clr.b	obSolid(a0)
00011BE4 7800                       		moveq	#0,d4
00011BE6 4E75                       		rts	
00011BE8                            
00011BE8                            	@stand:
00011BE8 3404                       		move.w	d4,d2
00011BEA 4EB9 0000 9524             		jsr	MvSonicOnPtfm
00011BF0 7800                       		moveq	#0,d4
00011BF2 4E75                       		rts	
00011BF4                            ; ===========================================================================
00011BF4                            
00011BF4                            SolidObject2F:
00011BF4 43F8 D000                  		lea	(v_player).w,a1
00011BF8 4A28 0001                  		tst.b	obRender(a0)
00011BFC 6A00 0000                  		bpl.w	Solid_Ignore
00011C00 3029 0008                  		move.w	obX(a1),d0
00011C04 9068 0008                  		sub.w	obX(a0),d0
00011C08 D041                       		add.w	d1,d0
00011C0A 6B00 0000                  		bmi.w	Solid_Ignore
00011C0E 3601                       		move.w	d1,d3
00011C10 D643                       		add.w	d3,d3
00011C12 B043                       		cmp.w	d3,d0
00011C14 6200 0000                  		bhi.w	Solid_Ignore
00011C18 3A00                       		move.w	d0,d5
00011C1A 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011C20 6700                       		beq.s	@notflipped	; if not, branch
00011C22 4645                       		not.w	d5
00011C24 DA43                       		add.w	d3,d5
00011C26                            
00011C26                            	@notflipped:
00011C26 E24D                       		lsr.w	#1,d5
00011C28 7600                       		moveq	#0,d3
00011C2A 1632 5000                  		move.b	(a2,d5.w),d3
00011C2E 9612                       		sub.b	(a2),d3
00011C30 3A28 000C                  		move.w	obY(a0),d5
00011C34 9A43                       		sub.w	d3,d5
00011C36 1629 0016                  		move.b	obHeight(a1),d3
00011C3A 4883                       		ext.w	d3
00011C3C D443                       		add.w	d3,d2
00011C3E 3629 000C                  		move.w	obY(a1),d3
00011C42 9645                       		sub.w	d5,d3
00011C44 5843                       		addq.w	#4,d3
00011C46 D642                       		add.w	d2,d3
00011C48 6B00 0000                  		bmi.w	Solid_Ignore
00011C4C 3802                       		move.w	d2,d4
00011C4E D844                       		add.w	d4,d4
00011C50 B644                       		cmp.w	d4,d3
00011C52 6400 0000                  		bcc.w	Solid_Ignore
00011C56 6000 0000                  		bra.w	loc_FB0E
00011C5A                            ; ===========================================================================
00011C5A                            
00011C5A                            Solid_ChkEnter:
00011C5A 4A28 0001                  		tst.b	obRender(a0)
00011C5E 6A00 0000                  		bpl.w	Solid_Ignore
00011C62                            
00011C62                            loc_FAD0:
00011C62 43F8 D000                  		lea	(v_player).w,a1
00011C66 3029 0008                  		move.w	obX(a1),d0
00011C6A 9068 0008                  		sub.w	obX(a0),d0
00011C6E D041                       		add.w	d1,d0
00011C70 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011C74 3601                       		move.w	d1,d3
00011C76 D643                       		add.w	d3,d3
00011C78 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011C7A 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011C7E 1629 0016                  		move.b	obHeight(a1),d3
00011C82 4883                       		ext.w	d3
00011C84 D443                       		add.w	d3,d2
00011C86 3629 000C                  		move.w	obY(a1),d3
00011C8A 9668 000C                  		sub.w	obY(a0),d3
00011C8E 5843                       		addq.w	#4,d3
00011C90 D642                       		add.w	d2,d3
00011C92 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011C96 3802                       		move.w	d2,d4
00011C98 D844                       		add.w	d4,d4
00011C9A B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011C9C 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011CA0                            
00011CA0                            loc_FB0E:
00011CA0 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011CA4 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011CA8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011CAE 6400 0000                  			bcc.w	Solid_Debug
00011CB2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011CB6 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011CBA 3A00                       		move.w	d0,d5
00011CBC B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011CBE 6400                       		bcc.s	@isright	; if yes, branch
00011CC0 D241                       		add.w	d1,d1
00011CC2 9041                       		sub.w	d1,d0
00011CC4 3A00                       		move.w	d0,d5
00011CC6 4445                       		neg.w	d5
00011CC8                            
00011CC8                            	@isright:
00011CC8 3203                       		move.w	d3,d1
00011CCA B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011CCC 6400                       		bcc.s	@isbelow	; if yes, branch
00011CCE                            
00011CCE 5943                       		subq.w	#4,d3
00011CD0 9644                       		sub.w	d4,d3
00011CD2 3203                       		move.w	d3,d1
00011CD4 4441                       		neg.w	d1
00011CD6                            
00011CD6                            	@isbelow:
00011CD6 BA41                       		cmp.w	d1,d5
00011CD8 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011CDC 0C41 0004                  		cmpi.w	#4,d1
00011CE0 6300                       		bls.s	Solid_SideAir
00011CE2 4A40                       		tst.w	d0		; where is Sonic?
00011CE4 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011CE6 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011CE8 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011CEC 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011CEE 6000                       		bra.s	Solid_Left
00011CF0                            ; ===========================================================================
00011CF0                            
00011CF0                            Solid_Right:
00011CF0 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011CF4 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011CF6                            
00011CF6                            Solid_Left:
00011CF6 337C 0000 0020             		move.w	#0,obInertia(a1)
00011CFC 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011D02                            
00011D02                            Solid_Centre:
00011D02 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011D06 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D0C 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011D0E 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011D14 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011D1A 7801                       		moveq	#1,d4		; return side collision
00011D1C 4E75                       		rts	
00011D1E                            ; ===========================================================================
00011D1E                            
00011D1E                            Solid_SideAir:
00011D1E 6100                       		bsr.s	Solid_NotPushing
00011D20 7801                       		moveq	#1,d4		; return side collision
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            Solid_Ignore:
00011D24 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011D2A 6700                       		beq.s	Solid_Debug	; if not, branch
00011D2C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011D32 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011D34 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011D3A 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011D3C 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011D42 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011D44 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011D4A                            
00011D4A                            
00011D4A                            Solid_NotPushing:
00011D4A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011D50 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011D56                            
00011D56                            Solid_Debug:
00011D56 7800                       		moveq	#0,d4		; return no collision
00011D58 4E75                       		rts	
00011D5A                            ; ===========================================================================
00011D5A                            
00011D5A                            Solid_TopBottom:
00011D5A 4A43                       		tst.w	d3		; is Sonic below the object?
00011D5C 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011D5E 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011D62 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011D64 60BE                       		bra.s	Solid_Ignore
00011D66                            ; ===========================================================================
00011D66                            
00011D66                            Solid_Below:
00011D66 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011D6A 6700                       		beq.s	Solid_Squash	; if not, branch
00011D6C 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011D6E 4A43                       		tst.w	d3		; is Sonic above the object?
00011D70 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011D72 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D76 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011D7C                            
00011D7C                            Solid_TopBtmAir:
00011D7C 78FF                       		moveq	#-1,d4
00011D7E 4E75                       		rts	
00011D80                            ; ===========================================================================
00011D80                            
00011D80                            Solid_Squash:
00011D80 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D86 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011D88 2F08                       		move.l	a0,-(sp)
00011D8A 2049                       		movea.l	a1,a0
00011D8C 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011D92 205F                       		movea.l	(sp)+,a0
00011D94 78FF                       		moveq	#-1,d4
00011D96 4E75                       		rts	
00011D98                            ; ===========================================================================
00011D98                            
00011D98                            Solid_Landed:
00011D98 5943                       		subq.w	#4,d3
00011D9A 7200                       		moveq	#0,d1
00011D9C 1228 0014                  		move.b	obActWid(a0),d1
00011DA0 3401                       		move.w	d1,d2
00011DA2 D442                       		add.w	d2,d2
00011DA4 D269 0008                  		add.w	obX(a1),d1
00011DA8 9268 0008                  		sub.w	obX(a0),d1
00011DAC 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011DAE B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011DB0 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011DB2 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011DB6 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011DB8 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011DBC 5369 000C                  		subq.w	#1,obY(a1)
00011DC0 6100                       		bsr.s	Solid_ResetFloor
00011DC2 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011DC8 08E8 0003 0022             		bset	#3,obStatus(a0)
00011DCE 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011DD0 4E75                       		rts	
00011DD2                            ; ===========================================================================
00011DD2                            
00011DD2                            Solid_Miss:
00011DD2 7800                       		moveq	#0,d4
00011DD4 4E75                       		rts	
00011DD6                            ; End of function SolidObject
00011DD6                            
00011DD6                            
00011DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DD6                            
00011DD6                            
00011DD6                            Solid_ResetFloor:
00011DD6 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011DDC 6700                       		beq.s	@notonobj	; if not, branch
00011DDE                            
00011DDE 7000                       		moveq	#0,d0
00011DE0 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011DE4 ED48                       		lsl.w	#6,d0
00011DE6 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011DEC 2440                       		movea.l	d0,a2
00011DEE 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011DF4 422A 0025                  		clr.b	obSolid(a2)
00011DF8                            
00011DF8                            	@notonobj:
00011DF8 3008                       		move.w	a0,d0
00011DFA 0440 D000                  		subi.w	#$D000,d0
00011DFE EC48                       		lsr.w	#6,d0
00011E00 0240 007F                  		andi.w	#$7F,d0
00011E04 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011E08 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011E0E 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011E14 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011E1A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011E20 6700                       		beq.s	@notinair	; if not, branch
00011E22 2F08                       		move.l	a0,-(sp)
00011E24 2049                       		movea.l	a1,a0
00011E26 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011E2C 205F                       		movea.l	(sp)+,a0
00011E2E                            
00011E2E                            	@notinair:
00011E2E 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011E34 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011E3A 4E75                       		rts	
00011E3C                            ; End of function Solid_ResetFloor
00011E3C                            ; End of function Solid_ResetFloor
00011E3C                            
00011E3C                            		include	"_incObj\51 Smashable Green Block.asm"
00011E3C                            ; ---------------------------------------------------------------------------
00011E3C                            ; Object 51 - smashable	green block (MZ)
00011E3C                            ; ---------------------------------------------------------------------------
00011E3C                            
00011E3C                            SmashBlock:
00011E3C 7000                       		moveq	#0,d0
00011E3E 1028 0024                  		move.b	obRoutine(a0),d0
00011E42 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011E46 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011E4A 6000 F880                  		bra.w	RememberState
00011E4E                            ; ===========================================================================
00011E4E 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011E50 0000                       		dc.w Smab_Solid-Smab_Index
00011E52 0000                       		dc.w Smab_Points-Smab_Index
00011E54                            ; ===========================================================================
00011E54                            
00011E54                            Smab_Main:	; Routine 0
00011E54 5428 0024                  		addq.b	#2,obRoutine(a0)
00011E58 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011E60 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011E66 117C 0004 0001             		move.b	#4,obRender(a0)
00011E6C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011E72 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E78 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011E7E                            
00011E7E                            Smab_Solid:	; Routine 2
00011E7E                            
00011E7E =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011E7E =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011E7E                            
00011E7E 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011E84 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011E8A 323C 001B                  		move.w	#$1B,d1
00011E8E 343C 0010                  		move.w	#$10,d2
00011E92 363C 0011                  		move.w	#$11,d3
00011E96 3828 0008                  		move.w	obX(a0),d4
00011E9A 6100 FCC8                  		bsr.w	SolidObject
00011E9E 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011EA4 6600                       		bne.s	@smash		; if yes, branch
00011EA6                            
00011EA6                            	@notspinning:
00011EA6 4E75                       		rts	
00011EA8                            ; ===========================================================================
00011EA8                            
00011EA8                            @smash:
00011EA8 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011EAE 66F6                       		bne.s	@notspinning	; if not, branch
00011EB0 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011EB6 08E9 0002 0022             		bset	#2,obStatus(a1)
00011EBC 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011EC2 137C 0007 0017             		move.b	#7,obWidth(a1)
00011EC8 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011ECE 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011ED4 08E9 0001 0022             		bset	#1,obStatus(a1)
00011EDA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011EE0 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011EE6 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011EEC 4228 0025                  		clr.b	obSolid(a0)
00011EF0 117C 0001 001A             		move.b	#1,obFrame(a0)
00011EF6 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011EFC 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011EFE 343C 0038                  		move.w	#$38,d2
00011F02 6100 D3F2                  		bsr.w	SmashObject
00011F06 6100 DCC6                  		bsr.w	FindFreeObj
00011F0A 6600                       		bne.s	Smab_Points
00011F0C 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011F10 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011F16 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011F1C 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011F20 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011F24 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011F28 6500                       		bcs.s	@bonus		; if yes, branch
00011F2A 7406                       		moveq	#6,d2		; set cap for points
00011F2C                            
00011F2C                            	@bonus:
00011F2C 7000                       		moveq	#0,d0
00011F2E 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011F32 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011F38 6500                       		bcs.s	@givepoints	; if not, branch
00011F3A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011F3E 740A                       		moveq	#10,d2
00011F40                            
00011F40                            	@givepoints:
00011F40 4EB9 0000 0000             		jsr	(AddPoints).l
00011F46 E24A                       		lsr.w	#1,d2
00011F48 1342 001A                  		move.b	d2,obFrame(a1)
00011F4C                            
00011F4C                            Smab_Points:	; Routine 4
00011F4C 6100 D7E0                  		bsr.w	SpeedToPos
00011F50 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011F56 6100 D7EA                  		bsr.w	DisplaySprite
00011F5A 4A28 0001                  		tst.b	obRender(a0)
00011F5E 6A00 D822                  		bpl.w	DeleteObject
00011F62 4E75                       		rts	
00011F64                            ; ===========================================================================
00011F64 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011F68 FF00 FF00                  		dc.w -$100, -$100
00011F6C 0200 FE00                  		dc.w $200, -$200
00011F70 0100 FF00                  		dc.w $100, -$100
00011F74                            
00011F74 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F74 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F7C                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011F7C                            ; --------------------------------------------------------------------------------
00011F7C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011F7C                            ; --------------------------------------------------------------------------------
00011F7C                            
00011F7C                            SME_TrHmw:	
00011F7C 0000 0000                  		dc.w SME_TrHmw_6-SME_TrHmw, SME_TrHmw_1B-SME_TrHmw	
00011F80 0000                       		dc.w SME_TrHmw_30-SME_TrHmw	
00011F82 04                         SME_TrHmw_6:	dc.b 4	
00011F83 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011F88 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011F8D 0005 0000 E0               		dc.b 0, 5, 0, 0, $E0	
00011F92 F005 0000 E0               		dc.b $F0, 5, 0, 0, $E0	
00011F97 04                         SME_TrHmw_1B:	dc.b 4	
00011F98 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011F9D 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011FA2 0005 0000 E0               		dc.b 0, 5, 0, 0, $E0	
00011FA7 F005 0000 E0               		dc.b $F0, 5, 0, 0, $E0	
00011FAC 00                         SME_TrHmw_30:	dc.b 0	
00011FAE 00                         		even
00011FAE 00                         		even
00011FAE                            
00011FAE                            		include	"_incObj\52 Moving Blocks.asm"
00011FAE                            ; ---------------------------------------------------------------------------
00011FAE                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011FAE                            ; ---------------------------------------------------------------------------
00011FAE                            
00011FAE                            MovingBlock:
00011FAE 7000                       		moveq	#0,d0
00011FB0 1028 0024                  		move.b	obRoutine(a0),d0
00011FB4 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011FB8 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011FBC                            ; ===========================================================================
00011FBC 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011FBE 0000                       		dc.w MBlock_Platform-MBlock_Index
00011FC0 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011FC2                            
00011FC2 =00000030                  mblock_origX:	equ $30
00011FC2 =00000032                  mblock_origY:	equ $32
00011FC2                            
00011FC2 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011FC4 2001                       		dc.b $20, 1
00011FC6 2002                       		dc.b $20, 2
00011FC8 4003                       		dc.b $40, 3
00011FCA 3004                       		dc.b $30, 4
00011FCC                            ; ===========================================================================
00011FCC                            
00011FCC                            MBlock_Main:	; Routine 0
00011FCC 5428 0024                  		addq.b	#2,obRoutine(a0)
00011FD0 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011FD8 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011FDE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011FE4 6600                       		bne.s	loc_FE44
00011FE6 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011FEE 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011FF4 117C 0007 0016             		move.b	#7,obHeight(a0)
00011FFA                            
00011FFA                            loc_FE44:
00011FFA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012000 6600                       		bne.s	loc_FE60
00012002 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00012008 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
0001200E 6700                       		beq.s	loc_FE60	; if yes, branch
00012010 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00012016                            
00012016                            loc_FE60:
00012016 117C 0004 0001             		move.b	#4,obRender(a0)
0001201C 7000                       		moveq	#0,d0
0001201E 1028 0028                  		move.b	obSubtype(a0),d0
00012022 E648                       		lsr.w	#3,d0
00012024 0240 001E                  		andi.w	#$1E,d0
00012028 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
0001202C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012030 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012034 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001203A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012040 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012046 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001204C                            
0001204C                            MBlock_Platform: ; Routine 2
0001204C 6100 0000                  		bsr.w	MBlock_Move
00012050 7200                       		moveq	#0,d1
00012052 1228 0014                  		move.b	obActWid(a0),d1
00012056 4EB9 0000 8E52             		jsr	(PlatformObject).l
0001205C 6000                       		bra.s	MBlock_ChkDel
0001205E                            ; ===========================================================================
0001205E                            
0001205E                            MBlock_StandOn:	; Routine 4
0001205E 7200                       		moveq	#0,d1
00012060 1228 0014                  		move.b	obActWid(a0),d1
00012064 4EB9 0000 8FC6             		jsr	(ExitPlatform).l
0001206A 3F28 0008                  		move.w	obX(a0),-(sp)
0001206E 6100 0000                  		bsr.w	MBlock_Move
00012072 341F                       		move.w	(sp)+,d2
00012074 4EB9 0000 9530             		jsr	(MvSonicOnPtfm2).l
0001207A                            
0001207A                            MBlock_ChkDel:
00012098 6000 D6A8                  		bra.w	DisplaySprite
0001209C                            ; ===========================================================================
0001209C                            
0001209C                            MBlock_Move:
0001209C 7000                       		moveq	#0,d0
0001209E 1028 0028                  		move.b	obSubtype(a0),d0
000120A2 0240 000F                  		andi.w	#$F,d0
000120A6 D040                       		add.w	d0,d0
000120A8 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000120AC 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000120B0                            ; ===========================================================================
000120B0 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000120B4 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000120B8 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000120BC 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000120C0 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000120C4 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000120C6                            ; ===========================================================================
000120C6                            
000120C6                            MBlock_Type00:
000120C6 4E75                       		rts	
000120C8                            ; ===========================================================================
000120C8                            
000120C8                            MBlock_Type01:
000120C8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000120CC 323C 0060                  		move.w	#$60,d1
000120D0 0828 0000 0022             		btst	#0,obStatus(a0)
000120D6 6700                       		beq.s	loc_FF26
000120D8 4440                       		neg.w	d0
000120DA D041                       		add.w	d1,d0
000120DC                            
000120DC                            loc_FF26:
000120DC 3228 0030                  		move.w	mblock_origX(a0),d1
000120E0 9240                       		sub.w	d0,d1
000120E2 3141 0008                  		move.w	d1,obX(a0)
000120E6 4E75                       		rts	
000120E8                            ; ===========================================================================
000120E8                            
000120E8                            MBlock_Type02:
000120E8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000120EE 6600                       		bne.s	MBlock_02_Wait
000120F0 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000120F4                            
000120F4                            MBlock_02_Wait:
000120F4 4E75                       		rts	
000120F6                            ; ===========================================================================
000120F6                            
000120F6                            MBlock_Type03:
000120F6 7600                       		moveq	#0,d3
000120F8 1628 0014                  		move.b	obActWid(a0),d3
000120FC 6100 0000                  		bsr.w	ObjHitWallRight
00012100 4A41                       		tst.w	d1		; has the platform hit a wall?
00012102 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00012104 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012108 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001210E 4E75                       		rts	
00012110                            ; ===========================================================================
00012110                            
00012110                            MBlock_03_End:
00012110 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00012114 4E75                       		rts	
00012116                            ; ===========================================================================
00012116                            
00012116                            MBlock_Type05:
00012116 7600                       		moveq	#0,d3
00012118 1628 0014                  		move.b	obActWid(a0),d3
0001211C 6100 0000                  		bsr.w	ObjHitWallRight
00012120 4A41                       		tst.w	d1		; has the platform hit a wall?
00012122 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012124 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012128 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001212E 4E75                       		rts	
00012130                            ; ===========================================================================
00012130                            
00012130                            MBlock_05_End:
00012130 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012134 4E75                       		rts	
00012136                            ; ===========================================================================
00012136                            
00012136                            MBlock_Type06:
00012136 6100 D5F6                  		bsr.w	SpeedToPos
0001213A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012140 6100 0000                  		bsr.w	ObjFloorDist
00012144 4A41                       		tst.w	d1		; has platform hit the floor?
00012146 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001214A D368 000C                  		add.w	d1,obY(a0)
0001214E 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012152 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012156                            
00012156                            locret_FFA0:
00012156 4E75                       		rts	
00012158                            ; ===========================================================================
00012158                            
00012158                            MBlock_Type07:
00012158 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001215C 6700                       		beq.s	MBlock_07_ChkDel
0001215E 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012162                            
00012162                            MBlock_07_ChkDel:
00012162 588F                       		addq.l	#4,sp
00012182 4E75                       		rts	
00012184                            ; ===========================================================================
00012184                            
00012184                            MBlock_Type08:
00012184 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012188 323C 0080                  		move.w	#$80,d1
0001218C 0828 0000 0022             		btst	#0,obStatus(a0)
00012192 6700                       		beq.s	loc_FFE2
00012194 4440                       		neg.w	d0
00012196 D041                       		add.w	d1,d0
00012198                            
00012198                            loc_FFE2:
00012198 3228 0032                  		move.w	mblock_origY(a0),d1
0001219C 9240                       		sub.w	d0,d1
0001219E 3141 000C                  		move.w	d1,obY(a0)
000121A2 4E75                       		rts	
000121A4                            ; ===========================================================================
000121A4                            
000121A4                            MBlock_Type0A:
000121A4 7600                       		moveq	#0,d3
000121A6 1628 0014                  		move.b	obActWid(a0),d3
000121AA D643                       		add.w	d3,d3
000121AC 7208                       		moveq	#8,d1
000121AE 0828 0000 0022             		btst	#0,obStatus(a0)
000121B4 6700                       		beq.s	loc_10004
000121B6 4441                       		neg.w	d1
000121B8 4443                       		neg.w	d3
000121BA                            
000121BA                            loc_10004:
000121BA 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000121BE 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000121C0 3028 0008                  		move.w	obX(a0),d0
000121C4 9068 0030                  		sub.w	mblock_origX(a0),d0
000121C8 B043                       		cmp.w	d3,d0
000121CA 6700                       		beq.s	MBlock_0A_Wait
000121CC D368 0008                  		add.w	d1,obX(a0)	; move platform
000121D0 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000121D6 4E75                       		rts	
000121D8                            ; ===========================================================================
000121D8                            
000121D8                            MBlock_0A_Wait:
000121D8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000121DC 6600                       		bne.s	locret_1002E	; if time remains, branch
000121DE 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000121E4                            
000121E4                            locret_1002E:
000121E4 4E75                       		rts	
000121E6                            ; ===========================================================================
000121E6                            
000121E6                            MBlock_0A_Back:
000121E6 3028 0008                  		move.w	obX(a0),d0
000121EA 9068 0030                  		sub.w	mblock_origX(a0),d0
000121EE 6700                       		beq.s	MBlock_0A_Reset
000121F0 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000121F4 4E75                       		rts	
000121F6                            ; ===========================================================================
000121F6                            
000121F6                            MBlock_0A_Reset:
000121F6 4268 0036                  		clr.w	$36(a0)
000121FA 5328 0028                  		subq.b	#1,obSubtype(a0)
000121FE 4E75                       		rts	
000121FE 4E75                       		rts	
00012200                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012200                            ; ---------------------------------------------------------------------------
00012200                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012200                            ; ---------------------------------------------------------------------------
00012200                            Map_MBlock_internal:
00012200 0000                       		dc.w @mz1-Map_MBlock_internal
00012202 0000                       		dc.w @mz2-Map_MBlock_internal
00012204 0000                       		dc.w @sbz-Map_MBlock_internal
00012206 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012208 0000                       		dc.w @mz3-Map_MBlock_internal
0001220A 01                         @mz1:		dc.b 1
0001220B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012210 02                         @mz2:		dc.b 2
00012211 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012216 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001221B 04                         @sbz:		dc.b 4
0001221C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012221 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012226 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001222B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012230 04                         @sbzwide:	dc.b 4
00012231 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012236 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001223B F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012240 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012245 03                         @mz3:		dc.b 3
00012246 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001224B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012250 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012256 00                         		even
00012256 00                         		even
00012256                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012256                            ; ---------------------------------------------------------------------------
00012256                            ; Sprite mappings - moving block (LZ)
00012256                            ; ---------------------------------------------------------------------------
00012256                            Map_MBlockLZ_internal:
00012256 0000                       		dc.w @0-Map_MBlockLZ_internal
00012258 01                         @0:		dc.b 1
00012259 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001225E                            		even
0001225E                            		even
0001225E                            
0001225E                            		include	"_incObj\55 Basaran.asm"
0001225E                            ; ---------------------------------------------------------------------------
0001225E                            ; Object 55 - Basaran enemy (MZ)
0001225E                            ; ---------------------------------------------------------------------------
0001225E                            
0001225E                            Basaran:
0001225E 7000                       		moveq	#0,d0
00012260 1028 0024                  		move.b	obRoutine(a0),d0
00012264 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012268 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001226C                            ; ===========================================================================
0001226C 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
0001226E 0000                       		dc.w Bas_Action-Bas_Index
00012270                            ; ===========================================================================
00012270                            
00012270                            Bas_Main:	; Routine 0
00012270 5428 0024                  		addq.b	#2,obRoutine(a0)
00012274 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001227C 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012282 117C 0004 0001             		move.b	#4,obRender(a0)
00012288 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001228E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012294 117C 000B 0020             		move.b	#$B,obColType(a0)
0001229A 117C 0010 0014             		move.b	#$10,obActWid(a0)
000122A0                            
000122A0                            Bas_Action:	; Routine 2
000122A0 7000                       		moveq	#0,d0
000122A2 1028 0025                  		move.b	ob2ndRout(a0),d0
000122A6 323B 0000                  		move.w	@index(pc,d0.w),d1
000122AA 4EBB 1000                  		jsr	@index(pc,d1.w)
000122AE 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000122B4 6100 A54E                  		bsr.w	AnimateSprite
000122B8 6000 F412                  		bra.w	RememberState
000122BC                            ; ===========================================================================
000122BC 0000                       @index:		dc.w @dropcheck-@index
000122BE 0000                       		dc.w @dropfly-@index
000122C0 0000                       		dc.w @flapsound-@index
000122C2 0000                       		dc.w @flyup-@index
000122C4                            ; ===========================================================================
000122C4                            
000122C4                            @dropcheck:
000122C4 343C 0080                  		move.w	#$80,d2
000122C8 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000122CC 6400                       		bcc.s	@nodrop		; if not, branch
000122CE 3038 D00C                  		move.w	(v_player+obY).w,d0
000122D2 3140 0036                  		move.w	d0,$36(a0)
000122D6 9068 000C                  		sub.w	obY(a0),d0
000122DA 6500                       		bcs.s	@nodrop
000122DC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000122E0 6400                       		bcc.s	@nodrop		; if not, branch
000122E2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000122E6 6600                       		bne.s	@nodrop		; if yes, branch
000122E8                            
000122E8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000122EC D007                       		add.b	d7,d0
000122EE 0200 0007                  		andi.b	#7,d0
000122F2 6600                       		bne.s	@nodrop
000122F4 117C 0001 001C             		move.b	#1,obAnim(a0)
000122FA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000122FE                            
000122FE                            	@nodrop:
000122FE 4E75                       		rts	
00012300                            ; ===========================================================================
00012300                            
00012300                            @dropfly:
00012300 6100 D42C                  		bsr.w	SpeedToPos
00012304 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
0001230A 343C 0080                  		move.w	#$80,d2
0001230E 6100 0000                  		bsr.w	@chkdistance
00012312 3028 0036                  		move.w	$36(a0),d0
00012316 9068 000C                  		sub.w	obY(a0),d0
0001231A 6500                       		bcs.s	@chkdel
0001231C 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012320 6400                       		bcc.s	@dropmore	; if not, branch
00012322 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012326 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001232C 117C 0002 001C             		move.b	#2,obAnim(a0)
00012332 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012336                            
00012336                            	@dropmore:
00012336 4E75                       		rts	
00012338                            
00012338                            	@chkdel:
00012338 4A28 0001                  		tst.b	obRender(a0)
0001233C 6A00 D444                  		bpl.w	DeleteObject
00012340 4E75                       		rts	
00012342                            ; ===========================================================================
00012342                            
00012342                            @flapsound:
00012342 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012346 0200 000F                  		andi.b	#$F,d0
0001234A 6600                       		bne.s	@nosound
00012356                            
00012356                            	@nosound:
00012356 6100 D3D6                  		bsr.w	SpeedToPos
0001235A 3038 D008                  		move.w	(v_player+obX).w,d0
0001235E 9068 0008                  		sub.w	obX(a0),d0
00012362 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012364 4440                       		neg.w	d0
00012366                            
00012366                            	@isright:
00012366 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001236A 6500                       		bcs.s	@dontflyup	; if yes, branch
0001236C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012370 D007                       		add.b	d7,d0
00012372 0200 0007                  		andi.b	#7,d0
00012376 6600                       		bne.s	@dontflyup
00012378 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001237C                            
0001237C                            @dontflyup:
0001237C 4E75                       		rts	
0001237E                            ; ===========================================================================
0001237E                            
0001237E                            @flyup:
0001237E 6100 D3AE                  		bsr.w	SpeedToPos
00012382 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012388 6100 0000                  		bsr.w	ObjHitCeiling
0001238C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001238E 6A00                       		bpl.s	@noceiling	; if not, branch
00012390 9368 000C                  		sub.w	d1,obY(a0)
00012394 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001239A 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
0001239E 4268 0012                  		clr.w	obVelY(a0)
000123A2 4228 001C                  		clr.b	obAnim(a0)
000123A6 4228 0025                  		clr.b	ob2ndRout(a0)
000123AA                            
000123AA                            	@noceiling:
000123AA 4E75                       		rts	
000123AC                            ; ===========================================================================
000123AC                            
000123AC                            ; Subroutine to check Sonic's distance from the basaran
000123AC                            
000123AC                            ; input:
000123AC                            ;	d2 = distance to compare
000123AC                            
000123AC                            ; output:
000123AC                            ;	d0 = distance between Sonic and basaran
000123AC                            ;	d1 = speed/direction for basaran to fly
000123AC                            
000123AC                            @chkdistance:
000123AC 323C 0100                  		move.w	#$100,d1
000123B0 08E8 0000 0022             		bset	#0,obStatus(a0)
000123B6 3038 D008                  		move.w	(v_player+obX).w,d0
000123BA 9068 0008                  		sub.w	obX(a0),d0
000123BE 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000123C0 4440                       		neg.w	d0
000123C2 4441                       		neg.w	d1
000123C4 08A8 0000 0022             		bclr	#0,obStatus(a0)
000123CA                            
000123CA                            	@right:
000123CA B042                       		cmp.w	d2,d0
000123CC 4E75                       		rts	
000123CE                            ; ===========================================================================
000123CE                            ; unused crap
000123CE 6100 D35E                  		bsr.w	SpeedToPos
000123D2 6100 D36E                  		bsr.w	DisplaySprite
000123D6 4A28 0001                  		tst.b	obRender(a0)
000123DA 6A00 D3A6                  		bpl.w	DeleteObject
000123DE 4E75                       		rts	
000123DE 4E75                       		rts	
000123E0                            		include	"_anim\Basaran.asm"
000123E0                            ; ---------------------------------------------------------------------------
000123E0                            ; Animation script - Basaran enemy
000123E0                            ; ---------------------------------------------------------------------------
000123E0 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000123E2 0000                       		dc.w @fall-Ani_Bas
000123E4 0000                       		dc.w @fly-Ani_Bas
000123E6 0F00 FF                    @still:		dc.b $F, 0, afEnd
000123EA 00                         		even
000123EA 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000123EE 00                         		even
000123EE 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000123F4                            		even
000123F4                            		even
000123F4                            Map_Bas:	include	"_maps\Basaran.asm"
000123F4                            ; --------------------------------------------------------------------------------
000123F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000123F4                            ; --------------------------------------------------------------------------------
000123F4                            
000123F4                            SME_RhYYA:	
000123F4 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000123F8 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000123FC 01                         SME_RhYYA_8:	dc.b 1	
000123FD F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012402 03                         SME_RhYYA_E:	dc.b 3	
00012403 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012408 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
0001240D 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012412 04                         SME_RhYYA_1E:	dc.b 4	
00012413 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012418 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
0001241D 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012422 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012427 04                         SME_RhYYA_33:	dc.b 4	
00012428 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001242D 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012432 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012437 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001243C                            		even
0001243C                            		even
0001243C                            
0001243C                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001243C                            ; ---------------------------------------------------------------------------
0001243C                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001243C                            ; ---------------------------------------------------------------------------
0001243C                            
0001243C                            FloatingBlock:
0001243C 7000                       		moveq	#0,d0
0001243E 1028 0024                  		move.b	obRoutine(a0),d0
00012442 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012446 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001244A                            ; ===========================================================================
0001244A 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001244C 0000                       		dc.w FBlock_Action-FBlock_Index
0001244E                            
0001244E =00000034                  fb_origX:	equ $34		; original x-axis position
0001244E =00000030                  fb_origY:	equ $30		; original y-axis position
0001244E =0000003A                  fb_height:	equ $3A		; total object height
0001244E =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
0001244E                            
0001244E                            FBlock_Var:	; width/2, height/2
0001244E 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012450 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012452 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012454 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012456 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012458 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001245A 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001245C 4010                       		dc.b  $40, $10	; subtype 7x/Fx
0001245E                            ; ===========================================================================
0001245E                            
0001245E                            FBlock_Main:	; Routine 0
0001245E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012462 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001246A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012470 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012476 6600                       		bne.s	@notLZ
00012478 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
0001247E                            
0001247E                            	@notLZ:
0001247E 117C 0004 0001             		move.b	#4,obRender(a0)
00012484 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001248A 7000                       		moveq	#0,d0
0001248C 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012490 E648                       		lsr.w	#3,d0
00012492 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012496 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001249A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0001249E 1152 0016                  		move.b	(a2),obHeight(a0)
000124A2 E248                       		lsr.w	#1,d0
000124A4 1140 001A                  		move.b	d0,obFrame(a0)
000124A8 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000124AE 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000124B4 7000                       		moveq	#0,d0
000124B6 1012                       		move.b	(a2),d0
000124B8 D040                       		add.w	d0,d0
000124BA 3140 003A                  		move.w	d0,fb_height(a0)
000124BE 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000124C4 6600                       			bne.s	@dontdelete
000124C6 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000124CC 6600                       			bne.s	@notatpos
000124CE 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000124D2 6700                       			beq.s	@dontdelete
000124D4 4EF9 0000 F782             			jmp	(DeleteObject).l
000124DA                            	@notatpos:
000124DA 4228 0028                  			clr.b	obSubtype(a0)
000124DE 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000124E2 6600                       			bne.s	@dontdelete
000124E4 4EF9 0000 F782             			jmp	(DeleteObject).l
000124EA                            	@dontdelete:
000124EA 7000                       		moveq	#0,d0
000124EC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000124F2 6700                       		beq.s	@stillnotLZ
000124F4 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000124F8 0240 000F                  		andi.w	#$F,d0
000124FC 5140                       		subq.w	#8,d0
000124FE 6500                       		bcs.s	@stillnotLZ
00012500 E548                       		lsl.w	#2,d0
00012502 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012506 45F2 0000                  		lea	(a2,d0.w),a2
0001250A 4A52                       		tst.w	(a2)
0001250C 6A00                       		bpl.s	@stillnotLZ
0001250E 0868 0000 0022             		bchg	#0,obStatus(a0)
00012514                            
00012514                            	@stillnotLZ:
00012514 1028 0028                  		move.b	obSubtype(a0),d0
00012518 6A00                       		bpl.s	FBlock_Action
0001251A 0200 000F                  		andi.b	#$F,d0
0001251E 1140 003C                  		move.b	d0,fb_type(a0)
00012522 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012528 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
0001252E 6600                       		bne.s	@chkstate
00012530 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012536 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001253C                            
0001253C                            @chkstate:
0001253C 45F8 FC00                  		lea	(v_objstate).w,a2
00012540 7000                       		moveq	#0,d0
00012542 1028 0023                  		move.b	obRespawnNo(a0),d0
00012546 6700                       		beq.s	FBlock_Action
00012548 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001254E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012554 6700                       		beq.s	FBlock_Action
00012556 5228 0028                  		addq.b	#1,obSubtype(a0)
0001255A 4268 003A                  		clr.w	fb_height(a0)
0001255E                            
0001255E                            FBlock_Action:	; Routine 2
0001255E 3F28 0008                  		move.w	obX(a0),-(sp)
00012562 7000                       		moveq	#0,d0
00012564 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012568 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001256C D040                       		add.w	d0,d0
0001256E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012572 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012576 381F                       		move.w	(sp)+,d4
00012578 4A28 0001                  		tst.b	obRender(a0)
0001257C 6A00                       		bpl.s	@chkdel
0001257E 7200                       		moveq	#0,d1
00012580 1228 0014                  		move.b	obActWid(a0),d1
00012584 0641 000B                  		addi.w	#$B,d1
00012588 7400                       		moveq	#0,d2
0001258A 1428 0016                  		move.b	obHeight(a0),d2
0001258E 3602                       		move.w	d2,d3
00012590 5243                       		addq.w	#1,d3
00012592 6100 F5D0                  		bsr.w	SolidObject
00012596                            
00012596                            	@chkdel:
000125B2                            		@display:
000125B2 6000 D18E                  			bra.w	DisplaySprite
000125B6                            		@chkdel2:
000125B6 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000125BC 6600                       			bne.s	@delete
000125BE 4A28 0038                  			tst.b	$38(a0)
000125C2 66EE                       			bne.s	@display
000125C4                            		@delete:
000125C4 4EF9 0000 F782             			jmp	(DeleteObject).l
000125CA                            ; ===========================================================================
000125CA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000125CE 0000 0000                  		dc.w @type02-@index, @type03-@index
000125D2 0000 0000                  		dc.w @type04-@index, @type05-@index
000125D6 0000 0000                  		dc.w @type06-@index, @type07-@index
000125DA 0000 0000                  		dc.w @type08-@index, @type09-@index
000125DE 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000125E2 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000125E6                            ; ===========================================================================
000125E6                            
000125E6                            @type00:
000125E6                            ; doesn't move
000125E6 4E75                       		rts	
000125E8                            ; ===========================================================================
000125E8                            
000125E8                            @type01:
000125E8                            ; moves side-to-side
000125E8 323C 0040                  		move.w	#$40,d1		; set move distance
000125EC 7000                       		moveq	#0,d0
000125EE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000125F2 6000                       		bra.s	@moveLR
000125F4                            ; ===========================================================================
000125F4                            
000125F4                            @type02:
000125F4                            ; moves side-to-side
000125F4 323C 0080                  		move.w	#$80,d1		; set move distance
000125F8 7000                       		moveq	#0,d0
000125FA 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000125FE                            
000125FE                            	@moveLR:
000125FE 0828 0000 0022             		btst	#0,obStatus(a0)
00012604 6700                       		beq.s	@noflip
00012606 4440                       		neg.w	d0
00012608 D041                       		add.w	d1,d0
0001260A                            
0001260A                            	@noflip:
0001260A 3228 0034                  		move.w	fb_origX(a0),d1
0001260E 9240                       		sub.w	d0,d1
00012610 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012614 4E75                       		rts	
00012616                            ; ===========================================================================
00012616                            
00012616                            @type03:
00012616                            ; moves up/down
00012616 323C 0040                  		move.w	#$40,d1		; set move distance
0001261A 7000                       		moveq	#0,d0
0001261C 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012620 6000                       		bra.s	@moveUD
00012622                            ; ===========================================================================
00012622                            
00012622                            @type04:
00012622                            ; moves up/down
00012622 323C 0080                  		move.w	#$80,d1		; set move distance
00012626 7000                       		moveq	#0,d0
00012628 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001262C                            
0001262C                            	@moveUD:
0001262C 0828 0000 0022             		btst	#0,obStatus(a0)
00012632 6700                       		beq.s	@noflip04
00012634 4440                       		neg.w	d0
00012636 D041                       		add.w	d1,d0
00012638                            
00012638                            	@noflip04:
00012638 3228 0030                  		move.w	fb_origY(a0),d1
0001263C 9240                       		sub.w	d0,d1
0001263E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012642 4E75                       		rts	
00012644                            ; ===========================================================================
00012644                            
00012644                            @type05:
00012644                            ; moves up when a switch is pressed
00012644 4A28 0038                  		tst.b	$38(a0)
00012648 6600                       		bne.s	@loc_104A4
0001264A 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012650 6600                       		bne.s	@aaa		; if not, branch
00012652 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012658 6600                       		bne.s	@aaa
0001265A 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001265E 3038 D008                  		move.w	(v_player+obX).w,d0
00012662 B068 0008                  		cmp.w	obX(a0),d0
00012666 6400                       		bcc.s	@aaa
00012668 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
0001266E                            
0001266E                            	@aaa:
0001266E 45F8 F7E0                  		lea	(f_switch).w,a2
00012672 7000                       		moveq	#0,d0
00012674 1028 003C                  		move.b	fb_type(a0),d0
00012678 0832 0000 0000             		btst	#0,(a2,d0.w)
0001267E 6700                       		beq.s	@loc_104AE
00012680 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012686 6600                       		bne.s	@loc_1049E	; if not, branch
00012688 0C00 0003                  		cmpi.b	#3,d0
0001268C 6600                       		bne.s	@loc_1049E
0001268E 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012692                            
00012692                            @loc_1049E:
00012692 117C 0001 0038             		move.b	#1,$38(a0)
00012698                            
00012698                            @loc_104A4:
00012698 4A68 003A                  		tst.w	fb_height(a0)
0001269C 6700                       		beq.s	@loc_104C8
0001269E 5568 003A                  		subq.w	#2,fb_height(a0)
000126A2                            
000126A2                            @loc_104AE:
000126A2 3028 003A                  		move.w	fb_height(a0),d0
000126A6 0828 0000 0022             		btst	#0,$22(a0)
000126AC 6700                       		beq.s	@loc_104BC
000126AE 4440                       		neg.w	d0
000126B0                            
000126B0                            @loc_104BC:
000126B0 3228 0030                  		move.w	fb_origY(a0),d1
000126B4 D240                       		add.w	d0,d1
000126B6 3141 000C                  		move.w	d1,obY(a0)
000126BA 4E75                       		rts	
000126BC                            ; ===========================================================================
000126BC                            
000126BC                            @loc_104C8:
000126BC 5228 0028                  		addq.b	#1,$28(a0)
000126C0 4228 0038                  		clr.b	$38(a0)
000126C4 45F8 FC00                  		lea	(v_objstate).w,a2
000126C8 7000                       		moveq	#0,d0
000126CA 1028 0023                  		move.b	obRespawnNo(a0),d0
000126CE 67D2                       		beq.s	@loc_104AE
000126D0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000126D6 60CA                       		bra.s	@loc_104AE
000126D8                            ; ===========================================================================
000126D8                            
000126D8                            @type06:
000126D8 4A28 0038                  		tst.b	$38(a0)
000126DC 6600                       		bne.s	@loc_10500
000126DE 45F8 F7E0                  		lea	(f_switch).w,a2
000126E2 7000                       		moveq	#0,d0
000126E4 1028 003C                  		move.b	fb_type(a0),d0
000126E8 4A32 0000                  		tst.b	(a2,d0.w)
000126EC 6A00                       		bpl.s	@loc_10512
000126EE 117C 0001 0038             		move.b	#1,$38(a0)
000126F4                            
000126F4                            @loc_10500:
000126F4 7000                       		moveq	#0,d0
000126F6 1028 0016                  		move.b	obHeight(a0),d0
000126FA D040                       		add.w	d0,d0
000126FC B068 003A                  		cmp.w	fb_height(a0),d0
00012700 6700                       		beq.s	@loc_1052C
00012702 5468 003A                  		addq.w	#2,fb_height(a0)
00012706                            
00012706                            @loc_10512:
00012706 3028 003A                  		move.w	fb_height(a0),d0
0001270A 0828 0000 0022             		btst	#0,obStatus(a0)
00012710 6700                       		beq.s	@loc_10520
00012712 4440                       		neg.w	d0
00012714                            
00012714                            @loc_10520:
00012714 3228 0030                  		move.w	fb_origY(a0),d1
00012718 D240                       		add.w	d0,d1
0001271A 3141 000C                  		move.w	d1,obY(a0)
0001271E 4E75                       		rts	
00012720                            ; ===========================================================================
00012720                            
00012720                            @loc_1052C:
00012720 5328 0028                  		subq.b	#1,obSubtype(a0)
00012724 4228 0038                  		clr.b	$38(a0)
00012728 45F8 FC00                  		lea	(v_objstate).w,a2
0001272C 7000                       		moveq	#0,d0
0001272E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012732 67D2                       		beq.s	@loc_10512
00012734 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001273A 60CA                       		bra.s	@loc_10512
0001273C                            ; ===========================================================================
0001273C                            
0001273C                            @type07:
0001273C 4A28 0038                  		tst.b	$38(a0)
00012740 6600                       		bne.s	@loc_1055E
00012742 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012746 6700                       		beq.s	@locret_10578
00012748 117C 0001 0038             		move.b	#1,$38(a0)
0001274E 4268 003A                  		clr.w	fb_height(a0)
00012752                            
00012752                            @loc_1055E:
00012752 5268 0008                  		addq.w	#1,obX(a0)
00012756 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001275C 5268 003A                  		addq.w	#1,fb_height(a0)
00012760 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012766 6600                       		bne.s	@locret_10578
00012768 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
0001276E 4228 0038                  			clr.b	$38(a0)
00012772 4228 0028                  		clr.b	obSubtype(a0)
00012776                            
00012776                            @locret_10578:
00012776 4E75                       		rts	
00012778                            ; ===========================================================================
00012778                            
00012778                            @type0C:
00012778 4A28 0038                  		tst.b	$38(a0)
0001277C 6600                       		bne.s	@loc_10598
0001277E 45F8 F7E0                  		lea	(f_switch).w,a2
00012782 7000                       		moveq	#0,d0
00012784 1028 003C                  		move.b	fb_type(a0),d0
00012788 0832 0000 0000             		btst	#0,(a2,d0.w)
0001278E 6700                       		beq.s	@loc_105A2
00012790 117C 0001 0038             		move.b	#1,$38(a0)
00012796                            
00012796                            @loc_10598:
00012796 4A68 003A                  		tst.w	fb_height(a0)
0001279A 6700                       		beq.s	@loc_105C0
0001279C 5568 003A                  		subq.w	#2,fb_height(a0)
000127A0                            
000127A0                            @loc_105A2:
000127A0 3028 003A                  		move.w	fb_height(a0),d0
000127A4 0828 0000 0022             		btst	#0,obStatus(a0)
000127AA 6700                       		beq.s	@loc_105B4
000127AC 4440                       		neg.w	d0
000127AE 0640 0080                  		addi.w	#$80,d0
000127B2                            
000127B2                            @loc_105B4:
000127B2 3228 0034                  		move.w	fb_origX(a0),d1
000127B6 D240                       		add.w	d0,d1
000127B8 3141 0008                  		move.w	d1,obX(a0)
000127BC 4E75                       		rts	
000127BE                            ; ===========================================================================
000127BE                            
000127BE                            @loc_105C0:
000127BE 5228 0028                  		addq.b	#1,obSubtype(a0)
000127C2 4228 0038                  		clr.b	$38(a0)
000127C6 45F8 FC00                  		lea	(v_objstate).w,a2
000127CA 7000                       		moveq	#0,d0
000127CC 1028 0023                  		move.b	obRespawnNo(a0),d0
000127D0 67CE                       		beq.s	@loc_105A2
000127D2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000127D8 60C6                       		bra.s	@loc_105A2
000127DA                            ; ===========================================================================
000127DA                            
000127DA                            @type0D:
000127DA 4A28 0038                  		tst.b	$38(a0)
000127DE 6600                       		bne.s	@loc_105F8
000127E0 45F8 F7E0                  		lea	(f_switch).w,a2
000127E4 7000                       		moveq	#0,d0
000127E6 1028 003C                  		move.b	fb_type(a0),d0
000127EA 4A32 0000                  		tst.b	(a2,d0.w)
000127EE 6A00                       		bpl.s	@wtf
000127F0 117C 0001 0038             		move.b	#1,$38(a0)
000127F6                            
000127F6                            @loc_105F8:
000127F6 303C 0080                  		move.w	#$80,d0
000127FA B068 003A                  		cmp.w	fb_height(a0),d0
000127FE 6700                       		beq.s	@loc_10624
00012800 5468 003A                  		addq.w	#2,fb_height(a0)
00012804                            
00012804                            @wtf:
00012804 3028 003A                  		move.w	fb_height(a0),d0
00012808 0828 0000 0022             		btst	#0,obStatus(a0)
0001280E 6700                       		beq.s	@loc_10618
00012810 4440                       		neg.w	d0
00012812 0640 0080                  		addi.w	#$80,d0
00012816                            
00012816                            @loc_10618:
00012816 3228 0034                  		move.w	fb_origX(a0),d1
0001281A D240                       		add.w	d0,d1
0001281C 3141 0008                  		move.w	d1,obX(a0)
00012820 4E75                       		rts	
00012822                            ; ===========================================================================
00012822                            
00012822                            @loc_10624:
00012822 5328 0028                  		subq.b	#1,obSubtype(a0)
00012826 4228 0038                  		clr.b	$38(a0)
0001282A 45F8 FC00                  		lea	(v_objstate).w,a2
0001282E 7000                       		moveq	#0,d0
00012830 1028 0023                  		move.b	obRespawnNo(a0),d0
00012834 67CE                       		beq.s	@wtf
00012836 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001283C 60C6                       		bra.s	@wtf
0001283E                            ; ===========================================================================
0001283E                            
0001283E                            @type08:
0001283E 323C 0010                  		move.w	#$10,d1
00012842 7000                       		moveq	#0,d0
00012844 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012848 E248                       		lsr.w	#1,d0
0001284A 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
0001284E 6000                       		bra.s	@square
00012850                            ; ===========================================================================
00012850                            
00012850                            @type09:
00012850 323C 0030                  		move.w	#$30,d1
00012854 7000                       		moveq	#0,d0
00012856 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
0001285A 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
0001285E 6000                       		bra.s	@square
00012860                            ; ===========================================================================
00012860                            
00012860                            @type0A:
00012860 323C 0050                  		move.w	#$50,d1
00012864 7000                       		moveq	#0,d0
00012866 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
0001286A 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
0001286E 6000                       		bra.s	@square
00012870                            ; ===========================================================================
00012870                            
00012870                            @type0B:
00012870 323C 0070                  		move.w	#$70,d1
00012874 7000                       		moveq	#0,d0
00012876 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
0001287A 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
0001287E                            
0001287E                            @square:
0001287E 4A43                       		tst.w	d3
00012880 6600                       		bne.s	@loc_1068E
00012882 5228 0022                  		addq.b	#1,obStatus(a0)
00012886 0228 0003 0022             		andi.b	#3,obStatus(a0)
0001288C                            
0001288C                            @loc_1068E:
0001288C 1428 0022                  		move.b	obStatus(a0),d2
00012890 0202 0003                  		andi.b	#3,d2
00012894 6600                       		bne.s	@loc_106AE
00012896 9041                       		sub.w	d1,d0
00012898 D068 0034                  		add.w	fb_origX(a0),d0
0001289C 3140 0008                  		move.w	d0,obX(a0)
000128A0 4441                       		neg.w	d1
000128A2 D268 0030                  		add.w	fb_origY(a0),d1
000128A6 3141 000C                  		move.w	d1,obY(a0)
000128AA 4E75                       		rts	
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            @loc_106AE:
000128AC 5302                       		subq.b	#1,d2
000128AE 6600                       		bne.s	@loc_106CC
000128B0 5341                       		subq.w	#1,d1
000128B2 9041                       		sub.w	d1,d0
000128B4 4440                       		neg.w	d0
000128B6 D068 0030                  		add.w	fb_origY(a0),d0
000128BA 3140 000C                  		move.w	d0,obY(a0)
000128BE 5241                       		addq.w	#1,d1
000128C0 D268 0034                  		add.w	fb_origX(a0),d1
000128C4 3141 0008                  		move.w	d1,obX(a0)
000128C8 4E75                       		rts	
000128CA                            ; ===========================================================================
000128CA                            
000128CA                            @loc_106CC:
000128CA 5302                       		subq.b	#1,d2
000128CC 6600                       		bne.s	@loc_106EA
000128CE 5341                       		subq.w	#1,d1
000128D0 9041                       		sub.w	d1,d0
000128D2 4440                       		neg.w	d0
000128D4 D068 0034                  		add.w	fb_origX(a0),d0
000128D8 3140 0008                  		move.w	d0,obX(a0)
000128DC 5241                       		addq.w	#1,d1
000128DE D268 0030                  		add.w	fb_origY(a0),d1
000128E2 3141 000C                  		move.w	d1,obY(a0)
000128E6 4E75                       		rts	
000128E8                            ; ===========================================================================
000128E8                            
000128E8                            @loc_106EA:
000128E8 9041                       		sub.w	d1,d0
000128EA D068 0030                  		add.w	fb_origY(a0),d0
000128EE 3140 000C                  		move.w	d0,obY(a0)
000128F2 4441                       		neg.w	d1
000128F4 D268 0034                  		add.w	fb_origX(a0),d1
000128F8 3141 0008                  		move.w	d1,obX(a0)
000128FC 4E75                       		rts	
000128FC 4E75                       		rts	
000128FE                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
000128FE                            ; ---------------------------------------------------------------------------
000128FE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000128FE                            ; ---------------------------------------------------------------------------
000128FE                            Map_FBlock_internal:
000128FE 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012900 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012902 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012904 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012906 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012908 0000                       		dc.w @slz-Map_FBlock_internal
0001290A 0000                       		dc.w @lzvert-Map_FBlock_internal
0001290C 0000                       		dc.w @lzhoriz-Map_FBlock_internal
0001290E 01                         @syz1x1:	dc.b 1
0001290F F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012914 04                         @syz2x2:	dc.b 4
00012915 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
0001291A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001291F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012924 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012929 02                         @syz1x2:	dc.b 2
0001292A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
0001292F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012934 04                         @syzrect2x2:	dc.b 4
00012935 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
0001293A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001293F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012944 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012949 03                         @syzrect1x3:	dc.b 3
0001294A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
0001294F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012954 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012959 01                         @slz:		dc.b 1
0001295A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
0001295F 02                         @lzvert:	dc.b 2
00012960 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012965 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001296A 04                         @lzhoriz:	dc.b 4
0001296B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012970 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012975 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001297A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012980 00                         		even
00012980 00                         		even
00012980                            
00012980                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012980                            ; ---------------------------------------------------------------------------
00012980                            ; Object 57 - spiked balls (SYZ, LZ)
00012980                            ; ---------------------------------------------------------------------------
00012980                            
00012980                            SpikeBall:
00012980 7000                       		moveq	#0,d0
00012982 1028 0024                  		move.b	obRoutine(a0),d0
00012986 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
0001298A 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
0001298E                            ; ===========================================================================
0001298E 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012990 0000                       		dc.w SBall_Move-SBall_Index
00012992 0000                       		dc.w SBall_Display-SBall_Index
00012994                            
00012994 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012994                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012994 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012994 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012994 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012994 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012994                            ; ===========================================================================
00012994                            
00012994                            SBall_Main:	; Routine 0
00012994 5428 0024                  		addq.b	#2,obRoutine(a0)
00012998 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
000129A0 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
000129A6 117C 0004 0001             		move.b	#4,obRender(a0)
000129AC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000129B2 117C 0008 0014             		move.b	#8,obActWid(a0)
000129B8 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
000129BE 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
000129C4 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
000129CA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000129D0 6600                       		bne.s	@notlz
000129D2                            
000129D2 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
000129D8 317C 0310 0002             		move.w	#$310,obGfx(a0)
000129DE 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
000129E6                            
000129E6                            	@notlz:
000129E6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129EA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000129EE 4881                       		ext.w	d1
000129F0 E741                       		asl.w	#3,d1		; multiply by 8
000129F2 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
000129F6 1028 0022                  		move.b	obStatus(a0),d0
000129FA E418                       		ror.b	#2,d0
000129FC 0200 00C0                  		andi.b	#$C0,d0
00012A00 1140 0026                  		move.b	d0,obAngle(a0)
00012A04 45E8 0029                  		lea	sball_childs(a0),a2
00012A08 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012A0C 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012A10 14FC 0000                  		move.b	#0,(a2)+
00012A14 3601                       		move.w	d1,d3
00012A16 E94B                       		lsl.w	#4,d3
00012A18 1143 003C                  		move.b	d3,sball_radius(a0)
00012A1C 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012A1E 6500                       		bcs.s	@fail
00012A20 0828 0003 0028             		btst	#3,obSubtype(a0)
00012A26 6700                       		beq.s	@makechain
00012A28 5341                       		subq.w	#1,d1
00012A2A 6500                       		bcs.s	@fail
00012A2C                            
00012A2C                            @makechain:
00012A2C 6100 D1A0                  		bsr.w	FindFreeObj
00012A30 6600                       		bne.s	@fail
00012A32 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012A36 3A09                       		move.w	a1,d5		; get child object RAM address
00012A38 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012A3C EC4D                       		lsr.w	#6,d5		; divide by $40
00012A3E 0245 007F                  		andi.w	#$7F,d5
00012A42 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012A44 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012A4A 1290                       		move.b	0(a0),0(a1)
00012A4C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012A52 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012A58 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012A5E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012A64 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012A6A 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012A70 0403 0010                  		subi.b	#$10,d3
00012A74 1343 003C                  		move.b	d3,sball_radius(a1)
00012A78 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A7E 6600                       		bne.s	@notlzagain
00012A80                            
00012A80 4A03                       		tst.b	d3
00012A82 6600                       		bne.s	@notlzagain
00012A84 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012A8A                            
00012A8A                            	@notlzagain:
00012A8A 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012A8E                            
00012A8E                            	@fail:
00012A8E 3A08                       		move.w	a0,d5
00012A90 0445 D000                  		subi.w	#$D000,d5
00012A94 EC4D                       		lsr.w	#6,d5
00012A96 0245 007F                  		andi.w	#$7F,d5
00012A9A 14C5                       		move.b	d5,(a2)+
00012A9C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012AA2 6600                       		bne.s	SBall_Move
00012AA4                            
00012AA4 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012AAA 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012AB0                            
00012AB0                            SBall_Move:	; Routine 2
00012AB0 6100 0000                  		bsr.w	@movesub
00012AB4 6000 0000                  		bra.w	@chkdel
00012AB8                            ; ===========================================================================
00012AB8                            
00012AB8                            @movesub:
00012AB8 3028 003E                  		move.w	sball_speed(a0),d0
00012ABC D168 0026                  		add.w	d0,obAngle(a0)
00012AC0 1028 0026                  		move.b	obAngle(a0),d0
00012AC4 4EB9 0000 37AE             		jsr	(CalcSine).l
00012ACA 3428 0038                  		move.w	sball_origY(a0),d2
00012ACE 3628 003A                  		move.w	sball_origX(a0),d3
00012AD2 45E8 0029                  		lea	sball_childs(a0),a2
00012AD6 7C00                       		moveq	#0,d6
00012AD8 1C1A                       		move.b	(a2)+,d6
00012ADA                            
00012ADA                            	@loop:
00012ADA 7800                       		moveq	#0,d4
00012ADC 181A                       		move.b	(a2)+,d4
00012ADE ED4C                       		lsl.w	#6,d4
00012AE0 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012AE6 2244                       		movea.l	d4,a1
00012AE8 7800                       		moveq	#0,d4
00012AEA 1829 003C                  		move.b	sball_radius(a1),d4
00012AEE 2A04                       		move.l	d4,d5
00012AF0 C9C0                       		muls.w	d0,d4
00012AF2 E084                       		asr.l	#8,d4
00012AF4 CBC1                       		muls.w	d1,d5
00012AF6 E085                       		asr.l	#8,d5
00012AF8 D842                       		add.w	d2,d4
00012AFA DA43                       		add.w	d3,d5
00012AFC 3344 000C                  		move.w	d4,obY(a1)
00012B00 3345 0008                  		move.w	d5,obX(a1)
00012B04 51CE FFD4                  		dbf	d6,@loop
00012B08 4E75                       		rts	
00012B0A                            ; ===========================================================================
00012B0A                            
00012B0A                            @chkdel:
00012B28 6000 CC18                  		bra.w	DisplaySprite
00012B2C                            ; ===========================================================================
00012B2C                            
00012B2C                            @delete:
00012B2C 7400                       		moveq	#0,d2
00012B2E 45E8 0029                  		lea	sball_childs(a0),a2
00012B32 141A                       		move.b	(a2)+,d2
00012B34                            
00012B34                            	@deleteloop:
00012B34 7000                       		moveq	#0,d0
00012B36 101A                       		move.b	(a2)+,d0
00012B38 ED48                       		lsl.w	#6,d0
00012B3A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012B40 2240                       		movea.l	d0,a1
00012B42 6100 CC40                  		bsr.w	DeleteChild
00012B46 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012B4A                            
00012B4A 4E75                       		rts	
00012B4C                            ; ===========================================================================
00012B4C                            
00012B4C                            SBall_Display:	; Routine 4
00012B4C 6000 CBF4                  		bra.w	DisplaySprite
00012B4C 6000 CBF4                  		bra.w	DisplaySprite
00012B50                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012B50                            ; ---------------------------------------------------------------------------
00012B50                            ; Sprite mappings - chain of spiked balls (SYZ)
00012B50                            ; ---------------------------------------------------------------------------
00012B50                            Map_SBall_internal:
00012B50 0000                       		dc.w @0-Map_SBall_internal
00012B52 01                         @0:		dc.b 1
00012B53 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012B58                            		even
00012B58                            		even
00012B58                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012B58                            ; ---------------------------------------------------------------------------
00012B58                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012B58                            ; ---------------------------------------------------------------------------
00012B58                            Map_SBall2_internal:
00012B58 0000                       		dc.w @chain-Map_SBall2_internal
00012B5A 0000                       		dc.w @spikeball-Map_SBall2_internal
00012B5C 0000                       		dc.w @base-Map_SBall2_internal
00012B5E 01                         @chain:		dc.b 1
00012B5F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012B64 01                         @spikeball:	dc.b 1
00012B65 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012B6A 01                         @base:		dc.b 1
00012B6B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012B70                            		even
00012B70                            		even
00012B70                            		include	"_incObj\58 Big Spiked Ball.asm"
00012B70                            ; ---------------------------------------------------------------------------
00012B70                            ; Object 58 - giant spiked balls (SYZ)
00012B70                            ; ---------------------------------------------------------------------------
00012B70                            
00012B70                            BigSpikeBall:
00012B70 7000                       		moveq	#0,d0
00012B72 1028 0024                  		move.b	obRoutine(a0),d0
00012B76 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012B7A 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012B7E                            ; ===========================================================================
00012B7E 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012B80 0000                       		dc.w BBall_Move-BBall_Index
00012B82                            
00012B82 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012B82 =00000038                  bball_origY:	equ $38		; original y-axis position
00012B82 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012B82 =0000003E                  bball_speed:	equ $3E		; speed
00012B82                            ; ===========================================================================
00012B82                            
00012B82                            BBall_Main:	; Routine 0
00012B82 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B86 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012B8E 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012B94 117C 0004 0001             		move.b	#4,obRender(a0)
00012B9A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BA0 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012BA6 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012BAC 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012BB2 117C 0086 0020             		move.b	#$86,obColType(a0)
00012BB8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BBC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012BC0 4881                       		ext.w	d1
00012BC2 E741                       		asl.w	#3,d1		; multiply by 8
00012BC4 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012BC8 1028 0022                  		move.b	obStatus(a0),d0
00012BCC E418                       		ror.b	#2,d0
00012BCE 0200 00C0                  		andi.b	#$C0,d0
00012BD2 1140 0026                  		move.b	d0,obAngle(a0)
00012BD6 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012BDC                            
00012BDC                            BBall_Move:	; Routine 2
00012BDC 7000                       		moveq	#0,d0
00012BDE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012BE2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012BE6 D040                       		add.w	d0,d0
00012BE8 323B 0000                  		move.w	@index(pc,d0.w),d1
00012BEC 4EBB 1000                  		jsr	@index(pc,d1.w)
00012C0E 6000 CB32                  		bra.w	DisplaySprite
00012C12                            ; ===========================================================================
00012C12 0000                       @index:		dc.w @type00-@index
00012C14 0000                       		dc.w @type01-@index
00012C16 0000                       		dc.w @type02-@index
00012C18 0000                       		dc.w @type03-@index
00012C1A                            ; ===========================================================================
00012C1A                            
00012C1A                            @type00:
00012C1A 4E75                       		rts	
00012C1C                            ; ===========================================================================
00012C1C                            
00012C1C                            @type01:
00012C1C 323C 0060                  		move.w	#$60,d1
00012C20 7000                       		moveq	#0,d0
00012C22 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012C26 0828 0000 0022             		btst	#0,obStatus(a0)
00012C2C 6700                       		beq.s	@noflip1
00012C2E 4440                       		neg.w	d0
00012C30 D041                       		add.w	d1,d0
00012C32                            
00012C32                            	@noflip1:
00012C32 3228 003A                  		move.w	bball_origX(a0),d1
00012C36 9240                       		sub.w	d0,d1
00012C38 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012C3C 4E75                       		rts	
00012C3E                            ; ===========================================================================
00012C3E                            
00012C3E                            @type02:
00012C3E 323C 0060                  		move.w	#$60,d1
00012C42 7000                       		moveq	#0,d0
00012C44 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012C48 0828 0000 0022             		btst	#0,obStatus(a0)
00012C4E 6700                       		beq.s	@noflip2
00012C50 4440                       		neg.w	d0
00012C52 0640 0080                  		addi.w	#$80,d0
00012C56                            
00012C56                            	@noflip2:
00012C56 3228 0038                  		move.w	bball_origY(a0),d1
00012C5A 9240                       		sub.w	d0,d1
00012C5C 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012C60 4E75                       		rts	
00012C62                            ; ===========================================================================
00012C62                            
00012C62                            @type03:
00012C62 3028 003E                  		move.w	bball_speed(a0),d0
00012C66 D168 0026                  		add.w	d0,obAngle(a0)
00012C6A 1028 0026                  		move.b	obAngle(a0),d0
00012C6E 4EB9 0000 37AE             		jsr	(CalcSine).l
00012C74 3428 0038                  		move.w	bball_origY(a0),d2
00012C78 3628 003A                  		move.w	bball_origX(a0),d3
00012C7C 7800                       		moveq	#0,d4
00012C7E 1828 003C                  		move.b	bball_radius(a0),d4
00012C82 2A04                       		move.l	d4,d5
00012C84 C9C0                       		muls.w	d0,d4
00012C86 E084                       		asr.l	#8,d4
00012C88 CBC1                       		muls.w	d1,d5
00012C8A E085                       		asr.l	#8,d5
00012C8C D842                       		add.w	d2,d4
00012C8E DA43                       		add.w	d3,d5
00012C90 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012C94 3145 0008                  		move.w	d5,obX(a0)
00012C98 4E75                       		rts	
00012C98 4E75                       		rts	
00012C9A                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012C9A                            ; --------------------------------------------------------------------------------
00012C9A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012C9A                            ; --------------------------------------------------------------------------------
00012C9A                            
00012C9A                            SME_u_DKx:	
00012C9A 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012C9E 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012CA0 05                         SME_u_DKx_6:	dc.b 5	
00012CA1 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012CA6 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012CAB F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012CB0 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012CB5 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012CBA 01                         SME_u_DKx_20:	dc.b 1	
00012CBB F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012CC0 02                         SME_u_DKx_26:	dc.b 2	
00012CC1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012CC6 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012CCC 00                         		even
00012CCC 00                         		even
00012CCC                            		include	"_incObj\59 SLZ Elevators.asm"
00012CCC                            ; ---------------------------------------------------------------------------
00012CCC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012CCC                            ; ---------------------------------------------------------------------------
00012CCC                            
00012CCC                            Elevator:
00012CCC 7000                       		moveq	#0,d0
00012CCE 1028 0024                  		move.b	obRoutine(a0),d0
00012CD2 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012CD6 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012CF8 6000 CA48                  		bra.w	DisplaySprite
00012CFC                            ; ===========================================================================
00012CFC 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012CFE 0000                       		dc.w Elev_Platform-Elev_Index
00012D00 0000                       		dc.w Elev_Action-Elev_Index
00012D02 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012D04                            
00012D04 =00000032                  elev_origX:	equ $32		; original x-axis position
00012D04 =00000030                  elev_origY:	equ $30		; original y-axis position
00012D04 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012D04                            
00012D04 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012D06                            
00012D06 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012D08 2001                       		dc.b $20, 1
00012D0A 3401                       		dc.b $34, 1
00012D0C 1003                       		dc.b $10, 3
00012D0E 2003                       		dc.b $20, 3
00012D10 3403                       		dc.b $34, 3
00012D12 1401                       		dc.b $14, 1
00012D14 2401                       		dc.b $24, 1
00012D16 2C01                       		dc.b $2C, 1
00012D18 1403                       		dc.b $14, 3
00012D1A 2403                       		dc.b $24, 3
00012D1C 2C03                       		dc.b $2C, 3
00012D1E 2005                       		dc.b $20, 5
00012D20 2007                       		dc.b $20, 7
00012D22 3009                       		dc.b $30, 9
00012D24                            ; ===========================================================================
00012D24                            
00012D24                            Elev_Main:	; Routine 0
00012D24 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D28 7000                       		moveq	#0,d0
00012D2A 1028 0028                  		move.b	obSubtype(a0),d0
00012D2E 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012D30 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012D34 0240 007F                  		andi.w	#$7F,d0
00012D38 C0FC 0006                  		mulu.w	#6,d0
00012D3C 3140 003C                  		move.w	d0,elev_dist(a0)
00012D40 3140 003E                  		move.w	d0,$3E(a0)
00012D44 588F                       		addq.l	#4,sp
00012D46 4E75                       		rts	
00012D48                            ; ===========================================================================
00012D48                            
00012D48                            	@normal:
00012D48 E648                       		lsr.w	#3,d0
00012D4A 0240 001E                  		andi.w	#$1E,d0
00012D4E 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012D52 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012D56 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012D5A 7000                       		moveq	#0,d0
00012D5C 1028 0028                  		move.b	obSubtype(a0),d0
00012D60 D040                       		add.w	d0,d0
00012D62 0240 001E                  		andi.w	#$1E,d0
00012D66 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012D6A 101A                       		move.b	(a2)+,d0
00012D6C E548                       		lsl.w	#2,d0
00012D6E 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012D72 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012D76 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012D7E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012D84 117C 0004 0001             		move.b	#4,obRender(a0)
00012D8A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D90 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012D96 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012D9C                            
00012D9C                            Elev_Platform:	; Routine 2
00012D9C 7200                       		moveq	#0,d1
00012D9E 1228 0014                  		move.b	obActWid(a0),d1
00012DA2 4EB9 0000 8E52             		jsr	(PlatformObject).l
00012DA8 6000 0000                  		bra.w	Elev_Types
00012DAC                            ; ===========================================================================
00012DAC                            
00012DAC                            Elev_Action:	; Routine 4
00012DAC 7200                       		moveq	#0,d1
00012DAE 1228 0014                  		move.b	obActWid(a0),d1
00012DB2 4EB9 0000 8FC6             		jsr	(ExitPlatform).l
00012DB8 3F28 0008                  		move.w	obX(a0),-(sp)
00012DBC 6100 0000                  		bsr.w	Elev_Types
00012DC0 341F                       		move.w	(sp)+,d2
00012DC2 4A10                       		tst.b	0(a0)
00012DC4 6700                       		beq.s	@deleted
00012DC6 4EF9 0000 9530             		jmp	(MvSonicOnPtfm2).l
00012DCC                            
00012DCC                            	@deleted:
00012DCC 4E75                       		rts	
00012DCE                            ; ===========================================================================
00012DCE                            
00012DCE                            Elev_Types:
00012DCE 7000                       		moveq	#0,d0
00012DD0 1028 0028                  		move.b	obSubtype(a0),d0
00012DD4 0240 000F                  		andi.w	#$F,d0
00012DD8 D040                       		add.w	d0,d0
00012DDA 323B 0000                  		move.w	@index(pc,d0.w),d1
00012DDE 4EFB 1000                  		jmp	@index(pc,d1.w)
00012DE2                            ; ===========================================================================
00012DE2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012DE6 0000 0000                  		dc.w @type02-@index, @type01-@index
00012DEA 0000 0000                  		dc.w @type04-@index, @type01-@index
00012DEE 0000 0000                  		dc.w @type06-@index, @type01-@index
00012DF2 0000 0000                  		dc.w @type08-@index, @type09-@index
00012DF6                            ; ===========================================================================
00012DF6                            
00012DF6                            @type00:
00012DF6 4E75                       		rts	
00012DF8                            ; ===========================================================================
00012DF8                            
00012DF8                            @type01:
00012DF8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012DFE 6600                       		bne.s	@notstanding
00012E00 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012E04                            
00012E04                            	@notstanding:
00012E04 4E75                       		rts	
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            @type02:
00012E06 6100 0000                  		bsr.w	Elev_Move
00012E0A 3028 0034                  		move.w	$34(a0),d0
00012E0E 4440                       		neg.w	d0
00012E10 D068 0030                  		add.w	elev_origY(a0),d0
00012E14 3140 000C                  		move.w	d0,obY(a0)
00012E18 4E75                       		rts	
00012E1A                            ; ===========================================================================
00012E1A                            
00012E1A                            @type04:
00012E1A 6100 0000                  		bsr.w	Elev_Move
00012E1E 3028 0034                  		move.w	$34(a0),d0
00012E22 D068 0030                  		add.w	elev_origY(a0),d0
00012E26 3140 000C                  		move.w	d0,obY(a0)
00012E2A 4E75                       		rts	
00012E2C                            ; ===========================================================================
00012E2C                            
00012E2C                            @type06:
00012E2C 6100 0000                  		bsr.w	Elev_Move
00012E30 3028 0034                  		move.w	$34(a0),d0
00012E34 E240                       		asr.w	#1,d0
00012E36 4440                       		neg.w	d0
00012E38 D068 0030                  		add.w	elev_origY(a0),d0
00012E3C 3140 000C                  		move.w	d0,obY(a0)
00012E40 3028 0034                  		move.w	$34(a0),d0
00012E44 D068 0032                  		add.w	elev_origX(a0),d0
00012E48 3140 0008                  		move.w	d0,obX(a0)
00012E4C 4E75                       		rts	
00012E4E                            ; ===========================================================================
00012E4E                            
00012E4E                            @type08:
00012E4E 6100 0000                  		bsr.w	Elev_Move
00012E52 3028 0034                  		move.w	$34(a0),d0
00012E56 E240                       		asr.w	#1,d0
00012E58 D068 0030                  		add.w	elev_origY(a0),d0
00012E5C 3140 000C                  		move.w	d0,obY(a0)
00012E60 3028 0034                  		move.w	$34(a0),d0
00012E64 4440                       		neg.w	d0
00012E66 D068 0032                  		add.w	elev_origX(a0),d0
00012E6A 3140 0008                  		move.w	d0,obX(a0)
00012E6E 4E75                       		rts	
00012E70                            ; ===========================================================================
00012E70                            
00012E70                            @type09:
00012E70 6100 0000                  		bsr.w	Elev_Move
00012E74 3028 0034                  		move.w	$34(a0),d0
00012E78 4440                       		neg.w	d0
00012E7A D068 0030                  		add.w	elev_origY(a0),d0
00012E7E 3140 000C                  		move.w	d0,obY(a0)
00012E82 4A28 0028                  		tst.b	obSubtype(a0)
00012E86 6700 0000                  		beq.w	@typereset
00012E8A 4E75                       		rts	
00012E8C                            ; ===========================================================================
00012E8C                            
00012E8C                            	@typereset:
00012E8C 0828 0003 0022             		btst	#3,obStatus(a0)
00012E92 6700                       		beq.s	@delete
00012E94 08E9 0001 0022             		bset	#1,obStatus(a1)
00012E9A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012EA0 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012EA6                            
00012EA6                            	@delete:
00012EA6 6000 C8DA                  		bra.w	DeleteObject
00012EAA                            
00012EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EAA                            
00012EAA                            
00012EAA                            Elev_Move:
00012EAA 3028 0038                  		move.w	$38(a0),d0
00012EAE 4A28 003A                  		tst.b	$3A(a0)
00012EB2 6600                       		bne.s	loc_10CC8
00012EB4 0C40 0800                  		cmpi.w	#$800,d0
00012EB8 6400                       		bcc.s	loc_10CD0
00012EBA 0640 0010                  		addi.w	#$10,d0
00012EBE 6000                       		bra.s	loc_10CD0
00012EC0                            ; ===========================================================================
00012EC0                            
00012EC0                            loc_10CC8:
00012EC0 4A40                       		tst.w	d0
00012EC2 6700                       		beq.s	loc_10CD0
00012EC4 0440 0010                  		subi.w	#$10,d0
00012EC8                            
00012EC8                            loc_10CD0:
00012EC8 3140 0038                  		move.w	d0,$38(a0)
00012ECC 48C0                       		ext.l	d0
00012ECE E180                       		asl.l	#8,d0
00012ED0 D0A8 0034                  		add.l	$34(a0),d0
00012ED4 2140 0034                  		move.l	d0,$34(a0)
00012ED8 4840                       		swap	d0
00012EDA 3428 003C                  		move.w	elev_dist(a0),d2
00012EDE B042                       		cmp.w	d2,d0
00012EE0 6300                       		bls.s	loc_10CF0
00012EE2 117C 0001 003A             		move.b	#1,$3A(a0)
00012EE8                            
00012EE8                            loc_10CF0:
00012EE8 D442                       		add.w	d2,d2
00012EEA B042                       		cmp.w	d2,d0
00012EEC 6600                       		bne.s	locret_10CFA
00012EEE 4228 0028                  		clr.b	obSubtype(a0)
00012EF2                            
00012EF2                            locret_10CFA:
00012EF2 4E75                       		rts	
00012EF4                            ; End of function Elev_Move
00012EF4                            
00012EF4                            ; ===========================================================================
00012EF4                            
00012EF4                            Elev_MakeMulti:	; Routine 6
00012EF4 5368 003C                  		subq.w	#1,elev_dist(a0)
00012EF8 6600                       		bne.s	@chkdel
00012EFA 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012F00 6100 CCCC                  		bsr.w	FindFreeObj
00012F04 6600                       		bne.s	@chkdel
00012F06 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012F0A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012F10 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012F16 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012F1C                            
00012F1C                            @chkdel:
00012F1C 588F                       		addq.l	#4,sp
00012F3C 4E75                       		rts	
00012F3C 4E75                       		rts	
00012F3E                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012F3E                            ; ---------------------------------------------------------------------------
00012F3E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012F3E                            ; ---------------------------------------------------------------------------
00012F3E                            Map_Elev_internal:
00012F3E 0000                       		dc.w @elevator-Map_Elev_internal
00012F40 03                         @elevator:	dc.b 3
00012F41 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012F46 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012F4B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012F50                            		even
00012F50                            		even
00012F50                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012F50                            ; ---------------------------------------------------------------------------
00012F50                            ; Object 5A - platforms	moving in circles (SLZ)
00012F50                            ; ---------------------------------------------------------------------------
00012F50                            
00012F50                            CirclingPlatform:
00012F50 7000                       		moveq	#0,d0
00012F52 1028 0024                  		move.b	obRoutine(a0),d0
00012F56 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012F5A 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012F7C 6000 C7C4                  		bra.w	DisplaySprite
00012F80                            ; ===========================================================================
00012F80 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012F82 0000                       		dc.w Circ_Platform-Circ_Index
00012F84 0000                       		dc.w Circ_Action-Circ_Index
00012F86                            
00012F86 =00000032                  circ_origX:	equ $32		; original x-axis position
00012F86 =00000030                  circ_origY:	equ $30		; original y-axis position
00012F86                            ; ===========================================================================
00012F86                            
00012F86                            Circ_Main:	; Routine 0
00012F86 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F8A 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012F92 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F98 117C 0004 0001             		move.b	#4,obRender(a0)
00012F9E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FA4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012FAA 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012FB0 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012FB6                            
00012FB6                            Circ_Platform:	; Routine 2
00012FB6 7200                       		moveq	#0,d1
00012FB8 1228 0014                  		move.b	obActWid(a0),d1
00012FBC 4EB9 0000 8E52             		jsr	(PlatformObject).l
00012FC2 6000 0000                  		bra.w	Circ_Types
00012FC6                            ; ===========================================================================
00012FC6                            
00012FC6                            Circ_Action:	; Routine 4
00012FC6 7200                       		moveq	#0,d1
00012FC8 1228 0014                  		move.b	obActWid(a0),d1
00012FCC 4EB9 0000 8FC6             		jsr	(ExitPlatform).l
00012FD2 3F28 0008                  		move.w	obX(a0),-(sp)
00012FD6 6100 0000                  		bsr.w	Circ_Types
00012FDA 341F                       		move.w	(sp)+,d2
00012FDC 4EF9 0000 9530             		jmp	(MvSonicOnPtfm2).l
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            Circ_Types:
00012FE2 7000                       		moveq	#0,d0
00012FE4 1028 0028                  		move.b	obSubtype(a0),d0
00012FE8 0240 000C                  		andi.w	#$C,d0
00012FEC E248                       		lsr.w	#1,d0
00012FEE 323B 0000                  		move.w	@index(pc,d0.w),d1
00012FF2 4EFB 1000                  		jmp	@index(pc,d1.w)
00012FF6                            ; ===========================================================================
00012FF6 0000                       @index:		dc.w @type00-@index
00012FF8 0000                       		dc.w @type04-@index
00012FFA                            ; ===========================================================================
00012FFA                            
00012FFA                            @type00:
00012FFA 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012FFE 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013002 4881                       		ext.w	d1
00013004 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013008 0402 0050                  		subi.b	#$50,d2
0001300C 4882                       		ext.w	d2
0001300E 0828 0000 0028             		btst	#0,obSubtype(a0)
00013014 6700                       		beq.s	@noshift00a
00013016 4441                       		neg.w	d1
00013018 4442                       		neg.w	d2
0001301A                            
0001301A                            	@noshift00a:
0001301A 0828 0001 0028             		btst	#1,obSubtype(a0)
00013020 6700                       		beq.s	@noshift00b
00013022 4441                       		neg.w	d1
00013024 C342                       		exg	d1,d2
00013026                            
00013026                            	@noshift00b:
00013026 D268 0032                  		add.w	circ_origX(a0),d1
0001302A 3141 0008                  		move.w	d1,obX(a0)
0001302E D468 0030                  		add.w	circ_origY(a0),d2
00013032 3142 000C                  		move.w	d2,obY(a0)
00013036 4E75                       		rts	
00013038                            ; ===========================================================================
00013038                            
00013038                            @type04:
00013038 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
0001303C 0401 0050                  		subi.b	#$50,d1
00013040 4881                       		ext.w	d1
00013042 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013046 0402 0050                  		subi.b	#$50,d2
0001304A 4882                       		ext.w	d2
0001304C 0828 0000 0028             		btst	#0,obSubtype(a0)
00013052 6700                       		beq.s	@noshift04a
00013054 4441                       		neg.w	d1
00013056 4442                       		neg.w	d2
00013058                            
00013058                            	@noshift04a:
00013058 0828 0001 0028             		btst	#1,obSubtype(a0)
0001305E 6700                       		beq.s	@noshift04b
00013060 4441                       		neg.w	d1
00013062 C342                       		exg	d1,d2
00013064                            
00013064                            	@noshift04b:
00013064 4441                       		neg.w	d1
00013066 D268 0032                  		add.w	circ_origX(a0),d1
0001306A 3141 0008                  		move.w	d1,obX(a0)
0001306E D468 0030                  		add.w	circ_origY(a0),d2
00013072 3142 000C                  		move.w	d2,obY(a0)
00013076 4E75                       		rts	
00013076 4E75                       		rts	
00013078                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00013078                            ; ---------------------------------------------------------------------------
00013078                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013078                            ; ---------------------------------------------------------------------------
00013078                            Map_Circ_internal:
00013078 0000                       		dc.w @platform-Map_Circ_internal
0001307A 02                         @platform:	dc.b 2
0001307B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013080 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013086 00                         		even
00013086 00                         		even
00013086                            		include	"_incObj\5B Staircase.asm"
00013086                            ; ---------------------------------------------------------------------------
00013086                            ; Object 5B - blocks that form a staircase (SLZ)
00013086                            ; ---------------------------------------------------------------------------
00013086                            
00013086                            Staircase:
00013086 7000                       		moveq	#0,d0
00013088 1028 0024                  		move.b	obRoutine(a0),d0
0001308C 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013090 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000130B2 6000 C68E                  		bra.w	DisplaySprite
000130B6                            ; ===========================================================================
000130B6 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000130B8 0000                       		dc.w Stair_Move-Stair_Index
000130BA 0000                       		dc.w Stair_Solid-Stair_Index
000130BC                            
000130BC =00000030                  stair_origX:	equ $30		; original x-axis position
000130BC =00000032                  stair_origY:	equ $32		; original y-axis position
000130BC                            
000130BC =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000130BC                            ; ===========================================================================
000130BC                            
000130BC                            Stair_Main:	; Routine 0
000130BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000130C0 7638                       		moveq	#$38,d3
000130C2 7801                       		moveq	#1,d4
000130C4 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000130CA 6700                       		beq.s	@notflipped	; if not, branch
000130CC 763B                       		moveq	#$3B,d3
000130CE 78FF                       		moveq	#-1,d4
000130D0                            
000130D0                            	@notflipped:
000130D0 3428 0008                  		move.w	obX(a0),d2
000130D4 2248                       		movea.l	a0,a1
000130D6 7203                       		moveq	#3,d1
000130D8 6000                       		bra.s	@makeblocks
000130DA                            ; ===========================================================================
000130DA                            
000130DA                            @loop:
000130DA 6100 CB08                  		bsr.w	FindNextFreeObj
000130DE 6600 0000                  		bne.w	@fail
000130E2 137C 0004 0024             		move.b	#4,obRoutine(a1)
000130E8                            
000130E8                            @makeblocks:
000130E8 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
000130EC 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000130F4 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000130FA 137C 0004 0001             		move.b	#4,obRender(a1)
00013100 337C 0180 0018             		move.w	#$180,obPriority(a1)
00013106 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001310C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013112 3342 0008                  		move.w	d2,obX(a1)
00013116 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001311C 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013122 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013128 0642 0020                  		addi.w	#$20,d2
0001312C 1343 0037                  		move.b	d3,$37(a1)
00013130 2348 003C                  		move.l	a0,stair_parent(a1)
00013134 D604                       		add.b	d4,d3
00013136 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001313A                            
0001313A                            	@fail:
0001313A                            
0001313A                            Stair_Move:	; Routine 2
0001313A 7000                       		moveq	#0,d0
0001313C 1028 0028                  		move.b	obSubtype(a0),d0
00013140 0240 0007                  		andi.w	#7,d0
00013144 D040                       		add.w	d0,d0
00013146 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001314A 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
0001314E                            
0001314E                            Stair_Solid:	; Routine 4
0001314E 2468 003C                  		movea.l	stair_parent(a0),a2
00013152 7000                       		moveq	#0,d0
00013154 1028 0037                  		move.b	$37(a0),d0
00013158 1032 0000                  		move.b	(a2,d0.w),d0
0001315C D068 0032                  		add.w	stair_origY(a0),d0
00013160 3140 000C                  		move.w	d0,obY(a0)
00013164 7200                       		moveq	#0,d1
00013166 1228 0014                  		move.b	obActWid(a0),d1
0001316A 0641 000B                  		addi.w	#$B,d1
0001316E 343C 0010                  		move.w	#$10,d2
00013172 363C 0011                  		move.w	#$11,d3
00013176 3828 0008                  		move.w	obX(a0),d4
0001317A 6100 E9E8                  		bsr.w	SolidObject
0001317E 4A04                       		tst.b	d4
00013180 6A00                       		bpl.s	loc_10F92
00013182 1544 0036                  		move.b	d4,$36(a2)
00013186                            
00013186                            loc_10F92:
00013186 0828 0003 0022             		btst	#3,obStatus(a0)
0001318C 6700                       		beq.s	locret_10FA0
0001318E 157C 0001 0036             		move.b	#1,$36(a2)
00013194                            
00013194                            locret_10FA0:
00013194 4E75                       		rts	
00013196                            ; ===========================================================================
00013196 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00013198 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001319A 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001319C 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            Stair_Type00:
0001319E 4A68 0034                  		tst.w	$34(a0)
000131A2 6600                       		bne.s	loc_10FC0
000131A4 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000131AA 6600                       		bne.s	locret_10FBE
000131AC 317C 001E 0034             		move.w	#$1E,$34(a0)
000131B2                            
000131B2                            locret_10FBE:
000131B2 4E75                       		rts	
000131B4                            ; ===========================================================================
000131B4                            
000131B4                            loc_10FC0:
000131B4 5368 0034                  		subq.w	#1,$34(a0)
000131B8 66F8                       		bne.s	locret_10FBE
000131BA 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000131BE 4E75                       		rts	
000131C0                            ; ===========================================================================
000131C0                            
000131C0                            Stair_Type02:
000131C0 4A68 0034                  		tst.w	$34(a0)
000131C4 6600                       		bne.s	loc_10FE0
000131C6 4A28 0036                  		tst.b	$36(a0)
000131CA 6A00                       		bpl.s	locret_10FDE
000131CC 317C 003C 0034             		move.w	#$3C,$34(a0)
000131D2                            
000131D2                            locret_10FDE:
000131D2 4E75                       		rts	
000131D4                            ; ===========================================================================
000131D4                            
000131D4                            loc_10FE0:
000131D4 5368 0034                  		subq.w	#1,$34(a0)
000131D8 6600                       		bne.s	loc_10FEC
000131DA 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000131DE 4E75                       		rts	
000131E0                            ; ===========================================================================
000131E0                            
000131E0                            loc_10FEC:
000131E0 43E8 0038                  		lea	$38(a0),a1
000131E4 3028 0034                  		move.w	$34(a0),d0
000131E8 E408                       		lsr.b	#2,d0
000131EA 0200 0001                  		andi.b	#1,d0
000131EE 12C0                       		move.b	d0,(a1)+
000131F0 0A00 0001                  		eori.b	#1,d0
000131F4 12C0                       		move.b	d0,(a1)+
000131F6 0A00 0001                  		eori.b	#1,d0
000131FA 12C0                       		move.b	d0,(a1)+
000131FC 0A00 0001                  		eori.b	#1,d0
00013200 12C0                       		move.b	d0,(a1)+
00013202 4E75                       		rts	
00013204                            ; ===========================================================================
00013204                            
00013204                            Stair_Type01:
00013204 43E8 0038                  		lea	$38(a0),a1
00013208 0C11 0080                  		cmpi.b	#$80,(a1)
0001320C 6700                       		beq.s	locret_11038
0001320E 5211                       		addq.b	#1,(a1)
00013210 7200                       		moveq	#0,d1
00013212 1219                       		move.b	(a1)+,d1
00013214 4841                       		swap	d1
00013216 E289                       		lsr.l	#1,d1
00013218 2401                       		move.l	d1,d2
0001321A E289                       		lsr.l	#1,d1
0001321C 2601                       		move.l	d1,d3
0001321E D682                       		add.l	d2,d3
00013220 4841                       		swap	d1
00013222 4842                       		swap	d2
00013224 4843                       		swap	d3
00013226 12C3                       		move.b	d3,(a1)+
00013228 12C2                       		move.b	d2,(a1)+
0001322A 12C1                       		move.b	d1,(a1)+
0001322C                            
0001322C                            locret_11038:
0001322C 4E75                       		rts	
0001322E 4E75                       		rts	
0001322E 4E75                       		rts	
00013230                            Map_Stair:	include	"_maps\Staircase.asm"
00013230                            ; ---------------------------------------------------------------------------
00013230                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013230                            ; ---------------------------------------------------------------------------
00013230                            Map_Stair_internal:
00013230 0000                       		dc.w @block-Map_Stair_internal
00013232 01                         @block:		dc.b 1
00013233 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013238                            		even
00013238                            		even
00013238                            		include	"_incObj\5C Pylon.asm"
00013238                            ; ---------------------------------------------------------------------------
00013238                            ; Object 5C - metal pylons in foreground (SLZ)
00013238                            ; ---------------------------------------------------------------------------
00013238                            
00013238                            Pylon:
00013238 7000                       		moveq	#0,d0
0001323A 1028 0024                  		move.b	obRoutine(a0),d0
0001323E 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013242 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013246                            ; ===========================================================================
00013246 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013248 0000                       		dc.w Pyl_Display-Pyl_Index
0001324A                            ; ===========================================================================
0001324A                            
0001324A                            Pyl_Main:	; Routine 0
0001324A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001324E 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013256 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001325C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013262                            
00013262                            Pyl_Display:	; Routine 2
00013262 2238 F700                  		move.l	(v_screenposx).w,d1
00013266 D281                       		add.l	d1,d1
00013268 4841                       		swap	d1
0001326A 4441                       		neg.w	d1
0001326C 3141 0008                  		move.w	d1,obX(a0)
00013270 2238 F704                  		move.l	(v_screenposy).w,d1
00013274 D281                       		add.l	d1,d1
00013276 4841                       		swap	d1
00013278 0241 003F                  		andi.w	#$3F,d1
0001327C 4441                       		neg.w	d1
0001327E 0641 0100                  		addi.w	#$100,d1
00013282 3141 000A                  		move.w	d1,obScreenY(a0)
00013286 6000 C4BA                  		bra.w	DisplaySprite
00013286 6000 C4BA                  		bra.w	DisplaySprite
0001328A                            Map_Pylon:	include	"_maps\Pylon.asm"
0001328A                            ; ---------------------------------------------------------------------------
0001328A                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001328A                            ; ---------------------------------------------------------------------------
0001328A                            Map_Pylon_internal:
0001328A 0000                       		dc.w @pylon-Map_Pylon_internal
0001328C 09                         @pylon:		dc.b 9
0001328D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013292 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013297 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001329C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000132A1 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000132A6 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000132AB 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000132B0 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000132B5 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000132BA                            		even
000132BA                            		even
000132BA                            
000132BA                            		include	"_incObj\1B Water Surface.asm"
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            ; Object 1B - water surface (LZ)
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            
000132BA                            WaterSurface:
000132BA 7000                       		moveq	#0,d0
000132BC 1028 0024                  		move.b	obRoutine(a0),d0
000132C0 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000132C4 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000132C8                            ; ===========================================================================
000132C8 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000132CA 0000                       		dc.w Surf_Action-Surf_Index
000132CC                            
000132CC =00000030                  surf_origX:	equ $30		; original x-axis position
000132CC =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000132CC                            ; ===========================================================================
000132CC                            
000132CC                            Surf_Main:	; Routine 0
000132CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000132D0 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000132D8 317C C300 0002             		move.w	#$C300,obGfx(a0)
000132DE 117C 0004 0001             		move.b	#4,obRender(a0)
000132E4 117C 0080 0014             		move.b	#$80,obActWid(a0)
000132EA 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000132F0                            
000132F0                            Surf_Action:	; Routine 2
000132F0 3238 F700                  		move.w	(v_screenposx).w,d1
000132F4 0241 FFE0                  		andi.w	#$FFE0,d1
000132F8 D268 0030                  		add.w	surf_origX(a0),d1
000132FC 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013302 6700                       		beq.s	@even		; branch on even frames
00013304 0641 0020                  		addi.w	#$20,d1
00013308                            
00013308                            	@even:
00013308 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
0001330C 3238 F646                  		move.w	(v_waterpos1).w,d1
00013310 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00013314 4A28 0032                  		tst.b	surf_freeze(a0)
00013318 6600                       		bne.s	@stopped
0001331A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013320 6700                       		beq.s	@animate	; if not, branch
00013322 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013326 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001332C 6000                       		bra.s	@display
0001332E                            ; ===========================================================================
0001332E                            
0001332E                            @stopped:
0001332E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013332 6600                       		bne.s	@display	; if yes, branch
00013334 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001333A 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
0001333E                            
0001333E                            @animate:
0001333E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013342 6A00                       		bpl.s	@display
00013344 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001334A 5228 001A                  		addq.b	#1,obFrame(a0)
0001334E 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013354 6500                       		bcs.s	@display
00013356 117C 0000 001A             		move.b	#0,obFrame(a0)
0001335C                            
0001335C                            @display:
0001335C 6000 C3E4                  		bra.w	DisplaySprite
0001335C 6000 C3E4                  		bra.w	DisplaySprite
00013360                            Map_Surf:	include	"_maps\Water Surface.asm"
00013360                            ; --------------------------------------------------------------------------------
00013360                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013360                            ; --------------------------------------------------------------------------------
00013360                            
00013360                            SME_LGSi8:	
00013360 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013364 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013368 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001336C 03                         SME_LGSi8_C:	dc.b 3	
0001336D F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013372 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013377 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001337C 03                         SME_LGSi8_1C:	dc.b 3	
0001337D F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013382 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013387 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001338C 03                         SME_LGSi8_2C:	dc.b 3	
0001338D F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013392 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013397 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001339C 06                         SME_LGSi8_3C:	dc.b 6	
0001339D F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000133A2 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000133A7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000133AC F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000133B1 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000133B6 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000133BB 06                         SME_LGSi8_5B:	dc.b 6	
000133BC F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000133C1 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000133C6 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000133CB F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000133D0 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000133D5 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000133DA 06                         SME_LGSi8_7A:	dc.b 6	
000133DB F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000133E0 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000133E5 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000133EA F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000133EF F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000133F4 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000133FA 00                         		even
000133FA 00                         		even
000133FA                            		include	"_incObj\0B Pole that Breaks.asm"
000133FA                            ; ---------------------------------------------------------------------------
000133FA                            ; Object 0B - pole that	breaks (LZ)
000133FA                            ; ---------------------------------------------------------------------------
000133FA                            
000133FA                            Pole:
000133FA 7000                       		moveq	#0,d0
000133FC 1028 0024                  		move.b	obRoutine(a0),d0
00013400 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013404 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013408                            ; ===========================================================================
00013408 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
0001340A 0000                       		dc.w Pole_Action-Pole_Index
0001340C 0000                       		dc.w Pole_Display-Pole_Index
0001340E                            
0001340E =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
0001340E =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
0001340E                            ; ===========================================================================
0001340E                            
0001340E                            Pole_Main:	; Routine 0
0001340E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013412 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
0001341A 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013420 117C 0004 0001             		move.b	#4,obRender(a0)
00013426 117C 0008 0014             		move.b	#8,obActWid(a0)
0001342C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013432 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013438 7000                       		moveq	#0,d0
0001343A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001343E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013442 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013446                            
00013446                            Pole_Action:	; Routine 2
00013446 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001344A 6700                       		beq.s	@grab		; if not, branch
0001344C 4A68 0030                  		tst.w	pole_time(a0)
00013450 6700                       		beq.s	@moveup
00013452 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013456 6600                       		bne.s	@moveup
00013458 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
0001345E 6000                       		bra.s	@release
00013460                            ; ===========================================================================
00013460                            
00013460                            @moveup:
00013460 43F8 D000                  		lea	(v_player).w,a1
00013464 3028 000C                  		move.w	obY(a0),d0
00013468 0440 0018                  		subi.w	#$18,d0
0001346C 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013472 6700                       		beq.s	@movedown	; if not, branch
00013474 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013478 B069 000C                  		cmp.w	obY(a1),d0
0001347C 6500                       		bcs.s	@movedown
0001347E 3340 000C                  		move.w	d0,obY(a1)
00013482                            
00013482                            @movedown:
00013482 0640 0024                  		addi.w	#$24,d0
00013486 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001348C 6700                       		beq.s	@letgo		; if not, branch
0001348E 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013492 B069 000C                  		cmp.w	obY(a1),d0
00013496 6400                       		bcc.s	@letgo
00013498 3340 000C                  		move.w	d0,obY(a1)
0001349C                            
0001349C                            @letgo:
0001349C 1038 F603                  		move.b	(v_jpadpress2).w,d0
000134A0 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000134A4 6700                       		beq.s	Pole_Display	; if not, branch
000134A6                            
000134A6                            @release:
000134A6 4228 0020                  		clr.b	obColType(a0)
000134AA 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000134AE 4238 F7C8                  		clr.b	(f_lockmulti).w
000134B2 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000134B6 4228 0032                  		clr.b	pole_grabbed(a0)
000134BA 6000                       		bra.s	Pole_Display
000134BC                            ; ===========================================================================
000134BC                            
000134BC                            @grab:
000134BC 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000134C0 6700                       		beq.s	Pole_Display	; if not, branch
000134C2 43F8 D000                  		lea	(v_player).w,a1
000134C6 3028 0008                  		move.w	obX(a0),d0
000134CA 0640 0014                  		addi.w	#$14,d0
000134CE B069 0008                  		cmp.w	obX(a1),d0
000134D2 6400                       		bcc.s	Pole_Display
000134D4 4228 0021                  		clr.b	obColProp(a0)
000134D8 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000134DE 6400                       		bcc.s	Pole_Display
000134E0 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000134E4 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000134E8 3028 0008                  		move.w	obX(a0),d0
000134EC 0640 0014                  		addi.w	#$14,d0
000134F0 3340 0008                  		move.w	d0,obX(a1)
000134F4 08A9 0000 0022             		bclr	#0,obStatus(a1)
000134FA 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013500 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013506 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
0001350C 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013512                            
00013512                            Pole_Display:	; Routine 4
00013512 6000 E1B8                  		bra.w	RememberState
00013512 6000 E1B8                  		bra.w	RememberState
00013516                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013516                            ; ---------------------------------------------------------------------------
00013516                            ; Sprite mappings - pole that breaks (LZ)
00013516                            ; ---------------------------------------------------------------------------
00013516                            Map_Pole_internal:
00013516 0000                       		dc.w @normal-Map_Pole_internal
00013518 0000                       		dc.w @broken-Map_Pole_internal
0001351A 02                         @normal:	dc.b 2			; normal pole
0001351B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013520 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013525 04                         @broken:	dc.b 4			; broken pole
00013526 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001352B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013530 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013535 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001353A                            		even
0001353A                            		even
0001353A                            		include	"_incObj\0C Flapping Door.asm"
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            ; Object 0C - flapping door (LZ)
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            
0001353A                            FlapDoor:
0001353A 7000                       		moveq	#0,d0
0001353C 1028 0024                  		move.b	obRoutine(a0),d0
00013540 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013544 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013548                            ; ===========================================================================
00013548 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001354A 0000                       		dc.w Flap_OpenClose-Flap_Index
0001354C                            
0001354C =00000032                  flap_time:	equ $32		; time between opening/closing
0001354C =00000030                  flap_wait:	equ $30		; time until change
0001354C                            ; ===========================================================================
0001354C                            
0001354C                            Flap_Main:	; Routine 0
0001354C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013550 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013558 317C 4328 0002             		move.w	#$4328,obGfx(a0)
0001355E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013564 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001356A 7000                       		moveq	#0,d0
0001356C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013570 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013574 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013578                            
00013578                            Flap_OpenClose:	; Routine 2
00013578 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001357C 6A00                       		bpl.s	@wait		; if time remains, branch
0001357E 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013584 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001358A 4A28 0001                  		tst.b	obRender(a0)
0001358E 6A00                       		bpl.s	@nosound
0001359A                            
0001359A                            	@wait:
0001359A                            	@nosound:
0001359A 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000135A0 6100 9262                  		bsr.w	AnimateSprite
000135A4 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000135A8 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000135AC 6600                       		bne.s	@display	; if yes, branch
000135AE 3038 D008                  		move.w	(v_player+obX).w,d0
000135B2 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000135B6 6400                       		bcc.s	@display	; if yes, branch
000135B8 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000135BE 323C 0013                  		move.w	#$13,d1
000135C2 343C 0020                  		move.w	#$20,d2
000135C6 3602                       		move.w	d2,d3
000135C8 5243                       		addq.w	#1,d3
000135CA 3828 0008                  		move.w	obX(a0),d4
000135CE 6100 E594                  		bsr.w	SolidObject	; make the door	solid
000135D2                            
000135D2                            	@display:
000135D2 6000 E0F8                  		bra.w	RememberState
000135D2 6000 E0F8                  		bra.w	RememberState
000135D6                            		include	"_anim\Flapping Door.asm"
000135D6                            ; ---------------------------------------------------------------------------
000135D6                            ; Animation script - flapping door (LZ)
000135D6                            ; ---------------------------------------------------------------------------
000135D6 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000135D8 0000                       		dc.w @closing-Ani_Flap
000135DA 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000135E0 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000135E6                            		even
000135E6                            		even
000135E6                            Map_Flap:	include	"_maps\Flapping Door.asm"
000135E6                            ; ---------------------------------------------------------------------------
000135E6                            ; Sprite mappings - flapping door (LZ)
000135E6                            ; ---------------------------------------------------------------------------
000135E6                            Map_Flap_internal:
000135E6 0000                       		dc.w @closed-Map_Flap_internal
000135E8 0000                       		dc.w @halfway-Map_Flap_internal
000135EA 0000                       		dc.w @open-Map_Flap_internal
000135EC 02                         @closed:	dc.b 2
000135ED E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000135F2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000135F7 02                         @halfway:	dc.b 2
000135F8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000135FD 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013602 02                         @open:		dc.b 2
00013603 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013608 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001360E 00                         		even
0001360E 00                         		even
0001360E                            
0001360E                            		include	"_incObj\71 Invisible Barriers.asm"
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            ; Object 71 - invisible	solid barriers
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            
0001360E                            Invisibarrier:
0001360E 7000                       		moveq	#0,d0
00013610 1028 0024                  		move.b	obRoutine(a0),d0
00013614 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013618 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
0001361C                            ; ===========================================================================
0001361C 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
0001361E 0000                       		dc.w Invis_Solid-Invis_Index
00013620                            
00013620 =00000016                  invis_height:	equ $16		; height in pixels
00013620                            ; ===========================================================================
00013620                            
00013620                            Invis_Main:	; Routine 0
00013620 5428 0024                  		addq.b	#2,obRoutine(a0)
00013624 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001362C 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013632 0028 0004 0001             		ori.b	#4,obRender(a0)
00013638 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001363C 1200                       		move.b	d0,d1
0001363E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013642 0640 0010                  		addi.w	#$10,d0
00013646 E248                       		lsr.w	#1,d0
00013648 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001364C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013650 5241                       		addq.w	#1,d1
00013652 E749                       		lsl.w	#3,d1
00013654 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013658                            
00013658                            Invis_Solid:	; Routine 2
00013658 6100 C368                  		bsr.w	ChkObjectVisible
0001365C 6600                       		bne.s	@chkdel
0001365E 7200                       		moveq	#0,d1
00013660 1228 0014                  		move.b	obActWid(a0),d1
00013664 0641 000B                  		addi.w	#$B,d1
00013668 7400                       		moveq	#0,d2
0001366A 1428 0016                  		move.b	invis_height(a0),d2
0001366E 3602                       		move.w	d2,d3
00013670 5243                       		addq.w	#1,d3
00013672 3828 0008                  		move.w	obX(a0),d4
00013676 6100 E534                  		bsr.w	SolidObject71
0001367A                            
0001367A                            @chkdel:
00013696 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001369A 6700                       		beq.s	@nodisplay	; if not, branch
0001369C 4EF9 0000 F742             		jmp	(DisplaySprite).l	; if yes, display the object
000136A2                            
000136A2                            	@nodisplay:
000136A2 4E75                       		rts	
000136A4                            
000136A4                            	@delete:
000136A4 4EF9 0000 F782             		jmp	(DeleteObject).l
000136A4 4EF9 0000 F782             		jmp	(DeleteObject).l
000136AA                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000136AA                            ; --------------------------------------------------------------------------------
000136AA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000136AA                            ; --------------------------------------------------------------------------------
000136AA                            
000136AA                            SME_t60cE:	
000136AA 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000136AE 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000136B0 04                         SME_t60cE_6:	dc.b 4	
000136B1 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000136B6 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000136BB F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000136C0 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000136C5 04                         SME_t60cE_1B:	dc.b 4	
000136C6 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000136CB E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000136D0 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000136D5 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000136DA 04                         SME_t60cE_30:	dc.b 4	
000136DB E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000136E0 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000136E5 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000136EA 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000136F0 00                         		even
000136F0 00                         		even
000136F0                            
000136F0                            		include	"_incObj\5D Fan.asm"
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            ; Object 5D - fans (SLZ)
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            
000136F0                            Fan:
000136F0 7000                       		moveq	#0,d0
000136F2 1028 0024                  		move.b	obRoutine(a0),d0
000136F6 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000136FA 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000136FE                            ; ===========================================================================
000136FE 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013700 0000                       		dc.w Fan_Delay-Fan_Index
00013702                            
00013702 =00000030                  fan_time:	equ $30		; time between switching on/off
00013702 =00000032                  fan_switch:	equ $32		; on/off switch
00013702                            ; ===========================================================================
00013702                            
00013702                            Fan_Main:	; Routine 0
00013702 5428 0024                  		addq.b	#2,obRoutine(a0)
00013706 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
0001370E 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013714 0028 0004 0001             		ori.b	#4,obRender(a0)
0001371A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013720 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013726                            
00013726                            Fan_Delay:	; Routine 2
00013726 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
0001372C 6600                       		bne.s	@blow		; if yes, branch
0001372E 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013732 6A00                       		bpl.s	@blow		; if time remains, branch
00013734 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
0001373A 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013740 6700                       		beq.s	@blow		; if fan is off, branch
00013742 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013748                            
00013748                            @blow:
00013748 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
0001374C 6600 0000                  		bne.w	@chkdel		; if not, branch
00013750 43F8 D000                  		lea	(v_player).w,a1
00013754 3029 0008                  		move.w	obX(a1),d0
00013758 9068 0008                  		sub.w	obX(a0),d0
0001375C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013762 6600                       		bne.s	@chksonic	; if yes, branch
00013764 4440                       		neg.w	d0
00013766                            
00013766                            @chksonic:
00013766 0640 0050                  		addi.w	#$50,d0
0001376A 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001376E 6400                       		bcc.s	@animate	; if yes, branch
00013770 3229 000C                  		move.w	obY(a1),d1
00013774 0641 0060                  		addi.w	#$60,d1
00013778 9268 000C                  		sub.w	obY(a0),d1
0001377C 6500                       		bcs.s	@animate	; branch if Sonic is too low
0001377E 0C41 0070                  		cmpi.w	#$70,d1
00013782 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013784 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013788 6400                       		bcc.s	@faraway	; if yes, branch
0001378A 4640                       		not.w	d0
0001378C D040                       		add.w	d0,d0
0001378E                            
0001378E                            	@faraway:
0001378E 0640 0060                  		addi.w	#$60,d0
00013792 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013798 6600                       		bne.s	@right		; if yes, branch
0001379A 4440                       		neg.w	d0
0001379C                            
0001379C                            	@right:
0001379C 4400                       		neg.b	d0
0001379E E840                       		asr.w	#4,d0
000137A0 0828 0000 0028             		btst	#0,obSubtype(a0)
000137A6 6700                       		beq.s	@movesonic
000137A8 4440                       		neg.w	d0
000137AA                            
000137AA                            	@movesonic:
000137AA D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000137AE                            
000137AE                            @animate:
000137AE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000137B2 6A00                       		bpl.s	@chkdel
000137B4 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000137BA 5228 001B                  		addq.b	#1,obAniFrame(a0)
000137BE 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000137C4 6500                       		bcs.s	@noreset
000137C6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000137CC                            
000137CC                            	@noreset:
000137CC 7000                       		moveq	#0,d0
000137CE 0828 0000 0028             		btst	#0,obSubtype(a0)
000137D4 6700                       		beq.s	@noflip
000137D6 7002                       		moveq	#2,d0
000137D8                            
000137D8                            	@noflip:
000137D8 D028 001B                  		add.b	obAniFrame(a0),d0
000137DC 1140 001A                  		move.b	d0,obFrame(a0)
000137E0                            
000137E0                            @chkdel:
000137E0 6100 BF60                  		bsr.w	DisplaySprite
00013802 4E75                       		rts	
00013802 4E75                       		rts	
00013804                            Map_Fan:	include	"_maps\Fan.asm"
00013804                            ; ---------------------------------------------------------------------------
00013804                            ; Sprite mappings - fans (SLZ)
00013804                            ; ---------------------------------------------------------------------------
00013804                            Map_Fan_internal:
00013804 0000                       		dc.w @fan1-Map_Fan_internal
00013806 0000                       		dc.w @fan2-Map_Fan_internal
00013808 0000                       		dc.w @fan3-Map_Fan_internal
0001380A 0000                       		dc.w @fan2-Map_Fan_internal
0001380C 0000                       		dc.w @fan1-Map_Fan_internal
0001380E 02                         @fan1:		dc.b 2
0001380F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013814 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013819 02                         @fan2:		dc.b 2
0001381A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001381F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013824 02                         @fan3:		dc.b 2
00013825 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001382A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013830 00                         		even
00013830 00                         		even
00013830                            		include	"_incObj\5E Seesaw.asm"
00013830                            ; ---------------------------------------------------------------------------
00013830                            ; Object 5E - seesaws (SLZ)
00013830                            ; ---------------------------------------------------------------------------
00013830                            
00013830                            Seesaw:
00013830 7000                       		moveq	#0,d0
00013832 1028 0024                  		move.b	obRoutine(a0),d0
00013836 323B 0000                  		move.w	See_Index(pc,d0.w),d1
0001383A 4EBB 1000                  		jsr	See_Index(pc,d1.w)
0001383E 3028 0000                  		move.w	see_origX(a0),d0
00013842 0240 FF80                  		andi.w	#$FF80,d0
00013846 3238 F700                  		move.w	(v_screenposx).w,d1
0001384A 0441 0080                  		subi.w	#$80,d1
0001384E 0241 FF80                  		andi.w	#$FF80,d1
00013852 9041                       		sub.w	d1,d0
00013854 6B00 BF2C                  		bmi.w	DeleteObject
00013858 0C40 0280                  		cmpi.w	#$280,d0
0001385C 6200 BF24                  		bhi.w	DeleteObject
00013860 6000 BEE0                  		bra.w	DisplaySprite
00013864                            ; ===========================================================================
00013864 0000                       See_Index:	dc.w See_Main-See_Index
00013866 0000                       		dc.w See_Slope-See_Index
00013868 0000                       		dc.w See_Slope2-See_Index
0001386A 0000                       		dc.w See_Spikeball-See_Index
0001386C 0000                       		dc.w See_MoveSpike-See_Index
0001386E 0000                       		dc.w See_SpikeFall-See_Index
00013870                            
00013870 =00000030                  see_origX:	equ $30		; original x-axis position
00013870 =00000034                  see_origY:	equ $34		; original y-axis position
00013870 =00000038                  see_speed:	equ $38		; speed of collision
00013870 =0000003A                  see_frame:	equ $3A		; 
00013870 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013870                            ; ===========================================================================
00013870                            
00013870                            See_Main:	; Routine 0
00013870 5428 0024                  		addq.b	#2,obRoutine(a0)
00013874 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
0001387C 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013882 0028 0004 0001             		ori.b	#4,obRender(a0)
00013888 117C 0004 0018             		move.b	#4,obPriority(a0)
0001388E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013894 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
0001389A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
0001389E 6600                       		bne.s	@noball		; if not, branch
000138A0                            
000138A0 6100 C342                  		bsr.w	FindNextFreeObj
000138A4 6600                       		bne.s	@noball
000138A6 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
000138AA 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
000138AE 3368 0008 0008             		move.w	obX(a0),obX(a1)
000138B4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000138BA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000138C0 2348 003C                  		move.l	a0,see_parent(a1)
000138C4                            
000138C4                            	@noball:
000138C4 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000138CA 6700                       		beq.s	@noflip		; if not, branch
000138CC 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000138D2                            
000138D2                            	@noflip:
000138D2 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
000138D8                            
000138D8                            See_Slope:	; Routine 2
000138D8 1228 003A                  		move.b	see_frame(a0),d1
000138DC 6100 0000                  		bsr.w	See_ChgFrame
000138E0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000138E6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000138EC 6700                       		beq.s	@notflat	; if not, branch
000138EE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000138F4                            
000138F4                            	@notflat:
000138F4 43F8 D000                  		lea	(v_player).w,a1
000138F8 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
000138FE 323C 0030                  		move.w	#$30,d1
00013902 4EB9 0000 8F26             		jsr	(SlopeObject).l
00013908 4E75                       		rts	
0001390A                            ; ===========================================================================
0001390A                            
0001390A                            See_Slope2:	; Routine 4
0001390A 6100 0000                  		bsr.w	See_ChkSide
0001390E 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013914 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
0001391A 6700                       		beq.s	@notflat	; if not, branch
0001391C 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013922                            
00013922                            	@notflat:
00013922 323C 0030                  		move.w	#$30,d1
00013926 4EB9 0000 8FC6             		jsr	(ExitPlatform).l
0001392C 323C 0030                  		move.w	#$30,d1
00013930 3428 0008                  		move.w	obX(a0),d2
00013934 4EB9 0000 9F60             		jsr	(SlopeObject2).l
0001393A 4E75                       		rts	
0001393C                            ; ===========================================================================
0001393C                            
0001393C                            See_ChkSide:
0001393C 7202                       		moveq	#2,d1
0001393E 43F8 D000                  		lea	(v_player).w,a1
00013942 3028 0008                  		move.w	obX(a0),d0
00013946 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
0001394A 6400                       		bcc.s	@leftside	; if yes, branch
0001394C 4440                       		neg.w	d0
0001394E 7200                       		moveq	#0,d1
00013950                            
00013950                            	@leftside:
00013950 0C40 0008                  		cmpi.w	#8,d0
00013954 6400                       		bcc.s	See_ChgFrame
00013956 7201                       		moveq	#1,d1
00013958                            
00013958                            See_ChgFrame:
00013958 1028 001A                  		move.b	obFrame(a0),d0
0001395C B001                       		cmp.b	d1,d0		; does frame need to change?
0001395E 6700                       		beq.s	@noflip		; if not, branch
00013960 6400                       		bcc.s	@loc_11772
00013962 5400                       		addq.b	#2,d0
00013964                            
00013964                            	@loc_11772:
00013964 5300                       		subq.b	#1,d0
00013966 1140 001A                  		move.b	d0,obFrame(a0)
0001396A 1141 003A                  		move.b	d1,see_frame(a0)
0001396E 08A8 0000 0001             		bclr	#0,obRender(a0)
00013974 0828 0001 001A             		btst	#1,obFrame(a0)
0001397A 6700                       		beq.s	@noflip
0001397C 08E8 0000 0001             		bset	#0,obRender(a0)
00013982                            
00013982                            	@noflip:
00013982 4E75                       		rts	
00013984                            ; ===========================================================================
00013984                            
00013984                            See_Spikeball:	; Routine 6
00013984 5428 0024                  		addq.b	#2,obRoutine(a0)
00013988 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013990 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013996 0028 0004 0001             		ori.b	#4,obRender(a0)
0001399C 117C 0004 0018             		move.b	#4,obPriority(a0)
000139A2 117C 008B 0020             		move.b	#$8B,obColType(a0)
000139A8 117C 000C 0014             		move.b	#$C,obActWid(a0)
000139AE 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000139B4 0668 0028 0008             		addi.w	#$28,obX(a0)
000139BA 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
000139C0 117C 0001 001A             		move.b	#1,obFrame(a0)
000139C6 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000139CC 6700                       		beq.s	See_MoveSpike	; if not, branch
000139CE 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
000139D4 117C 0002 003A             		move.b	#2,see_frame(a0)
000139DA                            
000139DA                            See_MoveSpike:	; Routine 8
000139DA 2268 003C                  		movea.l	see_parent(a0),a1
000139DE 7000                       		moveq	#0,d0
000139E0 1028 003A                  		move.b	see_frame(a0),d0
000139E4 9029 003A                  		sub.b	see_frame(a1),d0
000139E8 6700                       		beq.s	loc_1183E
000139EA 6400                       		bcc.s	loc_117FC
000139EC 4400                       		neg.b	d0
000139EE                            
000139EE                            loc_117FC:
000139EE 323C F7E8                  		move.w	#-$818,d1
000139F2 343C FEEC                  		move.w	#-$114,d2
000139F6 0C00 0001                  		cmpi.b	#1,d0
000139FA 6700                       		beq.s	loc_11822
000139FC 323C F510                  		move.w	#-$AF0,d1
00013A00 343C FF34                  		move.w	#-$CC,d2
00013A04 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013A0A 6D00                       		blt.s	loc_11822
00013A0C 323C F200                  		move.w	#-$E00,d1
00013A10 343C FF60                  		move.w	#-$A0,d2
00013A14                            
00013A14                            loc_11822:
00013A14 3141 0012                  		move.w	d1,obVelY(a0)
00013A18 3142 0010                  		move.w	d2,obVelX(a0)
00013A1C 3028 0008                  		move.w	obX(a0),d0
00013A20 9068 0030                  		sub.w	see_origX(a0),d0
00013A24 6400                       		bcc.s	loc_11838
00013A26 4468 0010                  		neg.w	obVelX(a0)
00013A2A                            
00013A2A                            loc_11838:
00013A2A 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A2E 6000                       		bra.s	See_SpikeFall
00013A30                            ; ===========================================================================
00013A30                            
00013A30                            loc_1183E:
00013A30 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A36 7000                       		moveq	#0,d0
00013A38 1029 001A                  		move.b	obFrame(a1),d0
00013A3C 343C 0028                  		move.w	#$28,d2
00013A40 3228 0008                  		move.w	obX(a0),d1
00013A44 9268 0030                  		sub.w	see_origX(a0),d1
00013A48 6400                       		bcc.s	loc_1185C
00013A4A 4442                       		neg.w	d2
00013A4C 5440                       		addq.w	#2,d0
00013A4E                            
00013A4E                            loc_1185C:
00013A4E D040                       		add.w	d0,d0
00013A50 3228 0034                  		move.w	see_origY(a0),d1
00013A54 D272 0000                  		add.w	(a2,d0.w),d1
00013A58 3141 000C                  		move.w	d1,obY(a0)
00013A5C D468 0030                  		add.w	see_origX(a0),d2
00013A60 3142 0008                  		move.w	d2,obX(a0)
00013A64 4268 000E                  		clr.w	obY+2(a0)
00013A68 4268 000A                  		clr.w	obX+2(a0)
00013A6C 4E75                       		rts	
00013A6E                            ; ===========================================================================
00013A6E                            
00013A6E                            See_SpikeFall:	; Routine $A
00013A6E 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013A72 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013A74 6100 BC80                  		bsr.w	ObjectFall
00013A78 3028 0034                  		move.w	see_origY(a0),d0
00013A7C 0440 002F                  		subi.w	#$2F,d0
00013A80 B068 000C                  		cmp.w	obY(a0),d0
00013A84 6E00                       		bgt.s	locret_11898
00013A86 6100 BC6E                  		bsr.w	ObjectFall
00013A8A                            
00013A8A                            locret_11898:
00013A8A 4E75                       		rts	
00013A8C                            ; ===========================================================================
00013A8C                            
00013A8C                            loc_1189A:
00013A8C 6100 BC68                  		bsr.w	ObjectFall
00013A90 2268 003C                  		movea.l	see_parent(a0),a1
00013A94 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A9A 7000                       		moveq	#0,d0
00013A9C 1029 001A                  		move.b	obFrame(a1),d0
00013AA0 3228 0008                  		move.w	obX(a0),d1
00013AA4 9268 0030                  		sub.w	see_origX(a0),d1
00013AA8 6400                       		bcc.s	loc_118BA
00013AAA 5440                       		addq.w	#2,d0
00013AAC                            
00013AAC                            loc_118BA:
00013AAC D040                       		add.w	d0,d0
00013AAE 3228 0034                  		move.w	see_origY(a0),d1
00013AB2 D272 0000                  		add.w	(a2,d0.w),d1
00013AB6 B268 000C                  		cmp.w	obY(a0),d1
00013ABA 6E00                       		bgt.s	locret_11938
00013ABC 2268 003C                  		movea.l	see_parent(a0),a1
00013AC0 7202                       		moveq	#2,d1
00013AC2 4A68 0010                  		tst.w	obVelX(a0)
00013AC6 6B00                       		bmi.s	See_Spring
00013AC8 7200                       		moveq	#0,d1
00013ACA                            
00013ACA                            See_Spring:
00013ACA 1341 003A                  		move.b	d1,$3A(a1)
00013ACE 1141 003A                  		move.b	d1,see_frame(a0)
00013AD2 B229 001A                  		cmp.b	obFrame(a1),d1
00013AD6 6700                       		beq.s	loc_1192C
00013AD8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013ADE 6700                       		beq.s	loc_1192C
00013AE0 4229 0025                  		clr.b	ob2ndRout(a1)
00013AE4 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013AEA 45F8 D000                  		lea	(v_player).w,a2
00013AEE 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013AF4 446A 0012                  		neg.w	obVelY(a2)
00013AF8 08EA 0001 0022             		bset	#1,obStatus(a2)
00013AFE 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013B04 422A 003C                  		clr.b	$3C(a2)
00013B08 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013B0E 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013B1E                            
00013B1E                            loc_1192C:
00013B1E 4268 0010                  		clr.w	obVelX(a0)
00013B22 4268 0012                  		clr.w	obVelY(a0)
00013B26 5528 0024                  		subq.b	#2,obRoutine(a0)
00013B2A                            
00013B2A                            locret_11938:
00013B2A 4E75                       		rts	
00013B2C                            ; ===========================================================================
00013B2C FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013B36                            
00013B36                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013B66                            		even
00013B66                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013B96                            		even
00013B96                            		even
00013B96                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013B96                            ; ---------------------------------------------------------------------------
00013B96                            ; Sprite mappings - seesaws (SLZ)
00013B96                            ; ---------------------------------------------------------------------------
00013B96                            Map_Seesaw_internal:
00013B96 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B98 0000                       		dc.w @flat-Map_Seesaw_internal
00013B9A 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B9C 0000                       		dc.w @flat-Map_Seesaw_internal
00013B9E 07                         @sloping:	dc.b 7
00013B9F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013BA4 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013BA9 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013BAE EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013BB3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013BB8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013BBD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013BC2 04                         @flat:		dc.b 4
00013BC3 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013BC8 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013BCD E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013BD2 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013BD8 00                         		even
00013BD8 00                         		even
00013BD8                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013BD8                            ; ---------------------------------------------------------------------------
00013BD8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013BD8                            ; ---------------------------------------------------------------------------
00013BD8                            Map_SSawBall_internal:
00013BD8 0000                       		dc.w @red-Map_SSawBall_internal
00013BDA 0000                       		dc.w @silver-Map_SSawBall_internal
00013BDC 01                         @red:		dc.b 1
00013BDD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013BE2 01                         @silver:	dc.b 1
00013BE3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013BE8                            		even
00013BE8                            		even
00013BE8                            		include	"_incObj\5F Bomb Enemy.asm"
00013BE8                            ; ---------------------------------------------------------------------------
00013BE8                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013BE8                            ; ---------------------------------------------------------------------------
00013BE8                            
00013BE8                            Bomb:
00013BE8 7000                       		moveq	#0,d0
00013BEA 1028 0024                  		move.b	obRoutine(a0),d0
00013BEE 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013BF2 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013BF6                            ; ===========================================================================
00013BF6 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013BF8 0000                       		dc.w Bom_Action-Bom_Index
00013BFA 0000                       		dc.w Bom_Display-Bom_Index
00013BFC 0000                       		dc.w Bom_End-Bom_Index
00013BFE                            
00013BFE =00000030                  bom_time:	equ $30		; time of fuse
00013BFE =00000034                  bom_origY:	equ $34		; original y-axis position
00013BFE =0000003C                  bom_parent:	equ $3C		; address of parent object
00013BFE                            ; ===========================================================================
00013BFE                            
00013BFE                            Bom_Main:	; Routine 0
00013BFE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C02 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013C0A 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013C10 0028 0004 0001             		ori.b	#4,obRender(a0)
00013C16 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013C1C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013C22 1028 0028                  		move.b	obSubtype(a0),d0
00013C26 6700                       		beq.s	loc_11A3C
00013C28 1140 0024                  		move.b	d0,obRoutine(a0)
00013C2C 4E75                       		rts	
00013C2E                            ; ===========================================================================
00013C2E                            
00013C2E                            loc_11A3C:
00013C2E 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013C34 0868 0000 0022             		bchg	#0,obStatus(a0)
00013C3A                            
00013C3A                            Bom_Action:	; Routine 2
00013C3A 7000                       		moveq	#0,d0
00013C3C 1028 0025                  		move.b	ob2ndRout(a0),d0
00013C40 323B 0000                  		move.w	@index(pc,d0.w),d1
00013C44 4EBB 1000                  		jsr	@index(pc,d1.w)
00013C48 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013C4E 6100 8BB4                  		bsr.w	AnimateSprite
00013C52 6000 DA78                  		bra.w	RememberState
00013C56                            ; ===========================================================================
00013C56 0000                       @index:		dc.w @walk-@index
00013C58 0000                       		dc.w @wait-@index
00013C5A 0000                       		dc.w @explode-@index
00013C5C                            ; ===========================================================================
00013C5C                            
00013C5C                            @walk:
00013C5C 6100 0000                  		bsr.w	@chksonic
00013C60 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C64 6A00                       		bpl.s	@noflip		; if time remains, branch
00013C66 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013C6A 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013C70 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013C76 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013C7C 0868 0000 0022             		bchg	#0,obStatus(a0)
00013C82 6700                       		beq.s	@noflip
00013C84 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013C88                            
00013C88                            	@noflip:
00013C88 4E75                       		rts	
00013C8A                            ; ===========================================================================
00013C8A                            
00013C8A                            @wait:
00013C8A 6100 0000                  		bsr.w	@chksonic
00013C8E 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C92 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013C94 6100 BA98                  		bsr.w	SpeedToPos
00013C98 4E75                       		rts	
00013C9A                            ; ===========================================================================
00013C9A                            
00013C9A                            	@stopwalking:
00013C9A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013C9E 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013CA4 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013CA8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013CAE 4E75                       		rts	
00013CB0                            ; ===========================================================================
00013CB0                            
00013CB0                            @explode:
00013CB0 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013CB4 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013CB6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013CBA 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013CC0                            
00013CC0                            	@noexplode:
00013CC0 4E75                       		rts	
00013CC2                            ; ===========================================================================
00013CC2                            
00013CC2                            @chksonic:
00013CC2 3038 D008                  		move.w	(v_player+obX).w,d0
00013CC6 9068 0008                  		sub.w	obX(a0),d0
00013CCA 6400                       		bcc.s	@isleft
00013CCC 4440                       		neg.w	d0
00013CCE                            
00013CCE                            	@isleft:
00013CCE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013CD2 6400                       		bcc.s	@outofrange	; if not, branch
00013CD4 3038 D00C                  		move.w	(v_player+obY).w,d0
00013CD8 9068 000C                  		sub.w	obY(a0),d0
00013CDC 6400                       		bcc.s	@isabove
00013CDE 4440                       		neg.w	d0
00013CE0                            
00013CE0                            	@isabove:
00013CE0 0C40 0060                  		cmpi.w	#$60,d0
00013CE4 6400                       		bcc.s	@outofrange
00013CE6 4A78 FE08                  		tst.w	(v_debuguse).w
00013CEA 6600                       		bne.s	@outofrange
00013CEC                            
00013CEC 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013CF2 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013CF8 4268 0010                  		clr.w	obVelX(a0)
00013CFC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013D02 6100 BEE0                  		bsr.w	FindNextFreeObj
00013D06 6600                       		bne.s	@outofrange
00013D08 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013D0C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D12 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D18 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013D1E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013D24 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013D2A 137C 0003 001C             		move.b	#3,obAnim(a1)
00013D30 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013D36 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013D3C 6700                       		beq.s	@normal		; if not, branch
00013D3E 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013D42                            
00013D42                            	@normal:
00013D42 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013D48 2348 003C                  		move.l	a0,bom_parent(a1)
00013D4C                            
00013D4C                            @outofrange:
00013D4C 4E75                       		rts	
00013D4E                            ; ===========================================================================
00013D4E                            
00013D4E                            Bom_Display:	; Routine 4
00013D4E 6100                       		bsr.s	loc_11B70
00013D50 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D56 6100 8AAC                  		bsr.w	AnimateSprite
00013D5A 6000 D970                  		bra.w	RememberState
00013D5E                            ; ===========================================================================
00013D5E                            
00013D5E                            loc_11B70:
00013D5E 5368 0030                  		subq.w	#1,bom_time(a0)
00013D62 6B00                       		bmi.s	loc_11B7C
00013D64 6100 B9C8                  		bsr.w	SpeedToPos
00013D68 4E75                       		rts	
00013D6A                            ; ===========================================================================
00013D6A                            
00013D6A                            loc_11B7C:
00013D6A 4268 0030                  		clr.w	bom_time(a0)
00013D6E 4228 0024                  		clr.b	obRoutine(a0)
00013D72 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013D78 7203                       		moveq	#3,d1
00013D7A 2248                       		movea.l	a0,a1
00013D7C 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013D82 6000                       		bra.s	@makeshrapnel
00013D84                            ; ===========================================================================
00013D84                            
00013D84                            	@loop:
00013D84 6100 BE5E                  		bsr.w	FindNextFreeObj
00013D88 6600                       		bne.s	@fail
00013D8A                            
00013D8A                            @makeshrapnel:
00013D8A 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013D8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D94 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D9A 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013DA0 137C 0004 001C             		move.b	#4,obAnim(a1)
00013DA6 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013DAA 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013DAE 137C 0098 0020             		move.b	#$98,obColType(a1)
00013DB4 08E9 0007 0001             		bset	#7,obRender(a1)
00013DBA                            
00013DBA                            	@fail:
00013DBA 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013DBE                            
00013DBE 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013DC4                            
00013DC4                            Bom_End:	; Routine 6
00013DC4 6100 B968                  		bsr.w	SpeedToPos
00013DC8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013DCE 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013DD4 6100 8A2E                  		bsr.w	AnimateSprite
00013DD8 4A28 0001                  		tst.b	obRender(a0)
00013DDC 6A00 B9A4                  		bpl.w	DeleteObject
00013DE0 6000 B960                  		bra.w	DisplaySprite
00013DE4                            ; ===========================================================================
00013DE4 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013DE4 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013DF4                            		include	"_anim\Bomb Enemy.asm"
00013DF4                            ; ---------------------------------------------------------------------------
00013DF4                            ; Animation script - Bomb enemy
00013DF4                            ; ---------------------------------------------------------------------------
00013DF4 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013DF6 0000                       		dc.w @walk-Ani_Bomb
00013DF8 0000                       		dc.w @activated-Ani_Bomb
00013DFA 0000                       		dc.w @fuse-Ani_Bomb
00013DFC 0000                       		dc.w @shrapnel-Ani_Bomb
00013DFE 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013E02 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013E08 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013E0C 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013E10 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013E14                            		even
00013E14                            		even
00013E14                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013E14                            ; ---------------------------------------------------------------------------
00013E14                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013E14                            ; ---------------------------------------------------------------------------
00013E14                            Map_Bomb_internal:
00013E14 0000                       		dc.w @stand1-Map_Bomb_internal
00013E16 0000                       		dc.w @stand2-Map_Bomb_internal
00013E18 0000                       		dc.w @walk1-Map_Bomb_internal
00013E1A 0000                       		dc.w @walk2-Map_Bomb_internal
00013E1C 0000                       		dc.w @walk3-Map_Bomb_internal
00013E1E 0000                       		dc.w @walk4-Map_Bomb_internal
00013E20 0000                       		dc.w @activate1-Map_Bomb_internal
00013E22 0000                       		dc.w @activate2-Map_Bomb_internal
00013E24 0000                       		dc.w @fuse1-Map_Bomb_internal
00013E26 0000                       		dc.w @fuse2-Map_Bomb_internal
00013E28 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013E2A 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013E2C 03                         @stand1:	dc.b 3
00013E2D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013E32 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E37 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E3C 03                         @stand2:	dc.b 3
00013E3D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E42 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E47 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E4C 03                         @walk1:		dc.b 3
00013E4D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013E52 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013E57 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013E5C 03                         @walk2:		dc.b 3
00013E5D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E62 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013E67 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E6C 03                         @walk3:		dc.b 3
00013E6D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013E72 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013E77 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013E7C 03                         @walk4:		dc.b 3
00013E7D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E82 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013E87 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E8C 02                         @activate1:	dc.b 2
00013E8D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013E92 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E97 02                         @activate2:	dc.b 2
00013E98 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E9D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013EA2 01                         @fuse1:		dc.b 1
00013EA3 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013EA8 01                         @fuse2:		dc.b 1
00013EA9 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013EAE 01                         @shrapnel1:	dc.b 1
00013EAF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013EB4 01                         @shrapnel2:	dc.b 1
00013EB5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013EBA                            		even
00013EBA                            		even
00013EBA                            
00013EBA                            		include	"_incObj\60 Orbinaut.asm"
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            
00013EBA                            Orbinaut:
00013EBA 7000                       		moveq	#0,d0
00013EBC 1028 0024                  		move.b	obRoutine(a0),d0
00013EC0 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013EC4 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013EC8                            ; ===========================================================================
00013EC8 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013ECA 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013ECC 0000                       		dc.w Orb_Display-Orb_Index
00013ECE 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013ED0 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013ED2                            
00013ED2 =0000003C                  orb_parent:	equ $3C		; address of parent object
00013ED2                            ; ===========================================================================
00013ED2                            
00013ED2                            Orb_Main:	; Routine 0
00013ED2 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013EDA 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013EE0 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013EE6 6700                       		beq.s	@isscrap
00013EE8 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013EEE                            
00013EEE                            	@isscrap:
00013EEE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013EF4 6600                       		bne.s	@notlabyrinth
00013EF6 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013EFC                            
00013EFC                            	@notlabyrinth:
00013EFC 0028 0004 0001             		ori.b	#4,obRender(a0)
00013F02 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013F08 117C 000B 0020             		move.b	#$B,obColType(a0)
00013F0E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013F14 7400                       		moveq	#0,d2
00013F16 45E8 0037                  		lea	$37(a0),a2
00013F1A 264A                       		movea.l	a2,a3
00013F1C 524A                       		addq.w	#1,a2
00013F1E 7203                       		moveq	#3,d1
00013F20                            
00013F20                            @makesatellites:
00013F20 6100 BCC2                  		bsr.w	FindNextFreeObj
00013F24 6600                       		bne.s	@fail
00013F26 5213                       		addq.b	#1,(a3)
00013F28 3A09                       		move.w	a1,d5
00013F2A 0445 D000                  		subi.w	#$D000,d5
00013F2E EC4D                       		lsr.w	#6,d5
00013F30 0245 007F                  		andi.w	#$7F,d5
00013F34 14C5                       		move.b	d5,(a2)+
00013F36 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013F38 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013F3E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013F44 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013F4A 0029 0004 0001             		ori.b	#4,obRender(a1)
00013F50 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013F56 137C 0008 0014             		move.b	#8,obActWid(a1)
00013F5C 137C 0003 001A             		move.b	#3,obFrame(a1)
00013F62 137C 0098 0020             		move.b	#$98,obColType(a1)
00013F68 1342 0026                  		move.b	d2,obAngle(a1)
00013F6C 0602 0040                  		addi.b	#$40,d2
00013F70 2348 003C                  		move.l	a0,orb_parent(a1)
00013F74 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013F78                            
00013F78                            	@fail:
00013F78 7001                       		moveq	#1,d0
00013F7A 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013F80 6700                       		beq.s	@noflip		; if not, branch
00013F82 4440                       		neg.w	d0
00013F84                            
00013F84                            	@noflip:
00013F84 1140 0036                  		move.b	d0,$36(a0)
00013F88 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013F8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F92 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013F98 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013F9E 6700                       		beq.s	@noflip2	; if not, branch
00013FA0 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013FA4                            
00013FA4                            	@noflip2:
00013FA4 4E75                       		rts	
00013FA6                            ; ===========================================================================
00013FA6                            
00013FA6                            Orb_ChkSonic:	; Routine 2
00013FA6 3038 D008                  		move.w	(v_player+obX).w,d0
00013FAA 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013FAE 6400                       		bcc.s	@isright	; if yes, branch
00013FB0 4440                       		neg.w	d0
00013FB2                            
00013FB2                            	@isright:
00013FB2 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013FB6 6400                       		bcc.s	@animate	; if not, branch
00013FB8 3038 D00C                  		move.w	(v_player+obY).w,d0
00013FBC 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013FC0 6400                       		bcc.s	@isabove	; if yes, branch
00013FC2 4440                       		neg.w	d0
00013FC4                            
00013FC4                            	@isabove:
00013FC4 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013FC8 6400                       		bcc.s	@animate	; if not, branch
00013FCA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013FCE 6600                       		bne.s	@animate	; if yes, branch
00013FD0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013FD6                            
00013FD6                            @animate:
00013FD6 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013FDC 6100 8826                  		bsr.w	AnimateSprite
00013FE0 6000 0000                  		bra.w	Orb_ChkDel
00013FE4                            ; ===========================================================================
00013FE4                            
00013FE4                            Orb_Display:	; Routine 4
00013FE4 6100 B748                  		bsr.w	SpeedToPos
00013FE8                            
00013FE8                            Orb_ChkDel:
00014006 6000 B73A                  		bra.w	DisplaySprite
0001400A                            
0001400A                            @chkgone:
0001400A 45F8 FC00                  		lea	(v_objstate).w,a2
0001400E 7000                       		moveq	#0,d0
00014010 1028 0023                  		move.b	obRespawnNo(a0),d0
00014014 6700                       		beq.s	loc_11E34
00014016 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001401C                            
0001401C                            loc_11E34:
0001401C 45E8 0037                  		lea	$37(a0),a2
00014020 7400                       		moveq	#0,d2
00014022 141A                       		move.b	(a2)+,d2
00014024 5342                       		subq.w	#1,d2
00014026 6500                       		bcs.s	Orb_Delete
00014028                            
00014028                            loc_11E40:
00014028 7000                       		moveq	#0,d0
0001402A 101A                       		move.b	(a2)+,d0
0001402C ED48                       		lsl.w	#6,d0
0001402E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014034 2240                       		movea.l	d0,a1
00014036 6100 B74C                  		bsr.w	DeleteChild
0001403A 51CA FFEC                  		dbf	d2,loc_11E40
0001403E                            
0001403E                            Orb_Delete:
0001403E 6000 B742                  		bra.w	DeleteObject
00014042                            ; ===========================================================================
00014042                            
00014042                            Orb_MoveOrb:	; Routine 6
00014042 2268 003C                  		movea.l	orb_parent(a0),a1
00014046 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001404A 6600 B736                  		bne.w	DeleteObject	; if not, delete
0001404E 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014054 6600                       		bne.s	@circle		; if not, branch
00014056 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001405C 6600                       		bne.s	@circle		; if not, branch
0001405E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014062 5329 0037                  		subq.b	#1,$37(a1)
00014066 6600                       		bne.s	@fire
00014068 5429 0024                  		addq.b	#2,obRoutine(a1)
0001406C                            
0001406C                            	@fire:
0001406C 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014072 0829 0000 0022             		btst	#0,obStatus(a1)
00014078 6700                       		beq.s	@noflip
0001407A 4468 0010                  		neg.w	obVelX(a0)
0001407E                            
0001407E                            	@noflip:
0001407E 6000 B6C2                  		bra.w	DisplaySprite
00014082                            ; ===========================================================================
00014082                            
00014082                            @circle:
00014082 1028 0026                  		move.b	obAngle(a0),d0
00014086 4EB9 0000 37AE             		jsr	(CalcSine).l
0001408C E841                       		asr.w	#4,d1
0001408E D269 0008                  		add.w	obX(a1),d1
00014092 3141 0008                  		move.w	d1,obX(a0)
00014096 E840                       		asr.w	#4,d0
00014098 D069 000C                  		add.w	obY(a1),d0
0001409C 3140 000C                  		move.w	d0,obY(a0)
000140A0 1029 0036                  		move.b	$36(a1),d0
000140A4 D128 0026                  		add.b	d0,obAngle(a0)
000140A8 6000 B698                  		bra.w	DisplaySprite
000140AC                            ; ===========================================================================
000140AC                            
000140AC                            Orb_ChkDel2:	; Routine 8
000140AC 6100 B680                  		bsr.w	SpeedToPos
000140B0 4A28 0001                  		tst.b	obRender(a0)
000140B4 6A00 B6CC                  		bpl.w	DeleteObject
000140B8 6000 B688                  		bra.w	DisplaySprite
000140B8 6000 B688                  		bra.w	DisplaySprite
000140BC                            		include	"_anim\Orbinaut.asm"
000140BC                            ; ---------------------------------------------------------------------------
000140BC                            ; Animation script - Orbinaut enemy
000140BC                            ; ---------------------------------------------------------------------------
000140BC 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000140BE 0000                       		dc.w @angers-Ani_Orb
000140C0 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000140C4 00                         		even
000140C4 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000140CA 00                         		even
000140CA 00                         		even
000140CA                            Map_Orb:	include	"_maps\Orbinaut.asm"
000140CA                            ; ---------------------------------------------------------------------------
000140CA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000140CA                            ; ---------------------------------------------------------------------------
000140CA                            Map_Orb_internal:
000140CA 0000                       		dc.w @normal-Map_Orb_internal
000140CC 0000                       		dc.w @medium-Map_Orb_internal
000140CE 0000                       		dc.w @angry-Map_Orb_internal
000140D0 0000                       		dc.w @spikeball-Map_Orb_internal
000140D2 01                         @normal:	dc.b 1
000140D3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000140D8 01                         @medium:	dc.b 1
000140D9 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000140DE 01                         @angry:		dc.b 1
000140DF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000140E4 01                         @spikeball:	dc.b 1
000140E5 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000140EA                            		even
000140EA                            		even
000140EA                            
000140EA                            		include	"_incObj\16 Harpoon.asm"
000140EA                            ; ---------------------------------------------------------------------------
000140EA                            ; Object 16 - harpoon (LZ)
000140EA                            ; ---------------------------------------------------------------------------
000140EA                            
000140EA                            Harpoon:
000140EA 7000                       		moveq	#0,d0
000140EC 1028 0024                  		move.b	obRoutine(a0),d0
000140F0 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000140F4 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000140F8                            ; ===========================================================================
000140F8 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000140FA 0000                       		dc.w Harp_Move-Harp_Index
000140FC 0000                       		dc.w Harp_Wait-Harp_Index
000140FE                            
000140FE =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000140FE                            ; ===========================================================================
000140FE                            
000140FE                            Harp_Main:	; Routine 0
000140FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00014102 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
0001410A 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014110 0028 0004 0001             		ori.b	#4,obRender(a0)
00014116 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001411C 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014122 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014128 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
0001412E                            
0001412E                            Harp_Move:	; Routine 2
0001412E 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014134 6100 86CE                  		bsr.w	AnimateSprite
00014138 7000                       		moveq	#0,d0
0001413A 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
0001413E 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014144 6000 D586                  		bra.w	RememberState
00014148                            
00014148                            	@types:
00014148 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001414E                            		even
0001414E                            
0001414E                            Harp_Wait:	; Routine 4
0001414E 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014152 6A00                       		bpl.s	@chkdel		; branch if time remains
00014154 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001415A 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
0001415E 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014164                            
00014164                            	@chkdel:
00014164 6000 D566                  		bra.w	RememberState
00014164 6000 D566                  		bra.w	RememberState
00014168                            		include	"_anim\Harpoon.asm"
00014168                            ; ---------------------------------------------------------------------------
00014168                            ; Animation script - harpoon (LZ)
00014168                            ; ---------------------------------------------------------------------------
00014168 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001416A 0000                       		dc.w @h_retracting-Ani_Harp
0001416C 0000                       		dc.w @v_extending-Ani_Harp
0001416E 0000                       		dc.w @v_retracting-Ani_Harp
00014170 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014174 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00014178 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001417C 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014180                            		even
00014180                            		even
00014180                            Map_Harp:	include	"_maps\Harpoon.asm"
00014180                            ; --------------------------------------------------------------------------------
00014180                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014180                            ; --------------------------------------------------------------------------------
00014180                            
00014180                            SME_JPFHb:	
00014180 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00014184 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
00014188 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
0001418C 01                         SME_JPFHb_C:	dc.b 1	
0001418D FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00014192 01                         SME_JPFHb_12:	dc.b 1	
00014193 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
00014198 02                         SME_JPFHb_18:	dc.b 2	
00014199 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
0001419E FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
000141A3 01                         SME_JPFHb_23:	dc.b 1	
000141A4 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
000141A9 01                         SME_JPFHb_29:	dc.b 1	
000141AA E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
000141AF 02                         SME_JPFHb_2F:	dc.b 2	
000141B0 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
000141B5 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
000141BA                            		even
000141BA                            		even
000141BA                            		include	"_incObj\61 LZ Blocks.asm"
000141BA                            ; ---------------------------------------------------------------------------
000141BA                            ; Object 61 - blocks (LZ)
000141BA                            ; ---------------------------------------------------------------------------
000141BA                            
000141BA                            LabyrinthBlock:
000141BA 7000                       		moveq	#0,d0
000141BC 1028 0024                  		move.b	obRoutine(a0),d0
000141C0 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000141C4 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000141C8                            ; ===========================================================================
000141C8 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000141CA 0000                       		dc.w LBlk_Action-LBlk_Index
000141CC                            
000141CC 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000141CE 200C                       		dc.b $20, $C
000141D0 1010                       		dc.b $10, $10
000141D2 1010                       		dc.b $10, $10
000141D4                            
000141D4 =00000016                  lblk_height:	equ $16		; block height
000141D4 =00000034                  lblk_origX:	equ $34		; original x-axis position
000141D4 =00000030                  lblk_origY:	equ $30		; original y-axis position
000141D4 =00000036                  lblk_time:	equ $36		; time delay for block movement
000141D4 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000141D4                            ; ===========================================================================
000141D4                            
000141D4                            LBlk_Main:	; Routine 0
000141D4 5428 0024                  		addq.b	#2,obRoutine(a0)
000141D8 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000141E0 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000141E6 117C 0004 0001             		move.b	#4,obRender(a0)
000141EC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000141F2 7000                       		moveq	#0,d0
000141F4 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000141F8 E648                       		lsr.w	#3,d0		; read only the 1st digit
000141FA 0240 000E                  		andi.w	#$E,d0
000141FE 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014202 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014206 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
0001420A E248                       		lsr.w	#1,d0
0001420C 1140 001A                  		move.b	d0,obFrame(a0)
00014210 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014216 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
0001421C 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014220 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014224 6700                       		beq.s	LBlk_Action	; branch if 0
00014226 0C00 0007                  		cmpi.b	#7,d0
0001422A 6700                       		beq.s	LBlk_Action	; branch if 7
0001422C 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014232                            
00014232                            LBlk_Action:	; Routine 2
00014232 3F28 0008                  		move.w	obX(a0),-(sp)
00014236 7000                       		moveq	#0,d0
00014238 1028 0028                  		move.b	obSubtype(a0),d0
0001423C 0240 000F                  		andi.w	#$F,d0
00014240 D040                       		add.w	d0,d0
00014242 323B 0000                  		move.w	@index(pc,d0.w),d1
00014246 4EBB 1000                  		jsr	@index(pc,d1.w)
0001424A 381F                       		move.w	(sp)+,d4
0001424C 4A28 0001                  		tst.b	obRender(a0)
00014250 6A00                       		bpl.s	@chkdel
00014252 7200                       		moveq	#0,d1
00014254 1228 0014                  		move.b	obActWid(a0),d1
00014258 0641 000B                  		addi.w	#$B,d1
0001425C 7400                       		moveq	#0,d2
0001425E 1428 0016                  		move.b	lblk_height(a0),d2
00014262 3602                       		move.w	d2,d3
00014264 5243                       		addq.w	#1,d3
00014266 6100 D8FC                  		bsr.w	SolidObject
0001426A 1144 003F                  		move.b	d4,$3F(a0)
0001426E 6100 0000                  		bsr.w	loc_12180
00014272                            
00014272                            @chkdel:
00014290 6000 B4B0                  		bra.w	DisplaySprite
00014294                            ; ===========================================================================
00014294 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014298 0000 0000                  		dc.w @type02-@index, @type03-@index
0001429C 0000 0000                  		dc.w @type04-@index, @type05-@index
000142A0 0000 0000                  		dc.w @type06-@index, @type07-@index
000142A4                            ; ===========================================================================
000142A4                            
000142A4                            @type00:
000142A4 4E75                       		rts	
000142A6                            ; ===========================================================================
000142A6                            
000142A6                            @type01:
000142A6                            @type03:
000142A6 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000142AA 6600                       		bne.s	@wait01		; if yes, branch
000142AC 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000142B2 6700                       		beq.s	@donothing01	; if not, branch
000142B4 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000142BA                            
000142BA                            	@donothing01:
000142BA 4E75                       		rts	
000142BC                            ; ===========================================================================
000142BC                            
000142BC                            	@wait01:
000142BC 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000142C0 66F8                       		bne.s	@donothing01	; if time remains, branch
000142C2 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000142C6 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000142CA 4E75                       		rts	
000142CC                            ; ===========================================================================
000142CC                            
000142CC                            @type02:
000142CC                            @type06:
000142CC 6100 B460                  		bsr.w	SpeedToPos
000142D0 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000142D4 6100 0000                  		bsr.w	ObjFloorDist
000142D8 4A41                       		tst.w	d1		; has block hit the floor?
000142DA 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000142DE 5241                       		addq.w	#1,d1
000142E0 D368 000C                  		add.w	d1,obY(a0)
000142E4 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000142E8 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000142EC                            
000142EC                            	@nofloor02:
000142EC 4E75                       		rts	
000142EE                            ; ===========================================================================
000142EE                            
000142EE                            @type04:
000142EE 6100 B43E                  		bsr.w	SpeedToPos
000142F2 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000142F6 6100 0000                  		bsr.w	ObjHitCeiling
000142FA 4A41                       		tst.w	d1		; has block hit the ceiling?
000142FC 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014300 9368 000C                  		sub.w	d1,obY(a0)
00014304 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014308 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001430C                            
0001430C                            	@noceiling04:
0001430C 4E75                       		rts	
0001430E                            ; ===========================================================================
0001430E                            
0001430E                            @type05:
0001430E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00014314 6600                       		bne.s	@notouch05	; if not, branch
00014316 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
0001431A 4228 0038                  		clr.b	lblk_untouched(a0)
0001431E                            
0001431E                            	@notouch05:
0001431E 4E75                       		rts	
00014320                            ; ===========================================================================
00014320                            
00014320                            @type07:
00014320 3038 F646                  		move.w	(v_waterpos1).w,d0
00014324 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014328 6700                       		beq.s	@stop07		; if yes, branch
0001432A 6400                       		bcc.s	@fall07		; branch if block is above water
0001432C 0C40 FFFE                  		cmpi.w	#-2,d0
00014330 6C00                       		bge.s	@loc_1214E
00014332 70FE                       		moveq	#-2,d0
00014334                            
00014334                            	@loc_1214E:
00014334 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014338 6100 0000                  		bsr.w	ObjHitCeiling
0001433C 4A41                       		tst.w	d1		; has block hit the ceiling?
0001433E 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014342 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014346                            
00014346                            	@noceiling07:
00014346 4E75                       		rts	
00014348                            ; ===========================================================================
00014348                            
00014348                            @fall07:
00014348 0C40 0002                  		cmpi.w	#2,d0
0001434C 6F00                       		ble.s	@loc_1216A
0001434E 7002                       		moveq	#2,d0
00014350                            
00014350                            	@loc_1216A:
00014350 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014354 6100 0000                  		bsr.w	ObjFloorDist
00014358 4A41                       		tst.w	d1
0001435A 6A00 0000                  		bpl.w	@stop07
0001435E 5241                       		addq.w	#1,d1
00014360 D368 000C                  		add.w	d1,obY(a0)
00014364                            
00014364                            	@stop07:
00014364 4E75                       		rts	
00014366                            ; ===========================================================================
00014366                            
00014366                            loc_12180:
00014366 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001436A 6700                       		beq.s	locret_121C0	; if yes, branch
0001436C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014372 6600                       		bne.s	loc_1219A	; if yes, branch
00014374 4A28 003E                  		tst.b	$3E(a0)
00014378 6700                       		beq.s	locret_121C0
0001437A 5928 003E                  		subq.b	#4,$3E(a0)
0001437E 6000                       		bra.s	loc_121A6
00014380                            ; ===========================================================================
00014380                            
00014380                            loc_1219A:
00014380 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014386 6700                       		beq.s	locret_121C0
00014388 5828 003E                  		addq.b	#4,$3E(a0)
0001438C                            
0001438C                            loc_121A6:
0001438C 1028 003E                  		move.b	$3E(a0),d0
00014390 4EB9 0000 37AE             		jsr	(CalcSine).l
00014396 323C 0400                  		move.w	#$400,d1
0001439A C1C1                       		muls.w	d1,d0
0001439C 4840                       		swap	d0
0001439E D068 0030                  		add.w	lblk_origY(a0),d0
000143A2 3140 000C                  		move.w	d0,obY(a0)
000143A6                            
000143A6                            locret_121C0:
000143A6 4E75                       		rts	
000143A6 4E75                       		rts	
000143A8                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000143A8                            Map_6865:
000143A8 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000143AA 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000143AC 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000143AE 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000143B0 01                         Map_6865_8: 	dc.b $1
000143B1 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000143B6 02                         Map_6865_E: 	dc.b $2
000143B7 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000143BC F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000143C1 01                         Map_6865_19: 	dc.b $1
000143C2 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000143C7 01                         Map_6865_1F: 	dc.b $1
000143C8 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000143CE 00                         	even
000143CE 00                         	even
000143CE                            		include	"_incObj\62 Gargoyle.asm"
000143CE                            ; ---------------------------------------------------------------------------
000143CE                            ; Object 62 - gargoyle head (LZ)
000143CE                            ; ---------------------------------------------------------------------------
000143CE                            
000143CE                            Gargoyle:
000143CE 7000                       		moveq	#0,d0
000143D0 1028 0024                  		move.b	obRoutine(a0),d0
000143D4 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000143D8 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000143DC 6000 D2EE                  		bra.w	RememberState
000143E0                            ; ===========================================================================
000143E0 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000143E2 0000                       		dc.w Gar_MakeFire-Gar_Index
000143E4 0000                       		dc.w Gar_FireBall-Gar_Index
000143E6 0000                       		dc.w Gar_AniFire-Gar_Index
000143E8                            
000143E8 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000143F0                            ; ===========================================================================
000143F0                            
000143F0                            Gar_Main:	; Routine 0
000143F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000143F4 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000143FC 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014402 0028 0004 0001             		ori.b	#4,obRender(a0)
00014408 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001440E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014414 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014418 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001441C 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014422 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014428 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001442E                            
0001442E                            Gar_MakeFire:	; Routine 2
0001442E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014432 6600                       		bne.s	@nofire		; if time remains, branch
00014434                            
00014434 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001443A 6100 B586                  		bsr.w	ChkObjectVisible
0001443E 6600                       		bne.s	@nofire
00014440 6100 B78C                  		bsr.w	FindFreeObj
00014444 6600                       		bne.s	@nofire
00014446 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001444A 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
0001444E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014454 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001445A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014460 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014466                            
00014466                            	@nofire:
00014466 4E75                       		rts	
00014468                            ; ===========================================================================
00014468                            
00014468                            Gar_FireBall:	; Routine 4
00014468 5428 0024                  		addq.b	#2,obRoutine(a0)
0001446C 117C 0008 0016             		move.b	#8,obHeight(a0)
00014472 117C 0008 0017             		move.b	#8,obWidth(a0)
00014478 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014480 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014486 0028 0004 0001             		ori.b	#4,obRender(a0)
0001448C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014492 117C 0098 0020             		move.b	#$98,obColType(a0)
00014498 117C 0008 0014             		move.b	#8,obActWid(a0)
0001449E 117C 0002 001A             		move.b	#2,obFrame(a0)
000144A4 5068 000C                  		addq.w	#8,obY(a0)
000144A8 317C 0200 0010             		move.w	#$200,obVelX(a0)
000144AE 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000144B4 6600                       		bne.s	@noflip		; if not, branch
000144B6 4468 0010                  		neg.w	obVelX(a0)
000144BA                            
000144BA                            	@noflip:
000144C4                            
000144C4                            Gar_AniFire:	; Routine 6
000144C4 1038 FE05                  		move.b	(v_framebyte).w,d0
000144C8 0200 0007                  		andi.b	#7,d0
000144CC 6600                       		bne.s	@nochg
000144CE 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000144D4                            
000144D4                            	@nochg:
000144D4 6100 B258                  		bsr.w	SpeedToPos
000144D8 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000144DE 6600                       		bne.s	@isright	; if not, branch
000144E0 76F8                       		moveq	#-8,d3
000144E2 6100 0000                  		bsr.w	ObjHitWallLeft
000144E6 4A41                       		tst.w	d1
000144E8 6B00 B298                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000144EC 4E75                       		rts	
000144EE                            
000144EE                            	@isright:
000144EE 7608                       		moveq	#8,d3
000144F0 6100 0000                  		bsr.w	ObjHitWallRight
000144F4 4A41                       		tst.w	d1
000144F6 6B00 B28A                  		bmi.w	DeleteObject
000144FA 4E75                       		rts	
000144FA 4E75                       		rts	
000144FC                            Map_Gar:	include	"_maps\Gargoyle.asm"
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            ; Sprite mappings - gargoyle head (LZ)
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            Map_Gar_internal:
000144FC 0000                       		dc.w @head-Map_Gar_internal
000144FE 0000                       		dc.w @head-Map_Gar_internal
00014500 0000                       		dc.w @fireball1-Map_Gar_internal
00014502 0000                       		dc.w @fireball2-Map_Gar_internal
00014504 03                         @head:		dc.b 3
00014505 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001450A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001450F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00014514 01                         @fireball1:	dc.b 1
00014515 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001451A 01                         @fireball2:	dc.b 1
0001451B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014520                            		even
00014520                            		even
00014520                            		include	"_incObj\63 LZ Conveyor.asm"
00014520                            ; ---------------------------------------------------------------------------
00014520                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014520                            ; ---------------------------------------------------------------------------
00014520                            
00014520                            LabyrinthConvey:
00014520 7000                       		moveq	#0,d0
00014522 1028 0024                  		move.b	obRoutine(a0),d0
00014526 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001452A 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001454A                            
0001454A                            LCon_Display:
0001454A 6000 B1F6                  		bra.w	DisplaySprite
0001454E                            ; ===========================================================================
0001454E                            
0001454E                            loc_1236A:
0001454E 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014554 6600                       		bne.s	loc_12378
00014556 0C40 FF80                  		cmpi.w	#-$80,d0
0001455A 64EE                       		bcc.s	LCon_Display
0001455C                            
0001455C                            loc_12378:
0001455C 1028 002F                  		move.b	$2F(a0),d0
00014560 6A00 B220                  		bpl.w	DeleteObject
00014564 0240 007F                  		andi.w	#$7F,d0
00014568 45F8 F7C1                  		lea	(v_obj63).w,a2
0001456C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014572 6000 B20E                  		bra.w	DeleteObject
00014576                            ; ===========================================================================
00014576 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014578 0000                       		dc.w loc_124B2-LCon_Index
0001457A 0000                       		dc.w loc_124C2-LCon_Index
0001457C 0000                       		dc.w loc_124DE-LCon_Index
0001457E                            ; ===========================================================================
0001457E                            
0001457E                            LCon_Main:	; Routine 0
0001457E 1028 0028                  		move.b	obSubtype(a0),d0
00014582 6B00 0000                  		bmi.w	loc_12460
00014586 5428 0024                  		addq.b	#2,obRoutine(a0)
0001458A 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014592 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014598 0028 0004 0001             		ori.b	#4,obRender(a0)
0001459E 117C 0010 0014             		move.b	#$10,obActWid(a0)
000145A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000145AA 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000145B0 6600                       		bne.s	loc_123E2
000145B2 5828 0024                  		addq.b	#4,obRoutine(a0)
000145B6 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000145BC 317C 0080 0018             		move.w	#$80,obPriority(a0)
000145C2 6000 0000                  		bra.w	loc_124DE
000145C6                            ; ===========================================================================
000145C6                            
000145C6                            loc_123E2:
000145C6 117C 0004 001A             		move.b	#4,obFrame(a0)
000145CC 7000                       		moveq	#0,d0
000145CE 1028 0028                  		move.b	obSubtype(a0),d0
000145D2 3200                       		move.w	d0,d1
000145D4 E648                       		lsr.w	#3,d0
000145D6 0240 001E                  		andi.w	#$1E,d0
000145DA 45FA 0000                  		lea	LCon_Data(pc),a2
000145DE D4F2 0000                  		adda.w	(a2,d0.w),a2
000145E2 315A 0038                  		move.w	(a2)+,$38(a0)
000145E6 315A 0030                  		move.w	(a2)+,$30(a0)
000145EA 214A 003C                  		move.l	a2,$3C(a0)
000145EE 0241 000F                  		andi.w	#$F,d1
000145F2 E549                       		lsl.w	#2,d1
000145F4 1141 0038                  		move.b	d1,$38(a0)
000145F8 117C 0004 003A             		move.b	#4,$3A(a0)
000145FE 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014602 6700                       		beq.s	loc_1244C
00014604 117C 0001 003B             		move.b	#1,$3B(a0)
0001460A 4428 003A                  		neg.b	$3A(a0)
0001460E 7200                       		moveq	#0,d1
00014610 1228 0038                  		move.b	$38(a0),d1
00014614 D228 003A                  		add.b	$3A(a0),d1
00014618 B228 0039                  		cmp.b	$39(a0),d1
0001461C 6500                       		bcs.s	loc_12448
0001461E 1001                       		move.b	d1,d0
00014620 7200                       		moveq	#0,d1
00014622 4A00                       		tst.b	d0
00014624 6A00                       		bpl.s	loc_12448
00014626 1228 0039                  		move.b	$39(a0),d1
0001462A 5901                       		subq.b	#4,d1
0001462C                            
0001462C                            loc_12448:
0001462C 1141 0038                  		move.b	d1,$38(a0)
00014630                            
00014630                            loc_1244C:
00014630 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014636 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001463C 6100 0000                  		bsr.w	LCon_ChangeDir
00014640 6000 0000                  		bra.w	loc_124B2
00014644                            ; ===========================================================================
00014644                            
00014644                            loc_12460:
00014644 1140 002F                  		move.b	d0,$2F(a0)
00014648 0240 007F                  		andi.w	#$7F,d0
0001464C 45F8 F7C1                  		lea	(v_obj63).w,a2
00014650 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014656 6600 B12A                  		bne.w	DeleteObject
0001465A D040                       		add.w	d0,d0
0001465C 0240 001E                  		andi.w	#$1E,d0
00014660 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014664 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001466A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001466E 321A                       		move.w	(a2)+,d1
00014670 2248                       		movea.l	a0,a1
00014672 6000                       		bra.s	LCon_MakePtfms
00014674                            ; ===========================================================================
00014674                            
00014674                            LCon_Loop:
00014674 6100 B558                  		bsr.w	FindFreeObj
00014678 6600                       		bne.s	loc_124AA
0001467A                            
0001467A                            LCon_MakePtfms:
0001467A 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
0001467E 335A 0008                  		move.w	(a2)+,obX(a1)
00014682 335A 000C                  		move.w	(a2)+,obY(a1)
00014686 301A                       		move.w	(a2)+,d0
00014688 1340 0028                  		move.b	d0,obSubtype(a1)
0001468C                            
0001468C                            loc_124AA:
0001468C 51C9 FFE6                  		dbf	d1,LCon_Loop
00014690                            
00014690 588F                       		addq.l	#4,sp
00014692 4E75                       		rts	
00014694                            ; ===========================================================================
00014694                            
00014694                            loc_124B2:	; Routine 2
00014694 7200                       		moveq	#0,d1
00014696 1228 0014                  		move.b	obActWid(a0),d1
0001469A 4EB9 0000 8E52             		jsr	(PlatformObject).l
000146A0 6000 0000                  		bra.w	sub_12502
000146A4                            ; ===========================================================================
000146A4                            
000146A4                            loc_124C2:	; Routine 4
000146A4 7200                       		moveq	#0,d1
000146A6 1228 0014                  		move.b	obActWid(a0),d1
000146AA 4EB9 0000 8FC6             		jsr	(ExitPlatform).l
000146B0 3F28 0008                  		move.w	obX(a0),-(sp)
000146B4 6100 0000                  		bsr.w	sub_12502
000146B8 341F                       		move.w	(sp)+,d2
000146BA 4EF9 0000 9530             		jmp	(MvSonicOnPtfm2).l
000146C0                            ; ===========================================================================
000146C0                            
000146C0                            loc_124DE:	; Routine 6
000146C0 3038 FE04                  		move.w	(v_framecount).w,d0
000146C4 0240 0003                  		andi.w	#3,d0
000146C8 6600                       		bne.s	loc_124FC
000146CA 7201                       		moveq	#1,d1
000146CC 4A38 F7C0                  		tst.b	(f_conveyrev).w
000146D0 6700                       		beq.s	loc_124F2
000146D2 4401                       		neg.b	d1
000146D4                            
000146D4                            loc_124F2:
000146D4 D328 001A                  		add.b	d1,obFrame(a0)
000146D8 0228 0003 001A             		andi.b	#3,obFrame(a0)
000146DE                            
000146DE                            loc_124FC:
000146DE 588F                       		addq.l	#4,sp
000146E0 6000 CFEA                  		bra.w	RememberState
000146E4                            
000146E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146E4                            
000146E4                            
000146E4                            sub_12502:
000146E4 4A38 F7EE                  		tst.b	(f_switch+$E).w
000146E8 6700                       		beq.s	loc_12520
000146EA 4A28 003B                  		tst.b	$3B(a0)
000146EE 6600                       		bne.s	loc_12520
000146F0 117C 0001 003B             		move.b	#1,$3B(a0)
000146F6 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000146FC 4428 003A                  		neg.b	$3A(a0)
00014700 6000                       		bra.s	loc_12534
00014702                            ; ===========================================================================
00014702                            
00014702                            loc_12520:
00014702 3028 0008                  		move.w	obX(a0),d0
00014706 B068 0034                  		cmp.w	$34(a0),d0
0001470A 6600                       		bne.s	loc_1256A
0001470C 3028 000C                  		move.w	obY(a0),d0
00014710 B068 0036                  		cmp.w	$36(a0),d0
00014714 6600                       		bne.s	loc_1256A
00014716                            
00014716                            loc_12534:
00014716 7200                       		moveq	#0,d1
00014718 1228 0038                  		move.b	$38(a0),d1
0001471C D228 003A                  		add.b	$3A(a0),d1
00014720 B228 0039                  		cmp.b	$39(a0),d1
00014724 6500                       		bcs.s	loc_12552
00014726 1001                       		move.b	d1,d0
00014728 7200                       		moveq	#0,d1
0001472A 4A00                       		tst.b	d0
0001472C 6A00                       		bpl.s	loc_12552
0001472E 1228 0039                  		move.b	$39(a0),d1
00014732 5901                       		subq.b	#4,d1
00014734                            
00014734                            loc_12552:
00014734 1141 0038                  		move.b	d1,$38(a0)
00014738 2268 003C                  		movea.l	$3C(a0),a1
0001473C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014742 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014748 6100 0000                  		bsr.w	LCon_ChangeDir
0001474C                            
0001474C                            loc_1256A:
0001474C 6100 AFE0                  		bsr.w	SpeedToPos
00014750 4E75                       		rts	
00014752                            ; End of function sub_12502
00014752                            
00014752                            
00014752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014752                            
00014752                            
00014752                            LCon_ChangeDir:
00014752 7000                       		moveq	#0,d0
00014754 343C FF00                  		move.w	#-$100,d2
00014758 3028 0008                  		move.w	obX(a0),d0
0001475C 9068 0034                  		sub.w	$34(a0),d0
00014760 6400                       		bcc.s	loc_12584
00014762 4440                       		neg.w	d0
00014764 4442                       		neg.w	d2
00014766                            
00014766                            loc_12584:
00014766 7200                       		moveq	#0,d1
00014768 363C FF00                  		move.w	#-$100,d3
0001476C 3228 000C                  		move.w	obY(a0),d1
00014770 9268 0036                  		sub.w	$36(a0),d1
00014774 6400                       		bcc.s	loc_12598
00014776 4441                       		neg.w	d1
00014778 4443                       		neg.w	d3
0001477A                            
0001477A                            loc_12598:
0001477A B240                       		cmp.w	d0,d1
0001477C 6500                       		bcs.s	loc_125C2
0001477E 3028 0008                  		move.w	obX(a0),d0
00014782 9068 0034                  		sub.w	$34(a0),d0
00014786 6700                       		beq.s	loc_125AE
00014788 48C0                       		ext.l	d0
0001478A E180                       		asl.l	#8,d0
0001478C 81C1                       		divs.w	d1,d0
0001478E 4440                       		neg.w	d0
00014790                            
00014790                            loc_125AE:
00014790 3140 0010                  		move.w	d0,obVelX(a0)
00014794 3143 0012                  		move.w	d3,obVelY(a0)
00014798 4840                       		swap	d0
0001479A 3140 000A                  		move.w	d0,obX+2(a0)
0001479E 4268 000E                  		clr.w	obY+2(a0)
000147A2 4E75                       		rts	
000147A4                            ; ===========================================================================
000147A4                            
000147A4                            loc_125C2:
000147A4 3228 000C                  		move.w	obY(a0),d1
000147A8 9268 0036                  		sub.w	$36(a0),d1
000147AC 6700                       		beq.s	loc_125D4
000147AE 48C1                       		ext.l	d1
000147B0 E181                       		asl.l	#8,d1
000147B2 83C0                       		divs.w	d0,d1
000147B4 4441                       		neg.w	d1
000147B6                            
000147B6                            loc_125D4:
000147B6 3141 0012                  		move.w	d1,obVelY(a0)
000147BA 3142 0010                  		move.w	d2,obVelX(a0)
000147BE 4841                       		swap	d1
000147C0 3141 000E                  		move.w	d1,obY+2(a0)
000147C4 4268 000A                  		clr.w	obX+2(a0)
000147C8 4E75                       		rts	
000147CA                            ; End of function LCon_ChangeDir
000147CA                            
000147CA                            ; ===========================================================================
000147CA 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000147CC 0000                       		dc.w word_12610-LCon_Data
000147CE 0000                       		dc.w word_12628-LCon_Data
000147D0 0000                       		dc.w word_1263C-LCon_Data
000147D2 0000                       		dc.w word_12650-LCon_Data
000147D4 0000                       		dc.w word_12668-LCon_Data
000147D6 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000147E6 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000147F2 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014802 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001480A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001481E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014832 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001484A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001484A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001485E                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
0001485E                            ; ---------------------------------------------------------------------------
0001485E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001485E                            ; ---------------------------------------------------------------------------
0001485E                            Map_LConv_internal:
0001485E 0000                       		dc.w @wheel1-Map_LConv_internal
00014860 0000                       		dc.w @wheel2-Map_LConv_internal
00014862 0000                       		dc.w @wheel3-Map_LConv_internal
00014864 0000                       		dc.w @wheel4-Map_LConv_internal
00014866 0000                       		dc.w @platform-Map_LConv_internal
00014868 01                         @wheel1:	dc.b 1
00014869 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001486E 01                         @wheel2:	dc.b 1
0001486F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014874 01                         @wheel3:	dc.b 1
00014875 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001487A 01                         @wheel4:	dc.b 1
0001487B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014880 01                         @platform:	dc.b 1
00014881 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014886                            		even
00014886                            		even
00014886                            		include	"_incObj\64 Bubbles.asm"
00014886                            ; ---------------------------------------------------------------------------
00014886                            ; Object 64 - bubbles (LZ)
00014886                            ; ---------------------------------------------------------------------------
00014886                            
00014886                            Bubble:
00014886 7000                       		moveq	#0,d0
00014888 1028 0024                  		move.b	obRoutine(a0),d0
0001488C 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014890 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014894                            ; ===========================================================================
00014894 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014896 0000                       		dc.w Bub_Animate-Bub_Index
00014898 0000                       		dc.w Bub_ChkWater-Bub_Index
0001489A 0000                       		dc.w Bub_Display-Bub_Index
0001489C 0000                       		dc.w Bub_Delete-Bub_Index
0001489E 0000                       		dc.w Bub_BblMaker-Bub_Index
000148A0                            
000148A0 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
000148A0 =00000030                  bub_origX:	equ $30		; original x-axis position
000148A0 =00000032                  bub_time:	equ $32		; time until next bubble spawn
000148A0 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
000148A0                            ; ===========================================================================
000148A0                            
000148A0                            Bub_Main:	; Routine 0
000148A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000148A4 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
000148AC 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000148B2 117C 0084 0001             		move.b	#$84,obRender(a0)
000148B8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000148BE 317C 0080 0018             		move.w	#$80,obPriority(a0)
000148C4 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000148C8 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000148CA                            
000148CA 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000148CE 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000148D2 1140 0032                  		move.b	d0,bub_time(a0)
000148D6 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
000148DA 117C 0006 001C             		move.b	#6,obAnim(a0)
000148E0 6000 0000                  		bra.w	Bub_BblMaker
000148E4                            ; ===========================================================================
000148E4                            
000148E4                            @bubble:
000148E4 1140 001C                  		move.b	d0,obAnim(a0)
000148E8 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
000148EE 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
000148F4 4EB9 0000 3788             		jsr	(RandomNumber).l
000148FA 1140 0026                  		move.b	d0,obAngle(a0)
000148FE                            
000148FE                            Bub_Animate:	; Routine 2
000148FE 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014904 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001490A 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014910 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014912                            
00014912 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014918                            
00014918                            Bub_ChkWater:	; Routine 4
00014918 3038 F646                  		move.w	(v_waterpos1).w,d0
0001491C B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014920 6500                       		bcs.s	@wobble		; if yes, branch
00014922                            
00014922                            @burst:
00014922 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014928 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
0001492C 6000 0000                  		bra.w	Bub_Display
00014930                            ; ===========================================================================
00014930                            
00014930                            @wobble:
00014930 1028 0026                  		move.b	obAngle(a0),d0
00014934 5228 0026                  		addq.b	#1,obAngle(a0)
00014938 0240 007F                  		andi.w	#$7F,d0
0001493C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014942 1031 0000                  		move.b	(a1,d0.w),d0
00014946 4880                       		ext.w	d0
00014948 D068 0030                  		add.w	bub_origX(a0),d0
0001494C 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014950 4A28 002E                  		tst.b	bub_inhalable(a0)
00014954 6700                       		beq.s	@display
00014956 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
0001495A 6700                       		beq.s	@display	; if not, branch
0001495C                            
0001495C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001496A 43F8 D000                  		lea	(v_player).w,a1
0001496E 4269 0010                  		clr.w	obVelX(a1)
00014972 4269 0012                  		clr.w	obVelY(a1)
00014976 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
0001497A 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014980 337C 0023 003E             		move.w	#$23,$3E(a1)
00014986 137C 0000 003C             		move.b	#0,$3C(a1)
0001498C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014992 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014998 0829 0002 0022             		btst	#2,obStatus(a1)
0001499E 6700 FF82                  		beq.w	@burst
000149A2 08A9 0002 0022             		bclr	#2,obStatus(a1)
000149A8 137C 0013 0016             		move.b	#$13,obHeight(a1)
000149AE 137C 0009 0017             		move.b	#9,obWidth(a1)
000149B4 5B69 000C                  		subq.w	#5,obY(a1)
000149B8 6000 FF68                  		bra.w	@burst
000149BC                            ; ===========================================================================
000149BC                            
000149BC                            @display:
000149BC 6100 AD70                  		bsr.w	SpeedToPos
000149C0 4A28 0001                  		tst.b	obRender(a0)
000149C4 6A00                       		bpl.s	@delete
000149C6 4EF9 0000 F742             		jmp	(DisplaySprite).l
000149CC                            
000149CC                            	@delete:
000149CC 4EF9 0000 F782             		jmp	(DeleteObject).l
000149D2                            ; ===========================================================================
000149D2                            
000149D2                            Bub_Display:	; Routine 6
000149D2 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000149D8 4EB9 0000 C804             		jsr	(AnimateSprite).l
000149DE 4A28 0001                  		tst.b	obRender(a0)
000149E2 6A00                       		bpl.s	@delete
000149E4 4EF9 0000 F742             		jmp	(DisplaySprite).l
000149EA                            
000149EA                            	@delete:
000149EA 4EF9 0000 F782             		jmp	(DeleteObject).l
000149F0                            ; ===========================================================================
000149F0                            
000149F0                            Bub_Delete:	; Routine 8
000149F0 6000 AD90                  		bra.w	DeleteObject
000149F4                            ; ===========================================================================
000149F4                            
000149F4                            Bub_BblMaker:	; Routine $A
000149F4 4A68 0036                  		tst.w	$36(a0)
000149F8 6600                       		bne.s	@loc_12874
000149FA 3038 F646                  		move.w	(v_waterpos1).w,d0
000149FE B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014A02 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014A06 4A28 0001                  		tst.b	obRender(a0)
00014A0A 6A00 0000                  		bpl.w	@chkdel
00014A0E 5368 0038                  		subq.w	#1,$38(a0)
00014A12 6A00 0000                  		bpl.w	@loc_12914
00014A16 317C 0001 0036             		move.w	#1,$36(a0)
00014A1C                            
00014A1C                            	@tryagain:
00014A1C 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A22 3200                       		move.w	d0,d1
00014A24 0240 0007                  		andi.w	#7,d0
00014A28 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014A2C 64EE                       		bcc.s	@tryagain	; if yes, branch
00014A2E                            
00014A2E 1140 0034                  		move.b	d0,$34(a0)
00014A32 0241 000C                  		andi.w	#$C,d1
00014A36 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014A3C D2C1                       		adda.w	d1,a1
00014A3E 2149 003C                  		move.l	a1,$3C(a0)
00014A42 5328 0032                  		subq.b	#1,bub_time(a0)
00014A46 6A00                       		bpl.s	@loc_12872
00014A48 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014A4E 08E8 0007 0036             		bset	#7,$36(a0)
00014A54                            
00014A54                            @loc_12872:
00014A54 6000                       		bra.s	@loc_1287C
00014A56                            ; ===========================================================================
00014A56                            
00014A56                            @loc_12874:
00014A56 5368 0038                  		subq.w	#1,$38(a0)
00014A5A 6A00 0000                  		bpl.w	@loc_12914
00014A5E                            
00014A5E                            @loc_1287C:
00014A5E 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A64 0240 001F                  		andi.w	#$1F,d0
00014A68 3140 0038                  		move.w	d0,$38(a0)
00014A6C 6100 B160                  		bsr.w	FindFreeObj
00014A70 6600                       		bne.s	@fail
00014A72 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014A76 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014A7C 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A82 0240 000F                  		andi.w	#$F,d0
00014A86 5140                       		subq.w	#8,d0
00014A88 D169 0008                  		add.w	d0,obX(a1)
00014A8C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014A92 7000                       		moveq	#0,d0
00014A94 1028 0034                  		move.b	$34(a0),d0
00014A98 2468 003C                  		movea.l	$3C(a0),a2
00014A9C 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014AA2 0828 0007 0036             		btst	#7,$36(a0)
00014AA8 6700                       		beq.s	@fail
00014AAA 4EB9 0000 3788             		jsr	(RandomNumber).l
00014AB0 0240 0003                  		andi.w	#3,d0
00014AB4 6600                       		bne.s	@loc_buh
00014AB6 08E8 0006 0036             		bset	#6,$36(a0)
00014ABC 6600                       		bne.s	@fail
00014ABE 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014AC4                            
00014AC4                            @loc_buh:
00014AC4 4A28 0034                  		tst.b	$34(a0)
00014AC8 6600                       		bne.s	@fail
00014ACA 08E8 0006 0036             		bset	#6,$36(a0)
00014AD0 6600                       		bne.s	@fail
00014AD2 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014AD8                            
00014AD8                            	@fail:
00014AD8 5328 0034                  		subq.b	#1,$34(a0)
00014ADC 6A00                       		bpl.s	@loc_12914
00014ADE 4EB9 0000 3788             		jsr	(RandomNumber).l
00014AE4 0240 007F                  		andi.w	#$7F,d0
00014AE8 0640 0080                  		addi.w	#$80,d0
00014AEC D168 0038                  		add.w	d0,$38(a0)
00014AF0 4268 0036                  		clr.w	$36(a0)
00014AF4                            
00014AF4                            @loc_12914:
00014AF4 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014AFA 4EB9 0000 C804             		jsr	(AnimateSprite).l
00014B00                            
00014B00                            @chkdel:
00014B1E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B22 B068 000C                  		cmp.w	obY(a0),d0
00014B26 6500 AC1A                  		bcs.w	DisplaySprite
00014B2A 4E75                       		rts	
00014B2C                            ; ===========================================================================
00014B2C                            ; bubble production sequence
00014B2C                            
00014B2C                            ; 0 = small bubble, 1 =	large bubble
00014B2C                            
00014B2C 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014B3E                            
00014B3E                            ; ===========================================================================
00014B3E                            
00014B3E                            Bub_ChkSonic:
00014B3E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014B42 6B00                       		bmi.s	@loc_12998
00014B44 43F8 D000                  		lea	(v_player).w,a1
00014B48 3029 0008                  		move.w	obX(a1),d0
00014B4C 3228 0008                  		move.w	obX(a0),d1
00014B50 0441 0010                  		subi.w	#$10,d1
00014B54 B240                       		cmp.w	d0,d1
00014B56 6400                       		bcc.s	@loc_12998
00014B58 0641 0020                  		addi.w	#$20,d1
00014B5C B240                       		cmp.w	d0,d1
00014B5E 6500                       		bcs.s	@loc_12998
00014B60 3029 000C                  		move.w	obY(a1),d0
00014B64 3228 000C                  		move.w	obY(a0),d1
00014B68 B240                       		cmp.w	d0,d1
00014B6A 6400                       		bcc.s	@loc_12998
00014B6C 0641 0010                  		addi.w	#$10,d1
00014B70 B240                       		cmp.w	d0,d1
00014B72 6500                       		bcs.s	@loc_12998
00014B74 7001                       		moveq	#1,d0
00014B76 4E75                       		rts	
00014B78                            ; ===========================================================================
00014B78                            
00014B78                            @loc_12998:
00014B78 7000                       		moveq	#0,d0
00014B7A 4E75                       		rts	
00014B7A 4E75                       		rts	
00014B7C                            		include	"_anim\Bubbles.asm"
00014B7C                            ; ---------------------------------------------------------------------------
00014B7C                            ; Animation script - bubbles (LZ)
00014B7C                            ; ---------------------------------------------------------------------------
00014B7C 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014B7E 0000                       		dc.w @medium-Ani_Bub
00014B80 0000                       		dc.w @large-Ani_Bub
00014B82 0000                       		dc.w @incroutine-Ani_Bub
00014B84 0000                       		dc.w @incroutine-Ani_Bub
00014B86 0000                       		dc.w @burst-Ani_Bub
00014B88 0000                       		dc.w @bubmaker-Ani_Bub
00014B8A 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014B90 00                         		even
00014B90 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014B96 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014B9E 00                         		even
00014B9E 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014BA0 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014BA6 00                         		even
00014BA6 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014BAC 00                         		even
00014BAC 00                         		even
00014BAC                            Map_Bub:	include	"_maps\Bubbles.asm"
00014BAC                            ; ---------------------------------------------------------------------------
00014BAC                            ; Sprite mappings - bubbles (LZ)
00014BAC                            ; ---------------------------------------------------------------------------
00014BAC                            Map_Bub_internal:
00014BAC 0000                       		dc.w @bubble1-Map_Bub_internal
00014BAE 0000                       		dc.w @bubble2-Map_Bub_internal
00014BB0 0000                       		dc.w @bubble3-Map_Bub_internal
00014BB2 0000                       		dc.w @bubble4-Map_Bub_internal
00014BB4 0000                       		dc.w @bubble5-Map_Bub_internal
00014BB6 0000                       		dc.w @bubble6-Map_Bub_internal
00014BB8 0000                       		dc.w @bubblefull-Map_Bub_internal
00014BBA 0000                       		dc.w @burst1-Map_Bub_internal
00014BBC 0000                       		dc.w @burst2-Map_Bub_internal
00014BBE 0000                       		dc.w @zero_sm-Map_Bub_internal
00014BC0 0000                       		dc.w @five_sm-Map_Bub_internal
00014BC2 0000                       		dc.w @three_sm-Map_Bub_internal
00014BC4 0000                       		dc.w @one_sm-Map_Bub_internal
00014BC6 0000                       		dc.w @zero-Map_Bub_internal
00014BC8 0000                       		dc.w @five-Map_Bub_internal
00014BCA 0000                       		dc.w @four-Map_Bub_internal
00014BCC 0000                       		dc.w @three-Map_Bub_internal
00014BCE 0000                       		dc.w @two-Map_Bub_internal
00014BD0 0000                       		dc.w @one-Map_Bub_internal
00014BD2 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014BD4 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014BD6 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014BD8 0000                       		dc.w @blank-Map_Bub_internal
00014BDA 01                         @bubble1:	dc.b 1
00014BDB FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014BE0 01                         @bubble2:	dc.b 1
00014BE1 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014BE6 01                         @bubble3:	dc.b 1
00014BE7 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014BEC 01                         @bubble4:	dc.b 1
00014BED F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014BF2 01                         @bubble5:	dc.b 1
00014BF3 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014BF8 01                         @bubble6:	dc.b 1
00014BF9 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014BFE 01                         @bubblefull:	dc.b 1
00014BFF F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014C04 04                         @burst1:	dc.b 4
00014C05 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014C0A F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014C0F 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014C14 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014C19 04                         @burst2:	dc.b 4
00014C1A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014C1F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014C24 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014C29 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014C2E 01                         @zero_sm:	dc.b 1
00014C2F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014C34 01                         @five_sm:	dc.b 1
00014C35 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014C3A 01                         @three_sm:	dc.b 1
00014C3B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014C40 01                         @one_sm:	dc.b 1
00014C41 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014C46 01                         @zero:		dc.b 1
00014C47 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014C4C 01                         @five:		dc.b 1
00014C4D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014C52 01                         @four:		dc.b 1
00014C53 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014C58 01                         @three:		dc.b 1
00014C59 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014C5E 01                         @two:		dc.b 1
00014C5F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014C64 01                         @one:		dc.b 1
00014C65 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014C6A 01                         @bubmaker1:	dc.b 1
00014C6B F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014C70 01                         @bubmaker2:	dc.b 1
00014C71 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014C76 01                         @bubmaker3:	dc.b 1
00014C77 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014C7C 00                         @blank:		dc.b 0
00014C7E 00                         		even
00014C7E 00                         		even
00014C7E                            		include	"_incObj\65 Waterfalls.asm"
00014C7E                            ; ---------------------------------------------------------------------------
00014C7E                            ; Object 65 - waterfalls (LZ)
00014C7E                            ; ---------------------------------------------------------------------------
00014C7E                            
00014C7E                            Waterfall:
00014C7E 7000                       		moveq	#0,d0
00014C80 1028 0024                  		move.b	obRoutine(a0),d0
00014C84 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014C88 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014C8C                            ; ===========================================================================
00014C8C 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014C8E 0000                       		dc.w WFall_Animate-WFall_Index
00014C90 0000                       		dc.w WFall_ChkDel-WFall_Index
00014C92 0000                       		dc.w WFall_OnWater-WFall_Index
00014C94 0000                       		dc.w loc_12B36-WFall_Index
00014C96                            ; ===========================================================================
00014C96                            
00014C96                            WFall_Main:	; Routine 0
00014C96 5828 0024                  		addq.b	#4,obRoutine(a0)
00014C9A 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014CA2 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014CA8 0028 0004 0001             		ori.b	#4,obRender(a0)
00014CAE 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014CB4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014CBA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014CBE 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014CC0 08E8 0007 0002             		bset	#7,obGfx(a0)
00014CC6                            
00014CC6                            	@under80:
00014CC6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014CCA 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014CCE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014CD2 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014CD4                            
00014CD4 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014CD8 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014CDC 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014CE2 6700                       		beq.s	@not49		; if not, branch
00014CE4                            
00014CE4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014CEA                            
00014CEA                            	@not49:
00014CEA 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014CF0 6700                       		beq.s	WFall_Animate	; if not, branch
00014CF2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014CF8                            
00014CF8                            WFall_Animate:	; Routine 2
00014CF8 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014CFE 4EB9 0000 C804             		jsr	(AnimateSprite).l
00014D04                            
00014D04                            WFall_ChkDel:	; Routine 4
00014D04 6000 C9C6                  		bra.w	RememberState
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            WFall_OnWater:	; Routine 6
00014D08 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D0C 0440 0010                  		subi.w	#$10,d0
00014D10 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014D14 60E2                       		bra.s	WFall_Animate
00014D16                            ; ===========================================================================
00014D16                            
00014D16                            loc_12B36:	; Routine 8
00014D16 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014D1C 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014D22 6600                       		bne.s	@animate
00014D24 08E8 0007 0002             		bset	#7,obGfx(a0)
00014D2A                            
00014D2A                            	@animate:
00014D2A 60CC                       		bra.s	WFall_Animate
00014D2A 60CC                       		bra.s	WFall_Animate
00014D2C                            		include	"_anim\Waterfalls.asm"
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C                            ; Animation script - waterfall (LZ)
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014D2E 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014D34 00                         		even
00014D34 00                         		even
00014D34                            Map_WFall	include	"_maps\Waterfalls.asm"
00014D34                            ; ---------------------------------------------------------------------------
00014D34                            ; Sprite mappings - waterfalls (LZ)
00014D34                            ; ---------------------------------------------------------------------------
00014D34                            Map_WFall_internal:
00014D34 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014D36 0000                       		dc.w @cornerwide-Map_WFall_internal
00014D38 0000                       		dc.w @cornermedium-Map_WFall_internal
00014D3A 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014D3C 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014D3E 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014D40 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014D42 0000                       		dc.w @vertwide-Map_WFall_internal
00014D44 0000                       		dc.w @diagonal-Map_WFall_internal
00014D46 0000                       		dc.w @splash1-Map_WFall_internal
00014D48 0000                       		dc.w @splash2-Map_WFall_internal
00014D4A 0000                       		dc.w @splash3-Map_WFall_internal
00014D4C 01                         @vertnarrow:	dc.b 1
00014D4D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014D52 02                         @cornerwide:	dc.b 2
00014D53 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014D58 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014D5D 02                         @cornermedium:	dc.b 2
00014D5E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014D63 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D68 01                         @cornernarrow:	dc.b 1
00014D69 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014D6E 02                         @cornermedium2:	dc.b 2
00014D6F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014D74 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D79 01                         @cornernarrow2:	dc.b 1
00014D7A F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014D7F 01                         @cornernarrow3:	dc.b 1
00014D80 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014D85 01                         @vertwide:	dc.b 1
00014D86 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014D8B 02                         @diagonal:	dc.b 2
00014D8C F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014D91 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014D96 02                         @splash1:	dc.b 2
00014D97 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014D9C F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014DA1 02                         @splash2:	dc.b 2
00014DA2 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014DA7 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014DAC 02                         @splash3:	dc.b 2
00014DAD F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014DB2 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014DB8 00                         		even
00014DB8 00                         		even
00014DB8                            
00014DB8                            
00014DB8                            SpinDash_dust:
00014DB8                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014DB8 7000                       		moveq	#0,d0
00014DBA 1028 0024                  		move.b	$24(a0),d0
00014DBE 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014DC2 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014DC6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DC6 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014DC8 0000                       		dc loc_1DD90-off_1DD2E; 1
00014DCA 0000                       		dc loc_1DE46-off_1DD2E; 2
00014DCC 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014DCE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DCE                            
00014DCE                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014DCE 5428 0024                  		addq.b	#2,$24(a0)
00014DD2 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014DDA 0028 0004 0001             		or.b	#4,1(a0)
00014DE0 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014DE6 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014DEC 317C 07AC 0002             		move	#$7AC,2(a0)
00014DF2 317C D000 003E             		move	#-$3000,$3E(a0)
00014DF8 317C F580 003C             		move	#$F580,$3C(a0)
00014DFE B0FC D1C0                  		cmp	#-$2E40,a0
00014E02 6700                       		beq.s	loc_1DD8C
00014E04 117C 0001 0034             		move.b	#1,$34(a0)
00014E0A                            ;		cmp	#2,($FFFFFF70).w
00014E0A                            ;		beq.s	loc_1DD8C
00014E0A                            ;		move	#$48C,2(a0)
00014E0A                            ;		move	#-$4FC0,$3E(a0)
00014E0A                            ;		move	#-$6E80,$3C(a0)
00014E0A                            
00014E0A                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014E0A                            ;		bsr.w	sub_16D6E
00014E0A                            
00014E0A                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014E0A 3468 003E                  		movea.w	$3E(a0),a2
00014E0E 7000                       		moveq	#0,d0
00014E10 1028 001C                  		move.b	$1C(a0),d0
00014E14 D040                       		add	d0,d0
00014E16 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014E1A 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014E1E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E1E 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014E20 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014E22 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014E24 0000                       		dc loc_1DE20-off_1DDA4; 3
00014E26                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E26                            
00014E26                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014E26 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014E2C 4A28 001D                  		tst.b	$1D(a0)
00014E30 6600                       		bne.s	loc_1DE28
00014E32 316A 0008 0008             		move	8(a2),8(a0)
00014E38 117C 0000 0022             		move.b	#0,$22(a0)
00014E3E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014E44 6000                       		bra.s	loc_1DE28
00014E46                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E46                            
00014E46                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014E46                            ;		cmp.b	#$C,$28(a2)
00014E46                            ;		bcs.s	loc_1DE3E
00014E46 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014E4C 6400                       		bcc.s	loc_1DE3E
00014E4E 4A2A 0039                  		tst.b	$39(a2)
00014E52 6700                       		beq.s	loc_1DE3E
00014E54 316A 0008 0008             		move	8(a2),8(a0)
00014E5A 316A 000C 000C             		move	$C(a2),$C(a0)
00014E60 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014E66 0228 0001 0022             		and.b	#1,$22(a0)
00014E6C 4A28 0034                  		tst.b	$34(a0)
00014E70 6700                       		beq.s	loc_1DE06
00014E72 5968 000C                  		sub	#4,$C(a0)
00014E76                            
00014E76                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014E76 4A28 001D                  		tst.b	$1D(a0)
00014E7A 6600                       		bne.s	loc_1DE28
00014E7C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014E82 4A6A 0002                  		tst	2(a2)
00014E86 6A00                       		bpl.s	loc_1DE28
00014E88 0068 8000 0002             		or	#-$8000,2(a0)
00014E8E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E8E                            
00014E8E                            loc_1DE20:				; DATA XREF: h+6E30?o
00014E8E                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014E8E 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014E94 4EB9 0000 C804             		jsr	AnimateSprite
00014E9A 6100 0000                  		bsr.w	loc_1DEE4
00014E9E 4EFA A8A2                  		jmp	DisplaySprite
00014EA2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EA2                            
00014EA2                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014EA2 117C 0000 001C             		move.b	#0,$1C(a0)
00014EA8 4E75                       		rts	
00014EAA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EAA                            
00014EAA                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014EAA 6000 A8D6                  		bra.w	DeleteObject
00014EAE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EAE                            
00014EAE                            
00014EAE                            
00014EAE                            loc_1DE4A:
00014EAE 3468 003E                  	movea.w	$3E(a0),a2
00014EB2 7210                       	moveq	#$10,d1
00014EB4 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014EBA 6700                       	beq.s	loc_1DE64
00014EBC 7206                       	moveq	#$6,d1
00014EBE 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014EC4 6700                       	beq.s	loc_1DE64
00014EC6 117C 0002 0024             	move.b	#2,$24(a0)
00014ECC 117C 0000 0032             	move.b	#0,$32(a0)
00014ED2 4E75                       	rts
00014ED4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014ED4                            
00014ED4                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014ED4 5328 0032                  		subq.b	#1,$32(a0)
00014ED8 6A00                       		bpl.s	loc_1DEE0
00014EDA 117C 0003 0032             		move.b	#3,$32(a0)
00014EE0 4EBA ACEC                  		jsr	FindFreeObj
00014EE4 6600                       		bne.s	loc_1DEE0
00014EE6 1290                       		move.b	0(a0),0(a1)
00014EE8 336A 0008 0008             		move	8(a2),8(a1)
00014EEE 336A 000C 000C             		move	$C(a2),$C(a1)
00014EF4 4A28 0034                  		tst.b	$34(a0)
00014EF8 6700                       		beq.s	loc_1DE9A
00014EFA 5941                       		sub	#4,d1
00014EFC                            
00014EFC                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014EFC D369 000C                  		add	d1,$C(a1)
00014F00 137C 0000 0022             		move.b	#0,$22(a1)
00014F06 137C 0003 001C             		move.b	#3,$1C(a1)
00014F0C 5429 0024                  		addq.b	#2,$24(a1)
00014F10 2368 0004 0004             		move.l	4(a0),4(a1)
00014F16 1368 0001 0001             		move.b	1(a0),1(a1)
00014F1C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014F22 137C 0004 0014             		move.b	#4,obActWid(a1)
00014F28 3368 0002 0002             		move	2(a0),2(a1)
00014F2E 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014F34 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014F3A 4A6A 0002                  		tst	2(a2)
00014F3E 6A00                       		bpl.s	loc_1DEE0
00014F40 0069 8000 0002             		or	#-$8000,2(a1)
00014F46                            
00014F46                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014F46 6100                       		bsr.s	loc_1DEE4
00014F48 4E75                       		rts	
00014F4A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F4A                            
00014F4A                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014F4A 7000                       		moveq	#0,d0
00014F4C 1028 001A                  		move.b	$1A(a0),d0
00014F50 B028 0030                  		cmp.b	$30(a0),d0
00014F54 6700 0000                  		beq.w	locret_1DF36
00014F58 1140 0030                  		move.b	d0,$30(a0)
00014F5C 45F9 0000 0000             		lea	(off_1E074).l,a2
00014F62 D040                       		add	d0,d0
00014F64 D4F2 0000                  		add	(a2,d0.w),a2
00014F68 3A1A                       		move	(a2)+,d5
00014F6A 5345                       		subq	#1,d5
00014F6C 6B00 0000                  		bmi.w	locret_1DF36
00014F70 3828 003C                  		move $3C(a0),d4
00014F74                            
00014F74                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014F74 7200                       		moveq	#0,d1
00014F76 321A                       		move	(a2)+,d1
00014F78 3601                       		move	d1,d3
00014F7A E04B                       		lsr.w	#8,d3
00014F7C 0243 00F0                  		and	#$F0,d3	; 'ð'
00014F80 0643 0010                  		add	#$10,d3
00014F84 0241 0FFF                  		and	#$FFF,d1
00014F88 EB89                       		lsl.l	#5,d1
00014F8A 0681 0000 0000             		add.l	#Art_Dust,d1
00014F90 3404                       		move	d4,d2
00014F92 D843                       		add	d3,d4
00014F94 D843                       		add	d3,d4
00014F96 4EB9 0000 11A2             		jsr	(QueueDMATransfer).l
00014F9C 51CD FFD6                  		dbf	d5,loc_1DF0A
00014FA0 4E75                           rts
00014FA2                            
00014FA2                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014FA2 4E75                       		rts	
00014FA4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FA4 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014FA6 0000                       		dc byte_1DF43-off_1DF38; 1
00014FA8 0000                       		dc byte_1DF4F-off_1DF38; 2
00014FAA 0000                       		dc byte_1DF58-off_1DF38; 3
00014FAC 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014FAF 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014FBB 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014FC4 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014FCA                            ; -------------------------------------------------------------------------------
00014FCA                            ; Unknown Sprite Mappings
00014FCA                            ; -------------------------------------------------------------------------------
00014FCA                            MapUnc_1DF5E:
00014FCA 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014FCC 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014FCE 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014FD0 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014FD2 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014FD4 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014FD6 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014FD8 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014FDA 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014FDC 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014FDE 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014FE0 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014FE2 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014FE4 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014FE6 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014FE8 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014FEA 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014FEC 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014FEE 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014FF0 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014FF2 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014FF4 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014FF6 00                         word_1DF8A:	dc.b 0
00014FF7 01                         word_1DF8C:	dc.b 1
00014FF8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FFD 01                         word_1DF96:	dc.b 1
00014FFE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015003 01                         word_1DFA0:	dc.b 1
00015004 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015009 01                         word_1DFAA:	dc.b 1
0001500A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001500F 01                         word_1DFB4:	dc.b 1
00015010 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015015 01                         word_1DFBE:	dc.b 1
00015016 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001501B 01                         word_1DFC8:	dc.b 1
0001501C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015021 01                         word_1DFD2:	dc.b 1
00015022 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015027 01                         word_1DFDC:	dc.b 1
00015028 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001502D 01                         word_1DFE6:	dc.b 1
0001502E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015033 01                         word_1DFF0:	dc.b 1
00015034 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015039 01                         word_1DFFA:	dc.b 1
0001503A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001503F 02                         word_1E004:	dc.b 2
00015040 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015045 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001504A 02                         word_1E016:	dc.b 2
0001504B F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015050 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015055 02                         word_1E028:	dc.b 2
00015056 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001505B 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015060 02                         word_1E03A:	dc.b 2
00015061 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015066 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001506B 01                         word_1E04C:	dc.b 1
0001506C F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015071 01                         word_1E056:	dc.b 1
00015072 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015077 01                         word_1E060:	dc.b 1
00015078 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001507D 01                         word_1E06A:	dc.b 1
0001507E F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015083 00                         	dc.b 0
00015084 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015086 0000                       	dc word_1E0A2-off_1E074; 1
00015088 0000                       	dc word_1E0A6-off_1E074; 2
0001508A 0000                       	dc word_1E0AA-off_1E074; 3
0001508C 0000                       	dc word_1E0AE-off_1E074; 4
0001508E 0000                       	dc word_1E0B2-off_1E074; 5
00015090 0000                       	dc word_1E0B6-off_1E074; 6
00015092 0000                       	dc word_1E0BA-off_1E074; 7
00015094 0000                       	dc word_1E0BE-off_1E074; 8
00015096 0000                       	dc word_1E0C2-off_1E074; 9
00015098 0000                       	dc word_1E0C6-off_1E074; 10
0001509A 0000                       	dc word_1E0CA-off_1E074; 11
0001509C 0000                       	dc word_1E0CE-off_1E074; 12
0001509E 0000                       	dc word_1E0D2-off_1E074; 13
000150A0 0000                       	dc word_1E0D8-off_1E074; 14
000150A2 0000                       	dc word_1E0DE-off_1E074; 15
000150A4 0000                       	dc word_1E0E4-off_1E074; 16
000150A6 0000                       	dc word_1E0EA-off_1E074; 17
000150A8 0000                       	dc word_1E0EA-off_1E074; 18
000150AA 0000                       	dc word_1E0EA-off_1E074; 19
000150AC 0000                       	dc word_1E0EA-off_1E074; 20
000150AE 0000                       	dc word_1E0EC-off_1E074; 21
000150B0 0000                       word_1E0A0:	dc 0
000150B2 0001                       word_1E0A2:	dc 1
000150B4 7000                       	dc $7000
000150B6 0001                       word_1E0A6:	dc 1
000150B8 F008                       	dc $F008
000150BA 0001                       word_1E0AA:	dc 1
000150BC F018                       	dc $F018
000150BE 0001                       word_1E0AE:	dc 1
000150C0 F028                       	dc $F028
000150C2 0001                       word_1E0B2:	dc 1
000150C4 F038                       	dc $F038
000150C6 0001                       word_1E0B6:	dc 1
000150C8 F048                       	dc $F048
000150CA 0001                       word_1E0BA:	dc 1
000150CC 7058                       	dc $7058
000150CE 0001                       word_1E0BE:	dc 1
000150D0 7060                       	dc $7060
000150D2 0001                       word_1E0C2:	dc 1
000150D4 7068                       	dc $7068
000150D6 0001                       word_1E0C6:	dc 1
000150D8 7070                       	dc $7070
000150DA 0001                       word_1E0CA:	dc 1
000150DC 7078                       	dc $7078
000150DE 0001                       word_1E0CE:	dc 1
000150E0 7080                       	dc $7080
000150E2 0002                       word_1E0D2:	dc 2
000150E4 1088                       	dc $1088
000150E6 708A                       	dc $708A
000150E8 0002                       word_1E0D8:	dc 2
000150EA 3092                       	dc $3092
000150EC 7096                       	dc $7096
000150EE 0002                       word_1E0DE:	dc 2
000150F0 509E                       	dc $509E
000150F2 70A4                       	dc $70A4
000150F4 0002                       word_1E0E4:	dc 2
000150F6 50AC                       	dc $50AC
000150F8 70B2                       	dc $70B2
000150FA 0000                       word_1E0EA:	dc 0
000150FC 0001                       word_1E0EC:	dc 1
000150FE F0BA                       	dc $F0BA
00015100                            	even
00015100                            
00015100                            ; ===========================================================================
00015100                            
00015100                            LoadPlayerPal:
00015100 7000                       		moveq	#0,d0
00015102 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015106 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
0001510A 4E75                       		rts
0001510C                            
0001510C                            	@palLUT:
0001510C 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015111 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
00015116                            
00015116                            LoadPlayerWaterPal:
00015116 7000                       		moveq	#0,d0
00015118 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001511C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015120 4E75                       		rts
00015122                            
00015122                            	@palLUT:
00015122 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015127 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
0001512C                            
0001512C                            ; ---------------------------------------------------------------------------
0001512C                            ; Object 01 - Sonic
0001512C                            ; ---------------------------------------------------------------------------
0001512C                            
0001512C                            SonicPlayer:
0001512C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015130 6700                       		beq.s	Sonic_Normal	; if not, branch
00015132 4EF9 0000 0000             		jmp	(DebugMode).l
00015138                            ; ===========================================================================
00015138                            
00015138                            Sonic_Normal:
00015138 7000                       		moveq	#0,d0
0001513A 1028 0024                  		move.b	obRoutine(a0),d0
0001513E 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015142 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015146                            ; ===========================================================================
00015146 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015148 0000                       		dc.w Sonic_Control-Sonic_Index
0001514A 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001514C 0000                       		dc.w Sonic_Death-Sonic_Index
0001514E 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015150                            ; ===========================================================================
00015150                            
00015150                            Sonic_Main:	; Routine 0
00015150 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015156 5428 0024                  		addq.b	#2,obRoutine(a0)
0001515A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015160 117C 0009 0017             		move.b	#9,obWidth(a0)
00015166 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001516E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015174 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001517A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015180 117C 0004 0001             		move.b	#4,obRender(a0)
00015186 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001518C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015192 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015198 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001519E                            
0001519E                            Sonic_Control:    ; Routine 2
0001519E 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000151A2 6700 0000                  		beq.w	@cont    
000151A6 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000151A8                             
000151A8                            	@cont: 
000151A8 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000151AC 6700                       		beq.s    loc_12C58    ; if not, branch
000151AE 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000151B4 6700                       		beq.s    loc_12C58    ; if not, branch
000151B6 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000151BC 4238 F7CC                  		clr.b    (f_lockctrl).w
000151C0 4E75                       		rts
000151C2                            		
000151C2                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Subroutine to    horizontally pan the camera view ahead of the player
000151C2                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            
000151C2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000151C2                            
000151C2                            
000151C2                            Sonic_PanCamera:
000151C2 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000151C6 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000151CA 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000151CC 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000151CE                            
000151CE                                @abs_inertia:
000151CE                            
000151CE                            ; These lines were intended to prevent the Camera from panning while
000151CE                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000151CE                            ; However, given that no such object exists in Sonic 1, I just went
000151CE                            ; ahead and commented these out.
000151CE                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000151CE                            ;        beq.s    @skip                    ; if not, branch
000151CE                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000151CE                            ;        bcs.s    @reset_pan                ; if so, branch
000151CE                            
000151CE                            ; These lines aren't part of the original routine; I added them myself.
000151CE                            ; If you've ported the Spin Dash, uncomment the following lines of code
000151CE                            ; to allow the camera to pan ahead while charging the Spin Dash:
000151CE 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000151D2 6700                               beq.s    @skip                    ; if not, branch
000151D4 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000151DA 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000151DC 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000151DE                            
000151DE                                @skip:
000151DE 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000151E2 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000151E4 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000151E8 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000151EA                            
000151EA                                @pan_right:
000151EA 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000151EC 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000151F0 6500                               bcs.s    @update_pan                ; if not, branch
000151F2 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000151F6 6000                               bra.s    @update_pan                ; branch
000151F8                            ; ---------------------------------------------------------------------------
000151F8                            
000151F8                                @pan_left:
000151F8 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000151FA 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000151FE 6400                               bcc.s    @update_pan                ; if not, branch
00015200 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
00015204 6000                               bra.s    @update_pan                ; branch
00015206                            ; ---------------------------------------------------------------------------
00015206                            
00015206                                @reset_pan:
00015206 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
0001520A 6700                               beq.s    @update_pan                ; if so, branch
0001520C 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
0001520E                                 
0001520E                                @reset_right:
0001520E 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015210 6000                               bra.s    @update_pan                ; branch
00015212                            ; ---------------------------------------------------------------------------
00015212                            
00015212                                @reset_left:
00015212 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015214                            
00015214                                @update_pan:
00015214 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015218 4E75                               rts                                ; return
0001521A                                 
0001521A                            ; End of function Sonic_PanCamera
0001521A                            
0001521A                            
0001521A                            ; ===========================================================================
0001521A                            
0001521A                            loc_12C58:
0001521A 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
0001521E 6600                       		bne.s	loc_12C64	; if yes, branch
00015220 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015226                            
00015226                            loc_12C64:
00015226 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001522C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001522E 7000                       		moveq	#0,d0
00015230 1028 0022                  		move.b	obStatus(a0),d0
00015234 0240 0006                  		andi.w	#6,d0
00015238 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001523C 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015240                            
00015240                            loc_12C7E:
00015240 6100                       		bsr.s	Sonic_Display
00015242 6100 0000                  		bsr.w	Sonic_RecordPosition
00015246 6100 0000                  		bsr.w	Sonic_Water
0001524A 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015250 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015256 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001525A 6700                       		beq.s	loc_12CA6
0001525C 4A28 001C                  		tst.b	obAnim(a0)
00015260 6600                       		bne.s	loc_12CA6
00015262 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015268                            
00015268                            loc_12CA6:
00015268 6100 0000                  		bsr.w	Sonic_Animate
0001526C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015270 6B00                       		bmi.s	loc_12CB6
00015272 4EB9 0000 0000             		jsr	(ReactToItem).l
00015278                            
00015278                            loc_12CB6:
00015278 6100 0000                  		bsr.w	Sonic_Loops
0001527C 6100 0000                  		bsr.w	Sonic_LoadGfx
00015280 4E75                       		rts	
00015282                            ; ===========================================================================
00015282 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015284 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015286 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015288 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001528A                            ; ---------------------------------------------------------------------------
0001528A                            ; Music	to play	after invincibility wears off
0001528A                            ; ---------------------------------------------------------------------------
0001528A                            MusicList2:
0001528A 00                         		dc.b bgm_GHZ
0001528B 00                         		dc.b bgm_LZ
0001528C 00                         		dc.b bgm_MZ
0001528D 00                         		dc.b bgm_SLZ
0001528E 00                         		dc.b bgm_SYZ
0001528F 00                         		dc.b bgm_SBZ
00015290                            		; The ending doesn't get an entry
00015290                            		even
00015290                            
00015290                            		include	"_incObj\Sonic Display.asm"
00015290                            ; ---------------------------------------------------------------------------
00015290                            ; Subroutine to display Sonic and set music
00015290                            ; ---------------------------------------------------------------------------
00015290                            
00015290                            Sonic_Display:
00015290 3028 0030                  		move.w    flashtime(a0),d0
00015294 6700                       		beq.s    @showAfterImage
00015296 5368 0030                  		subq.w    #1,flashtime(a0)
0001529A E648                               	lsr.w    #3,d0
0001529C 6400                               	bcc.s    @chkinvincible
0001529E                            
0001529E                            	@showAfterImage:
0001529E 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000152A2 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000152A4 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000152A6 4440                       		neg        d0                    ; if not, negate it
000152A8                            
000152A8                            	@AfterImage_Start:        
000152A8 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000152AC 6700                       		beq.s	@display	; if not, don't show the After Image
000152AE                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000152AE                            		;blt.s    @display	; if not, don't show the After Image
000152AE                            	
000152AE                            	@AfterImage_Start2:    
000152AE 6100 A91E                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000152B2 6600                               	bne.s    @display    ; if not have, don't load the After Image
000152B4 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000152B8 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000152BE 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000152C4 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000152CA                            
000152CA                                	@display:
000152CA 4EB9 0000 F742                     	jsr    (DisplaySprite).l
000152D0                            
000152D0                            	@chkinvincible:
000152D0 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000152D4 6700                       		beq.s	@chkshoes	; if not, branch
000152D6 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000152DA 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000152DC 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000152E0 6600                       		bne.s	@chkshoes
000152E2 4A38 F7AA                  		tst.b	(f_lockscreen).w
000152E6 6600                       		bne.s	@removeinvincible
000152E8 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000152EE 6500                       		bcs.s	@removeinvincible
000152F0 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000152F4 4EB9 0000 0FC6                     	jsr	(PlaySound).l    ; play normal music
000152FA                            
000152FA                            	@removeinvincible:
000152FA 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015300                            
00015300                            	@chkshoes:
00015300 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015304 6700                       		beq.s	@exit		; if not, branch
00015306 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
0001530A 6700                       		beq.s	@exit
0001530C 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015310 6600                       		bne.s	@exit
00015312 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015318 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001531E 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015324 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001532A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001532E 4EB9 0000 0FC6                     	jsr	(PlaySound).l    ; play normal music
00015334                            		
00015334                            	@exit:
00015334 4E75                       		rts	
00015334 4E75                       		rts	
00015336                            		include	"_incObj\Sonic RecordPosition.asm"
00015336                            ; ---------------------------------------------------------------------------
00015336                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015336                            ; ---------------------------------------------------------------------------
00015336                            
00015336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015336                            
00015336                            
00015336                            Sonic_RecordPosition:
00015336 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001533A 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001533E 43F1 0000                  		lea	(a1,d0.w),a1
00015342 32E8 0008                  		move.w	obX(a0),(a1)+
00015346 32E8 000C                  		move.w	obY(a0),(a1)+
0001534A 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001534E 4E75                       		rts	
00015350                            ; End of function Sonic_RecordPosition
00015350                            ; End of function Sonic_RecordPosition
00015350                            		include	"_incObj\Sonic Water.asm"
00015350                            ; ---------------------------------------------------------------------------
00015350                            ; Subroutine for Sonic when he's underwater
00015350                            ; ---------------------------------------------------------------------------
00015350                            
00015350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015350                            
00015350                            
00015350                            Sonic_Water:
00015350 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015356 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015358 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001535E 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015360                            
00015360                            	Sonic_Water_Exit:
00015360 4E75                       		rts	
00015362                            ; ===========================================================================
00015362                            
00015362                            	Sonic_Water_LZ:
00015362 3038 F646                  		move.w	(v_waterpos1).w,d0
00015366 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001536A 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001536E 6000 0000                  		bra	WaterStatus
00015372                            	WaterTagforMZ:
00015372 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015378 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001537C                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0001537C                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0001537C                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001537C                            	;	jsr	Palload_Loop
0001537C                            	WaterStatus:
0001537C 08E8 0006 0022             		bset	#6,obStatus(a0)
00015382 6600 FFDC                  		bne.w	Sonic_Water_Exit
00015386 6100 0000                  		bsr.w	ResumeMusic
0001538A 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015390                            
00015390 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015396 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001539C 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000153A2 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000153A8 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000153AE E0E8 0010                  		asr	obVelX(a0)
000153B2 E0E8 0012                  		asr	obVelY(a0)
000153B6 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000153BA 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000153BE                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000153BE 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000153CE 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000153D4 6600 0000                  		bne.w	@return
000153D8                            		
000153D8                            		
000153D8                            	@return:
000153D8 4E75                       		rts
000153DA                            ; ===========================================================================
000153DA                            
000153DA                            Abovewater:
000153DA 08A8 0006 0022             		bclr	#6,obStatus(a0)
000153E0 6700 FF7E                  		beq.w	Sonic_Water_Exit
000153E4 6100 0000                  		bsr.w	ResumeMusic
000153E8 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000153EE                            
000153EE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000153F4 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000153FA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015400 E1E8 0012                  		asl	obVelY(a0)
00015404 6700 FF5A                  		beq.w	Sonic_Water_Exit
00015408 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
0001540E 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015414 6E00                       		bgt.s	@belowmaxspeed
00015416 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001541C                            
0001541C                            	@belowmaxspeed:
00015426                            ; End of function Sonic_Water
00015426                            ; End of function Sonic_Water
00015426                            		include "_incObj\03 Hangable Sprite.asm"
00015426                            ; ===========================================================================
00015426                            ; ----------------------------------------------------------------------------
00015426                            ; Object 03 - Invisible sprite that you can hang on to
00015426                            ; ----------------------------------------------------------------------------
00015426                            ; Sprite_2C92C:
00015426                            Obj03:
00015426 7000                       	moveq    #0,d0
00015428 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001542C 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015430 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015434                            ; ===========================================================================
00015434                            ; off_2C93A:
00015434                            Obj03_Index:
00015434 0000                           dc.w Obj03_Main-Obj03_Index
00015436 0000                               dc.w Obj03_Init-Obj03_Index
00015438                            ; ===========================================================================
00015438                            ; loc_2C93E:
00015438                            Obj03_Init:
00015438 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001543C 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015442 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015448 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001544E                            ; loc_2C954:
0001544E                            Obj03_Main:
0001544E 45E8 0030                      lea    $30(a0),a2
00015452 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015456 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001545A 6100                           bsr.s    Obj03_Check
0001545C                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001545C                            ;    addq.w    #1,a2                          ;disabled
0001545C                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001545C                            ;    bsr.s    Obj03_Check         	;disabled
0001545C 4EF9 0000 0000             	jmp		bonu_chkdel
00015462                            ; ===========================================================================
00015462                            ; loc_2C972:
00015462                            Obj03_Check:
00015462 4A12                       		tst.b	(a2)
00015464 6700                       		beq.s	loc_2C9A0
00015466 0200 0070                  		andi.b	#btnABC,d0
0001546A 6700 0000                  		beq.w	Obj03_Check_End
0001546E 4238 F7C8                  		clr.b	f_lockmulti.w
00015472 4212                       		clr.b	(a2)
00015474 157C 0012 0002             		move.b	#$12,2(a2)
0001547A 0240 0F00                  		andi.w	#$F00,d0
0001547E 6700                       		beq.s	loc_2C954
00015480 157C 003C 0002             		move.b	#$3C,2(a2)
00015486                            	
00015486                            loc_2C954:
00015486 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001548C 6000 0000                  		bra.w	Obj03_Check_End
00015490                            ; ===========================================================================
00015490                            
00015490                            loc_2C9A0:
00015490 4A2A 0002                  		tst.b	2(a2)
00015494 6700                       		beq.s	loc_2C972
00015496 532A 0002                  		subq.b	#1,2(a2)
0001549A 6600 0000                  		bne.w	Obj03_Check_End
0001549E                            
0001549E                            loc_2C972:
0001549E 3029 0008                  		move.w	obX(a1),d0
000154A2 9068 0008                  		sub.w	obX(a0),d0
000154A6 0640 0018                  		addi.w	#$18,d0
000154AA 0C40 0030                  		cmpi.w	#$30,d0
000154AE 6400 0000                  		bhs.w	Obj03_Check_End
000154B2 3229 000C                  		move.w	obY(a1),d1
000154B6 9268 000C                  		sub.w	obY(a0),d1
000154BA 0C41 0010                  		cmpi.w	#$10,d1
000154BE 6400 0000                  		bhs.w	Obj03_Check_End
000154C2 4A38 F7C8                  		tst.b	f_lockmulti.w
000154C6 6B00                       		bmi.s	Obj03_Check_End
000154C8 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000154CE 6400                       		bhs.s	Obj03_Check_End
000154D0 4A78 FFFA                  		tst.w	(f_debugmode).w
000154D4 6600                       		bne.s	Obj03_Check_End
000154D6 4269 0010                  		clr.w	x_vel(a1)
000154DA 4269 0012                  		clr.w	y_vel(a1)
000154DE 4269 0020                  		clr.w	obInertia(a1)
000154E2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000154E8 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000154EE 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
000154F4 14BC 0001                  		move.b	#1,(a2)
000154F8                            
000154F8                            ; return_2CA08:
000154F8                            Obj03_Check_End:
000154F8 4E75                       		rts
000154F8 4E75                       		rts
000154FA                            
000154FA                            ; ===========================================================================
000154FA                            ; ---------------------------------------------------------------------------
000154FA                            ; Modes	for controlling	Sonic
000154FA                            ; ---------------------------------------------------------------------------
000154FA                            
000154FA                            Sonic_MdNormal:
000154FA 6100 0000                  		bsr.w	Sonic_Peelout
000154FE 6100 0000                  		bsr.w	Sonic_SpinDash
00015502 6100 0000                  		bsr.w	Sonic_Jump
00015506 6100 0000                  		bsr.w	Sonic_SlopeResist
0001550A 6100 0000                  		bsr.w	Sonic_Move
0001550E 6100 0000                  		bsr.w	Sonic_Roll
00015512 6100 0000                  		bsr.w	Sonic_LevelBound
00015516 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001551C 6100 0000                  		bsr.w	Sonic_AnglePos
00015520 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015524 4E75                       		rts	
00015526                            
00015526                            ; ===========================================================================
00015526                            
00015526                            Sonic_MdJump:
00015526 6100 0000                  		bsr.w   Sonic_AirRoll
0001552A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001552E 6100 0000                  		bsr.w	Sonic_JumpDirection
00015532 6100 0000                  		bsr.w	Sonic_LevelBound
00015536 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001553C 0828 0006 0022             		btst	#6,obStatus(a0)
00015542 6700                       		beq.s	loc_12E5C
00015544 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001554A                            
0001554A                            loc_12E5C:
0001554A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001554E 6100 0000                  		bsr.w	Sonic_Floor
00015552 4E75                       		rts	
00015554                            ; ===========================================================================
00015554                            
00015554                            Sonic_MdRoll:
00015554 6100 0000                  		bsr.w	Sonic_Jump
00015558 6100 0000                  		bsr.w	Sonic_RollRepel
0001555C 6100 0000                  		bsr.w	Sonic_RollSpeed
00015560 6100 0000                  		bsr.w	Sonic_LevelBound
00015564 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001556A 6100 0000                  		bsr.w	Sonic_AnglePos
0001556E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015572 4E75                       		rts	
00015574                            ; ===========================================================================
00015574                            
00015574                            Sonic_MdJump2:
00015574 6100 0000                  		bsr.w	Sonic_JumpHeight
00015578 6100 0000                  		bsr.w	Sonic_JumpDirection
0001557C 6100 0000                  		bsr.w	Sonic_LevelBound
00015580 4EB9 0000 F6F6             		jsr	(ObjectFall).l
00015586 0828 0006 0022             		btst	#6,obStatus(a0)
0001558C 6700                       		beq.s	loc_12EA6
0001558E 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015594                            
00015594                            loc_12EA6:
00015594 6100 0000                  		bsr.w	Sonic_JumpAngle
00015598 6100 0000                  		bsr.w	Sonic_Floor
0001559C 4E75                       		rts	
0001559E                            
0001559E                            		include	"_incObj\Sonic Move.asm"
0001559E                            ; ---------------------------------------------------------------------------
0001559E                            ; Subroutine to	make Sonic walk/run
0001559E                            ; ---------------------------------------------------------------------------
0001559E                            
0001559E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001559E                            
0001559E                            
0001559E                            Sonic_Move:
0001559E 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000155A2 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000155A6 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000155AA 4A38 F7CA                  		tst.b	(f_jumponly).w
000155AE 6600 0000                  		bne.w	loc_12FEE
000155B2 4A68 003E                  		tst.w	$3E(a0)
000155B6 6600 0000                  		bne.w	Sonic_ResetScr
000155BA 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000155C0 6700                       		beq.s	@notleft	; if not, branch
000155C2 6100 0000                  		bsr.w	Sonic_MoveLeft
000155C6                            
000155C6                            	@notleft:
000155C6 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000155CC 6700                       		beq.s	@notright	; if not, branch
000155CE 6100 0000                  		bsr.w	Sonic_MoveRight
000155D2                            
000155D2                            	@notright:
000155D2 1028 0026                  		move.b	obAngle(a0),d0
000155D6 0600 0020                  		addi.b	#$20,d0
000155DA 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000155DE 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000155E2 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000155E6 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000155EA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000155F0 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000155F6 0828 0003 0022             		btst	#3,obStatus(a0)
000155FC 6700                       		beq.s	Sonic_Balance
000155FE 7000                       		moveq	#0,d0
00015600 1028 003D                  		move.b	$3D(a0),d0
00015604 ED48                       		lsl.w	#6,d0
00015606 43F8 D000                  		lea	(v_objspace).w,a1
0001560A 43F1 0000                  		lea	(a1,d0.w),a1
0001560E 4A29 0022                  		tst.b	obStatus(a1)
00015612 6B00                       		bmi.s	Sonic_LookUp
00015614 7200                       		moveq	#0,d1
00015616 1229 0014                  		move.b	obActWid(a1),d1
0001561A 3401                       		move.w	d1,d2
0001561C D442                       		add.w	d2,d2
0001561E 5942                       		subq.w	#4,d2
00015620 D268 0008                  		add.w	obX(a0),d1
00015624 9269 0008                  		sub.w	obX(a1),d1
00015628 0C41 0004                  		cmpi.w	#4,d1
0001562C 6D00                       		blt.s	loc_12F6A
0001562E B242                       		cmp.w	d2,d1
00015630 6C00                       		bge.s	loc_12F5A
00015632 6000                       		bra.s	Sonic_LookUp
00015634                            ; ===========================================================================
00015634                            
00015634                            Sonic_Balance:
00015634 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001563A 0C41 000C                  		cmpi.w	#$C,d1
0001563E 6D00                       		blt.s	Sonic_LookUp
00015640 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015646 6600                       		bne.s	loc_12F62
00015648                            
00015648                            loc_12F5A:
00015648 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001564E 6000                       		bra.s	loc_12F70
00015650                            ; ===========================================================================
00015650                            
00015650                            loc_12F62:
00015650 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015656 6600                       		bne.s	Sonic_LookUp
00015658                            
00015658                            loc_12F6A:
00015658 08E8 0000 0022             		bset	#0,obStatus(a0)
0001565E                            
0001565E                            loc_12F70:
0001565E 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015664 6000 0000                  		bra.w	Sonic_ResetScr
00015668                            ; ===========================================================================
00015668                            
00015668                            Sonic_LookUp:
00015668 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001566E 6700                       		beq.s	Sonic_Duck	; if not, branch
00015670 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00015676 5238 C903                  		addq.b	#1,($FFFFC903).w
0001567A 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00015680 6500                       		bcs.s	Sonic_ResetScr_Part2
00015682 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00015688 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001568E 6700                       		beq.s	loc_12FC2
00015690 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00015694 6000                       		bra.s	loc_12FC2
00015696                            ; ===========================================================================
00015696                            
00015696                            Sonic_Duck:
00015696 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001569C 6700                       		beq.s	Sonic_ResetScr	; if not, branch
0001569E 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000156A4 5238 C903                  		addq.b	#1,($FFFFC903).w
000156A8 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000156AE 6500                       		bcs.s	Sonic_ResetScr_Part2
000156B0 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000156B6 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000156BC 6700                       		beq.s	loc_12FC2
000156BE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000156C2 6000                       		bra.s	loc_12FC2
000156C4                            ; ===========================================================================
000156C4                            
000156C4                            Sonic_ResetScr:
000156C4 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000156CA                            		
000156CA                            Sonic_ResetScr_Part2:
000156CA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000156D0 6700                       		beq.s	loc_12FC2	; if yes, branch
000156D2 6400                       		bcc.s	loc_12FBE
000156D4 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000156D8                            
000156D8                            loc_12FBE:
000156D8 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000156DC                            
000156DC                            loc_12FC2:
000156DC 1038 F602                  		move.b	(v_jpadhold2).w,d0
000156E0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000156E4 6600                       		bne.s	loc_12FEE	; if yes, branch
000156E6 3028 0020                  		move.w	obInertia(a0),d0
000156EA 6700                       		beq.s	loc_12FEE
000156EC 6B00                       		bmi.s	loc_12FE2
000156EE 9045                       		sub.w	d5,d0
000156F0 6400                       		bcc.s	loc_12FDC
000156F2 303C 0000                  		move.w	#0,d0
000156F6                            
000156F6                            loc_12FDC:
000156F6 3140 0020                  		move.w	d0,obInertia(a0)
000156FA 6000                       		bra.s	loc_12FEE
000156FC                            ; ===========================================================================
000156FC                            
000156FC                            loc_12FE2:
000156FC D045                       		add.w	d5,d0
000156FE 6400                       		bcc.s	loc_12FEA
00015700 303C 0000                  		move.w	#0,d0
00015704                            
00015704                            loc_12FEA:
00015704 3140 0020                  		move.w	d0,obInertia(a0)
00015708                            
00015708                            loc_12FEE:
00015708 4A28 0039                  		tst.b	$39(a0) 	;Peelout
0001570C 6600                       		bne.s	loc_1300C 	;Peelout
0001570E 1028 0026                  		move.b	obAngle(a0),d0
00015712 4EB9 0000 37AE             		jsr	(CalcSine).l
00015718 C3E8 0020                  		muls.w	obInertia(a0),d1
0001571C E081                       		asr.l	#8,d1
0001571E 3141 0010                  		move.w	d1,obVelX(a0)
00015722 C1E8 0020                  		muls.w	obInertia(a0),d0
00015726 E080                       		asr.l	#8,d0
00015728 3140 0012                  		move.w	d0,obVelY(a0)
0001572C                            
0001572C                            loc_1300C:
0001572C 1028 0026                  		move.b	obAngle(a0),d0
00015730 0600 0040                  		addi.b	#$40,d0
00015734 6B00                       		bmi.s	locret_1307C
00015736 123C 0040                  		move.b	#$40,d1
0001573A 4A68 0020                  		tst.w	obInertia(a0)
0001573E 6700                       		beq.s	locret_1307C
00015740 6B00                       		bmi.s	loc_13024
00015742 4441                       		neg.w	d1
00015744                            
00015744                            loc_13024:
00015744 1028 0026                  		move.b	obAngle(a0),d0
00015748 D001                       		add.b	d1,d0
0001574A 3F00                       		move.w	d0,-(sp)
0001574C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015750 301F                       		move.w	(sp)+,d0
00015752 4A41                       		tst.w	d1
00015754 6A00                       		bpl.s	locret_1307C
00015756 E141                       		asl.w	#8,d1
00015758 0600 0020                  		addi.b	#$20,d0
0001575C 0200 00C0                  		andi.b	#$C0,d0
00015760 6700                       		beq.s	loc_13078
00015762 0C00 0040                  		cmpi.b	#$40,d0
00015766 6700                       		beq.s	loc_13066
00015768 0C00 0080                  		cmpi.b	#$80,d0
0001576C 6700                       		beq.s	loc_13060
0001576E D368 0010                  		add.w	d1,obVelX(a0)
00015772 08E8 0005 0022             		bset	#5,obStatus(a0)
00015778 317C 0000 0020             		move.w	#0,obInertia(a0)
0001577E 4E75                       		rts	
00015780                            ; ===========================================================================
00015780                            
00015780                            loc_13060:
00015780 9368 0012                  		sub.w	d1,obVelY(a0)
00015784 4E75                       		rts	
00015786                            ; ===========================================================================
00015786                            
00015786                            loc_13066:
00015786 9368 0010                  		sub.w	d1,obVelX(a0)
0001578A 08E8 0005 0022             		bset	#5,obStatus(a0)
00015790 317C 0000 0020             		move.w	#0,obInertia(a0)
00015796 4E75                       		rts	
00015798                            ; ===========================================================================
00015798                            
00015798                            loc_13078:
00015798 D368 0012                  		add.w	d1,obVelY(a0)
0001579C                            
0001579C                            locret_1307C:
0001579C 4E75                       		rts	
0001579E                            ; End of function Sonic_Move
0001579E                            
0001579E                            
0001579E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001579E                            
0001579E                            
0001579E                            Sonic_MoveLeft:
0001579E 3028 0020                  		move.w	obInertia(a0),d0
000157A2 6700                       		beq.s	loc_13086
000157A4 6A00                       		bpl.s	loc_130B2
000157A6                            
000157A6                            loc_13086:
000157A6 08E8 0000 0022             		bset	#0,$22(a0)
000157AC 6600                       		bne.s	loc_1309A
000157AE 08A8 0005 0022             		bclr	#5,$22(a0)
000157B4 117C 0001 001D             		move.b	#1,$1D(a0)
000157BA                            
000157BA                            loc_1309A:
000157BA 9045                       		sub.w	d5,d0
000157BC 3206                       		move.w	d6,d1
000157BE 4441                       		neg.w	d1
000157C0 B041                       		cmp.w	d1,d0
000157C2 6E00                       		bgt.s	loc_130A6
000157C4 D045                       		add.w	d5,d0
000157C6 B041                       		cmp.w	d1,d0
000157C8 6F00                       		ble.s	loc_130A6
000157CA 3001                       		move.w	d1,d0
000157CC                            
000157CC                            loc_130A6:
000157CC 3140 0020                  		move.w	d0,obInertia(a0)
000157D0 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000157D6 4E75                       		rts
000157D8                            ; ===========================================================================
000157D8                            
000157D8                            loc_130B2:
000157D8 9044                       		sub.w	d4,d0
000157DA 6400                       		bcc.s	loc_130BA
000157DC 303C FF80                  		move.w	#-$80,d0
000157E0                            
000157E0                            loc_130BA:
000157E0 3140 0020                  		move.w	d0,obInertia(a0)
000157E4 1228 0026                  		move.b	obAngle(a0),d1
000157E8 0601 0020                  		addi.b	#$20,d1
000157EC 0201 00C0                  		andi.b	#$C0,d1
000157F0 6600                       		bne.s	locret_130E8
000157F2 0C40 0400                  		cmpi.w	#$400,d0
000157F6 6D00                       		blt.s	locret_130E8
000157F8 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000157FE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001580E 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015814 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
0001581A                            		
0001581A                            locret_130E8:
0001581A 4E75                       		rts	
0001581C                            ; End of function Sonic_MoveLeft
0001581C                            
0001581C                            
0001581C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001581C                            
0001581C                            
0001581C                            Sonic_MoveRight:
0001581C 3028 0020                  		move.w	obInertia(a0),d0
00015820 6B00                       		bmi.s	loc_13118
00015822 08A8 0000 0022             		bclr	#0,$22(a0)
00015828 6700                       		beq.s	loc_13104
0001582A 08A8 0005 0022             		bclr	#5,$22(a0)
00015830 117C 0001 001D             		move.b	#1,$1D(a0)
00015836                            
00015836                            loc_13104:
00015836 D045                       		add.w	d5,d0
00015838 B046                       		cmp.w	d6,d0
0001583A 6D00                       		blt.s	loc_1310C
0001583C 9045                       		sub.w	d5,d0
0001583E B046                       		cmp.w	d6,d0
00015840 6C00                       		bge.s	loc_1310C
00015842 3006                       		move.w	d6,d0
00015844                            
00015844                            loc_1310C:
00015844 3140 0020                  		move.w	d0,obInertia(a0)
00015848 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001584E 4E75                       		rts
00015850                            ; ===========================================================================
00015850                            
00015850                            loc_13118:
00015850 D044                       		add.w	d4,d0
00015852 6400                       		bcc.s	loc_13120
00015854 303C 0080                  		move.w	#$80,d0
00015858                            
00015858                            loc_13120:
00015858 3140 0020                  		move.w	d0,obInertia(a0)
0001585C 1228 0026                  		move.b	obAngle(a0),d1
00015860 0601 0020                  		addi.b	#$20,d1
00015864 0201 00C0                  		andi.b	#$C0,d1
00015868 6600                       		bne.s	locret_1314E
0001586A 0C40 FC00                  		cmpi.w	#-$400,d0
0001586E 6E00                       		bgt.s	locret_1314E
00015870 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015876 08E8 0000 0022             		bset	#0,obStatus(a0)
00015886 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001588C 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015892                            		
00015892                            locret_1314E:
00015892 4E75                       		rts	
00015894                            ; End of function Sonic_MoveRight
00015894                            ; End of function Sonic_MoveRight
00015894                            		include	"_incObj\Sonic RollSpeed.asm"
00015894                            ; ---------------------------------------------------------------------------
00015894                            ; Subroutine to	change Sonic's speed as he rolls
00015894                            ; ---------------------------------------------------------------------------
00015894                            
00015894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015894                            
00015894                            
00015894                            Sonic_RollSpeed:
00015894 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015898 E346                       		asl.w	#1,d6
0001589A 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
0001589C 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000158A0 E444                       		asr.w	#2,d4
000158A2 4A38 F7CA                  		tst.b	(f_jumponly).w
000158A6 6600 0000                  		bne.w	loc_131CC
000158AA 4A68 003E                  		tst.w	$3E(a0)
000158AE 6600                       		bne.s	@notright
000158B0 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000158B6 6700                       		beq.s	@notleft	; if not, branch
000158B8 6100 0000                  		bsr.w	Sonic_RollLeft
000158BC                            
000158BC                            	@notleft:
000158BC 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000158C2 6700                       		beq.s	@notright	; if not, branch
000158C4 6100 0000                  		bsr.w	Sonic_RollRight
000158C8                            
000158C8                            	@notright:
000158C8 3028 0020                  		move.w	obInertia(a0),d0
000158CC 6700                       		beq.s	loc_131AA
000158CE 6B00                       		bmi.s	loc_1319E
000158D0 9045                       		sub.w	d5,d0
000158D2 6400                       		bcc.s	loc_13198
000158D4 303C 0000                  		move.w	#0,d0
000158D8                            
000158D8                            loc_13198:
000158D8 3140 0020                  		move.w	d0,obInertia(a0)
000158DC 6000                       		bra.s	loc_131AA
000158DE                            ; ===========================================================================
000158DE                            
000158DE                            loc_1319E:
000158DE D045                       		add.w	d5,d0
000158E0 6400                       		bcc.s	loc_131A6
000158E2 303C 0000                  		move.w	#0,d0
000158E6                            
000158E6                            loc_131A6:
000158E6 3140 0020                  		move.w	d0,obInertia(a0)
000158EA                            
000158EA                            loc_131AA:
000158EA 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000158EE 6600                       		bne.s	loc_131CC	; if yes, branch
000158F0 08A8 0002 0022             		bclr	#2,obStatus(a0)
000158F6 117C 0013 0016             		move.b	#$13,obHeight(a0)
000158FC 117C 0009 0017             		move.b	#9,obWidth(a0)
00015902 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015908 5B68 000C                  		subq.w	#5,obY(a0)
0001590C                            
0001590C                            loc_131CC:
0001590C 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015912 6700                       		beq.s	@cont2
00015914 6400                       		bcc.s	@cont1
00015916 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001591A                            		
0001591A                            @cont1:
0001591A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001591E                            		
0001591E                            @cont2:
0001591E 1028 0026                  		move.b	obAngle(a0),d0
00015922 4EB9 0000 37AE             		jsr	(CalcSine).l
00015928 C1E8 0020                  		muls.w	obInertia(a0),d0
0001592C E080                       		asr.l	#8,d0
0001592E 3140 0012                  		move.w	d0,obVelY(a0)
00015932 C3E8 0020                  		muls.w	obInertia(a0),d1
00015936 E081                       		asr.l	#8,d1
00015938 0C41 1000                  		cmpi.w	#$1000,d1
0001593C 6F00                       		ble.s	loc_131F0
0001593E 323C 1000                  		move.w	#$1000,d1
00015942                            
00015942                            loc_131F0:
00015942 0C41 F000                  		cmpi.w	#-$1000,d1
00015946 6C00                       		bge.s	loc_131FA
00015948 323C F000                  		move.w	#-$1000,d1
0001594C                            
0001594C                            loc_131FA:
0001594C 3141 0010                  		move.w	d1,obVelX(a0)
00015950 6000 FDDA                  		bra.w	loc_1300C
00015954                            ; End of function Sonic_RollSpeed
00015954                            
00015954                            
00015954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015954                            
00015954                            
00015954                            Sonic_RollLeft:
00015954 3028 0020                  		move.w	obInertia(a0),d0
00015958 6700                       		beq.s	loc_1320A
0001595A 6A00                       		bpl.s	loc_13218
0001595C                            
0001595C                            loc_1320A:
0001595C 08E8 0000 0022             		bset	#0,obStatus(a0)
00015962 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015968 4E75                       		rts	
0001596A                            ; ===========================================================================
0001596A                            
0001596A                            loc_13218:
0001596A 9044                       		sub.w	d4,d0
0001596C 6400                       		bcc.s	loc_13220
0001596E 303C FF80                  		move.w	#-$80,d0
00015972                            
00015972                            loc_13220:
00015972 3140 0020                  		move.w	d0,obInertia(a0)
00015976 4E75                       		rts	
00015978                            ; End of function Sonic_RollLeft
00015978                            
00015978                            
00015978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015978                            
00015978                            
00015978                            Sonic_RollRight:
00015978 3028 0020                  		move.w	obInertia(a0),d0
0001597C 6B00                       		bmi.s	loc_1323A
0001597E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015984 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001598A 4E75                       		rts	
0001598C                            ; ===========================================================================
0001598C                            
0001598C                            loc_1323A:
0001598C D044                       		add.w	d4,d0
0001598E 6400                       		bcc.s	loc_13242
00015990 303C 0080                  		move.w	#$80,d0
00015994                            
00015994                            loc_13242:
00015994 3140 0020                  		move.w	d0,obInertia(a0)
00015998 4E75                       		rts	
0001599A                            ; End of function Sonic_RollRight
0001599A                            ; End of function Sonic_RollRight
0001599A                            		include	"_incObj\Sonic JumpDirection.asm"
0001599A                            ; ---------------------------------------------------------------------------
0001599A                            ; Subroutine to	change Sonic's direction while jumping
0001599A                            ; ---------------------------------------------------------------------------
0001599A                            
0001599A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001599A                            
0001599A                            
0001599A                            Sonic_JumpDirection:
0001599A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001599E 3A38 F762                  		move.w	($FFFFF762).w,d5
000159A2 E345                       		asl.w	#1,d5
000159A4 3028 0010                  		move.w	$10(a0),d0	
000159A8 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000159AE 6700                       		beq.s	loc_13278; if not, branch	
000159B0 08E8 0000 0022             		bset	#0,$22(a0)	
000159B6 9045                       		sub.w	d5,d0	
000159B8 3206                       		move.w	d6,d1	
000159BA 4441                       		neg.w	d1	
000159BC B041                       		cmp.w	d1,d0	
000159BE 6E00                       		bgt.s	loc_13278	
000159C0 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
000159C2 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
000159C4 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
000159C6 3001                       		move.w	d1,d0
000159C8                            
000159C8                            loc_13278:
000159C8 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
000159CE 6700                       		beq.s	Obj01_JumpMove; if not, branch	
000159D0 08A8 0000 0022             		bclr	#0,$22(a0)	
000159D6 D045                       		add.w	d5,d0	
000159D8 B046                       		cmp.w	d6,d0	
000159DA 6D00                       		blt.s	Obj01_JumpMove
000159DC 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000159DE B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000159E0 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000159E2 3006                       		move.w	d6,d0
000159E4                            
000159E4                            Obj01_JumpMove:
000159E4 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
000159E8                            
000159E8                            Obj01_ResetScr2:
000159E8 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
000159EE 6700                       		beq.s	loc_132A4	; if yes, branch
000159F0 6400                       		bcc.s	loc_132A0
000159F2 5878 F73E                  		addq.w	#4,(v_lookshift).w
000159F6                            
000159F6                            loc_132A0:
000159F6 5578 F73E                  		subq.w	#2,(v_lookshift).w
000159FA                            
000159FA                            loc_132A4:
000159FA 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015A00 6500                       		bcs.s	locret_132D2	; if yes, branch
00015A02 3028 0010                  		move.w	obVelX(a0),d0
00015A06 3200                       		move.w	d0,d1
00015A08 EA41                       		asr.w	#5,d1
00015A0A 6700                       		beq.s	locret_132D2
00015A0C 6B00                       		bmi.s	loc_132C6
00015A0E 9041                       		sub.w	d1,d0
00015A10 6400                       		bcc.s	loc_132C0
00015A12 303C 0000                  		move.w	#0,d0
00015A16                            
00015A16                            loc_132C0:
00015A16 3140 0010                  		move.w	d0,obVelX(a0)
00015A1A 4E75                       		rts	
00015A1C                            ; ===========================================================================
00015A1C                            
00015A1C                            loc_132C6:
00015A1C 9041                       		sub.w	d1,d0
00015A1E 6500                       		bcs.s	loc_132CE
00015A20 303C 0000                  		move.w	#0,d0
00015A24                            
00015A24                            loc_132CE:
00015A24 3140 0010                  		move.w	d0,obVelX(a0)
00015A28                            
00015A28                            locret_132D2:
00015A28 4E75                       		rts	
00015A2A                            ; End of function Sonic_JumpDirection
00015A2A                            ; End of function Sonic_JumpDirection
00015A2A                            		include "_incObj\Sonic Peelout.asm"
00015A2A                            ; ---------------------------------------------------------------------------
00015A2A                            ; Subroutine to make Sonic perform a peelout
00015A2A                            ; ---------------------------------------------------------------------------
00015A2A                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015A2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A2A                            
00015A2A                            Sonic_Peelout:
00015A2A 0828 0001 0039             		btst	#1,$39(a0)
00015A30 6600                       		bne.s	SCDPeelout_Launch
00015A32 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015A38 6600                       		bne.s	@return
00015A3A 1038 F603                  		move.b	($FFFFF603).w,d0
00015A3E 0200 0070                  		andi.b	#%01110000,d0
00015A42 6700 0000                  		beq.w	@return
00015A46 117C 0001 001C             		move.b	#1,$1C(a0)
00015A4C 317C 0000 003A             		move.w	#0,$3A(a0)
00015A52 303C 00D2                  		move.w	#$D2,d0
00015A56 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015A5C                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015A5C 588F                       		addq.l	#4,sp
00015A5E 08E8 0001 0039             		bset	#1,$39(a0)
00015A64                            		
00015A64 4268 0020                  		clr.w	obInertia(a0)
00015A68                             
00015A68 6100 0000                  		bsr.w	Sonic_LevelBound
00015A6C 6100 0000                  		bsr.w	Sonic_AnglePos
00015A70                             
00015A70                            	@return:
00015A70 4E75                       		rts	
00015A72                            ; ---------------------------------------------------------------------------
00015A72                             
00015A72                            SCDPeelout_Launch:
00015A72 0828 0001 0039             		btst	#1,$39(a0)
00015A78 1038 F602                  		move.b	($FFFFF602).w,d0
00015A7C 0800 0000                  		btst	#0,d0
00015A80 6600 0000                  		bne.w	SCDPeelout_Charge
00015A84 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015A8A 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015A90 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015A94 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015A9A 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015AA0 3028 0020                  		move.w	obInertia(a0),d0
00015AA4 0440 0800                  		subi.w	#$800,d0
00015AA8 D040                       		add.w	d0,d0
00015AAA 0240 1F00                  		andi.w	#$1F00,d0
00015AAE 4440                       		neg.w	d0
00015AB0 0640 2000                  		addi.w	#$2000,d0
00015AB4 31C0 C904                  		move.w	d0,($FFFFC904).w
00015AB8 0828 0000 0022             		btst	#0,$22(a0)
00015ABE 6700                       		beq.s	@dontflip
00015AC0 4468 0020                  		neg.w	obInertia(a0)
00015AC4                             
00015AC4                            @dontflip:
00015AC4 08A8 0007 0022             		bclr	#7,$22(a0)
00015ACA 303C 00D3                  		move.w	#$D3,d0
00015ACE 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
00015AD4                            	;	sfx 	sfx_PeeloutRelease
00015AD4 1028 0026                  		move.b	obAngle(a0),d0
00015AD8 4EB9 0000 37AE             		jsr	(CalcSine).l
00015ADE C3E8 0020                  		muls.w	obInertia(a0),d1
00015AE2 E081                       		asr.l	#8,d1
00015AE4 3141 0010                  		move.w	d1,obVelX(a0)
00015AE8 C1E8 0020                  		muls.w	obInertia(a0),d0
00015AEC E080                       		asr.l	#8,d0
00015AEE 3140 0012                  		move.w	d0,obVelY(a0)	
00015AF2 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                             
00015AF6                            SCDPeelout_Charge:				; If still charging the dash...
00015AF6 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015AFA 3401                       		move.w	d1,d2
00015AFC D241                       		add.w	d1,d1
00015AFE 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015B02 6700                       		beq.s	@noshoes
00015B04 E242                       		asr.w	#1,d2
00015B06 9242                       		sub.w	d2,d1
00015B08                            
00015B08                            @noshoes:
00015B08 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015B0E B268 0020                  		cmp.w	obInertia(a0),d1
00015B12 6E00                       		bgt.s	@inctimer
00015B14 3141 0020                  		move.w	d1,obInertia(a0)
00015B18                            
00015B18                            @inctimer:
00015B18 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015B1C 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015B22 6500                       		bcs.s	SCDPeelout_ResetScr
00015B24 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015B2A 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015B30                            		
00015B30                            SCDPeelout_Stop_Sound:
00015B30 303C 00D4                  		move.w	#$D4,d0
00015B34 4EB9 0000 0FCC             		jsr		(PlaySound_Special).l
00015B3A                            	;	sfx 	sfx_PeeloutStop
00015B3A 4268 0020                  		clr.w	obInertia(a0)
00015B3E                            
00015B3E                            SCDPeelout_ResetScr:
00015B3E 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015B40 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015B46 6700                       		beq.s	@finish
00015B48 6400                       		bcc.s	@skip
00015B4A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B4E                             
00015B4E                            	@skip:
00015B4E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B52                             
00015B52                            	@finish:
00015B52 6100 0000                  		bsr.w	Sonic_LevelBound
00015B56 6100 0000                  		bsr.w	Sonic_AnglePos
00015B5A 4E75                       		rts
00015B5C                            		
00015B5C                            		
00015B5C                            		include "_incObj\Sonic Spindash.asm"
00015B5C                            ; ---------------------------------------------------------------------------
00015B5C                            ; Subroutine to make Sonic perform a spindash
00015B5C                            ; ---------------------------------------------------------------------------
00015B5C                             
00015B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B5C                             
00015B5C                             
00015B5C                            Sonic_SpinDash:
00015B5C 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015B60 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015B62 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015B68 6600                       		bne.s	locret2_1AC8C		; if not, return
00015B6A 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015B6E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015B72 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015B76 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015B7C 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015B80 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play spin sound
00015B86 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015B88 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015B8E 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015B94                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015B94                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015B94 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015B9A                            						; the smoke/dust object
00015B9A                            loc2_1AC84:
00015B9A 6100 0000                  		bsr.w	Sonic_LevelBound
00015B9E 6100 0000                  		bsr.w	Sonic_AnglePos
00015BA2                            
00015BA2                            locret2_1AC8C:
00015BA2 4E75                       		rts	
00015BA4                            ; ---------------------------------------------------------------------------
00015BA4                            
00015BA4                            loc2_1AC8E:	
00015BA4 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015BAA 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015BAE 0800 0001                  		btst	#1,d0			; check down button
00015BB2 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015BB6 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015BBC 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015BC2 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015BC8 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015BCC 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015BD2 7000                       		moveq	#0,d0
00015BD4 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015BD8 D040                       		add.w	d0,d0			; double it
00015BDA 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015BE0 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015BE4 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015BE8 D040                       		add.w	d0,d0			; double it
00015BEA 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015BEE 4440                       		neg.w	d0			; negate it
00015BF0 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015BF4 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015BF8 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015BFE 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015C00 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015C04                            
00015C04                            loc2_1ACF4:
00015C04 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015C0A 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015C10 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015C14 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play it!
00015C1A 1028 0026                  		move.b	obAngle(a0),d0
00015C1E 4EB9 0000 37AE             		jsr	(CalcSine).l
00015C24 C3E8 0020                  		muls.w	obInertia(a0),d1
00015C28 E081                       		asr.l	#8,d1
00015C2A 3141 0010                  		move.w	d1,obVelX(a0)
00015C2E C1E8 0020                  		muls.w	obInertia(a0),d0
00015C32 E080                       		asr.l	#8,d0
00015C34 3140 0012                  		move.w	d0,obVelY(a0)
00015C38                            	
00015C38 6000                       		bra.s	loc2_1AD78
00015C3A                            ; ===========================================================================
00015C3A                            Dash_Speeds:
00015C3A 0600                       		dc.w  $600		; 0
00015C3C 0680                       		dc.w  $680		; 1
00015C3E 0700                       		dc.w  $700		; 2
00015C40 0780                       		dc.w  $780		; 3
00015C42 0800                       		dc.w  $800		; 4
00015C44 0880                       		dc.w  $880		; 5
00015C46 0900                       		dc.w  $900		; 6
00015C48 0980                       		dc.w  $980		; 7
00015C4A 0A00                       		dc.w  $A00		; 8
00015C4C                            ; ===========================================================================
00015C4C                            
00015C4C                            loc2_1AD30:				; If still charging the dash...
00015C4C 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015C50 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015C52 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015C56 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015C58 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015C5C 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015C5E 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015C64                            
00015C64                            loc2_1AD48:
00015C64 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015C68 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015C6C 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015C70 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015C76 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015C7A 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015C80 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play charge sound
00015C86 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015C8C 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015C92 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015C94 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015C9A                            
00015C9A                            loc2_1AD78:
00015C9A 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015C9C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015CA2 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015CA4 6400                       		bcc.s	loc2_1AD88
00015CA6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015CAA                            
00015CAA                            loc2_1AD88:
00015CAA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015CAE                            
00015CAE                            loc2_1AD8C:
00015CAE 6100 0000                  		bsr.w	Sonic_LevelBound
00015CB2 6100 0000                  		bsr.w	Sonic_AnglePos
00015CB6                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015CB6 4E75                       		rts
00015CB8                            ; End of subroutine Sonic_SpinDash
00015CB8                            ; End of subroutine Sonic_SpinDash
00015CB8                            
00015CB8                            Sonic_AirRoll:
00015CB8 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015CBE 6600                               bne.s   AirRoll_Return   ; if not, return
00015CC0                            
00015CC0                            AirRoll_CheckBtn:
00015CC0 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015CC4 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015CC8 6700                               beq.s	AirRoll_Return
00015CCA 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015CD0                                   ; move.w	#$BC,d0
00015CD0                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015CD0                            
00015CD0                            AirRoll_Return:
00015CD0 4E75                               rts
00015CD2                            ; ===========================================================================
00015CD2                            ; ---------------------------------------------------------------------------
00015CD2                            ; Unused subroutine to squash Sonic
00015CD2                            ; ---------------------------------------------------------------------------
00015CD2 1028 0026                  		move.b	obAngle(a0),d0
00015CD6 0600 0020                  		addi.b	#$20,d0
00015CDA 0200 00C0                  		andi.b	#$C0,d0
00015CDE 6600                       		bne.s	locret_13302
00015CE0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015CE4 4A41                       		tst.w	d1
00015CE6 6A00                       		bpl.s	locret_13302
00015CE8 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015CEE 317C 0000 0010             		move.w	#0,obVelX(a0)
00015CF4 317C 0000 0012             		move.w	#0,obVelY(a0)
00015CFA 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015D00                            
00015D00                            locret_13302:
00015D00 4E75                       		rts		
00015D02                            		include	"_incObj\Sonic LevelBound.asm"
00015D02                            ; ---------------------------------------------------------------------------
00015D02                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015D02                            ; ---------------------------------------------------------------------------
00015D02                            
00015D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D02                            
00015D02                            
00015D02                            Sonic_LevelBound:
00015D02 2228 0008                  		move.l	obX(a0),d1
00015D06 3028 0010                  		move.w	obVelX(a0),d0
00015D0A 48C0                       		ext.l	d0
00015D0C E180                       		asl.l	#8,d0
00015D0E D280                       		add.l	d0,d1
00015D10 4841                       		swap	d1
00015D12 3038 F728                  		move.w	(v_limitleft2).w,d0
00015D16 0640 0010                  		addi.w	#$10,d0
00015D1A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015D1C 6200                       		bhi.s	@sides		; if yes, branch
00015D1E 3038 F72A                  		move.w	(v_limitright2).w,d0
00015D22 0640 0128                  		addi.w	#$128,d0
00015D26 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015D2A 6600                       		bne.s	@screenlocked
00015D2C 0640 0040                  		addi.w	#$40,d0
00015D30                            
00015D30                            	@screenlocked:
00015D30 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015D32 6300                       		bls.s	@sides		; if yes, branch
00015D34                            
00015D34                            	@chkbottom:
00015D34 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015D38 0640 00E0                  		addi.w	#$E0,d0
00015D3C B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015D40 6D00                       		blt.s	@bottom		; if yes, branch
00015D42 4E75                       		rts	
00015D44                            ; ===========================================================================
00015D44                            
00015D44                            @bottom:
00015D44 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015D48 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015D4C B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015D4E 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015D50 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00015D56 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015D5A 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00015D60 6500 0000                  		bcs.w	Kill_transport
00015D64 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015D68 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015D6E 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015D74 4E75                       		rts	
00015D76                            @dontkill: 
00015D76 4E75                       		rts
00015D78                            ; ===========================================================================
00015D78                            
00015D78                            @sides:
00015D78 3140 0008                  		move.w	d0,obX(a0)
00015D7C 317C 0000 000A             		move.w	#0,obX+2(a0)
00015D82 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015D88 317C 0000 0020             		move.w	#0,obInertia(a0)
00015D8E 60A4                       		bra.s	@chkbottom
00015D90                            
00015D90                            Kill_transport: 
00015D90 4EF9 0000 0000                     	jmp        (KillSonic).l
00015D96                            
00015D96                            ; End of function Sonic_LevelBound
00015D96                            ; End of function Sonic_LevelBound
00015D96                            		include	"_incObj\Sonic Roll.asm"
00015D96                            ; ---------------------------------------------------------------------------
00015D96                            ; Subroutine allowing Sonic to roll when he's moving
00015D96                            ; ---------------------------------------------------------------------------
00015D96                            
00015D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D96                            
00015D96                            
00015D96                            Sonic_Roll:
00015D96 4A38 F7CA                  		tst.b	(f_jumponly).w
00015D9A 6600                       		bne.s	@noroll
00015D9C 3028 0020                  		move.w	obInertia(a0),d0
00015DA0 6A00                       		bpl.s	@ispositive
00015DA2 4440                       		neg.w	d0
00015DA4                            
00015DA4                            	@ispositive:
00015DA4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015DA8 6500                       		bcs.s	@noroll		; if not, branch
00015DAA 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015DAE 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015DB2 6600                       		bne.s	@noroll		; if yes, branch
00015DB4 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015DBA 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015DBC                            
00015DBC                            	@noroll:
00015DBC 4E75                       		rts	
00015DBE                            ; ===========================================================================
00015DBE                            
00015DBE                            Sonic_ChkRoll:
00015DBE 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015DC4 6700                       		beq.s	@roll		; if not, branch
00015DC6 4E75                       		rts	
00015DC8                            ; ===========================================================================
00015DC8                            
00015DC8                            @roll:
00015DC8 08E8 0002 0022             		bset	#2,obStatus(a0)
00015DCE 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015DD4 117C 0007 0017             		move.b	#7,obWidth(a0)
00015DDA 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015DE0 5A68 000C                  		addq.w	#5,obY(a0)
00015DEE 4A68 0020                  		tst.w	obInertia(a0)
00015DF2 6600                       		bne.s	@ismoving
00015DF4 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015DFA                            
00015DFA                            	@ismoving:
00015DFA 4E75                       		rts	
00015DFC                            ; End of function Sonic_Roll
00015DFC                            ; End of function Sonic_Roll
00015DFC                            		include	"_incObj\Sonic Jump.asm"
00015DFC                            ; ---------------------------------------------------------------------------
00015DFC                            ; Subroutine allowing Sonic to jump
00015DFC                            ; ---------------------------------------------------------------------------
00015DFC                            
00015DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DFC                            
00015DFC                            
00015DFC                            Sonic_Jump:
00015DFC 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015E00 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015E04 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015E08 7000                       		moveq	#0,d0
00015E0A 1028 0026                  		move.b	obAngle(a0),d0
00015E0E 0600 0080                  		addi.b	#$80,d0
00015E12 6100 0000                  		bsr.w	sub_14D48
00015E16 0C41 0006                  		cmpi.w	#6,d1
00015E1A 6D00 0000                  		blt.w	locret_1348E
00015E1E 343C 0680                  		move.w	#$680,d2
00015E22 0828 0006 0022             		btst	#6,obStatus(a0)
00015E28 6700                       		beq.s	loc_1341C
00015E2A 343C 0380                  		move.w	#$380,d2
00015E2E                            
00015E2E                            loc_1341C:
00015E2E 7000                       		moveq	#0,d0
00015E30 1028 0026                  		move.b	obAngle(a0),d0
00015E34 0400 0040                  		subi.b	#$40,d0
00015E38 4EB9 0000 37AE             		jsr	(CalcSine).l
00015E3E C3C2                       		muls.w	d2,d1
00015E40 E081                       		asr.l	#8,d1
00015E42 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015E46 C1C2                       		muls.w	d2,d0
00015E48 E080                       		asr.l	#8,d0
00015E4A D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015E4E 08E8 0001 0022             		bset	#1,obStatus(a0)
00015E54 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015E5A 588F                       		addq.l	#4,sp
00015E5C 117C 0001 003C             		move.b	#1,$3C(a0)
00015E62 4228 0038                  		clr.b	$38(a0)
00015E70 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015E76 117C 0009 0017             		move.b	#9,obWidth(a0)
00015E7C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015E82 117C 0007 0017             		move.b	#7,obWidth(a0)
00015E88                            Result_Check:
00015E88 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015E8C 6700                       		beq.s   NormalJump ; If not, branch
00015E8E 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00015E94 6000                       		bra.s   cont ; Continue
00015E96                            NormalJump:
00015E96 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015E9C                            cont:
00015E9C 08E8 0002 0022             		bset	#2,obStatus(a0)
00015EA2 5A68 000C                  		addq.w	#5,obY(a0)
00015EA6                            
00015EA6                            locret_1348E:
00015EA6 4E75                       		rts	
00015EA8                            ; ===========================================================================
00015EA8                            
00015EA8                            ; End of function Sonic_Jump
00015EA8                            ; End of function Sonic_Jump
00015EA8                            		include	"_incObj\Sonic JumpHeight.asm"
00015EA8                            ; ---------------------------------------------------------------------------
00015EA8                            ; Subroutine controlling Sonic's jump height/duration
00015EA8                            ; ---------------------------------------------------------------------------
00015EA8                            
00015EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EA8                            
00015EA8                            
00015EA8                            Sonic_JumpHeight:
00015EA8 4A28 003C                  		tst.b	$3C(a0)
00015EAC 6700                       		beq.s	loc_134C4
00015EAE 323C FC00                  		move.w	#-$400,d1
00015EB2 0828 0006 0022             		btst	#6,obStatus(a0)
00015EB8 6700                       		beq.s	loc_134AE
00015EBA 323C FE00                  		move.w	#-$200,d1
00015EBE                            
00015EBE                            loc_134AE:
00015EBE B268 0012                  		cmp.w	obVelY(a0),d1
00015EC2 6F00                       		ble.s	locret_134C2
00015EC4 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015EC8 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015ECC 6600                       		bne.s	locret_134C2	; if yes, branch
00015ECE 3141 0012                  		move.w	d1,obVelY(a0)
00015ED2                            
00015ED2                            locret_134C2:
00015ED2 4E75                       		rts	
00015ED4                            ; ===========================================================================
00015ED4                            
00015ED4                            loc_134C4:
00015ED4 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015EDA 6C00                       		bge.s	locret_134D2
00015EDC 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015EE2                            
00015EE2                            locret_134D2:
00015EE2 4E75                       		rts	
00015EE4                            ; End of function Sonic_JumpHeight
00015EE4                            ; End of function Sonic_JumpHeight
00015EE4                            		include	"_incObj\Sonic SlopeResist.asm"
00015EE4                            ; ---------------------------------------------------------------------------
00015EE4                            ; Subroutine to	slow Sonic walking up a	slope
00015EE4                            ; ---------------------------------------------------------------------------
00015EE4                            
00015EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EE4                            
00015EE4                            
00015EE4                            Sonic_SlopeResist:
00015EE4 1028 0026                  		move.b	obAngle(a0),d0
00015EE8 0600 0060                  		addi.b	#$60,d0
00015EEC 0C00 00C0                  		cmpi.b	#$C0,d0
00015EF0 6400                       		bcc.s	locret_13508
00015EF2 1028 0026                  		move.b	obAngle(a0),d0
00015EF6 4EB9 0000 37AE             		jsr	(CalcSine).l
00015EFC C1FC 0020                  		muls.w	#$20,d0
00015F00 E080                       		asr.l	#8,d0
00015F02 4A68 0020                  		tst.w	obInertia(a0)
00015F06 6700                       		beq.s	locret_13508
00015F08 6B00                       		bmi.s	loc_13504
00015F0A 4A40                       		tst.w	d0
00015F0C 6700                       		beq.s	locret_13502
00015F0E D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015F12                            
00015F12                            locret_13502:
00015F12 4E75                       		rts	
00015F14                            ; ===========================================================================
00015F14                            
00015F14                            loc_13504:
00015F14 D168 0020                  		add.w	d0,obInertia(a0)
00015F18                            
00015F18                            locret_13508:
00015F18 4E75                       		rts	
00015F1A                            ; End of function Sonic_SlopeResist
00015F1A                            ; End of function Sonic_SlopeResist
00015F1A                            		include	"_incObj\Sonic RollRepel.asm"
00015F1A                            ; ---------------------------------------------------------------------------
00015F1A                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015F1A                            ; ---------------------------------------------------------------------------
00015F1A                            
00015F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F1A                            
00015F1A                            
00015F1A                            Sonic_RollRepel:
00015F1A 1028 0026                  		move.b	obAngle(a0),d0
00015F1E 0600 0060                  		addi.b	#$60,d0
00015F22 0C00 00C0                  		cmpi.b	#-$40,d0
00015F26 6400                       		bcc.s	locret_13544
00015F28 1028 0026                  		move.b	obAngle(a0),d0
00015F2C 4EB9 0000 37AE             		jsr	(CalcSine).l
00015F32 C1FC 0050                  		muls.w	#$50,d0
00015F36 E080                       		asr.l	#8,d0
00015F38 4A68 0020                  		tst.w	obInertia(a0)
00015F3C 6B00                       		bmi.s	loc_1353A
00015F3E 4A40                       		tst.w	d0
00015F40 6A00                       		bpl.s	loc_13534
00015F42 E480                       		asr.l	#2,d0
00015F44                            
00015F44                            loc_13534:
00015F44 D168 0020                  		add.w	d0,obInertia(a0)
00015F48 4E75                       		rts	
00015F4A                            ; ===========================================================================
00015F4A                            
00015F4A                            loc_1353A:
00015F4A 4A40                       		tst.w	d0
00015F4C 6B00                       		bmi.s	loc_13540
00015F4E E480                       		asr.l	#2,d0
00015F50                            
00015F50                            loc_13540:
00015F50 D168 0020                  		add.w	d0,obInertia(a0)
00015F54                            
00015F54                            locret_13544:
00015F54 4E75                       		rts	
00015F56                            ; End of function Sonic_RollRepel
00015F56                            ; End of function Sonic_RollRepel
00015F56                            		include	"_incObj\Sonic SlopeRepel.asm"
00015F56                            ; ---------------------------------------------------------------------------
00015F56                            ; Subroutine to	push Sonic down	a slope
00015F56                            ; ---------------------------------------------------------------------------
00015F56                            
00015F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F56                            
00015F56                            
00015F56                            Sonic_SlopeRepel:
00015F56 4E71                       		nop	
00015F58 4A28 0038                  		tst.b	$38(a0)
00015F5C 6600                       		bne.s	locret_13580
00015F5E 4A68 003E                  		tst.w	$3E(a0)
00015F62 6600                       		bne.s	loc_13582
00015F64 1028 0026                  		move.b	obAngle(a0),d0
00015F68 0600 0020                  		addi.b	#$20,d0
00015F6C 0200 00C0                  		andi.b	#$C0,d0
00015F70 6700                       		beq.s	locret_13580
00015F72 3028 0020                  		move.w	obInertia(a0),d0
00015F76 6A00                       		bpl.s	loc_1356A
00015F78 4440                       		neg.w	d0
00015F7A                            
00015F7A                            loc_1356A:
00015F7A 0C40 0280                  		cmpi.w	#$280,d0
00015F7E 6400                       		bcc.s	locret_13580
00015F80 4268 0020                  		clr.w	obInertia(a0)
00015F84 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F8A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015F90                            
00015F90                            locret_13580:
00015F90 4E75                       		rts	
00015F92                            ; ===========================================================================
00015F92                            
00015F92                            loc_13582:
00015F92 5368 003E                  		subq.w	#1,$3E(a0)
00015F96 4E75                       		rts	
00015F98                            ; End of function Sonic_SlopeRepel
00015F98                            ; End of function Sonic_SlopeRepel
00015F98                            		include	"_incObj\Sonic JumpAngle.asm"
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            
00015F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F98                            
00015F98                            
00015F98                            Sonic_JumpAngle:
00015F98 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015F9C 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015F9E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015FA0                            
00015FA0 5400                       		addq.b	#2,d0		; increase angle
00015FA2 6400                       		bcc.s	loc_13596
00015FA4 7000                       		moveq	#0,d0
00015FA6                            
00015FA6                            loc_13596:
00015FA6 6000                       		bra.s	loc_1359E
00015FA8                            ; ===========================================================================
00015FA8                            
00015FA8                            loc_13598:
00015FA8 5500                       		subq.b	#2,d0		; decrease angle
00015FAA 6400                       		bcc.s	loc_1359E
00015FAC 7000                       		moveq	#0,d0
00015FAE                            
00015FAE                            loc_1359E:
00015FAE 1140 0026                  		move.b	d0,obAngle(a0)
00015FB2                            
00015FB2                            locret_135A2:
00015FB2 4E75                       		rts	
00015FB4                            ; End of function Sonic_JumpAngle
00015FB4                            ; End of function Sonic_JumpAngle
00015FB4                            		include	"_incObj\Sonic Floor.asm"
00015FB4                            ; ---------------------------------------------------------------------------
00015FB4                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015FB4                            ; ---------------------------------------------------------------------------
00015FB4                            
00015FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FB4                            
00015FB4                            
00015FB4                            Sonic_Floor:
00015FB4 3228 0010                  		move.w	obVelX(a0),d1
00015FB8 3428 0012                  		move.w	obVelY(a0),d2
00015FBC 4EB9 0000 3A40             		jsr	(CalcAngle).l
00015FC2 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015FC6 0400 0020                  		subi.b	#$20,d0
00015FCA 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015FCE 0200 00C0                  		andi.b	#$C0,d0
00015FD2 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015FD6 0C00 0040                  		cmpi.b	#$40,d0
00015FDA 6700 0000                  		beq.w	loc_13680
00015FDE 0C00 0080                  		cmpi.b	#$80,d0
00015FE2 6700 0000                  		beq.w	loc_136E2
00015FE6 0C00 00C0                  		cmpi.b	#$C0,d0
00015FEA 6700 0000                  		beq.w	loc_1373E
00015FEE 6100 0000                  		bsr.w	Sonic_HitWall
00015FF2 4A41                       		tst.w	d1
00015FF4 6A00                       		bpl.s	loc_135F0
00015FF6 9368 0008                  		sub.w	d1,obX(a0)
00015FFA 317C 0000 0010             		move.w	#0,obVelX(a0)
00016000                            
00016000                            loc_135F0:
00016000 6100 0000                  		bsr.w	sub_14EB4
00016004 4A41                       		tst.w	d1
00016006 6A00                       		bpl.s	loc_13602
00016008 D368 0008                  		add.w	d1,obX(a0)
0001600C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016012                            
00016012                            loc_13602:
00016012 6100 0000                  		bsr.w	Sonic_HitFloor
00016016 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001601A 4A41                       		tst.w	d1
0001601C 6A00                       		bpl.s	locret_1367E
0001601E 1428 0012                  		move.b	obVelY(a0),d2
00016022 5002                       		addq.b	#8,d2
00016024 4402                       		neg.b	d2
00016026 B202                       		cmp.b	d2,d1
00016028 6C00                       		bge.s	loc_1361E
0001602A B002                       		cmp.b	d2,d0
0001602C 6D00                       		blt.s	locret_1367E
0001602E                            
0001602E                            loc_1361E:
0001602E D368 000C                  		add.w	d1,obY(a0)
00016032 1143 0026                  		move.b	d3,obAngle(a0)
00016036 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001603A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016040 1003                       		move.b	d3,d0
00016042 0600 0020                  		addi.b	#$20,d0
00016046 0200 0040                  		andi.b	#$40,d0
0001604A 6600                       		bne.s	loc_1365C
0001604C 1003                       		move.b	d3,d0
0001604E 0600 0010                  		addi.b	#$10,d0
00016052 0200 0020                  		andi.b	#$20,d0
00016056 6700                       		beq.s	loc_1364E
00016058 E0E8 0012                  		asr	obVelY(a0)
0001605C 6000                       		bra.s	loc_13670
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            loc_1364E:
0001605E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016064 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001606A 4E75                       		rts	
0001606C                            ; ===========================================================================
0001606C                            
0001606C                            loc_1365C:
0001606C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016072 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016078 6F00                       		ble.s	loc_13670
0001607A 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016080                            
00016080                            loc_13670:
00016080 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016086 4A03                       		tst.b	d3
00016088 6A00                       		bpl.s	locret_1367E
0001608A 4468 0020                  		neg.w	obInertia(a0)
0001608E                            
0001608E                            locret_1367E:
0001608E 4E75                       		rts	
00016090                            ; ===========================================================================
00016090                            
00016090                            loc_13680:
00016090 6100 0000                  		bsr.w	Sonic_HitWall
00016094 4A41                       		tst.w	d1
00016096 6A00                       		bpl.s	loc_1369A
00016098 9368 0008                  		sub.w	d1,obX(a0)
0001609C 317C 0000 0010             		move.w	#0,obVelX(a0)
000160A2 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160A8 4E75                       		rts	
000160AA                            ; ===========================================================================
000160AA                            
000160AA                            loc_1369A:
000160AA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160AE 4A41                       		tst.w	d1
000160B0 6A00                       		bpl.s	loc_136B4
000160B2 9368 000C                  		sub.w	d1,obY(a0)
000160B6 4A68 0012                  		tst.w	obVelY(a0)
000160BA 6A00                       		bpl.s	locret_136B2
000160BC 317C 0000 0012             		move.w	#0,obVelY(a0)
000160C2                            
000160C2                            locret_136B2:
000160C2 4E75                       		rts	
000160C4                            ; ===========================================================================
000160C4                            
000160C4                            loc_136B4:
000160C4 4A68 0012                  		tst.w	obVelY(a0)
000160C8 6B00                       		bmi.s	locret_136E0
000160CA 6100 0000                  		bsr.w	Sonic_HitFloor
000160CE 4A41                       		tst.w	d1
000160D0 6A00                       		bpl.s	locret_136E0
000160D2 D368 000C                  		add.w	d1,obY(a0)
000160D6 1143 0026                  		move.b	d3,obAngle(a0)
000160DA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000160DE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000160E4 317C 0000 0012             		move.w	#0,obVelY(a0)
000160EA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000160F0                            
000160F0                            locret_136E0:
000160F0 4E75                       		rts	
000160F2                            ; ===========================================================================
000160F2                            
000160F2                            loc_136E2:
000160F2 6100 0000                  		bsr.w	Sonic_HitWall
000160F6 4A41                       		tst.w	d1
000160F8 6A00                       		bpl.s	loc_136F4
000160FA 9368 0008                  		sub.w	d1,obX(a0)
000160FE 317C 0000 0010             		move.w	#0,obVelX(a0)
00016104                            
00016104                            loc_136F4:
00016104 6100 0000                  		bsr.w	sub_14EB4
00016108 4A41                       		tst.w	d1
0001610A 6A00                       		bpl.s	loc_13706
0001610C D368 0008                  		add.w	d1,obX(a0)
00016110 317C 0000 0010             		move.w	#0,obVelX(a0)
00016116                            
00016116                            loc_13706:
00016116 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001611A 4A41                       		tst.w	d1
0001611C 6A00                       		bpl.s	locret_1373C
0001611E 9368 000C                  		sub.w	d1,obY(a0)
00016122 1003                       		move.b	d3,d0
00016124 0600 0020                  		addi.b	#$20,d0
00016128 0200 0040                  		andi.b	#$40,d0
0001612C 6600                       		bne.s	loc_13726
0001612E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016134 4E75                       		rts	
00016136                            ; ===========================================================================
00016136                            
00016136                            loc_13726:
00016136 1143 0026                  		move.b	d3,obAngle(a0)
0001613A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001613E 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016144 4A03                       		tst.b	d3
00016146 6A00                       		bpl.s	locret_1373C
00016148 4468 0020                  		neg.w	obInertia(a0)
0001614C                            
0001614C                            locret_1373C:
0001614C 4E75                       		rts	
0001614E                            ; ===========================================================================
0001614E                            
0001614E                            loc_1373E:
0001614E 6100 0000                  		bsr.w	sub_14EB4
00016152 4A41                       		tst.w	d1
00016154 6A00                       		bpl.s	loc_13758
00016156 D368 0008                  		add.w	d1,obX(a0)
0001615A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016160 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016166 4E75                       		rts	
00016168                            ; ===========================================================================
00016168                            
00016168                            loc_13758:
00016168 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001616C 4A41                       		tst.w	d1
0001616E 6A00                       		bpl.s	loc_13772
00016170 9368 000C                  		sub.w	d1,obY(a0)
00016174 4A68 0012                  		tst.w	obVelY(a0)
00016178 6A00                       		bpl.s	locret_13770
0001617A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016180                            
00016180                            locret_13770:
00016180 4E75                       		rts	
00016182                            ; ===========================================================================
00016182                            
00016182                            loc_13772:
00016182 4A68 0012                  		tst.w	obVelY(a0)
00016186 6B00                       		bmi.s	locret_1379E
00016188 6100 0000                  		bsr.w	Sonic_HitFloor
0001618C 4A41                       		tst.w	d1
0001618E 6A00                       		bpl.s	locret_1379E
00016190 D368 000C                  		add.w	d1,obY(a0)
00016194 1143 0026                  		move.b	d3,obAngle(a0)
00016198 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001619C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000161A2 317C 0000 0012             		move.w	#0,obVelY(a0)
000161A8 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000161AE                            
000161AE                            locret_1379E:
000161AE 4E75                       		rts	
000161B0                            ; End of function Sonic_Floor
000161B0                            ; End of function Sonic_Floor
000161B0                            		include	"_incObj\Sonic ResetOnFloor.asm"
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            
000161B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161B0                            
000161B0                            
000161B0                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000161B0 08A8 0005 0022                     	bclr    #5,$22(a0)
000161B6 08A8 0001 0022                     	bclr    #1,$22(a0)
000161BC 0828 0002 0022                     	btst    #2,$22(a0)
000161C2 6700                               	beq.s    loc_137E4
000161C4 08A8 0002 0022             		bclr	#2,obStatus(a0)
000161CA 117C 0013 0016             		move.b	#$13,obHeight(a0)
000161D0 117C 0009 0017             		move.b	#9,obWidth(a0)
000161D6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000161DC 5B68 000C                  		subq.w	#5,obY(a0)
000161E0                            
000161E0                            loc_137E4:
000161E0 117C 0000 003C             		move.b	#0,$3C(a0)
000161E6 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000161EC 4E75                       		rts	
000161EE                            ; End of function Sonic_ResetOnFloor
000161EE                            ; End of function Sonic_ResetOnFloor
000161EE                            		include	"_incObj\Sonic (part 2).asm"
000161EE                            ; ---------------------------------------------------------------------------
000161EE                            ; Sonic	when he	gets hurt
000161EE                            ; ---------------------------------------------------------------------------
000161EE                            
000161EE                            Sonic_Hurt:	; Routine 4
000161EE 4EB9 0000 F72E             		jsr	(SpeedToPos).l
000161F4 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000161FA 0828 0006 0022             		btst	#6,obStatus(a0)
00016200 6700                       		beq.s	loc_1380C
00016202 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016208                            
00016208                            loc_1380C:
00016208 6100 0000                  		bsr.w	Sonic_HurtStop
0001620C 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016210 6100 F124                  		bsr.w	Sonic_RecordPosition
00016214 6100 0000                  		bsr.w	Sonic_Animate
00016218 6100 0000                  		bsr.w	Sonic_LoadGfx
0001621C 4EF9 0000 F742             		jmp	(DisplaySprite).l
00016222                            
00016222                            ; ---------------------------------------------------------------------------
00016222                            ; Subroutine to	stop Sonic falling after he's been hurt
00016222                            ; ---------------------------------------------------------------------------
00016222                            
00016222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016222                            
00016222                            
00016222                            Sonic_HurtStop:
00016222 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016226 0640 00E0                  		addi.w	#$E0,d0
0001622A                            		;cmp.w	obY(a0),d0
0001622A                            		;bcs.w	KillSonic
0001622A 6100 FD88                  		bsr.w	Sonic_Floor
0001622E 0828 0001 0022             		btst	#1,obStatus(a0)
00016234 6600                       		bne.s	locret_13860
00016236 7000                       		moveq	#0,d0
00016238 3140 0012                  		move.w	d0,obVelY(a0)
0001623C 3140 0010                  		move.w	d0,obVelX(a0)
00016240 3140 0020                  		move.w	d0,obInertia(a0)
00016244 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001624A 5528 0024                  		subq.b	#2,obRoutine(a0)
0001624E 317C 0078 0030             		move.w	#$78,$30(a0)
00016254                            
00016254                            locret_13860:
00016254 4E75                       		rts	
00016256                            ; End of function Sonic_HurtStop
00016256                            
00016256                            ; ---------------------------------------------------------------------------
00016256                            ; Sonic	when he	dies
00016256                            ; ---------------------------------------------------------------------------
00016256                            
00016256                            Sonic_Death:	; Routine 6
00016256 6100 0000                  		bsr.w	GameOver
0001625A 4EB9 0000 F6F6             		jsr	(ObjectFall).l
00016260 6100 F0D4                  		bsr.w	Sonic_RecordPosition
00016264 6100 0000                  		bsr.w	Sonic_Animate
00016268 6100 0000                  		bsr.w	Sonic_LoadGfx
0001626C 4EF9 0000 F742             		jmp	(DisplaySprite).l
00016272                            
00016272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016272                            
00016272                            GameOver:
00016272 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016276 0640 0100                  		addi.w	#$100,d0
0001627A B068 000C                  		cmp.w	obY(a0),d0
0001627E 6400 0000                  		bcc.w	locret_13900
00016282 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00016288 5428 0024                  		addq.b	#2,obRoutine(a0)
0001628C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016290 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016294 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00016298 6600                       		bne.s	loc_138D4
0001629A 317C 0000 003A             		move.w	#0,$3A(a0)
000162A0 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000162A6 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000162AC 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000162B2 4238 FE1A                  		clr.b	(f_timeover).w
000162B6                            
000162B6                            loc_138C2:
000162C0 7003                       		moveq	#3,d0
000162C2 4EF9 0000 1466             		jmp	(AddPLC).l	; load game over patterns
000162C8                            		
000162C8                            loc_138C3:
000162D2 7003                       		moveq	#3,d0
000162D4 4EF9 0000 1466             		jmp	(AddPLC).l	; load game over patterns
000162DA                            ; ===========================================================================
000162DA                            
000162DA                            loc_138D4:
000162DA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000162E0 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000162E4 6700                       		beq.s	locret_13900	; if not, branch
000162E6 317C 0000 003A             		move.w	#0,$3A(a0)
000162EC 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000162F2 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000162F8 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000162FE 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016304 60B0                       		bra.s	loc_138C2
00016306                            		
00016306                            
00016306                            ; ===========================================================================
00016306                            
00016306                            locret_13900:
00016306 4E75                       		rts	
00016308                            ; End of function GameOver
00016308                            
00016308                            ; ---------------------------------------------------------------------------
00016308                            ; Sonic	when the level is restarted
00016308                            ; ---------------------------------------------------------------------------
00016308                            
00016308                            Sonic_ResetLevel:; Routine 8
00016308 4A68 003A                  		tst.w	$3A(a0)
0001630C 6700                       		beq.s	locret_13914
0001630E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016312 6600                       		bne.s	locret_13914
00016314 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001631A                            
0001631A                            	locret_13914:
0001631A 4E75                       		rts	
0001631A 4E75                       		rts	
0001631C                            		include	"_incObj\Sonic Loops.asm"
0001631C                            ; ---------------------------------------------------------------------------
0001631C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001631C                            ; ---------------------------------------------------------------------------
0001631C                            
0001631C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001631C                            
0001631C                            
0001631C                            Sonic_Loops:
0001631C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016322 6700                       		beq.s	@isstarlight	; if yes, branch
00016324 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016328 6600 0000                  		bne.w	@noloops	; if not, branch
0001632C                            
0001632C                            	@isstarlight:
0001632C 3028 000C                  		move.w	obY(a0),d0
00016330 E248                       		lsr.w	#1,d0
00016332 0240 0380                  		andi.w	#$380,d0
00016336 1228 0008                  		move.b	obX(a0),d1
0001633A 0241 007F                  		andi.w	#$7F,d1
0001633E D041                       		add.w	d1,d0
00016340 43F8 A400                  		lea	(v_lvllayout).w,a1
00016344 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016348                            
00016348 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001634C 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016350 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016354 6700 FA68                  		beq.w	Sonic_ChkRoll
00016358                            
00016358 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001635C 6700                       		beq.s	@chkifleft	; if yes, branch
0001635E B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016362 6700                       		beq.s	@chkifinair
00016364 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001636A 4E75                       		rts	
0001636C                            ; ===========================================================================
0001636C                            
0001636C                            @chkifinair:
0001636C 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016372 6700                       		beq.s	@chkifleft	; if not, branch
00016374                            
00016374 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001637A 4E75                       		rts	
0001637C                            ; ===========================================================================
0001637C                            
0001637C                            @chkifleft:
0001637C 3428 0008                  		move.w	obX(a0),d2
00016380 0C02 002C                  		cmpi.b	#$2C,d2
00016384 6400                       		bcc.s	@chkifright
00016386                            
00016386 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001638C 4E75                       		rts	
0001638E                            ; ===========================================================================
0001638E                            
0001638E                            @chkifright:
0001638E 0C02 00E0                  		cmpi.b	#$E0,d2
00016392 6500                       		bcs.s	@chkangle1
00016394                            
00016394 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001639A 4E75                       		rts	
0001639C                            ; ===========================================================================
0001639C                            
0001639C                            @chkangle1:
0001639C 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000163A2 6600                       		bne.s	@chkangle2	; if yes, branch
000163A4                            
000163A4 1228 0026                  		move.b	obAngle(a0),d1
000163A8 6700                       		beq.s	@done
000163AA 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000163AE 6200                       		bhi.s	@done		; if yes, branch
000163B0 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000163B6 4E75                       		rts	
000163B8                            ; ===========================================================================
000163B8                            
000163B8                            @chkangle2:
000163B8 1228 0026                  		move.b	obAngle(a0),d1
000163BC 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000163C0 6300                       		bls.s	@done		; if yes, branch
000163C2 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000163C8                            
000163C8                            @noloops:
000163C8                            @done:
000163C8 4E75                       		rts	
000163CA                            ; End of function Sonic_Loops
000163CA                            ; End of function Sonic_Loops
000163CA                            		include	"_incObj\Sonic Animate.asm"
000163CA                            ; ---------------------------------------------------------------------------
000163CA                            ; Subroutine to	animate	Sonic's sprites
000163CA                            ; ---------------------------------------------------------------------------
000163CA                            
000163CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163CA                            
000163CA                            
000163CA                            Sonic_Animate:				; XREF: Obj01_Control; et al
000163CA 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000163D0 7000                       		moveq	#0,d0
000163D2 1028 001C                  		move.b	obAnim(a0),d0
000163D6 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000163DA 6700                       		beq.s	@do		; if not, branch
000163DC 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000163E0 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000163E4 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000163E8                            		
000163E8 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000163EE                            
000163EE                            	@do:
000163EE D040                       		add.w	d0,d0
000163F0 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000163F4 1011                       		move.b	(a1),d0
000163F6 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000163F8 1228 0022                  		move.b	obStatus(a0),d1
000163FC 0201 0001                  		andi.b	#1,d1
00016400 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016406 8328 0001                  		or.b	d1,obRender(a0)
0001640A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0001640E 6A00                       		bpl.s	@delay		; if time remains, branch
00016410 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016414                            
00016414                            @loadframe:
00016414 7200                       		moveq	#0,d1
00016416 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001641A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001641E 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016422 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016426                            
00016426                            	@next:
00016426 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001642A 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0001642E                            
0001642E                            	@delay:
0001642E 4E75                       		rts	
00016430                            ; ===========================================================================
00016430                            
00016430                            @end_FF:
00016430 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016432 6600                       		bne.s	@end_FE		; if not, branch
00016434 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016438 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001643C 60E8                       		bra.s	@next
0001643E                            ; ===========================================================================
0001643E                            
0001643E                            @end_FE:
0001643E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016440 6600                       		bne.s	@end_FD		; if not, branch
00016442 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016446 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001644A 9200                       		sub.b	d0,d1
0001644C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016450 60D4                       		bra.s	@next
00016452                            ; ===========================================================================
00016452                            
00016452                            @end_FD:
00016452 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016454 6600                       		bne.s	@end		; if not, branch
00016456 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001645C                            
0001645C                            	@end:
0001645C 4E75                       		rts	
0001645E                            ; ===========================================================================
0001645E                            
0001645E                            @walkrunroll:
0001645E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016462 6ACA                       		bpl.s	@delay		; if time remains, branch
00016464 5200                       		addq.b	#1,d0		; is animation walking/running?
00016466 6600 0000                  		bne.w	@rolljump	; if not, branch
0001646A 7200                       		moveq	#0,d1
0001646C 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016470 6B00                       		bmi.s	@ble 			; better handling of angles
00016472 6700                       		beq.s	@ble
00016474 5300                       		subq.b	#1,d0
00016476                            
00016476                            	@ble:																
00016476 1428 0022                  		move.b	obStatus(a0),d2
0001647A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001647E 6600                       		bne.s	@flip		; if yes, branch
00016480 4600                       		not.b	d0		; reverse angle
00016482                            
00016482                            	@flip:
00016482 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016486 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016488 7203                       		moveq	#3,d1
0001648A                            
0001648A                            	@noinvert:
0001648A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016490 B302                       		eor.b	d1,d2
00016492 8528 0001                  		or.b	d2,obRender(a0)
00016496 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
0001649C 6600 0000                  		bne.w	@push		; if yes, branch
000164A0                            
000164A0 E808                       		lsr.b	#4,d0		; divide angle by $10
000164A2 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000164A6 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000164AA 6A00                       		bpl.s	@nomodspeed
000164AC 4442                       		neg.w	d2		; modulus speed
000164AE                            
000164AE                            	@nomodspeed:
000164AE 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000164B4 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000164B8 6400                       		bcc.s	@maxrunning	; if yes, branch
000164BA                            
000164BA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000164C0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000164C4 6400                       		bcc.s	@running	; if yes, branch
000164C6                            
000164C6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000164CC                            
000164CC                            	@running:
000164CC D000                       		add.b	d0,d0
000164CE D000                       		add.b	d0,d0
000164D0 1600                       		move.b	d0,d3
000164D2 4442                       		neg.w	d2
000164D4 0642 0780                  		addi.w	#$780,d2
000164D8 6A00                       		bpl.s	@belowmax
000164DA 7400                       		moveq	#0,d2		; max animation speed
000164DC 6000                       		bra.s	@belowmax
000164DE                            
000164DE                            	@maxrunning:
000164DE D000                       		add.b d0,d0
000164E0 1600                       		move.b d0,d3
000164E2 4442                       		neg.w d2
000164E4 0642 0800                  		addi.w #$800, d2
000164E8 6A00                       		bpl.s @belowmax
000164EA 7400                       		moveq #0, d2 
000164EC                            
000164EC                            	@belowmax:
000164EC E04A                       		lsr.w	#8,d2
000164EE 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164F2 6100 FF20                  		bsr.w	@loadframe
000164F6 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
000164FA 4E75                       		rts	
000164FC                            ; ===========================================================================
000164FC                            
000164FC                            @rolljump:
000164FC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000164FE 6600                       		bne.s	@push		; if not, branch
00016500 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016504 6A00                       		bpl.s	@nomodspeed2
00016506 4442                       		neg.w	d2
00016508                            
00016508                            	@nomodspeed2:
00016508 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001650E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016512 6400                       		bcc.s	@rollfast	; if yes, branch
00016514 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001651A                            
0001651A                            	@rollfast:
0001651A 4442                       		neg.w	d2
0001651C 0642 0400                  		addi.w	#$400,d2
00016520 6A00                       		bpl.s	@belowmax2
00016522 7400                       		moveq	#0,d2
00016524                            
00016524                            	@belowmax2:
00016524 E04A                       		lsr.w	#8,d2
00016526 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001652A 1228 0022                  		move.b	obStatus(a0),d1
0001652E 0201 0001                  		andi.b	#1,d1
00016532 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016538 8328 0001                  		or.b	d1,obRender(a0)
0001653C 6000 FED6                  		bra.w	@loadframe
00016540                            ; ===========================================================================
00016540                            
00016540                            @push:
00016540 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016544 6B00                       		bmi.s	@negspeed
00016546 4442                       		neg.w	d2
00016548                            
00016548                            	@negspeed:
00016548 0642 0800                  		addi.w	#$800,d2
0001654C 6A00                       		bpl.s	@belowmax3	
0001654E 7400                       		moveq	#0,d2
00016550                            
00016550                            	@belowmax3:
00016550 EC4A                       		lsr.w	#6,d2
00016552 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016556 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001655C 1228 0022                  		move.b	obStatus(a0),d1
00016560 0201 0001                  		andi.b	#1,d1
00016564 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001656A 8328 0001                  		or.b	d1,obRender(a0)
0001656E 6000 FEA4                  		bra.w	@loadframe
00016572                            
00016572                            ; End of function Sonic_Animate
00016572                            ; End of function Sonic_Animate
00016572                            		include	"_anim\Sonic.asm"
00016572                            ; ---------------------------------------------------------------------------
00016572                            ; Animation script - Sonic
00016572                            ; ---------------------------------------------------------------------------
00016572                            Ani_Sonic:
00016572                            
00016572 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016574 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016576 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016578 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001657A 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001657C 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
0001657E 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016580 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016582 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016584 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016586 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016588 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
0001658A 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
0001658C 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
0001658E 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016590 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016592 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016594 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016596 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016598 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
0001659A 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
0001659C 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
0001659E 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000165A0 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000165A2 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000165A4 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000165A6 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000165A8 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000165AA 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000165AC 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000165AE 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000165B0 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000165B2 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000165B4 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000165B6 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000165B8 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000165BA 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000165BC 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000165BE                            
000165BE FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000165CC 00                         		even
000165CC FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000165DA 00                         		even
000165DA FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000165E1 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000165E8 00                         		even
000165E8 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000165EF 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000165F6 00                         		even
000165F6 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016604 00                         		even
00016604                            SonAni_Wait:	
00016604 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016613 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016622 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016631 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016640 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
0001664F 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
0001665E 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
0001666D 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
0001667C 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016684                            		even
00016684 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
0001668A                            		even
0001668A 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016690 00                         		even
00016690 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
00016696                            		even
00016696 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
0001669A 00                         		even
0001669A 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
0001669E 00                         		even
0001669E 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000166A2 00                         		even
000166A2 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000166A6 00                         		even
000166A6 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000166B0                            		even
000166B0 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000166B6 00                         		even
000166B6 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000166C0 00                         		even
000166C0 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000166CA 00                         		even
000166CA 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000166CE                            		even
000166CE 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000166D4                            		even
000166D4 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
000166DA 00                         		even
000166DA 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
000166DE 00                         		even
000166DE 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
000166E6 00                         		even
000166E6 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
000166EA 00                         		even
000166EA 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
000166EE 00                         		even
000166EE 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
000166F2 00                         		even
000166F2 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
000166F6 00                         		even
000166F6                            SonAni_WaterSlide:
000166F6 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
000166FA                            		even
000166FA 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
000166FE                            		even
000166FE 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016706 00                         		even
00016706 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
0001670A                            		even
0001670A FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016718 00                         		even
00016718 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016724                            		even
00016724 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
00016728                            		even
00016728 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
0001672C                            		even
0001672C 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016730                            		even
00016730 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
0001673A 00                         		even
0001673A 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016743 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
0001674B 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016752 3334 35                    		dc.b	$33, $34, $35
00016755 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
0001675C                            		even
0001675C 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016762                            		even
00016762                            
00016762                            
00016762 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016762 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016762 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016762 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016762 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016762 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016762 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016762 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016762 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016762 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016762 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016762 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016762 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016762 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016762 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016762 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016762 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016762 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016762 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016762 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016762 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016762 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016762 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016762 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016762 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016762 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016762 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016762 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016762 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016762 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016762 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016762 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016762 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016762 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016762 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016762 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016762 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016762 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016762 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016762                            		include	"_incObj\Sonic LoadGfx.asm"
00016762                            ; ---------------------------------------------------------------------------
00016762                            ; Sonic	graphics loading subroutine
00016762                            ; ---------------------------------------------------------------------------
00016762                            
00016762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016762                            
00016762                            
00016762                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016762 7000                       		moveq	#0,d0
00016764 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016768 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001676C 6700                       		beq.s	locret_13C96
0001676E 11C0 F766                  		move.b	d0,($FFFFF766).w
00016772 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016778 D040                       		add.w	d0,d0
0001677A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001677E 7A00                       		moveq	#0,d5
00016780 1A1A                       		move.b	(a2)+,d5
00016782 5345                       		subq.w	#1,d5
00016784 6B00                       		bmi.s	locret_13C96
00016786 383C F000                  		move.w	#$F000,d4
0001678A 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016790                            
00016790                            SPLC_ReadEntry:
00016790 7200                       		moveq	#0,d1
00016792 121A                       		move.b	(a2)+,d1
00016794 E149                       		lsl.w	#8,d1
00016796 121A                       		move.b	(a2)+,d1
00016798 3601                       		move.w	d1,d3
0001679A E04B                       		lsr.w	#8,d3
0001679C 0243 00F0                  		andi.w	#$F0,d3
000167A0 0643 0010                  		addi.w	#$10,d3
000167A4 0241 0FFF                  		andi.w	#$FFF,d1
000167A8 EB89                       		lsl.l	#5,d1
000167AA D286                       		add.l	d6,d1
000167AC 3404                       		move.w	d4,d2
000167AE D843                       		add.w	d3,d4
000167B0 D843                       		add.w	d3,d4
000167B2 4EB9 0000 11A2             		jsr	(QueueDMATransfer).l
000167B8 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000167BC                            
000167BC                            locret_13C96:
000167BC 4E75                       		rts	
000167BE                            ; End of function Sonic_LoadGfx
000167BE                            ; End of function Sonic_LoadGfx
000167BE                            
000167BE                            		include	"_incObj\0A Drowning Countdown.asm"
000167BE                            ; ---------------------------------------------------------------------------
000167BE                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000167BE                            ; Sonic's mouth (LZ)
000167BE                            ; ---------------------------------------------------------------------------
000167BE                            
000167BE                            DrownCount:
000167BE 7000                       		moveq	#0,d0
000167C0 1028 0024                  		move.b	obRoutine(a0),d0
000167C4 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000167C8 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000167CC                            ; ===========================================================================
000167CC                            Drown_Index:
000167CC 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000167CE 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000167D0 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000167D2 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000167D4 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000167D6 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000167D8 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
000167DA 0000                       			dc.w Drown_Display-Drown_Index
000167DC 0000                       			dc.w Drown_Delete-Drown_Index
000167DE                            
000167DE =00000030                  drown_origX:		equ $30		; original x-axis position
000167DE =00000038                  drown_time:		equ $38		; time between each number changes
000167DE                            
000167DE =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
000167DE =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
000167DE =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
000167DE =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
000167DE =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
000167DE =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
000167DE =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
000167DE                            ; ===========================================================================
000167DE                            
000167DE                            Drown_Main:	; Routine 0
000167DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000167E2 217C 0001 4BAC 0004        		move.l	#Map_Bub,obMap(a0)
000167EA 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000167F0 117C 0084 0001             		move.b	#$84,obRender(a0)
000167F6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000167FC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016802 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016806 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016808                            
00016808 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
0001680C 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016814 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001681A 0240 007F                  		andi.w	#$7F,d0
0001681E 1140 0033                  		move.b	d0,$33(a0)
00016822 6000 0000                  		bra.w	Drown_Countdown
00016826                            ; ===========================================================================
00016826                            
00016826                            @smallbubble:
00016826 1140 001C                  		move.b	d0,obAnim(a0)
0001682A 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016830 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016836                            
00016836                            Drown_Animate:	; Routine 2
00016836 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001683C 4EB9 0000 C804             		jsr	(AnimateSprite).l
00016842                            
00016842                            Drown_ChkWater:	; Routine 4
00016842 3038 F646                  		move.w	(v_waterpos1).w,d0
00016846 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
0001684A 6500                       		bcs.s	@wobble		; if not, branch
0001684C                            
0001684C 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016852 5E28 001C                  		addq.b	#7,obAnim(a0)
00016856 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
0001685C 6700                       		beq.s	Drown_Display
0001685E 6000                       		bra.s	Drown_Display
00016860                            ; ===========================================================================
00016860                            
00016860                            @wobble:
00016860 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016864 6700                       		beq.s	@notunnel	; if not, branch
00016866 5868 0030                  		addq.w	#4,drown_origX(a0)
0001686A                            
0001686A                            	@notunnel:
0001686A 1028 0026                  		move.b	obAngle(a0),d0
0001686E 5228 0026                  		addq.b	#1,obAngle(a0)
00016872 0240 007F                  		andi.w	#$7F,d0
00016876 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
0001687C 1031 0000                  		move.b	(a1,d0.w),d0
00016880 4880                       		ext.w	d0
00016882 D068 0030                  		add.w	drown_origX(a0),d0
00016886 3140 0008                  		move.w	d0,obX(a0)
0001688A 6100                       		bsr.s	Drown_ShowNumber
0001688C 4EB9 0000 F72E             		jsr	(SpeedToPos).l
00016892 4A28 0001                  		tst.b	obRender(a0)
00016896 6A00                       		bpl.s	@delete
00016898 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001689E                            
0001689E                            	@delete:
0001689E 4EF9 0000 F782             		jmp	(DeleteObject).l
000168A4                            ; ===========================================================================
000168A4                            
000168A4                            Drown_Display:	; Routine 6, Routine $E
000168A4 6100                       		bsr.s	Drown_ShowNumber
000168A6 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000168AC 4EB9 0000 C804             		jsr	(AnimateSprite).l
000168B2 4EF9 0000 F742             		jmp	(DisplaySprite).l
000168B8                            ; ===========================================================================
000168B8                            
000168B8                            Drown_Delete:	; Routine 8, Routine $10
000168B8 4EF9 0000 F782             		jmp	(DeleteObject).l
000168BE                            ; ===========================================================================
000168BE                            
000168BE                            Drown_AirLeft:	; Routine $C
000168BE 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
000168C4 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
000168C6 5368 0038                  		subq.w	#1,drown_time(a0)
000168CA 6600                       		bne.s	@display
000168CC 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
000168D2 5E28 001C                  		addq.b	#7,obAnim(a0)
000168D6 60CC                       		bra.s	Drown_Display
000168D8                            ; ===========================================================================
000168D8                            
000168D8                            	@display:
000168D8 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000168DE 4EB9 0000 C804             		jsr	(AnimateSprite).l
000168E4 4A28 0001                  		tst.b	obRender(a0)
000168E8 6A00                       		bpl.s	Drown_AirLeft_Delete
000168EA 4EF9 0000 F742             		jmp	(DisplaySprite).l
000168F0                            
000168F0                            Drown_AirLeft_Delete:	
000168F0 4EF9 0000 F782             		jmp	(DeleteObject).l
000168F6                            ; ===========================================================================
000168F6                            
000168F6                            Drown_ShowNumber:
000168F6 4A68 0038                  		tst.w	drown_time(a0)
000168FA 6700                       		beq.s	@nonumber
000168FC 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016900 6600                       		bne.s	@nonumber	; if time remains, branch
00016902 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016908 6400                       		bcc.s	@nonumber
0001690A                            
0001690A 317C 000F 0038             		move.w	#15,drown_time(a0)
00016910 4268 0012                  		clr.w	obVelY(a0)
00016914 117C 0080 0001             		move.b	#$80,obRender(a0)
0001691A 3028 0008                  		move.w	obX(a0),d0
0001691E 9078 F700                  		sub.w	(v_screenposx).w,d0
00016922 0640 0080                  		addi.w	#$80,d0
00016926 3140 0008                  		move.w	d0,obX(a0)
0001692A 3028 000C                  		move.w	obY(a0),d0
0001692E 9078 F704                  		sub.w	(v_screenposy).w,d0
00016932 0640 0080                  		addi.w	#$80,d0
00016936 3140 000A                  		move.w	d0,obScreenY(a0)
0001693A 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016940                            
00016940                            	@nonumber:
00016940 4E75                       		rts	
00016942                            ; ===========================================================================
00016942                            Drown_WobbleData:
00016942 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016952 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016962 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016972 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016982 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016992 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000169A2 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000169B2 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000169C2 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000169D2 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000169E2 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
000169F2 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016A02 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016A12 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016A22 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016A32 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016A42                            ; ===========================================================================
00016A42                            
00016A42                            Drown_Countdown:; Routine $A
00016A42 4A68 002C                  		tst.w	$2C(a0)
00016A46 6600 0000                  		bne.w	@loc_13F86
00016A4A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016A50 6400 0000                  		bcc.w	@nocountdown
00016A54 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016A5A 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016A5E                            
00016A5E 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016A62 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016A66 317C 003B 0038             		move.w	#59,drown_time(a0)
00016A6C 317C 0001 0036             		move.w	#1,$36(a0)
00016A72 4EB9 0000 3788             		jsr	(RandomNumber).l
00016A78 0240 0001                  		andi.w	#1,d0
00016A7C 1140 0034                  		move.b	d0,$34(a0)
00016A80 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016A84 0C40 0019                  		cmpi.w	#25,d0
00016A88 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016A8A 0C40 0014                  		cmpi.w	#20,d0
00016A8E 6700                       		beq.s	@warnsound
00016A90 0C40 000F                  		cmpi.w	#15,d0
00016A94 6700                       		beq.s	@warnsound
00016A96 0C40 000C                  		cmpi.w	#12,d0
00016A9A 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016A9C                            
00016A9C                            	@skipmusic:
00016AA6 5328 0032                  		subq.b	#1,$32(a0)
00016AAA 6A00                       		bpl.s	@reduceair
00016AAC 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016AB2 08E8 0007 0036             		bset	#7,$36(a0)
00016AB8 6000                       		bra.s	@reduceair
00016ABA                            ; ===========================================================================
00016ABA                            
00016ABA                            @warnsound:
00016AC4                            
00016AC4                            @reduceair:
00016AC4 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016AC8 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016ACC                            
00016ACC                            		; Sonic drowns here
00016ACC 6100 0000                  		bsr.w	ResumeMusic
00016AD0 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016AE0 117C 000A 0034             		move.b	#$A,$34(a0)
00016AE6 317C 0001 0036             		move.w	#1,$36(a0)
00016AEC 317C 0078 002C             		move.w	#$78,$2C(a0)
00016AF2 2F08                       		move.l	a0,-(sp)
00016AF4 41F8 D000                  		lea	(v_player).w,a0
00016AF8 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016AFC 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016B02 08E8 0001 0022             		bset	#1,obStatus(a0)
00016B08 08E8 0007 0002             		bset	#7,obGfx(a0)
00016B0E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016B14 317C 0000 0010             		move.w	#0,obVelX(a0)
00016B1A 317C 0000 0020             		move.w	#0,obInertia(a0)
00016B20 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016B26 205F                       		movea.l	(sp)+,a0
00016B28 4E75                       		rts	
00016B2A                            ; ===========================================================================
00016B2A                            
00016B2A                            @loc_13F86:
00016B2A 5368 002C                  		subq.w	#1,$2C(a0)
00016B2E 6600                       		bne.s	@loc_13F94
00016B30 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016B36 4E75                       		rts	
00016B38                            ; ===========================================================================
00016B38                            
00016B38                            	@loc_13F94:
00016B38 2F08                       		move.l	a0,-(sp)
00016B3A 41F8 D000                  		lea	(v_player).w,a0
00016B3E 4EB9 0000 F72E             		jsr	(SpeedToPos).l
00016B44 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016B4A 205F                       		movea.l	(sp)+,a0
00016B4C 6000                       		bra.s	@nochange
00016B4E                            ; ===========================================================================
00016B4E                            
00016B4E                            @gotomakenum:
00016B4E 6000                       		bra.s	@makenum
00016B50                            ; ===========================================================================
00016B50                            
00016B50                            @nochange:
00016B50 4A68 0036                  		tst.w	$36(a0)
00016B54 6700 0000                  		beq.w	@nocountdown
00016B58 5368 003A                  		subq.w	#1,$3A(a0)
00016B5C 6A00 0000                  		bpl.w	@nocountdown
00016B60                            
00016B60                            @makenum:
00016B60 4EB9 0000 3788             		jsr	(RandomNumber).l
00016B66 0240 000F                  		andi.w	#$F,d0
00016B6A 3140 003A                  		move.w	d0,$3A(a0)
00016B6E 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
00016B74 6600 0000                  		bne.w	@nocountdown
00016B78 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016B7C 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016B82 7006                       		moveq	#6,d0
00016B84 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016B8A 6700                       		beq.s	@noflip
00016B8C 4440                       		neg.w	d0
00016B8E 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016B94                            
00016B94                            	@noflip:
00016B94 D169 0008                  		add.w	d0,obX(a1)
00016B98 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016B9E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016BA4 4A68 002C                  		tst.w	$2C(a0)
00016BA8 6700 0000                  		beq.w	@loc_1403E
00016BAC 0268 0007 003A             		andi.w	#7,$3A(a0)
00016BB2 0668 0000 003A             		addi.w	#0,$3A(a0)
00016BB8 3038 D00C                  		move.w	(v_player+obY).w,d0
00016BBC 0440 000C                  		subi.w	#$C,d0
00016BC0 3340 000C                  		move.w	d0,obY(a1)
00016BC4 4EB9 0000 3788             		jsr	(RandomNumber).l
00016BCA 1340 0026                  		move.b	d0,obAngle(a1)
00016BCE 3038 FE04                  		move.w	(v_framecount).w,d0
00016BD2 0200 0003                  		andi.b	#3,d0
00016BD6 6600                       		bne.s	@loc_14082
00016BD8 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016BDE 6000                       		bra.s	@loc_14082
00016BE0                            ; ===========================================================================
00016BE0                            
00016BE0                            @loc_1403E:
00016BE0 0828 0007 0036             		btst	#7,$36(a0)
00016BE6 6700                       		beq.s	@loc_14082
00016BE8 3438 FE14                  		move.w	(v_air).w,d2
00016BEC E24A                       		lsr.w	#1,d2
00016BEE 4EB9 0000 3788             		jsr	(RandomNumber).l
00016BF4 0240 0003                  		andi.w	#3,d0
00016BF8 6600                       		bne.s	@loc_1406A
00016BFA 08E8 0006 0036             		bset	#6,$36(a0)
00016C00 6600                       		bne.s	@loc_14082
00016C02 1342 0028                  		move.b	d2,obSubtype(a1)
00016C06 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016C0C                            
00016C0C                            	@loc_1406A:
00016C0C 4A28 0034                  		tst.b	$34(a0)
00016C10 6600                       		bne.s	@loc_14082
00016C12 08E8 0006 0036             		bset	#6,$36(a0)
00016C18 6600                       		bne.s	@loc_14082
00016C1A 1342 0028                  		move.b	d2,obSubtype(a1)
00016C1E 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016C24                            
00016C24                            @loc_14082:
00016C24 5328 0034                  		subq.b	#1,$34(a0)
00016C28 6A00                       		bpl.s	@nocountdown
00016C2A 4268 0036                  		clr.w	$36(a0)
00016C2E                            
00016C2E                            @nocountdown:
00016C2E 4E75                       		rts	
00016C2E 4E75                       		rts	
00016C30                            
00016C30                            
00016C30                            ; ---------------------------------------------------------------------------
00016C30                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016C30                            ; ---------------------------------------------------------------------------
00016C30                            
00016C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C30                            
00016C30                            
00016C30                            ResumeMusic:
00016C30                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016C30                            		;bhi.s	@over12		; if yes, branch
00016C30                            		;move.b	(v_Saved_music),d0
00016C30                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016C30                            		;beq.s	@notinvinc ; if not, branch
00016C30                            		;move.w	#bgm_Invincible,d0
00016C30                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016C30                            		;beq.s	@notinvinc	; if not, branch
00016C30                            		;move.w	#bgm_Ending,d0
00016C30                            
00016C30                            	;@notinvinc:
00016C30                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016C30                            		;beq.s	@playselected ; if not, branch
00016C30                            		;move.w	#bgm_Boss,d0
00016C30                            
00016C30                            	;@playselected:
00016C30                            		;jsr	(PlaySound).l
00016C30                            
00016C30                            	;@over12:
00016C30 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016C36 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016C3A 4E75                       		rts	
00016C3C                            
00016C3C                            ;End of function ResumeMusic
00016C3C                            
00016C3C                            ; ===========================================================================
00016C3C                            
00016C3C                            		include	"_anim\Drowning Countdown.asm"
00016C3C                            ; ---------------------------------------------------------------------------
00016C3C                            ; Animation script - countdown numbers and bubbles (LZ)
00016C3C                            ; ---------------------------------------------------------------------------
00016C3C 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016C3E 0000                       		dc.w @oneappear-Ani_Drown
00016C40 0000                       		dc.w @twoappear-Ani_Drown
00016C42 0000                       		dc.w @threeappear-Ani_Drown
00016C44 0000                       		dc.w @fourappear-Ani_Drown
00016C46 0000                       		dc.w @fiveappear-Ani_Drown
00016C48 0000                       		dc.w @smallbubble-Ani_Drown
00016C4A 0000                       		dc.w @zeroflash-Ani_Drown
00016C4C 0000                       		dc.w @oneflash-Ani_Drown
00016C4E 0000                       		dc.w @twoflash-Ani_Drown
00016C50 0000                       		dc.w @threeflash-Ani_Drown
00016C52 0000                       		dc.w @fourflash-Ani_Drown
00016C54 0000                       		dc.w @fiveflash-Ani_Drown
00016C56 0000                       		dc.w @blank-Ani_Drown
00016C58 0000                       		dc.w @mediumbubble-Ani_Drown
00016C5A 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016C64 00                         		even
00016C64 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016C6E 00                         		even
00016C6E 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016C78 00                         		even
00016C78 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016C82 00                         		even
00016C82 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016C8C 00                         		even
00016C8C 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016C96 00                         		even
00016C96 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016C9C 00                         		even
00016C9C 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016CA4 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016CAC 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016CB4 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016CBC 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016CC4 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016CCC 0EFC                       @blank:		dc.b $E, afRoutine
00016CCE 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016CD4                            		even
00016CD4                            		even
00016CD4                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016CD4                            ; ---------------------------------------------------------------------------
00016CD4                            ; Sprite mappings - drowning countdown numbers (LZ)
00016CD4                            ; ---------------------------------------------------------------------------
00016CD4                            Map_Drown_internal:
00016CD4 0000                       		dc.w @num-Map_Drown_internal
00016CD6 01                         @num:		dc.b 1
00016CD7 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016CDC                            		even
00016CDC                            		even
00016CDC                            
00016CDC                            		include	"_incObj\4E Silver Shield.asm"
00016CDC                            ; ---------------------------------------------------------------------------
00016CDC                            ; Object 4E - Silver Shield
00016CDC                            ; ---------------------------------------------------------------------------
00016CDC                            
00016CDC                            SpShieldItem:
00016CDC 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016CE2 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016CE6                            		; In this case, VRAM = $541*20
00016CE6 363C 0200                  		move.w #$200,d3
00016CEA 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016CF0                            ; ---------------------------------------------------------------------------
00016CF0                            SpShieldObj_Main:
00016CF0 7000                       		moveq #0,d0
00016CF2 1028 0024                  		move.b $24(a0),d0
00016CF6 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016CFA 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016CFE                            ; ===========================================================================
00016CFE                            SpShield_Index:
00016CFE 0000                       		dc.w SpShield_Init-SpShield_Index
00016D00 0000                       		dc.w SpShieldChecks-SpShield_Index
00016D02                            ; ===========================================================================
00016D02                            SpShield_Init:
00016D02 5428 0024                  		addq.b #2,$24(a0)
00016D06 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016D0E 117C 0004 0001             		move.b #4,1(a0)
00016D14 317C 0080 0018             		move.w #$80,$18(a0)
00016D1A 117C 0018 0014             		move.b #$18,obActWid(a0)
00016D20 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016D26 0838 0007 D002             		btst #7,($FFFFD002).w
00016D2C 6700                       		beq.s SpShieldChecks
00016D2E 08E8 0007 0002             		bset #7,2(a0)
00016D34                            ; ---------------------------------------------------------------------------
00016D34                            SpShieldChecks:
00016D34 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016D38 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016D3A 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016D3E 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016D40                            SpShieldProperties:
00016D40 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016D46 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016D4C 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016D52 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016D58 4EB9 0000 C804             		jsr AnimateSprite
00016D5E 4EFA 89E2                  		jmp DisplaySprite
00016D62                            SpSonicHasShield:
00016D62 4E75                       		rts
00016D64                            Spjmp_DeleteObj38: ; loc_12648:
00016D64 4EFA 8A1C                  		jmp DeleteObject
00016D64 4EFA 8A1C                  		jmp DeleteObject
00016D68                            		include	"_incObj\04 Gold Shield.asm"
00016D68                            ; ---------------------------------------------------------------------------
00016D68                            ; Object 04 - Gold shield
00016D68                            ; ---------------------------------------------------------------------------
00016D68                            
00016D68                            GShieldItem:
00016D68 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016D6E 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016D72                            		; In this case, VRAM = $541*20
00016D72 363C 0200                  		move.w #$200,d3
00016D76 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016D7C                            ; ---------------------------------------------------------------------------
00016D7C                            GShieldObj_Main:
00016D7C 7000                       		moveq #0,d0
00016D7E 1028 0024                  		move.b $24(a0),d0
00016D82 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016D86 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016D8A                            ; ===========================================================================
00016D8A                            GShield_Index:
00016D8A 0000                       		dc.w GShield_Init-GShield_Index
00016D8C 0000                       		dc.w GShieldChecks-GShield_Index
00016D8E                            ; ===========================================================================
00016D8E                            GShield_Init:
00016D8E 5428 0024                  		addq.b #2,$24(a0)
00016D92 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016D9A 117C 0004 0001             		move.b #4,1(a0)
00016DA0 317C 0080 0018             		move.w #$80,$18(a0)
00016DA6 117C 0018 0014             		move.b #$18,obActWid(a0)
00016DAC 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016DB2 0838 0007 D002             		btst #7,($FFFFD002).w
00016DB8 6700                       		beq.s GShieldChecks
00016DBA 08E8 0007 0002             		bset #7,2(a0)
00016DC0                            ; ---------------------------------------------------------------------------
00016DC0                            GShieldChecks:
00016DC0 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016DC4 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016DC6 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016DCA 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016DCC                            GShieldProperties:
00016DCC 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016DD2 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016DD8 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016DDE 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016DE4 4EB9 0000 C804             		jsr AnimateSprite
00016DEA 4EFA 8956                  		jmp DisplaySprite
00016DEE                            GSonicHasShield:
00016DEE 4E75                       		rts
00016DF0                            Gjmp_DeleteObj38: ; loc_12648:
00016DF0 4EFA 8990                  		jmp DeleteObject
00016DF0 4EFA 8990                  		jmp DeleteObject
00016DF4                            		include	"_incObj\07 Red Shield.asm"
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4                            ; Object 07 - red shield
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4                            
00016DF4                            RShieldItem:
00016DF4 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016DFA 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016DFE                            		; In this case, VRAM = $541*20
00016DFE 363C 0200                  		move.w #$200,d3
00016E02 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016E08                            ; ---------------------------------------------------------------------------
00016E08                            RShieldObj_Main:
00016E08 7000                       		moveq #0,d0
00016E0A 1028 0024                  		move.b $24(a0),d0
00016E0E 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016E12 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016E16                            ; ===========================================================================
00016E16                            RShield_Index:
00016E16 0000                       		dc.w RShield_Init-RShield_Index
00016E18 0000                       		dc.w RShieldChecks-RShield_Index
00016E1A                            ; ===========================================================================
00016E1A                            RShield_Init:
00016E1A 5428 0024                  		addq.b #2,$24(a0)
00016E1E 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E26 117C 0004 0001             		move.b #4,1(a0)
00016E2C 317C 0080 0018             		move.w #$80,$18(a0)
00016E32 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E38 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016E3E 0838 0007 D002             		btst #7,($FFFFD002).w
00016E44 6700                       		beq.s RShieldChecks
00016E46 08E8 0007 0002             		bset #7,2(a0)
00016E4C                            ; ---------------------------------------------------------------------------
00016E4C                            RShieldChecks:
00016E4C 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016E50 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016E52 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016E56 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016E58                            RShieldProperties:
00016E58 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016E5E 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016E64 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E6A 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E70 4EB9 0000 C804             		jsr AnimateSprite
00016E76 4EFA 88CA                  		jmp DisplaySprite
00016E7A                            RSonicHasShield:
00016E7A 4E75                       		rts
00016E7C                            Rjmp_DeleteObj38: ; loc_12648:
00016E7C 4EFA 8904                  		jmp DeleteObject
00016E7C 4EFA 8904                  		jmp DeleteObject
00016E80                            		include	"_incObj\38 Shield.asm"
00016E80                            ; ---------------------------------------------------------------------------
00016E80                            ; Object 38 - shield
00016E80                            ; ---------------------------------------------------------------------------
00016E80                            
00016E80                            ShieldItem:
00016E80 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016E86 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E8A                            		; In this case, VRAM = $541*20
00016E8A 363C 0200                  		move.w #$200,d3
00016E8E 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016E94                            ; ---------------------------------------------------------------------------
00016E94                            ShieldObj_Main:
00016E94 7000                       		moveq #0,d0
00016E96 1028 0024                  		move.b $24(a0),d0
00016E9A 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016E9E 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016EA2                            ; ===========================================================================
00016EA2                            Shield_Index:
00016EA2 0000                       		dc.w Shield_Init-Shield_Index
00016EA4 0000                       		dc.w ShieldChecks-Shield_Index
00016EA6                            ; ===========================================================================
00016EA6                            Shield_Init:
00016EA6 5428 0024                  		addq.b #2,$24(a0)
00016EAA 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016EB2 117C 0004 0001             		move.b #4,1(a0)
00016EB8 317C 0080 0018             		move.w #$80,$18(a0)
00016EBE 117C 0018 0014             		move.b #$18,obActWid(a0)
00016EC4 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016ECA 0838 0007 D002             		btst #7,($FFFFD002).w
00016ED0 6700                       		beq.s ShieldChecks
00016ED2 08E8 0007 0002             		bset #7,2(a0)
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8                            ShieldChecks:
00016ED8 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016EDC 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016EDE 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016EE2 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016EE4                            ShieldProperties:
00016EE4 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016EEA 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016EF0 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016EF6 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016EFC 4EB9 0000 C804             		jsr AnimateSprite
00016F02 4EFA 883E                  		jmp DisplaySprite
00016F06                            SonicHasShield:
00016F06 4E75                       		rts
00016F08                            jmp_DeleteObj38: ; loc_12648:
00016F08 4EFA 8878                  		jmp DeleteObject
00016F08 4EFA 8878                  		jmp DeleteObject
00016F0C                            		include	"_incObj\19 Invincibility Stars.asm"		
00016F0C                            ; ---------------------------------------------------------------------------
00016F0C                            ; Object 19 - Invincibility Stars
00016F0C                            ; ---------------------------------------------------------------------------
00016F0C                            
00016F0C                            InvStarsObj:
00016F0C 223C 0000 0000             		move.l #Unc_Stars,d1
00016F12 343C A820                  		move.w #$A820,d2
00016F16 363C 0200                  		move.w #$200,d3
00016F1A 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016F20                            Invincibility_Main:
00016F20 7000                       		moveq #0,d0
00016F22 1028 0024                  		move.b $24(a0),d0
00016F26                            Invincibility_Init:
00016F26 5428 0024                  		addq.b #2,$24(a0)
00016F2A 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00016F32 117C 0004 0001             		move.b #4,1(a0)
00016F38 317C 0080 0018             		move.w #$80,$18(a0)
00016F3E 117C 0010 0014             		move.b #$10,obActWid(a0)
00016F44 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00016F4A                            ; ===========================================================================
00016F4A                            
00016F4A                            Obj19_Stars: ; XREF: Obj38_Index
00016F4A 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00016F4E 6700                       		beq.s Obj19_Delete2 ; if not, branch
00016F50 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00016F54 1228 001C                  		move.b $1C(a0),d1
00016F58 5301                       		subq.b #1,d1
00016F5A 6000                       		bra.s Obj19_StarTrail
00016F5C                            ; ===========================================================================
00016F5C E909                       		lsl.b #4,d1
00016F5E 5801                       		addq.b #4,d1
00016F60 9001                       		sub.b d1,d0
00016F62 1228 0030                  		move.b $30(a0),d1
00016F66 9001                       		sub.b d1,d0
00016F68 5801                       		addq.b #4,d1
00016F6A 0201 000F                  		andi.b #$F,d1
00016F6E 1141 0030                  		move.b d1,$30(a0)
00016F72 6000                       		bra.s Obj19_StarTrail2a
00016F74                            ; ===========================================================================
00016F74                            
00016F74                            Obj19_StarTrail: ; XREF: Obj19_Stars
00016F74 E709                       		lsl.b #3,d1
00016F76 1401                       		move.b d1,d2
00016F78 D201                       		add.b d1,d1
00016F7A D202                       		add.b d2,d1
00016F7C 5801                       		addq.b #4,d1
00016F7E 9001                       		sub.b d1,d0
00016F80 1228 0030                  		move.b $30(a0),d1
00016F84 9001                       		sub.b d1,d0
00016F86 5801                       		addq.b #4,d1
00016F88 0C01 0018                  		cmpi.b #$18,d1
00016F8C 6500                       		bcs.s Obj19_StarTrail2
00016F8E 7200                       		moveq #0,d1
00016F90                            
00016F90                            Obj19_StarTrail2:
00016F90 1141 0030                  		move.b d1,$30(a0)
00016F94                            
00016F94                            Obj19_StarTrail2a:
00016F94 43F8 CB00                  		lea ($FFFFCB00).w,a1
00016F98 43F1 0000                  		lea (a1,d0.w),a1
00016F9C 3159 0008                  		move.w (a1)+,8(a0)
00016FA0 3159 000C                  		move.w (a1)+,$C(a0)
00016FA4 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
00016FAA 43F9 0000 0000             		lea (Ani_Shield).l,a1
00016FB0 4EB9 0000 C804             		jsr (AnimateSprite).l
00016FB6 4EF9 0000 F742             		jmp (DisplaySprite).l
00016FBC                            ; ===========================================================================
00016FBC                            
00016FBC                            Obj19_Delete2: ; XREF: Obj19_Stars
00016FBC 4EF9 0000 F782             		jmp (DeleteObject).l
00016FBC 4EF9 0000 F782             		jmp (DeleteObject).l
00016FC2                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00016FC2                            ; ---------------------------------------------------------------------------
00016FC2                            ; Object 4A - special stage entry from beta
00016FC2                            ; ---------------------------------------------------------------------------
00016FC2                            
00016FC2                            VanishSonic:
00016FC2 7000                       		moveq	#0,d0
00016FC4 1028 0024                  		move.b	obRoutine(a0),d0
00016FC8 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00016FCC 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00016FD0                            ; ===========================================================================
00016FD0 0000                       Van_Index:	dc.w Van_Main-Van_Index
00016FD2 0000                       		dc.w Van_RmvSonic-Van_Index
00016FD4 0000                       		dc.w Van_LoadSonic-Van_Index
00016FD6                            
00016FD6 =00000030                  van_time:	equ $30		; time for Sonic to disappear
00016FD6                            ; ===========================================================================
00016FD6                            
00016FD6                            Van_Main:	; Routine 0
00016FD6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00016FDA 6700                       		beq.s	@isempty	; if yes, branch
00016FDC 4E75                       		rts	
00016FDE                            
00016FDE                            	@isempty:
00016FDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00016FE2 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00016FEA 117C 0004 0001             		move.b	#4,obRender(a0)
00016FF0 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016FF6 117C 0038 0014             		move.b	#$38,obActWid(a0)
00016FFC 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017002 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017008                            
00017008                            Van_RmvSonic:	; Routine 2
00017008 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
0001700E 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017014 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
0001701A 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017020 4EB9 0000 C804             		jsr	(AnimateSprite).l
00017026 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001702C 6600                       		bne.s	@display
0001702E 4A38 D000                  		tst.b	(v_player).w
00017032 6700                       		beq.s	@display
00017034 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017044                            
00017044                            	@display:
00017044 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001704A                            ; ===========================================================================
0001704A                            
0001704A                            Van_LoadSonic:	; Routine 4
0001704A 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
0001704E 6600                       		bne.s	@wait		; if time remains, branch
00017050 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017056 4EF9 0000 F782             		jmp	(DeleteObject).l
0001705C                            
0001705C                            	@wait:
0001705C 4E75                       		rts	
0001705C 4E75                       		rts	
0001705E                            		include	"_incObj\08 Water Splash.asm"
0001705E                            ; ---------------------------------------------------------------------------
0001705E                            ; Object 08 - water splash (LZ)
0001705E                            ; ---------------------------------------------------------------------------
0001705E                            
0001705E                            Splash:
0001705E 7000                       		moveq	#0,d0
00017060 1028 0024                  		move.b	obRoutine(a0),d0
00017064 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017068 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
0001706C                            ; ===========================================================================
0001706C 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
0001706E 0000                       		dc.w Spla_Display-Spla_Index
00017070 0000                       		dc.w Spla_Delete-Spla_Index
00017072                            ; ===========================================================================
00017072                            
00017072                            Spla_Main:    ; Routine 0
00017072 5428 0024                          addq.b    #2,obRoutine(a0)
00017076 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
0001707E 0028 0004 0001                     ori.b    #4,obRender(a0)
00017084 117C 0001 0018                     move.b    #1,obPriority(a0)
0001708A 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017090 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017096 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
0001709C                            
0001709C                            Spla_Display:    ; Routine 2
0001709C                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
0001709C 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000170A2 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000170A8 4EB9 0000 C804                     jsr    (AnimateSprite).l
000170AE 4EF9 0000 F742                     jmp    (DisplaySprite).l
000170B4                            ; ===========================================================================
000170B4                            
000170B4                            Spla_Delete:	; Routine 4
000170B4 4EF9 0000 F782             		jmp	(DeleteObject).l	; delete when animation	is complete
000170B4 4EF9 0000 F782             		jmp	(DeleteObject).l	; delete when animation	is complete
000170BA                            		include	"_anim\Shield and Invincibility.asm"
000170BA                            ; ---------------------------------------------------------------------------
000170BA                            ; Animation script - shield and invincibility stars
000170BA                            ; ---------------------------------------------------------------------------
000170BA 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000170BC 0000                       		dc.w @stars1-Ani_Shield
000170BE 0000                       		dc.w @stars2-Ani_Shield
000170C0 0000                       		dc.w @stars3-Ani_Shield
000170C2 0000                       		dc.w @stars4-Ani_Shield
000170C4 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000170CC 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000170D2 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000170E3 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
000170EC 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000170FD 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
00017106 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00017117 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017120                            		even
00017120                            		even
00017120                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017120                            ; --------------------------------------------------------------------------------
00017120                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017120                            ; --------------------------------------------------------------------------------
00017120                            
00017120                            SME_7M_8q:	
00017120 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
00017124 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
00017128 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
0001712C 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017130 00                         SME_7M_8q_10:	dc.b 0	
00017131 04                         SME_7M_8q_11:	dc.b 4	
00017132 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017137 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001713C 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017141 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017146 04                         SME_7M_8q_26:	dc.b 4	
00017147 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
0001714C E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017151 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
00017156 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
0001715B 04                         SME_7M_8q_3B:	dc.b 4	
0001715C E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017161 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017166 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001716B 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017170 04                         SME_7M_8q_50:	dc.b 4	
00017171 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017176 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001717B 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017180 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017185 04                         SME_7M_8q_65:	dc.b 4	
00017186 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
0001718B E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017190 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017195 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001719A 04                         SME_7M_8q_7A:	dc.b 4	
0001719B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000171A0 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000171A5 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000171AA 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000171AF 04                         SME_7M_8q_8F:	dc.b 4	
000171B0 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000171B5 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000171BA 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000171BF 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000171C4                            		even
000171C4                            		even
000171C4                            Map_Shield2:	include	"_maps\Shield 2.asm"
000171C4                            ; --------------------------------------------------------------------------------
000171C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000171C4                            ; --------------------------------------------------------------------------------
000171C4                            
000171C4                            SME_X5P7B:	
000171C4 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000171C8 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000171CC 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000171D0 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000171D4 00                         SME_X5P7B_10:	dc.b 0	
000171D5 04                         SME_X5P7B_11:	dc.b 4	
000171D6 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000171DB E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000171E0 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000171E5 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000171EA 04                         SME_X5P7B_26:	dc.b 4	
000171EB E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000171F0 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000171F5 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000171FA 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000171FF 04                         SME_X5P7B_3B:	dc.b 4	
00017200 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017205 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001720A 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001720F 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017214 04                         SME_X5P7B_50:	dc.b 4	
00017215 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001721A E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001721F 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017224 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017229 04                         SME_X5P7B_65:	dc.b 4	
0001722A E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001722F E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017234 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017239 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001723E 04                         SME_X5P7B_7A:	dc.b 4	
0001723F E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017244 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017249 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001724E 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017253 04                         SME_X5P7B_8F:	dc.b 4	
00017254 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017259 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001725E 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017263 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017268                            		even
00017268                            		even
00017268                            
00017268                            Map_Shield3:	include	"_maps\Shield 3.asm"
00017268                            ; --------------------------------------------------------------------------------
00017268                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017268                            ; --------------------------------------------------------------------------------
00017268                            
00017268                            SME__wWzO:	
00017268 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
0001726C 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017270 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
00017274 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
00017278 00                         SME__wWzO_10:	dc.b 0	
00017279 04                         SME__wWzO_11:	dc.b 4	
0001727A E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001727F E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017284 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017289 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001728E 04                         SME__wWzO_26:	dc.b 4	
0001728F E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017294 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
00017299 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
0001729E 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000172A3 04                         SME__wWzO_3B:	dc.b 4	
000172A4 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000172A9 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000172AE 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000172B3 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000172B8 04                         SME__wWzO_50:	dc.b 4	
000172B9 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000172BE E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000172C3 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000172C8 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000172CD 04                         SME__wWzO_65:	dc.b 4	
000172CE E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000172D3 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000172D8 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000172DD 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000172E2 04                         SME__wWzO_7A:	dc.b 4	
000172E3 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
000172E8 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
000172ED 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
000172F2 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
000172F7 04                         SME__wWzO_8F:	dc.b 4	
000172F8 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000172FD E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017302 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017307 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001730C                            		even
0001730C                            		even
0001730C                            		include	"_anim\Special Stage Entry (Unused).asm"
0001730C                            ; ---------------------------------------------------------------------------
0001730C                            ; Animation script - special stage entry effect from beta
0001730C                            ; ---------------------------------------------------------------------------
0001730C 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
0001730E 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017322                            		even
00017322                            		even
00017322                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017322                            ; ---------------------------------------------------------------------------
00017322                            ; Sprite mappings - special stage entry	from beta
00017322                            ; ---------------------------------------------------------------------------
00017322                            Map_Vanish_internal:
00017322 0000                       		dc.w @flash1-Map_Vanish_internal
00017324 0000                       		dc.w @flash2-Map_Vanish_internal
00017326 0000                       		dc.w @flash3-Map_Vanish_internal
00017328 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001732A 0000                       		dc.w @sparkle2-Map_Vanish_internal
0001732C 0000                       		dc.w @sparkle3-Map_Vanish_internal
0001732E 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017330 0000                       		dc.w @blank-Map_Vanish_internal
00017332 03                         @flash1:	dc.b 3
00017333 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017338 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001733D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017342 03                         @flash2:	dc.b 3
00017343 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017348 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001734D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017352 05                         @flash3:	dc.b 5
00017353 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017358 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001735D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017362 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017367 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001736C 09                         @sparkle1:	dc.b 9
0001736D F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017372 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017377 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001737C 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017381 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017386 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001738B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017390 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00017395 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001739A 12                         @sparkle2:	dc.b $12
0001739B 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000173A0 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000173A5 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000173AA 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000173AF 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000173B4 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000173B9 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000173BE F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000173C3 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000173C8 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000173CD 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000173D2 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000173D7 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000173DC F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000173E1 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000173E6 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000173EB 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000173F0 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000173F5 11                         @sparkle3:	dc.b $11
000173F6 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000173FB F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017400 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017405 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001740A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001740F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017414 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017419 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001741E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017423 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017428 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001742D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017432 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017437 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001743C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017441 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017446 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001744B 09                         @sparkle4:	dc.b 9
0001744C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017451 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017456 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001745B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017460 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017465 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001746A 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001746F 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017474 04                         		dc.b 4
00017475 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
0001747A                            		even
0001747A                            		even
0001747A                            		include	"_anim\Water Splash.asm"
0001747A                            ; ---------------------------------------------------------------------------
0001747A                            ; Animation script - water splash (LZ)
0001747A                            ; ---------------------------------------------------------------------------
0001747A 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
0001747C 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00017482 00                         		even
00017482 00                         		even
00017482                            Map_Splash:	include	"_maps\Water Splash.asm"
00017482                            ; ---------------------------------------------------------------------------
00017482                            ; Sprite mappings - water splash (LZ)
00017482                            ; ---------------------------------------------------------------------------
00017482                            Map_Splash_internal:
00017482 0000                       		dc.w @splash1-Map_Splash_internal
00017484 0000                       		dc.w @splash2-Map_Splash_internal
00017486 0000                       		dc.w @splash3-Map_Splash_internal
00017488 02                         @splash1:	dc.b 2
00017489 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001748E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017493 02                         @splash2:	dc.b 2
00017494 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017499 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001749E 01                         @splash3:	dc.b 1
0001749F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000174A4                            		even
000174A4                            		even
000174A4                            
000174A4                            		include	"_incObj\Sonic AnglePos.asm"
000174A4                            ; ---------------------------------------------------------------------------
000174A4                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000174A4                            ; ---------------------------------------------------------------------------
000174A4                            
000174A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174A4                            
000174A4                            
000174A4                            Sonic_AnglePos:
000174A4 0828 0003 0022             		btst	#3,obStatus(a0)
000174AA 6700                       		beq.s	loc_14602
000174AC 7000                       		moveq	#0,d0
000174AE 11C0 F768                  		move.b	d0,($FFFFF768).w
000174B2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000174B6 4E75                       		rts	
000174B8                            ; ===========================================================================
000174B8                            
000174B8                            loc_14602:
000174B8 7003                       		moveq	#3,d0
000174BA 11C0 F768                  		move.b	d0,($FFFFF768).w
000174BE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000174C2 1028 0026                  		move.b	obAngle(a0),d0
000174C6 0600 0020                  		addi.b	#$20,d0
000174CA 6A00                       		bpl.s	loc_14624
000174CC 1028 0026                  		move.b	obAngle(a0),d0
000174D0 6A00                       		bpl.s	loc_1461E
000174D2 5300                       		subq.b	#1,d0
000174D4                            
000174D4                            loc_1461E:
000174D4 0600 0020                  		addi.b	#$20,d0
000174D8 6000                       		bra.s	loc_14630
000174DA                            ; ===========================================================================
000174DA                            
000174DA                            loc_14624:
000174DA 1028 0026                  		move.b	obAngle(a0),d0
000174DE 6A00                       		bpl.s	loc_1462C
000174E0 5200                       		addq.b	#1,d0
000174E2                            
000174E2                            loc_1462C:
000174E2 0600 001F                  		addi.b	#$1F,d0
000174E6                            
000174E6                            loc_14630:
000174E6 0200 00C0                  		andi.b	#$C0,d0
000174EA 0C00 0040                  		cmpi.b	#$40,d0
000174EE 6700 0000                  		beq.w	Sonic_WalkVertL
000174F2 0C00 0080                  		cmpi.b	#$80,d0
000174F6 6700 0000                  		beq.w	Sonic_WalkCeiling
000174FA 0C00 00C0                  		cmpi.b	#$C0,d0
000174FE 6700 0000                  		beq.w	Sonic_WalkVertR
00017502 3428 000C                  		move.w	obY(a0),d2
00017506 3628 0008                  		move.w	obX(a0),d3
0001750A 7000                       		moveq	#0,d0
0001750C 1028 0016                  		move.b	obHeight(a0),d0
00017510 4880                       		ext.w	d0
00017512 D440                       		add.w	d0,d2
00017514 1028 0017                  		move.b	obWidth(a0),d0
00017518 4880                       		ext.w	d0
0001751A D640                       		add.w	d0,d3
0001751C 49F8 F768                  		lea	($FFFFF768).w,a4
00017520 367C 0010                  		movea.w	#$10,a3
00017524 3C3C 0000                  		move.w	#0,d6
00017528 7A0D                       		moveq	#$D,d5
0001752A 6100 0000                  		bsr.w	FindFloor
0001752E 3F01                       		move.w	d1,-(sp)
00017530 3428 000C                  		move.w	obY(a0),d2
00017534 3628 0008                  		move.w	obX(a0),d3
00017538 7000                       		moveq	#0,d0
0001753A 1028 0016                  		move.b	obHeight(a0),d0
0001753E 4880                       		ext.w	d0
00017540 D440                       		add.w	d0,d2
00017542 1028 0017                  		move.b	obWidth(a0),d0
00017546 4880                       		ext.w	d0
00017548 4440                       		neg.w	d0
0001754A D640                       		add.w	d0,d3
0001754C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017550 367C 0010                  		movea.w	#$10,a3
00017554 3C3C 0000                  		move.w	#0,d6
00017558 7A0D                       		moveq	#$D,d5
0001755A 6100 0000                  		bsr.w	FindFloor
0001755E 301F                       		move.w	(sp)+,d0
00017560 6100 0000                  		bsr.w	Sonic_Angle
00017564 4A41                       		tst.w	d1
00017566 6700                       		beq.s	locret_146BE
00017568 6A00                       		bpl.s	loc_146C0
0001756A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001756E 6D00                       		blt.s	locret_146E6
00017570 D368 000C                  		add.w	d1,obY(a0)
00017574                            
00017574                            locret_146BE:
00017574 4E75                       		rts	
00017576                            ; ===========================================================================
00017576                            
00017576                            loc_146C0:
00017576 0C41 000E                  		cmpi.w	#$E,d1
0001757A 6E00                       		bgt.s	loc_146CC
0001757C                            
0001757C                            loc_146C6:
0001757C D368 000C                  		add.w	d1,obY(a0)
00017580 4E75                       		rts	
00017582                            ; ===========================================================================
00017582                            
00017582                            loc_146CC:
00017582 4A28 0038                  		tst.b	$38(a0)
00017586 66F4                       		bne.s	loc_146C6
00017588 08E8 0001 0022             		bset	#1,obStatus(a0)
0001758E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017594 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001759A 4E75                       		rts	
0001759C                            ; ===========================================================================
0001759C                            
0001759C                            locret_146E6:
0001759C 4E75                       		rts	
0001759E                            ; End of function Sonic_AnglePos
0001759E                            
0001759E                            ; ===========================================================================
0001759E 2428 0008                  		move.l	obX(a0),d2
000175A2 3028 0010                  		move.w	obVelX(a0),d0
000175A6 48C0                       		ext.l	d0
000175A8 E180                       		asl.l	#8,d0
000175AA 9480                       		sub.l	d0,d2
000175AC 2142 0008                  		move.l	d2,obX(a0)
000175B0 303C 0038                  		move.w	#$38,d0
000175B4 48C0                       		ext.l	d0
000175B6 E180                       		asl.l	#8,d0
000175B8 9680                       		sub.l	d0,d3
000175BA 2143 000C                  		move.l	d3,obY(a0)
000175BE 4E75                       		rts	
000175C0                            ; ===========================================================================
000175C0                            
000175C0                            locret_1470A:
000175C0 4E75                       		rts	
000175C2                            ; ===========================================================================
000175C2 2628 000C                  		move.l	obY(a0),d3
000175C6 3028 0012                  		move.w	obVelY(a0),d0
000175CA 0440 0038                  		subi.w	#$38,d0
000175CE 3140 0012                  		move.w	d0,obVelY(a0)
000175D2 48C0                       		ext.l	d0
000175D4 E180                       		asl.l	#8,d0
000175D6 9680                       		sub.l	d0,d3
000175D8 2143 000C                  		move.l	d3,obY(a0)
000175DC 4E75                       		rts	
000175DE 4E75                       		rts	
000175E0                            ; ===========================================================================
000175E0 2428 0008                  		move.l	obX(a0),d2
000175E4 2628 000C                  		move.l	obY(a0),d3
000175E8 3028 0010                  		move.w	obVelX(a0),d0
000175EC 48C0                       		ext.l	d0
000175EE E180                       		asl.l	#8,d0
000175F0 9480                       		sub.l	d0,d2
000175F2 3028 0012                  		move.w	obVelY(a0),d0
000175F6 48C0                       		ext.l	d0
000175F8 E180                       		asl.l	#8,d0
000175FA 9680                       		sub.l	d0,d3
000175FC 2142 0008                  		move.l	d2,obX(a0)
00017600 2143 000C                  		move.l	d3,obY(a0)
00017604 4E75                       		rts	
00017606                            
00017606                            ; ---------------------------------------------------------------------------
00017606                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017606                            ; ---------------------------------------------------------------------------
00017606                            
00017606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017606                            
00017606                            
00017606                            Sonic_Angle:
00017606 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001760A B240                       		cmp.w	d0,d1
0001760C 6F00                       		ble.s	loc_1475E
0001760E 1438 F768                  		move.b	($FFFFF768).w,d2
00017612 3200                       		move.w	d0,d1
00017614                            
00017614                            loc_1475E:
00017614 0802 0000                  		btst	#0,d2
00017618 6600                       		bne.s	loc_1476A
0001761A 1142 0026                  		move.b	d2,obAngle(a0)
0001761E 4E75                       		rts	
00017620                            ; ===========================================================================
00017620                            
00017620                            loc_1476A:
00017620 1428 0026                  		move.b	obAngle(a0),d2
00017624 0602 0020                  		addi.b	#$20,d2
00017628 0202 00C0                  		andi.b	#$C0,d2
0001762C 1142 0026                  		move.b	d2,obAngle(a0)
00017630 4E75                       		rts	
00017632                            ; End of function Sonic_Angle
00017632                            
00017632                            ; ---------------------------------------------------------------------------
00017632                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017632                            ; ---------------------------------------------------------------------------
00017632                            
00017632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017632                            
00017632                            
00017632                            Sonic_WalkVertR:
00017632 3428 000C                  		move.w	obY(a0),d2
00017636 3628 0008                  		move.w	obX(a0),d3
0001763A 7000                       		moveq	#0,d0
0001763C 1028 0017                  		move.b	obWidth(a0),d0
00017640 4880                       		ext.w	d0
00017642 4440                       		neg.w	d0
00017644 D440                       		add.w	d0,d2
00017646 1028 0016                  		move.b	obHeight(a0),d0
0001764A 4880                       		ext.w	d0
0001764C D640                       		add.w	d0,d3
0001764E 49F8 F768                  		lea	($FFFFF768).w,a4
00017652 367C 0010                  		movea.w	#$10,a3
00017656 3C3C 0000                  		move.w	#0,d6
0001765A 7A0D                       		moveq	#$D,d5
0001765C 6100 0000                  		bsr.w	FindWall
00017660 3F01                       		move.w	d1,-(sp)
00017662 3428 000C                  		move.w	obY(a0),d2
00017666 3628 0008                  		move.w	obX(a0),d3
0001766A 7000                       		moveq	#0,d0
0001766C 1028 0017                  		move.b	obWidth(a0),d0
00017670 4880                       		ext.w	d0
00017672 D440                       		add.w	d0,d2
00017674 1028 0016                  		move.b	obHeight(a0),d0
00017678 4880                       		ext.w	d0
0001767A D640                       		add.w	d0,d3
0001767C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017680 367C 0010                  		movea.w	#$10,a3
00017684 3C3C 0000                  		move.w	#0,d6
00017688 7A0D                       		moveq	#$D,d5
0001768A 6100 0000                  		bsr.w	FindWall
0001768E 301F                       		move.w	(sp)+,d0
00017690 6100 FF74                  		bsr.w	Sonic_Angle
00017694 4A41                       		tst.w	d1
00017696 6700                       		beq.s	locret_147F0
00017698 6A00                       		bpl.s	loc_147F2
0001769A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001769E 6D00 FF20                  		blt.w	locret_1470A
000176A2 D368 0008                  		add.w	d1,obX(a0)
000176A6                            
000176A6                            locret_147F0:
000176A6 4E75                       		rts	
000176A8                            ; ===========================================================================
000176A8                            
000176A8                            loc_147F2:
000176A8 0C41 000E                  		cmpi.w	#$E,d1
000176AC 6E00                       		bgt.s	loc_147FE
000176AE                            
000176AE                            loc_147F8:
000176AE D368 0008                  		add.w	d1,obX(a0)
000176B2 4E75                       		rts	
000176B4                            ; ===========================================================================
000176B4                            
000176B4                            loc_147FE:
000176B4 4A28 0038                  		tst.b	$38(a0)
000176B8 66F4                       		bne.s	loc_147F8
000176BA 08E8 0001 0022             		bset	#1,obStatus(a0)
000176C0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000176C6 117C 0001 001D             		move.b	#1,obNextAni(a0)
000176CC 4E75                       		rts	
000176CE                            ; End of function Sonic_WalkVertR
000176CE                            
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            ; Subroutine allowing Sonic to walk upside-down
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            
000176CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176CE                            
000176CE                            
000176CE                            Sonic_WalkCeiling:
000176CE 3428 000C                  		move.w	obY(a0),d2
000176D2 3628 0008                  		move.w	obX(a0),d3
000176D6 7000                       		moveq	#0,d0
000176D8 1028 0016                  		move.b	obHeight(a0),d0
000176DC 4880                       		ext.w	d0
000176DE 9440                       		sub.w	d0,d2
000176E0 0A42 000F                  		eori.w	#$F,d2
000176E4 1028 0017                  		move.b	obWidth(a0),d0
000176E8 4880                       		ext.w	d0
000176EA D640                       		add.w	d0,d3
000176EC 49F8 F768                  		lea	($FFFFF768).w,a4
000176F0 367C FFF0                  		movea.w	#-$10,a3
000176F4 3C3C 1000                  		move.w	#$1000,d6
000176F8 7A0D                       		moveq	#$D,d5
000176FA 6100 0000                  		bsr.w	FindFloor
000176FE 3F01                       		move.w	d1,-(sp)
00017700 3428 000C                  		move.w	obY(a0),d2
00017704 3628 0008                  		move.w	obX(a0),d3
00017708 7000                       		moveq	#0,d0
0001770A 1028 0016                  		move.b	obHeight(a0),d0
0001770E 4880                       		ext.w	d0
00017710 9440                       		sub.w	d0,d2
00017712 0A42 000F                  		eori.w	#$F,d2
00017716 1028 0017                  		move.b	obWidth(a0),d0
0001771A 4880                       		ext.w	d0
0001771C 9640                       		sub.w	d0,d3
0001771E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017722 367C FFF0                  		movea.w	#-$10,a3
00017726 3C3C 1000                  		move.w	#$1000,d6
0001772A 7A0D                       		moveq	#$D,d5
0001772C 6100 0000                  		bsr.w	FindFloor
00017730 301F                       		move.w	(sp)+,d0
00017732 6100 FED2                  		bsr.w	Sonic_Angle
00017736 4A41                       		tst.w	d1
00017738 6700                       		beq.s	locret_14892
0001773A 6A00                       		bpl.s	loc_14894
0001773C 0C41 FFF2                  		cmpi.w	#-$E,d1
00017740 6D00 FE5A                  		blt.w	locret_146E6
00017744 9368 000C                  		sub.w	d1,obY(a0)
00017748                            
00017748                            locret_14892:
00017748 4E75                       		rts	
0001774A                            ; ===========================================================================
0001774A                            
0001774A                            loc_14894:
0001774A 0C41 000E                  		cmpi.w	#$E,d1
0001774E 6E00                       		bgt.s	loc_148A0
00017750                            
00017750                            loc_1489A:
00017750 9368 000C                  		sub.w	d1,obY(a0)
00017754 4E75                       		rts	
00017756                            ; ===========================================================================
00017756                            
00017756                            loc_148A0:
00017756 4A28 0038                  		tst.b	$38(a0)
0001775A 66F4                       		bne.s	loc_1489A
0001775C 08E8 0001 0022             		bset	#1,obStatus(a0)
00017762 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017768 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001776E 4E75                       		rts	
00017770                            ; End of function Sonic_WalkCeiling
00017770                            
00017770                            ; ---------------------------------------------------------------------------
00017770                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017770                            ; ---------------------------------------------------------------------------
00017770                            
00017770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017770                            
00017770                            
00017770                            Sonic_WalkVertL:
00017770 3428 000C                  		move.w	obY(a0),d2
00017774 3628 0008                  		move.w	obX(a0),d3
00017778 7000                       		moveq	#0,d0
0001777A 1028 0017                  		move.b	obWidth(a0),d0
0001777E 4880                       		ext.w	d0
00017780 9440                       		sub.w	d0,d2
00017782 1028 0016                  		move.b	obHeight(a0),d0
00017786 4880                       		ext.w	d0
00017788 9640                       		sub.w	d0,d3
0001778A 0A43 000F                  		eori.w	#$F,d3
0001778E 49F8 F768                  		lea	($FFFFF768).w,a4
00017792 367C FFF0                  		movea.w	#-$10,a3
00017796 3C3C 0800                  		move.w	#$800,d6
0001779A 7A0D                       		moveq	#$D,d5
0001779C 6100 0000                  		bsr.w	FindWall
000177A0 3F01                       		move.w	d1,-(sp)
000177A2 3428 000C                  		move.w	obY(a0),d2
000177A6 3628 0008                  		move.w	obX(a0),d3
000177AA 7000                       		moveq	#0,d0
000177AC 1028 0017                  		move.b	obWidth(a0),d0
000177B0 4880                       		ext.w	d0
000177B2 D440                       		add.w	d0,d2
000177B4 1028 0016                  		move.b	obHeight(a0),d0
000177B8 4880                       		ext.w	d0
000177BA 9640                       		sub.w	d0,d3
000177BC 0A43 000F                  		eori.w	#$F,d3
000177C0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000177C4 367C FFF0                  		movea.w	#-$10,a3
000177C8 3C3C 0800                  		move.w	#$800,d6
000177CC 7A0D                       		moveq	#$D,d5
000177CE 6100 0000                  		bsr.w	FindWall
000177D2 301F                       		move.w	(sp)+,d0
000177D4 6100 FE30                  		bsr.w	Sonic_Angle
000177D8 4A41                       		tst.w	d1
000177DA 6700                       		beq.s	locret_14934
000177DC 6A00                       		bpl.s	loc_14936
000177DE 0C41 FFF2                  		cmpi.w	#-$E,d1
000177E2 6D00 FDDC                  		blt.w	locret_1470A
000177E6 9368 0008                  		sub.w	d1,obX(a0)
000177EA                            
000177EA                            locret_14934:
000177EA 4E75                       		rts	
000177EC                            ; ===========================================================================
000177EC                            
000177EC                            loc_14936:
000177EC 0C41 000E                  		cmpi.w	#$E,d1
000177F0 6E00                       		bgt.s	loc_14942
000177F2                            
000177F2                            loc_1493C:
000177F2 9368 0008                  		sub.w	d1,obX(a0)
000177F6 4E75                       		rts	
000177F8                            ; ===========================================================================
000177F8                            
000177F8                            loc_14942:
000177F8 4A28 0038                  		tst.b	$38(a0)
000177FC 66F4                       		bne.s	loc_1493C
000177FE 08E8 0001 0022             		bset	#1,obStatus(a0)
00017804 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001780A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017810 4E75                       		rts	
00017812                            ; End of function Sonic_WalkVertL
00017812                            ; End of function Sonic_WalkVertL
00017812                            
00017812                            		include	"_incObj\sub FindNearestTile.asm"
00017812                            ; ---------------------------------------------------------------------------
00017812                            ; Subroutine to	find which tile	the object is standing on
00017812                            
00017812                            ; input:
00017812                            ;	d2 = y-position of object's bottom edge
00017812                            ;	d3 = x-position of object
00017812                            
00017812                            ; output:
00017812                            ;	a1 = address within 256x256 mappings where object is standing
00017812                            ;	     (refers to a 16x16 tile number)
00017812                            ; ---------------------------------------------------------------------------
00017812                            
00017812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017812                            
00017812                            
00017812                            FindNearestTile:
00017812 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017814 E248                       		lsr.w	#1,d0
00017816 0240 0380                  		andi.w	#$380,d0
0001781A 3203                       		move.w	d3,d1		; get x-pos. of object
0001781C E049                       		lsr.w	#8,d1
0001781E 0241 007F                  		andi.w	#$7F,d1
00017822 D041                       		add.w	d1,d0		; combine
00017824 72FF                       		moveq	#-1,d1
00017826 43F8 A400                  		lea	(v_lvllayout).w,a1
0001782A 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
0001782E 6700                       		beq.s	@blanktile	; branch if 0
00017830 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017832 5301                       		subq.b	#1,d1
00017834 4881                       		ext.w	d1
00017836 EE59                       		ror.w	#7,d1
00017838 3002                       		move.w	d2,d0
0001783A D040                       		add.w	d0,d0
0001783C 0240 01E0                  		andi.w	#$1E0,d0
00017840 D240                       		add.w	d0,d1
00017842 3003                       		move.w	d3,d0
00017844 E648                       		lsr.w	#3,d0
00017846 0240 001E                  		andi.w	#$1E,d0
0001784A D240                       		add.w	d0,d1
0001784C                            
0001784C                            @blanktile:
0001784C 2241                       		movea.l	d1,a1
0001784E 4E75                       		rts	
00017850                            ; ===========================================================================
00017850                            
00017850                            @specialtile:
00017850 0241 007F                  		andi.w	#$7F,d1
00017854 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
0001785A 6700                       		beq.s	@treatasnormal	; if not, branch
0001785C 5241                       		addq.w	#1,d1
0001785E 0C41 0029                  		cmpi.w	#$29,d1
00017862 6600                       		bne.s	@treatasnormal
00017864 323C 0051                  		move.w	#$51,d1
00017868                            
00017868                            	@treatasnormal:
00017868 5301                       		subq.b	#1,d1
0001786A EE59                       		ror.w	#7,d1
0001786C 3002                       		move.w	d2,d0
0001786E D040                       		add.w	d0,d0
00017870 0240 01E0                  		andi.w	#$1E0,d0
00017874 D240                       		add.w	d0,d1
00017876 3003                       		move.w	d3,d0
00017878 E648                       		lsr.w	#3,d0
0001787A 0240 001E                  		andi.w	#$1E,d0
0001787E D240                       		add.w	d0,d1
00017880 2241                       		movea.l	d1,a1
00017882 4E75                       		rts	
00017884                            ; End of function FindNearestTile
00017884                            ; End of function FindNearestTile
00017884                            		include	"_incObj\sub FindFloor.asm"
00017884                            ; ---------------------------------------------------------------------------
00017884                            ; Subroutine to	find the floor
00017884                            
00017884                            ; input:
00017884                            ;	d2 = y-position of object's bottom edge
00017884                            ;	d3 = x-position of object
00017884                            ;	d5 = bit to test for solidness
00017884                            
00017884                            ; output:
00017884                            ;	d1 = distance to the floor
00017884                            ;	a1 = address within 256x256 mappings where object is standing
00017884                            ;	     (refers to a 16x16 tile number)
00017884                            ;	(a4) = floor angle
00017884                            ; ---------------------------------------------------------------------------
00017884                            
00017884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017884                            
00017884                            
00017884                            FindFloor:
00017884 618C                       		bsr.s	FindNearestTile
00017886 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017888 3800                       		move.w	d0,d4
0001788A 0240 07FF                  		andi.w	#$7FF,d0
0001788E 6700                       		beq.s	@isblank	; branch if tile is blank
00017890 0B04                       		btst	d5,d4		; is the tile solid?
00017892 6600                       		bne.s	@issolid	; if yes, branch
00017894                            
00017894                            @isblank:
00017894 D44B                       		add.w	a3,d2
00017896 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
0001789A 944B                       		sub.w	a3,d2
0001789C 0641 0010                  		addi.w	#$10,d1		; return distance to floor
000178A0 4E75                       		rts	
000178A2                            ; ===========================================================================
000178A2                            
000178A2                            @issolid:
000178A2 2478 F796                  		movea.l	(v_collindex).w,a2
000178A6 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
000178AA 0240 00FF                  		andi.w	#$FF,d0
000178AE 67E4                       		beq.s	@isblank	; branch if 0
000178B0 45F9 0000 0000             		lea	(AngleMap).l,a2
000178B6 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
000178BA E948                       		lsl.w	#4,d0
000178BC 3203                       		move.w	d3,d1		; get x-pos. of object
000178BE 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
000178C2 6700                       		beq.s	@noflip		; if not, branch
000178C4 4641                       		not.w	d1
000178C6 4414                       		neg.b	(a4)
000178C8                            
000178C8                            	@noflip:
000178C8 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000178CC 6700                       		beq.s	@noflip2	; if not, branch
000178CE 0614 0040                  		addi.b	#$40,(a4)
000178D2 4414                       		neg.b	(a4)
000178D4 0414 0040                  		subi.b	#$40,(a4)
000178D8                            
000178D8                            	@noflip2:
000178D8 0241 000F                  		andi.w	#$F,d1
000178DC D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
000178DE 45F9 0000 0000             		lea	(CollArray1).l,a2
000178E4 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
000178E8 4880                       		ext.w	d0
000178EA BD44                       		eor.w	d6,d4
000178EC 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000178F0 6700                       		beq.s	@noflip3	; if not, branch
000178F2 4440                       		neg.w	d0
000178F4                            
000178F4                            	@noflip3:
000178F4 4A40                       		tst.w	d0
000178F6 679C                       		beq.s	@isblank	; branch if height is 0
000178F8 6B00                       		bmi.s	@negfloor	; branch if height is negative
000178FA 0C00 0010                  		cmpi.b	#$10,d0
000178FE 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017900 3202                       		move.w	d2,d1		; get y-pos. of object
00017902 0241 000F                  		andi.w	#$F,d1
00017906 D041                       		add.w	d1,d0
00017908 323C 000F                  		move.w	#$F,d1
0001790C 9240                       		sub.w	d0,d1		; return distance to floor
0001790E 4E75                       		rts	
00017910                            ; ===========================================================================
00017910                            
00017910                            @negfloor:
00017910 3202                       		move.w	d2,d1
00017912 0241 000F                  		andi.w	#$F,d1
00017916 D041                       		add.w	d1,d0
00017918 6A00 FF7A                  		bpl.w	@isblank
0001791C                            
0001791C                            @maxfloor:
0001791C 944B                       		sub.w	a3,d2
0001791E 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017922 D44B                       		add.w	a3,d2
00017924 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017928 4E75                       		rts	
0001792A                            ; End of function FindFloor
0001792A                            
0001792A                            
0001792A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001792A                            
0001792A                            
0001792A                            FindFloor2:
0001792A 6100 FEE6                  		bsr.w	FindNearestTile
0001792E 3011                       		move.w	(a1),d0
00017930 3800                       		move.w	d0,d4
00017932 0240 07FF                  		andi.w	#$7FF,d0
00017936 6700                       		beq.s	@isblank2
00017938 0B04                       		btst	d5,d4
0001793A 6600                       		bne.s	@issolid
0001793C                            
0001793C                            @isblank2:
0001793C 323C 000F                  		move.w	#$F,d1
00017940 3002                       		move.w	d2,d0
00017942 0240 000F                  		andi.w	#$F,d0
00017946 9240                       		sub.w	d0,d1
00017948 4E75                       		rts	
0001794A                            ; ===========================================================================
0001794A                            
0001794A                            @issolid:
0001794A 2478 F796                  		movea.l	(v_collindex).w,a2
0001794E 1032 0000                  		move.b	(a2,d0.w),d0
00017952 0240 00FF                  		andi.w	#$FF,d0
00017956 67E4                       		beq.s	@isblank2
00017958 45F9 0000 0000             		lea	(AngleMap).l,a2
0001795E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017962 E948                       		lsl.w	#4,d0
00017964 3203                       		move.w	d3,d1
00017966 0804 000B                  		btst	#$B,d4
0001796A 6700                       		beq.s	@noflip
0001796C 4641                       		not.w	d1
0001796E 4414                       		neg.b	(a4)
00017970                            
00017970                            	@noflip:
00017970 0804 000C                  		btst	#$C,d4
00017974 6700                       		beq.s	@noflip2
00017976 0614 0040                  		addi.b	#$40,(a4)
0001797A 4414                       		neg.b	(a4)
0001797C 0414 0040                  		subi.b	#$40,(a4)
00017980                            
00017980                            	@noflip2:
00017980 0241 000F                  		andi.w	#$F,d1
00017984 D240                       		add.w	d0,d1
00017986 45F9 0000 0000             		lea	(CollArray1).l,a2
0001798C 1032 1000                  		move.b	(a2,d1.w),d0
00017990 4880                       		ext.w	d0
00017992 BD44                       		eor.w	d6,d4
00017994 0804 000C                  		btst	#$C,d4
00017998 6700                       		beq.s	@noflip3
0001799A 4440                       		neg.w	d0
0001799C                            
0001799C                            	@noflip3:
0001799C 4A40                       		tst.w	d0
0001799E 679C                       		beq.s	@isblank2
000179A0 6B00                       		bmi.s	@negfloor
000179A2 3202                       		move.w	d2,d1
000179A4 0241 000F                  		andi.w	#$F,d1
000179A8 D041                       		add.w	d1,d0
000179AA 323C 000F                  		move.w	#$F,d1
000179AE 9240                       		sub.w	d0,d1
000179B0 4E75                       		rts	
000179B2                            ; ===========================================================================
000179B2                            
000179B2                            @negfloor:
000179B2 3202                       		move.w	d2,d1
000179B4 0241 000F                  		andi.w	#$F,d1
000179B8 D041                       		add.w	d1,d0
000179BA 6A00 FF80                  		bpl.w	@isblank2
000179BE 4641                       		not.w	d1
000179C0 4E75                       		rts	
000179C2                            ; End of function FindFloor2
000179C2                            ; End of function FindFloor2
000179C2                            		include	"_incObj\sub FindWall.asm"
000179C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179C2                            
000179C2                            
000179C2                            FindWall:
000179C2 6100 FE4E                  		bsr.w	FindNearestTile
000179C6 3011                       		move.w	(a1),d0
000179C8 3800                       		move.w	d0,d4
000179CA 0240 07FF                  		andi.w	#$7FF,d0
000179CE 6700                       		beq.s	loc_14B1E
000179D0 0B04                       		btst	d5,d4
000179D2 6600                       		bne.s	loc_14B2C
000179D4                            
000179D4                            loc_14B1E:
000179D4 D64B                       		add.w	a3,d3
000179D6 6100 0000                  		bsr.w	FindWall2
000179DA 964B                       		sub.w	a3,d3
000179DC 0641 0010                  		addi.w	#$10,d1
000179E0 4E75                       		rts	
000179E2                            ; ===========================================================================
000179E2                            
000179E2                            loc_14B2C:
000179E2 2478 F796                  		movea.l	(v_collindex).w,a2
000179E6 1032 0000                  		move.b	(a2,d0.w),d0
000179EA 0240 00FF                  		andi.w	#$FF,d0
000179EE 67E4                       		beq.s	loc_14B1E
000179F0 45F9 0000 0000             		lea	(AngleMap).l,a2
000179F6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000179FA E948                       		lsl.w	#4,d0
000179FC 3202                       		move.w	d2,d1
000179FE 0804 000C                  		btst	#$C,d4
00017A02 6700                       		beq.s	loc_14B5A
00017A04 4641                       		not.w	d1
00017A06 0614 0040                  		addi.b	#$40,(a4)
00017A0A 4414                       		neg.b	(a4)
00017A0C 0414 0040                  		subi.b	#$40,(a4)
00017A10                            
00017A10                            loc_14B5A:
00017A10 0804 000B                  		btst	#$B,d4
00017A14 6700                       		beq.s	loc_14B62
00017A16 4414                       		neg.b	(a4)
00017A18                            
00017A18                            loc_14B62:
00017A18 0241 000F                  		andi.w	#$F,d1
00017A1C D240                       		add.w	d0,d1
00017A1E 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A24 1032 1000                  		move.b	(a2,d1.w),d0
00017A28 4880                       		ext.w	d0
00017A2A BD44                       		eor.w	d6,d4
00017A2C 0804 000B                  		btst	#$B,d4
00017A30 6700                       		beq.s	loc_14B7E
00017A32 4440                       		neg.w	d0
00017A34                            
00017A34                            loc_14B7E:
00017A34 4A40                       		tst.w	d0
00017A36 679C                       		beq.s	loc_14B1E
00017A38 6B00                       		bmi.s	loc_14B9A
00017A3A 0C00 0010                  		cmpi.b	#$10,d0
00017A3E 6700                       		beq.s	loc_14BA6
00017A40 3203                       		move.w	d3,d1
00017A42 0241 000F                  		andi.w	#$F,d1
00017A46 D041                       		add.w	d1,d0
00017A48 323C 000F                  		move.w	#$F,d1
00017A4C 9240                       		sub.w	d0,d1
00017A4E 4E75                       		rts	
00017A50                            ; ===========================================================================
00017A50                            
00017A50                            loc_14B9A:
00017A50 3203                       		move.w	d3,d1
00017A52 0241 000F                  		andi.w	#$F,d1
00017A56 D041                       		add.w	d1,d0
00017A58 6A00 FF7A                  		bpl.w	loc_14B1E
00017A5C                            
00017A5C                            loc_14BA6:
00017A5C 964B                       		sub.w	a3,d3
00017A5E 6100 0000                  		bsr.w	FindWall2
00017A62 D64B                       		add.w	a3,d3
00017A64 0441 0010                  		subi.w	#$10,d1
00017A68 4E75                       		rts	
00017A6A                            ; End of function FindWall
00017A6A                            
00017A6A                            
00017A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A6A                            
00017A6A                            
00017A6A                            FindWall2:
00017A6A 6100 FDA6                  		bsr.w	FindNearestTile
00017A6E 3011                       		move.w	(a1),d0
00017A70 3800                       		move.w	d0,d4
00017A72 0240 07FF                  		andi.w	#$7FF,d0
00017A76 6700                       		beq.s	loc_14BC6
00017A78 0B04                       		btst	d5,d4
00017A7A 6600                       		bne.s	loc_14BD4
00017A7C                            
00017A7C                            loc_14BC6:
00017A7C 323C 000F                  		move.w	#$F,d1
00017A80 3003                       		move.w	d3,d0
00017A82 0240 000F                  		andi.w	#$F,d0
00017A86 9240                       		sub.w	d0,d1
00017A88 4E75                       		rts	
00017A8A                            ; ===========================================================================
00017A8A                            
00017A8A                            loc_14BD4:
00017A8A 2478 F796                  		movea.l	(v_collindex).w,a2
00017A8E 1032 0000                  		move.b	(a2,d0.w),d0
00017A92 0240 00FF                  		andi.w	#$FF,d0
00017A96 67E4                       		beq.s	loc_14BC6
00017A98 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A9E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017AA2 E948                       		lsl.w	#4,d0
00017AA4 3202                       		move.w	d2,d1
00017AA6 0804 000C                  		btst	#$C,d4
00017AAA 6700                       		beq.s	loc_14C02
00017AAC 4641                       		not.w	d1
00017AAE 0614 0040                  		addi.b	#$40,(a4)
00017AB2 4414                       		neg.b	(a4)
00017AB4 0414 0040                  		subi.b	#$40,(a4)
00017AB8                            
00017AB8                            loc_14C02:
00017AB8 0804 000B                  		btst	#$B,d4
00017ABC 6700                       		beq.s	loc_14C0A
00017ABE 4414                       		neg.b	(a4)
00017AC0                            
00017AC0                            loc_14C0A:
00017AC0 0241 000F                  		andi.w	#$F,d1
00017AC4 D240                       		add.w	d0,d1
00017AC6 45F9 0000 0000             		lea	(CollArray2).l,a2
00017ACC 1032 1000                  		move.b	(a2,d1.w),d0
00017AD0 4880                       		ext.w	d0
00017AD2 BD44                       		eor.w	d6,d4
00017AD4 0804 000B                  		btst	#$B,d4
00017AD8 6700                       		beq.s	loc_14C26
00017ADA 4440                       		neg.w	d0
00017ADC                            
00017ADC                            loc_14C26:
00017ADC 4A40                       		tst.w	d0
00017ADE 679C                       		beq.s	loc_14BC6
00017AE0 6B00                       		bmi.s	loc_14C3C
00017AE2 3203                       		move.w	d3,d1
00017AE4 0241 000F                  		andi.w	#$F,d1
00017AE8 D041                       		add.w	d1,d0
00017AEA 323C 000F                  		move.w	#$F,d1
00017AEE 9240                       		sub.w	d0,d1
00017AF0 4E75                       		rts	
00017AF2                            ; ===========================================================================
00017AF2                            
00017AF2                            loc_14C3C:
00017AF2 3203                       		move.w	d3,d1
00017AF4 0241 000F                  		andi.w	#$F,d1
00017AF8 D041                       		add.w	d1,d0
00017AFA 6A00 FF80                  		bpl.w	loc_14BC6
00017AFE 4641                       		not.w	d1
00017B00 4E75                       		rts	
00017B02                            ; End of function FindWall2
00017B02                            ; End of function FindWall2
00017B02                            
00017B02                            ; ---------------------------------------------------------------------------
00017B02                            ; Unused floor/wall subroutine - logs something	to do with collision
00017B02                            ; ---------------------------------------------------------------------------
00017B02                            
00017B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B02                            
00017B02                            
00017B02                            FloorLog_Unk:
00017B02 4E75                       		rts	
00017B04                            
00017B04 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B0A 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B10 363C 00FF                  		move.w	#$FF,d3
00017B14                            
00017B14                            loc_14C5E:
00017B14 7A10                       		moveq	#$10,d5
00017B16 343C 000F                  		move.w	#$F,d2
00017B1A                            
00017B1A                            loc_14C64:
00017B1A 7800                       		moveq	#0,d4
00017B1C 323C 000F                  		move.w	#$F,d1
00017B20                            
00017B20                            loc_14C6A:
00017B20 3019                       		move.w	(a1)+,d0
00017B22 EAA8                       		lsr.l	d5,d0
00017B24 D944                       		addx.w	d4,d4
00017B26 51C9 FFF8                  		dbf	d1,loc_14C6A
00017B2A                            
00017B2A 34C4                       		move.w	d4,(a2)+
00017B2C 92FC 0020                  		suba.w	#$20,a1
00017B30 5345                       		subq.w	#1,d5
00017B32 51CA FFE6                  		dbf	d2,loc_14C64
00017B36                            
00017B36 D2FC 0020                  		adda.w	#$20,a1
00017B3A 51CB FFD8                  		dbf	d3,loc_14C5E
00017B3E                            
00017B3E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B44 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B4A 6100                       		bsr.s	FloorLog_Unk2
00017B4C 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B52 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B58                            
00017B58                            ; End of function FloorLog_Unk
00017B58                            
00017B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B58                            
00017B58                            
00017B58                            FloorLog_Unk2:
00017B58 363C 0FFF                  		move.w	#$FFF,d3
00017B5C                            
00017B5C                            loc_14CA6:
00017B5C 7400                       		moveq	#0,d2
00017B5E 323C 000F                  		move.w	#$F,d1
00017B62 3019                       		move.w	(a1)+,d0
00017B64 6700                       		beq.s	loc_14CD4
00017B66 6B00                       		bmi.s	loc_14CBE
00017B68                            
00017B68                            loc_14CB2:
00017B68 E248                       		lsr.w	#1,d0
00017B6A 6400                       		bhs.s	loc_14CB8
00017B6C 5202                       		addq.b	#1,d2
00017B6E                            
00017B6E                            loc_14CB8:
00017B6E 51C9 FFF8                  		dbf	d1,loc_14CB2
00017B72                            
00017B72 6000                       		bra.s	loc_14CD6
00017B74                            ; ===========================================================================
00017B74                            
00017B74                            loc_14CBE:
00017B74 0C40 FFFF                  		cmpi.w	#-1,d0
00017B78 6700                       		beq.s	loc_14CD0
00017B7A                            
00017B7A                            loc_14CC4:
00017B7A E348                       		lsl.w	#1,d0
00017B7C 6400                       		bhs.s	loc_14CCA
00017B7E 5302                       		subq.b	#1,d2
00017B80                            
00017B80                            loc_14CCA:
00017B80 51C9 FFF8                  		dbf	d1,loc_14CC4
00017B84                            
00017B84 6000                       		bra.s	loc_14CD6
00017B86                            ; ===========================================================================
00017B86                            
00017B86                            loc_14CD0:
00017B86 303C 0010                  		move.w	#$10,d0
00017B8A                            
00017B8A                            loc_14CD4:
00017B8A 3400                       		move.w	d0,d2
00017B8C                            
00017B8C                            loc_14CD6:
00017B8C 14C2                       		move.b	d2,(a2)+
00017B8E 51CB FFCC                  		dbf	d3,loc_14CA6
00017B92                            
00017B92 4E75                       		rts	
00017B94                            
00017B94                            ; End of function FloorLog_Unk2
00017B94                            
00017B94                            
00017B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B94                            
00017B94                            
00017B94                            Sonic_WalkSpeed:
00017B94 2628 0008                  		move.l	obX(a0),d3
00017B98 2428 000C                  		move.l	obY(a0),d2
00017B9C 3228 0010                  		move.w	obVelX(a0),d1
00017BA0 48C1                       		ext.l	d1
00017BA2 E181                       		asl.l	#8,d1
00017BA4 D681                       		add.l	d1,d3
00017BA6 3228 0012                  		move.w	obVelY(a0),d1
00017BAA 48C1                       		ext.l	d1
00017BAC E181                       		asl.l	#8,d1
00017BAE D481                       		add.l	d1,d2
00017BB0 4842                       		swap	d2
00017BB2 4843                       		swap	d3
00017BB4 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017BB8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017BBC 1200                       		move.b	d0,d1
00017BBE 0600 0020                  		addi.b	#$20,d0
00017BC2 6A00                       		bpl.s	loc_14D1A
00017BC4 1001                       		move.b	d1,d0
00017BC6 6A00                       		bpl.s	loc_14D14
00017BC8 5300                       		subq.b	#1,d0
00017BCA                            
00017BCA                            loc_14D14:
00017BCA 0600 0020                  		addi.b	#$20,d0
00017BCE 6000                       		bra.s	loc_14D24
00017BD0                            ; ===========================================================================
00017BD0                            
00017BD0                            loc_14D1A:
00017BD0 1001                       		move.b	d1,d0
00017BD2 6A00                       		bpl.s	loc_14D20
00017BD4 5200                       		addq.b	#1,d0
00017BD6                            
00017BD6                            loc_14D20:
00017BD6 0600 001F                  		addi.b	#$1F,d0
00017BDA                            
00017BDA                            loc_14D24:
00017BDA 0200 00C0                  		andi.b	#$C0,d0
00017BDE 6700 0000                  		beq.w	loc_14DF0
00017BE2 0C00 0080                  		cmpi.b	#$80,d0
00017BE6 6700 0000                  		beq.w	loc_14F7C
00017BEA 0201 0038                  		andi.b	#$38,d1
00017BEE 6600                       		bne.s	loc_14D3C
00017BF0 5042                       		addq.w	#8,d2
00017BF2                            
00017BF2                            loc_14D3C:
00017BF2 0C00 0040                  		cmpi.b	#$40,d0
00017BF6 6700 0000                  		beq.w	loc_1504A
00017BFA 6000 0000                  		bra.w	loc_14EBC
00017BFE                            
00017BFE                            ; End of function Sonic_WalkSpeed
00017BFE                            
00017BFE                            
00017BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BFE                            
00017BFE                            
00017BFE                            sub_14D48:
00017BFE 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017C02 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C06 0600 0020                  		addi.b	#$20,d0
00017C0A 0200 00C0                  		andi.b	#$C0,d0
00017C0E 0C00 0040                  		cmpi.b	#$40,d0
00017C12 6700 0000                  		beq.w	loc_14FD6
00017C16 0C00 0080                  		cmpi.b	#$80,d0
00017C1A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017C1E 0C00 00C0                  		cmpi.b	#$C0,d0
00017C22 6700 0000                  		beq.w	sub_14E50
00017C26                            
00017C26                            ; End of function sub_14D48
00017C26                            
00017C26                            ; ---------------------------------------------------------------------------
00017C26                            ; Subroutine to	make Sonic land	on the floor after jumping
00017C26                            ; ---------------------------------------------------------------------------
00017C26                            
00017C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C26                            
00017C26                            
00017C26                            Sonic_HitFloor:
00017C26 3428 000C                  		move.w	obY(a0),d2
00017C2A 3628 0008                  		move.w	obX(a0),d3
00017C2E 7000                       		moveq	#0,d0
00017C30 1028 0016                  		move.b	obHeight(a0),d0
00017C34 4880                       		ext.w	d0
00017C36 D440                       		add.w	d0,d2
00017C38 1028 0017                  		move.b	obWidth(a0),d0
00017C3C 4880                       		ext.w	d0
00017C3E D640                       		add.w	d0,d3
00017C40 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C44 367C 0010                  		movea.w	#$10,a3
00017C48 3C3C 0000                  		move.w	#0,d6
00017C4C 7A0D                       		moveq	#$D,d5
00017C4E 6100 FC34                  		bsr.w	FindFloor
00017C52 3F01                       		move.w	d1,-(sp)
00017C54 3428 000C                  		move.w	obY(a0),d2
00017C58 3628 0008                  		move.w	obX(a0),d3
00017C5C 7000                       		moveq	#0,d0
00017C5E 1028 0016                  		move.b	obHeight(a0),d0
00017C62 4880                       		ext.w	d0
00017C64 D440                       		add.w	d0,d2
00017C66 1028 0017                  		move.b	obWidth(a0),d0
00017C6A 4880                       		ext.w	d0
00017C6C 9640                       		sub.w	d0,d3
00017C6E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017C72 367C 0010                  		movea.w	#$10,a3
00017C76 3C3C 0000                  		move.w	#0,d6
00017C7A 7A0D                       		moveq	#$D,d5
00017C7C 6100 FC06                  		bsr.w	FindFloor
00017C80 301F                       		move.w	(sp)+,d0
00017C82 143C 0000                  		move.b	#0,d2
00017C86                            
00017C86                            loc_14DD0:
00017C86 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017C8A B240                       		cmp.w	d0,d1
00017C8C 6F00                       		ble.s	loc_14DDE
00017C8E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C92 C141                       		exg	d0,d1
00017C94                            
00017C94                            loc_14DDE:
00017C94 0803 0000                  		btst	#0,d3
00017C98 6700                       		beq.s	locret_14DE6
00017C9A 1602                       		move.b	d2,d3
00017C9C                            
00017C9C                            locret_14DE6:
00017C9C 4E75                       		rts	
00017C9E                            
00017C9E                            ; End of function Sonic_HitFloor
00017C9E                            
00017C9E                            ; ===========================================================================
00017C9E 3428 000C                  		move.w	obY(a0),d2
00017CA2 3628 0008                  		move.w	obX(a0),d3
00017CA6                            
00017CA6                            loc_14DF0:
00017CA6 0642 000A                  		addi.w	#$A,d2
00017CAA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017CAE 367C 0010                  		movea.w	#$10,a3
00017CB2 3C3C 0000                  		move.w	#0,d6
00017CB6 7A0E                       		moveq	#$E,d5
00017CB8 6100 FBCA                  		bsr.w	FindFloor
00017CBC 143C 0000                  		move.b	#0,d2
00017CC0                            
00017CC0                            loc_14E0A:
00017CC0 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017CC4 0803 0000                  		btst	#0,d3
00017CC8 6700                       		beq.s	locret_14E16
00017CCA 1602                       		move.b	d2,d3
00017CCC                            
00017CCC                            locret_14E16:
00017CCC 4E75                       		rts	
00017CCE                            
00017CCE                            		include	"_incObj\sub ObjFloorDist.asm"
00017CCE                            ; ---------------------------------------------------------------------------
00017CCE                            ; Subroutine to find the distance of an object to the floor
00017CCE                            
00017CCE                            ; input:
00017CCE                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017CCE                            
00017CCE                            ; output:
00017CCE                            ;	d1 = distance to the floor
00017CCE                            ;	d3 = floor angle
00017CCE                            ;	a1 = address within 256x256 mappings where object is standing
00017CCE                            ;	     (refers to a 16x16 tile number)
00017CCE                            ;	(a4) = floor angle
00017CCE                            ; ---------------------------------------------------------------------------
00017CCE                            
00017CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CCE                            
00017CCE                            
00017CCE                            ObjFloorDist:
00017CCE 3628 0008                  		move.w	obX(a0),d3
00017CD2                            
00017CD2                            
00017CD2                            ObjFloorDist2:
00017CD2 3428 000C                  		move.w	obY(a0),d2
00017CD6 7000                       		moveq	#0,d0
00017CD8 1028 0016                  		move.b	obHeight(a0),d0
00017CDC 4880                       		ext.w	d0
00017CDE D440                       		add.w	d0,d2
00017CE0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017CE4 18BC 0000                  		move.b	#0,(a4)
00017CE8 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017CEC 3C3C 0000                  		move.w	#0,d6
00017CF0 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017CF2 6100 FB90                  		bsr.w	FindFloor
00017CF6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017CFA 0803 0000                  		btst	#0,d3
00017CFE 6700                       		beq.s	locret_14E4E
00017D00 163C 0000                  		move.b	#0,d3
00017D04                            
00017D04                            	locret_14E4E:
00017D04 4E75                       		rts	
00017D06                            
00017D06                            ; End of function ObjFloorDist2
00017D06                            ; End of function ObjFloorDist2
00017D06                            
00017D06                            
00017D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D06                            
00017D06                            
00017D06                            sub_14E50:
00017D06 3428 000C                  		move.w	obY(a0),d2
00017D0A 3628 0008                  		move.w	obX(a0),d3
00017D0E 7000                       		moveq	#0,d0
00017D10 1028 0017                  		move.b	obWidth(a0),d0
00017D14 4880                       		ext.w	d0
00017D16 9440                       		sub.w	d0,d2
00017D18 1028 0016                  		move.b	obHeight(a0),d0
00017D1C 4880                       		ext.w	d0
00017D1E D640                       		add.w	d0,d3
00017D20 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D24 367C 0010                  		movea.w	#$10,a3
00017D28 3C3C 0000                  		move.w	#0,d6
00017D2C 7A0E                       		moveq	#$E,d5
00017D2E 6100 FC92                  		bsr.w	FindWall
00017D32 3F01                       		move.w	d1,-(sp)
00017D34 3428 000C                  		move.w	obY(a0),d2
00017D38 3628 0008                  		move.w	obX(a0),d3
00017D3C 7000                       		moveq	#0,d0
00017D3E 1028 0017                  		move.b	obWidth(a0),d0
00017D42 4880                       		ext.w	d0
00017D44 D440                       		add.w	d0,d2
00017D46 1028 0016                  		move.b	obHeight(a0),d0
00017D4A 4880                       		ext.w	d0
00017D4C D640                       		add.w	d0,d3
00017D4E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017D52 367C 0010                  		movea.w	#$10,a3
00017D56 3C3C 0000                  		move.w	#0,d6
00017D5A 7A0E                       		moveq	#$E,d5
00017D5C 6100 FC64                  		bsr.w	FindWall
00017D60 301F                       		move.w	(sp)+,d0
00017D62 143C 00C0                  		move.b	#-$40,d2
00017D66 6000 FF1E                  		bra.w	loc_14DD0
00017D6A                            
00017D6A                            ; End of function sub_14E50
00017D6A                            
00017D6A                            
00017D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D6A                            
00017D6A                            
00017D6A                            sub_14EB4:
00017D6A 3428 000C                  		move.w	obY(a0),d2
00017D6E 3628 0008                  		move.w	obX(a0),d3
00017D72                            
00017D72                            loc_14EBC:
00017D72 0643 000A                  		addi.w	#$A,d3
00017D76 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D7A 367C 0010                  		movea.w	#$10,a3
00017D7E 3C3C 0000                  		move.w	#0,d6
00017D82 7A0E                       		moveq	#$E,d5
00017D84 6100 FC3C                  		bsr.w	FindWall
00017D88 143C 00C0                  		move.b	#-$40,d2
00017D8C 6000 FF32                  		bra.w	loc_14E0A
00017D90                            
00017D90                            ; End of function sub_14EB4
00017D90                            
00017D90                            ; ---------------------------------------------------------------------------
00017D90                            ; Subroutine to	detect when an object hits a wall to its right
00017D90                            ; ---------------------------------------------------------------------------
00017D90                            
00017D90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D90                            
00017D90                            
00017D90                            ObjHitWallRight:
00017D90 D668 0008                  		add.w	obX(a0),d3
00017D94 3428 000C                  		move.w	obY(a0),d2
00017D98 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D9C 18BC 0000                  		move.b	#0,(a4)
00017DA0 367C 0010                  		movea.w	#$10,a3
00017DA4 3C3C 0000                  		move.w	#0,d6
00017DA8 7A0E                       		moveq	#$E,d5
00017DAA 6100 FC16                  		bsr.w	FindWall
00017DAE 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017DB2 0803 0000                  		btst	#0,d3
00017DB6 6700                       		beq.s	locret_14F06
00017DB8 163C 00C0                  		move.b	#-$40,d3
00017DBC                            
00017DBC                            locret_14F06:
00017DBC 4E75                       		rts	
00017DBE                            
00017DBE                            ; End of function ObjHitWallRight
00017DBE                            
00017DBE                            ; ---------------------------------------------------------------------------
00017DBE                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017DBE                            ; touches them
00017DBE                            ; ---------------------------------------------------------------------------
00017DBE                            
00017DBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DBE                            
00017DBE                            
00017DBE                            Sonic_DontRunOnWalls:
00017DBE 3428 000C                  		move.w	obY(a0),d2
00017DC2 3628 0008                  		move.w	obX(a0),d3
00017DC6 7000                       		moveq	#0,d0
00017DC8 1028 0016                  		move.b	obHeight(a0),d0
00017DCC 4880                       		ext.w	d0
00017DCE 9440                       		sub.w	d0,d2
00017DD0 0A42 000F                  		eori.w	#$F,d2
00017DD4 1028 0017                  		move.b	obWidth(a0),d0
00017DD8 4880                       		ext.w	d0
00017DDA D640                       		add.w	d0,d3
00017DDC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DE0 367C FFF0                  		movea.w	#-$10,a3
00017DE4 3C3C 1000                  		move.w	#$1000,d6
00017DE8 7A0E                       		moveq	#$E,d5
00017DEA 6100 FA98                  		bsr.w	FindFloor
00017DEE 3F01                       		move.w	d1,-(sp)
00017DF0 3428 000C                  		move.w	obY(a0),d2
00017DF4 3628 0008                  		move.w	obX(a0),d3
00017DF8 7000                       		moveq	#0,d0
00017DFA 1028 0016                  		move.b	obHeight(a0),d0
00017DFE 4880                       		ext.w	d0
00017E00 9440                       		sub.w	d0,d2
00017E02 0A42 000F                  		eori.w	#$F,d2
00017E06 1028 0017                  		move.b	obWidth(a0),d0
00017E0A 4880                       		ext.w	d0
00017E0C 9640                       		sub.w	d0,d3
00017E0E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E12 367C FFF0                  		movea.w	#-$10,a3
00017E16 3C3C 1000                  		move.w	#$1000,d6
00017E1A 7A0E                       		moveq	#$E,d5
00017E1C 6100 FA66                  		bsr.w	FindFloor
00017E20 301F                       		move.w	(sp)+,d0
00017E22 143C 0080                  		move.b	#-$80,d2
00017E26 6000 FE5E                  		bra.w	loc_14DD0
00017E2A                            ; End of function Sonic_DontRunOnWalls
00017E2A                            
00017E2A                            ; ===========================================================================
00017E2A 3428 000C                  		move.w	obY(a0),d2
00017E2E 3628 0008                  		move.w	obX(a0),d3
00017E32                            
00017E32                            loc_14F7C:
00017E32 0442 000A                  		subi.w	#$A,d2
00017E36 0A42 000F                  		eori.w	#$F,d2
00017E3A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E3E 367C FFF0                  		movea.w	#-$10,a3
00017E42 3C3C 1000                  		move.w	#$1000,d6
00017E46 7A0E                       		moveq	#$E,d5
00017E48 6100 FA3A                  		bsr.w	FindFloor
00017E4C 143C 0080                  		move.b	#-$80,d2
00017E50 6000 FE6E                  		bra.w	loc_14E0A
00017E54                            
00017E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E54                            
00017E54                            
00017E54                            ObjHitCeiling:
00017E54 3428 000C                  		move.w	obY(a0),d2
00017E58 3628 0008                  		move.w	obX(a0),d3
00017E5C 7000                       		moveq	#0,d0
00017E5E 1028 0016                  		move.b	obHeight(a0),d0
00017E62 4880                       		ext.w	d0
00017E64 9440                       		sub.w	d0,d2
00017E66 0A42 000F                  		eori.w	#$F,d2
00017E6A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E6E 367C FFF0                  		movea.w	#-$10,a3
00017E72 3C3C 1000                  		move.w	#$1000,d6
00017E76 7A0E                       		moveq	#$E,d5
00017E78 6100 FA0A                  		bsr.w	FindFloor
00017E7C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E80 0803 0000                  		btst	#0,d3
00017E84 6700                       		beq.s	locret_14FD4
00017E86 163C 0080                  		move.b	#-$80,d3
00017E8A                            
00017E8A                            locret_14FD4:
00017E8A 4E75                       		rts	
00017E8C                            ; End of function ObjHitCeiling
00017E8C                            
00017E8C                            ; ===========================================================================
00017E8C                            
00017E8C                            loc_14FD6:
00017E8C 3428 000C                  		move.w	obY(a0),d2
00017E90 3628 0008                  		move.w	obX(a0),d3
00017E94 7000                       		moveq	#0,d0
00017E96 1028 0017                  		move.b	obWidth(a0),d0
00017E9A 4880                       		ext.w	d0
00017E9C 9440                       		sub.w	d0,d2
00017E9E 1028 0016                  		move.b	obHeight(a0),d0
00017EA2 4880                       		ext.w	d0
00017EA4 9640                       		sub.w	d0,d3
00017EA6 0A43 000F                  		eori.w	#$F,d3
00017EAA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EAE 367C FFF0                  		movea.w	#-$10,a3
00017EB2 3C3C 0800                  		move.w	#$800,d6
00017EB6 7A0E                       		moveq	#$E,d5
00017EB8 6100 FB08                  		bsr.w	FindWall
00017EBC 3F01                       		move.w	d1,-(sp)
00017EBE 3428 000C                  		move.w	obY(a0),d2
00017EC2 3628 0008                  		move.w	obX(a0),d3
00017EC6 7000                       		moveq	#0,d0
00017EC8 1028 0017                  		move.b	obWidth(a0),d0
00017ECC 4880                       		ext.w	d0
00017ECE D440                       		add.w	d0,d2
00017ED0 1028 0016                  		move.b	obHeight(a0),d0
00017ED4 4880                       		ext.w	d0
00017ED6 9640                       		sub.w	d0,d3
00017ED8 0A43 000F                  		eori.w	#$F,d3
00017EDC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017EE0 367C FFF0                  		movea.w	#-$10,a3
00017EE4 3C3C 0800                  		move.w	#$800,d6
00017EE8 7A0E                       		moveq	#$E,d5
00017EEA 6100 FAD6                  		bsr.w	FindWall
00017EEE 301F                       		move.w	(sp)+,d0
00017EF0 143C 0040                  		move.b	#$40,d2
00017EF4 6000 FD90                  		bra.w	loc_14DD0
00017EF8                            
00017EF8                            ; ---------------------------------------------------------------------------
00017EF8                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017EF8                            ; ---------------------------------------------------------------------------
00017EF8                            
00017EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF8                            
00017EF8                            
00017EF8                            Sonic_HitWall:
00017EF8 3428 000C                  		move.w	obY(a0),d2
00017EFC 3628 0008                  		move.w	obX(a0),d3
00017F00                            
00017F00                            loc_1504A:
00017F00 0443 000A                  		subi.w	#$A,d3
00017F04 0A43 000F                  		eori.w	#$F,d3
00017F08 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F0C 367C FFF0                  		movea.w	#-$10,a3
00017F10 3C3C 0800                  		move.w	#$800,d6
00017F14 7A0E                       		moveq	#$E,d5
00017F16 6100 FAAA                  		bsr.w	FindWall
00017F1A 143C 0040                  		move.b	#$40,d2
00017F1E 6000 FDA0                  		bra.w	loc_14E0A
00017F22                            ; End of function Sonic_HitWall
00017F22                            
00017F22                            ; ---------------------------------------------------------------------------
00017F22                            ; Subroutine to	detect when an object hits a wall to its left
00017F22                            ; ---------------------------------------------------------------------------
00017F22                            
00017F22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F22                            
00017F22                            
00017F22                            ObjHitWallLeft:
00017F22 D668 0008                  		add.w	obX(a0),d3
00017F26 3428 000C                  		move.w	obY(a0),d2
00017F2A                            		; Engine bug: colliding with left walls is erratic with this function.
00017F2A                            		; The cause is this: a missing instruction to flip collision on the found
00017F2A                            		; 16x16 block; this one:
00017F2A                            		;eori.w	#$F,d3
00017F2A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F2E 18BC 0000                  		move.b	#0,(a4)
00017F32 367C FFF0                  		movea.w	#-$10,a3
00017F36 3C3C 0800                  		move.w	#$800,d6
00017F3A 7A0E                       		moveq	#$E,d5
00017F3C 6100 FA84                  		bsr.w	FindWall
00017F40 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F44 0803 0000                  		btst	#0,d3
00017F48 6700                       		beq.s	locret_15098
00017F4A 163C 0040                  		move.b	#$40,d3
00017F4E                            
00017F4E                            locret_15098:
00017F4E 4E75                       		rts	
00017F50                            ; End of function ObjHitWallLeft
00017F50                            
00017F50                            ; ===========================================================================
00017F50                            
00017F50                            		include	"_incObj\66 Rotating Junction.asm"
00017F50                            ; ---------------------------------------------------------------------------
00017F50                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017F50                            ; ---------------------------------------------------------------------------
00017F50                            
00017F50                            Junction:
00017F50 7000                       		moveq	#0,d0
00017F52 1028 0024                  		move.b	obRoutine(a0),d0
00017F56 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017F5A 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017F5E                            ; ===========================================================================
00017F5E 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017F60 0000                       		dc.w Jun_Action-Jun_Index
00017F62 0000                       		dc.w Jun_Display-Jun_Index
00017F64 0000                       		dc.w Jun_Release-Jun_Index
00017F66                            
00017F66 =00000034                  jun_frame:	equ $34		; current frame
00017F66 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017F66 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017F66                            ; ===========================================================================
00017F66                            
00017F66                            Jun_Main:	; Routine 0
00017F66 5428 0024                  		addq.b	#2,obRoutine(a0)
00017F6A 323C 0001                  		move.w	#1,d1
00017F6E 2248                       		movea.l	a0,a1
00017F70 6000                       		bra.s	@makeitem
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            	@repeat:
00017F72 4EB9 0000 FBCE             		jsr	FindFreeObj
00017F78 6600                       		bne.s	@fail
00017F7A 12BC 0066                  		move.b	#id_Junction,0(a1)
00017F7E 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017F82 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017F88 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017F8E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017F94 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017F9A                            
00017F9A                            @makeitem:
00017F9A 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017FA2 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017FA8 0029 0004 0001             		ori.b	#4,obRender(a1)
00017FAE 137C 0038 0014             		move.b	#$38,obActWid(a1)
00017FB4                            
00017FB4                            	@fail:
00017FB4 51C9 FFBC                  		dbf	d1,@repeat
00017FB8                            
00017FB8 117C 0030 0014             		move.b	#$30,obActWid(a0)
00017FBE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00017FC4 317C 003C 0030             		move.w	#$3C,$30(a0)
00017FCA 117C 0001 0034             		move.b	#1,jun_frame(a0)
00017FD0 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00017FD6                            
00017FD6                            Jun_Action:	; Routine 2
00017FD6 6100 0000                  		bsr.w	Jun_ChkSwitch
00017FDA 4A28 0001                  		tst.b	obRender(a0)
00017FDE 6A00 0000                  		bpl.w	Jun_Display
00017FE2 323C 0030                  		move.w	#$30,d1
00017FE6 3401                       		move.w	d1,d2
00017FE8 3602                       		move.w	d2,d3
00017FEA 5243                       		addq.w	#1,d3
00017FEC 3828 0008                  		move.w	obX(a0),d4
00017FF0 6100 9B72                  		bsr.w	SolidObject
00017FF4 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00017FFA 6700 0000                  		beq.w	Jun_Display	; if not, branch
00017FFE                            
00017FFE 43F8 D000                  		lea	(v_player).w,a1
00018002 720E                       		moveq	#$E,d1
00018004 3029 0008                  		move.w	obX(a1),d0
00018008 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
0001800C 6500                       		bcs.s	@isleft		; if yes, branch
0001800E 7207                       		moveq	#7,d1		
00018010                            
00018010                            	@isleft:
00018010 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018014 6600                       		bne.s	Jun_Display	; if not, branch
00018016                            
00018016 1141 0032                  		move.b	d1,$32(a0)
0001801A 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
0001801E 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018024 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001802A 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018030 337C 0000 0010             		move.w	#0,obVelX(a1)
00018036 337C 0000 0012             		move.w	#0,obVelY(a1)
0001803C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018042 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018048 08E9 0001 0022             		bset	#1,obStatus(a1)
0001804E 3429 0008                  		move.w	obX(a1),d2
00018052 3629 000C                  		move.w	obY(a1),d3
00018056 6100 0000                  		bsr.w	Jun_ChgPos
0001805A D569 0008                  		add.w	d2,obX(a1)
0001805E D769 000C                  		add.w	d3,obY(a1)
00018062 E0E9 0008                  		asr	obX(a1)
00018066 E0E9 000C                  		asr	obY(a1)
0001806A                            
0001806A                            Jun_Display:	; Routine 4
0001806A 6000 9660                  		bra.w	RememberState
0001806E                            ; ===========================================================================
0001806E                            
0001806E                            Jun_Release:	; Routine 6
0001806E 1028 001A                  		move.b	obFrame(a0),d0
00018072 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018076 6700                       		beq.s	@release	; if yes, branch
00018078 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
0001807C 6600                       		bne.s	@dontrelease	; if not, branch
0001807E                            
0001807E                            	@release:
0001807E B028 0032                  		cmp.b	$32(a0),d0
00018082 6700                       		beq.s	@dontrelease
00018084 43F8 D000                  		lea	(v_player).w,a1
00018088 337C 0000 0010             		move.w	#0,obVelX(a1)
0001808E 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018094 0C00 0004                  		cmpi.b	#4,d0
00018098 6700                       		beq.s	@isdown
0001809A 337C 0800 0010             		move.w	#$800,obVelX(a1)
000180A0 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180A6                            
000180A6                            	@isdown:
000180A6 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000180AA 5928 0024                  		subq.b	#4,obRoutine(a0)
000180AE                            
000180AE                            	@dontrelease:
000180AE 6100                       		bsr.s	Jun_ChkSwitch
000180B0 6100                       		bsr.s	Jun_ChgPos
000180B2 6000 9618                  		bra.w	RememberState
000180B6                            
000180B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180B6                            
000180B6                            
000180B6                            Jun_ChkSwitch:
000180B6 45F8 F7E0                  		lea	(f_switch).w,a2
000180BA 7000                       		moveq	#0,d0
000180BC 1028 0038                  		move.b	jun_switch(a0),d0
000180C0 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000180C6 6700                       		beq.s	@unpressed	; if not, branch
000180C8                            
000180C8 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000180CC 6600                       		bne.s	@animate	; if yes, branch
000180CE 4428 0034                  		neg.b	jun_frame(a0)
000180D2 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
000180D8 6000                       		bra.s	@animate
000180DA                            ; ===========================================================================
000180DA                            
000180DA                            @unpressed:
000180DA 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
000180DE                            
000180DE                            @animate:
000180DE 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
000180E2 6A00                       		bpl.s	@nochange	; if time remains, branch
000180E4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000180EA 1228 0034                  		move.b	jun_frame(a0),d1
000180EE 1028 001A                  		move.b	obFrame(a0),d0
000180F2 D001                       		add.b	d1,d0
000180F4 0200 000F                  		andi.b	#$F,d0
000180F8 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
000180FC                            
000180FC                            	@nochange:
000180FC 4E75                       		rts	
000180FE                            ; End of function Jun_ChkSwitch
000180FE                            
000180FE                            
000180FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180FE                            
000180FE                            
000180FE                            Jun_ChgPos:
000180FE 43F8 D000                  		lea	(v_player).w,a1
00018102 7000                       		moveq	#0,d0
00018104 1028 001A                  		move.b	obFrame(a0),d0
00018108 D040                       		add.w	d0,d0
0001810A 45FB 0000                  		lea	@data(pc,d0.w),a2
0001810E 101A                       		move.b	(a2)+,d0
00018110 4880                       		ext.w	d0
00018112 D068 0008                  		add.w	obX(a0),d0
00018116 3340 0008                  		move.w	d0,obX(a1)
0001811A 101A                       		move.b	(a2)+,d0
0001811C 4880                       		ext.w	d0
0001811E D068 000C                  		add.w	obY(a0),d0
00018122 3340 000C                  		move.w	d0,obY(a1)
00018126 4E75                       		rts	
00018128                            
00018128                            
00018128 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
0001812C E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018130 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018134 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018138 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
0001813C 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018140 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018144 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018144 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018148                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018148                            ; ---------------------------------------------------------------------------
00018148                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018148                            ; ---------------------------------------------------------------------------
00018148                            Map_Jun_internal:
00018148 0000                       		dc.w @gap0-Map_Jun_internal
0001814A 0000                       		dc.w @gap1-Map_Jun_internal
0001814C 0000                       		dc.w @gap2-Map_Jun_internal
0001814E 0000                       		dc.w @gap3-Map_Jun_internal
00018150 0000                       		dc.w @gap4-Map_Jun_internal
00018152 0000                       		dc.w @gap5-Map_Jun_internal
00018154 0000                       		dc.w @gap6-Map_Jun_internal
00018156 0000                       		dc.w @gap7-Map_Jun_internal
00018158 0000                       		dc.w @gap8-Map_Jun_internal
0001815A 0000                       		dc.w @gap9-Map_Jun_internal
0001815C 0000                       		dc.w @gapA-Map_Jun_internal
0001815E 0000                       		dc.w @gapB-Map_Jun_internal
00018160 0000                       		dc.w @gapC-Map_Jun_internal
00018162 0000                       		dc.w @gapD-Map_Jun_internal
00018164 0000                       		dc.w @gapE-Map_Jun_internal
00018166 0000                       		dc.w @gapF-Map_Jun_internal
00018168 0000                       		dc.w @circle-Map_Jun_internal
0001816A 06                         @gap0:		dc.b 6
0001816B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018170 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018175 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001817A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001817F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018184 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018189 06                         @gap1:		dc.b 6
0001818A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001818F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018194 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018199 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001819E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000181A3 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000181A8 06                         @gap2:		dc.b 6
000181A9 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000181AE 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000181B3 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000181B8 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000181BD 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000181C2 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000181C7 06                         @gap3:		dc.b 6
000181C8 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000181CD 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000181D2 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000181D7 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000181DC 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000181E1 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000181E6 06                         @gap4:		dc.b 6
000181E7 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000181EC 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000181F1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000181F6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000181FB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018200 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018205 06                         @gap5:		dc.b 6
00018206 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001820B 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018210 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018215 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001821A 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001821F 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018224 06                         @gap6:		dc.b 6
00018225 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001822A 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001822F 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018234 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018239 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001823E 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018243 06                         @gap7:		dc.b 6
00018244 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018249 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001824E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018253 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018258 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001825D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018262 06                         @gap8:		dc.b 6
00018263 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018268 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001826D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018272 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018277 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001827C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018281 06                         @gap9:		dc.b 6
00018282 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018287 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001828C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018291 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018296 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001829B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000182A0 06                         @gapA:		dc.b 6
000182A1 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000182A6 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000182AB D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000182B0 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000182B5 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000182BA E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000182BF 06                         @gapB:		dc.b 6
000182C0 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000182C5 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000182CA CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000182CF CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000182D4 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000182D9 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000182DE 06                         @gapC:		dc.b 6
000182DF D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000182E4 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000182E9 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000182EE C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000182F3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000182F8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000182FD 06                         @gapD:		dc.b 6
000182FE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018303 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018308 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001830D CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018312 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018317 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001831C 06                         @gapE:		dc.b 6
0001831D E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018322 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018327 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001832C D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018331 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018336 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001833B 06                         @gapF:		dc.b 6
0001833C E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018341 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018346 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001834B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018350 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018355 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001835A 0C                         @circle:	dc.b $C
0001835B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018360 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018365 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001836A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001836F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018374 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018379 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001837E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018383 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018388 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001838D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018392 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018398 00                         		even
00018398 00                         		even
00018398                            		include	"_incObj\67 Running Disc.asm"
00018398                            ; ---------------------------------------------------------------------------
00018398                            ; Object 67 - disc that	you run	around (SBZ)
00018398                            ; ---------------------------------------------------------------------------
00018398                            
00018398                            RunningDisc:
00018398 7000                       		moveq	#0,d0
0001839A 1028 0024                  		move.b	obRoutine(a0),d0
0001839E 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000183A2 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000183A6                            ; ===========================================================================
000183A6 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000183A8 0000                       		dc.w Disc_Action-Disc_Index
000183AA                            
000183AA =00000032                  disc_origX:	equ $32		; original x-axis position
000183AA =00000030                  disc_origY:	equ $30		; original y-axis position
000183AA                            ; ===========================================================================
000183AA                            
000183AA                            Disc_Main:	; Routine 0
000183AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000183AE 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000183B6 317C C344 0002             		move.w	#$C344,obGfx(a0)
000183BC 117C 0004 0001             		move.b	#4,obRender(a0)
000183C2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000183C8 117C 0008 0014             		move.b	#8,obActWid(a0)
000183CE 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000183D4 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
000183DA 117C 0018 0034             		move.b	#$18,$34(a0)
000183E0 117C 0048 0038             		move.b	#$48,$38(a0)
000183E6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000183EA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000183EE 6700                       		beq.s	@typeis0	; branch if 0
000183F0 117C 0010 0034             		move.b	#$10,$34(a0)
000183F6 117C 0038 0038             		move.b	#$38,$38(a0)
000183FC                            
000183FC                            	@typeis0:
000183FC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018400 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018404 4881                       		ext.w	d1
00018406 E741                       		asl.w	#3,d1
00018408 3141 0036                  		move.w	d1,$36(a0)
0001840C 1028 0022                  		move.b	obStatus(a0),d0
00018410 E418                       		ror.b	#2,d0
00018412 0200 00C0                  		andi.b	#$C0,d0
00018416 1140 0026                  		move.b	d0,obAngle(a0)
0001841A                            
0001841A                            Disc_Action:	; Routine 2
0001841A 6100 0000                  		bsr.w	Disc_MoveSonic
0001841E 6100 0000                  		bsr.w	Disc_MoveSpot
00018422 6000 0000                  		bra.w	Disc_ChkDel
00018426                            ; ===========================================================================
00018426                            
00018426                            Disc_MoveSonic:
00018426 7400                       		moveq	#0,d2
00018428 1428 0038                  		move.b	$38(a0),d2
0001842C 3602                       		move.w	d2,d3
0001842E D643                       		add.w	d3,d3
00018430 43F8 D000                  		lea	(v_player).w,a1
00018434 3029 0008                  		move.w	obX(a1),d0
00018438 9068 0032                  		sub.w	disc_origX(a0),d0
0001843C D042                       		add.w	d2,d0
0001843E B043                       		cmp.w	d3,d0
00018440 6400                       		bcc.s	loc_155A8
00018442 3229 000C                  		move.w	obY(a1),d1
00018446 9268 0030                  		sub.w	disc_origY(a0),d1
0001844A D242                       		add.w	d2,d1
0001844C B243                       		cmp.w	d3,d1
0001844E 6400                       		bcc.s	loc_155A8
00018450 0829 0001 0022             		btst	#1,obStatus(a1)
00018456 6700                       		beq.s	loc_155B8
00018458 4228 003A                  		clr.b	$3A(a0)
0001845C 4E75                       		rts	
0001845E                            ; ===========================================================================
0001845E                            
0001845E                            loc_155A8:
0001845E 4A28 003A                  		tst.b	$3A(a0)
00018462 6700                       		beq.s	locret_155B6
00018464 4229 0038                  		clr.b	$38(a1)
00018468 4228 003A                  		clr.b	$3A(a0)
0001846C                            
0001846C                            locret_155B6:
0001846C 4E75                       		rts	
0001846E                            ; ===========================================================================
0001846E                            
0001846E                            loc_155B8:
0001846E 4A28 003A                  		tst.b	$3A(a0)
00018472 6600                       		bne.s	loc_155E2
00018474 117C 0001 003A             		move.b	#1,$3A(a0)
0001847A 0829 0002 0022             		btst	#2,obStatus(a1)
00018480 6600                       		bne.s	loc_155D0
00018482 4229 001C                  		clr.b	obAnim(a1)
00018486                            
00018486                            loc_155D0:
00018486 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001848C 137C 0001 001D             		move.b	#1,obNextAni(a1)
00018492 137C 0001 0038             		move.b	#1,$38(a1)
00018498                            
00018498                            loc_155E2:
00018498 3029 0020                  		move.w	obInertia(a1),d0
0001849C 4A68 0036                  		tst.w	$36(a0)
000184A0 6A00                       		bpl.s	loc_15608
000184A2 0C40 FC00                  		cmpi.w	#-$400,d0
000184A6 6F00                       		ble.s	loc_155FA
000184A8 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000184AE 4E75                       		rts	
000184B0                            ; ===========================================================================
000184B0                            
000184B0                            loc_155FA:
000184B0 0C40 F100                  		cmpi.w	#-$F00,d0
000184B4 6C00                       		bge.s	locret_15606
000184B6 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000184BC                            
000184BC                            locret_15606:
000184BC 4E75                       		rts	
000184BE                            ; ===========================================================================
000184BE                            
000184BE                            loc_15608:
000184BE 0C40 0400                  		cmpi.w	#$400,d0
000184C2 6C00                       		bge.s	loc_15616
000184C4 337C 0400 0020             		move.w	#$400,obInertia(a1)
000184CA 4E75                       		rts	
000184CC                            ; ===========================================================================
000184CC                            
000184CC                            loc_15616:
000184CC 0C40 0F00                  		cmpi.w	#$F00,d0
000184D0 6F00                       		ble.s	locret_15622
000184D2 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
000184D8                            
000184D8                            locret_15622:
000184D8 4E75                       		rts	
000184DA                            ; ===========================================================================
000184DA                            
000184DA                            Disc_MoveSpot:
000184DA 3028 0036                  		move.w	$36(a0),d0
000184DE D168 0026                  		add.w	d0,obAngle(a0)
000184E2 1028 0026                  		move.b	obAngle(a0),d0
000184E6 4EB9 0000 37AE             		jsr	(CalcSine).l
000184EC 3428 0030                  		move.w	disc_origY(a0),d2
000184F0 3628 0032                  		move.w	disc_origX(a0),d3
000184F4 7800                       		moveq	#0,d4
000184F6 1828 0034                  		move.b	$34(a0),d4
000184FA E14C                       		lsl.w	#8,d4
000184FC 2A04                       		move.l	d4,d5
000184FE C9C0                       		muls.w	d0,d4
00018500 4844                       		swap	d4
00018502 CBC1                       		muls.w	d1,d5
00018504 4845                       		swap	d5
00018506 D842                       		add.w	d2,d4
00018508 DA43                       		add.w	d3,d5
0001850A 3144 000C                  		move.w	d4,obY(a0)
0001850E 3145 0008                  		move.w	d5,obX(a0)
00018512 4E75                       		rts	
00018514                            ; ===========================================================================
00018514                            
00018514                            Disc_ChkDel:
00018530 4EF9 0000 F742             		jmp	(DisplaySprite).l
00018536                            
00018536                            	@delete:
00018536 4EF9 0000 F782             		jmp	(DeleteObject).l
00018536 4EF9 0000 F782             		jmp	(DeleteObject).l
0001853C                            Map_Disc:	include	"_maps\Running Disc.asm"
0001853C                            ; ---------------------------------------------------------------------------
0001853C                            ; Sprite mappings - disc that you run around (SBZ)
0001853C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001853C                            ; part of the level tiles.)
0001853C                            ; ---------------------------------------------------------------------------
0001853C                            Map_Disc_internal:
0001853C 0000                       		dc.w @spot-Map_Disc_internal
0001853E 01                         @spot:		dc.b 1
0001853F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018544                            		even
00018544                            		even
00018544                            		include	"_incObj\68 Conveyor Belt.asm"
00018544                            ; ---------------------------------------------------------------------------
00018544                            ; Object 68 - conveyor belts (SBZ)
00018544                            ; ---------------------------------------------------------------------------
00018544                            
00018544                            Conveyor:
00018544 7000                       		moveq	#0,d0
00018546 1028 0024                  		move.b	obRoutine(a0),d0
0001854A 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
0001854E 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018552                            ; ===========================================================================
00018552 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018554 0000                       		dc.w Conv_Action-Conv_Index
00018556                            
00018556 =00000036                  conv_speed:	equ $36
00018556 =00000038                  conv_width:	equ $38
00018556                            ; ===========================================================================
00018556                            
00018556                            Conv_Main:	; Routine 0
00018556 5428 0024                  		addq.b	#2,obRoutine(a0)
0001855A 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018560 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018564 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018568 6700                       		beq.s	@typeis0	; if zero, branch
0001856A 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018570                            
00018570                            	@typeis0:
00018570 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018574 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018578 4881                       		ext.w	d1
0001857A E841                       		asr.w	#4,d1
0001857C 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00018580                            
00018580                            Conv_Action:	; Routine 2
00018580 6100                       		bsr.s	@movesonic
0001859E 4E75                       		rts	
000185A0                            
000185A0                            	@delete:
000185A0 4EF9 0000 F782             		jmp	(DeleteObject).l
000185A6                            ; ===========================================================================
000185A6                            
000185A6                            @movesonic:
000185A6 7400                       		moveq	#0,d2
000185A8 1428 0038                  		move.b	conv_width(a0),d2
000185AC 3602                       		move.w	d2,d3
000185AE D643                       		add.w	d3,d3
000185B0 43F8 D000                  		lea	(v_player).w,a1
000185B4 3029 0008                  		move.w	obX(a1),d0
000185B8 9068 0008                  		sub.w	obX(a0),d0
000185BC D042                       		add.w	d2,d0
000185BE B043                       		cmp.w	d3,d0
000185C0 6400                       		bcc.s	@notonconveyor
000185C2 3229 000C                  		move.w	obY(a1),d1
000185C6 9268 000C                  		sub.w	obY(a0),d1
000185CA 0641 0030                  		addi.w	#$30,d1
000185CE 0C41 0030                  		cmpi.w	#$30,d1
000185D2 6400                       		bcc.s	@notonconveyor
000185D4 0829 0001 0022             		btst	#1,obStatus(a1)
000185DA 6600                       		bne.s	@notonconveyor
000185DC 3028 0036                  		move.w	conv_speed(a0),d0
000185E0 D169 0008                  		add.w	d0,obX(a1)
000185E4                            
000185E4                            	@notonconveyor:
000185E4 4E75                       		rts	
000185E4 4E75                       		rts	
000185E6                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
000185E6                            ; ---------------------------------------------------------------------------
000185E6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000185E6                            ; ---------------------------------------------------------------------------
000185E6                            
000185E6                            SpinPlatform:
000185E6 7000                       		moveq	#0,d0
000185E8 1028 0024                  		move.b	obRoutine(a0),d0
000185EC 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
000185F0 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
000185F4                            ; ===========================================================================
000185F4 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
000185F6 0000                       		dc.w Spin_Trapdoor-Spin_Index
000185F8 0000                       		dc.w Spin_Spinner-Spin_Index
000185FA                            
000185FA =00000030                  spin_timer:	equ $30		; time counter until change
000185FA =00000032                  spin_timelen:	equ $32		; time between changes (general)
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            Spin_Main:	; Routine 0
000185FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000185FE 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018606 317C 4492 0002             		move.w	#$4492,obGfx(a0)
0001860C 0028 0004 0001             		ori.b	#4,obRender(a0)
00018612 117C 0080 0014             		move.b	#$80,obActWid(a0)
00018618 7000                       		moveq	#0,d0
0001861A 1028 0028                  		move.b	obSubtype(a0),d0
0001861E 0240 000F                  		andi.w	#$F,d0
00018622 C0FC 003C                  		mulu.w	#$3C,d0
00018626 3140 0032                  		move.w	d0,spin_timelen(a0)
0001862A 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
0001862E 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018630                            
00018630 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018634 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
0001863C 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018642 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018648 117C 0002 001C             		move.b	#2,obAnim(a0)
0001864E 7000                       		moveq	#0,d0
00018650 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018654 3200                       		move.w	d0,d1
00018656 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001865A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001865E 3140 0030                  		move.w	d0,spin_timer(a0)
00018662 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00018666 0241 0070                  		andi.w	#$70,d1
0001866A 0641 0010                  		addi.w	#$10,d1
0001866E E549                       		lsl.w	#2,d1
00018670 5341                       		subq.w	#1,d1
00018672 3141 0036                  		move.w	d1,$36(a0)
00018676 6000                       		bra.s	Spin_Spinner
00018678                            ; ===========================================================================
00018678                            
00018678                            Spin_Trapdoor:	; Routine 2
00018678 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
0001867C 6A00                       		bpl.s	@animate	; if time remains, branch
0001867E                            
0001867E 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018684 0868 0000 001C             		bchg	#0,obAnim(a0)
0001868A 4A28 0001                  		tst.b	obRender(a0)
0001868E 6A00                       		bpl.s	@animate
0001869A                            
0001869A                            	@animate:
0001869A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186A0 4EB9 0000 C804             		jsr	(AnimateSprite).l
000186A6 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000186AA 6600                       		bne.s	@notsolid	; if not, branch
000186AC 323C 004B                  		move.w	#$4B,d1
000186B0 343C 000C                  		move.w	#$C,d2
000186B4 3602                       		move.w	d2,d3
000186B6 5243                       		addq.w	#1,d3
000186B8 3828 0008                  		move.w	obX(a0),d4
000186BC 6100 94A6                  		bsr.w	SolidObject
000186C0 6000 900A                  		bra.w	RememberState
000186C4                            ; ===========================================================================
000186C4                            
000186C4                            @notsolid:
000186C4 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000186CA 6700                       		beq.s	@display	; if not, branch
000186CC 43F8 D000                  		lea	(v_player).w,a1
000186D0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000186D6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000186DC 4228 0025                  		clr.b	obSolid(a0)
000186E0                            
000186E0                            	@display:
000186E0 6000 8FEA                  		bra.w	RememberState
000186E4                            ; ===========================================================================
000186E4                            
000186E4                            Spin_Spinner:	; Routine 4
000186E4 3038 FE04                  		move.w	(v_framecount).w,d0
000186E8 C068 0036                  		and.w	$36(a0),d0
000186EC 6600                       		bne.s	@delay
000186EE 117C 0001 0034             		move.b	#1,$34(a0)
000186F4                            
000186F4                            	@delay:
000186F4 4A28 0034                  		tst.b	$34(a0)
000186F8 6700                       		beq.s	@animate
000186FA 5368 0030                  		subq.w	#1,spin_timer(a0)
000186FE 6A00                       		bpl.s	@animate
00018700 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018706 4228 0034                  		clr.b	$34(a0)
0001870A 0868 0000 001C             		bchg	#0,obAnim(a0)
00018710                            
00018710                            	@animate:
00018710 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018716 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001871C 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018720 6600                       		bne.s	@notsolid2	; if not, branch
00018722 323C 001B                  		move.w	#$1B,d1
00018726 343C 0007                  		move.w	#7,d2
0001872A 3602                       		move.w	d2,d3
0001872C 5243                       		addq.w	#1,d3
0001872E 3828 0008                  		move.w	obX(a0),d4
00018732 6100 9430                  		bsr.w	SolidObject
00018736 6000 8F94                  		bra.w	RememberState
0001873A                            ; ===========================================================================
0001873A                            
0001873A                            @notsolid2:
0001873A 0828 0003 0022             		btst	#3,obStatus(a0)
00018740 6700                       		beq.s	@display
00018742 43F8 D000                  		lea	(v_player).w,a1
00018746 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001874C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018752 4228 0025                  		clr.b	obSolid(a0)
00018756                            
00018756                            	@display:
00018756 6000 8F74                  		bra.w	RememberState
00018756 6000 8F74                  		bra.w	RememberState
0001875A                            		include	"_anim\SBZ Spinning Platforms.asm"
0001875A                            ; ---------------------------------------------------------------------------
0001875A                            ; Animation script - trapdoor (SBZ)
0001875A                            ; ---------------------------------------------------------------------------
0001875A 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
0001875C 0000                       		dc.w @trapclose-Ani_Spin
0001875E 0000                       		dc.w @spin1-Ani_Spin
00018760 0000                       		dc.w @spin2-Ani_Spin
00018762 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018768 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
0001876E 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018782 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018796                            		even
00018796                            		even
00018796                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018796                            ; ---------------------------------------------------------------------------
00018796                            ; Sprite mappings - trapdoor (SBZ)
00018796                            ; ---------------------------------------------------------------------------
00018796                            Map_Trap_internal:
00018796 0000                       		dc.w @closed-Map_Trap_internal
00018798 0000                       		dc.w @half-Map_Trap_internal
0001879A 0000                       		dc.w @open-Map_Trap_internal
0001879C 04                         @closed:	dc.b 4
0001879D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000187A2 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000187A7 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000187AC F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000187B1 08                         @half:		dc.b 8
000187B2 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000187B7 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000187BC 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000187C1 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000187C6 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000187CB 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000187D0 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000187D5 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000187DA 04                         @open:		dc.b 4
000187DB 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000187E0 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000187E5 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000187EA 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000187F0 00                         		even
000187F0 00                         		even
000187F0                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
000187F0                            ; ---------------------------------------------------------------------------
000187F0                            ; Sprite mappings - spinning platforms (SBZ)
000187F0                            ; ---------------------------------------------------------------------------
000187F0                            Map_Spin_internal:
000187F0 0000                       		dc.w @flat-Map_Spin_internal
000187F2 0000                       		dc.w @spin1-Map_Spin_internal
000187F4 0000                       		dc.w @spin2-Map_Spin_internal
000187F6 0000                       		dc.w @spin3-Map_Spin_internal
000187F8 0000                       		dc.w @spin4-Map_Spin_internal
000187FA 02                         @flat:		dc.b 2
000187FB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018800 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018805 02                         @spin1:		dc.b 2
00018806 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001880B 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018810 02                         @spin2:		dc.b 2
00018811 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018816 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001881B 02                         @spin3:		dc.b 2
0001881C F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018821 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018826 02                         @spin4:		dc.b 2
00018827 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001882C 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018832 00                         		even
00018832 00                         		even
00018832                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018832                            ; ---------------------------------------------------------------------------
00018832                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018832                            ; ---------------------------------------------------------------------------
00018832                            
00018832                            Saws:
00018832 7000                       		moveq	#0,d0
00018834 1028 0024                  		move.b	obRoutine(a0),d0
00018838 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
0001883C 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018840                            ; ===========================================================================
00018840 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018842 0000                       		dc.w Saw_Action-Saw_Index
00018844                            
00018844 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018844 =00000038                  saw_origY:	equ $38		; original y-axis position
00018844 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018844                            ; ===========================================================================
00018844                            
00018844                            Saw_Main:	; Routine 0
00018844 5428 0024                  		addq.b	#2,obRoutine(a0)
00018848 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018850 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018856 117C 0004 0001             		move.b	#4,obRender(a0)
0001885C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018862 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018868 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
0001886E 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018874 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
0001887A 6400                       		bcc.s	Saw_Action	; if yes, branch
0001887C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018882                            
00018882                            Saw_Action:	; Routine 2
00018882 7000                       		moveq	#0,d0
00018884 1028 0028                  		move.b	obSubtype(a0),d0
00018888 0240 0007                  		andi.w	#7,d0
0001888C D040                       		add.w	d0,d0
0001888E 323B 0000                  		move.w	@index(pc,d0.w),d1
00018892 4EBB 1000                  		jsr	@index(pc,d1.w)
000188B2 4EF9 0000 F742             		jmp	(DisplaySprite).l
000188B8                            
000188B8                            	@delete:
000188B8 4EF9 0000 F782             		jmp	(DeleteObject).l
000188BE                            ; ===========================================================================
000188BE 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
000188C4 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
000188C8                            ; ===========================================================================
000188C8                            
000188C8                            @type00:
000188C8 4E75                       		rts			; doesn't move
000188CA                            ; ===========================================================================
000188CA                            
000188CA                            @type01:
000188CA 323C 0060                  		move.w	#$60,d1
000188CE 7000                       		moveq	#0,d0
000188D0 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000188D4 0828 0000 0022             		btst	#0,obStatus(a0)
000188DA 6700                       		beq.s	@noflip01
000188DC 4440                       		neg.w	d0
000188DE D041                       		add.w	d1,d0
000188E0                            
000188E0                            	@noflip01:
000188E0 3228 003A                  		move.w	saw_origX(a0),d1
000188E4 9240                       		sub.w	d0,d1
000188E6 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
000188EA                            
000188EA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000188EE 6A00                       		bpl.s	@sameframe01
000188F0 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
000188F6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000188FC                            
000188FC                            	@sameframe01:
000188FC 4A28 0001                  		tst.b	obRender(a0)
00018900 6A00                       		bpl.s	@nosound01
00018902 3038 FE04                  		move.w	(v_framecount).w,d0
00018906 0240 000F                  		andi.w	#$F,d0
0001890A 6600                       		bne.s	@nosound01
00018916                            
00018916                            	@nosound01:
00018916 4E75                       		rts	
00018918                            ; ===========================================================================
00018918                            
00018918                            @type02:
00018918 323C 0030                  		move.w	#$30,d1
0001891C 7000                       		moveq	#0,d0
0001891E 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018922 0828 0000 0022             		btst	#0,obStatus(a0)
00018928 6700                       		beq.s	@noflip02
0001892A 4440                       		neg.w	d0
0001892C 0640 0080                  		addi.w	#$80,d0
00018930                            
00018930                            	@noflip02:
00018930 3228 0038                  		move.w	saw_origY(a0),d1
00018934 9240                       		sub.w	d0,d1
00018936 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
0001893A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001893E 6A00                       		bpl.s	@sameframe02
00018940 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018946 0868 0000 001A             		bchg	#0,obFrame(a0)
0001894C                            
0001894C                            	@sameframe02:
0001894C 4A28 0001                  		tst.b	obRender(a0)
00018950 6A00                       		bpl.s	@nosound02
00018952 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018956 0C00 0018                  		cmpi.b	#$18,d0
0001895A 6600                       		bne.s	@nosound02
00018966                            
00018966                            	@nosound02:
00018966 4E75                       		rts	
00018968                            ; ===========================================================================
00018968                            
00018968                            @type03:
00018968 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
0001896C 6600                       		bne.s	@here03		; if yes, branch
0001896E                            
0001896E 3038 D008                  		move.w	(v_player+obX).w,d0
00018972 0440 00C0                  		subi.w	#$C0,d0
00018976 6500                       		bcs.s	@nosaw03x
00018978 9068 0008                  		sub.w	obX(a0),d0
0001897C 6500                       		bcs.s	@nosaw03x
0001897E 3038 D00C                  		move.w	(v_player+obY).w,d0
00018982 0440 0080                  		subi.w	#$80,d0
00018986 B068 000C                  		cmp.w	obY(a0),d0
0001898A 6400                       		bcc.s	@nosaw03y
0001898C 0640 0100                  		addi.w	#$100,d0
00018990 B068 000C                  		cmp.w	obY(a0),d0
00018994 6500                       		bcs.s	@nosaw03y
00018996 117C 0001 003D             		move.b	#1,saw_here(a0)
0001899C 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
000189A2 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189A8 117C 0002 001A             		move.b	#2,obFrame(a0)
000189B8                            
000189B8                            	@nosaw03x:
000189B8 588F                       		addq.l	#4,sp
000189BA                            
000189BA                            	@nosaw03y:
000189BA 4E75                       		rts	
000189BC                            ; ===========================================================================
000189BC                            
000189BC                            @here03:
000189BC 4EB9 0000 F72E             		jsr	(SpeedToPos).l
000189C2 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000189C8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000189CC 6A00                       		bpl.s	@sameframe03
000189CE 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000189D4 0868 0000 001A             		bchg	#0,obFrame(a0)
000189DA                            
000189DA                            	@sameframe03:
000189DA 4E75                       		rts	
000189DC                            ; ===========================================================================
000189DC                            
000189DC                            @type04:
000189DC 4A28 003D                  		tst.b	saw_here(a0)
000189E0 6600                       		bne.s	@here04
000189E2 3038 D008                  		move.w	(v_player+obX).w,d0
000189E6 0640 00E0                  		addi.w	#$E0,d0
000189EA 9068 0008                  		sub.w	obX(a0),d0
000189EE 6400                       		bcc.s	@nosaw04x
000189F0 3038 D00C                  		move.w	(v_player+obY).w,d0
000189F4 0440 0080                  		subi.w	#$80,d0
000189F8 B068 000C                  		cmp.w	obY(a0),d0
000189FC 6400                       		bcc.s	@nosaw04y
000189FE 0640 0100                  		addi.w	#$100,d0
00018A02 B068 000C                  		cmp.w	obY(a0),d0
00018A06 6500                       		bcs.s	@nosaw04y
00018A08 117C 0001 003D             		move.b	#1,saw_here(a0)
00018A0E 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018A14 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018A1A 117C 0002 001A             		move.b	#2,obFrame(a0)
00018A2A                            
00018A2A                            	@nosaw04x:
00018A2A 588F                       		addq.l	#4,sp
00018A2C                            
00018A2C                            	@nosaw04y:
00018A2C 4E75                       		rts	
00018A2E                            ; ===========================================================================
00018A2E                            
00018A2E                            @here04:
00018A2E 4EB9 0000 F72E             		jsr	(SpeedToPos).l
00018A34 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A3A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A3E 6A00                       		bpl.s	@sameframe04
00018A40 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A46 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A4C                            
00018A4C                            	@sameframe04:
00018A4C 4E75                       		rts	
00018A4C 4E75                       		rts	
00018A4E                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018A4E                            ; ---------------------------------------------------------------------------
00018A4E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018A4E                            ; ---------------------------------------------------------------------------
00018A4E                            Map_Saw_internal:
00018A4E 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018A50 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018A52 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018A54 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018A56 07                         @pizzacutter1:	dc.b 7
00018A57 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018A5C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018A61 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018A66 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018A6B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018A70 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018A75 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A7A 07                         @pizzacutter2:	dc.b 7
00018A7B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018A80 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018A85 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018A8A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A8F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A94 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A99 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A9E 04                         @groundsaw1:	dc.b 4
00018A9F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018AA4 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AA9 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018AAE 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018AB3 04                         @groundsaw2:	dc.b 4
00018AB4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018AB9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018ABE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018AC3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018AC8                            		even
00018AC8                            		even
00018AC8                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018AC8                            ; ---------------------------------------------------------------------------
00018AC8                            ; Object 6B - stomper and sliding door (SBZ)
00018AC8                            ; ---------------------------------------------------------------------------
00018AC8                            
00018AC8                            ScrapStomp:
00018AC8 7000                       		moveq	#0,d0
00018ACA 1028 0024                  		move.b	obRoutine(a0),d0
00018ACE 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018AD2 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018AD6                            ; ===========================================================================
00018AD6 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018AD8 0000                       		dc.w Sto_Action-Sto_Index
00018ADA                            
00018ADA =00000016                  sto_height:	equ $16
00018ADA =00000034                  sto_origX:	equ $34		; original x-axis position
00018ADA =00000030                  sto_origY:	equ $30		; original y-axis position
00018ADA =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018ADA                            
00018ADA 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018ADE 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018AE2 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018AE6 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018AEA 8040 0005                  		dc.b  $80, $40,	  0,   5
00018AEE                            ; ===========================================================================
00018AEE                            
00018AEE                            Sto_Main:	; Routine 0
00018AEE 5428 0024                  		addq.b	#2,obRoutine(a0)
00018AF2 7000                       		moveq	#0,d0
00018AF4 1028 0028                  		move.b	obSubtype(a0),d0
00018AF8 E448                       		lsr.w	#2,d0
00018AFA 0240 001C                  		andi.w	#$1C,d0
00018AFE 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018B02 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018B06 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018B0A E448                       		lsr.w	#2,d0
00018B0C 1140 001A                  		move.b	d0,obFrame(a0)
00018B10 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018B18 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018B1E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018B24 6600                       		bne.s	@isSBZ12	; if not, branch
00018B26 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018B2C 6700                       		beq.s	@isSBZ3
00018B2E                            
00018B2E                            @chkdel:
00018B2E 45F8 FC00                  		lea	(v_objstate).w,a2
00018B32 7000                       		moveq	#0,d0
00018B34 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B38 6700                       		beq.s	@delete
00018B3A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B40                            
00018B40                            	@delete:
00018B40 4EF9 0000 F782             		jmp	(DeleteObject).l
00018B46                            ; ===========================================================================
00018B46                            
00018B46                            @isSBZ3:
00018B46 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018B4C 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018B52 6600                       		bne.s	@isSBZ12
00018B54 45F8 FC00                  		lea	(v_objstate).w,a2
00018B58 7000                       		moveq	#0,d0
00018B5A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B5E 6700                       		beq.s	@isSBZ12
00018B60 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018B66 6700                       		beq.s	@isSBZ12
00018B68 4238 F7CB                  		clr.b	(v_obj6B).w
00018B6C 60C0                       		bra.s	@chkdel
00018B6E                            ; ===========================================================================
00018B6E                            
00018B6E                            @isSBZ12:
00018B6E 0028 0004 0001             		ori.b	#4,obRender(a0)
00018B74 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018B7A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018B80 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018B86 7000                       		moveq	#0,d0
00018B88 101B                       		move.b	(a3)+,d0
00018B8A 3140 003C                  		move.w	d0,$3C(a0)
00018B8E 7000                       		moveq	#0,d0
00018B90 1028 0028                  		move.b	obSubtype(a0),d0
00018B94 6A00                       		bpl.s	Sto_Action
00018B96 0200 000F                  		andi.b	#$F,d0
00018B9A 1140 003E                  		move.b	d0,$3E(a0)
00018B9E 1153 0028                  		move.b	(a3),obSubtype(a0)
00018BA2 0C13 0005                  		cmpi.b	#5,(a3)
00018BA6 6600                       		bne.s	@chkgone
00018BA8 08E8 0004 0001             		bset	#4,obRender(a0)
00018BAE                            
00018BAE                            	@chkgone:
00018BAE 45F8 FC00                  		lea	(v_objstate).w,a2
00018BB2 7000                       		moveq	#0,d0
00018BB4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BB8 6700                       		beq.s	Sto_Action
00018BBA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018BC0                            
00018BC0                            Sto_Action:	; Routine 2
00018BC0 3F28 0008                  		move.w	obX(a0),-(sp)
00018BC4 7000                       		moveq	#0,d0
00018BC6 1028 0028                  		move.b	obSubtype(a0),d0
00018BCA 0240 000F                  		andi.w	#$F,d0
00018BCE D040                       		add.w	d0,d0
00018BD0 323B 0000                  		move.w	@index(pc,d0.w),d1
00018BD4 4EBB 1000                  		jsr	@index(pc,d1.w)
00018BD8 381F                       		move.w	(sp)+,d4
00018BDA 4A28 0001                  		tst.b	obRender(a0)
00018BDE 6A00                       		bpl.s	@chkdel
00018BE0 7200                       		moveq	#0,d1
00018BE2 1228 0014                  		move.b	obActWid(a0),d1
00018BE6 0641 000B                  		addi.w	#$B,d1
00018BEA 7400                       		moveq	#0,d2
00018BEC 1428 0016                  		move.b	sto_height(a0),d2
00018BF0 3602                       		move.w	d2,d3
00018BF2 5243                       		addq.w	#1,d3
00018BF4 6100 8F6E                  		bsr.w	SolidObject
00018BF8                            
00018BF8                            	@chkdel:
00018C14 4EF9 0000 F742             		jmp	(DisplaySprite).l
00018C1A                            
00018C1A                            	@chkgone:
00018C1A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018C20 6600                       		bne.s	@delete
00018C22 4238 F7CB                  		clr.b	(v_obj6B).w
00018C26 45F8 FC00                  		lea	(v_objstate).w,a2
00018C2A 7000                       		moveq	#0,d0
00018C2C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C30 6700                       		beq.s	@delete
00018C32 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C38                            
00018C38                            	@delete:
00018C38 4EF9 0000 F782             		jmp	(DeleteObject).l
00018C3E                            ; ===========================================================================
00018C3E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018C42 0000 0000                  		dc.w @type02-@index, @type03-@index
00018C46 0000 0000                  		dc.w @type04-@index, @type05-@index
00018C4A                            ; ===========================================================================
00018C4A                            
00018C4A                            @type00:
00018C4A 4E75                       		rts
00018C4C                            ; ===========================================================================
00018C4C                            
00018C4C                            @type01:
00018C4C 4A28 0038                  		tst.b	sto_active(a0)
00018C50 6600                       		bne.s	@isactive01
00018C52 45F8 F7E0                  		lea	(f_switch).w,a2
00018C56 7000                       		moveq	#0,d0
00018C58 1028 003E                  		move.b	$3E(a0),d0
00018C5C 0832 0000 0000             		btst	#0,(a2,d0.w)
00018C62 6700                       		beq.s	@loc_15DC2
00018C64 117C 0001 0038             		move.b	#1,sto_active(a0)
00018C6A                            
00018C6A                            	@isactive01:
00018C6A 3028 003C                  		move.w	$3C(a0),d0
00018C6E B068 003A                  		cmp.w	$3A(a0),d0
00018C72 6700                       		beq.s	@loc_15DE0
00018C74 5468 003A                  		addq.w	#2,$3A(a0)
00018C78                            
00018C78                            	@loc_15DC2:
00018C78 3028 003A                  		move.w	$3A(a0),d0
00018C7C 0828 0000 0022             		btst	#0,obStatus(a0)
00018C82 6700                       		beq.s	@noflip01
00018C84 4440                       		neg.w	d0
00018C86 0640 0080                  		addi.w	#$80,d0
00018C8A                            
00018C8A                            	@noflip01:
00018C8A 3228 0034                  		move.w	sto_origX(a0),d1
00018C8E 9240                       		sub.w	d0,d1
00018C90 3141 0008                  		move.w	d1,obX(a0)
00018C94 4E75                       		rts	
00018C96                            ; ===========================================================================
00018C96                            
00018C96                            @loc_15DE0:
00018C96 5228 0028                  		addq.b	#1,obSubtype(a0)
00018C9A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018CA0 4228 0038                  		clr.b	sto_active(a0)
00018CA4 45F8 FC00                  		lea	(v_objstate).w,a2
00018CA8 7000                       		moveq	#0,d0
00018CAA 1028 0023                  		move.b	obRespawnNo(a0),d0
00018CAE 67C8                       		beq.s	@loc_15DC2
00018CB0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018CB6 60C0                       		bra.s	@loc_15DC2
00018CB8                            ; ===========================================================================
00018CB8                            
00018CB8                            @type02:
00018CB8 4A28 0038                  		tst.b	sto_active(a0)
00018CBC 6600                       		bne.s	@isactive02
00018CBE 5368 0036                  		subq.w	#1,$36(a0)
00018CC2 6600                       		bne.s	@loc_15E1E
00018CC4 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CCA                            
00018CCA                            	@isactive02:
00018CCA 4A68 003A                  		tst.w	$3A(a0)
00018CCE 6700                       		beq.s	@loc_15E3C
00018CD0 5568 003A                  		subq.w	#2,$3A(a0)
00018CD4                            
00018CD4                            	@loc_15E1E:
00018CD4 3028 003A                  		move.w	$3A(a0),d0
00018CD8 0828 0000 0022             		btst	#0,obStatus(a0)
00018CDE 6700                       		beq.s	@noflip02
00018CE0 4440                       		neg.w	d0
00018CE2 0640 0080                  		addi.w	#$80,d0
00018CE6                            
00018CE6                            	@noflip02:
00018CE6 3228 0034                  		move.w	sto_origX(a0),d1
00018CEA 9240                       		sub.w	d0,d1
00018CEC 3141 0008                  		move.w	d1,obX(a0)
00018CF0 4E75                       		rts	
00018CF2                            ; ===========================================================================
00018CF2                            
00018CF2                            @loc_15E3C:
00018CF2 5328 0028                  		subq.b	#1,obSubtype(a0)
00018CF6 4228 0038                  		clr.b	sto_active(a0)
00018CFA 45F8 FC00                  		lea	(v_objstate).w,a2
00018CFE 7000                       		moveq	#0,d0
00018D00 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D04 67CE                       		beq.s	@loc_15E1E
00018D06 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018D0C 60C6                       		bra.s	@loc_15E1E
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            @type03:
00018D0E 4A28 0038                  		tst.b	sto_active(a0)
00018D12 6600                       		bne.s	@isactive03
00018D14 4A68 003A                  		tst.w	$3A(a0)
00018D18 6700                       		beq.s	@loc_15E6A
00018D1A 5368 003A                  		subq.w	#1,$3A(a0)
00018D1E 6000                       		bra.s	@loc_15E8E
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            @loc_15E6A:
00018D20 5368 0036                  		subq.w	#1,$36(a0)
00018D24 6A00                       		bpl.s	@loc_15E8E
00018D26 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D2C 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D32                            
00018D32                            @isactive03:
00018D32 5068 003A                  		addq.w	#8,$3A(a0)
00018D36 3028 003A                  		move.w	$3A(a0),d0
00018D3A B068 003C                  		cmp.w	$3C(a0),d0
00018D3E 6600                       		bne.s	@loc_15E8E
00018D40 4228 0038                  		clr.b	sto_active(a0)
00018D44                            
00018D44                            @loc_15E8E:
00018D44 3028 003A                  		move.w	$3A(a0),d0
00018D48 0828 0000 0022             		btst	#0,obStatus(a0)
00018D4E 6700                       		beq.s	@noflip03
00018D50 4440                       		neg.w	d0
00018D52 0640 0038                  		addi.w	#$38,d0
00018D56                            
00018D56                            	@noflip03:
00018D56 3228 0030                  		move.w	sto_origY(a0),d1
00018D5A D240                       		add.w	d0,d1
00018D5C 3141 000C                  		move.w	d1,obY(a0)
00018D60 4E75                       		rts	
00018D62                            ; ===========================================================================
00018D62                            
00018D62                            @type04:
00018D62 4A28 0038                  		tst.b	sto_active(a0)
00018D66 6600                       		bne.s	@isactive04
00018D68 4A68 003A                  		tst.w	$3A(a0)
00018D6C 6700                       		beq.s	@loc_15EBE
00018D6E 5168 003A                  		subq.w	#8,$3A(a0)
00018D72 6000                       		bra.s	@loc_15EF0
00018D74                            ; ===========================================================================
00018D74                            
00018D74                            @loc_15EBE:
00018D74 5368 0036                  		subq.w	#1,$36(a0)
00018D78 6A00                       		bpl.s	@loc_15EF0
00018D7A 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D80 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D86                            
00018D86                            @isactive04:
00018D86 3028 003A                  		move.w	$3A(a0),d0
00018D8A B068 003C                  		cmp.w	$3C(a0),d0
00018D8E 6700                       		beq.s	@loc_15EE0
00018D90 5068 003A                  		addq.w	#8,$3A(a0)
00018D94 6000                       		bra.s	@loc_15EF0
00018D96                            ; ===========================================================================
00018D96                            
00018D96                            @loc_15EE0:
00018D96 5368 0036                  		subq.w	#1,$36(a0)
00018D9A 6A00                       		bpl.s	@loc_15EF0
00018D9C 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DA2 4228 0038                  		clr.b	sto_active(a0)
00018DA6                            
00018DA6                            @loc_15EF0:
00018DA6 3028 003A                  		move.w	$3A(a0),d0
00018DAA 0828 0000 0022             		btst	#0,obStatus(a0)
00018DB0 6700                       		beq.s	@noflip04
00018DB2 4440                       		neg.w	d0
00018DB4 0640 0038                  		addi.w	#$38,d0
00018DB8                            
00018DB8                            	@noflip04:
00018DB8 3228 0030                  		move.w	sto_origY(a0),d1
00018DBC D240                       		add.w	d0,d1
00018DBE 3141 000C                  		move.w	d1,obY(a0)
00018DC2 4E75                       		rts	
00018DC4                            ; ===========================================================================
00018DC4                            
00018DC4                            @type05:
00018DC4 4A28 0038                  		tst.b	sto_active(a0)
00018DC8 6600                       		bne.s	@loc_15F3E
00018DCA 45F8 F7E0                  		lea	(f_switch).w,a2
00018DCE 7000                       		moveq	#0,d0
00018DD0 1028 003E                  		move.b	$3E(a0),d0
00018DD4 0832 0000 0000             		btst	#0,(a2,d0.w)
00018DDA 6700                       		beq.s	@locret_15F5C
00018DDC 117C 0001 0038             		move.b	#1,sto_active(a0)
00018DE2 45F8 FC00                  		lea	(v_objstate).w,a2
00018DE6 7000                       		moveq	#0,d0
00018DE8 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DEC 6700                       		beq.s	@loc_15F3E
00018DEE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018DF4                            
00018DF4                            @loc_15F3E:
00018DF4 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018DFC 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018E04 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018E0A 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018E10 6700                       		beq.s	@loc_15F5E
00018E12                            
00018E12                            @locret_15F5C:
00018E12 4E75                       		rts	
00018E14                            ; ===========================================================================
00018E14                            
00018E14                            @loc_15F5E:
00018E14 4228 0028                  		clr.b	obSubtype(a0)
00018E18 4228 0038                  		clr.b	sto_active(a0)
00018E1C 4E75                       		rts	
00018E1C 4E75                       		rts	
00018E1E                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018E1E                            ; ---------------------------------------------------------------------------
00018E1E                            ; Sprite mappings - stomper and	platforms (SBZ)
00018E1E                            ; ---------------------------------------------------------------------------
00018E1E                            Map_Stomp_internal:
00018E1E 0000                       		dc.w @door-Map_Stomp_internal
00018E20 0000                       		dc.w @stomper-Map_Stomp_internal
00018E22 0000                       		dc.w @stomper-Map_Stomp_internal
00018E24 0000                       		dc.w @stomper-Map_Stomp_internal
00018E26 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018E28 04                         @door:		dc.b 4
00018E29 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018E2E F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018E33 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018E38 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018E3D 08                         @stomper:	dc.b 8
00018E3E E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018E43 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018E48 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018E4D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018E52 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018E57 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018E5C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018E61 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018E66 0E                         @bigdoor:	dc.b $E
00018E67 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018E6C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018E71 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018E76 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018E7B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018E80 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018E85 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018E8A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018E8F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018E94 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018E99 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018E9E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018EA3 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018EA8 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018EAE 00                         		even
00018EAE 00                         		even
00018EAE                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018EAE                            ; ---------------------------------------------------------------------------
00018EAE                            ; Object 6C - vanishing	platforms (SBZ)
00018EAE                            ; ---------------------------------------------------------------------------
00018EAE                            
00018EAE                            VanishPlatform:
00018EAE 7000                       		moveq	#0,d0
00018EB0 1028 0024                  		move.b	obRoutine(a0),d0
00018EB4 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018EB8 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018EBC                            ; ===========================================================================
00018EBC 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018EBE 0000                       		dc.w VanP_Vanish-VanP_Index
00018EC0 0000                       		dc.w VanP_Appear-VanP_Index
00018EC2 0000                       		dc.w loc_16068-VanP_Index
00018EC4                            
00018EC4 =00000030                  vanp_timer:	equ $30		; counter for time until event
00018EC4 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018EC4                            ; ===========================================================================
00018EC4                            
00018EC4                            VanP_Main:	; Routine 0
00018EC4 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018EC8 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018ED0 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00018ED6 0028 0004 0001             		ori.b	#4,obRender(a0)
00018EDC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018EE2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018EE8 7000                       		moveq	#0,d0
00018EEA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018EEE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018EF2 5240                       		addq.w	#1,d0		; add 1
00018EF4 EF48                       		lsl.w	#7,d0		; multiply by $80
00018EF6 3200                       		move.w	d0,d1
00018EF8 5340                       		subq.w	#1,d0
00018EFA 3140 0030                  		move.w	d0,vanp_timer(a0)
00018EFE 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018F02 7000                       		moveq	#0,d0
00018F04 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F08 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018F0C 0641 0080                  		addi.w	#$80,d1
00018F10 C0C1                       		mulu.w	d1,d0
00018F12 E088                       		lsr.l	#8,d0
00018F14 3140 0036                  		move.w	d0,$36(a0)
00018F18 5341                       		subq.w	#1,d1
00018F1A 3141 0038                  		move.w	d1,$38(a0)
00018F1E                            
00018F1E                            loc_16068:	; Routine 6
00018F1E 3038 FE04                  		move.w	(v_framecount).w,d0
00018F22 9068 0036                  		sub.w	$36(a0),d0
00018F26 C068 0038                  		and.w	$38(a0),d0
00018F2A 6600                       		bne.s	@animate
00018F2C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018F30 6000                       		bra.s	VanP_Vanish
00018F32                            ; ===========================================================================
00018F32                            
00018F32                            @animate:
00018F32 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018F38 4EB9 0000 C804             		jsr	(AnimateSprite).l
00018F3E 6000 878C                  		bra.w	RememberState
00018F42                            ; ===========================================================================
00018F42                            
00018F42                            VanP_Vanish:	; Routine 2
00018F42                            VanP_Appear:	; Routine 4
00018F42 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018F46 6A00                       		bpl.s	@wait
00018F48 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018F4E 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018F52 6700                       		beq.s	@isvanishing	; if yes, branch
00018F54 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018F5A                            
00018F5A                            	@isvanishing:
00018F5A 0868 0000 001C             		bchg	#0,obAnim(a0)
00018F60                            
00018F60                            	@wait:
00018F60 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018F66 4EB9 0000 C804             		jsr	(AnimateSprite).l
00018F6C 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018F72 6600                       		bne.s	@notsolid	; if yes, branch
00018F74 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018F7A 6600                       		bne.s	@loc_160D6
00018F7C 7200                       		moveq	#0,d1
00018F7E 1228 0014                  		move.b	obActWid(a0),d1
00018F82 4EB9 0000 8E52             		jsr	(PlatformObject).l
00018F88 6000 8742                  		bra.w	RememberState
00018F8C                            ; ===========================================================================
00018F8C                            
00018F8C                            @loc_160D6:
00018F8C 7200                       		moveq	#0,d1
00018F8E 1228 0014                  		move.b	obActWid(a0),d1
00018F92 4EB9 0000 8FC6             		jsr	(ExitPlatform).l
00018F98 3428 0008                  		move.w	obX(a0),d2
00018F9C 4EB9 0000 9530             		jsr	(MvSonicOnPtfm2).l
00018FA2 6000 8728                  		bra.w	RememberState
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            @notsolid:
00018FA6 0828 0003 0022             		btst	#3,obStatus(a0)
00018FAC 6700                       		beq.s	@display
00018FAE 43F8 D000                  		lea	(v_player).w,a1
00018FB2 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018FB8 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018FBE 117C 0002 0024             		move.b	#2,obRoutine(a0)
00018FC4 4228 0025                  		clr.b	obSolid(a0)
00018FC8                            
00018FC8                            	@display:
00018FC8 6000 8702                  		bra.w	RememberState
00018FC8 6000 8702                  		bra.w	RememberState
00018FCC                            		include	"_anim\SBZ Vanishing Platforms.asm"
00018FCC                            ; ---------------------------------------------------------------------------
00018FCC                            ; Animation script - vanishing platforms (SBZ)
00018FCC                            ; ---------------------------------------------------------------------------
00018FCC 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00018FCE 0000                       		dc.w @appear-Ani_Van
00018FD0 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00018FD8 00                         		even
00018FD8 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00018FE0 00                         		even
00018FE0 00                         		even
00018FE0                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00018FE0                            ; ---------------------------------------------------------------------------
00018FE0                            ; Sprite mappings - vanishing platforms	(SBZ)
00018FE0                            ; ---------------------------------------------------------------------------
00018FE0                            Map_VanP_internal:
00018FE0 0000                       		dc.w @whole-Map_VanP_internal
00018FE2 0000                       		dc.w @half-Map_VanP_internal
00018FE4 0000                       		dc.w @quarter-Map_VanP_internal
00018FE6 0000                       		dc.w @gone-Map_VanP_internal
00018FE8 01                         @whole:		dc.b 1
00018FE9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018FEE 01                         @half:		dc.b 1
00018FEF F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018FF4 01                         @quarter:	dc.b 1
00018FF5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00018FFA 00                         @gone:		dc.b 0
00018FFC 00                         		even
00018FFC 00                         		even
00018FFC                            		include	"_incObj\6E Electrocuter.asm"
00018FFC                            ; ---------------------------------------------------------------------------
00018FFC                            ; Object 6E - electrocution orbs (SBZ)
00018FFC                            ; ---------------------------------------------------------------------------
00018FFC                            
00018FFC                            Electro:
00018FFC 7000                       		moveq	#0,d0
00018FFE 1028 0024                  		move.b	obRoutine(a0),d0
00019002 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019006 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
0001900A                            ; ===========================================================================
0001900A 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
0001900C 0000                       		dc.w Elec_Shock-Elec_Index
0001900E                            
0001900E =00000034                  elec_freq:	equ $34		; frequency
0001900E                            ; ===========================================================================
0001900E                            
0001900E                            Elec_Main:	; Routine 0
0001900E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019012 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
0001901A 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019020 0028 0004 0001             		ori.b	#4,obRender(a0)
00019026 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001902C 7000                       		moveq	#0,d0
0001902E 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019032 E948                       		lsl.w	#4,d0		; multiply by $10
00019034 5340                       		subq.w	#1,d0
00019036 3140 0034                  		move.w	d0,elec_freq(a0)
0001903A                            
0001903A                            Elec_Shock:	; Routine 2
0001903A 3038 FE04                  		move.w	(v_framecount).w,d0
0001903E C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019042 6600                       		bne.s	@animate	; if not, branch
00019044                            
00019044 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001904A 4A28 0001                  		tst.b	obRender(a0)
0001904E 6A00                       		bpl.s	@animate
0001905A                            
0001905A                            	@animate:
0001905A 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019060 4EB9 0000 C804             		jsr	(AnimateSprite).l
00019066 117C 0000 0020             		move.b	#0,obColType(a0)
0001906C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019072 6600                       		bne.s	@display	; if not, branch
00019074 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001907A                            
0001907A                            	@display:
0001907A 6000 8650                  		bra.w	RememberState
0001907A 6000 8650                  		bra.w	RememberState
0001907E                            		include	"_anim\Electrocuter.asm"
0001907E                            ; ---------------------------------------------------------------------------
0001907E                            ; Animation script - electrocution orbs (SBZ)
0001907E                            ; ---------------------------------------------------------------------------
0001907E 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019080 0000                       		dc.w byte_161D0-Ani_Elec
00019082 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019086 00                         		even
00019086 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019096                            		even
00019096                            		even
00019096                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019096                            ; --------------------------------------------------------------------------------
00019096                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019096                            ; --------------------------------------------------------------------------------
00019096                            
00019096                            SME_KiF9w:	
00019096 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
0001909A 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
0001909E 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000190A2 02                         SME_KiF9w_C:	dc.b 2	
000190A3 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000190A8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190AD 03                         SME_KiF9w_17:	dc.b 3	
000190AE F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000190B3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000190B8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190BD 05                         SME_KiF9w_27:	dc.b 5	
000190BE F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000190C3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000190C8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190CD F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000190D2 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000190D7 04                         SME_KiF9w_41:	dc.b 4	
000190D8 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000190DD 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190E2 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000190E7 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000190EC 06                         SME_KiF9w_56:	dc.b 6	
000190ED F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000190F2 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190F7 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
000190FC F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019101 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019106 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
0001910B 04                         SME_KiF9w_75:	dc.b 4	
0001910C F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019111 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019116 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
0001911B F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019120                            		even
00019120                            		even
00019120                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019120                            ; ---------------------------------------------------------------------------
00019120                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019120                            ; ---------------------------------------------------------------------------
00019120                            
00019120                            SpinConvey:
00019120 7000                       		moveq	#0,d0
00019122 1028 0024                  		move.b	obRoutine(a0),d0
00019126 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001912A 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001914A                            
0001914A                            SpinC_Display:
0001914A 4EF9 0000 F742             		jmp	(DisplaySprite).l
00019150                            ; ===========================================================================
00019150                            
00019150                            loc_1629A:
00019150 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019156 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019158 0C40 FF80                  		cmpi.w	#-$80,d0
0001915C 64EC                       		bcc.s	SpinC_Display
0001915E                            
0001915E                            SpinC_Act1or2:
0001915E 1028 002F                  		move.b	$2F(a0),d0
00019162 6A00                       		bpl.s	SpinC_Delete
00019164 0240 007F                  		andi.w	#$7F,d0
00019168 45F8 F7C1                  		lea	(v_obj63).w,a2
0001916C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019172                            
00019172                            SpinC_Delete:
00019172 4EF9 0000 F782             		jmp	(DeleteObject).l
00019178                            ; ===========================================================================
00019178 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001917A 0000                       		dc.w loc_163D8-SpinC_Index
0001917C                            ; ===========================================================================
0001917C                            
0001917C                            SpinC_Main:	; Routine 0
0001917C 1028 0028                  		move.b	obSubtype(a0),d0
00019180 6B00 0000                  		bmi.w	loc_16380
00019184 5428 0024                  		addq.b	#2,obRoutine(a0)
00019188 217C 0001 87F0 0004        		move.l	#Map_Spin,obMap(a0)
00019190 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019196 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001919C 0028 0004 0001             		ori.b	#4,obRender(a0)
000191A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000191A8 7000                       		moveq	#0,d0
000191AA 1028 0028                  		move.b	obSubtype(a0),d0
000191AE 3200                       		move.w	d0,d1
000191B0 E648                       		lsr.w	#3,d0
000191B2 0240 001E                  		andi.w	#$1E,d0
000191B6 45FA 0000                  		lea	off_164A6(pc),a2
000191BA D4F2 0000                  		adda.w	(a2,d0.w),a2
000191BE 315A 0038                  		move.w	(a2)+,$38(a0)
000191C2 315A 0030                  		move.w	(a2)+,$30(a0)
000191C6 214A 003C                  		move.l	a2,$3C(a0)
000191CA 0241 000F                  		andi.w	#$F,d1
000191CE E549                       		lsl.w	#2,d1
000191D0 1141 0038                  		move.b	d1,$38(a0)
000191D4 117C 0004 003A             		move.b	#4,$3A(a0)
000191DA 4A38 F7C0                  		tst.b	(f_conveyrev).w
000191DE 6700                       		beq.s	loc_16356
000191E0 117C 0001 003B             		move.b	#1,$3B(a0)
000191E6 4428 003A                  		neg.b	$3A(a0)
000191EA 7200                       		moveq	#0,d1
000191EC 1228 0038                  		move.b	$38(a0),d1
000191F0 D228 003A                  		add.b	$3A(a0),d1
000191F4 B228 0039                  		cmp.b	$39(a0),d1
000191F8 6500                       		bcs.s	loc_16352
000191FA 1001                       		move.b	d1,d0
000191FC 7200                       		moveq	#0,d1
000191FE 4A00                       		tst.b	d0
00019200 6A00                       		bpl.s	loc_16352
00019202 1228 0039                  		move.b	$39(a0),d1
00019206 5901                       		subq.b	#4,d1
00019208                            
00019208                            loc_16352:
00019208 1141 0038                  		move.b	d1,$38(a0)
0001920C                            
0001920C                            loc_16356:
0001920C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019212 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019218 4A41                       		tst.w	d1
0001921A 6600                       		bne.s	loc_1636C
0001921C 117C 0001 001C             		move.b	#1,obAnim(a0)
00019222                            
00019222                            loc_1636C:
00019222 0C41 0008                  		cmpi.w	#8,d1
00019226 6600                       		bne.s	loc_16378
00019228 117C 0000 001C             		move.b	#0,obAnim(a0)
0001922E                            
0001922E                            loc_16378:
0001922E 6100 B522                  		bsr.w	LCon_ChangeDir
00019232 6000 0000                  		bra.w	loc_163D8
00019236                            ; ===========================================================================
00019236                            
00019236                            loc_16380:
00019236 1140 002F                  		move.b	d0,$2F(a0)
0001923A 0240 007F                  		andi.w	#$7F,d0
0001923E 45F8 F7C1                  		lea	(v_obj63).w,a2
00019242 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019248 6700                       		beq.s	loc_1639A
0001924A 4EF9 0000 F782             		jmp	(DeleteObject).l
00019250                            ; ===========================================================================
00019250                            
00019250                            loc_1639A:
00019250 D040                       		add.w	d0,d0
00019252 0240 001E                  		andi.w	#$1E,d0
00019256 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001925A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019260 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019264 321A                       		move.w	(a2)+,d1
00019266 2248                       		movea.l	a0,a1
00019268 6000                       		bra.s	SpinC_LoadPform
0001926A                            ; ===========================================================================
0001926A                            
0001926A                            SpinC_Loop:
0001926A 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
00019270 6600                       		bne.s	loc_163D0
00019272                            
00019272                            SpinC_LoadPform:
00019272 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019276 335A 0008                  		move.w	(a2)+,obX(a1)
0001927A 335A 000C                  		move.w	(a2)+,obY(a1)
0001927E 301A                       		move.w	(a2)+,d0
00019280 1340 0028                  		move.b	d0,obSubtype(a1)
00019284                            
00019284                            loc_163D0:
00019284 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019288                            
00019288 588F                       		addq.l	#4,sp
0001928A 4E75                       		rts	
0001928C                            ; ===========================================================================
0001928C                            
0001928C                            loc_163D8:	; Routine 2
0001928C 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019292 4EB9 0000 C804             		jsr	(AnimateSprite).l
00019298 4A28 001A                  		tst.b	obFrame(a0)
0001929C 6600                       		bne.s	loc_16404
0001929E 3F28 0008                  		move.w	obX(a0),-(sp)
000192A2 6100 0000                  		bsr.w	loc_16424
000192A6 323C 001B                  		move.w	#$1B,d1
000192AA 343C 0007                  		move.w	#7,d2
000192AE 3602                       		move.w	d2,d3
000192B0 5243                       		addq.w	#1,d3
000192B2 381F                       		move.w	(sp)+,d4
000192B4 6000 88AE                  		bra.w	SolidObject
000192B8                            ; ===========================================================================
000192B8                            
000192B8                            loc_16404:
000192B8 0828 0003 0022             		btst	#3,obStatus(a0)
000192BE 6700                       		beq.s	loc_16420
000192C0 43F8 D000                  		lea	(v_objspace).w,a1
000192C4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000192CA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000192D0 4228 0025                  		clr.b	obSolid(a0)
000192D4                            
000192D4                            loc_16420:
000192D4 6000 0000                  		bra.w	loc_16424
000192D8                            
000192D8                            loc_16424:
000192D8 3028 0008                  		move.w	obX(a0),d0
000192DC B068 0034                  		cmp.w	$34(a0),d0
000192E0 6600                       		bne.s	loc_16484
000192E2 3028 000C                  		move.w	obY(a0),d0
000192E6 B068 0036                  		cmp.w	$36(a0),d0
000192EA 6600                       		bne.s	loc_16484
000192EC 7200                       		moveq	#0,d1
000192EE 1228 0038                  		move.b	$38(a0),d1
000192F2 D228 003A                  		add.b	$3A(a0),d1
000192F6 B228 0039                  		cmp.b	$39(a0),d1
000192FA 6500                       		bcs.s	loc_16456
000192FC 1001                       		move.b	d1,d0
000192FE 7200                       		moveq	#0,d1
00019300 4A00                       		tst.b	d0
00019302 6A00                       		bpl.s	loc_16456
00019304 1228 0039                  		move.b	$39(a0),d1
00019308 5901                       		subq.b	#4,d1
0001930A                            
0001930A                            loc_16456:
0001930A 1141 0038                  		move.b	d1,$38(a0)
0001930E 2268 003C                  		movea.l	$3C(a0),a1
00019312 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019318 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001931E 4A41                       		tst.w	d1
00019320 6600                       		bne.s	loc_16474
00019322 117C 0001 001C             		move.b	#1,obAnim(a0)
00019328                            
00019328                            loc_16474:
00019328 0C41 0008                  		cmpi.w	#8,d1
0001932C 6600                       		bne.s	loc_16480
0001932E 117C 0000 001C             		move.b	#0,obAnim(a0)
00019334                            
00019334                            loc_16480:
00019334 6100 B41C                  		bsr.w	LCon_ChangeDir
00019338                            
00019338                            loc_16484:
00019338 4EF9 0000 F72E             		jmp	(SpeedToPos).l
00019338 4EF9 0000 F72E             		jmp	(SpeedToPos).l
0001933E                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001933E                            ; ---------------------------------------------------------------------------
0001933E                            ; Animation script - platform on conveyor belt (SBZ)
0001933E                            ; ---------------------------------------------------------------------------
0001933E 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019340 0000                       		dc.w @still-Ani_SpinConvey
00019342 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001934F 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
00019356 00                         		even
00019356 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001935A 00                         		even
0001935A 00                         		even
0001935A                            
0001935A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019360 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019366 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001937A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001938E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000193A2 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000193B6 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000193CA 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            		include	"_incObj\70 Girder Block.asm"
000193DE                            ; ---------------------------------------------------------------------------
000193DE                            ; Object 70 - large girder block (SBZ)
000193DE                            ; ---------------------------------------------------------------------------
000193DE                            
000193DE                            Girder:
000193DE 7000                       		moveq	#0,d0
000193E0 1028 0024                  		move.b	obRoutine(a0),d0
000193E4 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
000193E8 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
000193EC                            ; ===========================================================================
000193EC 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
000193EE 0000                       		dc.w Gird_Action-Gird_Index
000193F0                            
000193F0 =00000016                  gird_height:	equ $16
000193F0 =00000032                  gird_origX:	equ $32		; original x-axis position
000193F0 =00000030                  gird_origY:	equ $30		; original y-axis position
000193F0 =00000034                  gird_time:	equ $34		; duration for movement in a direction
000193F0 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
000193F0 =0000003A                  gird_delay:	equ $3A		; delay for movement
000193F0                            ; ===========================================================================
000193F0                            
000193F0                            Gird_Main:	; Routine 0
000193F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000193F4 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
000193FC 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019402 0028 0004 0001             		ori.b	#4,obRender(a0)
00019408 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001940E 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019414 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001941A 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019420 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019426 6100 0000                  		bsr.w	Gird_ChgMove
0001942A                            
0001942A                            Gird_Action:	; Routine 2
0001942A 3F28 0008                  		move.w	obX(a0),-(sp)
0001942E 4A68 003A                  		tst.w	gird_delay(a0)
00019432 6700                       		beq.s	@beginmove
00019434 5368 003A                  		subq.w	#1,gird_delay(a0)
00019438 6600                       		bne.s	@solid
0001943A                            
0001943A                            	@beginmove:
0001943A 4EB9 0000 F72E             		jsr	(SpeedToPos).l
00019440 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019444 6600                       		bne.s	@solid		; if time remains, branch
00019446 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001944A                            
0001944A                            	@solid:
0001944A 381F                       		move.w	(sp)+,d4
0001944C 4A28 0001                  		tst.b	obRender(a0)
00019450 6A00                       		bpl.s	@chkdel
00019452 7200                       		moveq	#0,d1
00019454 1228 0014                  		move.b	obActWid(a0),d1
00019458 0641 000B                  		addi.w	#$B,d1
0001945C 7400                       		moveq	#0,d2
0001945E 1428 0016                  		move.b	gird_height(a0),d2
00019462 3602                       		move.w	d2,d3
00019464 5243                       		addq.w	#1,d3
00019466 6100 86FC                  		bsr.w	SolidObject
0001946A                            
0001946A                            	@chkdel:
00019486 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001948C                            
0001948C                            	@delete:
0001948C 4EF9 0000 F782             		jmp	(DeleteObject).l
00019492                            ; ===========================================================================
00019492                            
00019492                            Gird_ChgMove:
00019492 1028 0038                  		move.b	gird_set(a0),d0
00019496 0240 0018                  		andi.w	#$18,d0
0001949A 43F9 0000 0000             		lea	(@settings).l,a1
000194A0 43F1 0000                  		lea	(a1,d0.w),a1
000194A4 3159 0010                  		move.w	(a1)+,obVelX(a0)
000194A8 3159 0012                  		move.w	(a1)+,obVelY(a0)
000194AC 3159 0034                  		move.w	(a1)+,gird_time(a0)
000194B0 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000194B4 317C 0007 003A             		move.w	#7,gird_delay(a0)
000194BA 4E75                       		rts	
000194BC                            ; ===========================================================================
000194BC                            @settings:	;   x-speed, y-speed, duration
000194BC 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000194C4 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000194CC FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000194D4 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000194D4 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000194DC                            Map_Gird:	include	"_maps\Girder Block.asm"
000194DC                            ; ---------------------------------------------------------------------------
000194DC                            ; Sprite mappings - large girder block (SBZ)
000194DC                            ; ---------------------------------------------------------------------------
000194DC                            Map_Gird_internal:
000194DC 0000                       		dc.w @girder-Map_Gird_internal
000194DE 0C                         @girder:	dc.b $C
000194DF E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000194E4 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000194E9 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000194EE 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000194F3 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000194F8 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000194FD E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019502 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019507 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001950C 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019511 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019516 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001951C 00                         		even
0001951C 00                         		even
0001951C                            		include	"_incObj\72 Teleporter.asm"
0001951C                            ; ---------------------------------------------------------------------------
0001951C                            ; Object 72 - teleporter (SBZ)
0001951C                            ; ---------------------------------------------------------------------------
0001951C                            
0001951C                            Teleport:
0001951C 7000                       		moveq	#0,d0
0001951E 1028 0024                  		move.b	obRoutine(a0),d0
00019522 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019526 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019546 4E75                       		rts	
00019548                            
00019548                            	@delete:
00019548 4EF9 0000 F782             		jmp	(DeleteObject).l
0001954E                            ; ===========================================================================
0001954E 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019550 0000                       		dc.w loc_166C8-Tele_Index
00019552 0000                       		dc.w loc_1675E-Tele_Index
00019554 0000                       		dc.w loc_16798-Tele_Index
00019556                            ; ===========================================================================
00019556                            
00019556                            Tele_Main:	; Routine 0
00019556 5428 0024                  		addq.b	#2,obRoutine(a0)
0001955A 1028 0028                  		move.b	obSubtype(a0),d0
0001955E D040                       		add.w	d0,d0
00019560 0240 001E                  		andi.w	#$1E,d0
00019564 45FA 0000                  		lea	Tele_Data(pc),a2
00019568 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001956C 315A 003A                  		move.w	(a2)+,$3A(a0)
00019570 214A 003C                  		move.l	a2,$3C(a0)
00019574 315A 0036                  		move.w	(a2)+,$36(a0)
00019578 315A 0038                  		move.w	(a2)+,$38(a0)
0001957C                            
0001957C                            loc_166C8:	; Routine 2
0001957C 43F8 D000                  		lea	(v_player).w,a1
00019580 3029 0008                  		move.w	obX(a1),d0
00019584 9068 0008                  		sub.w	obX(a0),d0
00019588 0828 0000 0022             		btst	#0,obStatus(a0)
0001958E 6700                       		beq.s	loc_166E0
00019590 0640 000F                  		addi.w	#$F,d0
00019594                            
00019594                            loc_166E0:
00019594 0C40 0010                  		cmpi.w	#$10,d0
00019598 6400                       		bcc.s	locret_1675C
0001959A 3229 000C                  		move.w	obY(a1),d1
0001959E 9268 000C                  		sub.w	obY(a0),d1
000195A2 0641 0020                  		addi.w	#$20,d1
000195A6 0C41 0040                  		cmpi.w	#$40,d1
000195AA 6400                       		bcc.s	locret_1675C
000195AC 4A38 F7C8                  		tst.b	(f_lockmulti).w
000195B0 6600                       		bne.s	locret_1675C
000195B2 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000195B8 6600                       		bne.s	loc_1670E
000195BA 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000195C0 6500                       		bcs.s	locret_1675C
000195C2                            
000195C2                            loc_1670E:
000195C2 5428 0024                  		addq.b	#2,obRoutine(a0)
000195C6 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000195CC 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000195D2 337C 0800 0020             		move.w	#$800,obInertia(a1)
000195D8 337C 0000 0010             		move.w	#0,obVelX(a1)
000195DE 337C 0000 0012             		move.w	#0,obVelY(a1)
000195E4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000195EA 08A9 0005 0022             		bclr	#5,obStatus(a1)
000195F0 08E9 0001 0022             		bset	#1,obStatus(a1)
000195F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000195FC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019602 4228 0032                  		clr.b	$32(a0)
00019610                            
00019610                            locret_1675C:
00019610 4E75                       		rts	
00019612                            ; ===========================================================================
00019612                            
00019612                            loc_1675E:	; Routine 4
00019612 43F8 D000                  		lea	(v_player).w,a1
00019616 1028 0032                  		move.b	$32(a0),d0
0001961A 5428 0032                  		addq.b	#2,$32(a0)
0001961E 4EB9 0000 37AE             		jsr	(CalcSine).l
00019624 EA40                       		asr.w	#5,d0
00019626 3428 000C                  		move.w	obY(a0),d2
0001962A 9440                       		sub.w	d0,d2
0001962C 3342 000C                  		move.w	d2,obY(a1)
00019630 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019636 6600                       		bne.s	locret_16796
00019638 6100 0000                  		bsr.w	sub_1681C
0001963C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001964A                            
0001964A                            locret_16796:
0001964A 4E75                       		rts	
0001964C                            ; ===========================================================================
0001964C                            
0001964C                            loc_16798:	; Routine 6
0001964C 588F                       		addq.l	#4,sp
0001964E 43F8 D000                  		lea	(v_player).w,a1
00019652 5328 002E                  		subq.b	#1,$2E(a0)
00019656 6A00                       		bpl.s	loc_167DA
00019658 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001965E 3368 0038 000C             		move.w	$38(a0),obY(a1)
00019664 7200                       		moveq	#0,d1
00019666 1228 003A                  		move.b	$3A(a0),d1
0001966A 5801                       		addq.b	#4,d1
0001966C B228 003B                  		cmp.b	$3B(a0),d1
00019670 6500                       		bcs.s	loc_167C2
00019672 7200                       		moveq	#0,d1
00019674 6000                       		bra.s	loc_16800
00019676                            ; ===========================================================================
00019676                            
00019676                            loc_167C2:
00019676 1141 003A                  		move.b	d1,$3A(a0)
0001967A 2468 003C                  		movea.l	$3C(a0),a2
0001967E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019684 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001968A 6000 0000                  		bra.w	sub_1681C
0001968E                            ; ===========================================================================
0001968E                            
0001968E                            loc_167DA:
0001968E 2429 0008                  		move.l	obX(a1),d2
00019692 2629 000C                  		move.l	obY(a1),d3
00019696 3029 0010                  		move.w	obVelX(a1),d0
0001969A 48C0                       		ext.l	d0
0001969C E180                       		asl.l	#8,d0
0001969E D480                       		add.l	d0,d2
000196A0 3029 0012                  		move.w	obVelY(a1),d0
000196A4 48C0                       		ext.l	d0
000196A6 E180                       		asl.l	#8,d0
000196A8 D680                       		add.l	d0,d3
000196AA 2342 0008                  		move.l	d2,obX(a1)
000196AE 2343 000C                  		move.l	d3,obY(a1)
000196B2 4E75                       		rts	
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            loc_16800:
000196B4 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000196BA 4228 0024                  		clr.b	obRoutine(a0)
000196BE 4238 F7C8                  		clr.b	(f_lockmulti).w
000196C2 337C 0000 0010             		move.w	#0,obVelX(a1)
000196C8 337C 0200 0012             		move.w	#$200,obVelY(a1)
000196CE 4E75                       		rts	
000196D0                            
000196D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000196D0                            
000196D0                            
000196D0                            sub_1681C:
000196D0 7000                       		moveq	#0,d0
000196D2 343C 1000                  		move.w	#$1000,d2
000196D6 3028 0036                  		move.w	$36(a0),d0
000196DA 9069 0008                  		sub.w	obX(a1),d0
000196DE 6C00                       		bge.s	loc_16830
000196E0 4440                       		neg.w	d0
000196E2 4442                       		neg.w	d2
000196E4                            
000196E4                            loc_16830:
000196E4 7200                       		moveq	#0,d1
000196E6 363C 1000                  		move.w	#$1000,d3
000196EA 3228 0038                  		move.w	$38(a0),d1
000196EE 9269 000C                  		sub.w	obY(a1),d1
000196F2 6C00                       		bge.s	loc_16844
000196F4 4441                       		neg.w	d1
000196F6 4443                       		neg.w	d3
000196F8                            
000196F8                            loc_16844:
000196F8 B240                       		cmp.w	d0,d1
000196FA 6500                       		bcs.s	loc_1687A
000196FC 7200                       		moveq	#0,d1
000196FE 3228 0038                  		move.w	$38(a0),d1
00019702 9269 000C                  		sub.w	obY(a1),d1
00019706 4841                       		swap	d1
00019708 83C3                       		divs.w	d3,d1
0001970A 7000                       		moveq	#0,d0
0001970C 3028 0036                  		move.w	$36(a0),d0
00019710 9069 0008                  		sub.w	obX(a1),d0
00019714 6700                       		beq.s	loc_16866
00019716 4840                       		swap	d0
00019718 81C1                       		divs.w	d1,d0
0001971A                            
0001971A                            loc_16866:
0001971A 3340 0010                  		move.w	d0,obVelX(a1)
0001971E 3343 0012                  		move.w	d3,obVelY(a1)
00019722 4A41                       		tst.w	d1
00019724 6A00                       		bpl.s	loc_16874
00019726 4441                       		neg.w	d1
00019728                            
00019728                            loc_16874:
00019728 3141 002E                  		move.w	d1,$2E(a0)
0001972C 4E75                       		rts	
0001972E                            ; ===========================================================================
0001972E                            
0001972E                            loc_1687A:
0001972E 7000                       		moveq	#0,d0
00019730 3028 0036                  		move.w	$36(a0),d0
00019734 9069 0008                  		sub.w	obX(a1),d0
00019738 4840                       		swap	d0
0001973A 81C2                       		divs.w	d2,d0
0001973C 7200                       		moveq	#0,d1
0001973E 3228 0038                  		move.w	$38(a0),d1
00019742 9269 000C                  		sub.w	obY(a1),d1
00019746 6700                       		beq.s	loc_16898
00019748 4841                       		swap	d1
0001974A 83C0                       		divs.w	d0,d1
0001974C                            
0001974C                            loc_16898:
0001974C 3341 0012                  		move.w	d1,obVelY(a1)
00019750 3342 0010                  		move.w	d2,obVelX(a1)
00019754 4A40                       		tst.w	d0
00019756 6A00                       		bpl.s	loc_168A6
00019758 4440                       		neg.w	d0
0001975A                            
0001975A                            loc_168A6:
0001975A 3140 002E                  		move.w	d0,$2E(a0)
0001975E 4E75                       		rts	
00019760                            ; End of function sub_1681C
00019760                            
00019760                            ; ===========================================================================
00019760 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019766 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001976C 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019770 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019776 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001977C 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019782 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019788 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001978E 0884 0298 0894             		dc.w $884, $298, $894
00019794 0270 0894 0190             		dc.w $270, $894, $190
0001979A 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000197A0 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000197A6 1184 0498 1158             		dc.w $1184, $498, $1158
000197AC 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000197B2 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000197B8 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000197BE 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000197C4 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
000197CA 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000197D0 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000197D6 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000197DC FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000197E2 0004 0894 0090             @type07:	dc.w 4,	$894, $90
000197E2 0004 0894 0090             @type07:	dc.w 4,	$894, $90
000197E8                            
000197E8                            		include	"_incObj\78 Caterkiller.asm"
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            
000197E8                            Caterkiller:
000197E8 7000                       		moveq	#0,d0
000197EA 1028 0024                  		move.b	obRoutine(a0),d0
000197EE 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
000197F2 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
000197F6                            ; ===========================================================================
000197F6 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
000197F8 0000                       		dc.w Cat_Head-Cat_Index
000197FA 0000                       		dc.w Cat_BodySeg1-Cat_Index
000197FC 0000                       		dc.w Cat_BodySeg2-Cat_Index
000197FE 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019800 0000                       		dc.w Cat_Delete-Cat_Index
00019802 0000                       		dc.w loc_16CC0-Cat_Index
00019804                            
00019804 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019804                            ; ===========================================================================
00019804                            
00019804                            locret_16950:
00019804 4E75                       		rts	
00019806                            ; ===========================================================================
00019806                            
00019806                            Cat_Main:	; Routine 0
00019806 117C 0007 0016             		move.b	#7,obHeight(a0)
0001980C 117C 0008 0017             		move.b	#8,obWidth(a0)
00019812 4EB9 0000 F6F6             		jsr	(ObjectFall).l
00019818 4EB9 0001 7CCE             		jsr	(ObjFloorDist).l
0001981E 4A41                       		tst.w	d1
00019820 6AE2                       		bpl.s	locret_16950
00019822 D368 000C                  		add.w	d1,obY(a0)
00019826 4268 0012                  		clr.w	obVelY(a0)
0001982A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001982E 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019836 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001983C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019842 6700                       		beq.s	@isscrapbrain
00019844 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001984A                            
0001984A                            	@isscrapbrain:
0001984A 0228 0003 0001             		andi.b	#3,obRender(a0)
00019850 0028 0004 0001             		ori.b	#4,obRender(a0)
00019856 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001985C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019862 117C 0008 0014             		move.b	#8,obActWid(a0)
00019868 117C 000B 0020             		move.b	#$B,obColType(a0)
0001986E 3428 0008                  		move.w	obX(a0),d2
00019872 7A0C                       		moveq	#$C,d5
00019874 0828 0000 0022             		btst	#0,obStatus(a0)
0001987A 6700                       		beq.s	@noflip
0001987C 4445                       		neg.w	d5
0001987E                            
0001987E                            	@noflip:
0001987E 1C3C 0004                  		move.b	#4,d6
00019882 7600                       		moveq	#0,d3
00019884 7804                       		moveq	#4,d4
00019886 2448                       		movea.l	a0,a2
00019888 7202                       		moveq	#2,d1
0001988A                            
0001988A                            Cat_Loop:
0001988A 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
00019890 6600 0000                  			bne.w	Cat_ChkGone
00019894 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019898 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001989C 5406                       		addq.b	#2,d6		; alternate between the two
0001989E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000198A4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000198AA 337C 0280 0018             		move.w	#$280,obPriority(a1)
000198B0 137C 0008 0014             		move.b	#8,obActWid(a1)
000198B6 137C 00CB 0020             		move.b	#$CB,obColType(a1)
000198BC D445                       		add.w	d5,d2
000198BE 3342 0008                  		move.w	d2,obX(a1)
000198C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000198C8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000198CE 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
000198D4 137C 0008 001A             		move.b	#8,obFrame(a1)
000198DA 234A 003C                  		move.l	a2,cat_parent(a1)
000198DE 1344 003C                  		move.b	d4,cat_parent(a1)
000198E2 5804                       		addq.b	#4,d4
000198E4 2449                       		movea.l	a1,a2
000198E6                            
000198E6                            	@fail:
000198E6 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
000198EA                            
000198EA 117C 0007 002A             		move.b	#7,$2A(a0)
000198F0 4228 003C                  		clr.b	cat_parent(a0)
000198F4                            
000198F4                            Cat_Head:	; Routine 2
000198F4 4A28 0022                  		tst.b	obStatus(a0)
000198F8 6B00 0000                  		bmi.w	loc_16C96
000198FC 7000                       		moveq	#0,d0
000198FE 1028 0025                  		move.b	ob2ndRout(a0),d0
00019902 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019906 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001990A 1228 002B                  		move.b	$2B(a0),d1
0001990E 6A00                       		bpl.s	@display
00019910 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019916 1028 0026                  		move.b	obAngle(a0),d0
0001991A 0240 007F                  		andi.w	#$7F,d0
0001991E 5828 0026                  		addq.b	#4,obAngle(a0)
00019922 1031 0000                  		move.b	(a1,d0.w),d0
00019926 6A00                       		bpl.s	@animate
00019928 08A8 0007 002B             		bclr	#7,$2B(a0)
0001992E 6000                       		bra.s	@display
00019930                            
00019930                            	@animate:
00019930 0201 0010                  		andi.b	#$10,d1
00019934 D001                       		add.b	d1,d0
00019936 1140 001A                  		move.b	d0,obFrame(a0)
0001993A                            
0001993A                            	@display:
00019958 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001995E                            
0001995E                            	Cat_ChkGone:
0001995E 45F8 FC00                  		lea	(v_objstate).w,a2
00019962 7000                       		moveq	#0,d0
00019964 1028 0023                  		move.b	obRespawnNo(a0),d0
00019968 6700                       		beq.s	@delete
0001996A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019970                            
00019970                            	@delete:
00019970 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019976 4E75                       		rts	
00019978                            ; ===========================================================================
00019978                            
00019978                            Cat_Delete:	; Routine $A
00019978 4EF9 0000 F782             		jmp	(DeleteObject).l
0001997E                            ; ===========================================================================
0001997E 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019980 0000                       		dc.w loc_16B02-Cat_Index2
00019982                            ; ===========================================================================
00019982                            
00019982                            @wait:
00019982 5328 002A                  		subq.b	#1,$2A(a0)
00019986 6B00                       		bmi.s	@move
00019988 4E75                       		rts	
0001998A                            ; ===========================================================================
0001998A                            
0001998A                            @move:
0001998A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001998E 117C 0010 002A             		move.b	#$10,$2A(a0)
00019994 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001999A 317C 0040 001C             		move.w	#$40,obAnim(a0)
000199A0 0868 0004 002B             		bchg	#4,$2B(a0)
000199A6 6600                       		bne.s	loc_16AFC
000199A8 4268 0010                  		clr.w	obVelX(a0)
000199AC 4468 001C                  		neg.w	obAnim(a0)
000199B0                            
000199B0                            loc_16AFC:
000199B0 08E8 0007 002B             		bset	#7,$2B(a0)
000199B6                            
000199B6                            loc_16B02:
000199B6 5328 002A                  		subq.b	#1,$2A(a0)
000199BA 6B00                       		bmi.s	@loc_16B5E
000199BC 4A68 0010                  			tst.w	obVelX(a0)
000199C0 6700                       			beq.s	@notmoving
000199C2 2428 0008                  			move.l	obX(a0),d2
000199C6 2602                       			move.l	d2,d3
000199C8 3028 0010                  		move.w	obVelX(a0),d0
000199CC 0828 0000 0022             		btst	#0,obStatus(a0)
000199D2 6700                       		beq.s	@noflip
000199D4 4440                       		neg.w	d0
000199D6                            
000199D6                            	@noflip:
000199D6 48C0                       		ext.l	d0
000199D8 E180                       		asl.l	#8,d0
000199DA D480                       		add.l	d0,d2
000199DC 2142 0008                  		move.l	d2,obX(a0)
000199E0 4843                       			swap	d3
000199E2 B668 0008                  			cmp.w	obX(a0),d3
000199E6 6700                       			beq.s	@notmoving
000199E8 4EB9 0001 7CCE             			jsr	(ObjFloorDist).l
000199EE 0C41 FFF8                  			cmpi.w	#-8,d1
000199F2 6D00                       			blt.s	@loc_16B70
000199F4 0C41 000C                  			cmpi.w	#$C,d1
000199F8 6C00                       			bge.s	@loc_16B70
000199FA D368 000C                  			add.w	d1,obY(a0)
000199FE 7000                       		moveq	#0,d0
00019A00 1028 003C                  		move.b	cat_parent(a0),d0
00019A04 5228 003C                  		addq.b	#1,cat_parent(a0)
00019A08 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019A0E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019A12                            
00019A12                            	@notmoving:
00019A12 4E75                       		rts	
00019A14                            ; ===========================================================================
00019A14                            
00019A14                            @loc_16B5E:
00019A14 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019A18 117C 0007 002A             		move.b	#7,$2A(a0)
00019A1E 4268 0010                  			clr.w	obVelX(a0)
00019A22 4268 001C                  			clr.w	obAnim(a0)
00019A26 4E75                       		rts	
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            @loc_16B70:
00019A28 7000                       			moveq	#0,d0
00019A2A 1028 003C                  			move.b	cat_parent(a0),d0
00019A2E 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019A34 4468 000A                  			neg.w	obX+2(a0)
00019A38 6700                       			beq.s	@loc_1730A
00019A3A 0828 0000 0022             			btst	#0,obStatus(a0)
00019A40 6700                       			beq.s	@loc_1730A
00019A42 5368 0008                  			subq.w	#1,obX(a0)
00019A46 5228 003C                  			addq.b	#1,cat_parent(a0)
00019A4A 7000                       			moveq	#0,d0
00019A4C 1028 003C                  			move.b	cat_parent(a0),d0
00019A50 4230 002C                  			clr.b	$2C(a0,d0)
00019A54                            	@loc_1730A:
00019A54 0868 0000 0022             			bchg	#0,obStatus(a0)
00019A5A 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019A60 5228 003C                  		addq.b	#1,cat_parent(a0)
00019A64 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019A6A 4E75                       		rts	
00019A6C                            ; ===========================================================================
00019A6C                            
00019A6C                            Cat_BodySeg2:	; Routine 6
00019A6C 2268 003C                  		movea.l	cat_parent(a0),a1
00019A70 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A76 6A00                       		bpl.s	Cat_BodySeg1
00019A78 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019A7E 1028 0026                  		move.b	obAngle(a0),d0
00019A82 0240 007F                  		andi.w	#$7F,d0
00019A86 5828 0026                  		addq.b	#4,obAngle(a0)
00019A8A 4A31 0004                  		tst.b	4(a1,d0.w)
00019A8E 6A00                       		bpl.s	Cat_AniBody
00019A90 5828 0026                  		addq.b	#4,obAngle(a0)
00019A94                            
00019A94                            Cat_AniBody:
00019A94 1031 0000                  		move.b	(a1,d0.w),d0
00019A98 5000                       		addq.b	#8,d0
00019A9A 1140 001A                  		move.b	d0,obFrame(a0)
00019A9E                            
00019A9E                            Cat_BodySeg1:	; Routine 4, 8
00019A9E 2268 003C                  		movea.l	cat_parent(a0),a1
00019AA2 4A28 0022                  		tst.b	obStatus(a0)
00019AA6 6B00 0000                  		bmi.w	loc_16C90
00019AAA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019AB0 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019AB6 6700 0000                  		beq.w	loc_16C64
00019ABA 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019AC0 3029 0010                  		move.w	obVelX(a1),d0
00019AC4 D068 001C                  			add.w	obAnim(a0),d0
00019AC8 3140 0010                  		move.w	d0,obVelX(a0)
00019ACC 2428 0008                  		move.l	obX(a0),d2
00019AD0 2602                       		move.l	d2,d3
00019AD2 3028 0010                  		move.w	obVelX(a0),d0
00019AD6 0828 0000 0022             		btst	#0,obStatus(a0)
00019ADC 6700                       		beq.s	loc_16C0C
00019ADE 4440                       		neg.w	d0
00019AE0                            
00019AE0                            loc_16C0C:
00019AE0 48C0                       		ext.l	d0
00019AE2 E180                       		asl.l	#8,d0
00019AE4 D480                       		add.l	d0,d2
00019AE6 2142 0008                  		move.l	d2,obX(a0)
00019AEA 4843                       		swap	d3
00019AEC B668 0008                  		cmp.w	obX(a0),d3
00019AF0 6700                       		beq.s	loc_16C64
00019AF2 7000                       		moveq	#0,d0
00019AF4 1028 003C                  		move.b	cat_parent(a0),d0
00019AF8 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019AFC 0C01 0080                  		cmpi.b	#$80,d1
00019B00 6600                       		bne.s	loc_16C50
00019B02 1181 002C                  			move.b	d1,$2C(a0,d0)
00019B06 4468 000A                  			neg.w	obX+2(a0)
00019B0A 6700                       			beq.s	locj_173E4
00019B0C 0828 0000 0022             			btst	#0,obStatus(a0)
00019B12 6700                       			beq.s	locj_173E4
00019B14 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019B1A 6600                       			bne.s	locj_173E4
00019B1C 5368 0008                  			subq.w	#1,obX(a0)
00019B20 5228 003C                  			addq.b	#1,cat_parent(a0)
00019B24 7000                       			moveq	#0,d0
00019B26 1028 003C                  			move.b	cat_parent(a0),d0
00019B2A 4230 002C                  			clr.b	$2C(a0,d0)
00019B2E                            	locj_173E4:
00019B2E 0868 0000 0022             		bchg	#0,obStatus(a0)
00019B34 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019B3A 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B3E 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B44 6000                       		bra.s	loc_16C64
00019B46                            ; ===========================================================================
00019B46                            
00019B46                            loc_16C50:
00019B46 4881                       		ext.w	d1
00019B48 D368 000C                  		add.w	d1,obY(a0)
00019B4C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B50 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B56 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019B5A                            
00019B5A                            loc_16C64:
00019B5A 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019B60 6700                       		beq.s	loc_16C90
00019B62 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019B66 6700                       		beq.s	loc_16C7C
00019B68 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019B6E 6600                       		bne.s	loc_16C82
00019B70                            
00019B70                            loc_16C7C:
00019B70 4229 0020                  		clr.b    $20(a1)
00019B74 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019B7A                            
00019B7A                            loc_16C82:
00019B7A 4EF9 0000 F742             		jmp	(DisplaySprite).l
00019B80                            
00019B80                            ; ===========================================================================
00019B80 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            loc_16C90:
00019B88 08E9 0007 0022             		bset	#7,obStatus(a1)
00019B8E                            
00019B8E                            loc_16C96:
00019B8E 7000                       		moveq	#0,d0
00019B90 1028 0024                  		move.b	obRoutine(a0),d0
00019B94 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019B98 0828 0000 0022             		btst	#0,obStatus(a0)
00019B9E 6700                       		beq.s	loc_16CAA
00019BA0 4440                       		neg.w	d0
00019BA2                            
00019BA2                            loc_16CAA:
00019BA2 3140 0010                  		move.w	d0,obVelX(a0)
00019BA6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019BAC 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019BB2 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019BB8                            
00019BB8                            loc_16CC0:	; Routine $C
00019BB8 4EB9 0000 F6F6             		jsr	(ObjectFall).l
00019BBE 4A68 0012                  		tst.w	obVelY(a0)
00019BC2 6B00                       		bmi.s	loc_16CE0
00019BC4 4EB9 0001 7CCE             		jsr	(ObjFloorDist).l
00019BCA 4A41                       		tst.w	d1
00019BCC 6A00                       		bpl.s	loc_16CE0
00019BCE D368 000C                  		add.w	d1,obY(a0)
00019BD2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019BD8                            
00019BD8                            loc_16CE0:
00019BD8 4A28 0001                  		tst.b	obRender(a0)
00019BDC 6A00 FD80                  		bpl.w	Cat_ChkGone
00019BE0 4EF9 0000 F742             		jmp	(DisplaySprite).l
00019BE0 4EF9 0000 F742             		jmp	(DisplaySprite).l
00019BE6                            		include	"_anim\Caterkiller.asm"
00019BE6                            ; ---------------------------------------------------------------------------
00019BE6                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019BE6                            ; ---------------------------------------------------------------------------
00019BE6 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019BF6 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019C06 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019C16 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019C26 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019C36 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019C46 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019C56 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019C66                            		even
00019C66                            		even
00019C66                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019C66                            ; ---------------------------------------------------------------------------
00019C66                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019C66                            ; ---------------------------------------------------------------------------
00019C66                            Map_Cat_internal:
00019C66 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019C68 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019C6A 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019C6C 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019C6E 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019C70 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019C72 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019C74 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019C76 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019C78 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019C7A 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019C7C 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019C7E 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019C80 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019C82 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019C84 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019C86 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019C88 0000                       		dc.w byte_16E04-Map_Cat_internal
00019C8A 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019C8C 0000                       		dc.w byte_16E10-Map_Cat_internal
00019C8E 0000                       		dc.w byte_16E16-Map_Cat_internal
00019C90 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019C92 0000                       		dc.w byte_16E22-Map_Cat_internal
00019C94 0000                       		dc.w byte_16E28-Map_Cat_internal
00019C96 01                         byte_16D9E:	dc.b 1
00019C97 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019C9C 01                         byte_16DA4:	dc.b 1
00019C9D F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019CA2 01                         byte_16DAA:	dc.b 1
00019CA3 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019CA8 01                         byte_16DB0:	dc.b 1
00019CA9 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019CAE 01                         byte_16DB6:	dc.b 1
00019CAF EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019CB4 01                         byte_16DBC:	dc.b 1
00019CB5 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019CBA 01                         byte_16DC2:	dc.b 1
00019CBB EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019CC0 01                         byte_16DC8:	dc.b 1
00019CC1 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019CC6 01                         byte_16DCE:	dc.b 1
00019CC7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019CCC 01                         byte_16DD4:	dc.b 1
00019CCD F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019CD2 01                         byte_16DDA:	dc.b 1
00019CD3 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019CD8 01                         byte_16DE0:	dc.b 1
00019CD9 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019CDE 01                         byte_16DE6:	dc.b 1
00019CDF F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019CE4 01                         byte_16DEC:	dc.b 1
00019CE5 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019CEA 01                         byte_16DF2:	dc.b 1
00019CEB F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019CF0 01                         byte_16DF8:	dc.b 1
00019CF1 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019CF6 01                         byte_16DFE:	dc.b 1
00019CF7 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019CFC 01                         byte_16E04:	dc.b 1
00019CFD F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019D02 01                         byte_16E0A:	dc.b 1
00019D03 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019D08 01                         byte_16E10:	dc.b 1
00019D09 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019D0E 01                         byte_16E16:	dc.b 1
00019D0F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019D14 01                         byte_16E1C:	dc.b 1
00019D15 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019D1A 01                         byte_16E22:	dc.b 1
00019D1B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019D20 01                         byte_16E28:	dc.b 1
00019D21 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019D26                            		even
00019D26                            		even
00019D26                            
00019D26                            		include	"_incObj\79 Lamppost.asm"
00019D26                            ; ---------------------------------------------------------------------------
00019D26                            ; Object 79 - lamppost
00019D26                            ; ---------------------------------------------------------------------------
00019D26                            
00019D26                            Lamppost:
00019D26 7000                       		moveq	#0,d0
00019D28 1028 0024                  		move.b	obRoutine(a0),d0
00019D2C 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019D30 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019D34 4EF9 0001 16CC             		jmp	(RememberState).l
00019D3A                            ; ===========================================================================
00019D3A 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019D3C 0000                       		dc.w Lamp_Blue-Lamp_Index
00019D3E 0000                       		dc.w Lamp_Finish-Lamp_Index
00019D40 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019D42                            
00019D42 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019D42 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019D42 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019D42                            ; ===========================================================================
00019D42                            
00019D42                            Lamp_Main:	; Routine 0
00019D42 5428 0024                  		addq.b	#2,obRoutine(a0)
00019D46 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019D4E 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019D54 117C 0004 0001             		move.b	#4,obRender(a0)
00019D5A 117C 0008 0014             		move.b	#8,obActWid(a0)
00019D60 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019D66 45F8 FC00                  		lea	(v_objstate).w,a2
00019D6A 7000                       		moveq	#0,d0
00019D6C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019D70 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019D76 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019D7C 6600                       		bne.s	@red
00019D7E 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D82 0201 007F                  		andi.b	#$7F,d1
00019D86 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019D8A 0202 007F                  		andi.b	#$7F,d2
00019D8E B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D90 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019D92                            
00019D92                            @red:
00019D92 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D98 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019D9E 117C 0003 001A             		move.b	#3,obFrame(a0)
00019DA4 4E75                       		rts	
00019DA6                            
00019DA6                            ; ===========================================================================
00019DA6                            
00019DA6                            Lamp_Blue:	; Routine 2
00019DA6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019DAA 6600 0000                  		bne.w	@donothing	; if yes, branch
00019DAE 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019DB2 6B00 0000                  		bmi.w	@donothing
00019DB6 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019DBA 0201 007F                  		andi.b	#$7F,d1
00019DBE 1428 0028                  		move.b	obSubtype(a0),d2
00019DC2 0202 007F                  		andi.b	#$7F,d2
00019DC6 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019DC8 6500                       		bcs.s	@chkhit		; if yes, branch
00019DCA 45F8 FC00                  		lea	(v_objstate).w,a2
00019DCE 7000                       		moveq	#0,d0
00019DD0 1028 0023                  		move.b	obRespawnNo(a0),d0
00019DD4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019DDA 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019DE0 117C 0003 001A             		move.b	#3,obFrame(a0)
00019DE6 6000 0000                  		bra.w	@donothing
00019DEA                            ; ===========================================================================
00019DEA                            
00019DEA                            @chkhit:
00019DEA 3038 D008                  		move.w	(v_player+obX).w,d0
00019DEE 9068 0008                  		sub.w	obX(a0),d0
00019DF2 5040                       		addq.w	#8,d0
00019DF4 0C40 0010                  		cmpi.w	#$10,d0
00019DF8 6400 0000                  		bcc.w	@donothing
00019DFC 3038 D00C                  		move.w	(v_player+obY).w,d0
00019E00 9068 000C                  		sub.w	obY(a0),d0
00019E04 0640 0040                  		addi.w	#$40,d0
00019E08 0C40 0068                  		cmpi.w	#$68,d0
00019E0C 6400                       		bcc.s	@donothing
00019E0E                            
00019E18 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E1C 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
00019E22 6600                       		bne.s	@fail
00019E24 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019E28 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019E2E 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019E34 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019E3A 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019E40 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019E48 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019E4E 137C 0004 0001             		move.b	#4,obRender(a1)
00019E54 137C 0008 0014             		move.b	#8,obActWid(a1)
00019E5A 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019E60 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019E66 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019E6C                            
00019E6C                            	@fail:
00019E6C 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019E72 6100 0000                  		bsr.w	Lamp_StoreInfo
00019E76 45F8 FC00                  		lea	(v_objstate).w,a2
00019E7A 7000                       		moveq	#0,d0
00019E7C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E80 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E86                            
00019E86                            	@donothing:
00019E86 4E75                       		rts	
00019E88                            ; ===========================================================================
00019E88                            
00019E88                            Lamp_Finish:	; Routine 4	
00019E88 4E75                       		rts	
00019E8A                            ; ===========================================================================
00019E8A                            
00019E8A                            Lamp_Twirl:	; Routine 6
00019E8A 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019E8E 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019E90 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019E96                            
00019E96                            	@continue:
00019E96 1028 0026                  		move.b	obAngle(a0),d0
00019E9A 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019EA0 0400 0040                  		subi.b	#$40,d0
00019EA4 4EB9 0000 37AE             		jsr	(CalcSine).l
00019EAA C3FC 0C00                  		muls.w	#$C00,d1
00019EAE 4841                       		swap	d1
00019EB0 D268 0030                  		add.w	lamp_origX(a0),d1
00019EB4 3141 0008                  		move.w	d1,obX(a0)
00019EB8 C1FC 0C00                  		muls.w	#$C00,d0
00019EBC 4840                       		swap	d0
00019EBE D068 0032                  		add.w	lamp_origY(a0),d0
00019EC2 3140 000C                  		move.w	d0,obY(a0)
00019EC6 4E75                       		rts	
00019EC8                            ; ===========================================================================
00019EC8                            ; ---------------------------------------------------------------------------
00019EC8                            ; Subroutine to	store information when you hit a lamppost
00019EC8                            ; ---------------------------------------------------------------------------
00019EC8                            
00019EC8                            Lamp_StoreInfo:
00019EC8 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019ECE 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019ED4 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019EDA 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019EE0 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019EE6 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019EEC 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019EF2 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019EF8 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019EFE 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019F04 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019F0A 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019F10 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019F16 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019F1C 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019F22 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019F28 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019F2E 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019F34 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019F3A 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019F40 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019F46 4E75                       		rts	
00019F48                            
00019F48                            ; ---------------------------------------------------------------------------
00019F48                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019F48                            ; ---------------------------------------------------------------------------
00019F48                            
00019F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F48                            
00019F48                            
00019F48                            Lamp_LoadInfo:
00019F48 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019F4E 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019F54 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019F5A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019F60 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019F66 4278 FE20                  		clr.w	(v_rings).w
00019F6A 4238 FE1B                  		clr.b	(v_lifecount).w
00019F6E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00019F74 11FC 003B FE25             		move.b	#59,(v_timecent).w
00019F7A 5338 FE24                  		subq.b	#1,(v_timesec).w
00019F7E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00019F84 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F8A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
00019F90 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00019F96 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
00019F9C 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00019FA2 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00019FA8 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
00019FAE 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
00019FB4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
00019FBA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
00019FC0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
00019FC6 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
00019FCC 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
00019FD2 6600                       		bne.s	@notlabyrinth	; if not, branch
00019FD4                            
00019FD4 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
00019FDA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019FE0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
00019FE6                            
00019FE6                            	@notlabyrinth:
00019FE6 4A38 FE30                  		tst.b	(v_lastlamp).w
00019FEA 6A00                       		bpl.s	locret_170F6
00019FEC 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019FF0 0440 00A0                  		subi.w	#$A0,d0
00019FF4 31C0 F728                  		move.w	d0,(v_limitleft2).w
00019FF8                            
00019FF8                            locret_170F6:
00019FF8 4E75                       		rts	
00019FF8 4E75                       		rts	
00019FFA                            Map_Lamp:	include	"_maps\Lamppost.asm"
00019FFA                            ; --------------------------------------------------------------------------------
00019FFA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019FFA                            ; --------------------------------------------------------------------------------
00019FFA                            
00019FFA                            SME_JfaKr:	
00019FFA 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
00019FFE 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A002 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A004 0A                         SME_JfaKr_A:	dc.b $A	
0001A005 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A00A E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A00F D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A014 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A019 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A01E F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A023 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A028 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A02D 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A032 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A037 08                         SME_JfaKr_3D:	dc.b 8	
0001A038 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A03D E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A042 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A047 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A04C 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A051 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A056 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A05B 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A060 02                         SME_JfaKr_66:	dc.b 2	
0001A061 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A066 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A06B 0A                         SME_JfaKr_71:	dc.b $A	
0001A06C E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A071 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A076 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A07B F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A080 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A085 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A08A 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A08F 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A094 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A099 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A09E 0A                         SME_JfaKr_A4:	dc.b $A	
0001A09F E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A0A4 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0A9 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A0AE F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A0B3 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A0B8 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0BD 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0C2 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0C7 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A0CC D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A0D2 00                         		even
0001A0D2 00                         		even
0001A0D2                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A0D2                            ; ---------------------------------------------------------------------------
0001A0D2                            ; Object 7D - hidden points at the end of a level
0001A0D2                            ; ---------------------------------------------------------------------------
0001A0D2                            
0001A0D2                            HiddenBonus:
0001A0D2 7000                       		moveq	#0,d0
0001A0D4 1028 0024                  		move.b	obRoutine(a0),d0
0001A0D8 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A0DC 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A0E0                            ; ===========================================================================
0001A0E0 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A0E2 0000                       		dc.w Bonus_Display-Bonus_Index
0001A0E4                            
0001A0E4 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A0E4                            ; ===========================================================================
0001A0E4                            
0001A0E4                            Bonus_Main:	; Routine 0
0001A0E4 7410                       		moveq	#$10,d2
0001A0E6 3602                       		move.w	d2,d3
0001A0E8 D643                       		add.w	d3,d3
0001A0EA 43F8 D000                  		lea	(v_player).w,a1
0001A0EE 3029 0008                  		move.w	obX(a1),d0
0001A0F2 9068 0008                  		sub.w	obX(a0),d0
0001A0F6 D042                       		add.w	d2,d0
0001A0F8 B043                       		cmp.w	d3,d0
0001A0FA 6400                       		bcc.s	bonu_chkdel
0001A0FC 3229 000C                  		move.w	obY(a1),d1
0001A100 9268 000C                  		sub.w	obY(a0),d1
0001A104 D242                       		add.w	d2,d1
0001A106 B243                       		cmp.w	d3,d1
0001A108 6400                       		bcc.s	bonu_chkdel
0001A10A 4A78 FE08                  		tst.w	(v_debuguse).w
0001A10E 6600                       		bne.s	bonu_chkdel
0001A110 4A38 F7CD                  		tst.b	(f_bigring).w
0001A114 6600                       		bne.s	bonu_chkdel
0001A116 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A11A 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A122 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A128 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A12E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A134 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A13A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A140 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A150 7000                       		moveq	#0,d0
0001A152 1028 0028                  		move.b	obSubtype(a0),d0
0001A156 D040                       		add.w	d0,d0
0001A158 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A15C 4EB9 0000 0000             		jsr	(AddPoints).l
0001A162                            
0001A162                            bonu_chkdel:
0001A17E 4E75                       		rts	
0001A180                            
0001A180                            	@delete:
0001A180 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A186                            
0001A186                            ; ===========================================================================
0001A186 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A188 03E8                       		dc.w 1000
0001A18A 0064                       		dc.w 100
0001A18C 000A                       		dc.w 10
0001A18E                            ; ===========================================================================
0001A18E                            
0001A18E                            Bonus_Display:	; Routine 2
0001A18E 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A192 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A1B0 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001A1B6                            
0001A1B6                            Bonus_Display_Delete:	
0001A1B6 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A1B6 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A1BC                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A1BC                            ; ---------------------------------------------------------------------------
0001A1BC                            ; Sprite mappings - hidden points at the end of	a level
0001A1BC                            ; ---------------------------------------------------------------------------
0001A1BC                            Map_Bonus_internal:
0001A1BC 0000                       		dc.w @blank-Map_Bonus_internal
0001A1BE 0000                       		dc.w @10000-Map_Bonus_internal
0001A1C0 0000                       		dc.w @1000-Map_Bonus_internal
0001A1C2 0000                       		dc.w @100-Map_Bonus_internal
0001A1C4 00                         @blank:		dc.b 0
0001A1C5 01                         @10000:		dc.b 1
0001A1C6 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A1CB 01                         @1000:		dc.b 1
0001A1CC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A1D1 01                         @100:		dc.b 1
0001A1D2 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A1D8 00                         		even
0001A1D8 00                         		even
0001A1D8                            
0001A1D8                            		include	"_incObj\8A Credits.asm"
0001A1D8                            ; ---------------------------------------------------------------------------
0001A1D8                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A1D8                            ; ---------------------------------------------------------------------------
0001A1D8                            
0001A1D8                            CreditsText:
0001A1D8 7000                       		moveq	#0,d0
0001A1DA 1028 0024                  		move.b	obRoutine(a0),d0
0001A1DE 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A1E2 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A1E6                            ; ===========================================================================
0001A1E6 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A1E8 0000                       		dc.w Cred_Display-Cred_Index
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            Cred_Main:	; Routine 0
0001A1EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A1EE 317C 0120 0008             		move.w	#$120,obX(a0)
0001A1F4 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A1FA 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A202 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A208 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A20C 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A210 117C 0000 0001             		move.b	#0,obRender(a0)
0001A216 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A21C                            
0001A21C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A222 6600                       		bne.s	Cred_Display	; if not, branch
0001A224                            
0001A224 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A22A 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A230 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A234 6700                       		beq.s	Cred_Display	; if not, branch
0001A236 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A23C 6600                       		bne.s	Cred_Display	; if not, branch
0001A23E 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A244 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A24A 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A250                            ; ===========================================================================
0001A250                            
0001A250                            Cred_Display:	; Routine 2
0001A250 4EF9 0000 F742             		jmp	DisplaySprite
0001A250 4EF9 0000 F742             		jmp	DisplaySprite
0001A256                            Map_Cred:	include	"_maps\Credits.asm"
0001A256                            ; ---------------------------------------------------------------------------
0001A256                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A256                            ; ---------------------------------------------------------------------------
0001A256                            Map_Cred_internal:
0001A256 0000                       		dc.w @staff-Map_Cred_internal
0001A258 0000                       		dc.w @gameplan-Map_Cred_internal
0001A25A 0000                       		dc.w @program-Map_Cred_internal
0001A25C 0000                       		dc.w @character-Map_Cred_internal
0001A25E 0000                       		dc.w @design-Map_Cred_internal
0001A260 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A262 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A264 0000                       		dc.w @thanks-Map_Cred_internal
0001A266 0000                       		dc.w @presentedby-Map_Cred_internal
0001A268 0000                       		dc.w @tryagain-Map_Cred_internal
0001A26A 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A26C 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A26D F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A272 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A277 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A27C F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A281 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A286 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A28B F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A290 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A295 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A29A F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A29F F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A2A4 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A2A9 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A2AE F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A2B3 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A2B4 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A2B9 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A2BE 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A2C3 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A2C8 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A2CD 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A2D2 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A2D7 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A2DC 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A2E1                            
0001A2E1 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A2E6 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A2EB B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A2F0 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A2F5 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A2FA 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A2FB 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A300 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A305 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A30A 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A30F 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A314 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A319 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A31E                            
0001A31E B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A323 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A328 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A32D B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A332 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A337 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A33C B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A341 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A346                            
0001A346 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A34B D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A350                            
0001A350 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A355 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A35A D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A35F D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A364 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A369 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A36E                            
0001A36E F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A373 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A378 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A37D 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A37E 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A383 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A388 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A38D                            
0001A38D B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A392 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A397 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A39C B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A3A1 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A3A6 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A3A7 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A3AC 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A3B1 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A3B6 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A3BB 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A3C0 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A3C5                            
0001A3C5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A3CA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A3CF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A3D4 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A3D9 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A3DE 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A3DF 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A3E4 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A3E9 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A3EE 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A3F3 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A3F8 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A3FD 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A402 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A407 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A40C 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A411                            
0001A411 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A416 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A41B B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A420 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A425 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A42A B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A42F B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A434 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A439                            
0001A439 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A43E D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A443 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A448 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A44D D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A452 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A457 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A45C D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A461 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A466 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A46B 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A46C D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A471 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A476 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A47B D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A480 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A485 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A48A D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A48F D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A494 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A499 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A49E D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A4A3 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A4A8 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A4AD 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A4B2 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A4B7 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A4BC 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A4C1 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A4C6 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A4CB 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A4D0 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A4D5 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A4DA 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A4DF 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A4E0 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A4E5 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A4EA 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A4EF 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A4F4 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A4F9 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A4FE 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A503 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A508                            
0001A508 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A50D B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A512 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A517 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A51C B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A521 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A526                            
0001A526 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A52B D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A530 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A535 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A536 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A53B 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A540 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A545 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A54A 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A54F 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A554 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A559 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A55E 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A563                            
0001A563 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A568 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A56D                            
0001A56D D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A572 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A577 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A57C D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A581 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A586 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A587 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A58C 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A591 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A596 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A59B 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A5A0 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A5A5 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A5AA 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A5AF 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A5B0 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A5B5 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A5BA E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A5BF E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A5C4 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A5C9 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A5CE                            
0001A5CE 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A5D3 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A5D8 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A5DD 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A5E2 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A5E7 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A5EC 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A5F1 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A5F6                            		even
0001A5F6                            		even
0001A5F6                            
0001A5F6                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A5F6                            ; ---------------------------------------------------------------------------
0001A5F6                            ; Object 3D - Eggman (GHZ)
0001A5F6                            ; ---------------------------------------------------------------------------
0001A5F6                            
0001A5F6                            BossGreenHill:
0001A5F6 7000                       		moveq	#0,d0
0001A5F8 1028 0024                  		move.b	obRoutine(a0),d0
0001A5FC 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A600 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A604                            ; ===========================================================================
0001A604 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A606 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A608 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A60A 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A60C                            
0001A60C 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A60E 0401                       		dc.b 4,	1
0001A610 0607                       		dc.b 6,	7
0001A612                            ; ===========================================================================
0001A612                            
0001A612                            BGHZ_Main:	; Routine 0
0001A612 45F9 0001 A60C             		lea	(BGHZ_ObjData).l,a2
0001A618 2248                       		movea.l	a0,a1
0001A61A 7202                       		moveq	#2,d1
0001A61C 6000                       		bra.s	BGHZ_LoadBoss
0001A61E                            ; ===========================================================================
0001A61E                            
0001A61E                            BGHZ_Loop:
0001A61E 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001A624 6600                       		bne.s	loc_17772
0001A626                            
0001A626                            BGHZ_LoadBoss:
0001A626 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A62A 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A62E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A634 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A63A 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A642 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A648 137C 0004 0001             		move.b	#4,obRender(a1)
0001A64E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A654 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A65A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A65E 2348 0034                  		move.l	a0,$34(a1)
0001A662 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A666                            
0001A666                            loc_17772:
0001A666 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A66C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A672 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A678 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A67E                            
0001A67E                            
0001A67E                            BGHZ_ShipMain:	; Routine 2
0001A67E 7000                       		moveq	#0,d0
0001A680 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A684 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A688 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A68C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A692 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001A698 1028 0022                  		move.b	obStatus(a0),d0
0001A69C 0200 0003                  		andi.b	#3,d0
0001A6A0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A6A6 8128 0001                  		or.b	d0,obRender(a0)
0001A6AA 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001A6B0                            ; ===========================================================================
0001A6B0 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A6B2 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A6B4 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A6B6 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A6B8 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A6BA 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A6BC 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A6BE                            ; ===========================================================================
0001A6BE                            
0001A6BE                            BGHZ_ShipStart:
0001A6BE 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A6C4 6100 0000                  		bsr.w	BossMove
0001A6C8 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A6CE 6600                       		bne.s	loc_177E6
0001A6D0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A6D6 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A6DA                            
0001A6DA                            loc_177E6:
0001A6DA 1028 003F                  		move.b	$3F(a0),d0
0001A6DE 4EB9 0000 37AE             		jsr	(CalcSine).l
0001A6E4 EC40                       		asr.w	#6,d0
0001A6E6 D068 0038                  		add.w	$38(a0),d0
0001A6EA 3140 000C                  		move.w	d0,obY(a0)
0001A6EE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A6F4 5428 003F                  		addq.b	#2,$3F(a0)
0001A6F8 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A6FE 6400                       		bcc.s	locret_1784A
0001A700 4A28 0022                  		tst.b	obStatus(a0)
0001A704 6B00                       		bmi.s	loc_1784C
0001A706 4A28 0020                  		tst.b	obColType(a0)
0001A70A 6600                       		bne.s	locret_1784A
0001A70C 4A28 003E                  		tst.b	$3E(a0)
0001A710 6600                       		bne.s	BGHZ_ShipFlash
0001A712 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A722                            
0001A722                            BGHZ_ShipFlash:
0001A722 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A726 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A728 4A51                       		tst.w	(a1)
0001A72A 6600                       		bne.s	loc_1783C
0001A72C 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A730                            
0001A730                            loc_1783C:
0001A730 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A732 5328 003E                  		subq.b	#1,$3E(a0)
0001A736 6600                       		bne.s	locret_1784A
0001A738 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A73E                            
0001A73E                            locret_1784A:
0001A73E 4E75                       		rts	
0001A740                            ; ===========================================================================
0001A740                            
0001A740                            loc_1784C:
0001A740 7064                       		moveq	#100,d0
0001A742 6100 0000                  		bsr.w	AddPoints
0001A746 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A74C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A752 4E75                       		rts	
0001A752 4E75                       		rts	
0001A754                            
0001A754                            ; ---------------------------------------------------------------------------
0001A754                            ; Defeated boss	subroutine
0001A754                            ; ---------------------------------------------------------------------------
0001A754                            
0001A754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A754                            
0001A754                            
0001A754                            BossDefeated:
0001A754 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A758 0200 0007                  		andi.b	#7,d0
0001A75C 6600                       		bne.s	locret_178A2
0001A75E 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001A764 6600                       		bne.s	locret_178A2
0001A766 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A76A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A770 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A776 4EB9 0000 3788             		jsr	(RandomNumber).l
0001A77C 3200                       		move.w	d0,d1
0001A77E 7200                       		moveq	#0,d1
0001A780 1200                       		move.b	d0,d1
0001A782 E409                       		lsr.b	#2,d1
0001A784 0441 0020                  		subi.w	#$20,d1
0001A788 D369 0008                  		add.w	d1,obX(a1)
0001A78C E048                       		lsr.w	#8,d0
0001A78E E608                       		lsr.b	#3,d0
0001A790 D169 000C                  		add.w	d0,obY(a1)
0001A794                            
0001A794                            locret_178A2:
0001A794 4E75                       		rts	
0001A796                            ; End of function BossDefeated
0001A796                            
0001A796                            ; ---------------------------------------------------------------------------
0001A796                            ; Subroutine to	move a boss
0001A796                            ; ---------------------------------------------------------------------------
0001A796                            
0001A796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A796                            
0001A796                            
0001A796                            BossMove:
0001A796 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A79C E188                       		lsl.l	#8,d0
0001A79E D1A8 0030                  		add.l	d0,$30(a0)
0001A7A2 E18A                       		lsl.l	#8,d2
0001A7A4 D5A8 0038                  		add.l	d2,$38(a0)
0001A7A8 4E75                       		rts
0001A7AA                            ; End of function BossMove
0001A7AA                            
0001A7AA                            ; ===========================================================================
0001A7AA                            
0001A7AA                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A7AA                            
0001A7AA                            BGHZ_MakeBall:
0001A7AA 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A7B0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A7B6 6100 FFDE                  		bsr.w	BossMove
0001A7BA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001A7C0 6600                       		bne.s	loc_17916
0001A7C2 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A7C8 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A7CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A7D2 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001A7D8 6600                       		bne.s	loc_17910
0001A7DA 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A7DE 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A7E4 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A7EA 2348 0034                  		move.l	a0,$34(a1)
0001A7EE                            
0001A7EE                            loc_17910:
0001A7EE 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A7F4                            
0001A7F4                            loc_17916:
0001A7F4 6000 FEE4                  		bra.w	loc_177E6
0001A7F8                            ; ===========================================================================
0001A7F8                            
0001A7F8                            BGHZ_ShipMove:
0001A7F8 5368 003C                  		subq.w	#1,$3C(a0)
0001A7FC 6A00                       		bpl.s	BGHZ_Reverse
0001A7FE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A802 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A808 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A80E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001A814 6600                       		bne.s	BGHZ_Reverse
0001A816 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A81C 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A822                            
0001A822                            BGHZ_Reverse:
0001A822 0828 0000 0022             		btst	#0,obStatus(a0)
0001A828 6600                       		bne.s	loc_17950
0001A82A 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A82E                            
0001A82E                            loc_17950:
0001A82E 6000 FEAA                  		bra.w	loc_177E6
0001A832                            ; ===========================================================================
0001A832                            
0001A832                            loc_17954:
0001A832 5368 003C                  		subq.w	#1,$3C(a0)
0001A836 6B00                       		bmi.s	loc_17960
0001A838 6100 FF5C                  		bsr.w	BossMove
0001A83C 6000                       		bra.s	loc_17976
0001A83E                            ; ===========================================================================
0001A83E                            
0001A83E                            loc_17960:
0001A83E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A844 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A84A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A84E 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A854                            
0001A854                            loc_17976:
0001A854 6000 FE84                  		bra.w	loc_177E6
0001A858                            ; ===========================================================================
0001A858                            
0001A858                            loc_1797A:
0001A858 5368 003C                  		subq.w	#1,$3C(a0)
0001A85C 6B00                       		bmi.s	loc_17984
0001A85E 6000 FEF4                  		bra.w	BossDefeated
0001A862                            ; ===========================================================================
0001A862                            
0001A862                            loc_17984:
0001A862 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A868 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A86E 4268 0010                  		clr.w	obVelX(a0)
0001A872 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A876 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A87C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A880 6600                       		bne.s	locret_179AA
0001A882 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A888                            
0001A888                            locret_179AA:
0001A888 4E75                       		rts	
0001A88A                            ; ===========================================================================
0001A88A                            
0001A88A                            loc_179AC:
0001A88A 5268 003C                  		addq.w	#1,$3C(a0)
0001A88E 6700                       		beq.s	loc_179BC
0001A890 6A00                       		bpl.s	loc_179C2
0001A892 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A898 6000                       		bra.s	loc_179EE
0001A89A                            ; ===========================================================================
0001A89A                            
0001A89A                            loc_179BC:
0001A89A 4268 0012                  		clr.w	obVelY(a0)
0001A89E 6000                       		bra.s	loc_179EE
0001A8A0                            ; ===========================================================================
0001A8A0                            
0001A8A0                            loc_179C2:
0001A8A0 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A8A6 6500                       		bcs.s	loc_179DA
0001A8A8 6700                       		beq.s	loc_179E0
0001A8AA 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A8B0 6500                       		bcs.s	loc_179EE
0001A8B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A8B6 6000                       		bra.s	loc_179EE
0001A8B8                            ; ===========================================================================
0001A8B8                            
0001A8B8                            loc_179DA:
0001A8B8 5168 0012                  		subq.w	#8,obVelY(a0)
0001A8BC 6000                       		bra.s	loc_179EE
0001A8BE                            ; ===========================================================================
0001A8BE                            
0001A8BE                            loc_179E0:
0001A8BE 4268 0012                          clr.w    obVelY(a0)
0001A8C2 4A38 FE2D                          tst.b     (v_invinc).w
0001A8C6 6600                               bne.s   @boss_invinc
0001A8C8 4A38 FE2E                          tst.b     (v_shoes).w
0001A8CC 6600                               bne.s   @boss_shoes
0001A8CE                            
0001A8CE 1038 F5C6                          move.b   (v_Saved_music),d0
0001A8D2 6000 0000                          bra.w      @boss_play
0001A8D6                            
0001A8D6                            @boss_invinc:
0001A8D6 103C 0000                          move.b #bgm_Invincible,d0
0001A8DA                            
0001A8DA                            @boss_shoes:
0001A8DA 103C 0000                          move.b #bgm_Ending,d0
0001A8DE                            
0001A8DE                            @boss_play:
0001A8DE 4EB8 0FC6                          jsr PlaySound
0001A8E2                            
0001A8E2                            loc_179EE:
0001A8E2 6100 FEB2                  		bsr.w	BossMove
0001A8E6 6000 FDF2                  		bra.w	loc_177E6
0001A8EA                            ; ===========================================================================
0001A8EA                            
0001A8EA                            loc_179F6:
0001A8EA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A8F0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A8F6 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001A8FC 6700                       		beq.s	loc_17A10
0001A8FE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A902 6000                       		bra.s	loc_17A16
0001A904                            ; ===========================================================================
0001A904                            
0001A904                            loc_17A10:
0001A904 4A28 0001                  		tst.b	obRender(a0)
0001A908 6A00                       		bpl.s	BGHZ_ShipDel
0001A90A                            
0001A90A                            loc_17A16:
0001A90A 6100 FE8A                  		bsr.w	BossMove
0001A90E 6000 FDCA                  		bra.w	loc_177E6
0001A912                            ; ===========================================================================
0001A912                            
0001A912                            BGHZ_ShipDel:
0001A912 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A918                            ; ===========================================================================
0001A918                            
0001A918                            BGHZ_FaceMain:	; Routine 4
0001A918 7000                       		moveq	#0,d0
0001A91A 7201                       		moveq	#1,d1
0001A91C 2268 0034                  		movea.l	$34(a0),a1
0001A920 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A924 5900                       		subq.b	#4,d0
0001A926 6600                       		bne.s	loc_17A3E
0001A928 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001A92E 6600                       		bne.s	loc_17A46
0001A930 7204                       		moveq	#4,d1
0001A932                            
0001A932                            loc_17A3E:
0001A932 5D00                       		subq.b	#6,d0
0001A934 6B00                       		bmi.s	loc_17A46
0001A936 720A                       		moveq	#$A,d1
0001A938 6000                       		bra.s	loc_17A5A
0001A93A                            ; ===========================================================================
0001A93A                            
0001A93A                            loc_17A46:
0001A93A 4A29 0020                  		tst.b	obColType(a1)
0001A93E 6600                       		bne.s	loc_17A50
0001A940 7205                       		moveq	#5,d1
0001A942 6000                       		bra.s	loc_17A5A
0001A944                            ; ===========================================================================
0001A944                            
0001A944                            loc_17A50:
0001A944 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A94A 6500                       		bcs.s	loc_17A5A
0001A94C 7204                       		moveq	#4,d1
0001A94E                            
0001A94E                            loc_17A5A:
0001A94E 1141 001C                  		move.b	d1,obAnim(a0)
0001A952 5500                       		subq.b	#2,d0
0001A954 6600                       		bne.s	BGHZ_FaceDisp
0001A956 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A95C 4A28 0001                  		tst.b	obRender(a0)
0001A960 6A00                       		bpl.s	BGHZ_FaceDel
0001A962                            
0001A962                            BGHZ_FaceDisp:
0001A962 6000                       		bra.s	BGHZ_Display
0001A964                            ; ===========================================================================
0001A964                            
0001A964                            BGHZ_FaceDel:
0001A964 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A96A                            ; ===========================================================================
0001A96A                            
0001A96A                            BGHZ_FlameMain:	; Routine 6
0001A96A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001A970 2268 0034                  		movea.l	$34(a0),a1
0001A974 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001A97A 6600                       		bne.s	loc_17A96
0001A97C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001A982 4A28 0001                  		tst.b	obRender(a0)
0001A986 6A00                       		bpl.s	BGHZ_FlameDel
0001A988 6000                       		bra.s	BGHZ_FlameDisp
0001A98A                            ; ===========================================================================
0001A98A                            
0001A98A                            loc_17A96:
0001A98A 3029 0010                  		move.w	obVelX(a1),d0
0001A98E 6700                       		beq.s	BGHZ_FlameDisp
0001A990 117C 0008 001C             		move.b	#8,obAnim(a0)
0001A996                            
0001A996                            BGHZ_FlameDisp:
0001A996 6000                       		bra.s	BGHZ_Display
0001A998                            ; ===========================================================================
0001A998                            
0001A998                            BGHZ_FlameDel:
0001A998 4EF9 0000 F782             		jmp	(DeleteObject).l
0001A99E                            ; ===========================================================================
0001A99E                            
0001A99E                            BGHZ_Display:
0001A99E 2268 0034                  		movea.l	$34(a0),a1
0001A9A2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001A9A8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001A9AE 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001A9B4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A9BA 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001A9C0 1028 0022                  		move.b	obStatus(a0),d0
0001A9C4 0200 0003                  		andi.b	#3,d0
0001A9C8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A9CE 8128 0001                  		or.b	d0,obRender(a0)
0001A9D2 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001A9D2 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001A9D8                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001A9D8                            ; ---------------------------------------------------------------------------
0001A9D8                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001A9D8                            ; ---------------------------------------------------------------------------
0001A9D8                            
0001A9D8                            BossBall:
0001A9D8 7000                       		moveq	#0,d0
0001A9DA 1028 0024                  		move.b	obRoutine(a0),d0
0001A9DE 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001A9E2 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001A9E6                            ; ===========================================================================
0001A9E6 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001A9E8 0000                       		dc.w GBall_Base-GBall_Index
0001A9EA 0000                       		dc.w GBall_Display2-GBall_Index
0001A9EC 0000                       		dc.w loc_17C68-GBall_Index
0001A9EE 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001A9F0                            ; ===========================================================================
0001A9F0                            
0001A9F0                            GBall_Main:	; Routine 0
0001A9F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A9F4 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001A9FA 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AA00 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AA08 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AA0E 45E8 0028                  		lea	obSubtype(a0),a2
0001AA12 14FC 0000                  		move.b	#0,(a2)+
0001AA16 7205                       		moveq	#5,d1
0001AA18 2248                       		movea.l	a0,a1
0001AA1A 6000                       		bra.s	loc_17B60
0001AA1C                            ; ===========================================================================
0001AA1C                            
0001AA1C                            GBall_MakeLinks:
0001AA1C 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001AA22 6600                       		bne.s	GBall_MakeBall
0001AA24 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AA2A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AA30 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AA34 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AA3A 237C 0000 964A 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AA42 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AA48 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AA4E 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AA52                            
0001AA52                            loc_17B60:
0001AA52 3A09                       		move.w	a1,d5
0001AA54 0445 D000                  		subi.w	#$D000,d5
0001AA58 EC4D                       		lsr.w	#6,d5
0001AA5A 0245 007F                  		andi.w	#$7F,d5
0001AA5E 14C5                       		move.b	d5,(a2)+
0001AA60 137C 0004 0001             		move.b	#4,obRender(a1)
0001AA66 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AA6C 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AA72 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AA78 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AA7C                            
0001AA7C                            GBall_MakeBall:
0001AA7C 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AA82 237C 0000 9BA6 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AA8A 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AA90 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AA96 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AA9C 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AAA2 4E75                       		rts	
0001AAA4                            ; ===========================================================================
0001AAA4                            
0001AAA4 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AAAA                            
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            GBall_Base:	; Routine 2
0001AAAA 47F9 0001 AAA4             		lea	(GBall_PosData).l,a3
0001AAB0 45E8 0028                  		lea	obSubtype(a0),a2
0001AAB4 7C00                       		moveq	#0,d6
0001AAB6 1C1A                       		move.b	(a2)+,d6
0001AAB8                            
0001AAB8                            loc_17BC6:
0001AAB8 7800                       		moveq	#0,d4
0001AABA 181A                       		move.b	(a2)+,d4
0001AABC ED4C                       		lsl.w	#6,d4
0001AABE 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AAC4 2244                       		movea.l	d4,a1
0001AAC6 101B                       		move.b	(a3)+,d0
0001AAC8 B029 003C                  		cmp.b	$3C(a1),d0
0001AACC 6700                       		beq.s	loc_17BE0
0001AACE 5229 003C                  		addq.b	#1,$3C(a1)
0001AAD2                            
0001AAD2                            loc_17BE0:
0001AAD2 51CE FFE4                  		dbf	d6,loc_17BC6
0001AAD6                            
0001AAD6 B029 003C                  		cmp.b	$3C(a1),d0
0001AADA 6600                       		bne.s	loc_17BFA
0001AADC 2268 0034                  		movea.l	$34(a0),a1
0001AAE0 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AAE6 6600                       		bne.s	loc_17BFA
0001AAE8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AAEC                            
0001AAEC                            loc_17BFA:
0001AAEC 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AAF2 6700                       		beq.s	GBall_Display
0001AAF4 5268 0032                  		addq.w	#1,$32(a0)
0001AAF8                            
0001AAF8                            GBall_Display:
0001AAF8 6100 0000                  		bsr.w	sub_17C2A
0001AAFC 1028 0026                  		move.b	obAngle(a0),d0
0001AB00 4EB9 0000 95BC             		jsr	(Swing_Move2).l
0001AB06 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001AB0C                            ; ===========================================================================
0001AB0C                            
0001AB0C                            GBall_Display2:	; Routine 4
0001AB0C 6100 0000                  		bsr.w	sub_17C2A
0001AB10 4EB9 0000 957C             		jsr	(Obj48_Move).l
0001AB16 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001AB1C                            
0001AB1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AB1C                            
0001AB1C                            
0001AB1C                            sub_17C2A:
0001AB1C 2268 0034                  		movea.l	$34(a0),a1
0001AB20 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AB26 6400                       		bcc.s	loc_17C3C
0001AB28 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AB2E                            
0001AB2E                            loc_17C3C:
0001AB2E 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AB34 3029 000C                  		move.w	obY(a1),d0
0001AB38 D068 0032                  		add.w	$32(a0),d0
0001AB3C 3140 0038                  		move.w	d0,$38(a0)
0001AB40 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AB46 4A29 0022                  		tst.b	obStatus(a1)
0001AB4A 6A00                       		bpl.s	locret_17C66
0001AB4C 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AB50 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB56                            
0001AB56                            locret_17C66:
0001AB56 4E75                       		rts	
0001AB58                            ; End of function sub_17C2A
0001AB58                            
0001AB58                            ; ===========================================================================
0001AB58                            
0001AB58                            loc_17C68:	; Routine 6
0001AB58 2268 0034                  		movea.l	$34(a0),a1
0001AB5C 4A29 0022                  		tst.b	obStatus(a1)
0001AB60 6A00                       		bpl.s	GBall_Display3
0001AB62 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AB66 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB6C                            
0001AB6C                            GBall_Display3:
0001AB6C 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001AB72                            ; ===========================================================================
0001AB72                            
0001AB72                            GBall_ChkVanish:; Routine 8
0001AB72 7000                       		moveq	#0,d0
0001AB74 4A28 001A                  		tst.b	obFrame(a0)
0001AB78 6600                       		bne.s	GBall_Vanish
0001AB7A 5200                       		addq.b	#1,d0
0001AB7C                            
0001AB7C                            GBall_Vanish:
0001AB7C 1140 001A                  		move.b	d0,obFrame(a0)
0001AB80 2268 0034                  		movea.l	$34(a0),a1
0001AB84 4A29 0022                  		tst.b	obStatus(a1)
0001AB88 6A00                       		bpl.s	GBall_Display4
0001AB8A 117C 0000 0020             		move.b	#0,obColType(a0)
0001AB90 6100 FBC2                  		bsr.w	BossDefeated
0001AB94 5328 003C                  		subq.b	#1,$3C(a0)
0001AB98 6A00                       		bpl.s	GBall_Display4
0001AB9A 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AB9E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABA4                            
0001ABA4                            GBall_Display4:
0001ABA4 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001ABA4 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001ABAA                            		include	"_anim\Eggman.asm"
0001ABAA                            ; ---------------------------------------------------------------------------
0001ABAA                            ; Animation script - Eggman (bosses)
0001ABAA                            ; ---------------------------------------------------------------------------
0001ABAA 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ABAC 0000                       		dc.w @facenormal1-Ani_Eggman
0001ABAE 0000                       		dc.w @facenormal2-Ani_Eggman
0001ABB0 0000                       		dc.w @facenormal3-Ani_Eggman
0001ABB2 0000                       		dc.w @facelaugh-Ani_Eggman
0001ABB4 0000                       		dc.w @facehit-Ani_Eggman
0001ABB6 0000                       		dc.w @facepanic-Ani_Eggman
0001ABB8 0000                       		dc.w @blank-Ani_Eggman
0001ABBA 0000                       		dc.w @flame1-Ani_Eggman
0001ABBC 0000                       		dc.w @flame2-Ani_Eggman
0001ABBE 0000                       		dc.w @facedefeat-Ani_Eggman
0001ABC0 0000                       		dc.w @escapeflame-Ani_Eggman
0001ABC2 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ABC6 00                         		even
0001ABC6 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001ABCA                            		even
0001ABCA 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001ABCE                            		even
0001ABCE 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001ABD2                            		even
0001ABD2 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001ABD6                            		even
0001ABD6 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001ABDA                            		even
0001ABDA 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001ABDE                            		even
0001ABDE 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001ABE2 00                         		even
0001ABE2 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001ABE6                            		even
0001ABE6 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001ABEA                            		even
0001ABEA 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001ABEE 00                         		even
0001ABEE 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001ABFA 00                         		even
0001ABFA 00                         		even
0001ABFA                            Map_Eggman:	include	"_maps\Eggman.asm"
0001ABFA                            ; --------------------------------------------------------------------------------
0001ABFA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001ABFA                            ; --------------------------------------------------------------------------------
0001ABFA                            
0001ABFA                            SME_F_pyS:	
0001ABFA 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001ABFE 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AC02 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AC06 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AC0A 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AC0E 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AC12 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AC14 05                         SME_F_pyS_1A:	dc.b 5	
0001AC15 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AC1A FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AC1F FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AC24 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AC29 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AC2E 03                         SME_F_pyS_34:	dc.b 3	
0001AC2F E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC34 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AC39 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC3E 03                         SME_F_pyS_44:	dc.b 3	
0001AC3F E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC44 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AC49 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC4E 04                         SME_F_pyS_54:	dc.b 4	
0001AC4F E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AC54 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AC59 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AC5E EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC63 04                         SME_F_pyS_69:	dc.b 4	
0001AC64 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AC69 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AC6E EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AC73 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC78 04                         SME_F_pyS_7E:	dc.b 4	
0001AC79 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC7E EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AC83 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC88 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC8D 04                         SME_F_pyS_93:	dc.b 4	
0001AC8E E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AC93 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC98 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AC9D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ACA2 07                         SME_F_pyS_A8:	dc.b 7	
0001ACA3 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001ACA8 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001ACAD EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001ACB2 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001ACB7 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001ACBC F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001ACC1 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACC6 01                         SME_F_pyS_CC:	dc.b 1	
0001ACC7 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001ACCC 01                         SME_F_pyS_D2:	dc.b 1	
0001ACCD 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001ACD2 00                         SME_F_pyS_D8:	dc.b 0	
0001ACD3 02                         SME_F_pyS_D9:	dc.b 2	
0001ACD4 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001ACD9 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001ACDE 02                         SME_F_pyS_E4:	dc.b 2	
0001ACDF F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001ACE4 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001ACEA 00                         		even
0001ACEA 00                         		even
0001ACEA                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001ACEA                            ; ---------------------------------------------------------------------------
0001ACEA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001ACEA                            ; ---------------------------------------------------------------------------
0001ACEA                            Map_BossItems_internal:
0001ACEA 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001ACEC 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001ACEE 0000                       		dc.w @cross-Map_BossItems_internal
0001ACF0 0000                       		dc.w @widepipe-Map_BossItems_internal
0001ACF2 0000                       		dc.w @pipe-Map_BossItems_internal
0001ACF4 0000                       		dc.w @spike-Map_BossItems_internal
0001ACF6 0000                       		dc.w @legmask-Map_BossItems_internal
0001ACF8 0000                       		dc.w @legs-Map_BossItems_internal
0001ACFA 01                         @chainanchor1:	dc.b 1
0001ACFB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AD00 02                         @chainanchor2:	dc.b 2
0001AD01 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AD06 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AD0C 00                         		even
0001AD0C 01                         @cross:		dc.b 1
0001AD0D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AD12 01                         @widepipe:	dc.b 1
0001AD13 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AD18 01                         @pipe:		dc.b 1
0001AD19 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AD1E 04                         @spike:		dc.b 4
0001AD1F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AD24 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AD29 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AD2E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AD34 00                         		even
0001AD34 02                         @legmask:	dc.b 2
0001AD35 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AD3A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AD40 00                         		even
0001AD40 02                         @legs:		dc.b 2
0001AD41 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AD46 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AD4C 00                         		even
0001AD4C 00                         		even
0001AD4C                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AD4C                            ; ---------------------------------------------------------------------------
0001AD4C                            ; Object 77 - Eggman (LZ)
0001AD4C                            ; ---------------------------------------------------------------------------
0001AD4C                            
0001AD4C                            BossLabyrinth:
0001AD4C 7000                       		moveq	#0,d0
0001AD4E 1028 0024                  		move.b	obRoutine(a0),d0
0001AD52 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AD56 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AD5A                            ; ===========================================================================
0001AD5A 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AD5C 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AD5E 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AD60 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AD62                            
0001AD62 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AD64 0401                       		dc.b 4,	1
0001AD66 0607                       		dc.b 6,	7
0001AD68                            ; ===========================================================================
0001AD68                            
0001AD68                            Obj77_Main:	; Routine 0
0001AD68 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AD6E 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AD74 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AD7A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AD80 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AD86 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AD8C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AD92 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AD96 2248                       		movea.l	a0,a1
0001AD98 7202                       		moveq	#2,d1
0001AD9A 6000                       		bra.s	Obj77_LoadBoss
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            Obj77_Loop:
0001AD9C 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001ADA2 6600                       		bne.s	Obj77_ShipMain
0001ADA4 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001ADA8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001ADAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001ADB4                            
0001ADB4                            Obj77_LoadBoss:
0001ADB4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001ADBA 4229 0025                  		clr.b	ob2ndRout(a1)
0001ADBE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001ADC2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001ADC6 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001ADCC 237C 0001 ABFA 0004        		move.l	#Map_Eggman,obMap(a1)
0001ADD4 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001ADDA 137C 0004 0001             		move.b	#4,obRender(a1)
0001ADE0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001ADE6 2348 0034                  		move.l	a0,$34(a1)
0001ADEA 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001ADEE                            
0001ADEE                            Obj77_ShipMain:	; Routine 2
0001ADEE 43F8 D000                  		lea	(v_player).w,a1
0001ADF2 7000                       		moveq	#0,d0
0001ADF4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001ADF8 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001ADFC 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AE00 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001AE06 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001AE0C 7003                       		moveq	#3,d0
0001AE0E C028 0022                  		and.b	obStatus(a0),d0
0001AE12 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AE18 8128 0001                  		or.b	d0,obRender(a0)
0001AE1C 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001AE22                            ; ===========================================================================
0001AE22 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001AE26 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001AE2A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001AE2E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001AE32                            ; ===========================================================================
0001AE32                            
0001AE32                            loc_17F1E:
0001AE32 3029 0008                  		move.w	obX(a1),d0
0001AE36 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001AE3A 6500                       		bcs.s	loc_17F38
0001AE3C 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AE42 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001AE48 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AE4C                            
0001AE4C                            loc_17F38:
0001AE4C 6100 F948                  		bsr.w	BossMove
0001AE50 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AE56 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AE5C                            
0001AE5C                            loc_17F48:
0001AE5C 4A28 003D                  		tst.b	$3D(a0)
0001AE60 6600                       		bne.s	loc_17F8E
0001AE62 4A28 0022                  		tst.b	obStatus(a0)
0001AE66 6B00                       		bmi.s	loc_17F92
0001AE68 4A28 0020                  		tst.b	obColType(a0)
0001AE6C 6600                       		bne.s	locret_17F8C
0001AE6E 4A28 003E                  		tst.b	$3E(a0)
0001AE72 6600                       		bne.s	loc_17F70
0001AE74 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AE84                            
0001AE84                            loc_17F70:
0001AE84 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AE88 7000                       		moveq	#0,d0
0001AE8A 4A51                       		tst.w	(a1)
0001AE8C 6600                       		bne.s	loc_17F7E
0001AE8E 303C 0EEE                  		move.w	#cWhite,d0
0001AE92                            
0001AE92                            loc_17F7E:
0001AE92 3280                       		move.w	d0,(a1)
0001AE94 5328 003E                  		subq.b	#1,$3E(a0)
0001AE98 6600                       		bne.s	locret_17F8C
0001AE9A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AEA0                            
0001AEA0                            locret_17F8C:
0001AEA0 4E75                       		rts	
0001AEA2                            ; ===========================================================================
0001AEA2                            
0001AEA2                            loc_17F8E:
0001AEA2 6000 F8B0                  		bra.w	BossDefeated
0001AEA6                            ; ===========================================================================
0001AEA6                            
0001AEA6                            loc_17F92:
0001AEA6 7064                       		moveq	#100,d0
0001AEA8 6100 0000                  		bsr.w	AddPoints
0001AEAC 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AEB2 4E75                       		rts	
0001AEB4                            ; ===========================================================================
0001AEB4                            
0001AEB4                            loc_17FA0:
0001AEB4 70FE                       		moveq	#-2,d0
0001AEB6 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AEBC 6500                       		bcs.s	loc_17FB6
0001AEBE 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AEC4 4268 0010                  		clr.w	obVelX(a0)
0001AEC8 5240                       		addq.w	#1,d0
0001AECA                            
0001AECA                            loc_17FB6:
0001AECA 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AED0 6E00                       		bgt.s	loc_17FCA
0001AED2 317C 0500 0038             		move.w	#$500,$38(a0)
0001AED8 4268 0012                  		clr.w	obVelY(a0)
0001AEDC 5240                       		addq.w	#1,d0
0001AEDE                            
0001AEDE                            loc_17FCA:
0001AEDE 6600                       		bne.s	loc_17FDC
0001AEE0 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AEE6 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AEEC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEF0                            
0001AEF0                            loc_17FDC:
0001AEF0 6000 FF5A                  		bra.w	loc_17F38
0001AEF4                            ; ===========================================================================
0001AEF4                            
0001AEF4                            loc_17FE0:
0001AEF4 70FE                       		moveq	#-2,d0
0001AEF6 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AEFC 6500                       		bcs.s	loc_17FF6
0001AEFE 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AF04 4268 0010                  		clr.w	obVelX(a0)
0001AF08 5240                       		addq.w	#1,d0
0001AF0A                            
0001AF0A                            loc_17FF6:
0001AF0A 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AF10 6E00                       		bgt.s	loc_1800A
0001AF12 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AF18 4268 0012                  		clr.w	obVelY(a0)
0001AF1C 5240                       		addq.w	#1,d0
0001AF1E                            
0001AF1E                            loc_1800A:
0001AF1E 6600                       		bne.s	loc_1801A
0001AF20 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AF26 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF2A 4228 003F                  		clr.b	$3F(a0)
0001AF2E                            
0001AF2E                            loc_1801A:
0001AF2E 6000 FF1C                  		bra.w	loc_17F38
0001AF32                            ; ===========================================================================
0001AF32                            
0001AF32                            loc_1801E:
0001AF32 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AF38 6E00                       		bgt.s	loc_1804E
0001AF3A 317C 0100 0038             		move.w	#$100,$38(a0)
0001AF40 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AF46 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AF4C 4A28 003D                  		tst.b	$3D(a0)
0001AF50 6700                       		beq.s	loc_18046
0001AF52 E1E8 0010                  		asl	obVelX(a0)
0001AF56 E1E8 0012                  		asl	obVelY(a0)
0001AF5A                            
0001AF5A                            loc_18046:
0001AF5A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF5E 6000 FEEC                  		bra.w	loc_17F38
0001AF62                            ; ===========================================================================
0001AF62                            
0001AF62                            loc_1804E:
0001AF62 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AF68 5428 003F                  		addq.b	#2,$3F(a0)
0001AF6C 1028 003F                  		move.b	$3F(a0),d0
0001AF70 4EB9 0000 37AE             		jsr	(CalcSine).l
0001AF76 4A41                       		tst.w	d1
0001AF78 6A00                       		bpl.s	loc_1806C
0001AF7A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AF80                            
0001AF80                            loc_1806C:
0001AF80 E840                       		asr.w	#4,d0
0001AF82 4840                       		swap	d0
0001AF84 4240                       		clr.w	d0
0001AF86 D0A8 0030                  		add.l	$30(a0),d0
0001AF8A 4840                       		swap	d0
0001AF8C 3140 0008                  		move.w	d0,obX(a0)
0001AF90 3028 0012                  		move.w	obVelY(a0),d0
0001AF94 3238 D00C                  		move.w	(v_player+obY).w,d1
0001AF98 9268 000C                  		sub.w	obY(a0),d1
0001AF9C 6500                       		bcs.s	loc_180A2
0001AF9E 0441 0048                  		subi.w	#$48,d1
0001AFA2 6500                       		bcs.s	loc_180A2
0001AFA4 E240                       		asr.w	#1,d0
0001AFA6 0441 0028                  		subi.w	#$28,d1
0001AFAA 6500                       		bcs.s	loc_180A2
0001AFAC E240                       		asr.w	#1,d0
0001AFAE 0441 0028                  		subi.w	#$28,d1
0001AFB2 6500                       		bcs.s	loc_180A2
0001AFB4 7000                       		moveq	#0,d0
0001AFB6                            
0001AFB6                            loc_180A2:
0001AFB6 48C0                       		ext.l	d0
0001AFB8 E180                       		asl.l	#8,d0
0001AFBA 4A28 003D                  		tst.b	$3D(a0)
0001AFBE 6700                       		beq.s	loc_180AE
0001AFC0 D080                       		add.l	d0,d0
0001AFC2                            
0001AFC2                            loc_180AE:
0001AFC2 D1A8 0038                  		add.l	d0,$38(a0)
0001AFC6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AFCC 6000 FE8E                  		bra.w	loc_17F48
0001AFD0                            ; ===========================================================================
0001AFD0                            
0001AFD0                            loc_180BC:
0001AFD0 70FE                       		moveq	#-2,d0
0001AFD2 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001AFD8 6500                       		bcs.s	loc_180D2
0001AFDA 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001AFE0 4268 0010                  		clr.w	obVelX(a0)
0001AFE4 5240                       		addq.w	#1,d0
0001AFE6                            
0001AFE6                            loc_180D2:
0001AFE6 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001AFEC 6E00                       		bgt.s	loc_180E6
0001AFEE 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001AFF4 4268 0012                  		clr.w	obVelY(a0)
0001AFF8 5240                       		addq.w	#1,d0
0001AFFA                            
0001AFFA                            loc_180E6:
0001AFFA 6600                       		bne.s	loc_180F2
0001AFFC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B000 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B006                            
0001B006                            loc_180F2:
0001B006 6000 FE44                  		bra.w	loc_17F38
0001B00A                            ; ===========================================================================
0001B00A                            
0001B00A                            loc_180F6:
0001B00A 4A28 003D                  		tst.b	$3D(a0)
0001B00E 6600                       		bne.s	loc_18112
0001B010 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B016 6D00                       		blt.s	loc_18126
0001B018 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B01E 6E00                       		bgt.s	loc_18126
0001B020 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B026                            
0001B026                            loc_18112:
0001B026 4A38 FE2D                          tst.b     (v_invinc).w
0001B02A 6600                               bne.s   @boss_invinc
0001B02C                            
0001B02C 1038 F5C6                          move.b   (v_Saved_music),d0
0001B030 6000 0000                          bra.w      @boss_play
0001B034                            
0001B034                            @boss_invinc:
0001B034 103C 0000                          move.b #bgm_Invincible,d0
0001B038                            
0001B038                            @boss_play:
0001B038 4EB8 0FC6                          jsr PlaySound
0001B03C 4238 F7AA                          clr.b    (f_lockscreen).w
0001B040 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B046 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B04A                            
0001B04A                            loc_18126:
0001B04A 6000 FE00                  		bra.w	loc_17F38
0001B04E                            ; ===========================================================================
0001B04E                            
0001B04E                            loc_1812A:
0001B04E 4A28 003D                  		tst.b	$3D(a0)
0001B052 6600                       		bne.s	loc_18136
0001B054 5328 003C                  		subq.b	#1,$3C(a0)
0001B058 6600                       		bne.s	loc_1814E
0001B05A                            
0001B05A                            loc_18136:
0001B05A 4228 003C                  		clr.b	$3C(a0)
0001B05E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B064 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B06A 4228 003D                  		clr.b	$3D(a0)
0001B06E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B072                            
0001B072                            loc_1814E:
0001B072 6000 FDD8                  		bra.w	loc_17F38
0001B076                            ; ===========================================================================
0001B076                            
0001B076                            loc_18152:
0001B076 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B07C 6400                       		bcc.s	loc_18160
0001B07E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B082 6000                       		bra.s	loc_18166
0001B084                            ; ===========================================================================
0001B084                            
0001B084                            loc_18160:
0001B084 4A28 0001                  		tst.b	obRender(a0)
0001B088 6A00                       		bpl.s	Obj77_ShipDel
0001B08A                            
0001B08A                            loc_18166:
0001B08A 6000 FDC0                  		bra.w	loc_17F38
0001B08E                            ; ===========================================================================
0001B08E                            
0001B08E                            Obj77_ShipDel:
0001B08E 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B094                            ; ===========================================================================
0001B094                            
0001B094                            Obj77_FaceMain:	; Routine 4
0001B094 2268 0034                  		movea.l	$34(a0),a1
0001B098 1011                       		move.b	(a1),d0
0001B09A B010                       		cmp.b	(a0),d0
0001B09C 6600                       		bne.s	Obj77_FaceDel
0001B09E 7000                       		moveq	#0,d0
0001B0A0 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B0A4 7201                       		moveq	#1,d1
0001B0A6 4A28 003D                  		tst.b	$3D(a0)
0001B0AA 6700                       		beq.s	loc_1818C
0001B0AC 720A                       		moveq	#$A,d1
0001B0AE 6000                       		bra.s	loc_181A0
0001B0B0                            ; ===========================================================================
0001B0B0                            
0001B0B0                            loc_1818C:
0001B0B0 4A29 0020                  		tst.b	obColType(a1)
0001B0B4 6600                       		bne.s	loc_18196
0001B0B6 7205                       		moveq	#5,d1
0001B0B8 6000                       		bra.s	loc_181A0
0001B0BA                            ; ===========================================================================
0001B0BA                            
0001B0BA                            loc_18196:
0001B0BA 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B0C0 6500                       		bcs.s	loc_181A0
0001B0C2 7204                       		moveq	#4,d1
0001B0C4                            
0001B0C4                            loc_181A0:
0001B0C4 1141 001C                  		move.b	d1,obAnim(a0)
0001B0C8 0C00 000E                  		cmpi.b	#$E,d0
0001B0CC 6600                       		bne.s	loc_181B6
0001B0CE 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B0D4 4A28 0001                  		tst.b	obRender(a0)
0001B0D8 6A00                       		bpl.s	Obj77_FaceDel
0001B0DA                            
0001B0DA                            loc_181B6:
0001B0DA 6000                       		bra.s	Obj77_Display
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            Obj77_FaceDel:
0001B0DC 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B0E2                            ; ===========================================================================
0001B0E2                            
0001B0E2                            Obj77_FlameMain:; Routine 6
0001B0E2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B0E8 2268 0034                  		movea.l	$34(a0),a1
0001B0EC 1011                       		move.b	(a1),d0
0001B0EE B010                       		cmp.b	(a0),d0
0001B0F0 6600                       		bne.s	Obj77_FlameDel
0001B0F2 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B0F8 6600                       		bne.s	loc_181F0
0001B0FA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B100 4A28 0001                  		tst.b	1(a0)
0001B104 6A00                       		bpl.s	Obj77_FlameDel
0001B106 6000                       		bra.s	loc_181F0
0001B108                            ; ===========================================================================
0001B108 4A69 0010                  		tst.w	obVelX(a1)
0001B10C 6700                       		beq.s	loc_181F0
0001B10E 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B114                            
0001B114                            loc_181F0:
0001B114 6000                       		bra.s	Obj77_Display
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            Obj77_FlameDel:
0001B116 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B11C                            ; ===========================================================================
0001B11C                            
0001B11C                            Obj77_Display:
0001B11C 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001B122 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001B128 2268 0034                  		movea.l	$34(a0),a1
0001B12C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B132 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B138 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B13E 7003                       		moveq	#3,d0
0001B140 C028 0022                  		and.b	obStatus(a0),d0
0001B144 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B14A 8128 0001                  		or.b	d0,obRender(a0)
0001B14E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001B14E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001B154                            		include	"_incObj\73 Boss - Marble.asm"
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            ; Object 73 - Eggman (MZ)
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            
0001B154                            BossMarble:
0001B154 7000                       		moveq	#0,d0
0001B156 1028 0024                  		move.b	obRoutine(a0),d0
0001B15A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B15E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B162                            ; ===========================================================================
0001B162 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B164 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B166 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B168 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B16A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B16C                            
0001B16C 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B170 0401 0200                  		dc.b 4,	1, $02, $00
0001B174 0607 0200                  		dc.b 6,	7, $02, $00
0001B178 0800 0180                  		dc.b 8,	0, $01, $80
0001B17C                            ; ===========================================================================
0001B17C                            
0001B17C                            Obj73_Main:	; Routine 0
0001B17C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B182 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B188 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B18E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B194 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B198 2248                       		movea.l	a0,a1
0001B19A 7203                       		moveq	#3,d1
0001B19C 6000                       		bra.s	Obj73_LoadBoss
0001B19E                            ; ===========================================================================
0001B19E                            
0001B19E                            Obj73_Loop:
0001B19E 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001B1A4 6600                       		bne.s	Obj73_ShipMain
0001B1A6 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B1AA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B1B0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B1B6                            
0001B1B6                            Obj73_LoadBoss:
0001B1B6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B1BC 4229 0025                  		clr.b	ob2ndRout(a1)
0001B1C0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B1C4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B1C8 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B1CC 237C 0001 ABFA 0004        		move.l	#Map_Eggman,obMap(a1)
0001B1D4 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B1DA 137C 0004 0001             		move.b	#4,obRender(a1)
0001B1E0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B1E6 2348 0034                  		move.l	a0,$34(a1)
0001B1EA 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B1EE                            
0001B1EE                            Obj73_ShipMain:	; Routine 2
0001B1EE 7000                       		moveq	#0,d0
0001B1F0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B1F4 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B1F8 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B1FC 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001B202 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001B208 7003                       		moveq	#3,d0
0001B20A C028 0022                  		and.b	obStatus(a0),d0
0001B20E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B214 8128 0001                  		or.b	d0,obRender(a0)
0001B218 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001B21E                            ; ===========================================================================
0001B21E 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B220 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B222 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B224 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B226 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B228                            ; ===========================================================================
0001B228                            
0001B228                            loc_18302:
0001B228 1028 003F                  		move.b	$3F(a0),d0
0001B22C 5428 003F                  		addq.b	#2,$3F(a0)
0001B230 4EB9 0000 37AE             		jsr	(CalcSine).l
0001B236 E440                       		asr.w	#2,d0
0001B238 3140 0012                  		move.w	d0,obVelY(a0)
0001B23C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B242 6100 F552                  		bsr.w	BossMove
0001B246 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B24C 6600                       		bne.s	loc_18334
0001B24E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B252 4228 0028                  		clr.b	obSubtype(a0)
0001B256 42A8 0010                  		clr.l	obVelX(a0)
0001B25A                            
0001B25A                            loc_18334:
0001B25A 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B260 1140 0034                  		move.b	d0,$34(a0)
0001B264                            
0001B264                            loc_1833E:
0001B264 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B26A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B270 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B276 6400                       		bcc.s	locret_18390
0001B278 4A28 0022                  		tst.b	obStatus(a0)
0001B27C 6B00                       		bmi.s	loc_18392
0001B27E 4A28 0020                  		tst.b	obColType(a0)
0001B282 6600                       		bne.s	locret_18390
0001B284 4A28 003E                  		tst.b	$3E(a0)
0001B288 6600                       		bne.s	loc_18374
0001B28A 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B29A                            
0001B29A                            loc_18374:
0001B29A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B29E 7000                       		moveq	#0,d0
0001B2A0 4A51                       		tst.w	(a1)
0001B2A2 6600                       		bne.s	loc_18382
0001B2A4 303C 0EEE                  		move.w	#cWhite,d0
0001B2A8                            
0001B2A8                            loc_18382:
0001B2A8 3280                       		move.w	d0,(a1)
0001B2AA 5328 003E                  		subq.b	#1,$3E(a0)
0001B2AE 6600                       		bne.s	locret_18390
0001B2B0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B2B6                            
0001B2B6                            locret_18390:
0001B2B6 4E75                       		rts	
0001B2B8                            ; ===========================================================================
0001B2B8                            
0001B2B8                            loc_18392:
0001B2B8 7064                       		moveq	#100,d0
0001B2BA 6100 0000                  		bsr.w	AddPoints
0001B2BE 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B2C4 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B2CA 4268 0010                  		clr.w	obVelX(a0)
0001B2CE 4E75                       		rts	
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            loc_183AA:
0001B2D0 7000                       		moveq	#0,d0
0001B2D2 1028 0028                  		move.b	obSubtype(a0),d0
0001B2D6 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B2DA 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B2DE 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B2E4 6000 FF7E                  		bra.w	loc_1833E
0001B2E8                            ; ===========================================================================
0001B2E8 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B2EA 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B2EC 0000                       		dc.w loc_183CA-off_183C2
0001B2EE 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B2F0                            ; ===========================================================================
0001B2F0                            
0001B2F0                            loc_183CA:
0001B2F0 4A68 0010                  		tst.w	obVelX(a0)
0001B2F4 6600                       		bne.s	loc_183FE
0001B2F6 7040                       		moveq	#$40,d0
0001B2F8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B2FE 6700                       		beq.s	loc_183E6
0001B300 6500                       		bcs.s	loc_183DE
0001B302 4440                       		neg.w	d0
0001B304                            
0001B304                            loc_183DE:
0001B304 3140 0012                  		move.w	d0,obVelY(a0)
0001B308 6000 F48C                  		bra.w	BossMove
0001B30C                            ; ===========================================================================
0001B30C                            
0001B30C                            loc_183E6:
0001B30C 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B312 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B318 0828 0000 0022             		btst	#0,obStatus(a0)
0001B31E 6600                       		bne.s	loc_183FE
0001B320 4468 0010                  		neg.w	obVelX(a0)
0001B324                            
0001B324                            loc_183FE:
0001B324 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B32A 6400                       		bcc.s	Obj73_MakeLava
0001B32C 6100 F468                  		bsr.w	BossMove
0001B330 5968 0012                  		subq.w	#4,obVelY(a0)
0001B334                            
0001B334                            Obj73_MakeLava:
0001B334 5328 0034                  		subq.b	#1,$34(a0)
0001B338 6400                       		bcc.s	loc_1845C
0001B33A 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001B340 6600                       		bne.s	loc_1844A
0001B342 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B346 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B34C 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B352 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B358 80FC 0050                  		divu.w	#$50,d0
0001B35C 4840                       		swap	d0
0001B35E 0640 1878                  		addi.w	#$1878,d0
0001B362 3340 0008                  		move.w	d0,obX(a1)
0001B366 EE09                       		lsr.b	#7,d1
0001B368 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B36E                            
0001B36E                            loc_1844A:
0001B36E 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B374 0200 001F                  		andi.b	#$1F,d0
0001B378 0600 0040                  		addi.b	#$40,d0
0001B37C 1140 0034                  		move.b	d0,$34(a0)
0001B380                            
0001B380                            loc_1845C:
0001B380 0828 0000 0022             		btst	#0,obStatus(a0)
0001B386 6700                       		beq.s	loc_18474
0001B388 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B38E 6D00                       		blt.s	locret_1849C
0001B390 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B396 6000                       		bra.s	loc_18482
0001B398                            ; ===========================================================================
0001B398                            
0001B398                            loc_18474:
0001B398 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B39E 6E00                       		bgt.s	locret_1849C
0001B3A0 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B3A6                            
0001B3A6                            loc_18482:
0001B3A6 4268 0010                  		clr.w	obVelX(a0)
0001B3AA 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B3B0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B3B6 6400                       		bcc.s	loc_18498
0001B3B8 4468 0012                  		neg.w	obVelY(a0)
0001B3BC                            
0001B3BC                            loc_18498:
0001B3BC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B3C0                            
0001B3C0                            locret_1849C:
0001B3C0 4E75                       		rts	
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            Obj73_MakeLava2:
0001B3C2 6100 F3D2                  		bsr.w	BossMove
0001B3C6 3028 0038                  		move.w	$38(a0),d0
0001B3CA 0440 022C                  		subi.w	#$22C,d0
0001B3CE 6E00                       		bgt.s	locret_184F4
0001B3D0 303C 022C                  		move.w	#$22C,d0
0001B3D4 4A68 0012                  		tst.w	obVelY(a0)
0001B3D8 6700                       		beq.s	loc_184EA
0001B3DA 4268 0012                  		clr.w	obVelY(a0)
0001B3DE 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B3E4 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B3EA 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001B3F0 6600                       		bne.s	loc_184EA
0001B3F2 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B3F8 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B3FE 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B404 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B408 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B40E                            
0001B40E                            loc_184EA:
0001B40E 5368 003C                  		subq.w	#1,$3C(a0)
0001B412 6600                       		bne.s	locret_184F4
0001B414 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B418                            
0001B418                            locret_184F4:
0001B418 4E75                       		rts	
0001B41A                            ; ===========================================================================
0001B41A                            
0001B41A                            loc_184F6:
0001B41A 5368 003C                  		subq.w	#1,$3C(a0)
0001B41E 6B00                       		bmi.s	loc_18500
0001B420 6000 F332                  		bra.w	BossDefeated
0001B424                            ; ===========================================================================
0001B424                            
0001B424                            loc_18500:
0001B424 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B42A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B430 4268 0010                  		clr.w	obVelX(a0)
0001B434 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B438 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B43E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B442 6600                       		bne.s	locret_1852A
0001B444 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B44A 4268 0012                  		clr.w	obVelY(a0)
0001B44E                            
0001B44E                            locret_1852A:
0001B44E 4E75                       		rts	
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            loc_1852C:
0001B450 5268 003C                  		addq.w	#1,$3C(a0)
0001B454 6700                       		beq.s	loc_18544
0001B456 6A00                       		bpl.s	loc_1854E
0001B458 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B45E 6400                       		bcc.s	loc_18544
0001B460 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B466 6000                       		bra.s	loc_1857A
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            loc_18544:
0001B468 4268 0012                  		clr.w	obVelY(a0)
0001B46C 4268 003C                  		clr.w	$3C(a0)
0001B470 6000                       		bra.s	loc_1857A
0001B472                            ; ===========================================================================
0001B472                            
0001B472                            loc_1854E:
0001B472 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B478 6500                       		bcs.s	loc_18566
0001B47A 6700                       		beq.s	loc_1856C
0001B47C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B482 6500                       		bcs.s	loc_1857A
0001B484 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B488 6000                       		bra.s	loc_1857A
0001B48A                            ; ===========================================================================
0001B48A                            
0001B48A                            loc_18566:
0001B48A 5168 0012                  		subq.w	#8,obVelY(a0)
0001B48E 6000                       		bra.s	loc_1857A
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            loc_1856C:
0001B490 4268 0012                  		clr.w	obVelY(a0)
0001B49E                            
0001B49E                            loc_1857A:
0001B49E 6100 F2F6                  		bsr.w	BossMove
0001B4A2 6000 FDC0                  		bra.w	loc_1833E
0001B4A6                            ; ===========================================================================
0001B4A6                            
0001B4A6                            loc_18582:
0001B4A6 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B4AC 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B4B2 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B4B8 6400                       		bcc.s	loc_1859C
0001B4BA 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B4BE 6000                       		bra.s	loc_185A2
0001B4C0                            ; ===========================================================================
0001B4C0                            
0001B4C0                            loc_1859C:
0001B4C0 4A28 0001                  		tst.b	obRender(a0)
0001B4C4 6A00                       		bpl.s	Obj73_ShipDel
0001B4C6                            
0001B4C6                            loc_185A2:
0001B4C6 6100 F2CE                  		bsr.w	BossMove
0001B4CA 6000 FD98                  		bra.w	loc_1833E
0001B4CE                            ; ===========================================================================
0001B4CE                            
0001B4CE                            Obj73_ShipDel:
0001B4CE 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B4D4                            ; ===========================================================================
0001B4D4                            
0001B4D4                            Obj73_FaceMain:	; Routine 4
0001B4D4 7000                       		moveq	#0,d0
0001B4D6 7201                       		moveq	#1,d1
0001B4D8 2268 0034                  		movea.l	$34(a0),a1
0001B4DC 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B4E0 5540                       		subq.w	#2,d0
0001B4E2 6600                       		bne.s	loc_185D2
0001B4E4 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B4EA 6700                       		beq.s	loc_185DA
0001B4EC 4A69 0012                  		tst.w	obVelY(a1)
0001B4F0 6600                       		bne.s	loc_185DA
0001B4F2 7204                       		moveq	#4,d1
0001B4F4 6000                       		bra.s	loc_185EE
0001B4F6                            ; ===========================================================================
0001B4F6                            
0001B4F6                            loc_185D2:
0001B4F6 5500                       		subq.b	#2,d0
0001B4F8 6B00                       		bmi.s	loc_185DA
0001B4FA 720A                       		moveq	#$A,d1
0001B4FC 6000                       		bra.s	loc_185EE
0001B4FE                            ; ===========================================================================
0001B4FE                            
0001B4FE                            loc_185DA:
0001B4FE 4A29 0020                  		tst.b	obColType(a1)
0001B502 6600                       		bne.s	loc_185E4
0001B504 7205                       		moveq	#5,d1
0001B506 6000                       		bra.s	loc_185EE
0001B508                            ; ===========================================================================
0001B508                            
0001B508                            loc_185E4:
0001B508 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B50E 6500                       		bcs.s	loc_185EE
0001B510 7204                       		moveq	#4,d1
0001B512                            
0001B512                            loc_185EE:
0001B512 1141 001C                  		move.b	d1,obAnim(a0)
0001B516 5900                       		subq.b	#4,d0
0001B518 6600                       		bne.s	loc_18602
0001B51A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B520 4A28 0001                  		tst.b	obRender(a0)
0001B524 6A00                       		bpl.s	Obj73_FaceDel
0001B526                            
0001B526                            loc_18602:
0001B526 6000                       		bra.s	Obj73_Display
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Obj73_FaceDel:
0001B528 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            Obj73_FlameMain:; Routine 6
0001B52E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B534 2268 0034                  		movea.l	$34(a0),a1
0001B538 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B53E 6D00                       		blt.s	loc_1862A
0001B540 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B546 4A28 0001                  		tst.b	obRender(a0)
0001B54A 6A00                       		bpl.s	Obj73_FlameDel
0001B54C 6000                       		bra.s	loc_18636
0001B54E                            ; ===========================================================================
0001B54E                            
0001B54E                            loc_1862A:
0001B54E 4A69 0010                  		tst.w	obVelX(a1)
0001B552 6700                       		beq.s	loc_18636
0001B554 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B55A                            
0001B55A                            loc_18636:
0001B55A 6000                       		bra.s	Obj73_Display
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            Obj73_FlameDel:
0001B55C 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            Obj73_Display:
0001B562 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001B568 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001B56E                            
0001B56E                            loc_1864A:
0001B56E 2268 0034                  		movea.l	$34(a0),a1
0001B572 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B578 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B57E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B584 7003                       		moveq	#3,d0
0001B586 C028 0022                  		and.b	obStatus(a0),d0
0001B58A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B590 8128 0001                  		or.b	d0,obRender(a0)
0001B594 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001B59A                            ; ===========================================================================
0001B59A                            
0001B59A                            Obj73_TubeMain:	; Routine 8
0001B59A 2268 0034                  		movea.l	$34(a0),a1
0001B59E 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B5A4 6600                       		bne.s	loc_18688
0001B5A6 4A28 0001                  		tst.b	obRender(a0)
0001B5AA 6A00                       		bpl.s	Obj73_TubeDel
0001B5AC                            
0001B5AC                            loc_18688:
0001B5AC 217C 0001 ACEA 0004        		move.l	#Map_BossItems,obMap(a0)
0001B5B4 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B5BA 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B5C0 60AC                       		bra.s	loc_1864A
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            Obj73_TubeDel:
0001B5C2 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B5C2 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B5C8                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B5C8                            ; ---------------------------------------------------------------------------
0001B5C8                            ; Object 74 - lava that	Eggman drops (MZ)
0001B5C8                            ; ---------------------------------------------------------------------------
0001B5C8                            
0001B5C8                            BossFire:
0001B5C8 7000                       		moveq	#0,d0
0001B5CA 1028 0024                  		move.b	obRoutine(a0),d0
0001B5CE 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B5D2 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B5D6 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001B5DC                            ; ===========================================================================
0001B5DC 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B5DE 0000                       		dc.w Obj74_Action-Obj74_Index
0001B5E0 0000                       		dc.w loc_18886-Obj74_Index
0001B5E2 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B5E4                            ; ===========================================================================
0001B5E4                            
0001B5E4                            Obj74_Main:	; Routine 0
0001B5E4 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B5EA 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B5F0 217C 0000 D456 0004        		move.l	#Map_Fire,obMap(a0)
0001B5F8 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B5FE 117C 0004 0001             		move.b	#4,obRender(a0)
0001B604 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B60A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B610 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B616 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B61A 4A28 0028                  		tst.b	obSubtype(a0)
0001B61E 6600                       		bne.s	loc_1870A
0001B620 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B626 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B62A 6000 0000                  		bra.w	loc_18886
0001B62E                            ; ===========================================================================
0001B62E                            
0001B62E                            loc_1870A:
0001B62E 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B63E                            
0001B63E                            Obj74_Action:	; Routine 2
0001B63E 7000                       		moveq	#0,d0
0001B640 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B644 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B648 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B64C 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001B652 43F9 0001 0606             		lea	(Ani_Fire).l,a1
0001B658 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001B65E 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B664 6200                       		bhi.s	Obj74_Delete
0001B666 4E75                       		rts	
0001B668                            ; ===========================================================================
0001B668                            
0001B668                            Obj74_Delete:
0001B668 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B66E                            ; ===========================================================================
0001B66E 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B670 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B672 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B674 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B676                            ; ===========================================================================
0001B676                            
0001B676                            Obj74_Drop:
0001B676 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B67C 5328 0029                  		subq.b	#1,$29(a0)
0001B680 6A00                       		bpl.s	locret_18780
0001B682 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B688 4228 0028                  		clr.b	obSubtype(a0)
0001B68C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B692 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B698 6100 C634                  		bsr.w	ObjFloorDist
0001B69C 4A41                       		tst.w	d1
0001B69E 6A00                       		bpl.s	locret_18780
0001B6A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6A4                            
0001B6A4                            locret_18780:
0001B6A4 4E75                       		rts	
0001B6A6                            ; ===========================================================================
0001B6A6                            
0001B6A6                            Obj74_MakeFlame:
0001B6A6 5568 000C                  		subq.w	#2,obY(a0)
0001B6AA 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B6B0 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B6B6 4268 0012                  		clr.w	obVelY(a0)
0001B6BA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B6C0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B6C6 117C 0003 0029             		move.b	#3,$29(a0)
0001B6CC 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001B6D2 6600                       		bne.s	loc_187CA
0001B6D4 47D1                       		lea	(a1),a3
0001B6D6 45D0                       		lea	(a0),a2
0001B6D8 7003                       		moveq	#3,d0
0001B6DA                            
0001B6DA                            Obj74_Loop:
0001B6DA 26DA                       		move.l	(a2)+,(a3)+
0001B6DC 26DA                       		move.l	(a2)+,(a3)+
0001B6DE 26DA                       		move.l	(a2)+,(a3)+
0001B6E0 26DA                       		move.l	(a2)+,(a3)+
0001B6E2 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B6E6                            
0001B6E6 4469 0010                  		neg.w	obVelX(a1)
0001B6EA 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B6EE                            
0001B6EE                            loc_187CA:
0001B6EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6F2 4E75                       		rts	
0001B6F4                            
0001B6F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6F4                            
0001B6F4                            
0001B6F4                            Obj74_Duplicate2:
0001B6F4 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001B6FA 6600                       		bne.s	locret_187EE
0001B6FC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B702 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B708 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B70C 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B712                            
0001B712                            locret_187EE:
0001B712 4E75                       		rts	
0001B714                            ; End of function Obj74_Duplicate2
0001B714                            
0001B714                            ; ===========================================================================
0001B714                            
0001B714                            Obj74_Duplicate:
0001B714 6100 C5B8                  		bsr.w	ObjFloorDist
0001B718 4A41                       		tst.w	d1
0001B71A 6A00                       		bpl.s	loc_18826
0001B71C 3028 0008                  		move.w	obX(a0),d0
0001B720 0C40 1940                  		cmpi.w	#$1940,d0
0001B724 6E00                       		bgt.s	loc_1882C
0001B726 3228 0030                  		move.w	$30(a0),d1
0001B72A B240                       		cmp.w	d0,d1
0001B72C 6700                       		beq.s	loc_1881E
0001B72E 0240 0010                  		andi.w	#$10,d0
0001B732 0241 0010                  		andi.w	#$10,d1
0001B736 B240                       		cmp.w	d0,d1
0001B738 6700                       		beq.s	loc_1881E
0001B73A 61B8                       		bsr.s	Obj74_Duplicate2
0001B73C 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B742                            
0001B742                            loc_1881E:
0001B742 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B748 4E75                       		rts	
0001B74A                            ; ===========================================================================
0001B74A                            
0001B74A                            loc_18826:
0001B74A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B74E 4E75                       		rts	
0001B750                            ; ===========================================================================
0001B750                            
0001B750                            loc_1882C:
0001B750 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B754 4E75                       		rts	
0001B756                            ; ===========================================================================
0001B756                            
0001B756                            Obj74_FallEdge:
0001B756 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B75C 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B762 3028 0008                  		move.w	obX(a0),d0
0001B766 9068 0032                  		sub.w	$32(a0),d0
0001B76A 6A00                       		bpl.s	loc_1884A
0001B76C 4440                       		neg.w	d0
0001B76E                            
0001B76E                            loc_1884A:
0001B76E 0C40 0012                  		cmpi.w	#$12,d0
0001B772 6600                       		bne.s	loc_18856
0001B774 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B77A                            
0001B77A                            loc_18856:
0001B77A 6100 C552                  		bsr.w	ObjFloorDist
0001B77E 4A41                       		tst.w	d1
0001B780 6A00                       		bpl.s	locret_1887E
0001B782 5328 0029                  		subq.b	#1,$29(a0)
0001B786 6700                       		beq.s	Obj74_Delete2
0001B788 4268 0012                  		clr.w	obVelY(a0)
0001B78C 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B792 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B798 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B79E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B7A2                            
0001B7A2                            locret_1887E:
0001B7A2 4E75                       		rts	
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            Obj74_Delete2:
0001B7A4 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B7AA                            ; ===========================================================================
0001B7AA                            
0001B7AA                            loc_18886:	; Routine 4
0001B7AA 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B7B0 5328 0029                  		subq.b	#1,$29(a0)
0001B7B4 6600                       		bne.s	Obj74_Animate
0001B7B6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B7BC 5968 000C                  		subq.w	#4,obY(a0)
0001B7C0 4228 0020                  		clr.b	obColType(a0)
0001B7C4                            
0001B7C4                            Obj74_Animate:
0001B7C4 43F9 0001 0606             		lea	(Ani_Fire).l,a1
0001B7CA 4EF9 0000 C804             		jmp	(AnimateSprite).l
0001B7D0                            ; ===========================================================================
0001B7D0                            
0001B7D0                            Obj74_Delete3:	; Routine 6
0001B7D0 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B7D0 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B7D6                            
0001B7D6                            	Obj7A_Delete:
0001B7D6 4EF9 0000 F782             		jmp	(DeleteObject).l
0001B7DC                            
0001B7DC                            		include	"_incObj\7A Boss - Star Light.asm"
0001B7DC                            ; ---------------------------------------------------------------------------
0001B7DC                            ; Object 7A - Eggman (SLZ)
0001B7DC                            ; ---------------------------------------------------------------------------
0001B7DC                            
0001B7DC                            BossStarLight:
0001B7DC 7000                       		moveq	#0,d0
0001B7DE 1028 0024                  		move.b	obRoutine(a0),d0
0001B7E2 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B7E6 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B7EA                            ; ===========================================================================
0001B7EA 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B7EC 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B7EE 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B7F0 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B7F2 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B7F4                            
0001B7F4 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B7F8 0401 0200                  		dc.b 4,	1, $02, $00
0001B7FC 0607 0200                  		dc.b 6,	7, $02, $00
0001B800 0800 0180                  		dc.b 8,	0, $01, $80
0001B804                            ; ===========================================================================
0001B804                            
0001B804                            Obj7A_Main:
0001B804 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B80A 317C 0228 000C             		move.w	#$228,obY(a0)
0001B810 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B816 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B81C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B822 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B828 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B82C 2248                       		movea.l	a0,a1
0001B82E 7203                       		moveq	#3,d1
0001B830 6000                       		bra.s	Obj7A_LoadBoss
0001B832                            ; ===========================================================================
0001B832                            
0001B832                            Obj7A_Loop:
0001B832 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001B838 6600                       		bne.s	loc_1895C
0001B83A 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B83E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B844 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B84A                            
0001B84A                            Obj7A_LoadBoss:
0001B84A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B850 4229 0025                  		clr.b	ob2ndRout(a1)
0001B854 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B858 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B85C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B860 237C 0001 ABFA 0004        		move.l	#Map_Eggman,obMap(a1)
0001B868 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B86E 137C 0004 0001             		move.b	#4,obRender(a1)
0001B874 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B87A 2348 0034                  		move.l	a0,$34(a1)
0001B87E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B882                            
0001B882                            loc_1895C:
0001B882 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B886 45E8 002A                  		lea	$2A(a0),a2
0001B88A 705E                       		moveq	#$5E,d0
0001B88C 723E                       		moveq	#$3E,d1
0001B88E                            
0001B88E                            loc_18968:
0001B88E B011                       		cmp.b	(a1),d0
0001B890 6600                       		bne.s	loc_18974
0001B892 4A29 0028                  		tst.b	obSubtype(a1)
0001B896 6700                       		beq.s	loc_18974
0001B898 34C9                       		move.w	a1,(a2)+
0001B89A                            
0001B89A                            loc_18974:
0001B89A D2FC 0040                  		adda.w	#$40,a1
0001B89E 51C9 FFEE                  		dbf	d1,loc_18968
0001B8A2                            
0001B8A2                            Obj7A_ShipMain:	; Routine 2
0001B8A2 7000                       		moveq	#0,d0
0001B8A4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B8A8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B8AC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B8B0 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001B8B6 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001B8BC 7003                       		moveq	#3,d0
0001B8BE C028 0022                  		and.b	obStatus(a0),d0
0001B8C2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B8C8 8128 0001                  		or.b	d0,obRender(a0)
0001B8CC 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001B8D2                            ; ===========================================================================
0001B8D2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B8D4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B8D6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B8D8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B8DA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B8DC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B8DE                            ; ===========================================================================
0001B8DE                            
0001B8DE                            loc_189B8:
0001B8DE 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B8E4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B8EA 6400                       		bcc.s	loc_189CA
0001B8EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B8F0                            
0001B8F0                            loc_189CA:
0001B8F0 6100 EEA4                  		bsr.w	BossMove
0001B8F4 1028 003F                  		move.b	$3F(a0),d0
0001B8F8 5428 003F                  		addq.b	#2,$3F(a0)
0001B8FC 4EB9 0000 37AE             		jsr	(CalcSine).l
0001B902 EC40                       		asr.w	#6,d0
0001B904 D068 0038                  		add.w	$38(a0),d0
0001B908 3140 000C                  		move.w	d0,obY(a0)
0001B90C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B912 6000                       		bra.s	loc_189FE
0001B914                            ; ===========================================================================
0001B914                            
0001B914                            loc_189EE:
0001B914 6100 EE80                  		bsr.w	BossMove
0001B918 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B91E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B924                            
0001B924                            loc_189FE:
0001B924 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B92A 6400                       		bcc.s	locret_18A44
0001B92C 4A28 0022                  		tst.b	obStatus(a0)
0001B930 6B00                       		bmi.s	loc_18A46
0001B932 4A28 0020                  		tst.b	obColType(a0)
0001B936 6600                       		bne.s	locret_18A44
0001B938 4A28 003E                  		tst.b	$3E(a0)
0001B93C 6600                       		bne.s	loc_18A28
0001B93E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B94E                            
0001B94E                            loc_18A28:
0001B94E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B952 7000                       		moveq	#0,d0
0001B954 4A51                       		tst.w	(a1)
0001B956 6600                       		bne.s	loc_18A36
0001B958 303C 0EEE                  		move.w	#cWhite,d0
0001B95C                            
0001B95C                            loc_18A36:
0001B95C 3280                       		move.w	d0,(a1)
0001B95E 5328 003E                  		subq.b	#1,$3E(a0)
0001B962 6600                       		bne.s	locret_18A44
0001B964 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B96A                            
0001B96A                            locret_18A44:
0001B96A 4E75                       		rts	
0001B96C                            ; ===========================================================================
0001B96C                            
0001B96C                            loc_18A46:
0001B96C 7064                       		moveq	#100,d0
0001B96E 6100 0000                  		bsr.w	AddPoints
0001B972 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001B978 117C 0078 003C             		move.b	#$78,$3C(a0)
0001B97E 4268 0010                  		clr.w	obVelX(a0)
0001B982 4E75                       		rts	
0001B984                            ; ===========================================================================
0001B984                            
0001B984                            loc_18A5E:
0001B984 3028 0030                  		move.w	$30(a0),d0
0001B988 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B98E 0828 0000 0022             		btst	#0,obStatus(a0)
0001B994 6600                       		bne.s	loc_18A7C
0001B996 4468 0010                  		neg.w	obVelX(a0)
0001B99A 0C40 2008                  		cmpi.w	#$2008,d0
0001B99E 6E00                       		bgt.s	loc_18A88
0001B9A0 6000                       		bra.s	loc_18A82
0001B9A2                            ; ===========================================================================
0001B9A2                            
0001B9A2                            loc_18A7C:
0001B9A2 0C40 2138                  		cmpi.w	#$2138,d0
0001B9A6 6D00                       		blt.s	loc_18A88
0001B9A8                            
0001B9A8                            loc_18A82:
0001B9A8 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B9AE                            
0001B9AE                            loc_18A88:
0001B9AE 3028 0008                  		move.w	8(a0),d0
0001B9B2 72FF                       		moveq	#-1,d1
0001B9B4 7402                       		moveq	#2,d2
0001B9B6 45E8 002A                  		lea	$2A(a0),a2
0001B9BA 7828                       		moveq	#$28,d4
0001B9BC 4A68 0010                  		tst.w	obVelX(a0)
0001B9C0 6A00                       		bpl.s	loc_18A9E
0001B9C2 4444                       		neg.w	d4
0001B9C4                            
0001B9C4                            loc_18A9E:
0001B9C4 321A                       		move.w	(a2)+,d1
0001B9C6 2641                       		movea.l	d1,a3
0001B9C8 082B 0003 0022             		btst	#3,obStatus(a3)
0001B9CE 6600                       		bne.s	loc_18AB4
0001B9D0 362B 0008                  		move.w	8(a3),d3
0001B9D4 D644                       		add.w	d4,d3
0001B9D6 9640                       		sub.w	d0,d3
0001B9D8 6700                       		beq.s	loc_18AC0
0001B9DA                            
0001B9DA                            loc_18AB4:
0001B9DA 51CA FFE8                  		dbf	d2,loc_18A9E
0001B9DE                            
0001B9DE 1142 0028                  		move.b	d2,obSubtype(a0)
0001B9E2 6000 FF0C                  		bra.w	loc_189CA
0001B9E6                            ; ===========================================================================
0001B9E6                            
0001B9E6                            loc_18AC0:
0001B9E6 1142 0028                  		move.b	d2,obSubtype(a0)
0001B9EA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9EE 117C 0028 003C             		move.b	#$28,$3C(a0)
0001B9F4 6000 FEFA                  		bra.w	loc_189CA
0001B9F8                            ; ===========================================================================
0001B9F8                            
0001B9F8                            Obj7A_MakeBall:
0001B9F8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001B9FE 6600                       		bne.s	loc_18B36
0001BA00 70FF                       		moveq	#-1,d0
0001BA02 1028 0028                  		move.b	obSubtype(a0),d0
0001BA06 4880                       		ext.w	d0
0001BA08 6B00                       		bmi.s	loc_18B40
0001BA0A 5540                       		subq.w	#2,d0
0001BA0C 4440                       		neg.w	d0
0001BA0E D040                       		add.w	d0,d0
0001BA10 43E8 002A                  		lea	$2A(a0),a1
0001BA14 3031 0000                  		move.w	(a1,d0.w),d0
0001BA18 2440                       		movea.l	d0,a2
0001BA1A 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BA1E 723E                       		moveq	#$3E,d1
0001BA20                            
0001BA20                            loc_18AFA:
0001BA20 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BA24 6700                       		beq.s	loc_18B40
0001BA26 D2FC 0040                  		adda.w	#$40,a1
0001BA2A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BA2E                            
0001BA2E 2F08                       		move.l	a0,-(sp)
0001BA30 41D2                       		lea	(a2),a0
0001BA32 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001BA38 205F                       		movea.l	(sp)+,a0
0001BA3A 6600                       		bne.s	loc_18B40
0001BA3C 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BA40 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA46 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA4C 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BA52 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BA58 234A 003C                  		move.l	a2,$3C(a1)
0001BA5C                            
0001BA5C                            loc_18B36:
0001BA5C 5328 003C                  		subq.b	#1,$3C(a0)
0001BA60 6700                       		beq.s	loc_18B40
0001BA62 6000 FEC0                  		bra.w	loc_189FE
0001BA66                            ; ===========================================================================
0001BA66                            
0001BA66                            loc_18B40:
0001BA66 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BA6A 6000 FE84                  		bra.w	loc_189CA
0001BA6E                            ; ===========================================================================
0001BA6E                            
0001BA6E                            loc_18B48:
0001BA6E 5328 003C                  		subq.b	#1,$3C(a0)
0001BA72 6B00                       		bmi.s	loc_18B52
0001BA74 6000 ECDE                  		bra.w	BossDefeated
0001BA78                            ; ===========================================================================
0001BA78                            
0001BA78                            loc_18B52:
0001BA78 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA7C 4268 0012                  		clr.w	obVelY(a0)
0001BA80 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BA86 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BA8C 4268 0010                  		clr.w	obVelX(a0)
0001BA90 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BA96 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BA9A 6600                       		bne.s	loc_18B7C
0001BA9C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BAA2                            
0001BAA2                            loc_18B7C:
0001BAA2 6000 FE80                  		bra.w	loc_189FE
0001BAA6                            ; ===========================================================================
0001BAA6                            
0001BAA6                            loc_18B80:
0001BAA6 5228 003C                  		addq.b	#1,$3C(a0)
0001BAAA 6700                       		beq.s	loc_18B90
0001BAAC 6A00                       		bpl.s	loc_18B96
0001BAAE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BAB4 6000                       		bra.s	loc_18BC2
0001BAB6                            ; ===========================================================================
0001BAB6                            
0001BAB6                            loc_18B90:
0001BAB6 4268 0012                  		clr.w	obVelY(a0)
0001BABA 6000                       		bra.s	loc_18BC2
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            loc_18B96:
0001BABC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BAC2 6500                       		bcs.s	loc_18BAE
0001BAC4 6700                       		beq.s	loc_18BB4
0001BAC6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BACC 6500                       		bcs.s	loc_18BC2
0001BACE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BAD2 6000                       		bra.s	loc_18BC2
0001BAD4                            ; ===========================================================================
0001BAD4                            
0001BAD4                            loc_18BAE:
0001BAD4 5168 0012                  		subq.w	#8,obVelY(a0)
0001BAD8 6000                       		bra.s	loc_18BC2
0001BADA                            ; ===========================================================================
0001BADA                            
0001BADA                            loc_18BB4:
0001BADA 4268 0012                          	clr.w    obVelY(a0)
0001BADE 4A38 FE2D                          	tst.b     (v_invinc).w
0001BAE2 6600                               	bne.s   @boss_invinc
0001BAE4                            
0001BAE4 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BAE8 6000 0000                          	bra.w      @boss_play
0001BAEC                            
0001BAEC                            	@boss_invinc:
0001BAEC 103C 0000                          	move.b #bgm_Invincible,d0
0001BAF0                            
0001BAF0                            	@boss_play:
0001BAF0 4EB8 0FC6                          	jsr PlaySound
0001BAF4                            
0001BAF4                            loc_18BC2:
0001BAF4 6000 FE1E                  		bra.w	loc_189EE
0001BAF8                            ; ===========================================================================
0001BAF8                            
0001BAF8                            loc_18BC6:
0001BAF8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BAFE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BB04 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BB0A 6400                       		bcc.s	loc_18BE0
0001BB0C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BB10 6000                       		bra.s	loc_18BE8
0001BB12                            ; ===========================================================================
0001BB12                            
0001BB12                            loc_18BE0:
0001BB12 4A28 0001                  		tst.b	obRender(a0)
0001BB16 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BB1A                            
0001BB1A                            loc_18BE8:
0001BB1A 6100 EC7A                  		bsr.w	BossMove
0001BB1E 6000 FDD0                  		bra.w	loc_189CA
0001BB22                            ; ===========================================================================
0001BB22                            
0001BB22                            Obj7A_FaceMain:	; Routine 4
0001BB22 7000                       		moveq	#0,d0
0001BB24 7201                       		moveq	#1,d1
0001BB26 2268 0034                  		movea.l	$34(a0),a1
0001BB2A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BB2E 0C00 0006                  		cmpi.b	#6,d0
0001BB32 6B00                       		bmi.s	loc_18C06
0001BB34 720A                       		moveq	#$A,d1
0001BB36 6000                       		bra.s	loc_18C1A
0001BB38                            ; ===========================================================================
0001BB38                            
0001BB38                            loc_18C06:
0001BB38 4A29 0020                  		tst.b	obColType(a1)
0001BB3C 6600                       		bne.s	loc_18C10
0001BB3E 7205                       		moveq	#5,d1
0001BB40 6000                       		bra.s	loc_18C1A
0001BB42                            ; ===========================================================================
0001BB42                            
0001BB42                            loc_18C10:
0001BB42 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BB48 6500                       		bcs.s	loc_18C1A
0001BB4A 7204                       		moveq	#4,d1
0001BB4C                            
0001BB4C                            loc_18C1A:
0001BB4C 1141 001C                  		move.b	d1,obAnim(a0)
0001BB50 0C00 000A                  		cmpi.b	#$A,d0
0001BB54 6600                       		bne.s	loc_18C32
0001BB56 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BB5C 4A28 0001                  		tst.b	obRender(a0)
0001BB60 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BB64                            
0001BB64                            loc_18C32:
0001BB64 6000                       		bra.s	loc_18C6C
0001BB66                            ; ===========================================================================
0001BB66                            
0001BB66                            Obj7A_FlameMain:; Routine 6
0001BB66 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BB6C 2268 0034                  		movea.l	$34(a0),a1
0001BB70 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB76 6600                       		bne.s	loc_18C56
0001BB78 4A28 0001                  		tst.b	obRender(a0)
0001BB7C 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BB80 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BB86 6000                       		bra.s	loc_18C6C
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            loc_18C56:
0001BB88 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BB8E 6E00                       		bgt.s	loc_18C6C
0001BB90 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BB96 6D00                       		blt.s	loc_18C6C
0001BB98 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BB9E                            
0001BB9E                            loc_18C6C:
0001BB9E 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001BBA4 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001BBAA                            
0001BBAA                            loc_18C78:
0001BBAA 2268 0034                  		movea.l	$34(a0),a1
0001BBAE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BBB4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BBBA 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BBC0 7003                       		moveq	#3,d0
0001BBC2 C028 0022                  		and.b	obStatus(a0),d0
0001BBC6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BBCC 8128 0001                  		or.b	d0,obRender(a0)
0001BBD0 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001BBD6                            ; ===========================================================================
0001BBD6                            
0001BBD6                            Obj7A_TubeMain:	; Routine 8
0001BBD6 2268 0034                  		movea.l	$34(a0),a1
0001BBDA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BBE0 6600                       		bne.s	loc_18CB8
0001BBE2 4A28 0001                  		tst.b	obRender(a0)
0001BBE6 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BBEA                            
0001BBEA                            loc_18CB8:
0001BBEA 217C 0001 ACEA 0004        		move.l	#Map_BossItems,obMap(a0)
0001BBF2 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BBF8 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BBFE 60AA                       		bra.s	loc_18C78
0001BBFE 60AA                       		bra.s	loc_18C78
0001BC00                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BC00                            ; ---------------------------------------------------------------------------
0001BC00                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BC00                            ; ---------------------------------------------------------------------------
0001BC00                            
0001BC00                            BossSpikeball:
0001BC00 7000                       		moveq	#0,d0
0001BC02 1028 0024                  		move.b	obRoutine(a0),d0
0001BC06 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BC0A 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BC0E 3028 0030                  		move.w	$30(a0),d0
0001BC12 0240 FF80                  		andi.w	#$FF80,d0
0001BC16 3238 F700                  		move.w	(v_screenposx).w,d1
0001BC1A 0441 0080                  		subi.w	#$80,d1
0001BC1E 0241 FF80                  		andi.w	#$FF80,d1
0001BC22 9041                       		sub.w	d1,d0
0001BC24 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BC28 0C40 0280                  		cmpi.w	#$280,d0
0001BC2C 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BC30 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001BC36                            ; ===========================================================================
0001BC36 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BC38 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BC3A 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BC3C 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BC3E 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BC40 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BC42                            ; ===========================================================================
0001BC42                            
0001BC42                            Obj7B_Main:	; Routine 0
0001BC42 217C 0001 3BD8 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BC4A 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BC50 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BC56 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BC5C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BC62 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BC68 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BC6E 2268 003C                  		movea.l	$3C(a0),a1
0001BC72 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BC78 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BC7E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC84 3028 0008                  		move.w	obX(a0),d0
0001BC88 B069 0008                  		cmp.w	obX(a1),d0
0001BC8C 6E00                       		bgt.s	loc_18D68
0001BC8E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC94 117C 0002 003A             		move.b	#2,$3A(a0)
0001BC9A                            
0001BC9A                            loc_18D68:
0001BC9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BC9E                            
0001BC9E                            Obj7B_Fall:	; Routine 2
0001BC9E 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001BCA4 2268 003C                  		movea.l	$3C(a0),a1
0001BCA8 45F9 0000 0000             		lea	(word_19018).l,a2
0001BCAE 7000                       		moveq	#0,d0
0001BCB0 1029 001A                  		move.b	obFrame(a1),d0
0001BCB4 3228 0008                  		move.w	8(a0),d1
0001BCB8 9268 0030                  		sub.w	$30(a0),d1
0001BCBC 6400                       		bcc.s	loc_18D8E
0001BCBE 5440                       		addq.w	#2,d0
0001BCC0                            
0001BCC0                            loc_18D8E:
0001BCC0 D040                       		add.w	d0,d0
0001BCC2 3228 0034                  		move.w	$34(a0),d1
0001BCC6 D272 0000                  		add.w	(a2,d0.w),d1
0001BCCA B268 000C                  		cmp.w	obY(a0),d1
0001BCCE 6E00                       		bgt.s	locret_18DC4
0001BCD0 2268 003C                  		movea.l	$3C(a0),a1
0001BCD4 7202                       		moveq	#2,d1
0001BCD6 0828 0000 0022             		btst	#0,obStatus(a0)
0001BCDC 6700                       		beq.s	loc_18DAE
0001BCDE 7200                       		moveq	#0,d1
0001BCE0                            
0001BCE0                            loc_18DAE:
0001BCE0 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BCE6 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BCEC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BCF2 6000 0000                  		bra.w	loc_18FA2
0001BCF6                            ; ===========================================================================
0001BCF6                            
0001BCF6                            locret_18DC4:
0001BCF6 4E75                       		rts	
0001BCF8                            ; ===========================================================================
0001BCF8                            
0001BCF8                            loc_18DC6:	; Routine 4
0001BCF8 2268 003C                  		movea.l	$3C(a0),a1
0001BCFC 7000                       		moveq	#0,d0
0001BCFE 1028 003A                  		move.b	$3A(a0),d0
0001BD02 9029 003A                  		sub.b	$3A(a1),d0
0001BD06 6700                       		beq.s	loc_18E2A
0001BD08 6400                       		bcc.s	loc_18DDA
0001BD0A 4400                       		neg.b	d0
0001BD0C                            
0001BD0C                            loc_18DDA:
0001BD0C 323C F7E8                  		move.w	#-$818,d1
0001BD10 343C FEEC                  		move.w	#-$114,d2
0001BD14 0C00 0001                  		cmpi.b	#1,d0
0001BD18 6700                       		beq.s	loc_18E00
0001BD1A 323C F6A0                  		move.w	#-$960,d1
0001BD1E 343C FF0C                  		move.w	#-$F4,d2
0001BD22 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BD28 6D00                       		blt.s	loc_18E00
0001BD2A 323C F5E0                  		move.w	#-$A20,d1
0001BD2E 343C FF80                  		move.w	#-$80,d2
0001BD32                            
0001BD32                            loc_18E00:
0001BD32 3141 0012                  		move.w	d1,obVelY(a0)
0001BD36 3142 0010                  		move.w	d2,obVelX(a0)
0001BD3A 3028 0008                  		move.w	obX(a0),d0
0001BD3E 9068 0030                  		sub.w	$30(a0),d0
0001BD42 6400                       		bcc.s	loc_18E16
0001BD44 4468 0010                  		neg.w	obVelX(a0)
0001BD48                            
0001BD48                            loc_18E16:
0001BD48 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BD4E 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BD54 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BD58 6000 0000                  		bra.w	loc_18EAA
0001BD5C                            ; ===========================================================================
0001BD5C                            
0001BD5C                            loc_18E2A:
0001BD5C 45F9 0000 0000             		lea	(word_19018).l,a2
0001BD62 7000                       		moveq	#0,d0
0001BD64 1029 001A                  		move.b	obFrame(a1),d0
0001BD68 343C 0028                  		move.w	#$28,d2
0001BD6C 3228 0008                  		move.w	obX(a0),d1
0001BD70 9268 0030                  		sub.w	$30(a0),d1
0001BD74 6400                       		bcc.s	loc_18E48
0001BD76 4442                       		neg.w	d2
0001BD78 5440                       		addq.w	#2,d0
0001BD7A                            
0001BD7A                            loc_18E48:
0001BD7A D040                       		add.w	d0,d0
0001BD7C 3228 0034                  		move.w	$34(a0),d1
0001BD80 D272 0000                  		add.w	(a2,d0.w),d1
0001BD84 3141 000C                  		move.w	d1,obY(a0)
0001BD88 D468 0030                  		add.w	$30(a0),d2
0001BD8C 3142 0008                  		move.w	d2,obX(a0)
0001BD90 4268 000E                  		clr.w	obY+2(a0)
0001BD94 4268 000A                  		clr.w	obX+2(a0)
0001BD98 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BD9C 6600                       		bne.s	loc_18E7A
0001BD9E 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BDA4 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BDAA 4E75                       		rts	
0001BDAC                            ; ===========================================================================
0001BDAC                            
0001BDAC                            loc_18E7A:
0001BDAC 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BDB2 6600                       		bne.s	loc_18E88
0001BDB4 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BDBA                            
0001BDBA                            loc_18E88:
0001BDBA 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BDC0 6600                       		bne.s	loc_18E96
0001BDC2 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BDC8                            
0001BDC8                            loc_18E96:
0001BDC8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BDCC 6E00                       		bgt.s	locret_18EA8
0001BDCE 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BDD4 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BDDA                            
0001BDDA                            locret_18EA8:
0001BDDA 4E75                       		rts	
0001BDDC                            ; ===========================================================================
0001BDDC                            
0001BDDC                            loc_18EAA:	; Routine 6
0001BDDC 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BDE0 707A                       		moveq	#id_BossStarLight,d0
0001BDE2 7240                       		moveq	#$40,d1
0001BDE4 743E                       		moveq	#$3E,d2
0001BDE6                            
0001BDE6                            loc_18EB4:
0001BDE6 B011                       		cmp.b	(a1),d0
0001BDE8 6700                       		beq.s	loc_18EC0
0001BDEA D2C1                       		adda.w	d1,a1
0001BDEC 51CA FFF8                  		dbf	d2,loc_18EB4
0001BDF0                            
0001BDF0 6000                       		bra.s	loc_18F38
0001BDF2                            ; ===========================================================================
0001BDF2                            
0001BDF2                            loc_18EC0:
0001BDF2 3029 0008                  		move.w	obX(a1),d0
0001BDF6 3229 000C                  		move.w	obY(a1),d1
0001BDFA 3428 0008                  		move.w	obX(a0),d2
0001BDFE 3628 000C                  		move.w	obY(a0),d3
0001BE02 45FA 0000                  		lea	byte_19022(pc),a2
0001BE06 47FA 0000                  		lea	byte_19026(pc),a3
0001BE0A 181A                       		move.b	(a2)+,d4
0001BE0C 4884                       		ext.w	d4
0001BE0E D044                       		add.w	d4,d0
0001BE10 181B                       		move.b	(a3)+,d4
0001BE12 4884                       		ext.w	d4
0001BE14 D444                       		add.w	d4,d2
0001BE16 B440                       		cmp.w	d0,d2
0001BE18 6500                       		bcs.s	loc_18F38
0001BE1A 181A                       		move.b	(a2)+,d4
0001BE1C 4884                       		ext.w	d4
0001BE1E D044                       		add.w	d4,d0
0001BE20 181B                       		move.b	(a3)+,d4
0001BE22 4884                       		ext.w	d4
0001BE24 D444                       		add.w	d4,d2
0001BE26 B042                       		cmp.w	d2,d0
0001BE28 6500                       		bcs.s	loc_18F38
0001BE2A 181A                       		move.b	(a2)+,d4
0001BE2C 4884                       		ext.w	d4
0001BE2E D244                       		add.w	d4,d1
0001BE30 181B                       		move.b	(a3)+,d4
0001BE32 4884                       		ext.w	d4
0001BE34 D644                       		add.w	d4,d3
0001BE36 B641                       		cmp.w	d1,d3
0001BE38 6500                       		bcs.s	loc_18F38
0001BE3A 181A                       		move.b	(a2)+,d4
0001BE3C 4884                       		ext.w	d4
0001BE3E D244                       		add.w	d4,d1
0001BE40 181B                       		move.b	(a3)+,d4
0001BE42 4884                       		ext.w	d4
0001BE44 D644                       		add.w	d4,d3
0001BE46 B243                       		cmp.w	d3,d1
0001BE48 6500                       		bcs.s	loc_18F38
0001BE4A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BE4E 4268 0028                  		clr.w	obSubtype(a0)
0001BE52 4229 0020                  		clr.b	obColType(a1)
0001BE56 5329 0021                  		subq.b	#1,obColProp(a1)
0001BE5A 6600                       		bne.s	loc_18F38
0001BE5C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BE62 4268 0010                  		clr.w	obVelX(a0)
0001BE66 4268 0012                  		clr.w	obVelY(a0)
0001BE6A                            
0001BE6A                            loc_18F38:
0001BE6A 4A68 0012                  		tst.w	obVelY(a0)
0001BE6E 6A00                       		bpl.s	loc_18F5C
0001BE70 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001BE76 3028 0034                  		move.w	$34(a0),d0
0001BE7A 0440 002F                  		subi.w	#$2F,d0
0001BE7E B068 000C                  		cmp.w	obY(a0),d0
0001BE82 6E00                       		bgt.s	loc_18F58
0001BE84 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001BE8A                            
0001BE8A                            loc_18F58:
0001BE8A 6000 FF20                  		bra.w	loc_18E7A
0001BE8E                            ; ===========================================================================
0001BE8E                            
0001BE8E                            loc_18F5C:
0001BE8E 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001BE94 2268 003C                  		movea.l	$3C(a0),a1
0001BE98 45F9 0000 0000             		lea	(word_19018).l,a2
0001BE9E 7000                       		moveq	#0,d0
0001BEA0 1029 001A                  		move.b	obFrame(a1),d0
0001BEA4 3228 0008                  		move.w	obX(a0),d1
0001BEA8 9268 0030                  		sub.w	$30(a0),d1
0001BEAC 6400                       		bcc.s	loc_18F7E
0001BEAE 5440                       		addq.w	#2,d0
0001BEB0                            
0001BEB0                            loc_18F7E:
0001BEB0 D040                       		add.w	d0,d0
0001BEB2 3228 0034                  		move.w	$34(a0),d1
0001BEB6 D272 0000                  		add.w	(a2,d0.w),d1
0001BEBA B268 000C                  		cmp.w	obY(a0),d1
0001BEBE 6ECA                       		bgt.s	loc_18F58
0001BEC0 2268 003C                  		movea.l	$3C(a0),a1
0001BEC4 7202                       		moveq	#2,d1
0001BEC6 4A68 0010                  		tst.w	obVelX(a0)
0001BECA 6B00                       		bmi.s	loc_18F9C
0001BECC 7200                       		moveq	#0,d1
0001BECE                            
0001BECE                            loc_18F9C:
0001BECE 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BED4                            
0001BED4                            loc_18FA2:
0001BED4 1341 003A                  		move.b	d1,$3A(a1)
0001BED8 1141 003A                  		move.b	d1,$3A(a0)
0001BEDC B229 001A                  		cmp.b	obFrame(a1),d1
0001BEE0 6700                       		beq.s	loc_19008
0001BEE2 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BEE8 6700                       		beq.s	loc_19008
0001BEEA 4229 0025                  		clr.b	ob2ndRout(a1)
0001BEEE 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BEF4 45F8 D000                  		lea	(v_objspace).w,a2
0001BEF8 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BEFE 446A 0012                  		neg.w	obVelY(a2)
0001BF02 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BF08 6600                       		bne.s	loc_18FDC
0001BF0A E0EA 0012                  		asr	obVelY(a2)
0001BF0E                            
0001BF0E                            loc_18FDC:
0001BF0E 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BF14 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BF1A 422A 003C                  		clr.b	$3C(a2)
0001BF1E 2F08                       		move.l	a0,-(sp)
0001BF20 41D2                       		lea	(a2),a0
0001BF22 4EB9 0001 5DBE             		jsr	(Sonic_ChkRoll).l
0001BF28 205F                       		movea.l	(sp)+,a0
0001BF2A 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BF3A                            
0001BF3A                            loc_19008:
0001BF3A 4268 0010                  		clr.w	obVelX(a0)
0001BF3E 4268 0012                  		clr.w	obVelY(a0)
0001BF42 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF46 6000 FE64                  		bra.w	loc_18E7A
0001BF4A                            ; ===========================================================================
0001BF4A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BF54                            		even
0001BF54 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BF58                            		even
0001BF58 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BF5C                            		even
0001BF5C                            ; ===========================================================================
0001BF5C                            
0001BF5C                            Obj7B_Explode:	; Routine 8
0001BF5C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BF60 4228 0024                  		clr.b	obRoutine(a0)
0001BF64 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BF6A 6700                       		beq.s	Obj7B_MakeFrag
0001BF6C 4E75                       		rts	
0001BF6E                            ; ===========================================================================
0001BF6E                            
0001BF6E                            Obj7B_MakeFrag:
0001BF6E 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001BF74 7203                       		moveq	#3,d1
0001BF76 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001BF7A                            
0001BF7A                            Obj7B_Loop:
0001BF7A 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001BF80 6600                       		bne.s	loc_1909A
0001BF82 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001BF86 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001BF8C 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001BF94 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001BF9A 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001BFA0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BFA6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BFAC 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001BFB0 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001BFB4 137C 0098 0020             		move.b	#$98,obColType(a1)
0001BFBA 0029 0004 0001             		ori.b	#4,obRender(a1)
0001BFC0 08E9 0007 0001             		bset	#7,obRender(a1)
0001BFC6 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001BFCC                            
0001BFCC                            loc_1909A:
0001BFCC 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001BFD0                            
0001BFD0 4E75                       		rts	
0001BFD2                            ; ===========================================================================
0001BFD2 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001BFD6 FF60 FDC0                  		dc.w -$A0, -$240
0001BFDA 0100 FCC0                  		dc.w $100, -$340
0001BFDE 00A0 FDC0                  		dc.w $A0, -$240
0001BFE2                            ; ===========================================================================
0001BFE2                            
0001BFE2                            Obj7B_MoveFrag:	; Routine $A
0001BFE2 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001BFE8 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BFEE 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001BFF4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BFFA 7004                       		moveq	#4,d0
0001BFFC C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C000 E448                       		lsr.w	#2,d0
0001C002 1140 001A                  		move.b	d0,obFrame(a0)
0001C006 4A28 0001                  		tst.b	1(a0)
0001C00A 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C00E 4E75                       		rts	
0001C00E 4E75                       		rts	
0001C010                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C010                            ; ---------------------------------------------------------------------------
0001C010                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C010                            ; ---------------------------------------------------------------------------
0001C010                            Map_BSBall_internal:
0001C010 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C012 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C014 01                         @fireball1:	dc.b 1
0001C015 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C01A 01                         @fireball2:	dc.b 1
0001C01B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C020                            		even
0001C020                            		even
0001C020                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C020                            ; ---------------------------------------------------------------------------
0001C020                            ; Object 75 - Eggman (SYZ)
0001C020                            ; ---------------------------------------------------------------------------
0001C020                            
0001C020                            BossSpringYard:
0001C020 7000                       		moveq	#0,d0
0001C022 1028 0024                  		move.b	obRoutine(a0),d0
0001C026 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C02A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C02E                            ; ===========================================================================
0001C02E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C030 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C032 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C034 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C036 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C038                            
0001C038 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C03C 0401 0280                  		dc.b 4,	1, $02, $80
0001C040 0607 0280                  		dc.b 6,	7, $02, $80
0001C044 0800 0280                  		dc.b 8,	0, $02, $80
0001C048                            ; ===========================================================================
0001C048                            
0001C048                            Obj75_Main:	; Routine 0
0001C048 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C04E 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C054 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C05A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C060 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C066 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C06C 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C070 2248                       		movea.l	a0,a1
0001C072 7203                       		moveq	#3,d1
0001C074 6000                       		bra.s	Obj75_LoadBoss
0001C076                            ; ===========================================================================
0001C076                            
0001C076                            Obj75_Loop:
0001C076 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001C07C 6600                       		bne.s	Obj75_ShipMain
0001C07E 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C082 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C088 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C08E                            
0001C08E                            Obj75_LoadBoss:
0001C08E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C094 4229 0025                  		clr.b	ob2ndRout(a1)
0001C098 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C09C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C0A0 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C0A4 237C 0001 ABFA 0004        		move.l	#Map_Eggman,obMap(a1)
0001C0AC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C0B2 137C 0004 0001             		move.b	#4,obRender(a1)
0001C0B8 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C0BE 2348 0034                  		move.l	a0,$34(a1)
0001C0C2 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C0C6                            
0001C0C6                            Obj75_ShipMain:	; Routine 2
0001C0C6 7000                       		moveq	#0,d0
0001C0C8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C0CC 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C0D0 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C0D4 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001C0DA 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001C0E0 7003                       		moveq	#3,d0
0001C0E2 C028 0022                  		and.b	obStatus(a0),d0
0001C0E6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C0EC 8128 0001                  		or.b	d0,obRender(a0)
0001C0F0 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C0F6                            ; ===========================================================================
0001C0F6 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C0FA 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C0FE 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C102                            ; ===========================================================================
0001C102                            
0001C102                            loc_191CC:
0001C102 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C108 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C10E 6400                       		bcc.s	loc_191DE
0001C110 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C114                            
0001C114                            loc_191DE:
0001C114 1028 003F                  		move.b	$3F(a0),d0
0001C118 5428 003F                  		addq.b	#2,$3F(a0)
0001C11C 4EB9 0000 37AE             		jsr	(CalcSine).l
0001C122 E440                       		asr.w	#2,d0
0001C124 3140 0012                  		move.w	d0,obVelY(a0)
0001C128                            
0001C128                            loc_191F2:
0001C128 6100 E66C                  		bsr.w	BossMove
0001C12C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C132 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C138                            
0001C138                            loc_19202:
0001C138 3028 0008                  		move.w	8(a0),d0
0001C13C 0440 2C00                  		subi.w	#$2C00,d0
0001C140 EA48                       		lsr.w	#5,d0
0001C142 1140 0034                  		move.b	d0,$34(a0)
0001C146 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C14C 6400                       		bcc.s	locret_19256
0001C14E 4A28 0022                  		tst.b	obStatus(a0)
0001C152 6B00                       		bmi.s	loc_19258
0001C154 4A28 0020                  		tst.b	obColType(a0)
0001C158 6600                       		bne.s	locret_19256
0001C15A 4A28 003E                  		tst.b	$3E(a0)
0001C15E 6600                       		bne.s	loc_1923A
0001C160 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C170                            
0001C170                            loc_1923A:
0001C170 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C174 7000                       		moveq	#0,d0
0001C176 4A51                       		tst.w	(a1)
0001C178 6600                       		bne.s	loc_19248
0001C17A 303C 0EEE                  		move.w	#cWhite,d0
0001C17E                            
0001C17E                            loc_19248:
0001C17E 3280                       		move.w	d0,(a1)
0001C180 5328 003E                  		subq.b	#1,$3E(a0)
0001C184 6600                       		bne.s	locret_19256
0001C186 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C18C                            
0001C18C                            locret_19256:
0001C18C 4E75                       		rts	
0001C18E                            ; ===========================================================================
0001C18E                            
0001C18E                            loc_19258:
0001C18E 7064                       		moveq	#100,d0
0001C190 6100 0000                  		bsr.w	AddPoints
0001C194 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C19A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C1A0 4268 0010                  		clr.w	obVelX(a0)
0001C1A4 4E75                       		rts	
0001C1A6                            ; ===========================================================================
0001C1A6                            
0001C1A6                            loc_19270:
0001C1A6 3028 0030                  		move.w	$30(a0),d0
0001C1AA 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C1B0 0828 0000 0022             		btst	#0,obStatus(a0)
0001C1B6 6600                       		bne.s	loc_1928E
0001C1B8 4468 0010                  		neg.w	obVelX(a0)
0001C1BC 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C1C0 6E00                       		bgt.s	loc_1929E
0001C1C2 6000                       		bra.s	loc_19294
0001C1C4                            ; ===========================================================================
0001C1C4                            
0001C1C4                            loc_1928E:
0001C1C4 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C1C8 6D00                       		blt.s	loc_1929E
0001C1CA                            
0001C1CA                            loc_19294:
0001C1CA 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C1D0 4228 003D                  		clr.b	$3D(a0)
0001C1D4                            
0001C1D4                            loc_1929E:
0001C1D4 0440 2C10                  		subi.w	#$2C10,d0
0001C1D8 0240 001F                  		andi.w	#$1F,d0
0001C1DC 0440 001F                  		subi.w	#$1F,d0
0001C1E0 6A00                       		bpl.s	loc_192AE
0001C1E2 4440                       		neg.w	d0
0001C1E4                            
0001C1E4                            loc_192AE:
0001C1E4 5340                       		subq.w	#1,d0
0001C1E6 6E00                       		bgt.s	loc_192E8
0001C1E8 4A28 003D                  		tst.b	$3D(a0)
0001C1EC 6600                       		bne.s	loc_192E8
0001C1EE 3238 D008                  		move.w	(v_player+obX).w,d1
0001C1F2 0441 2C00                  		subi.w	#$2C00,d1
0001C1F6 EA41                       		asr.w	#5,d1
0001C1F8 B228 0034                  		cmp.b	$34(a0),d1
0001C1FC 6600                       		bne.s	loc_192E8
0001C1FE 7000                       		moveq	#0,d0
0001C200 1028 0034                  		move.b	$34(a0),d0
0001C204 EB40                       		asl.w	#5,d0
0001C206 0640 2C10                  		addi.w	#$2C10,d0
0001C20A 3140 0030                  		move.w	d0,$30(a0)
0001C20E 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C212 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C216 4268 0028                  		clr.w	obSubtype(a0)
0001C21A 4268 0010                  		clr.w	obVelX(a0)
0001C21E                            
0001C21E                            loc_192E8:
0001C21E 6000 FEF4                  		bra.w	loc_191DE
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            loc_192EC:
0001C222 7000                       		moveq	#0,d0
0001C224 1028 0028                  		move.b	obSubtype(a0),d0
0001C228 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C22C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C230                            ; ===========================================================================
0001C230 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C232 0000                       		dc.w loc_19348-off_192FA
0001C234 0000                       		dc.w loc_1938E-off_192FA
0001C236 0000                       		dc.w loc_193D0-off_192FA
0001C238                            ; ===========================================================================
0001C238                            
0001C238                            loc_19302:
0001C238 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C23E 3028 0038                  		move.w	$38(a0),d0
0001C242 0C40 0556                  		cmpi.w	#$556,d0
0001C246 6500                       		bcs.s	loc_19344
0001C248 317C 0556 0038             		move.w	#$556,$38(a0)
0001C24E 4268 003C                  		clr.w	$3C(a0)
0001C252 70FF                       		moveq	#-1,d0
0001C254 3028 0036                  		move.w	$36(a0),d0
0001C258 6700                       		beq.s	loc_1933C
0001C25A 2240                       		movea.l	d0,a1
0001C25C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C262 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C268 2348 0034                  		move.l	a0,$34(a1)
0001C26C 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C272                            
0001C272                            loc_1933C:
0001C272 4268 0012                  		clr.w	obVelY(a0)
0001C276 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C27A                            
0001C27A                            loc_19344:
0001C27A 6000 FEAC                  		bra.w	loc_191F2
0001C27E                            ; ===========================================================================
0001C27E                            
0001C27E                            loc_19348:
0001C27E 5368 003C                  		subq.w	#1,$3C(a0)
0001C282 6A00                       		bpl.s	loc_19366
0001C284 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C288 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C28E 4A68 0036                  		tst.w	$36(a0)
0001C292 6600                       		bne.s	loc_19362
0001C294 E0E8 0012                  		asr	obVelY(a0)
0001C298                            
0001C298                            loc_19362:
0001C298 7000                       		moveq	#0,d0
0001C29A 6000                       		bra.s	loc_1937C
0001C29C                            ; ===========================================================================
0001C29C                            
0001C29C                            loc_19366:
0001C29C 7000                       		moveq	#0,d0
0001C29E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C2A4 6E00                       		bgt.s	loc_1937C
0001C2A6 7002                       		moveq	#2,d0
0001C2A8 0828 0001 003D             		btst	#1,$3D(a0)
0001C2AE 6700                       		beq.s	loc_1937C
0001C2B0 4440                       		neg.w	d0
0001C2B2                            
0001C2B2                            loc_1937C:
0001C2B2 D068 0038                  		add.w	$38(a0),d0
0001C2B6 3140 000C                  		move.w	d0,obY(a0)
0001C2BA 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C2C0 6000 FE76                  		bra.w	loc_19202
0001C2C4                            ; ===========================================================================
0001C2C4                            
0001C2C4                            loc_1938E:
0001C2C4 303C 04DA                  		move.w	#$4DA,d0
0001C2C8 4A68 0036                  		tst.w	$36(a0)
0001C2CC 6700                       		beq.s	loc_1939C
0001C2CE 0440 0018                  		subi.w	#$18,d0
0001C2D2                            
0001C2D2                            loc_1939C:
0001C2D2 B068 0038                  		cmp.w	$38(a0),d0
0001C2D6 6D00                       		blt.s	loc_193BE
0001C2D8 317C 0008 003C             		move.w	#8,$3C(a0)
0001C2DE 4A68 0036                  		tst.w	$36(a0)
0001C2E2 6700                       		beq.s	loc_193B4
0001C2E4 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C2EA                            
0001C2EA                            loc_193B4:
0001C2EA 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C2EE 4268 0012                  		clr.w	obVelY(a0)
0001C2F2 6000                       		bra.s	loc_193CC
0001C2F4                            ; ===========================================================================
0001C2F4                            
0001C2F4                            loc_193BE:
0001C2F4 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C2FA 6C00                       		bge.s	loc_193CC
0001C2FC 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C302                            
0001C302                            loc_193CC:
0001C302 6000 FE24                  		bra.w	loc_191F2
0001C306                            ; ===========================================================================
0001C306                            
0001C306                            loc_193D0:
0001C306 5368 003C                  		subq.w	#1,$3C(a0)
0001C30A 6E00                       		bgt.s	loc_19406
0001C30C 6B00                       		bmi.s	loc_193EE
0001C30E 70FF                       		moveq	#-1,d0
0001C310 3028 0036                  		move.w	$36(a0),d0
0001C314 6700                       		beq.s	loc_193E8
0001C316 2240                       		movea.l	d0,a1
0001C318 137C 000A 0029             		move.b	#$A,$29(a1)
0001C31E                            
0001C31E                            loc_193E8:
0001C31E 4268 0036                  		clr.w	$36(a0)
0001C322 6000                       		bra.s	loc_19406
0001C324                            ; ===========================================================================
0001C324                            
0001C324                            loc_193EE:
0001C324 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C32A 6600                       		bne.s	loc_19406
0001C32C 4228 0029                  		clr.b	$29(a0)
0001C330 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C334 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C33A 6000                       		bra.s	loc_19446
0001C33C                            ; ===========================================================================
0001C33C                            
0001C33C                            loc_19406:
0001C33C 7001                       		moveq	#1,d0
0001C33E 4A68 0036                  		tst.w	$36(a0)
0001C342 6700                       		beq.s	loc_19410
0001C344 7002                       		moveq	#2,d0
0001C346                            
0001C346                            loc_19410:
0001C346 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C34C 6700                       		beq.s	loc_19424
0001C34E 6D00                       		blt.s	loc_1941C
0001C350 4440                       		neg.w	d0
0001C352                            
0001C352                            loc_1941C:
0001C352 4A68 0036                  		tst.w	$36(a0)
0001C356 D168 0038                  		add.w	d0,$38(a0)
0001C35A                            
0001C35A                            loc_19424:
0001C35A 7000                       		moveq	#0,d0
0001C35C 4A68 0036                  		tst.w	$36(a0)
0001C360 6700                       		beq.s	loc_19438
0001C362 7002                       		moveq	#2,d0
0001C364 0828 0000 003D             		btst	#0,$3D(a0)
0001C36A 6700                       		beq.s	loc_19438
0001C36C 4440                       		neg.w	d0
0001C36E                            
0001C36E                            loc_19438:
0001C36E D068 0038                  		add.w	$38(a0),d0
0001C372 3140 000C                  		move.w	d0,obY(a0)
0001C376 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C37C                            
0001C37C                            loc_19446:
0001C37C 6000 FDBA                  		bra.w	loc_19202
0001C380                            
0001C380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C380                            
0001C380                            
0001C380                            Obj75_FindBlocks:
0001C380 4268 0036                  		clr.w	$36(a0)
0001C384 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C388 703E                       		moveq	#$3E,d0
0001C38A 7276                       		moveq	#$76,d1
0001C38C 1428 0034                  		move.b	$34(a0),d2
0001C390                            
0001C390                            Obj75_FindLoop:
0001C390 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C392 6600                       		bne.s	loc_1946A	; if not, branch
0001C394 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C398 6600                       		bne.s	loc_1946A
0001C39A 3149 0036                  		move.w	a1,$36(a0)
0001C39E 6000                       		bra.s	locret_19472
0001C3A0                            ; ===========================================================================
0001C3A0                            
0001C3A0                            loc_1946A:
0001C3A0 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C3A4 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C3A8                            
0001C3A8                            locret_19472:
0001C3A8 4E75                       		rts	
0001C3AA                            ; End of function Obj75_FindBlocks
0001C3AA                            
0001C3AA                            ; ===========================================================================
0001C3AA                            
0001C3AA                            loc_19474:
0001C3AA 5368 003C                  		subq.w	#1,$3C(a0)
0001C3AE 6B00                       		bmi.s	loc_1947E
0001C3B0 6000 E3A2                  		bra.w	BossDefeated
0001C3B4                            ; ===========================================================================
0001C3B4                            
0001C3B4                            loc_1947E:
0001C3B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3B8 4268 0012                  		clr.w	obVelY(a0)
0001C3BC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C3C2 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C3C8 4268 0010                  		clr.w	obVelX(a0)
0001C3CC 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C3D2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C3D6 6600                       		bne.s	loc_194A8
0001C3D8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C3DE                            
0001C3DE                            loc_194A8:
0001C3DE 6000 FD58                  		bra.w	loc_19202
0001C3E2                            ; ===========================================================================
0001C3E2                            
0001C3E2                            loc_194AC:
0001C3E2 5268 003C                  		addq.w	#1,$3C(a0)
0001C3E6 6700                       		beq.s	loc_194BC
0001C3E8 6A00                       		bpl.s	loc_194C2
0001C3EA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C3F0 6000                       		bra.s	loc_194EE
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            loc_194BC:
0001C3F2 4268 0012                  		clr.w	obVelY(a0)
0001C3F6 6000                       		bra.s	loc_194EE
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            loc_194C2:
0001C3F8 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C3FE 6500                       		bcs.s	loc_194DA
0001C400 6700                       		beq.s	loc_194E0
0001C402 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C408 6500                       		bcs.s	loc_194EE
0001C40A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C40E 6000                       		bra.s	loc_194EE
0001C410                            ; ===========================================================================
0001C410                            
0001C410                            loc_194DA:
0001C410 5168 0012                  		subq.w	#8,obVelY(a0)
0001C414 6000                       		bra.s	loc_194EE
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            loc_194E0:
0001C416 4268 0012                  		clr.w    obVelY(a0)
0001C41A 4A38 FE2D                          	tst.b     (v_invinc).w
0001C41E 6600                               	bne.s   @boss_invinc
0001C420                            
0001C420 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C424 6000 0000                          	bra.w      @boss_play
0001C428                            
0001C428                            @boss_invinc:
0001C428 103C 0000                          	move.b #bgm_Invincible,d0
0001C42C                            
0001C42C                            @boss_play:
0001C42C 4EB8 0FC6                          	jsr PlaySound
0001C430                            
0001C430                            loc_194EE:
0001C430 6000 FCF6                  		bra.w	loc_191F2
0001C434                            ; ===========================================================================
0001C434                            
0001C434                            loc_194F2:
0001C434 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C43A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C440 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C446 6400                       		bcc.s	loc_1950C
0001C448 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C44C 6000                       		bra.s	loc_19512
0001C44E                            ; ===========================================================================
0001C44E                            
0001C44E                            loc_1950C:
0001C44E 4A28 0001                  		tst.b	obRender(a0)
0001C452 6A00                       		bpl.s	Obj75_ShipDelete
0001C454                            
0001C454                            loc_19512:
0001C454 6100 E340                  		bsr.w	BossMove
0001C458 6000 FCBA                  		bra.w	loc_191DE
0001C45C                            ; ===========================================================================
0001C45C                            
0001C45C                            Obj75_ShipDelete:
0001C45C 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C462                            ; ===========================================================================
0001C462                            
0001C462                            Obj75_FaceMain:	; Routine 4
0001C462 7201                       		moveq	#1,d1
0001C464 2268 0034                  		movea.l	$34(a0),a1
0001C468 7000                       		moveq	#0,d0
0001C46A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C46E 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C472 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C476 1141 001C                  		move.b	d1,obAnim(a0)
0001C47A 1010                       		move.b	(a0),d0
0001C47C B011                       		cmp.b	(a1),d0
0001C47E 6600                       		bne.s	Obj75_FaceDelete
0001C480 6000                       		bra.s	loc_195BE
0001C482                            ; ===========================================================================
0001C482                            
0001C482                            Obj75_FaceDelete:
0001C482 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C488                            ; ===========================================================================
0001C488 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C48C 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C490 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C494                            ; ===========================================================================
0001C494                            
0001C494                            loc_19552:
0001C494 720A                       		moveq	#$A,d1
0001C496 4E75                       		rts	
0001C498                            ; ===========================================================================
0001C498                            
0001C498                            loc_19556:
0001C498 7206                       		moveq	#6,d1
0001C49A 4E75                       		rts	
0001C49C                            ; ===========================================================================
0001C49C                            
0001C49C                            loc_1955A:
0001C49C 7000                       		moveq	#0,d0
0001C49E 1029 0028                  		move.b	obSubtype(a1),d0
0001C4A2 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C4A6 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C4AA                            ; ===========================================================================
0001C4AA 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C4AE 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C4B2                            ; ===========================================================================
0001C4B2                            
0001C4B2                            loc_19570:
0001C4B2 6000                       		bra.s	loc_19574
0001C4B4                            ; ===========================================================================
0001C4B4                            
0001C4B4                            loc_19572:
0001C4B4 7206                       		moveq	#6,d1
0001C4B6                            
0001C4B6                            loc_19574:
0001C4B6 4A29 0020                  		tst.b	obColType(a1)
0001C4BA 6600                       		bne.s	loc_1957E
0001C4BC 7205                       		moveq	#5,d1
0001C4BE 4E75                       		rts	
0001C4C0                            ; ===========================================================================
0001C4C0                            
0001C4C0                            loc_1957E:
0001C4C0 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C4C6 6500                       		bcs.s	locret_19588
0001C4C8 7204                       		moveq	#4,d1
0001C4CA                            
0001C4CA                            locret_19588:
0001C4CA 4E75                       		rts	
0001C4CC                            ; ===========================================================================
0001C4CC                            
0001C4CC                            Obj75_FlameMain:; Routine 6
0001C4CC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C4D2 2268 0034                  		movea.l	$34(a0),a1
0001C4D6 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C4DC 6600                       		bne.s	loc_195AA
0001C4DE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C4E4 4A28 0001                  		tst.b	1(a0)
0001C4E8 6A00                       		bpl.s	Obj75_FlameDelete
0001C4EA 6000                       		bra.s	loc_195B6
0001C4EC                            ; ===========================================================================
0001C4EC                            
0001C4EC                            loc_195AA:
0001C4EC 4A69 0010                  		tst.w	obVelX(a1)
0001C4F0 6700                       		beq.s	loc_195B6
0001C4F2 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C4F8                            
0001C4F8                            loc_195B6:
0001C4F8 6000                       		bra.s	loc_195BE
0001C4FA                            ; ===========================================================================
0001C4FA                            
0001C4FA                            Obj75_FlameDelete:
0001C4FA 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C500                            ; ===========================================================================
0001C500                            
0001C500                            loc_195BE:
0001C500 43F9 0001 ABAA             		lea	(Ani_Eggman).l,a1
0001C506 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001C50C 2268 0034                  		movea.l	$34(a0),a1
0001C510 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C516 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C51C                            
0001C51C                            loc_195DA:
0001C51C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C522 7003                       		moveq	#3,d0
0001C524 C028 0022                  		and.b	obStatus(a0),d0
0001C528 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C52E 8128 0001                  		or.b	d0,obRender(a0)
0001C532 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C538                            ; ===========================================================================
0001C538                            
0001C538                            Obj75_SpikeMain:; Routine 8
0001C538 217C 0001 ACEA 0004        		move.l	#Map_BossItems,obMap(a0)
0001C540 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C546 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C54C 2268 0034                  		movea.l	$34(a0),a1
0001C550 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C556 6600                       		bne.s	loc_1961C
0001C558 4A28 0001                  		tst.b	obRender(a0)
0001C55C 6A00                       		bpl.s	Obj75_SpikeDelete
0001C55E                            
0001C55E                            loc_1961C:
0001C55E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C564 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C56A 3028 003C                  		move.w	$3C(a0),d0
0001C56E 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C574 6600                       		bne.s	loc_19652
0001C576 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C57C 6700                       		beq.s	loc_1964C
0001C57E 4A29 0028                  		tst.b	obSubtype(a1)
0001C582 6600                       		bne.s	loc_19658
0001C584 0C40 0094                  		cmpi.w	#$94,d0
0001C588 6C00                       		bge.s	loc_19658
0001C58A 5E40                       		addq.w	#7,d0
0001C58C 6000                       		bra.s	loc_19658
0001C58E                            ; ===========================================================================
0001C58E                            
0001C58E                            loc_1964C:
0001C58E 4A69 003C                  		tst.w	$3C(a1)
0001C592 6A00                       		bpl.s	loc_19658
0001C594                            
0001C594                            loc_19652:
0001C594 4A40                       		tst.w	d0
0001C596 6F00                       		ble.s	loc_19658
0001C598 5B40                       		subq.w	#5,d0
0001C59A                            
0001C59A                            loc_19658:
0001C59A 3140 003C                  		move.w	d0,$3C(a0)
0001C59E E440                       		asr.w	#2,d0
0001C5A0 D168 000C                  		add.w	d0,obY(a0)
0001C5A4 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C5AA 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C5B0 4228 0020                  		clr.b	obColType(a0)
0001C5B4 2268 0034                  		movea.l	$34(a0),a1
0001C5B8 4A29 0020                  		tst.b	obColType(a1)
0001C5BC 6700                       		beq.s	loc_19688
0001C5BE 4A29 0029                  		tst.b	$29(a1)
0001C5C2 6600                       		bne.s	loc_19688
0001C5C4 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C5CA                            
0001C5CA                            loc_19688:
0001C5CA 6000 FF50                  		bra.w	loc_195DA
0001C5CE                            ; ===========================================================================
0001C5CE                            
0001C5CE                            Obj75_SpikeDelete:
0001C5CE 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C5CE 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C5D4                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C5D4                            ; ---------------------------------------------------------------------------
0001C5D4                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C5D4                            ; ---------------------------------------------------------------------------
0001C5D4                            
0001C5D4                            BossBlock:
0001C5D4 7000                       		moveq	#0,d0
0001C5D6 1028 0024                  		move.b	obRoutine(a0),d0
0001C5DA 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C5DE 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C5E2                            ; ===========================================================================
0001C5E2 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C5E4 0000                       		dc.w Obj76_Action-Obj76_Index
0001C5E6 0000                       		dc.w loc_19762-Obj76_Index
0001C5E8                            ; ===========================================================================
0001C5E8                            
0001C5E8                            Obj76_Main:	; Routine 0
0001C5E8 7800                       		moveq	#0,d4
0001C5EA 3A3C 2C10                  		move.w	#$2C10,d5
0001C5EE 7C09                       		moveq	#9,d6
0001C5F0 43D0                       		lea	(a0),a1
0001C5F2 6000                       		bra.s	Obj76_MakeBlock
0001C5F4                            ; ===========================================================================
0001C5F4                            
0001C5F4                            Obj76_Loop:
0001C5F4 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001C5FA 6600                       		bne.s	Obj76_ExitLoop
0001C5FC                            
0001C5FC                            Obj76_MakeBlock:
0001C5FC 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C600 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C608 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C60E 137C 0004 0001             		move.b	#4,obRender(a1)
0001C614 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C61A 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C620 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C626 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C62A 337C 0582 000C             		move.w	#$582,obY(a1)
0001C630 3344 0028                  		move.w	d4,obSubtype(a1)
0001C634 0644 0101                  		addi.w	#$101,d4
0001C638 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C63C 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C640 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C644                            
0001C644                            Obj76_ExitLoop:
0001C644 4E75                       		rts	
0001C646                            ; ===========================================================================
0001C646                            
0001C646                            Obj76_Action:	; Routine 2
0001C646 1028 0029                  		move.b	$29(a0),d0
0001C64A B028 0028                  		cmp.b	obSubtype(a0),d0
0001C64E 6700                       		beq.s	Obj76_Solid
0001C650 4A00                       		tst.b	d0
0001C652 6B00                       		bmi.s	loc_19718
0001C654                            
0001C654                            loc_19712:
0001C654 6100 0000                  		bsr.w	Obj76_Break
0001C658 6000                       		bra.s	Obj76_Display
0001C65A                            ; ===========================================================================
0001C65A                            
0001C65A                            loc_19718:
0001C65A 2268 0034                  		movea.l	$34(a0),a1
0001C65E 4A29 0021                  		tst.b	obColProp(a1)
0001C662 67F0                       		beq.s	loc_19712
0001C664 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C66A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C670 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C676 B2C8                       		cmpa.w	a0,a1
0001C678 6500                       		bcs.s	Obj76_Display
0001C67A 3029 0012                  		move.w	obVelY(a1),d0
0001C67E 48C0                       		ext.l	d0
0001C680 E080                       		asr.l	#8,d0
0001C682 D168 000C                  		add.w	d0,obY(a0)
0001C686 6000                       		bra.s	Obj76_Display
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            Obj76_Solid:
0001C688 323C 001B                  		move.w	#$1B,d1
0001C68C 343C 0010                  		move.w	#$10,d2
0001C690 363C 0011                  		move.w	#$11,d3
0001C694 3828 0008                  		move.w	obX(a0),d4
0001C698 4EB9 0001 1B64             		jsr	(SolidObject).l
0001C69E                            
0001C69E                            Obj76_Display:
0001C69E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C6A4                            ; ===========================================================================
0001C6A4                            
0001C6A4                            loc_19762:	; Routine 4
0001C6A4 4A28 0001                  		tst.b	obRender(a0)
0001C6A8 6A00                       		bpl.s	Obj76_Delete
0001C6AA 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001C6B0 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C6B6                            ; ===========================================================================
0001C6B6                            
0001C6B6                            Obj76_Delete:
0001C6B6 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C6BC                            
0001C6BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6BC                            
0001C6BC                            
0001C6BC                            Obj76_Break:
0001C6BC 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C6C0 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C6C4 7801                       		moveq	#1,d4
0001C6C6 7203                       		moveq	#3,d1
0001C6C8 7438                       		moveq	#$38,d2
0001C6CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C6CE 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C6D4 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C6DA 43D0                       		lea	(a0),a1
0001C6DC 6000                       		bra.s	Obj76_MakeFrag
0001C6DE                            ; ===========================================================================
0001C6DE                            
0001C6DE                            Obj76_LoopFrag:
0001C6DE 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001C6E4 6600                       		bne.s	loc_197D4
0001C6E6                            
0001C6E6                            Obj76_MakeFrag:
0001C6E6 45D0                       		lea	(a0),a2
0001C6E8 47D1                       		lea	(a1),a3
0001C6EA 7603                       		moveq	#3,d3
0001C6EC                            
0001C6EC                            loc_197AA:
0001C6EC 26DA                       		move.l	(a2)+,(a3)+
0001C6EE 26DA                       		move.l	(a2)+,(a3)+
0001C6F0 26DA                       		move.l	(a2)+,(a3)+
0001C6F2 26DA                       		move.l	(a2)+,(a3)+
0001C6F4 51CB FFF6                  		dbf	d3,loc_197AA
0001C6F8                            
0001C6F8 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C6FC 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C700 361D                       		move.w	(a5)+,d3
0001C702 D769 0008                  		add.w	d3,obX(a1)
0001C706 361D                       		move.w	(a5)+,d3
0001C708 D769 000C                  		add.w	d3,obY(a1)
0001C70C 1344 001A                  		move.b	d4,obFrame(a1)
0001C710 5244                       		addq.w	#1,d4
0001C712 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C716                            
0001C716                            loc_197D4:
0001C720                            ; End of function Obj76_Break
0001C720                            
0001C720                            ; ===========================================================================
0001C720 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C724 0180 FE00                  		dc.w $180, -$200
0001C728 FF00 FF00                  		dc.w -$100, -$100
0001C72C 0100 FF00                  		dc.w $100, -$100
0001C730 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C734 0010 0000                  		dc.w $10, 0
0001C738 0000 0010                  		dc.w 0,	$10
0001C73C 0010 0010                  		dc.w $10, $10
0001C73C 0010 0010                  		dc.w $10, $10
0001C740                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C740                            ; ---------------------------------------------------------------------------
0001C740                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C740                            ; ---------------------------------------------------------------------------
0001C740                            Map_BossBlock_internal:
0001C740 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C742 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C744 0000                       		dc.w @topright-Map_BossBlock_internal
0001C746 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C748 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C74A 02                         @wholeblock:	dc.b 2
0001C74B F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C750 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C755 00                         		dc.b 0
0001C756 01                         @topleft:	dc.b 1
0001C757 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C75C 01                         @topright:	dc.b 1
0001C75D F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C762 01                         @bottomleft:	dc.b 1
0001C763 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C768 01                         @bottomright:	dc.b 1
0001C769 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C76E                            		even
0001C76E                            		even
0001C76E                            
0001C76E                            loc_1982C:
0001C76E 4EF9 0000 F782             		jmp	(DeleteObject).l
0001C774                            
0001C774                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C774                            ; ---------------------------------------------------------------------------
0001C774                            ; Object 82 - Eggman (SBZ2)
0001C774                            ; ---------------------------------------------------------------------------
0001C774                            
0001C774                            ScrapEggman:
0001C774 7000                       		moveq	#0,d0
0001C776 1028 0024                  		move.b	obRoutine(a0),d0
0001C77A 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C77E 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C782                            ; ===========================================================================
0001C782 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C784 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C786 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C788                            
0001C788 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C78B 0400 03                    		dc.b 4,	0, 3
0001C78E                            ; ===========================================================================
0001C78E                            
0001C78E                            SEgg_Main:	; Routine 0
0001C78E 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C792 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001C798 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001C79E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C7A4 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C7AA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C7B0 4228 0025                  		clr.b	ob2ndRout(a0)
0001C7B4 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C7B8 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C7BC 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C7C0 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C7C8 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C7CE 117C 0004 0001             		move.b	#4,obRender(a0)
0001C7D4 08E8 0007 0001             		bset	#7,obRender(a0)
0001C7DA 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C7E0 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001C7E6 6600                       		bne.s	SEgg_Eggman
0001C7E8 2348 0034                  		move.l	a0,$34(a1)
0001C7EC 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C7F0 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001C7F6 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001C7FC 4228 0025                  		clr.b	ob2ndRout(a0)
0001C800 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C804 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C808 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C80C 237C 0000 DF86 0004        		move.l	#Map_But,obMap(a1)
0001C814 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C81A 137C 0004 0001             		move.b	#4,obRender(a1)
0001C820 08E9 0007 0001             		bset	#7,obRender(a1)
0001C826 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C82C 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C832                            
0001C832                            SEgg_Eggman:	; Routine 2
0001C832 7000                       		moveq	#0,d0
0001C834 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C838 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C83C 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C840 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C844 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001C84A 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C850                            ; ===========================================================================
0001C850 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C852 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C854 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C856 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C858                            ; ===========================================================================
0001C858                            
0001C858                            SEgg_ChkSonic:
0001C858 3028 0008                  		move.w	obX(a0),d0
0001C85C 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C860 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C864 6400                       		bcc.s	loc_19934	; if not, branch
0001C866 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C86A 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C870 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C876                            
0001C876                            loc_19934:
0001C876 4EF9 0000 F72E             		jmp	(SpeedToPos).l
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            SEgg_PreLeap:
0001C87C 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C880 6600                       		bne.s	loc_19954	; if time remains, branch
0001C882 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C886 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C88C 5868 000C                  		addq.w	#4,obY(a0)
0001C890 317C 000F 003C             		move.w	#15,$3C(a0)
0001C896                            
0001C896                            loc_19954:
0001C896 60DE                       		bra.s	loc_19934
0001C898                            ; ===========================================================================
0001C898                            
0001C898                            SEgg_Leap:
0001C898 5368 003C                  		subq.w	#1,$3C(a0)
0001C89C 6E00                       		bgt.s	loc_199D0
0001C89E 6600                       		bne.s	loc_1996A
0001C8A0 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C8A6 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C8AC                            
0001C8AC                            loc_1996A:
0001C8AC 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001C8B2 6E00                       		bgt.s	loc_19976
0001C8B4 4268 0010                  		clr.w	obVelX(a0)
0001C8B8                            
0001C8B8                            loc_19976:
0001C8B8 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C8BE 4A68 0012                  		tst.w	obVelY(a0)
0001C8C2 6B00                       		bmi.s	SEgg_FindBlocks
0001C8C4 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001C8CA 6500                       		bcs.s	SEgg_FindBlocks
0001C8CC 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C8D2 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001C8D8 6500                       		bcs.s	SEgg_FindBlocks
0001C8DA 317C 029B 000C             		move.w	#$29B,obY(a0)
0001C8E0 4268 0012                  		clr.w	obVelY(a0)
0001C8E4                            
0001C8E4                            SEgg_FindBlocks:
0001C8E4 3028 0010                  		move.w	obVelX(a0),d0
0001C8E8 8068 0012                  		or.w	obVelY(a0),d0
0001C8EC 6600                       		bne.s	loc_199D0
0001C8EE 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C8F2 703E                       		moveq	#$3E,d0
0001C8F4 7240                       		moveq	#$40,d1
0001C8F6                            
0001C8F6                            SEgg_FindLoop:	
0001C8F6 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C8F8 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C8FC 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C900                            
0001C900 6600                       		bne.s	loc_199D0
0001C902 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C908 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C90C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C912                            
0001C912                            loc_199D0:
0001C912 6000 FF62                  		bra.w	loc_19934
0001C916                            ; ===========================================================================
0001C916                            
0001C916                            SEgg_Switch:	; Routine 4
0001C916 7000                       		moveq	#0,d0
0001C918 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C91C 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C920 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C924                            ; ===========================================================================
0001C924 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C926 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C928                            ; ===========================================================================
0001C928                            
0001C928                            loc_199E6:
0001C928 2268 0034                  		movea.l	$34(a0),a1
0001C92C 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C932 6600                       		bne.s	SEgg_SwDisplay
0001C934 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C93A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C93E                            
0001C93E                            SEgg_SwDisplay:
0001C93E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C93E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001C944                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            ; Animation script - Eggman (SBZ2)
0001C944                            ; ---------------------------------------------------------------------------
0001C944 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C946 0000                       		dc.w @laugh-Ani_SEgg
0001C948 0000                       		dc.w @jump1-Ani_SEgg
0001C94A 0000                       		dc.w @intube-Ani_SEgg
0001C94C 0000                       		dc.w @running-Ani_SEgg
0001C94E 0000                       		dc.w @jump2-Ani_SEgg
0001C950 0000                       		dc.w @starjump-Ani_SEgg
0001C952 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C956 00                         		even
0001C956 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C95A 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C962 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C966 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001C96C 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001C972 00                         		even
0001C972 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001C976 00                         		even
0001C976 00                         		even
0001C976                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001C976                            ; --------------------------------------------------------------------------------
0001C976                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001C976                            ; --------------------------------------------------------------------------------
0001C976                            
0001C976                            SME_y00JM:	
0001C976 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001C97A 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001C97E 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001C982 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001C986 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001C98A 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001C98C 03                         SME_y00JM_16:	dc.b 3	
0001C98D FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001C992 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001C997 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001C99C 07                         SME_y00JM_26:	dc.b 7	
0001C99D E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001C9A2 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001C9A7 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001C9AC F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001C9B1 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001C9B6 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001C9BB F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001C9C0 07                         SME_y00JM_4A:	dc.b 7	
0001C9C1 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001C9C6 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001C9CB F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001C9D0 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001C9D5 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001C9DA F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001C9DF 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001C9E4 04                         SME_y00JM_6E:	dc.b 4	
0001C9E5 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001C9EA F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001C9EF 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001C9F4 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001C9F9 07                         SME_y00JM_83:	dc.b 7	
0001C9FA F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001C9FF F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CA04 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CA09 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CA0E E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CA13 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CA18 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CA1D 04                         SME_y00JM_A7:	dc.b 4	
0001CA1E E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CA23 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CA28 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CA2D 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CA32 07                         SME_y00JM_BC:	dc.b 7	
0001CA33 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CA38 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CA3D 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CA42 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CA47 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CA4C F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CA51 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CA56 05                         SME_y00JM_E0:	dc.b 5	
0001CA57 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CA5C F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CA61 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CA66 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CA6B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CA70 06                         SME_y00JM_FA:	dc.b 6	
0001CA71 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CA76 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CA7B 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CA80 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CA85 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CA8A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CA8F 08                         SME_y00JM_119:	dc.b 8	
0001CA90 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CA95 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CA9A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CA9F 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CAA4 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CAA9 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CAAE 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CAB3 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CAB8 03                         SME_y00JM_142:	dc.b 3	
0001CAB9 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CABE F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CAC3 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CAC8                            		even
0001CAC8                            		even
0001CAC8                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CAC8                            ; ---------------------------------------------------------------------------
0001CAC8                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CAC8                            ; ---------------------------------------------------------------------------
0001CAC8                            
0001CAC8                            FalseFloor:
0001CAC8 7000                       		moveq	#0,d0
0001CACA 1028 0024                  		move.b	obRoutine(a0),d0
0001CACE 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CAD2 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CAD6                            ; ===========================================================================
0001CAD6 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CAD8 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CADA 0000                       		dc.w loc_19C36-FFloor_Index
0001CADC 0000                       		dc.w loc_19C62-FFloor_Index
0001CADE 0000                       		dc.w loc_19C72-FFloor_Index
0001CAE0 0000                       		dc.w loc_19C80-FFloor_Index
0001CAE2                            ; ===========================================================================
0001CAE2                            
0001CAE2                            FFloor_Main:	; Routine 0
0001CAE2 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CAE8 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CAEE 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CAF4 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CAFA 117C 0004 0001             		move.b	#4,obRender(a0)
0001CB00 08E8 0007 0001             		bset	#7,obRender(a0)
0001CB06 7800                       		moveq	#0,d4
0001CB08 3A3C 1B10                  		move.w	#$1B10,d5
0001CB0C 7C07                       		moveq	#7,d6
0001CB0E 45E8 0030                  		lea	$30(a0),a2
0001CB12                            
0001CB12                            FFloor_MakeBlock:
0001CB12 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001CB18 6600                       		bne.s	FFloor_ExitMake
0001CB1A 34C9                       		move.w	a1,(a2)+
0001CB1C 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CB20 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CB28 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CB2E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB34 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CB3A 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CB40 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CB46 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CB4A 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CB50 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CB54 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CB5A 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CB5E                            
0001CB5E                            FFloor_ExitMake:
0001CB5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB62 4E75                       		rts	
0001CB64                            ; ===========================================================================
0001CB64                            
0001CB64                            FFloor_ChkBreak:; Routine 2
0001CB64 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CB6A 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CB6C 4228 001A                  		clr.b	obFrame(a0)
0001CB70 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CB74                            
0001CB74                            FFloor_Solid:
0001CB74 7000                       		moveq	#0,d0
0001CB76 1028 001A                  		move.b	obFrame(a0),d0
0001CB7A 4400                       		neg.b	d0
0001CB7C 4880                       		ext.w	d0
0001CB7E 5040                       		addq.w	#8,d0
0001CB80 E940                       		asl.w	#4,d0
0001CB82 383C 1C00                  		move.w	#$1C00,d4
0001CB86 9840                       		sub.w	d0,d4
0001CB88 1140 0014                  		move.b	d0,obActWid(a0)
0001CB8C 3144 0008                  		move.w	d4,obX(a0)
0001CB90 720B                       		moveq	#$B,d1
0001CB92 D240                       		add.w	d0,d1
0001CB94 7410                       		moveq	#$10,d2
0001CB96 7611                       		moveq	#$11,d3
0001CB98 4EF9 0001 1B64             		jmp	(SolidObject).l
0001CB9E                            ; ===========================================================================
0001CB9E                            
0001CB9E                            loc_19C36:	; Routine 4
0001CB9E 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CBA4 6400                       		bcc.s	FFloor_Solid2
0001CBA6 70FF                       		moveq	#-1,d0
0001CBA8 1028 001A                  		move.b	obFrame(a0),d0
0001CBAC 4880                       		ext.w	d0
0001CBAE D040                       		add.w	d0,d0
0001CBB0 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CBB4 2240                       		movea.l	d0,a1
0001CBB6 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CBBC 5228 001A                  		addq.b	#1,obFrame(a0)
0001CBC0 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CBC6 6700                       		beq.s	loc_19C62
0001CBC8                            
0001CBC8                            FFloor_Solid2:
0001CBC8 60AA                       		bra.s	FFloor_Solid
0001CBCA                            ; ===========================================================================
0001CBCA                            
0001CBCA                            loc_19C62:	; Routine 6
0001CBCA 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CBD0 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CBD6 6000 FB96                  		bra.w	loc_1982C
0001CBDA                            ; ===========================================================================
0001CBDA                            
0001CBDA                            loc_19C72:	; Routine 8
0001CBDA 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CBE0 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CBE2 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001CBE8                            ; ===========================================================================
0001CBE8                            
0001CBE8                            loc_19C80:	; Routine $A
0001CBE8 4A28 0001                  		tst.b	obRender(a0)
0001CBEC 6A00 FB80                  		bpl.w	loc_1982C
0001CBF0 4EB9 0000 F6F6             		jsr	(ObjectFall).l
0001CBF6 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001CBFC                            ; ===========================================================================
0001CBFC                            
0001CBFC                            FFloor_Break:
0001CBFC 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CC00 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CC04 7801                       		moveq	#1,d4
0001CC06 7203                       		moveq	#3,d1
0001CC08 7438                       		moveq	#$38,d2
0001CC0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC0E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CC14 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CC1A 43D0                       		lea	(a0),a1
0001CC1C 6000                       		bra.s	FFloor_MakeFrag
0001CC1E                            ; ===========================================================================
0001CC1E                            
0001CC1E                            FFloor_LoopFrag:
0001CC1E 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001CC24 6600                       		bne.s	FFloor_BreakSnd
0001CC26                            
0001CC26                            FFloor_MakeFrag:
0001CC26 45D0                       		lea	(a0),a2
0001CC28 47D1                       		lea	(a1),a3
0001CC2A 7603                       		moveq	#3,d3
0001CC2C                            
0001CC2C                            loc_19CC4:
0001CC2C 26DA                       		move.l	(a2)+,(a3)+
0001CC2E 26DA                       		move.l	(a2)+,(a3)+
0001CC30 26DA                       		move.l	(a2)+,(a3)+
0001CC32 26DA                       		move.l	(a2)+,(a3)+
0001CC34 51CB FFF6                  		dbf	d3,loc_19CC4
0001CC38                            
0001CC38 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CC3C 361D                       		move.w	(a5)+,d3
0001CC3E D769 0008                  		add.w	d3,obX(a1)
0001CC42 361D                       		move.w	(a5)+,d3
0001CC44 D769 000C                  		add.w	d3,obY(a1)
0001CC48 1344 001A                  		move.b	d4,obFrame(a1)
0001CC4C 5244                       		addq.w	#1,d4
0001CC4E 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CC52                            
0001CC52                            FFloor_BreakSnd:
0001CC5C 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001CC62                            ; ===========================================================================
0001CC62 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CC66 0120 00C0                  		dc.w $120, $C0
0001CC6A FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CC6E 0010 0000                  		dc.w $10, 0
0001CC72 0000 0010                  		dc.w 0,	$10
0001CC76 0010 0010                  		dc.w $10, $10
0001CC76 0010 0010                  		dc.w $10, $10
0001CC7A                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CC7A                            ; ---------------------------------------------------------------------------
0001CC7A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CC7A                            ; ---------------------------------------------------------------------------
0001CC7A                            Map_FFloor_internal:
0001CC7A 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CC7C 0000                       		dc.w @topleft-Map_FFloor_internal
0001CC7E 0000                       		dc.w @topright-Map_FFloor_internal
0001CC80 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CC82 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CC84 01                         @wholeblock:	dc.b 1
0001CC85 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CC8A 02                         @topleft:	dc.b 2
0001CC8B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CC90 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CC95 00                         		dc.b 0
0001CC96 02                         @topright:	dc.b 2
0001CC97 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CC9C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CCA1 00                         		dc.b 0
0001CCA2 02                         @bottomleft:	dc.b 2
0001CCA3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CCA8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CCAD 00                         		dc.b 0
0001CCAE 02                         @bottomright:	dc.b 2
0001CCAF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CCB4 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CCBA 00                         		even
0001CCBA 00                         		even
0001CCBA                            		include	"_incObj\85 Boss - Final.asm"
0001CCBA                            ; ---------------------------------------------------------------------------
0001CCBA                            ; Object 85 - Eggman (FZ)
0001CCBA                            ; ---------------------------------------------------------------------------
0001CCBA                            
0001CCBA                            Obj85_Delete:
0001CCBA 4EF9 0000 F782             		jmp	(DeleteObject).l
0001CCC0                            ; ===========================================================================
0001CCC0                            
0001CCC0                            BossFinal:
0001CCC0 7000                       		moveq	#0,d0
0001CCC2 1028 0024                  		move.b	obRoutine(a0),d0
0001CCC6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CCCA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CCCE                            ; ===========================================================================
0001CCCE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CCD0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CCD2 0000                       		dc.w loc_1A38E-Obj85_Index
0001CCD4 0000                       		dc.w loc_1A346-Obj85_Index
0001CCD6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CCD8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CCDA 0000                       		dc.w loc_1A264-Obj85_Index
0001CCDC                            
0001CCDC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CCE2 0001 C976                  		dc.l Map_SEgg		; mappings pointer
0001CCE6 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CCEC 0000 0000                  		dc.l Map_EggCyl
0001CCF0 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CCF6 0000 0000                  		dc.l Map_FZLegs
0001CCFA 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CD00 0001 C976                  		dc.l Map_SEgg
0001CD04 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD0A 0001 ABFA                  		dc.l Map_Eggman
0001CD0E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD14 0001 ABFA                  		dc.l Map_Eggman
0001CD18                            
0001CD18                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CD18 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CD1E 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CD24 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CD2A 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CD30 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CD36 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CD3C                            ; ===========================================================================
0001CD3C                            
0001CD3C                            Obj85_Main:	; Routine 0
0001CD3C 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CD40 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CD44 2248                       		movea.l	a0,a1
0001CD46 7205                       		moveq	#5,d1
0001CD48 6000                       		bra.s	Obj85_LoadBoss
0001CD4A                            ; ===========================================================================
0001CD4A                            
0001CD4A                            Obj85_Loop:
0001CD4A 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001CD50 6600                       		bne.s	loc_19E20
0001CD52                            
0001CD52                            Obj85_LoadBoss:
0001CD52 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CD56 335A 0008                  		move.w	(a2)+,obX(a1)
0001CD5A 335A 000C                  		move.w	(a2)+,obY(a1)
0001CD5E 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CD62 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CD66 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CD6A 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CD6E 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CD72 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CD76 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CD7A 137C 0004 0001             		move.b	#4,obRender(a1)
0001CD80 08E8 0007 0001             		bset	#7,obRender(a0)
0001CD86 2348 0034                  		move.l	a0,$34(a1)
0001CD8A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CD8E                            
0001CD8E                            loc_19E20:
0001CD8E 45E8 0036                  		lea	$36(a0),a2
0001CD92 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001CD98 6600                       		bne.s	loc_19E5A
0001CD9A 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CD9E 3489                       		move.w	a1,(a2)
0001CDA0 2348 0034                  		move.l	a0,$34(a1)
0001CDA4 45E8 0038                  		lea	$38(a0),a2
0001CDA8 7400                       		moveq	#0,d2
0001CDAA 7203                       		moveq	#3,d1
0001CDAC                            
0001CDAC                            loc_19E3E:
0001CDAC 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001CDB2 6600                       		bne.s	loc_19E5A
0001CDB4 34C9                       		move.w	a1,(a2)+
0001CDB6 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CDBA 2348 0034                  		move.l	a0,$34(a1)
0001CDBE 1342 0028                  		move.b	d2,obSubtype(a1)
0001CDC2 5442                       		addq.w	#2,d2
0001CDC4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CDC8                            
0001CDC8                            loc_19E5A:
0001CDC8 317C 0000 0034             		move.w	#0,$34(a0)
0001CDCE 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CDD4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CDDA                            
0001CDDA                            Obj85_Eggman:	; Routine 2
0001CDDA 7000                       		moveq	#0,d0
0001CDDC 1028 0034                  		move.b	$34(a0),d0
0001CDE0 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CDE4 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CDE8 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001CDEE                            ; ===========================================================================
0001CDEE 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CDF2 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CDF6 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CDFA 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CDFE                            ; ===========================================================================
0001CDFE                            
0001CDFE                            loc_19E90:
0001CDFE 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CE02 6600                       		bne.s	loc_19EA2
0001CE04 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CE0A 6500                       		bcs.s	loc_19EA2
0001CE0C 5428 0034                  		addq.b	#2,$34(a0)
0001CE10                            
0001CE10                            loc_19EA2:
0001CE10 52B8 F636                  		addq.l	#1,(v_random).w
0001CE14 4E75                       		rts	
0001CE16                            ; ===========================================================================
0001CE16                            
0001CE16                            loc_19EA8:
0001CE16 4A68 0030                  		tst.w	$30(a0)
0001CE1A 6A00                       		bpl.s	loc_19F10
0001CE1C 4268 0030                  		clr.w	$30(a0)
0001CE20 4EB9 0000 3788             		jsr	(RandomNumber).l
0001CE26 0240 000C                  		andi.w	#$C,d0
0001CE2A 3200                       		move.w	d0,d1
0001CE2C 5441                       		addq.w	#2,d1
0001CE2E 4A80                       		tst.l	d0
0001CE30 6A00                       		bpl.s	loc_19EC6
0001CE32 C340                       		exg	d1,d0
0001CE34                            
0001CE34                            loc_19EC6:
0001CE34 43FA 0000                  		lea	word_19FD6(pc),a1
0001CE38 3031 0000                  		move.w	(a1,d0.w),d0
0001CE3C 3231 1000                  		move.w	(a1,d1.w),d1
0001CE40 3140 0030                  		move.w	d0,$30(a0)
0001CE44 74FF                       		moveq	#-1,d2
0001CE46 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CE4A 2242                       		movea.l	d2,a1
0001CE4C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CE52 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CE58 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CE5C 2242                       		movea.l	d2,a1
0001CE5E 137C 0001 0029             		move.b	#1,$29(a1)
0001CE64 337C 0000 0030             		move.w	#0,$30(a1)
0001CE6A 317C 0001 0032             		move.w	#1,$32(a0)
0001CE70 4228 0035                  		clr.b	$35(a0)
0001CE7E                            
0001CE7E                            loc_19F10:
0001CE7E 4A68 0032                  		tst.w	$32(a0)
0001CE82 6B00 0000                  		bmi.w	loc_19FA6
0001CE86 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CE8C 3038 D008                  		move.w	(v_player+obX).w,d0
0001CE90 9068 0008                  		sub.w	obX(a0),d0
0001CE94 6500                       		bcs.s	loc_19F2E
0001CE96 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CE9C                            
0001CE9C                            loc_19F2E:
0001CE9C 323C 002B                  		move.w	#$2B,d1
0001CEA0 343C 0014                  		move.w	#$14,d2
0001CEA4 363C 0014                  		move.w	#$14,d3
0001CEA8 3828 0008                  		move.w	obX(a0),d4
0001CEAC 4EB9 0001 1B64             		jsr	(SolidObject).l
0001CEB2 4A44                       		tst.w	d4
0001CEB4 6E00                       		bgt.s	loc_19F50
0001CEB6                            
0001CEB6                            loc_19F48:
0001CEB6 4A28 0035                  		tst.b	$35(a0)
0001CEBA 6600                       		bne.s	loc_19F88
0001CEBC 6000                       		bra.s	loc_19F96
0001CEBE                            ; ===========================================================================
0001CEBE                            
0001CEBE                            loc_19F50:
0001CEBE 5E78 F636                  		addq.w	#7,(v_random).w
0001CEC2 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CEC8 66EC                       		bne.s	loc_19F48
0001CECA 303C 0300                  		move.w	#$300,d0
0001CECE 0828 0000 0022             		btst	#0,obStatus(a0)
0001CED4 6600                       		bne.s	loc_19F6A
0001CED6 4440                       		neg.w	d0
0001CED8                            
0001CED8                            loc_19F6A:
0001CED8 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CEDC 4A28 0035                  		tst.b	$35(a0)
0001CEE0 6600                       		bne.s	loc_19F88
0001CEE2 5328 0021                  		subq.b	#1,obColProp(a0)
0001CEE6 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CEEC 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CEF2                            
0001CEF2                            loc_19F88:
0001CEF2 5328 0035                  		subq.b	#1,$35(a0)
0001CEF6 6700                       		beq.s	loc_19F96
0001CEF8 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CEFE 6000                       		bra.s	loc_19F9C
0001CF00                            ; ===========================================================================
0001CF00                            
0001CF00                            loc_19F96:
0001CF00 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CF06                            
0001CF06                            loc_19F9C:
0001CF06 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001CF0A 4EF9 0000 C804             		jmp	(AnimateSprite).l
0001CF10                            ; ===========================================================================
0001CF10                            
0001CF10                            loc_19FA6:
0001CF10 4A28 0021                  		tst.b	obColProp(a0)
0001CF14 6700                       		beq.s	loc_19FBC
0001CF16 5428 0034                  		addq.b	#2,$34(a0)
0001CF1A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CF20 4268 0032                  		clr.w	$32(a0)
0001CF24 4E75                       		rts	
0001CF26                            ; ===========================================================================
0001CF26                            
0001CF26                            loc_19FBC:
0001CF26 7064                       			moveq	#100,d0
0001CF28 6100 0000                  			bsr.w	AddPoints
0001CF2C 117C 0006 0034             		move.b	#6,$34(a0)
0001CF32 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CF38 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CF3E 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CF44 4E75                       		rts	
0001CF46                            ; ===========================================================================
0001CF46 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CF56                            ; ===========================================================================
0001CF56                            
0001CF56                            loc_19FE6:
0001CF56 70FF                       		moveq	#-1,d0
0001CF58 3028 0036                  		move.w	$36(a0),d0
0001CF5C 2240                       		movea.l	d0,a1
0001CF5E 4A68 0030                  		tst.w	$30(a0)
0001CF62 6A00                       		bpl.s	loc_1A000
0001CF64 4268 0030                  		clr.w	$30(a0)
0001CF68 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CF6E 6100                       		bsr.s	loc_1A020
0001CF70                            
0001CF70                            loc_1A000:
0001CF70 700F                       		moveq	#$F,d0
0001CF72 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CF76 6600                       		bne.s	loc_1A00A
0001CF78 6100                       		bsr.s	loc_1A020
0001CF7A                            
0001CF7A                            loc_1A00A:
0001CF7A 4A68 0032                  		tst.w	$32(a0)
0001CF7E 6700                       		beq.s	locret_1A01E
0001CF80 5528 0034                  		subq.b	#2,$34(a0)
0001CF84 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CF8A 4268 0032                  		clr.w	$32(a0)
0001CF8E                            
0001CF8E                            locret_1A01E:
0001CF8E 4E75                       		rts	
0001CF90                            ; ===========================================================================
0001CF90                            
0001CF90                            loc_1A020:
0001CF9A                            ; ===========================================================================
0001CF9A                            
0001CF9A                            loc_1A02A:
0001CF9A 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001CFA0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CFA6 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001CFAC 117C 0006 001A             		move.b	#6,obFrame(a0)
0001CFB2 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CFB8 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001CFBE 6500                       		bcs.s	loc_1A070
0001CFC0 317C 059C 000C             		move.w	#$59C,obY(a0)
0001CFC6 5428 0034                  		addq.b	#2,$34(a0)
0001CFCA 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001CFD0 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001CFD6 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001CFDC 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001CFE0                            
0001CFE0                            loc_1A070:
0001CFE0 6000 0000                  		bra.w	loc_1A166
0001CFE4                            ; ===========================================================================
0001CFE4                            
0001CFE4                            loc_1A074:
0001CFE4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CFEA 117C 0004 001C             		move.b	#4,obAnim(a0)
0001CFF0 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001CFF6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CFFC 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D002 6500                       		bcs.s	loc_1A09A
0001D004 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D00A                            
0001D00A                            loc_1A09A:
0001D00A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D010 3028 0008                  		move.w	obX(a0),d0
0001D014 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D018 6A00                       		bpl.s	loc_1A0B4
0001D01A 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D020 6000 0000                  		bra.w	loc_1A0F2
0001D024                            ; ===========================================================================
0001D024                            
0001D024                            loc_1A0B4:
0001D024 0440 0070                  		subi.w	#$70,d0
0001D028 6500                       		bcs.s	loc_1A0F2
0001D02A 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D030 5140                       		subq.w	#8,d0
0001D032 6500                       		bcs.s	loc_1A0F2
0001D034 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D03A 5140                       		subq.w	#8,d0
0001D03C 6500                       		bcs.s	loc_1A0F2
0001D03E 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D044 5140                       		subq.w	#8,d0
0001D046 6500                       		bcs.s	loc_1A0F2
0001D048 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D04E 5140                       		subq.w	#8,d0
0001D050 6500                       		bcs.s	loc_1A0F2
0001D052 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D058 0440 0038                  		subi.w	#$38,d0
0001D05C 6500                       		bcs.s	loc_1A0F2
0001D05E 4268 0010                  		clr.w	obVelX(a0)
0001D062                            
0001D062                            loc_1A0F2:
0001D062 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D068 6500                       		bcs.s	loc_1A110
0001D06A 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D070 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D076 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D07C 5428 0034                  		addq.b	#2,$34(a0)
0001D080                            
0001D080                            loc_1A110:
0001D080 6000                       		bra.s	loc_1A15C
0001D082                            ; ===========================================================================
0001D082                            
0001D082                            loc_1A112:
0001D082 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001D088 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D08E 6500                       		bcs.s	loc_1A124
0001D090 4268 0010                  		clr.w	obVelX(a0)
0001D094                            
0001D094                            loc_1A124:
0001D094 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D09A 4A68 0012                  		tst.w	obVelY(a0)
0001D09E 6B00                       		bmi.s	loc_1A142
0001D0A0 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D0A6 6500                       		bcs.s	loc_1A142
0001D0A8 317C 0592 000C             		move.w	#$592,obY(a0)
0001D0AE 4268 0012                  		clr.w	obVelY(a0)
0001D0B2                            
0001D0B2                            loc_1A142:
0001D0B2 3028 0010                  		move.w	obVelX(a0),d0
0001D0B6 8068 0012                  		or.w	obVelY(a0),d0
0001D0BA 6600                       		bne.s	loc_1A15C
0001D0BC 5428 0034                  		addq.b	#2,$34(a0)
0001D0C0 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D0C6 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D0CC                            
0001D0CC                            loc_1A15C:
0001D0CC 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D0D0 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001D0D6                            
0001D0D6                            loc_1A166:
0001D0D6 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D0DC 6C00                       		bge.s	loc_1A172
0001D0DE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D0E2                            
0001D0E2                            loc_1A172:
0001D0E2 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D0E8 6C00                       		bge.s	locret_1A190
0001D0EA 323C 001B                  		move.w	#$1B,d1
0001D0EE 343C 0070                  		move.w	#$70,d2
0001D0F2 363C 0071                  		move.w	#$71,d3
0001D0F6 3828 0008                  		move.w	obX(a0),d4
0001D0FA 4EF9 0001 1B64             		jmp	(SolidObject).l
0001D100                            ; ===========================================================================
0001D100                            
0001D100                            locret_1A190:
0001D100 4E75                       		rts	
0001D102                            ; ===========================================================================
0001D102                            
0001D102                            loc_1A192:
0001D102 217C 0001 ABFA 0004        		move.l	#Map_Eggman,obMap(a0)
0001D10A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D110 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D116 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D11C 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001D122 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D128 6400                       		bcc.s	loc_1A1D0
0001D12A 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D130 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D136 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D13C 5428 0034                  		addq.b	#2,$34(a0)
0001D140                            
0001D140                            loc_1A1D0:
0001D140 6000 FF8A                  		bra.w	loc_1A15C
0001D144                            ; ===========================================================================
0001D144                            
0001D144                            loc_1A1D4:
0001D144 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D14A 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001D150 4A68 0030                  		tst.w	$30(a0)
0001D154 6600                       		bne.s	loc_1A1FC
0001D156 4A28 0020                  		tst.b	obColType(a0)
0001D15A 6600                       		bne.s	loc_1A216
0001D15C 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D162 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D168                            
0001D168                            loc_1A1FC:
0001D168 5368 0030                  		subq.w	#1,$30(a0)
0001D16C 6600                       		bne.s	loc_1A216
0001D16E 4A28 0022                  		tst.b	obStatus(a0)
0001D172 6A00                       		bpl.s	loc_1A210
0001D174 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D17A 6000                       		bra.s	loc_1A216
0001D17C                            ; ===========================================================================
0001D17C                            
0001D17C                            loc_1A210:
0001D17C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D182                            
0001D182                            loc_1A216:
0001D182 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D188 6D00                       		blt.s	loc_1A23A
0001D18A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D190 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D196 4278 D020                  		clr.w	(v_player+obInertia).w
0001D19A 4A68 0012                  		tst.w	obVelY(a0)
0001D19E 6A00                       		bpl.s	loc_1A248
0001D1A0 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D1A6                            
0001D1A6                            loc_1A23A:
0001D1A6 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D1AC 6D00                       		blt.s	loc_1A248
0001D1AE 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D1B4                            
0001D1B4                            loc_1A248:
0001D1B4 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D1BA 6500                       		bcs.s	loc_1A260
0001D1BC 4A28 0001                  		tst.b	obRender(a0)
0001D1C0 6B00                       		bmi.s	loc_1A260
0001D1C2 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D1C8 6000 FAF0                  		bra.w	Obj85_Delete
0001D1CC                            ; ===========================================================================
0001D1CC                            
0001D1CC                            loc_1A260:
0001D1CC 6000 FEFE                  		bra.w	loc_1A15C
0001D1D0                            ; ===========================================================================
0001D1D0                            
0001D1D0                            loc_1A264:	; Routine 4
0001D1D0 2268 0034                  		movea.l	$34(a0),a1
0001D1D4 1011                       		move.b	(a1),d0
0001D1D6 B010                       		cmp.b	(a0),d0
0001D1D8 6600 FAE0                  		bne.w	Obj85_Delete
0001D1DC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D1E2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D1E8 6C00                       		bge.s	loc_1A280
0001D1EA 6000                       		bra.s	loc_1A2A6
0001D1EC                            ; ===========================================================================
0001D1EC                            
0001D1EC                            loc_1A280:
0001D1EC 4A69 0010                  		tst.w	obVelX(a1)
0001D1F0 6700                       		beq.s	loc_1A28C
0001D1F2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D1F8                            
0001D1F8                            loc_1A28C:
0001D1F8 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D1FC 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001D202                            
0001D202                            loc_1A296:
0001D202 2268 0034                  		movea.l	$34(a0),a1
0001D206 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D20C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D212                            
0001D212                            loc_1A2A6:
0001D212 2268 0034                  		movea.l	$34(a0),a1
0001D216 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D21C 7003                       		moveq	#3,d0
0001D21E C028 0022                  		and.b	obStatus(a0),d0
0001D222 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D228 8128 0001                  		or.b	d0,obRender(a0)
0001D22C 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001D232                            ; ===========================================================================
0001D232                            
0001D232                            loc_1A2C6:	; Routine 6
0001D232 2268 0034                  		movea.l	$34(a0),a1
0001D236 1011                       		move.b	(a1),d0
0001D238 B010                       		cmp.b	(a0),d0
0001D23A 6600 FA7E                  		bne.w	Obj85_Delete
0001D23E 0CA9 0001 ABFA 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D246 6700                       		beq.s	loc_1A2E4
0001D248 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D24E 60C2                       		bra.s	loc_1A2A6
0001D250                            ; ===========================================================================
0001D250                            
0001D250                            loc_1A2E4:
0001D250 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D256 4A29 0021                  		tst.b	obColProp(a1)
0001D25A 6F00                       		ble.s	loc_1A312
0001D25C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D262 217C 0001 ABFA 0004        		move.l	#Map_Eggman,obMap(a0)
0001D26A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D270 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D274 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001D27A 6000 FF86                  		bra.w	loc_1A296
0001D27E                            ; ===========================================================================
0001D27E                            
0001D27E                            loc_1A312:
0001D27E 4A28 0001                  		tst.b	1(a0)
0001D282 6A00 FA36                  		bpl.w	Obj85_Delete
0001D286 6100 D4CC                  		bsr.w	BossDefeated
0001D28A 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D290 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D296 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D29E 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D2A4 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D2A8 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001D2AE 6000 FF52                  		bra.w	loc_1A296
0001D2B2                            ; ===========================================================================
0001D2B2                            
0001D2B2                            loc_1A346:	; Routine 8
0001D2B2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D2B8 2268 0034                  		movea.l	$34(a0),a1
0001D2BC 0CA9 0001 ABFA 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D2C4 6700                       		beq.s	loc_1A35E
0001D2C6 6000 FF4A                  		bra.w	loc_1A2A6
0001D2CA                            ; ===========================================================================
0001D2CA                            
0001D2CA                            loc_1A35E:
0001D2CA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D2D0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D2D6 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D2DA 6600                       		bne.s	loc_1A376
0001D2DC 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D2E2                            
0001D2E2                            loc_1A376:
0001D2E2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D2E6 6E00                       		bgt.s	loc_1A38A
0001D2E8 5228 001A                  		addq.b	#1,obFrame(a0)
0001D2EC 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D2F2 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D2F6                            
0001D2F6                            loc_1A38A:
0001D2F6 6000 FF0A                  		bra.w	loc_1A296
0001D2FA                            ; ===========================================================================
0001D2FA                            
0001D2FA                            loc_1A38E:	; Routine $A
0001D2FA 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D300 3038 D008                  		move.w	(v_player+obX).w,d0
0001D304 9068 0008                  		sub.w	obX(a0),d0
0001D308 6500                       		bcs.s	loc_1A3A6
0001D30A 4A28 0001                  		tst.b	obRender(a0)
0001D30E 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D312                            
0001D312                            loc_1A3A6:
0001D312 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001D318                            ; ===========================================================================
0001D318                            
0001D318                            loc_1A3AC:	; Routine $C
0001D318 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D31E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D324 2268 0034                  		movea.l	$34(a0),a1
0001D328 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D32E 6600                       		bne.s	loc_1A3D0
0001D330 0CA9 0001 ABFA 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D338 6700 F980                  		beq.w	Obj85_Delete
0001D33C                            
0001D33C                            loc_1A3D0:
0001D33C 6000 FED4                  		bra.w	loc_1A2A6
0001D340                            		
0001D340                            BossModeMusic:
0001D340 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D346 6600 0000                  		bne.w	NormalMode
0001D34A 4EF9 0000 0000             		jmp	PinchMode
0001D350                            
0001D350                            NormalMode:
0001D350 303C 00AC                  		move.w	#$AC,d0
0001D354 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001D35A 4E75                       		rts
0001D35C                            
0001D35C                            PinchMode:
0001D35C 303C 0094                  		move.w	#$94,d0
0001D360 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001D366 303C 00E2                  		move.w	#$E2,d0
0001D36A 4EB9 0000 0FC6             		jsr	(PlaySound).l
0001D370 4E75                       		rts		
0001D370 4E75                       		rts		
0001D372                            		include	"_anim\FZ Eggman in Ship.asm"
0001D372                            ; ---------------------------------------------------------------------------
0001D372                            ; Animation script - Eggman (FZ)
0001D372                            ; ---------------------------------------------------------------------------
0001D372 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D374 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D378                            		even
0001D378                            		even
0001D378                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D378                            ; ---------------------------------------------------------------------------
0001D378                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D378                            ; ---------------------------------------------------------------------------
0001D378                            Map_FZDamaged_internal:
0001D378 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D37A 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D37C 06                         @damage1:	dc.b 6
0001D37D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D382 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D387 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D38C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D391 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D396 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D39B 06                         @damage2:	dc.b 6
0001D39C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D3A1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D3A6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D3AB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D3B0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D3B5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D3BA                            		even
0001D3BA                            		even
0001D3BA                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D3BA                            ; ---------------------------------------------------------------------------
0001D3BA                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D3BA                            ; ---------------------------------------------------------------------------
0001D3BA                            Map_FZLegs_internal:
0001D3BA 0000                       		dc.w @extended-Map_FZLegs_internal
0001D3BC 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D3BE 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D3C0 02                         @extended:	dc.b 2
0001D3C1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D3C6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D3CB 03                         @halfway:	dc.b 3
0001D3CC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D3D1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D3D6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D3DB 02                         @retracted:	dc.b 2
0001D3DC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D3E1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D3E6                            		even
0001D3E6                            		even
0001D3E6                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D3E6                            ; ---------------------------------------------------------------------------
0001D3E6                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D3E6                            ; ---------------------------------------------------------------------------
0001D3E6                            
0001D3E6                            Obj84_Delete:
0001D3E6 4EF9 0000 F782             		jmp	(DeleteObject).l
0001D3EC                            ; ===========================================================================
0001D3EC                            
0001D3EC                            EggmanCylinder:
0001D3EC 7000                       		moveq	#0,d0
0001D3EE 1028 0024                  		move.b	obRoutine(a0),d0
0001D3F2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D3F6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D3FA                            ; ===========================================================================
0001D3FA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D3FC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D3FE 0000                       		dc.w loc_1A57E-Obj84_Index
0001D400                            
0001D400 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D404 2550 0620                  		dc.w $2550, $620
0001D408 2490 04C0                  		dc.w $2490, $4C0
0001D40C 2510 04C0                  		dc.w $2510, $4C0
0001D410                            ; ===========================================================================
0001D410                            
0001D410                            Obj84_Main:	; Routine
0001D410 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D414 7000                       		moveq	#0,d0
0001D416 1028 0028                  		move.b	obSubtype(a0),d0
0001D41A D040                       		add.w	d0,d0
0001D41C D2C0                       		adda.w	d0,a1
0001D41E 117C 0004 0001             		move.b	#4,obRender(a0)
0001D424 08E8 0007 0001             		bset	#7,obRender(a0)
0001D42A 08E8 0004 0001             		bset	#4,obRender(a0)
0001D430 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D436 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D43E 3159 0008                  		move.w	(a1)+,obX(a0)
0001D442 3151 000C                  		move.w	(a1),obY(a0)
0001D446 3159 0038                  		move.w	(a1)+,$38(a0)
0001D44A 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D450 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D456 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D45C 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D462 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D468 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D46C                            
0001D46C                            loc_1A4CE:	; Routine 2
0001D46C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D472 6F00                       		ble.s	loc_1A4DC
0001D474 08E8 0001 0001             		bset	#1,obRender(a0)
0001D47A                            
0001D47A                            loc_1A4DC:
0001D47A 42A8 003C                  		clr.l	$3C(a0)
0001D47E 4A28 0029                  		tst.b	$29(a0)
0001D482 6700                       		beq.s	loc_1A4EA
0001D484 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D488                            
0001D488                            loc_1A4EA:
0001D488 2028 003C                  		move.l	$3C(a0),d0
0001D48C 2228 0038                  		move.l	$38(a0),d1
0001D490 D280                       		add.l	d0,d1
0001D492 4841                       		swap	d1
0001D494 3141 000C                  		move.w	d1,obY(a0)
0001D498 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D49E 6600                       		bne.s	loc_1A524
0001D4A0 4A68 0030                  		tst.w	$30(a0)
0001D4A4 6A00                       		bpl.s	loc_1A524
0001D4A6 70F6                       		moveq	#-$A,d0
0001D4A8 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D4AE 6F00                       		ble.s	loc_1A514
0001D4B0 700E                       		moveq	#$E,d0
0001D4B2                            
0001D4B2                            loc_1A514:
0001D4B2 D240                       		add.w	d0,d1
0001D4B4 2268 0034                  		movea.l	$34(a0),a1
0001D4B8 3341 000C                  		move.w	d1,obY(a1)
0001D4BC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D4C2                            
0001D4C2                            loc_1A524:
0001D4C2 323C 002B                  		move.w	#$2B,d1
0001D4C6 343C 0060                  		move.w	#$60,d2
0001D4CA 363C 0061                  		move.w	#$61,d3
0001D4CE 3828 0008                  		move.w	obX(a0),d4
0001D4D2 4EB9 0001 1B64             		jsr	(SolidObject).l
0001D4D8 7000                       		moveq	#0,d0
0001D4DA 3228 003C                  		move.w	$3C(a0),d1
0001D4DE 6A00                       		bpl.s	loc_1A550
0001D4E0 4441                       		neg.w	d1
0001D4E2 5141                       		subq.w	#8,d1
0001D4E4 6500                       		bcs.s	loc_1A55C
0001D4E6 5200                       		addq.b	#1,d0
0001D4E8 E841                       		asr.w	#4,d1
0001D4EA D041                       		add.w	d1,d0
0001D4EC 6000                       		bra.s	loc_1A55C
0001D4EE                            ; ===========================================================================
0001D4EE                            
0001D4EE                            loc_1A550:
0001D4EE 0441 0027                  		subi.w	#$27,d1
0001D4F2 6500                       		bcs.s	loc_1A55C
0001D4F4 5200                       		addq.b	#1,d0
0001D4F6 E841                       		asr.w	#4,d1
0001D4F8 D041                       		add.w	d1,d0
0001D4FA                            
0001D4FA                            loc_1A55C:
0001D4FA 1140 001A                  		move.b	d0,obFrame(a0)
0001D4FE 3038 D008                  		move.w	(v_player+obX).w,d0
0001D502 9068 0008                  		sub.w	obX(a0),d0
0001D506 6B00                       		bmi.s	loc_1A578
0001D508 0440 0140                  		subi.w	#$140,d0
0001D50C 6B00                       		bmi.s	loc_1A578
0001D50E 4A28 0001                  		tst.b	obRender(a0)
0001D512 6A00 FED2                  		bpl.w	Obj84_Delete
0001D516                            
0001D516                            loc_1A578:
0001D516 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001D51C                            ; ===========================================================================
0001D51C                            
0001D51C                            loc_1A57E:	; Routine 4
0001D51C 7000                       		moveq	#0,d0
0001D51E 1028 0028                  		move.b	obSubtype(a0),d0
0001D522 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D526 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D52A 6000 FF5C                  		bra.w	loc_1A4EA
0001D52E                            ; ===========================================================================
0001D52E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D530 0000                       		dc.w loc_1A598-off_1A590
0001D532 0000                       		dc.w loc_1A604-off_1A590
0001D534 0000                       		dc.w loc_1A604-off_1A590
0001D536                            ; ===========================================================================
0001D536                            
0001D536                            loc_1A598:
0001D536 4A28 0029                  		tst.b	$29(a0)
0001D53A 6600                       		bne.s	loc_1A5D4
0001D53C 2268 0034                  		movea.l	$34(a0),a1
0001D540 4A29 0021                  		tst.b	obColProp(a1)
0001D544 6600                       		bne.s	loc_1A5B4
0001D546 6100 D20C                  		bsr.w	BossDefeated
0001D54A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D552                            
0001D552                            loc_1A5B4:
0001D552 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D55A 6400                       		bcc.s	locret_1A602
0001D55C 42A8 003C                  		clr.l	$3C(a0)
0001D560 2268 0034                  		movea.l	$34(a0),a1
0001D564 5369 0032                  		subq.w	#1,$32(a1)
0001D568 4269 0030                  		clr.w	$30(a1)
0001D56C 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D570 4E75                       		rts	
0001D572                            ; ===========================================================================
0001D572                            
0001D572                            loc_1A5D4:
0001D572 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D578 6C00                       		bge.s	loc_1A5E4
0001D57A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D582                            
0001D582                            loc_1A5E4:
0001D582 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D58A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D590 6E00                       		bgt.s	locret_1A602
0001D592 4268 003E                  		clr.w	$3E(a0)
0001D596 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D59C 4228 0029                  		clr.b	$29(a0)
0001D5A0                            
0001D5A0                            locret_1A602:
0001D5A0 4E75                       		rts	
0001D5A2                            ; ===========================================================================
0001D5A2                            
0001D5A2                            loc_1A604:
0001D5A2 08E8 0001 0001             		bset	#1,obRender(a0)
0001D5A8 4A28 0029                  		tst.b	$29(a0)
0001D5AC 6600                       		bne.s	loc_1A646
0001D5AE 2268 0034                  		movea.l	$34(a0),a1
0001D5B2 4A29 0021                  		tst.b	obColProp(a1)
0001D5B6 6600                       		bne.s	loc_1A626
0001D5B8 6100 D19A                  		bsr.w	BossDefeated
0001D5BC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D5C4                            
0001D5C4                            loc_1A626:
0001D5C4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D5CC 6400                       		bcc.s	locret_1A674
0001D5CE 42A8 003C                  		clr.l	$3C(a0)
0001D5D2 2268 0034                  		movea.l	$34(a0),a1
0001D5D6 5369 0032                  		subq.w	#1,$32(a1)
0001D5DA 4269 0030                  		clr.w	$30(a1)
0001D5DE 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D5E2 4E75                       		rts	
0001D5E4                            ; ===========================================================================
0001D5E4                            
0001D5E4                            loc_1A646:
0001D5E4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D5EA 6D00                       		blt.s	loc_1A656
0001D5EC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D5F4                            
0001D5F4                            loc_1A656:
0001D5F4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D5FC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D602 6D00                       		blt.s	locret_1A674
0001D604 4268 003E                  		clr.w	$3E(a0)
0001D608 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D60E 4228 0029                  		clr.b	$29(a0)
0001D612                            
0001D612                            locret_1A674:
0001D612 4E75                       		rts	
0001D612 4E75                       		rts	
0001D614                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D614                            ; --------------------------------------------------------------------------------
0001D614                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D614                            ; --------------------------------------------------------------------------------
0001D614                            
0001D614                            SME_SCUpI:	
0001D614 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D618 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D61C 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D620 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D624 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D628 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D62C 06                         SME_SCUpI_18:	dc.b 6	
0001D62D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D632 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D637 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D63C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D641 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D646 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D64B 08                         SME_SCUpI_37:	dc.b 8	
0001D64C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D651 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D656 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D65B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D660 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D665 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D66A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D66F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D674 0A                         SME_SCUpI_60:	dc.b $A	
0001D675 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D67A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D67F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D684 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D689 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D68E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D693 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D698 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D69D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6A2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6A7 0C                         SME_SCUpI_93:	dc.b $C	
0001D6A8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6AD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6B2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6B7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6BC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6C1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6C6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6CB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6D0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6D5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D6DA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D6DF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6E4 0D                         SME_SCUpI_D0:	dc.b $D	
0001D6E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6EA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6EF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6F4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6F9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6FE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D703 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D708 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D70D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D712 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D717 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D71C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D721 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D726 0E                         SME_SCUpI_112:	dc.b $E	
0001D727 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D72C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D731 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D736 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D73B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D740 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D745 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D74A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D74F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D754 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D759 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D75E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D763 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D768 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D76D 0E                         SME_SCUpI_159:	dc.b $E	
0001D76E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D773 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D778 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D77D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D782 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D787 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D78C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D791 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D796 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D79B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7A0 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7A5 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7AA 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7AF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7B4 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D7B5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7BA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7BF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7C4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7C9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7CE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7D3 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7D8 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7DD F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7E2 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7E7 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7EC 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7F1 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7F6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7FB 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D7FC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D801 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D806 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D80B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D810 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D815 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D81A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D81F F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D824 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D829 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D82E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D833 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D838 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D83D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D842 0E                         SME_SCUpI_22E:	dc.b $E	
0001D843 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D848 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D84D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D852 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D857 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D85C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D861 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D866 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D86B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D870 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D875 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D87A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D87F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D884 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D889 0E                         SME_SCUpI_275:	dc.b $E	
0001D88A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D88F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D894 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D899 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D89E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8A3 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8A8 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8AD F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8B2 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8B7 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8BC 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8C1 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8C6 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8CB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8D0 02                         SME_SCUpI_2BC:	dc.b 2	
0001D8D1 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D8D6 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D8DC 00                         		even
0001D8DC 00                         		even
0001D8DC                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D8DC                            ; ---------------------------------------------------------------------------
0001D8DC                            ; Object 86 - energy balls (FZ)
0001D8DC                            ; ---------------------------------------------------------------------------
0001D8DC                            
0001D8DC                            BossPlasma:
0001D8DC 7000                       		moveq	#0,d0
0001D8DE 1028 0024                  		move.b	obRoutine(a0),d0
0001D8E2 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D8E6 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D8EA                            ; ===========================================================================
0001D8EA 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D8EC 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D8EE 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D8F0 0000                       		dc.w loc_1A962-Obj86_Index
0001D8F2 0000                       		dc.w loc_1A982-Obj86_Index
0001D8F4                            ; ===========================================================================
0001D8F4                            
0001D8F4                            Obj86_Main:	; Routine 0
0001D8F4 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D8FA 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D900 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D906 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D90E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D914 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D91A 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D920 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D926 117C 0004 0001             		move.b	#4,obRender(a0)
0001D92C 08E8 0007 0001             		bset	#7,obRender(a0)
0001D932 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D936                            
0001D936                            Obj86_Generator:; Routine 2
0001D936 2268 0034                  		movea.l	$34(a0),a1
0001D93A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D940 6600                       		bne.s	loc_1A850
0001D942 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D946 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D94C 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001D952                            ; ===========================================================================
0001D952                            
0001D952                            loc_1A850:
0001D952 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D958 4A28 0029                  		tst.b	$29(a0)
0001D95C 6700                       		beq.s	loc_1A86C
0001D95E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D962 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D968 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001D96E                            
0001D96E                            loc_1A86C:
0001D96E 323C 0013                  		move.w	#$13,d1
0001D972 343C 0008                  		move.w	#8,d2
0001D976 363C 0011                  		move.w	#$11,d3
0001D97A 3828 0008                  		move.w	obX(a0),d4
0001D97E 4EB9 0001 1B64             		jsr	(SolidObject).l
0001D984 3038 D008                  		move.w	(v_player+obX).w,d0
0001D988 9068 0008                  		sub.w	obX(a0),d0
0001D98C 6B00                       		bmi.s	loc_1A89A
0001D98E 0440 0140                  		subi.w	#$140,d0
0001D992 6B00                       		bmi.s	loc_1A89A
0001D994 4A28 0001                  		tst.b	obRender(a0)
0001D998 6A00 FA4C                  		bpl.w	Obj84_Delete
0001D99C                            
0001D99C                            loc_1A89A:
0001D99C 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001D9A0 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001D9A6 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001D9AC                            ; ===========================================================================
0001D9AC                            
0001D9AC                            Obj86_MakeBalls:; Routine 4
0001D9AC 4A28 0029                  		tst.b	$29(a0)
0001D9B0 6700 0000                  		beq.w	loc_1A954
0001D9B4 4228 0029                  		clr.b	$29(a0)
0001D9B8 D068 0030                  		add.w	$30(a0),d0
0001D9BC 0240 001E                  		andi.w	#$1E,d0
0001D9C0 D4C0                       		adda.w	d0,a2
0001D9C2 5868 0030                  		addq.w	#4,$30(a0)
0001D9C6 4268 0032                  		clr.w	$32(a0)
0001D9CA 7403                       		moveq	#3,d2
0001D9CC                            
0001D9CC                            Obj86_Loop:
0001D9CC 4EB9 0000 FBE4             		jsr	(FindNextFreeObj).l
0001D9D2 6600 0000                  		bne.w	loc_1A954
0001D9D6 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001D9DA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D9E0 337C 053C 000C             		move.w	#$53C,obY(a1)
0001D9E6 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D9EC 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001D9F2 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001D9FA 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DA00 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DA06 137C 0000 0020             		move.b	#0,obColType(a1)
0001DA0C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DA12 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DA18 137C 0004 0001             		move.b	#4,obRender(a1)
0001DA1E 08E9 0007 0001             		bset	#7,obRender(a1)
0001DA24 2348 0034                  		move.l	a0,$34(a1)
0001DA28 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DA2E 3228 0032                  		move.w	$32(a0),d1
0001DA32 C3FC FFB1                  		muls.w	#-$4F,d1
0001DA36 0641 2578                  		addi.w	#$2578,d1
0001DA3A 0240 001F                  		andi.w	#$1F,d0
0001DA3E 0440 0010                  		subi.w	#$10,d0
0001DA42 D041                       		add.w	d1,d0
0001DA44 3340 0030                  		move.w	d0,$30(a1)
0001DA48 5268 0032                  		addq.w	#1,$32(a0)
0001DA4C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DA52 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DA56                            
0001DA56                            loc_1A954:
0001DA56 4A68 0032                  		tst.w	$32(a0)
0001DA5A 6600                       		bne.s	loc_1A95E
0001DA5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA60                            
0001DA60                            loc_1A95E:
0001DA60 6000 FF0C                  		bra.w	loc_1A86C
0001DA64                            ; ===========================================================================
0001DA64                            
0001DA64                            loc_1A962:	; Routine 6
0001DA64 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DA6A 4A68 0038                  		tst.w	$38(a0)
0001DA6E 6600                       		bne.s	loc_1A97E
0001DA70 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DA76 2268 0034                  		movea.l	$34(a0),a1
0001DA7A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DA80                            
0001DA80                            loc_1A97E:
0001DA80 6000 FEEC                  		bra.w	loc_1A86C
0001DA84                            ; ===========================================================================
0001DA84                            
0001DA84                            loc_1A982:	; Routine 8
0001DA84 7000                       		moveq	#0,d0
0001DA86 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DA8A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DA8E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DA92 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DA96 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001DA9C 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001DAA2                            ; ===========================================================================
0001DAA2 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DAA4 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DAA6 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DAA8                            ; ===========================================================================
0001DAA8                            
0001DAA8                            loc_1A9A6:
0001DAA8 3028 0030                  		move.w	$30(a0),d0
0001DAAC 9068 0008                  		sub.w	obX(a0),d0
0001DAB0 E940                       		asl.w	#4,d0
0001DAB2 3140 0010                  		move.w	d0,obVelX(a0)
0001DAB6 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DABC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DAC0 4E75                       		rts	
0001DAC2                            ; ===========================================================================
0001DAC2                            
0001DAC2                            loc_1A9C0:
0001DAC2 4A68 0010                  		tst.w	obVelX(a0)
0001DAC6 6700                       		beq.s	loc_1A9E6
0001DAC8 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001DACE 3028 0008                  		move.w	obX(a0),d0
0001DAD2 9068 0030                  		sub.w	$30(a0),d0
0001DAD6 6400                       		bcc.s	loc_1A9E6
0001DAD8 4268 0010                  		clr.w	obVelX(a0)
0001DADC D168 0008                  		add.w	d0,obX(a0)
0001DAE0 2268 0034                  		movea.l	$34(a0),a1
0001DAE4 5369 0032                  		subq.w	#1,$32(a1)
0001DAE8                            
0001DAE8                            loc_1A9E6:
0001DAE8 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DAEE 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DAF2 6600                       		bne.s	locret_1AA1C
0001DAF4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DAF8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DAFE 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DB04 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB0A 7000                       		moveq	#0,d0
0001DB0C 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB10 9068 0008                  		sub.w	obX(a0),d0
0001DB14 3140 0010                  		move.w	d0,obVelX(a0)
0001DB18 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DB1E                            
0001DB1E                            locret_1AA1C:
0001DB1E 4E75                       		rts	
0001DB20                            ; ===========================================================================
0001DB20                            
0001DB20                            loc_1AA1E:
0001DB20 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001DB26 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DB2C 6400                       		bcc.s	loc_1AA34
0001DB2E 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DB32 6700                       		beq.s	loc_1AA34
0001DB34 4E75                       		rts	
0001DB36                            ; ===========================================================================
0001DB36                            
0001DB36                            loc_1AA34:
0001DB36 2268 0034                  		movea.l	$34(a0),a1
0001DB3A 5369 0038                  		subq.w	#1,$38(a1)
0001DB3E 6000 F8A6                  		bra.w	Obj84_Delete
0001DB3E 6000 F8A6                  		bra.w	Obj84_Delete
0001DB42                            		include	"_anim\Plasma Ball Launcher.asm"
0001DB42                            ; ---------------------------------------------------------------------------
0001DB42                            ; Animation script - energy ball launcher (FZ)
0001DB42                            ; ---------------------------------------------------------------------------
0001DB42 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DB44 0000                       		dc.w @redsparking-Ani_PLaunch
0001DB46 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DB48 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DB4C 00                         		even
0001DB4C 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DB52                            		even
0001DB52 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DB58                            		even
0001DB58                            		even
0001DB58                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DB58                            ; ---------------------------------------------------------------------------
0001DB58                            ; Sprite mappings - energy ball	launcher (FZ)
0001DB58                            ; ---------------------------------------------------------------------------
0001DB58                            Map_PLaunch_internal:
0001DB58 0000                       		dc.w @red-Map_PLaunch_internal
0001DB5A 0000                       		dc.w @white-Map_PLaunch_internal
0001DB5C 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DB5E 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DB60 01                         @red:		dc.b 1
0001DB61 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DB66 01                         @white:		dc.b 1
0001DB67 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DB6C 01                         @sparking1:	dc.b 1
0001DB6D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DB72 01                         @sparking2:	dc.b 1
0001DB73 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DB78                            		even
0001DB78                            		even
0001DB78                            		include	"_anim\Plasma Balls.asm"
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            ; Animation script - energy balls (FZ)
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DB7A 0000                       		dc.w @short-Ani_Plasma
0001DB7C 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DB8B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DB9A 0A05 FF                    		dc.b $A, 5, afEnd
0001DB9E 00                         		even
0001DB9E 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DBA8                            		even
0001DBA8                            		even
0001DBA8                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DBA8                            ; ---------------------------------------------------------------------------
0001DBA8                            ; Sprite mappings - energy balls (FZ)
0001DBA8                            ; ---------------------------------------------------------------------------
0001DBA8                            Map_Plasma_internal:
0001DBA8 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DBAA 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DBAC 0000                       		dc.w @white1-Map_Plasma_internal
0001DBAE 0000                       		dc.w @white2-Map_Plasma_internal
0001DBB0 0000                       		dc.w @white3-Map_Plasma_internal
0001DBB2 0000                       		dc.w @white4-Map_Plasma_internal
0001DBB4 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DBB6 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DBB8 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DBBA 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DBBC 0000                       		dc.w @blank-Map_Plasma_internal
0001DBBE 02                         @fuzzy1:	dc.b 2
0001DBBF F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DBC4 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DBC9 02                         @fuzzy2:	dc.b 2
0001DBCA F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DBCF F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DBD4 02                         @white1:	dc.b 2
0001DBD5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DBDA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DBDF 02                         @white2:	dc.b 2
0001DBE0 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DBE5 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DBEA 02                         @white3:	dc.b 2
0001DBEB F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DBF0 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DBF5 02                         @white4:	dc.b 2
0001DBF6 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DBFB F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DC00 01                         @fuzzy3:	dc.b 1
0001DC01 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DC06 01                         @fuzzy4:	dc.b 1
0001DC07 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DC0C 02                         @fuzzy5:	dc.b 2
0001DC0D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DC12 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DC17 02                         @fuzzy6:	dc.b 2
0001DC18 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DC1D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DC22 00                         @blank:		dc.b 0
0001DC24 00                         		even
0001DC24 00                         		even
0001DC24                            
0001DC24                            		include	"_incObj\3E Prison Capsule.asm"
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Object 3E - prison capsule
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            
0001DC24                            Prison:
0001DC24 7000                       		moveq	#0,d0
0001DC26 1028 0024                  		move.b	obRoutine(a0),d0
0001DC2A 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DC2E 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DC4E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001DC54                            
0001DC54                            	@delete:
0001DC54 4EF9 0000 F782             		jmp	(DeleteObject).l
0001DC5A                            ; ===========================================================================
0001DC5A 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DC5C 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DC5E 0000                       		dc.w Pri_Switched-Pri_Index
0001DC60 0000                       		dc.w Pri_Explosion-Pri_Index
0001DC62 0000                       		dc.w Pri_Explosion-Pri_Index
0001DC64 0000                       		dc.w Pri_Explosion-Pri_Index
0001DC66 0000                       		dc.w Pri_Animals-Pri_Index
0001DC68 0000                       		dc.w Pri_EndAct-Pri_Index
0001DC6A                            
0001DC6A =00000030                  pri_origY:	equ $30		; original y-axis position
0001DC6A                            
0001DC6A 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DC6E 040C 0501                  		dc.b 4,	$C, 5, 1
0001DC72 0610 0403                  		dc.b 6,	$10, 4,	3
0001DC76 0810 0305                  		dc.b 8,	$10, 3,	5
0001DC7A                            ; ===========================================================================
0001DC7A                            
0001DC7A                            Pri_Main:	; Routine 0
0001DC7A 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DC82 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DC88 117C 0004 0001             		move.b	#4,obRender(a0)
0001DC8E 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DC94 7000                       		moveq	#0,d0
0001DC96 1028 0028                  		move.b	obSubtype(a0),d0
0001DC9A E548                       		lsl.w	#2,d0
0001DC9C 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DCA0 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DCA4 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DCA8 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DCAC 3028 0018                  		move.w obPriority(a0),d0 
0001DCB0 E248                       		lsr.w #1,d0 
0001DCB2 0240 0380                  		andi.w #$380,d0 
0001DCB6 3140 0018                  		move.w d0,obPriority(a0)		
0001DCBA 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DCBE 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DCC2 6600                       		bne.s	@not02		; if not, branch
0001DCC4                            
0001DCC4 117C 0006 0020             		move.b	#6,obColType(a0)
0001DCCA 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DCD0                            
0001DCD0                            	@not02:
0001DCD0 4E75                       		rts	
0001DCD2                            ; ===========================================================================
0001DCD2                            
0001DCD2                            Pri_BodyMain:	; Routine 2
0001DCD2 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DCD8 6700                       		beq.s	@chkopened
0001DCDA 323C 002B                  		move.w	#$2B,d1
0001DCDE 343C 0018                  		move.w	#$18,d2
0001DCE2 363C 0018                  		move.w	#$18,d3
0001DCE6 3828 0008                  		move.w	obX(a0),d4
0001DCEA 4EF9 0001 1B64             		jmp	(SolidObject).l
0001DCF0                            ; ===========================================================================
0001DCF0                            
0001DCF0                            @chkopened:
0001DCF0 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DCF4 6700                       		beq.s	@open		; if yes, branch
0001DCF6 4228 0025                  		clr.b	ob2ndRout(a0)
0001DCFA 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DD00 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DD06                            
0001DD06                            	@open:
0001DD06 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DD0C 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001DD10 6700                       		beq.s	@rts
0001DD12 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001DD20 4E75                       		rts	
0001DD22                            		
0001DD22                            	@rts:
0001DD22 4E75                       		rts
0001DD24                            ; ===========================================================================
0001DD24                            
0001DD24                            Pri_Switched:	; Routine 4
0001DD24 323C 0017                  		move.w	#$17,d1
0001DD28 343C 0008                  		move.w	#8,d2
0001DD2C 363C 0008                  		move.w	#8,d3
0001DD30 3828 0008                  		move.w	obX(a0),d4
0001DD34 4EB9 0001 1B64             		jsr	(SolidObject).l
0001DD3A 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DD40 4EB9 0000 C804             		jsr	(AnimateSprite).l
0001DD46 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DD4C 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DD50 6700                       		beq.s	@open2		; if yes, branch
0001DD52                            
0001DD52 5068 000C                  		addq.w	#8,obY(a0)
0001DD56 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DD5C 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DD62 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DD66 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DD6A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DD70 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DD76 4228 0025                  		clr.b	ob2ndRout(a0)
0001DD7A 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DD80 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DD86                            
0001DD86                            	@open2:
0001DD86 4E75                       		rts	
0001DD88                            ; ===========================================================================
0001DD88                            
0001DD88                            Pri_Explosion:	; Routine 6, 8, $A
0001DD88 7007                       		moveq	#7,d0
0001DD8A C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DD8E 6600                       		bne.s	@noexplosion
0001DD90 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001DD96 6600                       		bne.s	@noexplosion
0001DD98 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DD9C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DDA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DDA8 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DDAE 7200                       		moveq	#0,d1
0001DDB0 1200                       		move.b	d0,d1
0001DDB2 E409                       		lsr.b	#2,d1
0001DDB4 0441 0020                  		subi.w	#$20,d1
0001DDB8 D369 0008                  		add.w	d1,obX(a1)
0001DDBC E048                       		lsr.w	#8,d0
0001DDBE E608                       		lsr.b	#3,d0
0001DDC0 D169 000C                  		add.w	d0,obY(a1)
0001DDC4                            
0001DDC4                            	@noexplosion:
0001DDC4 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DDC8 6700                       		beq.s	@makeanimal
0001DDCA 4E75                       		rts	
0001DDCC                            ; ===========================================================================
0001DDCC                            
0001DDCC                            @makeanimal:
0001DDCC 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DDD2 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DDD8 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DDDE 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DDE4 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DDEA 7C07                       		moveq	#7,d6
0001DDEC 3A3C 009A                  		move.w	#$9A,d5
0001DDF0 78E4                       		moveq	#-$1C,d4
0001DDF2                            
0001DDF2                            	@loop:
0001DDF2 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001DDF8 6600                       		bne.s	@fail
0001DDFA 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DDFE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE04 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE0A D969 0008                  		add.w	d4,obX(a1)
0001DE0E 5E44                       		addq.w	#7,d4
0001DE10 3345 0036                  		move.w	d5,$36(a1)
0001DE14 5145                       		subq.w	#8,d5
0001DE16 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DE1A                            
0001DE1A                            	@fail:
0001DE1A 4E75                       		rts	
0001DE1C                            ; ===========================================================================
0001DE1C                            
0001DE1C                            Pri_Animals:	; Routine $C
0001DE1C 7007                       		moveq	#7,d0
0001DE1E C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DE22 6600                       		bne.s	@noanimal
0001DE24 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001DE2A 6600                       		bne.s	@noanimal
0001DE2C 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DE30 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE36 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE3C 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DE42 0240 001F                  		andi.w	#$1F,d0
0001DE46 5D40                       		subq.w	#6,d0
0001DE48 4A41                       		tst.w	d1
0001DE4A 6A00                       		bpl.s	@ispositive
0001DE4C 4440                       		neg.w	d0
0001DE4E                            
0001DE4E                            	@ispositive:
0001DE4E D169 0008                  		add.w	d0,obX(a1)
0001DE52 337C 000C 0036             		move.w	#$C,$36(a1)
0001DE58                            
0001DE58                            	@noanimal:
0001DE58 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DE5C 6600                       		bne.s	@wait
0001DE5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DE62 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DE68                            
0001DE68                            	@wait:
0001DE68 4E75                       		rts	
0001DE6A                            ; ===========================================================================
0001DE6A                            
0001DE6A                            Pri_EndAct:	; Routine $E
0001DE6A 703E                       		moveq	#$3E,d0
0001DE6C 7228                       		moveq	#id_Animals,d1
0001DE6E 7440                       		moveq	#$40,d2
0001DE70 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DE74                            
0001DE74                            	@findanimal:
0001DE74 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DE76 6700                       		beq.s	@found		; if yes, branch
0001DE78 D2C2                       		adda.w	d2,a1		; next object RAM
0001DE7A 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DE7E                            
0001DE7E 4EB9 0001 0E86             		jsr	(GotThroughAct1).l
0001DE84 4EF9 0000 F782             		jmp	(DeleteObject).l
0001DE8A                            
0001DE8A                            	@found:
0001DE8A 4E75                       		rts	
0001DE8A 4E75                       		rts	
0001DE8C                            		include	"_anim\Prison Capsule.asm"
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C                            ; Animation script - prison capsule
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DE8E 0000                       		dc.w @switchflash-Ani_Pri
0001DE90 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DE94                            		even
0001DE94                            		even
0001DE94                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DE94                            ; ---------------------------------------------------------------------------
0001DE94                            ; Sprite mappings - prison capsule
0001DE94                            ; ---------------------------------------------------------------------------
0001DE94                            Map_Pri_internal:
0001DE94 0000                       		dc.w @capsule-Map_Pri_internal
0001DE96 0000                       		dc.w @switch1-Map_Pri_internal
0001DE98 0000                       		dc.w @broken-Map_Pri_internal
0001DE9A 0000                       		dc.w @switch2-Map_Pri_internal
0001DE9C 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DE9E 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DEA0 0000                       		dc.w @blank-Map_Pri_internal
0001DEA2 07                         @capsule:	dc.b 7
0001DEA3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DEA8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DEAD E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DEB2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DEB7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DEBC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DEC1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DEC6 01                         @switch1:	dc.b 1
0001DEC7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DECC 06                         @broken:	dc.b 6
0001DECD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DED2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DED7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DEDC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DEE1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DEE6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DEEB 01                         @switch2:	dc.b 1
0001DEEC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DEF1 02                         @unusedthing1:	dc.b 2
0001DEF2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DEF7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DEFC 01                         @unusedthing2:	dc.b 1
0001DEFD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DF02 00                         @blank:		dc.b 0
0001DF04 00                         		even
0001DF04 00                         		even
0001DF04                            
0001DF04                            		include	"_incObj\sub ReactToItem.asm"
0001DF04                            ; ---------------------------------------------------------------------------
0001DF04                            ; Subroutine to react to obColType(a0)
0001DF04                            ; ---------------------------------------------------------------------------
0001DF04                            
0001DF04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF04                            
0001DF04                            
0001DF04                            ReactToItem:
0001DF04 4E71                       		nop	
0001DF06 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DF0A 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DF0E 5142                       		subq.w	#8,d2
0001DF10 7A00                       		moveq	#0,d5
0001DF12 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DF16 5705                       		subq.b	#3,d5
0001DF18 9645                       		sub.w	d5,d3
0001DF1A 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DF20 6600                       		bne.s	@notducking	; if not, branch
0001DF22 0643 000C                  		addi.w	#$C,d3
0001DF26 7A0A                       		moveq	#$A,d5
0001DF28                            
0001DF28                            	@notducking:
0001DF28 383C 0010                  		move.w	#$10,d4
0001DF2C DA45                       		add.w	d5,d5
0001DF2E 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DF32 3C3C 005F                  		move.w	#$5F,d6
0001DF36                            
0001DF36                            @loop:
0001DF36 4A29 0001                  		tst.b	obRender(a1)
0001DF3A 6A00                       		bpl.s	@next
0001DF3C 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DF40 6600                       		bne.s	@proximity	; if nonzero, branch
0001DF42                            
0001DF42                            	@next:
0001DF42 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DF46 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DF4A                            
0001DF4A 7000                       		moveq	#0,d0
0001DF4C 4E75                       		rts	
0001DF4E                            ; ===========================================================================
0001DF4E                            @sizes:		;   width, height
0001DF4E 1414                       		dc.b  $14, $14		; $01
0001DF50 0C14                       		dc.b   $C, $14		; $02
0001DF52 140C                       		dc.b  $14,  $C		; $03
0001DF54 0410                       		dc.b	4, $10		; $04
0001DF56 0C12                       		dc.b   $C, $12		; $05
0001DF58 1010                       		dc.b  $10, $10		; $06
0001DF5A 0606                       		dc.b	6,   6		; $07
0001DF5C 180C                       		dc.b  $18,  $C		; $08
0001DF5E 0C10                       		dc.b   $C, $10		; $09
0001DF60 100C                       		dc.b  $10,  $C		; $0A
0001DF62 0808                       		dc.b	8,   8		; $0B
0001DF64 1410                       		dc.b  $14, $10		; $0C
0001DF66 1408                       		dc.b  $14,   8		; $0D
0001DF68 0E0E                       		dc.b   $E,  $E		; $0E
0001DF6A 1818                       		dc.b  $18, $18		; $0F
0001DF6C 2810                       		dc.b  $28, $10		; $10
0001DF6E 1018                       		dc.b  $10, $18		; $11
0001DF70 0810                       		dc.b	8, $10		; $12
0001DF72 2070                       		dc.b  $20, $70		; $13
0001DF74 4020                       		dc.b  $40, $20		; $14
0001DF76 8020                       		dc.b  $80, $20		; $15
0001DF78 2020                       		dc.b  $20, $20		; $16
0001DF7A 0808                       		dc.b	8,   8		; $17
0001DF7C 0404                       		dc.b	4,   4		; $18
0001DF7E 2008                       		dc.b  $20,   8		; $19
0001DF80 0C0C                       		dc.b   $C,  $C		; $1A
0001DF82 0804                       		dc.b	8,   4		; $1B
0001DF84 1804                       		dc.b  $18,   4		; $1C
0001DF86 2804                       		dc.b  $28,   4		; $1D
0001DF88 0408                       		dc.b	4,   8		; $1E
0001DF8A 0418                       		dc.b	4, $18		; $1F
0001DF8C 0428                       		dc.b	4, $28		; $20
0001DF8E 0420                       		dc.b	4, $20		; $21
0001DF90 1818                       		dc.b  $18, $18		; $22
0001DF92 0C18                       		dc.b   $C, $18		; $23
0001DF94 4808                       		dc.b  $48,   8		; $24
0001DF96                            ; ===========================================================================
0001DF96                            
0001DF96                            @proximity:
0001DF96 0240 003F                  		andi.w	#$3F,d0
0001DF9A D040                       		add.w	d0,d0
0001DF9C 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001DFA0 7200                       		moveq	#0,d1
0001DFA2 121A                       		move.b	(a2)+,d1
0001DFA4 3029 0008                  		move.w	obX(a1),d0
0001DFA8 9041                       		sub.w	d1,d0
0001DFAA 9042                       		sub.w	d2,d0
0001DFAC 6400                       		bcc.s	@outsidex	; branch if not touching
0001DFAE D241                       		add.w	d1,d1
0001DFB0 D041                       		add.w	d1,d0
0001DFB2 6500                       		bcs.s	@withinx	; branch if touching
0001DFB4 6000 FF8C                  		bra.w	@next
0001DFB8                            ; ===========================================================================
0001DFB8                            
0001DFB8                            @outsidex:
0001DFB8 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DFBC B044                       		cmp.w	d4,d0
0001DFBE 6200 FF82                  		bhi.w	@next
0001DFC2                            
0001DFC2                            @withinx:
0001DFC2 7200                       		moveq	#0,d1
0001DFC4 121A                       		move.b	(a2)+,d1
0001DFC6 3029 000C                  		move.w	obY(a1),d0
0001DFCA 9041                       		sub.w	d1,d0
0001DFCC 9043                       		sub.w	d3,d0
0001DFCE 6400                       		bcc.s	@outsidey	; branch if not touching
0001DFD0 D241                       		add.w	d1,d1
0001DFD2 D240                       		add.w	d0,d1
0001DFD4 6500                       		bcs.s	@withiny	; branch if touching
0001DFD6 6000 FF6A                  		bra.w	@next
0001DFDA                            
0001DFDA                            ; ===========================================================================
0001DFDA                            
0001DFDA                            @outsidey:
0001DFDA 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DFDE B045                       		cmp.w	d5,d0
0001DFE0 6200 FF60                  		bhi.w	@next
0001DFE4                            
0001DFE4                            @withiny:
0001DFE4                            	@chktype:
0001DFE4 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001DFEA 6600 0000                          	bne	NotGHZReact  ;TIS
0001DFEE 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001DFF2 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001DFF6 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DFFA 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001DFFE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E002 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E006 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E00A                            NotGHZReact:                      ;TIS
0001E00A 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E00E 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E012 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E016 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E01A 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E01E 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E020 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E024                            
0001E024                            ; obColType is $40-$7F (powerups)
0001E024                            
0001E024 1029 0020                  		move.b	obColType(a1),d0
0001E028 0200 003F                  		andi.b	#$3F,d0
0001E02C 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E030 6700                       		beq.s	React_Monitor	; if yes, branch
0001E032 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E038 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E03C 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E040                            
0001E040                            	@invincible:
0001E040 4E75                       		rts	
0001E042                            ; ===========================================================================
0001E042                            
0001E042                            React_Monitor:
0001E042 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E046 6A00                       		bpl.s	@movingdown	; if not, branch
0001E048                            
0001E048 3028 000C                  		move.w	obY(a0),d0
0001E04C 0440 0010                  		subi.w	#$10,d0
0001E050 B069 000C                  		cmp.w	obY(a1),d0
0001E054 6500                       		bcs.s	@donothing
0001E056 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E05A 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E060 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E064 6600                       		bne.s	@donothing
0001E066 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E06A 4E75                       		rts	
0001E06C                            ; ===========================================================================
0001E06C                            
0001E06C                            @movingdown:
0001E06C 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E072 6600                       		bne.s	@donothing
0001E074 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E078 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E07C                            
0001E07C                            	@donothing:
0001E07C 4E75                       		rts	
0001E07E                            ; ===========================================================================
0001E07E                            
0001E07E                            React_Enemy:
0001E07E 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E082 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E084 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E08A 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E08E 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E094 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E098                            
0001E098                            	@donthurtsonic:
0001E098 4A29 0021                  		tst.b	obColProp(a1)
0001E09C 6700                       		beq.s	breakenemy
0001E09E                            
0001E09E 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E0A2 4468 0012                  		neg.w	obVelY(a0)
0001E0A6 E0E8 0010                  		asr	obVelX(a0)
0001E0AA E0E8 0012                  		asr	obVelY(a0)
0001E0AE 137C 0000 0020             		move.b	#0,obColType(a1)
0001E0B4 5329 0021                  		subq.b	#1,obColProp(a1)
0001E0B8 6600                       		bne.s	@flagnotclear
0001E0BA 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E0C0                            
0001E0C0                            	@flagnotclear:
0001E0C0 4E75                       		rts	
0001E0C2                            ; ===========================================================================
0001E0C2                            
0001E0C2                            breakenemy:
0001E0C2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E0C8 7000                       		moveq	#0,d0
0001E0CA 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E0CE 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E0D2 0C40 0006                  		cmpi.w	#6,d0
0001E0D6 6500                       		bcs.s	@bonusokay
0001E0D8 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E0DA                            
0001E0DA                            	@bonusokay:
0001E0DA 3340 003E                  		move.w	d0,$3E(a1)
0001E0DE 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E0E2 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E0E8 6500                       		bcs.s	@lessthan16	; if not, branch
0001E0EA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E0EE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E0F4                            
0001E0F4                            	@lessthan16:
0001E0F4 6100 0000                  		bsr.w	AddPoints
0001E0F8 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E0FC 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E102 4A68 0012                  		tst.w	obVelY(a0)
0001E106 6B00                       		bmi.s	@bouncedown
0001E108 3028 000C                  		move.w	obY(a0),d0
0001E10C B069 000C                  		cmp.w	obY(a1),d0
0001E110 6400                       		bcc.s	@bounceup
0001E112 4468 0012                  		neg.w	obVelY(a0)
0001E116 4E75                       		rts	
0001E118                            ; ===========================================================================
0001E118                            
0001E118                            	@bouncedown:
0001E118 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E11E 4E75                       		rts	
0001E120                            
0001E120                            	@bounceup:
0001E120 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E126 4E75                       		rts	
0001E128                            
0001E128 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E130                            
0001E130                            ; ===========================================================================
0001E130                            
0001E130                            React_Caterkiller:
0001E130 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E136                            
0001E136                            React_ChkHurt:
0001E136 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E13A 6700                       		beq.s	notinvincible	; if not, branch
0001E13C                            
0001E13C                            	isflashing:
0001E13C 70FF                       		moveq	#-1,d0
0001E13E 4E75                       		rts	
0001E140                            ; ===========================================================================
0001E140                            
0001E140                            	notinvincible:
0001E140 4E71                       		nop	
0001E142 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E146 66F4                       		bne.s	isflashing	; if yes, branch
0001E148 2449                       		movea.l	a1,a2
0001E14A                            
0001E14A                            ; End of function ReactToItem
0001E14A                            ; continue straight to HurtSonic
0001E14A                            
0001E14A                            ; ---------------------------------------------------------------------------
0001E14A                            ; Hurting Sonic	subroutine
0001E14A                            ; ---------------------------------------------------------------------------
0001E14A                            
0001E14A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E14A                            
0001E14A                            
0001E14A                            HurtSonic:
0001E14A 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E14E 6600                       		bne.s	@hasshield	; if yes, branch
0001E150 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E154 6600                       		bne.s	@hasshield	; if yes, branch
0001E156 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E15A 6600                       		bne.s	@hasshield	; if yes, branch
0001E15C 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E160 6600                       		bne.s	@hasshield	; if yes, branch
0001E162 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E166 6700 0000                  		beq.w	@norings	; if not, branch
0001E16A                            
0001E16A 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
0001E170 6600                       		bne.s	@hasshield
0001E172 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E176 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E17C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E182                            
0001E182                            	@hasshield:
0001E182 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E188 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E18A 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E18E 6700 FFAC                  		beq.w	isflashing
0001E192 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E196 6700 FFA4                  		beq.w	isflashing
0001E19A                            
0001E19A                            	@hasrshield:
0001E19A 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E1A0 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E1A2 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E1A6 6700 FF94                  		beq.w 	isflashing
0001E1AA 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E1AE 6700 FF8C                  		beq.w 	isflashing
0001E1B2 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E1B6 6700 FF84                  		beq.w 	isflashing
0001E1BA 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E1BE 6700 FF7C                  		beq.w 	isflashing
0001E1C2 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E1C6 6700 FF74                  		beq.w 	isflashing
0001E1CA 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E1CE 6700 FF6C                  		beq.w 	isflashing
0001E1D2 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E1D6 6700 FF64                  		beq.w 	isflashing
0001E1DA 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E1DE 6700 FF5C                  		beq.w 	isflashing
0001E1E2                            
0001E1E2                            	@hasspshield:
0001E1E2 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E1E8 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E1EA 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E1EE 6700 FF4C                  		beq.w 	isflashing
0001E1F2 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E1F6 6700 FF44                  		beq.w 	isflashing
0001E1FA 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E1FE 6700 FF3C                  		beq.w 	isflashing
0001E202 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E206 6700 FF34                  		beq.w 	isflashing
0001E20A 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E20E 6700 FF2C                  		beq.w 	isflashing
0001E212 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E216 6700 FF24                  		beq.w 	isflashing
0001E21A 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E21E 6700 FF1C                  		beq.w 	isflashing
0001E222 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E226 6700 FF14                  		beq.w 	isflashing
0001E22A 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E22E 6700 FF0C                  		beq.w 	isflashing
0001E232 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E236 6700 FE8A                  		beq.w 	breakenemy
0001E23A 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E23E 6700 FE82                  		beq.w 	breakenemy
0001E242 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E246 6700 FE7A                  		beq.w 	breakenemy
0001E24A 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E24E 6700 FE72                  		beq.w 	breakenemy
0001E252 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E256 6700 FE6A                  		beq.w 	breakenemy
0001E25A                            
0001E25A                            
0001E25A                            	@hurtcont:
0001E25A 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E260 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E266 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E26C                            		
0001E26C 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E272 6700                       		beq.s	@hurtcont2	;if not, branch
0001E274 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E278                            		
0001E278                            	@hurtcont2:
0001E278 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E27E 4EB9 0001 61B0             		jsr		Sonic_ResetOnFloor
0001E284 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E28A 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E290 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E296 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E29C 6700                       		beq.s	@isdry		; if not, branch
0001E29E                            
0001E29E 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E2A4 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E2AA                            
0001E2AA                            	@isdry:
0001E2AA 3028 0008                  		move.w	obX(a0),d0
0001E2AE B06A 0008                  		cmp.w	obX(a2),d0
0001E2B2 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E2B4 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E2B8                            
0001E2B8                            	@isleft:
0001E2B8 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E2BE 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E2C4 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E2CA 317C 0120 0030             		move.w	#$120,$30(a0)
0001E2D0 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E2D4 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E2D6 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E2DA 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E2DC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E2E2 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E2E8 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E2EE 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E2F2 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E2F6 6600                       		bne.s	@sound		; if not, branch
0001E2F8 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E2FC 6600                       		bne.s	@sound		; if not, branch
0001E2FE 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E302                            
0001E302                            	@sound:
0001E302 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001E308 70FF                       		moveq	#-1,d0
0001E30A 4E75                       		rts	
0001E30C                            
0001E30C                            	@hurtelec:
0001E30C 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E312 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E318 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E31C 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E320 66E0                       		bne.s	@sound		; if not, branch
0001E322 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E326 66DA                       		bne.s	@sound		; if not, branch
0001E328 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E32C                            ; ===========================================================================
0001E32C                            
0001E32C                            @norings:
0001E32C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E330 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E334                            
0001E334                            ; ---------------------------------------------------------------------------
0001E334                            ; Subroutine to	kill Sonic
0001E334                            ; ---------------------------------------------------------------------------
0001E334                            
0001E334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E334                            
0001E334                            
0001E334                            KillSonic:
0001E334 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E338 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E33C 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E342 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E348 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E34E 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E354 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E35A 4EB9 0001 61B0             		jsr		Sonic_ResetOnFloor
0001E360 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E366 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E36C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E372 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E378 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E37E 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E382 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E384 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E388 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E38A 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E390 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E396 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E39A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E39E 6600                       		bne.s	@sound
0001E3A0 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E3A4                            
0001E3A4                            	@sound:
0001E3A4 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001E3AA                            
0001E3AA                            	@dontdie:
0001E3AA 70FF                       		moveq	#-1,d0
0001E3AC 4E75                       		rts	
0001E3AE                            ; End of function KillSonic
0001E3AE                            Kill_Lava:	
0001E3AE 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E3B4 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E3BA 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E3BE 4EB9 0000 0FCC                 jsr		(PlaySound_Special).l
0001E3C4                            
0001E3C4                            
0001E3C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3C4                            
0001E3C4                            
0001E3C4                            React_Special:
0001E3C4 1229 0020                  		move.b	obColType(a1),d1
0001E3C8 0201 003F                  		andi.b	#$3F,d1
0001E3CC 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E3D0 6700                       		beq.s	@caterkiller	; if yes, branch
0001E3D2 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E3D6 6700                       		beq.s	@yadrin		; if yes, branch
0001E3D8 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E3DC 6700                       		beq.s	@D7orE1		; if yes, branch
0001E3DE 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E3E2 6700                       		beq.s	@D7orE1		; if yes, branch
0001E3E4 4E75                       		rts	
0001E3E6                            ; ===========================================================================
0001E3E6                            
0001E3E6                            @caterkiller:
0001E3E6 6000 FD48                  		bra.w	React_Caterkiller
0001E3EA                            ; ===========================================================================
0001E3EA                            
0001E3EA                            @yadrin:
0001E3EA 9A40                       		sub.w	d0,d5
0001E3EC 0C45 0008                  		cmpi.w	#8,d5
0001E3F0 6400                       		bcc.s	@normalenemy
0001E3F2 3029 0008                  		move.w	obX(a1),d0
0001E3F6 5940                       		subq.w	#4,d0
0001E3F8 0829 0000 0022             		btst	#0,obStatus(a1)
0001E3FE 6700                       		beq.s	@noflip
0001E400 0440 0010                  		subi.w	#$10,d0
0001E404                            
0001E404                            	@noflip:
0001E404 9042                       		sub.w	d2,d0
0001E406 6400                       		bcc.s	@loc_1B13C
0001E408 0640 0018                  		addi.w	#$18,d0
0001E40C 6500                       		bcs.s	@loc_1B140
0001E40E 6000                       		bra.s	@normalenemy
0001E410                            ; ===========================================================================
0001E410                            
0001E410                            	@loc_1B13C:
0001E410 B044                       		cmp.w	d4,d0
0001E412 6200                       		bhi.s	@normalenemy
0001E414                            
0001E414                            	@loc_1B140:
0001E414 6000 FD20                  		bra.w	React_ChkHurt
0001E418                            ; ===========================================================================
0001E418                            
0001E418                            	@normalenemy:
0001E418 6000 FC64                  		bra.w	React_Enemy
0001E41C                            ; ===========================================================================
0001E41C                            
0001E41C                            @D7orE1:
0001E41C 5229 0021                  		addq.b	#1,obColProp(a1)
0001E420 4E75                       		rts	
0001E422                            ; End of function React_Special
0001E422                            
0001E422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E422                            
0001E422                            React_ChkWaterTag:
0001E422 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E428 6600 0000                  		bne	NotWaterTag
0001E42C 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E432                            	NotWaterTag:
0001E432 4E75                       		rts
0001E434                            
0001E434                            React_WaterTag:
0001E434 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E43A 6700 0000                  		beq	SkipWaterTag
0001E43E 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E444                            	SkipWaterTag:
0001E444 4E75                       		rts
0001E444 4E75                       		rts
0001E446                            
0001E446                            ; ---------------------------------------------------------------------------
0001E446                            ; Subroutine to	show the special stage layout
0001E446                            ; ---------------------------------------------------------------------------
0001E446                            
0001E446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E446                            
0001E446                            
0001E446                            SS_ShowLayout:
0001E446 6100 0000                  		bsr.w	SS_AniWallsRings
0001E44A 6100 0000                  		bsr.w	SS_AniItems
0001E44E 3F05                       		move.w	d5,-(sp)
0001E450 43F8 8000                  		lea	($FFFF8000).w,a1
0001E454 1038 F780                  		move.b	(v_ssangle).w,d0
0001E458 0200 00FC                  		andi.b	#$FC,d0
0001E45C 4EB9 0000 37AE             		jsr	(CalcSine).l
0001E462 3800                       		move.w	d0,d4
0001E464 3A01                       		move.w	d1,d5
0001E466 C9FC 0018                  		muls.w	#$18,d4
0001E46A CBFC 0018                  		muls.w	#$18,d5
0001E46E 7400                       		moveq	#0,d2
0001E470 3438 F700                  		move.w	(v_screenposx).w,d2
0001E474 84FC 0018                  		divu.w	#$18,d2
0001E478 4842                       		swap	d2
0001E47A 4442                       		neg.w	d2
0001E47C 0642 FF4C                  		addi.w	#-$B4,d2
0001E480 7600                       		moveq	#0,d3
0001E482 3638 F704                  		move.w	(v_screenposy).w,d3
0001E486 86FC 0018                  		divu.w	#$18,d3
0001E48A 4843                       		swap	d3
0001E48C 4443                       		neg.w	d3
0001E48E 0643 FF4C                  		addi.w	#-$B4,d3
0001E492 3E3C 000F                  		move.w	#$F,d7
0001E496                            
0001E496                            loc_1B19E:
0001E496 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E49A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E49E 4440                       		neg.w	d0
0001E4A0 C3C2                       		muls.w	d2,d1
0001E4A2 C1C3                       		muls.w	d3,d0
0001E4A4 2C00                       		move.l	d0,d6
0001E4A6 DC81                       		add.l	d1,d6
0001E4A8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E4AC C1C2                       		muls.w	d2,d0
0001E4AE C3C3                       		muls.w	d3,d1
0001E4B0 D280                       		add.l	d0,d1
0001E4B2 2406                       		move.l	d6,d2
0001E4B4 3C3C 000F                  		move.w	#$F,d6
0001E4B8                            
0001E4B8                            loc_1B1C0:
0001E4B8 2002                       		move.l	d2,d0
0001E4BA E080                       		asr.l	#8,d0
0001E4BC 32C0                       		move.w	d0,(a1)+
0001E4BE 2001                       		move.l	d1,d0
0001E4C0 E080                       		asr.l	#8,d0
0001E4C2 32C0                       		move.w	d0,(a1)+
0001E4C4 D485                       		add.l	d5,d2
0001E4C6 D284                       		add.l	d4,d1
0001E4C8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E4CC                            
0001E4CC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E4D0 0643 0018                  		addi.w	#$18,d3
0001E4D4 51CF FFC0                  		dbf	d7,loc_1B19E
0001E4D8                            
0001E4D8 3A1F                       		move.w	(sp)+,d5
0001E4DA 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E4E0 7000                       		moveq	#0,d0
0001E4E2 3038 F704                  		move.w	(v_screenposy).w,d0
0001E4E6 80FC 0018                  		divu.w	#$18,d0
0001E4EA C0FC 0080                  		mulu.w	#$80,d0
0001E4EE D1C0                       		adda.l	d0,a0
0001E4F0 7000                       		moveq	#0,d0
0001E4F2 3038 F700                  		move.w	(v_screenposx).w,d0
0001E4F6 80FC 0018                  		divu.w	#$18,d0
0001E4FA D0C0                       		adda.w	d0,a0
0001E4FC 49F8 8000                  		lea	($FFFF8000).w,a4
0001E500 3E3C 000F                  		move.w	#$F,d7
0001E504                            
0001E504                            loc_1B20C:
0001E504 3C3C 000F                  		move.w	#$F,d6
0001E508                            
0001E508                            loc_1B210:
0001E508 7000                       		moveq	#0,d0
0001E50A 1018                       		move.b	(a0)+,d0
0001E50C 6700                       		beq.s	loc_1B268
0001E50E 0C00 004E                  		cmpi.b	#$4E,d0
0001E512 6200                       		bhi.s	loc_1B268
0001E514 3614                       		move.w	(a4),d3
0001E516 0643 0120                  		addi.w	#$120,d3
0001E51A 0C43 0070                  		cmpi.w	#$70,d3
0001E51E 6500                       		blo.s	loc_1B268
0001E520 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E524 6400                       		bhs.s	loc_1B268
0001E526 342C 0002                  		move.w	2(a4),d2
0001E52A 0642 00F0                  		addi.w	#$F0,d2
0001E52E 0C42 0070                  		cmpi.w	#$70,d2
0001E532 6500                       		blo.s	loc_1B268
0001E534 0C42 0170                  		cmpi.w	#$170,d2
0001E538 6400                       		bhs.s	loc_1B268
0001E53A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E540 E748                       		lsl.w	#3,d0
0001E542 4BF5 0000                  		lea	(a5,d0.w),a5
0001E546 225D                       		movea.l	(a5)+,a1
0001E548 321D                       		move.w	(a5)+,d1
0001E54A D241                       		add.w	d1,d1
0001E54C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E550 365D                       		movea.w	(a5)+,a3
0001E552 7200                       		moveq	#0,d1
0001E554 1219                       		move.b	(a1)+,d1
0001E556 5301                       		subq.b	#1,d1
0001E558 6B00                       		bmi.s	loc_1B268
0001E55A 4EB9 0000 F8A6             		jsr	(BuildSpr_Normal).l
0001E560                            
0001E560                            loc_1B268:
0001E560 584C                       		addq.w	#4,a4
0001E562 51CE FFA4                  		dbf	d6,loc_1B210
0001E566                            
0001E566 41E8 0070                  		lea	$70(a0),a0
0001E56A 51CF FF98                  		dbf	d7,loc_1B20C
0001E56E                            
0001E56E 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E572 0C05 0050                  		cmpi.b	#$50,d5
0001E576 6700                       		beq.s	loc_1B288
0001E578 24BC 0000 0000             		move.l	#0,(a2)
0001E57E 4E75                       		rts	
0001E580                            ; ===========================================================================
0001E580                            
0001E580                            loc_1B288:
0001E580 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E586 4E75                       		rts	
0001E588                            ; End of function SS_ShowLayout
0001E588                            
0001E588                            ; ---------------------------------------------------------------------------
0001E588                            ; Subroutine to	animate	walls and rings	in the special stage
0001E588                            ; ---------------------------------------------------------------------------
0001E588                            
0001E588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E588                            
0001E588                            
0001E588                            SS_AniWallsRings:
0001E588 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E58E 7000                       		moveq	#0,d0
0001E590 1038 F780                  		move.b	(v_ssangle).w,d0
0001E594 E408                       		lsr.b	#2,d0
0001E596 0240 000F                  		andi.w	#$F,d0
0001E59A 7223                       		moveq	#$23,d1
0001E59C                            
0001E59C                            loc_1B2A4:
0001E59C 3280                       		move.w	d0,(a1)
0001E59E 5049                       		addq.w	#8,a1
0001E5A0 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E5A4                            
0001E5A4 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E5AA 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E5AE 6A00                       		bpl.s	loc_1B2C8
0001E5B0 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E5B6 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E5BA 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E5C0                            
0001E5C0                            loc_1B2C8:
0001E5C0 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E5C6 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E5CA 6A00                       		bpl.s	loc_1B2E4
0001E5CC 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E5D2 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E5D6 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E5DC                            
0001E5DC                            loc_1B2E4:
0001E5DC 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E5E0 1340 0138                  		move.b	d0,$138(a1)
0001E5E4 1340 0160                  		move.b	d0,$160(a1)
0001E5E8 1340 0148                  		move.b	d0,$148(a1)
0001E5EC 1340 0150                  		move.b	d0,$150(a1)
0001E5F0 1340 01D8                  		move.b	d0,$1D8(a1)
0001E5F4 1340 01E0                  		move.b	d0,$1E0(a1)
0001E5F8 1340 01E8                  		move.b	d0,$1E8(a1)
0001E5FC 1340 01F0                  		move.b	d0,$1F0(a1)
0001E600 1340 01F8                  		move.b	d0,$1F8(a1)
0001E604 1340 0200                  		move.b	d0,$200(a1)
0001E608 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E60C 6A00                       		bpl.s	loc_1B326
0001E60E 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E614 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E618 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E61E                            
0001E61E                            loc_1B326:
0001E61E 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E622 1340 0168                  		move.b	d0,$168(a1)
0001E626 1340 0170                  		move.b	d0,$170(a1)
0001E62A 1340 0178                  		move.b	d0,$178(a1)
0001E62E 1340 0180                  		move.b	d0,$180(a1)
0001E632 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E636 6A00                       		bpl.s	loc_1B350
0001E638 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E63E 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E642 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E648                            
0001E648                            loc_1B350:
0001E648 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E64E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E654 7000                       		moveq	#0,d0
0001E656 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E65A D040                       		add.w	d0,d0
0001E65C 41F0 0000                  		lea	(a0,d0.w),a0
0001E660 3290                       		move.w	(a0),(a1)
0001E662 3368 0002 0008             		move.w	2(a0),8(a1)
0001E668 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E66E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E674 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E67A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E680 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E686 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E68C D0FC 0020                  		adda.w	#$20,a0
0001E690 D2FC 0048                  		adda.w	#$48,a1
0001E694 3290                       		move.w	(a0),(a1)
0001E696 3368 0002 0008             		move.w	2(a0),8(a1)
0001E69C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E6A2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E6A8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E6AE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E6B4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E6BA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E6C0 D0FC 0020                  		adda.w	#$20,a0
0001E6C4 D2FC 0048                  		adda.w	#$48,a1
0001E6C8 3290                       		move.w	(a0),(a1)
0001E6CA 3368 0002 0008             		move.w	2(a0),8(a1)
0001E6D0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E6D6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E6DC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E6E2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E6E8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E6EE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E6F4 D0FC 0020                  		adda.w	#$20,a0
0001E6F8 D2FC 0048                  		adda.w	#$48,a1
0001E6FC 3290                       		move.w	(a0),(a1)
0001E6FE 3368 0002 0008             		move.w	2(a0),8(a1)
0001E704 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E70A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E710 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E716 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E71C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E722 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E728 D0FC 0020                  		adda.w	#$20,a0
0001E72C D2FC 0048                  		adda.w	#$48,a1
0001E730 4E75                       		rts	
0001E732                            ; End of function SS_AniWallsRings
0001E732                            
0001E732                            ; ===========================================================================
0001E732 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E742 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E752 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E762 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E772 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E782 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E792 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E7A2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E7B2                            ; ---------------------------------------------------------------------------
0001E7B2                            ; Subroutine to	remove items when you collect them in the special stage
0001E7B2                            ; ---------------------------------------------------------------------------
0001E7B2                            
0001E7B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7B2                            
0001E7B2                            
0001E7B2                            SS_RemoveCollectedItem:
0001E7B2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E7B8 303C 001F                  		move.w	#$1F,d0
0001E7BC                            
0001E7BC                            loc_1B4C4:
0001E7BC 4A12                       		tst.b	(a2)
0001E7BE 6700                       		beq.s	locret_1B4CE
0001E7C0 504A                       		addq.w	#8,a2
0001E7C2 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E7C6                            
0001E7C6                            locret_1B4CE:
0001E7C6 4E75                       		rts	
0001E7C8                            ; End of function SS_RemoveCollectedItem
0001E7C8                            
0001E7C8                            ; ---------------------------------------------------------------------------
0001E7C8                            ; Subroutine to	animate	special	stage items when you touch them
0001E7C8                            ; ---------------------------------------------------------------------------
0001E7C8                            
0001E7C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7C8                            
0001E7C8                            
0001E7C8                            SS_AniItems:
0001E7C8 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E7CE 3E3C 001F                  		move.w	#$1F,d7
0001E7D2                            
0001E7D2                            loc_1B4DA:
0001E7D2 7000                       		moveq	#0,d0
0001E7D4 1010                       		move.b	(a0),d0
0001E7D6 6700                       		beq.s	loc_1B4E8
0001E7D8 E548                       		lsl.w	#2,d0
0001E7DA 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E7DE 4E91                       		jsr	(a1)
0001E7E0                            
0001E7E0                            loc_1B4E8:
0001E7E0 5048                       		addq.w	#8,a0
0001E7E2                            
0001E7E2                            loc_1B4EA:
0001E7E2 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E7E6                            
0001E7E6 4E75                       		rts	
0001E7E8                            ; End of function SS_AniItems
0001E7E8                            
0001E7E8                            ; ===========================================================================
0001E7E8 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E7EC 0000 0000                  		dc.l SS_AniBumper
0001E7F0 0000 0000                  		dc.l SS_Ani1Up
0001E7F4 0000 0000                  		dc.l SS_AniReverse
0001E7F8 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E7FC 0000 0000                  		dc.l SS_AniGlassBlock
0001E800                            ; ===========================================================================
0001E800                            
0001E800                            SS_AniRingSparks:
0001E800 5328 0002                  		subq.b	#1,2(a0)
0001E804 6A00                       		bpl.s	locret_1B530
0001E806 117C 0005 0002             		move.b	#5,2(a0)
0001E80C 7000                       		moveq	#0,d0
0001E80E 1028 0003                  		move.b	3(a0),d0
0001E812 5228 0003                  		addq.b	#1,3(a0)
0001E816 2268 0004                  		movea.l	4(a0),a1
0001E81A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E81E 1280                       		move.b	d0,(a1)
0001E820 6600                       		bne.s	locret_1B530
0001E822 4290                       		clr.l	(a0)
0001E824 42A8 0004                  		clr.l	4(a0)
0001E828                            
0001E828                            locret_1B530:
0001E828 4E75                       		rts	
0001E82A                            ; ===========================================================================
0001E82A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E830                            ; ===========================================================================
0001E830                            
0001E830                            SS_AniBumper:
0001E830 5328 0002                  		subq.b	#1,2(a0)
0001E834 6A00                       		bpl.s	locret_1B566
0001E836 117C 0007 0002             		move.b	#7,2(a0)
0001E83C 7000                       		moveq	#0,d0
0001E83E 1028 0003                  		move.b	3(a0),d0
0001E842 5228 0003                  		addq.b	#1,3(a0)
0001E846 2268 0004                  		movea.l	4(a0),a1
0001E84A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E84E 6600                       		bne.s	loc_1B564
0001E850 4290                       		clr.l	(a0)
0001E852 42A8 0004                  		clr.l	4(a0)
0001E856 12BC 0025                  		move.b	#$25,(a1)
0001E85A 4E75                       		rts	
0001E85C                            ; ===========================================================================
0001E85C                            
0001E85C                            loc_1B564:
0001E85C 1280                       		move.b	d0,(a1)
0001E85E                            
0001E85E                            locret_1B566:
0001E85E 4E75                       		rts	
0001E860                            ; ===========================================================================
0001E860 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E866                            ; ===========================================================================
0001E866                            
0001E866                            SS_Ani1Up:
0001E866 5328 0002                  		subq.b	#1,2(a0)
0001E86A 6A00                       		bpl.s	locret_1B596
0001E86C 117C 0005 0002             		move.b	#5,2(a0)
0001E872 7000                       		moveq	#0,d0
0001E874 1028 0003                  		move.b	3(a0),d0
0001E878 5228 0003                  		addq.b	#1,3(a0)
0001E87C 2268 0004                  		movea.l	4(a0),a1
0001E880 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E884 1280                       		move.b	d0,(a1)
0001E886 6600                       		bne.s	locret_1B596
0001E888 4290                       		clr.l	(a0)
0001E88A 42A8 0004                  		clr.l	4(a0)
0001E88E                            
0001E88E                            locret_1B596:
0001E88E 4E75                       		rts	
0001E890                            ; ===========================================================================
0001E890 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E896                            ; ===========================================================================
0001E896                            
0001E896                            SS_AniReverse:
0001E896 5328 0002                  		subq.b	#1,2(a0)
0001E89A 6A00                       		bpl.s	locret_1B5CC
0001E89C 117C 0007 0002             		move.b	#7,2(a0)
0001E8A2 7000                       		moveq	#0,d0
0001E8A4 1028 0003                  		move.b	3(a0),d0
0001E8A8 5228 0003                  		addq.b	#1,3(a0)
0001E8AC 2268 0004                  		movea.l	4(a0),a1
0001E8B0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E8B4 6600                       		bne.s	loc_1B5CA
0001E8B6 4290                       		clr.l	(a0)
0001E8B8 42A8 0004                  		clr.l	4(a0)
0001E8BC 12BC 002B                  		move.b	#$2B,(a1)
0001E8C0 4E75                       		rts	
0001E8C2                            ; ===========================================================================
0001E8C2                            
0001E8C2                            loc_1B5CA:
0001E8C2 1280                       		move.b	d0,(a1)
0001E8C4                            
0001E8C4                            locret_1B5CC:
0001E8C4 4E75                       		rts	
0001E8C6                            ; ===========================================================================
0001E8C6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E8CC                            ; ===========================================================================
0001E8CC                            
0001E8CC                            SS_AniEmeraldSparks:
0001E8CC 5328 0002                  		subq.b	#1,2(a0)
0001E8D0 6A00                       		bpl.s	locret_1B60C
0001E8D2 117C 0005 0002             		move.b	#5,2(a0)
0001E8D8 7000                       		moveq	#0,d0
0001E8DA 1028 0003                  		move.b	3(a0),d0
0001E8DE 5228 0003                  		addq.b	#1,3(a0)
0001E8E2 2268 0004                  		movea.l	4(a0),a1
0001E8E6 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E8EA 1280                       		move.b	d0,(a1)
0001E8EC 6600                       		bne.s	locret_1B60C
0001E8EE 4290                       		clr.l	(a0)
0001E8F0 42A8 0004                  		clr.l	4(a0)
0001E8F4 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E904                            
0001E904                            locret_1B60C:
0001E904 4E75                       		rts	
0001E906                            ; ===========================================================================
0001E906 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E90C                            ; ===========================================================================
0001E90C                            
0001E90C                            SS_AniGlassBlock:
0001E90C 5328 0002                  		subq.b	#1,2(a0)
0001E910 6A00                       		bpl.s	locret_1B640
0001E912 117C 0001 0002             		move.b	#1,2(a0)
0001E918 7000                       		moveq	#0,d0
0001E91A 1028 0003                  		move.b	3(a0),d0
0001E91E 5228 0003                  		addq.b	#1,3(a0)
0001E922 2268 0004                  		movea.l	4(a0),a1
0001E926 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E92A 1280                       		move.b	d0,(a1)
0001E92C 6600                       		bne.s	locret_1B640
0001E92E 12A8 0004                  		move.b	4(a0),(a1)
0001E932 4290                       		clr.l	(a0)
0001E934 42A8 0004                  		clr.l	4(a0)
0001E938                            
0001E938                            locret_1B640:
0001E938 4E75                       		rts	
0001E93A                            ; ===========================================================================
0001E93A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E944                            
0001E944                            ; ---------------------------------------------------------------------------
0001E944                            ; Special stage	layout pointers
0001E944                            ; ---------------------------------------------------------------------------
0001E944                            SS_LayoutIndex:
0001E944 0000 0000                  		dc.l SS_1
0001E948 0000 0000                  		dc.l SS_2
0001E94C 0000 0000                  		dc.l SS_3
0001E950 0000 0000                  		dc.l SS_4
0001E954 0000 0000                  		dc.l SS_5
0001E958 0000 0000                  		dc.l SS_6
0001E95C                            		even
0001E95C                            
0001E95C                            ; ---------------------------------------------------------------------------
0001E95C                            ; Special stage start locations
0001E95C                            ; ---------------------------------------------------------------------------
0001E95C                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001E95C                            ; ---------------------------------------------------------------------------
0001E95C                            ; Special stage start locations
0001E95C                            ; ---------------------------------------------------------------------------
0001E95C                            
0001E95C                            		incbin	"startpos\ss1.bin"
0001E960                            		incbin	"startpos\ss2.bin"
0001E964                            		incbin	"startpos\ss3.bin"
0001E968                            		incbin	"startpos\ss4.bin"
0001E96C                            		incbin	"startpos\ss5.bin"
0001E970                            		incbin	"startpos\ss6.bin"
0001E974                            		even
0001E974                            		even
0001E974                            
0001E974                            ; ---------------------------------------------------------------------------
0001E974                            ; Subroutine to	load special stage layout
0001E974                            ; ---------------------------------------------------------------------------
0001E974                            
0001E974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E974                            
0001E974                            
0001E974                            SS_Load:
0001E974 7000                       		moveq	#0,d0
0001E976 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001E97A 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001E97E 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001E984 6500                       		blo.s	SS_ChkEmldNum
0001E986 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001E98C                            
0001E98C                            SS_ChkEmldNum:
0001E98C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001E992 6700                       		beq.s	SS_LoadData	; if yes, branch
0001E994 7200                       		moveq	#0,d1
0001E996 1238 FE57                  		move.b	(v_emeralds).w,d1
0001E99A 5301                       		subq.b	#1,d1
0001E99C 6500                       		blo.s	SS_LoadData
0001E99E 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001E9A2                            
0001E9A2                            SS_ChkEmldLoop:	
0001E9A2 B033 1000                  		cmp.b	(a3,d1.w),d0
0001E9A6 6600                       		bne.s	SS_ChkEmldRepeat
0001E9A8 60CA                       		bra.s	SS_Load
0001E9AA                            ; ===========================================================================
0001E9AA                            
0001E9AA                            SS_ChkEmldRepeat:
0001E9AA 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001E9AE                            
0001E9AE                            SS_LoadData:
0001E9AE E548                       		lsl.w	#2,d0
0001E9B0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001E9B4 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001E9B8 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001E9BC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001E9C0 43F9 00FF 4000             		lea	($FF4000).l,a1
0001E9C6 303C 0000                  		move.w	#0,d0
0001E9CA 4EB9 0000 1604             		jsr	(EniDec).l
0001E9D0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E9D6 303C 0FFF                  		move.w	#$FFF,d0
0001E9DA                            
0001E9DA                            SS_ClrRAM3:
0001E9DA 4299                       		clr.l	(a1)+
0001E9DC 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001E9E0                            
0001E9E0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E9E6 41F9 00FF 4000             		lea	($FF4000).l,a0
0001E9EC 723F                       		moveq	#$3F,d1
0001E9EE                            
0001E9EE                            loc_1B6F6:
0001E9EE 743F                       		moveq	#$3F,d2
0001E9F0                            
0001E9F0                            loc_1B6F8:
0001E9F0 12D8                       		move.b	(a0)+,(a1)+
0001E9F2 51CA FFFC                  		dbf	d2,loc_1B6F8
0001E9F6                            
0001E9F6 43E9 0040                  		lea	$40(a1),a1
0001E9FA 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001E9FE                            
0001E9FE 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EA04 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EA0A 724D                       		moveq	#$4D,d1
0001EA0C                            
0001EA0C                            loc_1B714:
0001EA0C 22D8                       		move.l	(a0)+,(a1)+
0001EA0E 32FC 0000                  		move.w	#0,(a1)+
0001EA12 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EA18 32D8                       		move.w	(a0)+,(a1)+
0001EA1A 51C9 FFF0                  		dbf	d1,loc_1B714
0001EA1E                            
0001EA1E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EA24 323C 003F                  		move.w	#$3F,d1
0001EA28                            
0001EA28                            loc_1B730:
0001EA28                            
0001EA28 4299                       		clr.l	(a1)+
0001EA2A 51C9 FFFC                  		dbf	d1,loc_1B730
0001EA2E                            
0001EA2E 4E75                       		rts	
0001EA30                            ; End of function SS_Load
0001EA30                            
0001EA30                            ; ===========================================================================
0001EA30                            
0001EA30                            SS_MapIndex:
0001EA30                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EA30                            ; ---------------------------------------------------------------------------
0001EA30                            ; Special stage	mappings and VRAM pointers
0001EA30                            ; ---------------------------------------------------------------------------
0001EA30 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EA34 0142                       	dc.w $142		; VRAM setting
0001EA36 0000 0000                  	dc.l Map_SSWalls
0001EA3A 0142                       	dc.w $142
0001EA3C 0000 0000                  	dc.l Map_SSWalls
0001EA40 0142                       	dc.w $142
0001EA42 0000 0000                  	dc.l Map_SSWalls
0001EA46 0142                       	dc.w $142
0001EA48 0000 0000                  	dc.l Map_SSWalls
0001EA4C 0142                       	dc.w $142
0001EA4E 0000 0000                  	dc.l Map_SSWalls
0001EA52 0142                       	dc.w $142
0001EA54 0000 0000                  	dc.l Map_SSWalls
0001EA58 0142                       	dc.w $142
0001EA5A 0000 0000                  	dc.l Map_SSWalls
0001EA5E 0142                       	dc.w $142
0001EA60 0000 0000                  	dc.l Map_SSWalls
0001EA64 0142                       	dc.w $142
0001EA66 0000 0000                  	dc.l Map_SSWalls
0001EA6A 2142                       	dc.w $2142
0001EA6C 0000 0000                  	dc.l Map_SSWalls
0001EA70 2142                       	dc.w $2142
0001EA72 0000 0000                  	dc.l Map_SSWalls
0001EA76 2142                       	dc.w $2142
0001EA78 0000 0000                  	dc.l Map_SSWalls
0001EA7C 2142                       	dc.w $2142
0001EA7E 0000 0000                  	dc.l Map_SSWalls
0001EA82 2142                       	dc.w $2142
0001EA84 0000 0000                  	dc.l Map_SSWalls
0001EA88 2142                       	dc.w $2142
0001EA8A 0000 0000                  	dc.l Map_SSWalls
0001EA8E 2142                       	dc.w $2142
0001EA90 0000 0000                  	dc.l Map_SSWalls
0001EA94 2142                       	dc.w $2142
0001EA96 0000 0000                  	dc.l Map_SSWalls
0001EA9A 2142                       	dc.w $2142
0001EA9C 0000 0000                  	dc.l Map_SSWalls
0001EAA0 4142                       	dc.w $4142
0001EAA2 0000 0000                  	dc.l Map_SSWalls
0001EAA6 4142                       	dc.w $4142
0001EAA8 0000 0000                  	dc.l Map_SSWalls
0001EAAC 4142                       	dc.w $4142
0001EAAE 0000 0000                  	dc.l Map_SSWalls
0001EAB2 4142                       	dc.w $4142
0001EAB4 0000 0000                  	dc.l Map_SSWalls
0001EAB8 4142                       	dc.w $4142
0001EABA 0000 0000                  	dc.l Map_SSWalls
0001EABE 4142                       	dc.w $4142
0001EAC0 0000 0000                  	dc.l Map_SSWalls
0001EAC4 4142                       	dc.w $4142
0001EAC6 0000 0000                  	dc.l Map_SSWalls
0001EACA 4142                       	dc.w $4142
0001EACC 0000 0000                  	dc.l Map_SSWalls
0001EAD0 4142                       	dc.w $4142
0001EAD2 0000 0000                  	dc.l Map_SSWalls
0001EAD6 6142                       	dc.w $6142
0001EAD8 0000 0000                  	dc.l Map_SSWalls
0001EADC 6142                       	dc.w $6142
0001EADE 0000 0000                  	dc.l Map_SSWalls
0001EAE2 6142                       	dc.w $6142
0001EAE4 0000 0000                  	dc.l Map_SSWalls
0001EAE8 6142                       	dc.w $6142
0001EAEA 0000 0000                  	dc.l Map_SSWalls
0001EAEE 6142                       	dc.w $6142
0001EAF0 0000 0000                  	dc.l Map_SSWalls
0001EAF4 6142                       	dc.w $6142
0001EAF6 0000 0000                  	dc.l Map_SSWalls
0001EAFA 6142                       	dc.w $6142
0001EAFC 0000 0000                  	dc.l Map_SSWalls
0001EB00 6142                       	dc.w $6142
0001EB02 0000 0000                  	dc.l Map_SSWalls
0001EB06 6142                       	dc.w $6142
0001EB08 0001 0C66                  	dc.l Map_Bump
0001EB0C 023B                       	dc.w $23B
0001EB0E 0000 0000                  	dc.l Map_SS_R
0001EB12 0570                       	dc.w $570
0001EB14 0000 0000                  	dc.l Map_SS_R
0001EB18 0251                       	dc.w $251
0001EB1A 0000 0000                  	dc.l Map_SS_R
0001EB1E 0370                       	dc.w $370
0001EB20 0000 0000                  	dc.l Map_SS_Up
0001EB24 0263                       	dc.w $263
0001EB26 0000 0000                  	dc.l Map_SS_Down
0001EB2A 0263                       	dc.w $263
0001EB2C 0000 0000                  	dc.l Map_SS_R
0001EB30 22F0                       	dc.w $22F0
0001EB32 0000 0000                  	dc.l Map_SS_Glass
0001EB36 0470                       	dc.w $470
0001EB38 0000 0000                  	dc.l Map_SS_Glass
0001EB3C 05F0                       	dc.w $5F0
0001EB3E 0000 0000                  	dc.l Map_SS_Glass
0001EB42 65F0                       	dc.w $65F0
0001EB44 0000 0000                  	dc.l Map_SS_Glass
0001EB48 25F0                       	dc.w $25F0
0001EB4A 0000 0000                  	dc.l Map_SS_Glass
0001EB4E 45F0                       	dc.w $45F0
0001EB50 0000 0000                  	dc.l Map_SS_R
0001EB54 02F0                       	dc.w $2F0
0001EB56 0101 0C66                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EB5A 023B                       	dc.w $23B
0001EB5C 0201 0C66                  	dc.l Map_Bump+$2000000
0001EB60 023B                       	dc.w $23B
0001EB62 0000 0000                  	dc.l Map_SS_R
0001EB66 0797                       	dc.w $797
0001EB68 0000 0000                  	dc.l Map_SS_R
0001EB6C 07A0                       	dc.w $7A0
0001EB6E 0000 0000                  	dc.l Map_SS_R
0001EB72 07A9                       	dc.w $7A9
0001EB74 0000 0000                  	dc.l Map_SS_R
0001EB78 0797                       	dc.w $797
0001EB7A 0000 0000                  	dc.l Map_SS_R
0001EB7E 07A0                       	dc.w $7A0
0001EB80 0000 0000                  	dc.l Map_SS_R
0001EB84 07A9                       	dc.w $7A9
0001EB86 0000 BDB4                  	dc.l Map_Ring
0001EB8A 2798                       	dc.w $2798
0001EB8C 0000 0000                  	dc.l Map_SS_Chaos3
0001EB90 0770                       	dc.w $770
0001EB92 0000 0000                  	dc.l Map_SS_Chaos3
0001EB96 2770                       	dc.w $2770
0001EB98 0000 0000                  	dc.l Map_SS_Chaos3
0001EB9C 4770                       	dc.w $4770
0001EB9E 0000 0000                  	dc.l Map_SS_Chaos3
0001EBA2 6770                       	dc.w $6770
0001EBA4 0000 0000                  	dc.l Map_SS_Chaos1
0001EBA8 0770                       	dc.w $770
0001EBAA 0000 0000                  	dc.l Map_SS_Chaos2
0001EBAE 0770                       	dc.w $770
0001EBB0 0000 0000                  	dc.l Map_SS_R
0001EBB4 04F0                       	dc.w $4F0
0001EBB6 0400 BDB4                  	dc.l Map_Ring+$4000000
0001EBBA 2798                       	dc.w $2798
0001EBBC 0500 BDB4                  	dc.l Map_Ring+$5000000
0001EBC0 2798                       	dc.w $2798
0001EBC2 0600 BDB4                  	dc.l Map_Ring+$6000000
0001EBC6 2798                       	dc.w $2798
0001EBC8 0700 BDB4                  	dc.l Map_Ring+$7000000
0001EBCC 2798                       	dc.w $2798
0001EBCE 0000 0000                  	dc.l Map_SS_Glass
0001EBD2 23F0                       	dc.w $23F0
0001EBD4 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EBD8 23F0                       	dc.w $23F0
0001EBDA 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EBDE 23F0                       	dc.w $23F0
0001EBE0 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EBE4 23F0                       	dc.w $23F0
0001EBE6 0000 0000                  	dc.l Map_SS_R+$2000000
0001EBEA 04F0                       	dc.w $4F0
0001EBEC 0000 0000                  	dc.l Map_SS_Glass
0001EBF0 05F0                       	dc.w $5F0
0001EBF2 0000 0000                  	dc.l Map_SS_Glass
0001EBF6 65F0                       	dc.w $65F0
0001EBF8 0000 0000                  	dc.l Map_SS_Glass
0001EBFC 25F0                       	dc.w $25F0
0001EBFE 0000 0000                  	dc.l Map_SS_Glass
0001EC02 45F0                       	dc.w $45F0
0001EC02 45F0                       	dc.w $45F0
0001EC04                            
0001EC04                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EC04                            ; ---------------------------------------------------------------------------
0001EC04                            ; Sprite mappings - special stage "R" block
0001EC04                            ; ---------------------------------------------------------------------------
0001EC04                            Map_SS_R_internal:
0001EC04 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EC06 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EC08 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EC0A 01                         byte_1B912:	dc.b 1
0001EC0B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC10 01                         byte_1B918:	dc.b 1
0001EC11 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EC16 00                         byte_1B91E:	dc.b 0
0001EC18 00                         		even
0001EC18 00                         		even
0001EC18                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EC18                            ; ---------------------------------------------------------------------------
0001EC18                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EC18                            ; ---------------------------------------------------------------------------
0001EC18                            Map_SS_Glass_internal:
0001EC18 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EC1A 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EC1C 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EC1E 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EC20 01                         byte_1B928:	dc.b 1
0001EC21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC26 01                         byte_1B92E:	dc.b 1
0001EC27 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EC2C 01                         byte_1B934:	dc.b 1
0001EC2D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EC32 01                         byte_1B93A:	dc.b 1
0001EC33 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EC38                            		even
0001EC38                            		even
0001EC38                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EC38                            ; ---------------------------------------------------------------------------
0001EC38                            ; Sprite mappings - special stage "UP" block
0001EC38                            ; ---------------------------------------------------------------------------
0001EC38                            Map_SS_Up_internal:
0001EC38 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EC3A 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EC3C 01                         byte_1B944:	dc.b 1
0001EC3D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC42 01                         byte_1B94A:	dc.b 1
0001EC43 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EC48                            		even
0001EC48                            		even
0001EC48                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EC48                            ; ---------------------------------------------------------------------------
0001EC48                            ; Sprite mappings - special stage "DOWN" block
0001EC48                            ; ---------------------------------------------------------------------------
0001EC48                            Map_SS_Down_internal:
0001EC48 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EC4A 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EC4C 01                         byte_1B954:	dc.b 1
0001EC4D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EC52 01                         byte_1B95A:	dc.b 1
0001EC53 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EC58                            		even
0001EC58                            		even
0001EC58                            		include	"_maps\SS Chaos Emeralds.asm"
0001EC58                            ; ---------------------------------------------------------------------------
0001EC58                            ; Sprite mappings - special stage chaos	emeralds
0001EC58                            ; ---------------------------------------------------------------------------
0001EC58 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EC5A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EC5C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EC5E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EC60 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EC62 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EC64 01                         byte_1B96C:	dc.b 1
0001EC65 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EC6A 01                         byte_1B972:	dc.b 1
0001EC6B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EC70 01                         byte_1B978:	dc.b 1
0001EC71 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EC76 01                         byte_1B97E:	dc.b 1
0001EC77 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EC7C                            		even
0001EC7C                            		even
0001EC7C                            
0001EC7C                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EC7C                            ; ---------------------------------------------------------------------------
0001EC7C                            ; Object 09 - Sonic (special stage)
0001EC7C                            ; ---------------------------------------------------------------------------
0001EC7C                            
0001EC7C                            SonicSpecial:
0001EC7C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EC80 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EC82 6100 0000                  		bsr.w	SS_FixCamera
0001EC86 6000 0000                  		bra.w	DebugMode
0001EC8A                            ; ===========================================================================
0001EC8A                            
0001EC8A                            Obj09_Normal:
0001EC8A 7000                       		moveq	#0,d0
0001EC8C 1028 0024                  		move.b	obRoutine(a0),d0
0001EC90 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EC94 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EC98                            ; ===========================================================================
0001EC98 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EC9A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EC9C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EC9E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001ECA0                            ; ===========================================================================
0001ECA0                            
0001ECA0                            Obj09_Main:	; Routine 0
0001ECA0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ECA4 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001ECAA 117C 0007 0017             		move.b	#7,obWidth(a0)
0001ECB0 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001ECB8 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001ECBE 117C 0004 0001             		move.b	#4,obRender(a0)
0001ECC4 317C 0000 0018             		move.w	#0,obPriority(a0)
0001ECCA 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001ECD0 08E8 0002 0022             		bset	#2,obStatus(a0)
0001ECD6 08E8 0001 0022             		bset	#1,obStatus(a0)
0001ECDC                            
0001ECDC                            Obj09_ChkDebug:	; Routine 2
0001ECDC 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001ECE0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ECE2 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001ECE8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ECEA 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001ECF0                            
0001ECF0                            Obj09_NoDebug:
0001ECF0 117C 0000 0030             		move.b	#0,$30(a0)
0001ECF6 7000                       		moveq	#0,d0
0001ECF8 1028 0022                  		move.b	obStatus(a0),d0
0001ECFC 0240 0002                  		andi.w	#2,d0
0001ED00 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001ED04 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001ED08 4EB9 0001 6762             		jsr	(Sonic_LoadGfx).l
0001ED0E 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001ED14                            ; ===========================================================================
0001ED14 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001ED16 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001ED18                            ; ===========================================================================
0001ED18                            
0001ED18                            Obj09_OnWall:
0001ED18 6100 0000                  		bsr.w	Obj09_Jump
0001ED1C 6100 0000                  		bsr.w	Obj09_Move
0001ED20 6100 0000                  		bsr.w	Obj09_Fall
0001ED24 6000                       		bra.s	Obj09_Display
0001ED26                            ; ===========================================================================
0001ED26                            
0001ED26                            Obj09_InAir:
0001ED26 6100 0000                  		bsr.w	nullsub_2
0001ED2A 6100 0000                  		bsr.w	Obj09_Move
0001ED2E 6100 0000                  		bsr.w	Obj09_Fall
0001ED32                            
0001ED32                            Obj09_Display:
0001ED32 6100 0000                  		bsr.w	Obj09_ChkItems
0001ED36 6100 0000                  		bsr.w	Obj09_ChkItems2
0001ED3A 4EB9 0000 F72E             		jsr	(SpeedToPos).l
0001ED40 6100 0000                  		bsr.w	SS_FixCamera
0001ED44 3038 F780                  		move.w	(v_ssangle).w,d0
0001ED48 D078 F782                  		add.w	(v_ssrotate).w,d0
0001ED4C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001ED50 4EB9 0001 63CA             		jsr	(Sonic_Animate).l
0001ED56 4E75                       		rts	
0001ED58                            
0001ED58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED58                            
0001ED58                            
0001ED58                            Obj09_Move:
0001ED58 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001ED5E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001ED60 6100 0000                  		bsr.w	Obj09_MoveLeft
0001ED64                            
0001ED64                            Obj09_ChkRight:
0001ED64 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001ED6A 6700                       		beq.s	loc_1BA78	; if not, branch
0001ED6C 6100 0000                  		bsr.w	Obj09_MoveRight
0001ED70                            
0001ED70                            loc_1BA78:
0001ED70 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001ED74 0200 000C                  		andi.b	#btnL+btnR,d0
0001ED78 6600                       		bne.s	loc_1BAA8
0001ED7A 3028 0020                  		move.w	obInertia(a0),d0
0001ED7E 6700                       		beq.s	loc_1BAA8
0001ED80 6B00                       		bmi.s	loc_1BA9A
0001ED82 0440 000C                  		subi.w	#$C,d0
0001ED86 6400                       		bcc.s	loc_1BA94
0001ED88 303C 0000                  		move.w	#0,d0
0001ED8C                            
0001ED8C                            loc_1BA94:
0001ED8C 3140 0020                  		move.w	d0,obInertia(a0)
0001ED90 6000                       		bra.s	loc_1BAA8
0001ED92                            ; ===========================================================================
0001ED92                            
0001ED92                            loc_1BA9A:
0001ED92 0640 000C                  		addi.w	#$C,d0
0001ED96 6400                       		bcc.s	loc_1BAA4
0001ED98 303C 0000                  		move.w	#0,d0
0001ED9C                            
0001ED9C                            loc_1BAA4:
0001ED9C 3140 0020                  		move.w	d0,obInertia(a0)
0001EDA0                            
0001EDA0                            loc_1BAA8:
0001EDA0 1038 F780                  		move.b	(v_ssangle).w,d0
0001EDA4 0600 0020                  		addi.b	#$20,d0
0001EDA8 0200 00C0                  		andi.b	#$C0,d0
0001EDAC 4400                       		neg.b	d0
0001EDAE 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EDB4 C3E8 0020                  		muls.w	obInertia(a0),d1
0001EDB8 D3A8 0008                  		add.l	d1,obX(a0)
0001EDBC C1E8 0020                  		muls.w	obInertia(a0),d0
0001EDC0 D1A8 000C                  		add.l	d0,obY(a0)
0001EDC4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EDC8 2428 000C                  		move.l	obY(a0),d2
0001EDCC 2628 0008                  		move.l	obX(a0),d3
0001EDD0 6100 0000                  		bsr.w	sub_1BCE8
0001EDD4 6700                       		beq.s	loc_1BAF2
0001EDD6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EDDA 93A8 0008                  		sub.l	d1,obX(a0)
0001EDDE 91A8 000C                  		sub.l	d0,obY(a0)
0001EDE2 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EDE8 4E75                       		rts	
0001EDEA                            ; ===========================================================================
0001EDEA                            
0001EDEA                            loc_1BAF2:
0001EDEA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EDEE 4E75                       		rts	
0001EDF0                            ; End of function Obj09_Move
0001EDF0                            
0001EDF0                            
0001EDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDF0                            
0001EDF0                            
0001EDF0                            Obj09_MoveLeft:
0001EDF0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EDF6 3028 0020                  		move.w	obInertia(a0),d0
0001EDFA 6700                       		beq.s	loc_1BB06
0001EDFC 6A00                       		bpl.s	loc_1BB1A
0001EDFE                            
0001EDFE                            loc_1BB06:
0001EDFE 0440 000C                  		subi.w	#$C,d0
0001EE02 0C40 F800                  		cmpi.w	#-$800,d0
0001EE06 6E00                       		bgt.s	loc_1BB14
0001EE08 303C F800                  		move.w	#-$800,d0
0001EE0C                            
0001EE0C                            loc_1BB14:
0001EE0C 3140 0020                  		move.w	d0,obInertia(a0)
0001EE10 4E75                       		rts	
0001EE12                            ; ===========================================================================
0001EE12                            
0001EE12                            loc_1BB1A:
0001EE12 0440 0040                  		subi.w	#$40,d0
0001EE16 6400                       		bcc.s	loc_1BB22
0001EE18 4E71                       		nop	
0001EE1A                            
0001EE1A                            loc_1BB22:
0001EE1A 3140 0020                  		move.w	d0,obInertia(a0)
0001EE1E 4E75                       		rts	
0001EE20                            ; End of function Obj09_MoveLeft
0001EE20                            
0001EE20                            
0001EE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE20                            
0001EE20                            
0001EE20                            Obj09_MoveRight:
0001EE20 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001EE26 3028 0020                  		move.w	obInertia(a0),d0
0001EE2A 6B00                       		bmi.s	loc_1BB48
0001EE2C 0640 000C                  		addi.w	#$C,d0
0001EE30 0C40 0800                  		cmpi.w	#$800,d0
0001EE34 6D00                       		blt.s	loc_1BB42
0001EE36 303C 0800                  		move.w	#$800,d0
0001EE3A                            
0001EE3A                            loc_1BB42:
0001EE3A 3140 0020                  		move.w	d0,obInertia(a0)
0001EE3E 6000                       		bra.s	locret_1BB54
0001EE40                            ; ===========================================================================
0001EE40                            
0001EE40                            loc_1BB48:
0001EE40 0640 0040                  		addi.w	#$40,d0
0001EE44 6400                       		bcc.s	loc_1BB50
0001EE46 4E71                       		nop	
0001EE48                            
0001EE48                            loc_1BB50:
0001EE48 3140 0020                  		move.w	d0,obInertia(a0)
0001EE4C                            
0001EE4C                            locret_1BB54:
0001EE4C 4E75                       		rts	
0001EE4E                            ; End of function Obj09_MoveRight
0001EE4E                            
0001EE4E                            
0001EE4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE4E                            
0001EE4E                            
0001EE4E                            Obj09_Jump:
0001EE4E 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EE52 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EE56 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EE58 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE5C 0200 00FC                  		andi.b	#$FC,d0
0001EE60 4400                       		neg.b	d0
0001EE62 0400 0040                  		subi.b	#$40,d0
0001EE66 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EE6C C3FC 0680                  		muls.w	#$680,d1
0001EE70 E081                       		asr.l	#8,d1
0001EE72 3141 0010                  		move.w	d1,obVelX(a0)
0001EE76 C1FC 0680                  		muls.w	#$680,d0
0001EE7A E080                       		asr.l	#8,d0
0001EE7C 3140 0012                  		move.w	d0,obVelY(a0)
0001EE80 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EE90                            
0001EE90                            Obj09_NoJump:
0001EE90 4E75                       		rts	
0001EE92                            ; End of function Obj09_Jump
0001EE92                            
0001EE92                            
0001EE92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE92                            
0001EE92                            
0001EE92                            nullsub_2:
0001EE92 4E75                       		rts	
0001EE94                            ; End of function nullsub_2
0001EE94                            
0001EE94                            ; ===========================================================================
0001EE94                            ; ---------------------------------------------------------------------------
0001EE94                            ; unused subroutine to limit Sonic's upward vertical speed
0001EE94                            ; ---------------------------------------------------------------------------
0001EE94 323C FC00                  		move.w	#-$400,d1
0001EE98 B268 0012                  		cmp.w	obVelY(a0),d1
0001EE9C 6F00                       		ble.s	locret_1BBB4
0001EE9E 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EEA2 0200 0070                  		andi.b	#btnABC,d0
0001EEA6 6600                       		bne.s	locret_1BBB4
0001EEA8 3141 0012                  		move.w	d1,obVelY(a0)
0001EEAC                            
0001EEAC                            locret_1BBB4:
0001EEAC 4E75                       		rts	
0001EEAE                            ; ---------------------------------------------------------------------------
0001EEAE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EEAE                            ; ---------------------------------------------------------------------------
0001EEAE                            
0001EEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEAE                            
0001EEAE                            
0001EEAE                            SS_FixCamera:
0001EEAE 3428 000C                  		move.w	obY(a0),d2
0001EEB2 3628 0008                  		move.w	obX(a0),d3
0001EEB6 3038 F700                  		move.w	(v_screenposx).w,d0
0001EEBA 0443 00A0                  		subi.w	#$A0,d3
0001EEBE 6500                       		bcs.s	loc_1BBCE
0001EEC0 9043                       		sub.w	d3,d0
0001EEC2 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EEC6                            
0001EEC6                            loc_1BBCE:
0001EEC6 3038 F704                  		move.w	(v_screenposy).w,d0
0001EECA 0442 0070                  		subi.w	#$70,d2
0001EECE 6500                       		bcs.s	locret_1BBDE
0001EED0 9042                       		sub.w	d2,d0
0001EED2 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EED6                            
0001EED6                            locret_1BBDE:
0001EED6 4E75                       		rts	
0001EED8                            ; End of function SS_FixCamera
0001EED8                            
0001EED8                            ; ===========================================================================
0001EED8                            
0001EED8                            Obj09_ExitStage:
0001EED8 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EEDE 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EEE4 6600                       		bne.s	loc_1BBF4
0001EEE6 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EEEC                            
0001EEEC                            loc_1BBF4:
0001EEEC 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EEF2 6D00                       		blt.s	loc_1BC12
0001EEF4 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EEFA 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EF00 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EF04 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EF0A                            
0001EF0A                            loc_1BC12:
0001EF0A 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF0E D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF12 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF16 4EB9 0001 63CA             		jsr	(Sonic_Animate).l
0001EF1C 4EB9 0001 6762             		jsr	(Sonic_LoadGfx).l
0001EF22 6100 FF8A                  		bsr.w	SS_FixCamera
0001EF26 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001EF2C                            ; ===========================================================================
0001EF2C                            
0001EF2C                            Obj09_Exit2:
0001EF2C 5368 0038                  		subq.w	#1,$38(a0)
0001EF30 6600                       		bne.s	loc_1BC40
0001EF32 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EF38                            
0001EF38                            loc_1BC40:
0001EF38 4EB9 0001 63CA             		jsr	(Sonic_Animate).l
0001EF3E 4EB9 0001 6762             		jsr	(Sonic_LoadGfx).l
0001EF44 6100 FF68                  		bsr.w	SS_FixCamera
0001EF48 4EF9 0000 F742             		jmp	(DisplaySprite).l
0001EF4E                            
0001EF4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF4E                            
0001EF4E                            
0001EF4E                            Obj09_Fall:
0001EF4E 2428 000C                  		move.l	obY(a0),d2
0001EF52 2628 0008                  		move.l	obX(a0),d3
0001EF56 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF5A 0200 00FC                  		andi.b	#$FC,d0
0001EF5E 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EF64 3828 0010                  		move.w	obVelX(a0),d4
0001EF68 48C4                       		ext.l	d4
0001EF6A E184                       		asl.l	#8,d4
0001EF6C C1FC 002A                  		muls.w	#$2A,d0
0001EF70 D084                       		add.l	d4,d0
0001EF72 3828 0012                  		move.w	obVelY(a0),d4
0001EF76 48C4                       		ext.l	d4
0001EF78 E184                       		asl.l	#8,d4
0001EF7A C3FC 002A                  		muls.w	#$2A,d1
0001EF7E D284                       		add.l	d4,d1
0001EF80 D680                       		add.l	d0,d3
0001EF82 6100 0000                  		bsr.w	sub_1BCE8
0001EF86 6700                       		beq.s	loc_1BCB0
0001EF88 9680                       		sub.l	d0,d3
0001EF8A 7000                       		moveq	#0,d0
0001EF8C 3140 0010                  		move.w	d0,obVelX(a0)
0001EF90 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EF96 D481                       		add.l	d1,d2
0001EF98 6100 0000                  		bsr.w	sub_1BCE8
0001EF9C 6700                       		beq.s	loc_1BCC6
0001EF9E 9481                       		sub.l	d1,d2
0001EFA0 7200                       		moveq	#0,d1
0001EFA2 3141 0012                  		move.w	d1,obVelY(a0)
0001EFA6 4E75                       		rts	
0001EFA8                            ; ===========================================================================
0001EFA8                            
0001EFA8                            loc_1BCB0:
0001EFA8 D481                       		add.l	d1,d2
0001EFAA 6100 0000                  		bsr.w	sub_1BCE8
0001EFAE 6700                       		beq.s	loc_1BCD4
0001EFB0 9481                       		sub.l	d1,d2
0001EFB2 7200                       		moveq	#0,d1
0001EFB4 3141 0012                  		move.w	d1,obVelY(a0)
0001EFB8 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EFBE                            
0001EFBE                            loc_1BCC6:
0001EFBE E080                       		asr.l	#8,d0
0001EFC0 E081                       		asr.l	#8,d1
0001EFC2 3140 0010                  		move.w	d0,obVelX(a0)
0001EFC6 3141 0012                  		move.w	d1,obVelY(a0)
0001EFCA 4E75                       		rts	
0001EFCC                            ; ===========================================================================
0001EFCC                            
0001EFCC                            loc_1BCD4:
0001EFCC E080                       		asr.l	#8,d0
0001EFCE E081                       		asr.l	#8,d1
0001EFD0 3140 0010                  		move.w	d0,obVelX(a0)
0001EFD4 3141 0012                  		move.w	d1,obVelY(a0)
0001EFD8 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFDE 4E75                       		rts	
0001EFE0                            ; End of function Obj09_Fall
0001EFE0                            
0001EFE0                            
0001EFE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFE0                            
0001EFE0                            
0001EFE0                            sub_1BCE8:
0001EFE0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EFE6 7800                       		moveq	#0,d4
0001EFE8 4842                       		swap	d2
0001EFEA 3802                       		move.w	d2,d4
0001EFEC 4842                       		swap	d2
0001EFEE 0644 0044                  		addi.w	#$44,d4
0001EFF2 88FC 0018                  		divu.w	#$18,d4
0001EFF6 C8FC 0080                  		mulu.w	#$80,d4
0001EFFA D3C4                       		adda.l	d4,a1
0001EFFC 7800                       		moveq	#0,d4
0001EFFE 4843                       		swap	d3
0001F000 3803                       		move.w	d3,d4
0001F002 4843                       		swap	d3
0001F004 0644 0014                  		addi.w	#$14,d4
0001F008 88FC 0018                  		divu.w	#$18,d4
0001F00C D2C4                       		adda.w	d4,a1
0001F00E 7A00                       		moveq	#0,d5
0001F010 1819                       		move.b	(a1)+,d4
0001F012 6100                       		bsr.s	sub_1BD30
0001F014 1819                       		move.b	(a1)+,d4
0001F016 6100                       		bsr.s	sub_1BD30
0001F018 D2FC 007E                  		adda.w	#$7E,a1
0001F01C 1819                       		move.b	(a1)+,d4
0001F01E 6100                       		bsr.s	sub_1BD30
0001F020 1819                       		move.b	(a1)+,d4
0001F022 6100                       		bsr.s	sub_1BD30
0001F024 4A05                       		tst.b	d5
0001F026 4E75                       		rts	
0001F028                            ; End of function sub_1BCE8
0001F028                            
0001F028                            
0001F028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F028                            
0001F028                            
0001F028                            sub_1BD30:
0001F028 6700                       		beq.s	locret_1BD44
0001F02A 0C04 0028                  		cmpi.b	#$28,d4
0001F02E 6700                       		beq.s	locret_1BD44
0001F030 0C04 003A                  		cmpi.b	#$3A,d4
0001F034 6500                       		bcs.s	loc_1BD46
0001F036 0C04 004B                  		cmpi.b	#$4B,d4
0001F03A 6400                       		bcc.s	loc_1BD46
0001F03C                            
0001F03C                            locret_1BD44:
0001F03C 4E75                       		rts	
0001F03E                            ; ===========================================================================
0001F03E                            
0001F03E                            loc_1BD46:
0001F03E 1144 0030                  		move.b	d4,$30(a0)
0001F042 2149 0032                  		move.l	a1,$32(a0)
0001F046 7AFF                       		moveq	#-1,d5
0001F048 4E75                       		rts	
0001F04A                            ; End of function sub_1BD30
0001F04A                            
0001F04A                            
0001F04A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F04A                            
0001F04A                            
0001F04A                            Obj09_ChkItems:
0001F04A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F050 7800                       		moveq	#0,d4
0001F052 3828 000C                  		move.w	obY(a0),d4
0001F056 0644 0050                  		addi.w	#$50,d4
0001F05A 88FC 0018                  		divu.w	#$18,d4
0001F05E C8FC 0080                  		mulu.w	#$80,d4
0001F062 D3C4                       		adda.l	d4,a1
0001F064 7800                       		moveq	#0,d4
0001F066 3828 0008                  		move.w	obX(a0),d4
0001F06A 0644 0020                  		addi.w	#$20,d4
0001F06E 88FC 0018                  		divu.w	#$18,d4
0001F072 D2C4                       		adda.w	d4,a1
0001F074 1811                       		move.b	(a1),d4
0001F076 6600                       		bne.s	Obj09_ChkCont
0001F078 4A28 003A                  		tst.b	$3A(a0)
0001F07C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F080 7800                       		moveq	#0,d4
0001F082 4E75                       		rts	
0001F084                            ; ===========================================================================
0001F084                            
0001F084                            Obj09_ChkCont:
0001F084 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F088 6600                       		bne.s	Obj09_Chk1Up
0001F08A 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F08E 6600                       		bne.s	Obj09_GetCont
0001F090 14BC 0001                  		move.b	#1,(a2)
0001F094 2549 0004                  		move.l	a1,4(a2)
0001F098                            
0001F098                            Obj09_GetCont:
0001F098 4EB9 0000 B91C             		jsr	(CollectRing).l
0001F09E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F0A4 6500                       		bcs.s	Obj09_NoCont
0001F0A6 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F0AC 6600                       		bne.s	Obj09_NoCont
0001F0AE 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F0BC                            
0001F0BC                            Obj09_NoCont:
0001F0BC 7800                       		moveq	#0,d4
0001F0BE 4E75                       		rts	
0001F0C0                            ; ===========================================================================
0001F0C0                            
0001F0C0                            Obj09_Chk1Up:
0001F0C0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F0C4 6600                       		bne.s	Obj09_ChkEmer
0001F0C6 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F0CA 6600                       		bne.s	Obj09_Get1Up
0001F0CC 14BC 0003                  		move.b	#3,(a2)
0001F0D0 2549 0004                  		move.l	a1,4(a2)
0001F0D4                            
0001F0D4                            Obj09_Get1Up:
0001F0D4 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F0D8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F0E6 7800                       		moveq	#0,d4
0001F0E8 4E75                       		rts	
0001F0EA                            ; ===========================================================================
0001F0EA                            
0001F0EA                            Obj09_ChkEmer:
0001F0EA 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F0EE 6500                       		bcs.s	Obj09_ChkGhost
0001F0F0 0C04 0040                  		cmpi.b	#$40,d4
0001F0F4 6200                       		bhi.s	Obj09_ChkGhost
0001F0F6 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F0FA 6600                       		bne.s	Obj09_GetEmer
0001F0FC 14BC 0005                  		move.b	#5,(a2)
0001F100 2549 0004                  		move.l	a1,4(a2)
0001F104                            
0001F104                            Obj09_GetEmer:
0001F104 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F10A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F10C 0404 003B                  		subi.b	#$3B,d4
0001F110 7000                       		moveq	#0,d0
0001F112 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F116 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F11A 1584 0000                  		move.b	d4,(a2,d0.w)
0001F11E 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F122                            
0001F122                            Obj09_NoEmer:
0001F12C 7800                       		moveq	#0,d4
0001F12E 4E75                       		rts	
0001F130                            ; ===========================================================================
0001F130                            
0001F130                            Obj09_ChkGhost:
0001F130 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F134 6600                       		bne.s	Obj09_ChkGhostTag
0001F136 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F13C                            
0001F13C                            Obj09_ChkGhostTag:
0001F13C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F140 6600                       		bne.s	Obj09_NoGhost
0001F142 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F148 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F14A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F150                            
0001F150                            Obj09_NoGhost:
0001F150 78FF                       		moveq	#-1,d4
0001F152 4E75                       		rts	
0001F154                            ; ===========================================================================
0001F154                            
0001F154                            Obj09_MakeGhostSolid:
0001F154 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F15A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F15C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F162 723F                       		moveq	#$3F,d1
0001F164                            
0001F164                            Obj09_GhostLoop2:
0001F164 743F                       		moveq	#$3F,d2
0001F166                            
0001F166                            Obj09_GhostLoop:
0001F166 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F16A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F16C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F170                            
0001F170                            Obj09_NoReplace:
0001F170 5249                       		addq.w	#1,a1
0001F172 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F176 43E9 0040                  		lea	$40(a1),a1
0001F17A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F17E                            
0001F17E                            Obj09_GhostNotSolid:
0001F17E 4228 003A                  		clr.b	$3A(a0)
0001F182 7800                       		moveq	#0,d4
0001F184 4E75                       		rts	
0001F186                            ; End of function Obj09_ChkItems
0001F186                            
0001F186                            
0001F186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F186                            
0001F186                            
0001F186                            Obj09_ChkItems2:
0001F186 1028 0030                  		move.b	$30(a0),d0
0001F18A 6600                       		bne.s	Obj09_ChkBumper
0001F18C 5328 0036                  		subq.b	#1,$36(a0)
0001F190 6A00                       		bpl.s	loc_1BEA0
0001F192 117C 0000 0036             		move.b	#0,$36(a0)
0001F198                            
0001F198                            loc_1BEA0:
0001F198 5328 0037                  		subq.b	#1,$37(a0)
0001F19C 6A00                       		bpl.s	locret_1BEAC
0001F19E 117C 0000 0037             		move.b	#0,$37(a0)
0001F1A4                            
0001F1A4                            locret_1BEAC:
0001F1A4 4E75                       		rts	
0001F1A6                            ; ===========================================================================
0001F1A6                            
0001F1A6                            Obj09_ChkBumper:
0001F1A6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F1AA 6600                       		bne.s	Obj09_GOAL
0001F1AC 2228 0032                  		move.l	$32(a0),d1
0001F1B0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F1B6 3401                       		move.w	d1,d2
0001F1B8 0241 007F                  		andi.w	#$7F,d1
0001F1BC C2FC 0018                  		mulu.w	#$18,d1
0001F1C0 0441 0014                  		subi.w	#$14,d1
0001F1C4 EE4A                       		lsr.w	#7,d2
0001F1C6 0242 007F                  		andi.w	#$7F,d2
0001F1CA C4FC 0018                  		mulu.w	#$18,d2
0001F1CE 0442 0044                  		subi.w	#$44,d2
0001F1D2 9268 0008                  		sub.w	obX(a0),d1
0001F1D6 9468 000C                  		sub.w	obY(a0),d2
0001F1DA 4EB9 0000 3A40             		jsr	(CalcAngle).l
0001F1E0 4EB9 0000 37AE             		jsr	(CalcSine).l
0001F1E6 C3FC F900                  		muls.w	#-$700,d1
0001F1EA E081                       		asr.l	#8,d1
0001F1EC 3141 0010                  		move.w	d1,obVelX(a0)
0001F1F0 C1FC F900                  		muls.w	#-$700,d0
0001F1F4 E080                       		asr.l	#8,d0
0001F1F6 3140 0012                  		move.w	d0,obVelY(a0)
0001F1FA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F200 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F204 6600                       		bne.s	Obj09_BumpSnd
0001F206 14BC 0002                  		move.b	#2,(a2)
0001F20A 2028 0032                  		move.l	$32(a0),d0
0001F20E 5380                       		subq.l	#1,d0
0001F210 2540 0004                  		move.l	d0,4(a2)
0001F214                            
0001F214                            Obj09_BumpSnd:
0001F21E                            ; ===========================================================================
0001F21E                            
0001F21E                            Obj09_GOAL:
0001F21E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F222 6600                       		bne.s	Obj09_UPblock
0001F224 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F232 4E75                       		rts	
0001F234                            ; ===========================================================================
0001F234                            
0001F234                            Obj09_UPblock:
0001F234 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F238 6600                       		bne.s	Obj09_DOWNblock
0001F23A 4A28 0036                  		tst.b	$36(a0)
0001F23E 6600 0000                  		bne.w	Obj09_NoGlass
0001F242 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F248 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F24E 6700                       		beq.s	Obj09_UPsnd
0001F250 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F254 2268 0032                  		movea.l	$32(a0),a1
0001F258 5389                       		subq.l	#1,a1
0001F25A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F25E                            
0001F25E                            Obj09_UPsnd:
0001F268                            ; ===========================================================================
0001F268                            
0001F268                            Obj09_DOWNblock:
0001F268 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F26C 6600                       		bne.s	Obj09_Rblock
0001F26E 4A28 0036                  		tst.b	$36(a0)
0001F272 6600 0000                  		bne.w	Obj09_NoGlass
0001F276 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F27C 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F282 6600                       		bne.s	Obj09_DOWNsnd
0001F284 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F288 2268 0032                  		movea.l	$32(a0),a1
0001F28C 5389                       		subq.l	#1,a1
0001F28E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F292                            
0001F292                            Obj09_DOWNsnd:
0001F29C                            ; ===========================================================================
0001F29C                            
0001F29C                            Obj09_Rblock:
0001F29C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F2A0 6600                       		bne.s	Obj09_ChkGlass
0001F2A2 4A28 0037                  		tst.b	$37(a0)
0001F2A6 6600 0000                  		bne.w	Obj09_NoGlass
0001F2AA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F2B0 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F2B4 6600                       		bne.s	Obj09_RevStage
0001F2B6 14BC 0004                  		move.b	#4,(a2)
0001F2BA 2028 0032                  		move.l	$32(a0),d0
0001F2BE 5380                       		subq.l	#1,d0
0001F2C0 2540 0004                  		move.l	d0,4(a2)
0001F2C4                            
0001F2C4                            Obj09_RevStage:
0001F2C4 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F2D2                            ; ===========================================================================
0001F2D2                            
0001F2D2                            Obj09_ChkGlass:
0001F2D2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F2D6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F2D8 0C00 002E                  		cmpi.b	#$2E,d0
0001F2DC 6700                       		beq.s	Obj09_Glass
0001F2DE 0C00 002F                  		cmpi.b	#$2F,d0
0001F2E2 6700                       		beq.s	Obj09_Glass
0001F2E4 0C00 0030                  		cmpi.b	#$30,d0
0001F2E8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F2EA                            
0001F2EA                            Obj09_Glass:
0001F2EA 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F2EE 6600                       		bne.s	Obj09_GlassSnd
0001F2F0 14BC 0006                  		move.b	#6,(a2)
0001F2F4 2268 0032                  		movea.l	$32(a0),a1
0001F2F8 5389                       		subq.l	#1,a1
0001F2FA 2549 0004                  		move.l	a1,4(a2)
0001F2FE 1011                       		move.b	(a1),d0
0001F300 5200                       		addq.b	#1,d0		; change glass type when touched
0001F302 0C00 0030                  		cmpi.b	#$30,d0
0001F306 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F308 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F30A                            
0001F30A                            Obj09_GlassUpdate:
0001F30A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F30E                            
0001F30E                            Obj09_GlassSnd:
0001F318                            ; ===========================================================================
0001F318                            
0001F318                            Obj09_NoGlass:
0001F318 4E75                       		rts	
0001F31A                            ; End of function Obj09_ChkItems2
0001F31A                            ; End of function Obj09_ChkItems2
0001F31A                            
0001F31A                            		include	"_incObj\10.asm"
0001F31A                            ; ---------------------------------------------------------------------------
0001F31A                            ; Object 10 - After-Image
0001F31A                            ; ---------------------------------------------------------------------------
0001F31A                            
0001F31A                            Obj10:
0001F31A 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F320 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F324                            
0001F324 7000                             moveq   #0,d0
0001F326 1028 0024                        move.b   obRoutine(a0),d0
0001F32A 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F32E 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F332                            
0001F332                            ; ===========================================================================
0001F332                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F332                            ; ===========================================================================
0001F332                            Afterimage_Index:
0001F332 0000                             dc.w NoAfterImage-Afterimage_Index
0001F334 0000                             dc.w NoAfterImage-Afterimage_Index
0001F336 0000                             dc.w NoAfterImage-Afterimage_Index
0001F338 0000                             dc.w AfterimageStart-Afterimage_Index
0001F33A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F33C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F33E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F340 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F342 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F344                            ; ===========================================================================
0001F344                            NoAfterImage:
0001F344 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F348 4E75                             rts
0001F34A                            ; ===========================================================================
0001F34A                            AfterimageStart:
0001F34A 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F350 6000                             bra.s   Afterimage_Show
0001F352                            ; ===========================================================================
0001F352                            AfterimageLPrio:
0001F352 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F356                            ; ===========================================================================
0001F356                            Afterimage_Show:
0001F356 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F35A 4EB9 0000 3788                   jsr   (RandomNumber).l         ; get a random number
0001F360 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F364 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F366 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F368                            
0001F368                            AfterimageException:
0001F368 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F36E 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F374 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F37A 4EF9 0000 F742                   jmp   DisplaySprite
0001F380                            ; ===========================================================================
0001F380                            AfterimageEnd:
0001F380 4EF9 0000 F782                   jmp   DeleteObject
0001F380 4EF9 0000 F782                   jmp   DeleteObject
0001F386                            
0001F386                            		include	"_inc\AnimateLevelGfx.asm"
0001F386                            ; ---------------------------------------------------------------------------
0001F386                            ; Subroutine to	animate	level graphics
0001F386                            ; ---------------------------------------------------------------------------
0001F386                            
0001F386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F386                            
0001F386                            
0001F386                            AnimateLevelGfx:
0001F386                            		;tst.w	(f_pause).w	; is the game paused?
0001F386                            		;bne.s	@ispaused	; if yes, branch
0001F386 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F38C 6100 0000                  		bsr.w	AniArt_GiantRing
0001F390 7000                       		moveq	#0,d0
0001F392 1038 FE10                  		move.b	(v_zone).w,d0
0001F396 D040                       		add.w	d0,d0
0001F398 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F39C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F3A0                            
0001F3A0                            	@ispaused:
0001F3A0 4E75                       		rts	
0001F3A2                            
0001F3A2                            ; ===========================================================================
0001F3A2 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F3A6 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F3AA 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F3AE 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F3B0                            ; ===========================================================================
0001F3B0                            ; ---------------------------------------------------------------------------
0001F3B0                            ; Animated pattern routine - Green Hill
0001F3B0                            ; ---------------------------------------------------------------------------
0001F3B0                            
0001F3B0                            AniArt_GHZ:
0001F3B0                            
0001F3B0                            AniArt_GHZ_Waterfall:
0001F3B0                            
0001F3B0 =00000008                  @size:		equ 8	; number of tiles per frame
0001F3B0                            
0001F3B0 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F3B4 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F3B6                            
0001F3B6 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F3BC 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F3C2 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F3C6 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F3CA 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F3CE 6700                       		beq.s	@isframe0	; branch if frame 0
0001F3D0 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F3D4                            
0001F3D4                            	@isframe0:
0001F3DE 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F3E2 6000 0000                  		bra.w	LoadTiles
0001F3E6                            ; ===========================================================================
0001F3E6                            
0001F3E6                            AniArt_GHZ_Bigflower:
0001F3E6                            
0001F3E6 =00000010                  @size:		equ 16	; number of tiles per frame
0001F3E6                            
0001F3E6 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F3EA 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F3EC                            
0001F3EC 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F3F2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F3F8 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F3FC 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F400 0240 0001                  		andi.w	#1,d0
0001F404 6700                       		beq.s	@isframe0
0001F406 43E9 0200                  		lea	@size*$20(a1),a1
0001F40A                            
0001F40A                            	@isframe0:
0001F414 323C 000F                  		move.w	#@size-1,d1
0001F418 6000 0000                  		bra.w	LoadTiles
0001F41C                            ; ===========================================================================
0001F41C                            
0001F41C                            AniArt_GHZ_Smallflower:
0001F41C                            
0001F41C =0000000C                  @size:		equ 12	; number of tiles per frame
0001F41C                            
0001F41C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F420 6A00                       		bpl.s	@end
0001F422                            
0001F422 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F428 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F42C 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F430 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F434 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F438 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F43C 6600                       		bne.s	@isframe1	; if not, branch
0001F43E 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F444                            
0001F444                            	@isframe1:
0001F444 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F446 3200                       		move.w	d0,d1
0001F448 D040                       		add.w	d0,d0
0001F44A D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F456 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F45C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F460 323C 000B                  		move.w	#@size-1,d1
0001F464 6100 0000                  		bsr.w	LoadTiles
0001F468                            
0001F468                            @end:
0001F468 4E75                       		rts	
0001F46A                            
0001F46A 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F46E                            ; ===========================================================================
0001F46E                            ; ---------------------------------------------------------------------------
0001F46E                            ; Animated pattern routine - Marble
0001F46E                            ; ---------------------------------------------------------------------------
0001F46E                            
0001F46E                            AniArt_MZ:
0001F46E                            
0001F46E                            AniArt_MZ_Lava:
0001F46E                            
0001F46E =00000008                  @size:		equ 8	; number of tiles per frame
0001F46E                            
0001F46E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F472 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F474                            
0001F474 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F47A 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F480 7000                       		moveq	#0,d0
0001F482 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F486 5200                       		addq.b	#1,d0		; increment frame counter
0001F488 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F48C 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F48E 7000                       		moveq	#0,d0
0001F490                            
0001F490                            	@frame01or2:
0001F490 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F494 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F498 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F4A4 323C 0007                  		move.w	#@size-1,d1
0001F4A8 6100 0000                  		bsr.w	LoadTiles
0001F4AC                            
0001F4AC                            AniArt_MZ_Magma:
0001F4AC 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F4B0 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F4B2                            		
0001F4B2 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F4B8 7000                       		moveq	#0,d0
0001F4BA 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F4BE 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F4C4 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F4C6 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F4D2 7600                       		moveq	#0,d3
0001F4D4 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F4D8 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F4DC 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F4E0 343C 0003                  		move.w	#3,d2
0001F4E4                            
0001F4E4                            	@loop:
0001F4E4 3003                       		move.w	d3,d0
0001F4E6 D040                       		add.w	d0,d0
0001F4E8 0240 001E                  		andi.w	#$1E,d0
0001F4EC 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F4F2 3033 0000                  		move.w	(a3,d0.w),d0
0001F4F6 47F3 0000                  		lea	(a3,d0.w),a3
0001F4FA 224C                       		movea.l	a4,a1
0001F4FC 323C 001F                  		move.w	#$1F,d1
0001F500 4E93                       		jsr	(a3)
0001F502 5843                       		addq.w	#4,d3
0001F504 51CA FFDE                  		dbf	d2,@loop
0001F508 4E75                       		rts	
0001F50A                            ; ===========================================================================
0001F50A                            
0001F50A                            AniArt_MZ_Torch:
0001F50A                            
0001F50A =00000006                  @size:		equ 6	; number of tiles per frame
0001F50A                            
0001F50A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F50E 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F512                            		
0001F512 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F518 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F51E 7000                       		moveq	#0,d0
0001F520 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F524 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F528 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F52E C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F532 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F53E 323C 0005                  		move.w	#@size-1,d1
0001F542 6000 0000                  		bra.w	LoadTiles
0001F546                            
0001F546                            @end:
0001F546 4E75                       		rts	
0001F548                            ; ===========================================================================
0001F548                            ; ---------------------------------------------------------------------------
0001F548                            ; Animated pattern routine - Scrap Brain
0001F548                            ; ---------------------------------------------------------------------------
0001F548                            
0001F548                            AniArt_SBZ:
0001F548                            
0001F548 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F548                            
0001F548 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F54C 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F54E                            		
0001F54E 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F552 6000                       		bra.s	@chk_smokepuff2
0001F554                            ; ===========================================================================
0001F554                            
0001F554                            @smokepuff:
0001F554 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F558 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F55A                            		
0001F55A 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F560 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F570 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F574 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F578 0240 0007                  		andi.w	#7,d0
0001F57C 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F57E 5340                       		subq.w	#1,d0
0001F580 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F584 43F1 0000                  		lea	(a1,d0.w),a1
0001F588 323C 000B                  		move.w	#@size-1,d1
0001F58C 6000 0000                  		bra.w	LoadTiles
0001F590                            ; ===========================================================================
0001F590                            
0001F590                            @untilnextpuff:
0001F590 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F596                            
0001F596                            @clearsky:
0001F596 323C 0005                  		move.w	#(@size/2)-1,d1
0001F59A 6100 0000                  		bsr.w	LoadTiles
0001F59E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F5A4 323C 0005                  		move.w	#(@size/2)-1,d1
0001F5A8 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F5AC                            ; ===========================================================================
0001F5AC                            
0001F5AC                            @chk_smokepuff2:
0001F5AC 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F5B0 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F5B2                            		
0001F5B2 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F5B6 6000                       		bra.s	@end
0001F5B8                            ; ===========================================================================
0001F5B8                            
0001F5B8                            @smokepuff2:
0001F5B8 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F5BC 6A00                       		bpl.s	@end		; branch if not 0
0001F5BE                            		
0001F5BE 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F5C4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F5D4 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F5D8 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F5DC 0240 0007                  		andi.w	#7,d0
0001F5E0 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F5E2 5340                       		subq.w	#1,d0
0001F5E4 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F5E8 43F1 0000                  		lea	(a1,d0.w),a1
0001F5EC 323C 000B                  		move.w	#@size-1,d1
0001F5F0 6000 0000                  		bra.w	LoadTiles
0001F5F4                            ; ===========================================================================
0001F5F4                            
0001F5F4                            @untilnextpuff2:
0001F5F4 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F5FA 609A                       		bra.s	@clearsky
0001F5FC                            ; ===========================================================================
0001F5FC                            
0001F5FC                            @end:
0001F5FC 4E75                       		rts	
0001F5FE                            ; ===========================================================================
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            ; Animated pattern routine - ending sequence
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            
0001F5FE                            AniArt_Ending:
0001F5FE                            
0001F5FE                            AniArt_Ending_BigFlower:
0001F5FE                            
0001F5FE =00000010                  @size:		equ 16	; number of tiles per frame
0001F5FE                            
0001F5FE 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F602 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F604                            		
0001F604 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F60A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F610 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F614 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F618 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F61C 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F620 6700                       		beq.s	@isframe0	; branch if frame 0
0001F622 43E9 0200                  		lea	@size*$20(a1),a1
0001F626 45EA 0200                  		lea	@size*$20(a2),a2
0001F62A                            
0001F62A                            	@isframe0:
0001F634 323C 000F                  		move.w	#@size-1,d1
0001F638 6100 0000                  		bsr.w	LoadTiles
0001F63C 224A                       		movea.l	a2,a1
0001F648 323C 000F                  		move.w	#@size-1,d1
0001F64C 6000 0000                  		bra.w	LoadTiles
0001F650                            ; ===========================================================================
0001F650                            
0001F650                            AniArt_Ending_SmallFlower:
0001F650                            
0001F650 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F650                            
0001F650 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F654 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F656                            		
0001F656 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F65C 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F660 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F664 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F668 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F66C EF48                       		lsl.w	#7,d0		; multiply by $80
0001F66E 3200                       		move.w	d0,d1
0001F670 D040                       		add.w	d0,d0
0001F672 D041                       		add.w	d1,d0		; multiply by 3
0001F67E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F684 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F688 323C 000B                  		move.w	#@size-1,d1
0001F68C 6000 0000                  		bra.w	LoadTiles
0001F690                            ; ===========================================================================
0001F690 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F698                            ; ===========================================================================
0001F698                            
0001F698                            AniArt_Ending_Flower3:
0001F698                            
0001F698 =00000010                  @size:		equ 16	; number of tiles per frame
0001F698                            
0001F698 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F69C 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F69E                            		
0001F69E 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F6A4 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F6A8 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F6AC 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F6B0 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F6B4 E148                       		lsl.w	#8,d0		; multiply by $100
0001F6B6 D040                       		add.w	d0,d0		; multiply by 2
0001F6C2 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F6C6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F6CA 323C 000F                  		move.w	#@size-1,d1
0001F6CE 6000 0000                  		bra.w	LoadTiles
0001F6D2                            ; ===========================================================================
0001F6D2 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F6D6                            ; ===========================================================================
0001F6D6                            
0001F6D6                            AniArt_Ending_Flower4:
0001F6D6                            
0001F6D6 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6D6                            
0001F6D6 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F6DA 6A00                       		bpl.s	@end		; branch if not 0
0001F6DC                            		
0001F6DC 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F6E2 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F6E6 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F6EA 0240 0003                  		andi.w	#3,d0
0001F6EE 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F6F2 E148                       		lsl.w	#8,d0		; multiply by $100
0001F6F4 D040                       		add.w	d0,d0		; multiply by 2
0001F700 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F704 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F708 323C 000F                  		move.w	#@size-1,d1
0001F70C 6000 0000                  		bra.w	LoadTiles
0001F710                            ; ===========================================================================
0001F710                            
0001F710                            @end:
0001F710 4E75                       		rts	
0001F712                            ; ===========================================================================
0001F712                            
0001F712                            AniArt_none:
0001F712 4E75                       		rts	
0001F714                            
0001F714                            ; ---------------------------------------------------------------------------
0001F714                            ; Subroutine to	transfer graphics to VRAM
0001F714                            
0001F714                            ; input:
0001F714                            ;	a1 = source address
0001F714                            ;	a6 = vdp_data_port ($C00000)
0001F714                            ;	d1 = number of tiles to load (minus one)
0001F714                            ; ---------------------------------------------------------------------------
0001F714                            
0001F714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F714                            
0001F714                            
0001F714                            LoadTiles:
0001F714 2C99                       		move.l	(a1)+,(a6)
0001F716 2C99                       		move.l	(a1)+,(a6)
0001F718 2C99                       		move.l	(a1)+,(a6)
0001F71A 2C99                       		move.l	(a1)+,(a6)
0001F71C 2C99                       		move.l	(a1)+,(a6)
0001F71E 2C99                       		move.l	(a1)+,(a6)
0001F720 2C99                       		move.l	(a1)+,(a6)
0001F722 2C99                       		move.l	(a1)+,(a6)
0001F724 51C9 FFEE                  		dbf	d1,LoadTiles
0001F728 4E75                       		rts	
0001F72A                            ; End of function LoadTiles
0001F72A                            
0001F72A                            ; ===========================================================================
0001F72A                            ; ---------------------------------------------------------------------------
0001F72A                            ; Animated pattern routine - more Marble Zone
0001F72A                            ; ---------------------------------------------------------------------------
0001F72A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F72E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F732 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F736 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F73A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F73E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F742 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F746 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F74A                            ; ===========================================================================
0001F74A                            
0001F74A                            loc_1C3EE:
0001F74A 2C91                       		move.l	(a1),(a6)
0001F74C 43E9 0010                  		lea	$10(a1),a1
0001F750 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F754 4E75                       		rts	
0001F756                            ; ===========================================================================
0001F756                            
0001F756                            loc_1C3FA:
0001F756 2029 0002                  		move.l	2(a1),d0
0001F75A 1029 0001                  		move.b	1(a1),d0
0001F75E E098                       		ror.l	#8,d0
0001F760 2C80                       		move.l	d0,(a6)
0001F762 43E9 0010                  		lea	$10(a1),a1
0001F766 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F76A 4E75                       		rts	
0001F76C                            ; ===========================================================================
0001F76C                            
0001F76C                            loc_1C410:
0001F76C 2CA9 0002                  		move.l	2(a1),(a6)
0001F770 43E9 0010                  		lea	$10(a1),a1
0001F774 51C9 FFF6                  		dbf	d1,loc_1C410
0001F778 4E75                       		rts	
0001F77A                            ; ===========================================================================
0001F77A                            
0001F77A                            loc_1C41E:
0001F77A 2029 0004                  		move.l	4(a1),d0
0001F77E 1029 0003                  		move.b	3(a1),d0
0001F782 E098                       		ror.l	#8,d0
0001F784 2C80                       		move.l	d0,(a6)
0001F786 43E9 0010                  		lea	$10(a1),a1
0001F78A 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F78E 4E75                       		rts	
0001F790                            ; ===========================================================================
0001F790                            
0001F790                            loc_1C434:
0001F790 2CA9 0004                  		move.l	4(a1),(a6)
0001F794 43E9 0010                  		lea	$10(a1),a1
0001F798 51C9 FFF6                  		dbf	d1,loc_1C434
0001F79C 4E75                       		rts	
0001F79E                            ; ===========================================================================
0001F79E                            
0001F79E                            loc_1C442:
0001F79E 2029 0006                  		move.l	6(a1),d0
0001F7A2 1029 0005                  		move.b	5(a1),d0
0001F7A6 E098                       		ror.l	#8,d0
0001F7A8 2C80                       		move.l	d0,(a6)
0001F7AA 43E9 0010                  		lea	$10(a1),a1
0001F7AE 51C9 FFEE                  		dbf	d1,loc_1C442
0001F7B2 4E75                       		rts	
0001F7B4                            ; ===========================================================================
0001F7B4                            
0001F7B4                            loc_1C458:
0001F7B4 2CA9 0006                  		move.l	6(a1),(a6)
0001F7B8 43E9 0010                  		lea	$10(a1),a1
0001F7BC 51C9 FFF6                  		dbf	d1,loc_1C458
0001F7C0 4E75                       		rts	
0001F7C2                            ; ===========================================================================
0001F7C2                            
0001F7C2                            loc_1C466:
0001F7C2 2029 0008                  		move.l	8(a1),d0
0001F7C6 1029 0007                  		move.b	7(a1),d0
0001F7CA E098                       		ror.l	#8,d0
0001F7CC 2C80                       		move.l	d0,(a6)
0001F7CE 43E9 0010                  		lea	$10(a1),a1
0001F7D2 51C9 FFEE                  		dbf	d1,loc_1C466
0001F7D6 4E75                       		rts	
0001F7D8                            ; ===========================================================================
0001F7D8                            
0001F7D8                            loc_1C47C:
0001F7D8 2CA9 0008                  		move.l	8(a1),(a6)
0001F7DC 43E9 0010                  		lea	$10(a1),a1
0001F7E0 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F7E4 4E75                       		rts	
0001F7E6                            ; ===========================================================================
0001F7E6                            
0001F7E6                            loc_1C48A:
0001F7E6 2029 000A                  		move.l	$A(a1),d0
0001F7EA 1029 0009                  		move.b	9(a1),d0
0001F7EE E098                       		ror.l	#8,d0
0001F7F0 2C80                       		move.l	d0,(a6)
0001F7F2 43E9 0010                  		lea	$10(a1),a1
0001F7F6 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F7FA 4E75                       		rts	
0001F7FC                            ; ===========================================================================
0001F7FC                            
0001F7FC                            loc_1C4A0:
0001F7FC 2CA9 000A                  		move.l	$A(a1),(a6)
0001F800 43E9 0010                  		lea	$10(a1),a1
0001F804 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F808 4E75                       		rts	
0001F80A                            ; ===========================================================================
0001F80A                            
0001F80A                            loc_1C4AE:
0001F80A 2029 000C                  		move.l	$C(a1),d0
0001F80E 1029 000B                  		move.b	$B(a1),d0
0001F812 E098                       		ror.l	#8,d0
0001F814 2C80                       		move.l	d0,(a6)
0001F816 43E9 0010                  		lea	$10(a1),a1
0001F81A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F81E 4E75                       		rts	
0001F820                            ; ===========================================================================
0001F820                            
0001F820                            loc_1C4C4:
0001F820 2CA9 000C                  		move.l	$C(a1),(a6)
0001F824 43E9 0010                  		lea	$10(a1),a1
0001F828 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F82C 4E75                       		rts	
0001F82E                            ; ===========================================================================
0001F82E                            
0001F82E                            loc_1C4D2:
0001F82E 2029 000C                  		move.l	$C(a1),d0
0001F832 E198                       		rol.l	#8,d0
0001F834 1011                       		move.b	0(a1),d0
0001F836 2C80                       		move.l	d0,(a6)
0001F838 43E9 0010                  		lea	$10(a1),a1
0001F83C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F840 4E75                       		rts	
0001F842                            ; ===========================================================================
0001F842                            
0001F842                            loc_1C4E8:
0001F842 3CA9 000E                  		move.w	$E(a1),(a6)
0001F846 3C91                       		move.w	0(a1),(a6)
0001F848 43E9 0010                  		lea	$10(a1),a1
0001F84C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F850 4E75                       		rts	
0001F852                            ; ===========================================================================
0001F852                            
0001F852                            loc_1C4FA:
0001F852 2011                       		move.l	0(a1),d0
0001F854 1029 000F                  		move.b	$F(a1),d0
0001F858 E098                       		ror.l	#8,d0
0001F85A 2C80                       		move.l	d0,(a6)
0001F85C 43E9 0010                  		lea	$10(a1),a1
0001F860 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F864 4E75                       		rts	
0001F866                            
0001F866                            ; ---------------------------------------------------------------------------
0001F866                            ; Animated pattern routine - giant ring
0001F866                            ; ---------------------------------------------------------------------------
0001F866                            
0001F866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F866                            
0001F866                            
0001F866                            AniArt_GiantRing:
0001F866                            
0001F866 =0000000E                  @size:		equ 14
0001F866                            
0001F866 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F86A 6600                       		bne.s	@loadTiles		; If so, get to work
0001F86C 4E75                       		rts	
0001F86E                            ; ===========================================================================
0001F86E                            ; loc_1C518:
0001F86E                            @loadTiles:
0001F86E 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F874 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F87A 7000                       		moveq	#0,d0
0001F87C 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F880 43F1 0000                  		lea	(a1,d0.w),a1
0001F884                            		; Turn VRAM address into VDP command
0001F884 0640 8000                  		addi.w	#$8000,d0
0001F888 E588                       		lsl.l	#2,d0
0001F88A E448                       		lsr.w	#2,d0
0001F88C 0040 4000                  		ori.w	#$4000,d0
0001F890 4840                       		swap	d0
0001F892                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F892 2D40 0004                  		move.l	d0,4(a6)
0001F896                            
0001F896 323C 000D                  		move.w	#@size-1,d1
0001F89A 6000 FE78                  		bra.w	LoadTiles
0001F89E                            
0001F89E                            ; End of function AniArt_GiantRing
0001F89E                            ; End of function AniArt_GiantRing
0001F89E                            
0001F89E                            		include	"_incObj\21 HUD.asm"
0001F89E                            ; ---------------------------------------------------------------------------
0001F89E                            ; Object 21 - SCORE, TIME, RINGS
0001F89E                            ; ---------------------------------------------------------------------------
0001F89E                            
0001F89E                            HUD:
0001F89E 7000                       		moveq	#0,d0
0001F8A0 1028 0024                  		move.b	obRoutine(a0),d0
0001F8A4 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F8A8 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F8AC                            ; ===========================================================================
0001F8AC 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F8AE 0000                       		dc.w HUD_Flash-HUD_Index
0001F8B0                            ; ===========================================================================
0001F8B0                            
0001F8B0                            HUD_Main:	; Routine 0
0001F8B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F8B4 317C 0090 0008             		move.w	#$90,obX(a0)
0001F8BA 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F8C0 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F8C8 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F8CE 117C 0000 0001             		move.b	#0,obRender(a0)
0001F8D4 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F8DA                            
0001F8DA                            HUD_Flash:	; Routine 2
0001F8DA 7000                       		moveq	#0,d0
0001F8DC 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F8E2 6600                       		bne.s	@display
0001F8E4 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F8E8 6600                       		bne.s	@norings	; if so, branch
0001F8EA 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F8EC                            ; ===========================================================================
0001F8EC                            
0001F8EC                            @norings:
0001F8EC 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F8F2 6600                       		bne.s	@display	; if not, branch
0001F8F4 5440                       		addq.w	#2,d0		; make time counter flash red
0001F8F6                            
0001F8F6                            	@display:
0001F8F6 1140 001A                  		move.b	d0,obFrame(a0)
0001F8FA 4EF9 0000 F742             		jmp	DisplaySprite
0001F8FA 4EF9 0000 F742             		jmp	DisplaySprite
0001F900                            Map_HUD:	include	"_maps\HUD.asm"
0001F900                            ; ---------------------------------------------------------------------------
0001F900                            ; Sprite mappings - SCORE, TIME, RINGS
0001F900                            ; ---------------------------------------------------------------------------
0001F900                            Map_HUD_internal:
0001F900 0000                       		dc.w @allyellow-Map_HUD_internal
0001F902 0000                       		dc.w @ringred-Map_HUD_internal
0001F904 0000                       		dc.w @timered-Map_HUD_internal
0001F906 0000                       		dc.w @allred-Map_HUD_internal
0001F908 0A                         @allyellow:	dc.b $A
0001F909 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F90E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F913 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F918 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F91D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F922 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F927 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F92C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F931 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F936 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F93B 00                         		dc.b 0
0001F93C 0A                         @ringred:	dc.b $A
0001F93D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F942 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F947 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F94C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F951 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F956 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F95B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F960 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F965 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F96A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F96F 00                         		dc.b 0
0001F970 0A                         @timered:	dc.b $A
0001F971 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F976 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F97B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F980 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F985 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F98A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F98F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F994 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F999 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F99E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9A3 00                         		dc.b 0
0001F9A4 0A                         @allred:	dc.b $A
0001F9A5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F9AA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F9AF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F9B4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F9B9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F9BE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F9C3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F9C8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F9CD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F9D2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9D8 00                         		even
0001F9D8 00                         		even
0001F9D8                            
0001F9D8                            ; ---------------------------------------------------------------------------
0001F9D8                            ; Add points subroutine
0001F9D8                            ; ---------------------------------------------------------------------------
0001F9D8                            
0001F9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F9D8                            
0001F9D8                            
0001F9D8                            AddPoints:
0001F9D8 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001F9DE                            
0001F9DE                            
0001F9DE 47F8 FE26                  			lea     (v_score).w,a3
0001F9E2 D193                       			add.l   d0,(a3)
0001F9E4 223C 000F 423F             			move.l  #999999,d1
0001F9EA B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001F9EC 6200                       			bhi.s   @belowmax ; if yes, branch
0001F9EE 2681                       			move.l  d1,(a3) ; reset score to 999999
0001F9F0                            		@belowmax:
0001F9F0 2013                       			move.l  (a3),d0
0001F9F2 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001F9F6 6500                       			blo.s   @noextralife ; if not, branch
0001F9F8                            
0001F9F8 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FA00 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FA04 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FA06 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FA0A 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FA18                            
0001FA18                            @locret_1C6B6:
0001FA18                            @noextralife:
0001FA18 4E75                       		rts	
0001FA1A                            ; End of function AddPoints
0001FA1A                            
0001FA1A                            		include	"_inc\HUD_Update.asm"
0001FA1A                            ; ---------------------------------------------------------------------------
0001FA1A                            ; Subroutine to	update the HUD
0001FA1A                            ; ---------------------------------------------------------------------------
0001FA1A                            
0001FA1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA1A                            
0001FA1A                            hudVRAM:	macro loc
0001FA1A                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FA1A                            		endm
0001FA1A                            
0001FA1A                            
0001FA1A                            HUD_Update:
0001FA1A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FA1E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FA22 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FA26 6700                       		beq.s	@chkrings	; if not, branch
0001FA28                            
0001FA28 4238 FE1F                  		clr.b	(f_scorecount).w
0001FA2C 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FA32 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FA36 6100 0000                  		bsr.w	Hud_Score
0001FA3A                            
0001FA3A                            	@chkrings:
0001FA3A 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FA3E 6700                       		beq.s	@chktime	; if not, branch
0001FA40 6A00                       		bpl.s	@notzero
0001FA42 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FA46                            
0001FA46                            	@notzero:
0001FA46 4238 FE1D                  		clr.b	(f_ringcount).w
0001FA4A 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FA50 7200                       		moveq	#0,d1
0001FA52 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FA56 6100 0000                  		bsr.w	Hud_Rings
0001FA5A                            
0001FA5A                            	@chktime:
0001FA5A 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FA5E 6700                       		beq.s	@chklives	; if not, branch
0001FA60 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FA64 6600                       		bne.s	@chklives	; if yes, branch
0001FA66 43F8 FE22                  		lea	(v_time).w,a1
0001FA6A 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FA70 6700                       		beq.s	TimeOver	; if yes, branch
0001FA72                            
0001FA72 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FA74 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FA78 6500                       		bcs.s	@chklives
0001FA7A 12BC 0000                  		move.b	#0,(a1)
0001FA7E 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FA80 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FA84 6500                       		bcs.s	@updatetime
0001FA86 12BC 0000                  		move.b	#0,(a1)
0001FA8A 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FA8C 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FA90 6500                       		bcs.s	@updatetime
0001FA92 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FA96                            
0001FA96                            	@updatetime:
0001FA96 203C 5E40 0003             		hudVRAM	$DE40
0001FA9C 7200                       		moveq	#0,d1
0001FA9E 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FAA2 6100 0000                  		bsr.w	Hud_Mins
0001FAA6 203C 5EC0 0003             		hudVRAM	$DEC0
0001FAAC 7200                       		moveq	#0,d1
0001FAAE 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FAB2 6100 0000                  		bsr.w	Hud_Secs
0001FAB6                            
0001FAB6                            	@chklives:
0001FAB6 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FABA 6700                       		beq.s	@chkbonus	; if not, branch
0001FABC 4238 FE1C                  		clr.b	(f_lifecount).w
0001FAC0 6100 0000                  		bsr.w	Hud_Lives
0001FAC4                            
0001FAC4                            	@chkbonus:
0001FAC4 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FAC8 6700                       		beq.s	@finish		; if not, branch
0001FACA 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FAD8 7200                       		moveq	#0,d1
0001FADA 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FADE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAE2 7200                       		moveq	#0,d1
0001FAE4 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FAE8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAEC                            
0001FAEC                            	@finish:
0001FAEC 4E75                       		rts	
0001FAEE                            ; ===========================================================================
0001FAEE                            
0001FAEE                            TimeOver:
0001FAEE 4238 FE1E                  		clr.b	(f_timecount).w
0001FAF2 41F8 D000                  		lea	(v_player).w,a0
0001FAF6 2448                       		movea.l	a0,a2
0001FAF8 6100 E83A                  		bsr.w	KillSonic
0001FAFC 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FB02 4E75                       		rts	
0001FB04                            ; ===========================================================================
0001FB04                            
0001FB04                            HudDebug:
0001FB04 6100 0000                  		bsr.w	HudDb_XY
0001FB08 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FB0C 6700                       		beq.s	@objcounter	; if not, branch
0001FB0E 6A00                       		bpl.s	@notzero
0001FB10 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FB14                            
0001FB14                            	@notzero:
0001FB14 4238 FE1D                  		clr.b	(f_ringcount).w
0001FB18 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FB1E 7200                       		moveq	#0,d1
0001FB20 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FB24 6100 0000                  		bsr.w	Hud_Rings
0001FB28                            
0001FB28                            	@objcounter:
0001FB28 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FB2E 7200                       		moveq	#0,d1
0001FB30 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FB34 6100 0000                  		bsr.w	Hud_Secs
0001FB38 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FB3C 6700                       		beq.s	@chkbonus	; if not, branch
0001FB3E 4238 FE1C                  		clr.b	(f_lifecount).w
0001FB42 6100 0000                  		bsr.w	Hud_Lives
0001FB46                            
0001FB46                            	@chkbonus:
0001FB46 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FB4A 6700                       		beq.s	@finish		; if not, branch
0001FB4C 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FB5A 7200                       		moveq	#0,d1
0001FB5C 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FB60 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB64 7200                       		moveq	#0,d1
0001FB66 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FB6A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB6E                            
0001FB6E                            	@finish:
0001FB6E 4E75                       		rts	
0001FB70                            ; End of function HUD_Update
0001FB70                            
0001FB70                            ; ---------------------------------------------------------------------------
0001FB70                            ; Subroutine to	load "0" on the	HUD
0001FB70                            ; ---------------------------------------------------------------------------
0001FB70                            
0001FB70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB70                            
0001FB70                            
0001FB70                            Hud_LoadZero:
0001FB7A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FB7E 343C 0002                  		move.w	#2,d2
0001FB82 6000                       		bra.s	loc_1C83E
0001FB84                            ; End of function Hud_LoadZero
0001FB84                            
0001FB84                            ; ---------------------------------------------------------------------------
0001FB84                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FB84                            ; ---------------------------------------------------------------------------
0001FB84                            
0001FB84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB84                            
0001FB84                            
0001FB84                            Hud_Base:
0001FB84 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FB8A 6100 0000                  		bsr.w	Hud_Lives
0001FB98 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FB9C 343C 000E                  		move.w	#$E,d2
0001FBA0                            
0001FBA0                            loc_1C83E:
0001FBA0 43FA 0000                  		lea	Art_Hud(pc),a1
0001FBA4                            
0001FBA4                            loc_1C842:
0001FBA4 323C 000F                  		move.w	#$F,d1
0001FBA8 101A                       		move.b	(a2)+,d0
0001FBAA 6B00                       		bmi.s	loc_1C85E
0001FBAC 4880                       		ext.w	d0
0001FBAE EB48                       		lsl.w	#5,d0
0001FBB0 47F1 0000                  		lea	(a1,d0.w),a3
0001FBB4                            
0001FBB4                            loc_1C852:
0001FBB4 2C9B                       		move.l	(a3)+,(a6)
0001FBB6 51C9 FFFC                  		dbf	d1,loc_1C852
0001FBBA                            
0001FBBA                            loc_1C858:
0001FBBA 51CA FFE8                  		dbf	d2,loc_1C842
0001FBBE                            
0001FBBE 4E75                       		rts	
0001FBC0                            ; ===========================================================================
0001FBC0                            
0001FBC0                            loc_1C85E:
0001FBC0 2CBC 0000 0000             		move.l	#0,(a6)
0001FBC6 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FBCA                            
0001FBCA 60EE                       		bra.s	loc_1C858
0001FBCC                            ; End of function Hud_Base
0001FBCC                            
0001FBCC                            ; ===========================================================================
0001FBCC 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FBD8 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FBDC                            ; ---------------------------------------------------------------------------
0001FBDC                            ; Subroutine to	load debug mode	numbers	patterns
0001FBDC                            ; ---------------------------------------------------------------------------
0001FBDC                            
0001FBDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBDC                            
0001FBDC                            
0001FBDC                            HudDb_XY:
0001FBE6 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FBEA 4841                       		swap	d1
0001FBEC 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FBF0 6100                       		bsr.s	HudDb_XY2
0001FBF2 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FBF6 4841                       		swap	d1
0001FBF8 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FBFC                            ; End of function HudDb_XY
0001FBFC                            
0001FBFC                            
0001FBFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBFC                            
0001FBFC                            
0001FBFC                            HudDb_XY2:
0001FBFC 7C07                       		moveq	#7,d6
0001FBFE 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FC04                            
0001FC04                            HudDb_XYLoop:
0001FC04 E959                       		rol.w	#4,d1
0001FC06 3401                       		move.w	d1,d2
0001FC08 0242 000F                  		andi.w	#$F,d2
0001FC0C 0C42 000A                  		cmpi.w	#$A,d2
0001FC10 6500                       		bcs.s	loc_1C8B2
0001FC12 5E42                       		addq.w	#7,d2
0001FC14                            
0001FC14                            loc_1C8B2:
0001FC14 EB4A                       		lsl.w	#5,d2
0001FC16 47F1 2000                  		lea	(a1,d2.w),a3
0001FC1A 2C9B                       		move.l	(a3)+,(a6)
0001FC1C 2C9B                       		move.l	(a3)+,(a6)
0001FC1E 2C9B                       		move.l	(a3)+,(a6)
0001FC20 2C9B                       		move.l	(a3)+,(a6)
0001FC22 2C9B                       		move.l	(a3)+,(a6)
0001FC24 2C9B                       		move.l	(a3)+,(a6)
0001FC26 2C9B                       		move.l	(a3)+,(a6)
0001FC28 2C9B                       		move.l	(a3)+,(a6)
0001FC2A 4841                       		swap	d1
0001FC2C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FC30                            
0001FC30 4E75                       		rts	
0001FC32                            ; End of function HudDb_XY2
0001FC32                            
0001FC32                            ; ---------------------------------------------------------------------------
0001FC32                            ; Subroutine to	load rings numbers patterns
0001FC32                            ; ---------------------------------------------------------------------------
0001FC32                            
0001FC32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC32                            
0001FC32                            
0001FC32                            Hud_Rings:
0001FC32 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FC38 7C02                       		moveq	#2,d6
0001FC3A 6000                       		bra.s	Hud_LoadArt
0001FC3C                            ; End of function Hud_Rings
0001FC3C                            
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C                            ; Subroutine to	load score numbers patterns
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C                            
0001FC3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC3C                            
0001FC3C                            
0001FC3C                            Hud_Score:
0001FC3C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FC42 7C05                       		moveq	#5,d6
0001FC44                            
0001FC44                            Hud_LoadArt:
0001FC44 7800                       		moveq	#0,d4
0001FC46 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC4A                            
0001FC4A                            Hud_ScoreLoop:
0001FC4A 7400                       		moveq	#0,d2
0001FC4C 261A                       		move.l	(a2)+,d3
0001FC4E                            
0001FC4E                            loc_1C8EC:
0001FC4E 9283                       		sub.l	d3,d1
0001FC50 6500                       		bcs.s	loc_1C8F4
0001FC52 5242                       		addq.w	#1,d2
0001FC54 60F8                       		bra.s	loc_1C8EC
0001FC56                            ; ===========================================================================
0001FC56                            
0001FC56                            loc_1C8F4:
0001FC56 D283                       		add.l	d3,d1
0001FC58 4A42                       		tst.w	d2
0001FC5A 6700                       		beq.s	loc_1C8FE
0001FC5C 383C 0001                  		move.w	#1,d4
0001FC60                            
0001FC60                            loc_1C8FE:
0001FC60 4A44                       		tst.w	d4
0001FC62 6700                       		beq.s	loc_1C92C
0001FC64 ED4A                       		lsl.w	#6,d2
0001FC66 2D40 0004                  		move.l	d0,4(a6)
0001FC6A 47F1 2000                  		lea	(a1,d2.w),a3
0001FC6E 2C9B                       		move.l	(a3)+,(a6)
0001FC70 2C9B                       		move.l	(a3)+,(a6)
0001FC72 2C9B                       		move.l	(a3)+,(a6)
0001FC74 2C9B                       		move.l	(a3)+,(a6)
0001FC76 2C9B                       		move.l	(a3)+,(a6)
0001FC78 2C9B                       		move.l	(a3)+,(a6)
0001FC7A 2C9B                       		move.l	(a3)+,(a6)
0001FC7C 2C9B                       		move.l	(a3)+,(a6)
0001FC7E 2C9B                       		move.l	(a3)+,(a6)
0001FC80 2C9B                       		move.l	(a3)+,(a6)
0001FC82 2C9B                       		move.l	(a3)+,(a6)
0001FC84 2C9B                       		move.l	(a3)+,(a6)
0001FC86 2C9B                       		move.l	(a3)+,(a6)
0001FC88 2C9B                       		move.l	(a3)+,(a6)
0001FC8A 2C9B                       		move.l	(a3)+,(a6)
0001FC8C 2C9B                       		move.l	(a3)+,(a6)
0001FC8E                            
0001FC8E                            loc_1C92C:
0001FC8E 0680 0040 0000             		addi.l	#$400000,d0
0001FC94 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FC98                            
0001FC98 4E75                       		rts	
0001FC9A                            
0001FC9A                            ; End of function Hud_Score
0001FC9A                            ; End of function Hud_Score
0001FC9A                            
0001FC9A                            ; ---------------------------------------------------------------------------
0001FC9A                            ; Subroutine to	load countdown numbers on the continue screen
0001FC9A                            ; ---------------------------------------------------------------------------
0001FC9A                            
0001FC9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC9A                            
0001FC9A                            
0001FC9A                            ContScrCounter:
0001FCA4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FCAA 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FCB0 7C01                       		moveq	#1,d6
0001FCB2 7800                       		moveq	#0,d4
0001FCB4 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FCB8                            
0001FCB8                            ContScr_Loop:
0001FCB8 7400                       		moveq	#0,d2
0001FCBA 261A                       		move.l	(a2)+,d3
0001FCBC                            
0001FCBC                            loc_1C95A:
0001FCBC 9283                       		sub.l	d3,d1
0001FCBE 6500                       		blo.s	loc_1C962
0001FCC0 5242                       		addq.w	#1,d2
0001FCC2 60F8                       		bra.s	loc_1C95A
0001FCC4                            ; ===========================================================================
0001FCC4                            
0001FCC4                            loc_1C962:
0001FCC4 D283                       		add.l	d3,d1
0001FCC6 ED4A                       		lsl.w	#6,d2
0001FCC8 47F1 2000                  		lea	(a1,d2.w),a3
0001FCCC 2C9B                       		move.l	(a3)+,(a6)
0001FCCE 2C9B                       		move.l	(a3)+,(a6)
0001FCD0 2C9B                       		move.l	(a3)+,(a6)
0001FCD2 2C9B                       		move.l	(a3)+,(a6)
0001FCD4 2C9B                       		move.l	(a3)+,(a6)
0001FCD6 2C9B                       		move.l	(a3)+,(a6)
0001FCD8 2C9B                       		move.l	(a3)+,(a6)
0001FCDA 2C9B                       		move.l	(a3)+,(a6)
0001FCDC 2C9B                       		move.l	(a3)+,(a6)
0001FCDE 2C9B                       		move.l	(a3)+,(a6)
0001FCE0 2C9B                       		move.l	(a3)+,(a6)
0001FCE2 2C9B                       		move.l	(a3)+,(a6)
0001FCE4 2C9B                       		move.l	(a3)+,(a6)
0001FCE6 2C9B                       		move.l	(a3)+,(a6)
0001FCE8 2C9B                       		move.l	(a3)+,(a6)
0001FCEA 2C9B                       		move.l	(a3)+,(a6)
0001FCEC 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FCF0                            
0001FCF0 4E75                       		rts	
0001FCF2                            ; End of function ContScrCounter
0001FCF2                            
0001FCF2                            ; ===========================================================================
0001FCF2                            
0001FCF2                            		include	"_inc\HUD (part 2).asm"
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2                            ; HUD counter sizes
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2 0001 86A0                  Hud_100000:	dc.l 100000
0001FCF6 0000 2710                  Hud_10000:	dc.l 10000
0001FCFA 0000 03E8                  Hud_1000:	dc.l 1000
0001FCFE 0000 0064                  Hud_100:	dc.l 100
0001FD02 0000 000A                  Hud_10:		dc.l 10
0001FD06 0000 0001                  Hud_1:		dc.l 1
0001FD0A                            
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            ; Subroutine to	load time numbers patterns
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            
0001FD0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD0A                            
0001FD0A                            
0001FD0A                            Hud_Mins:
0001FD0A 45F9 0001 FD06             		lea	(Hud_1).l,a2
0001FD10 7C00                       		moveq	#0,d6
0001FD12 6000                       		bra.s	loc_1C9BA
0001FD14                            ; End of function Hud_Mins
0001FD14                            
0001FD14                            
0001FD14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD14                            
0001FD14                            
0001FD14                            Hud_Secs:
0001FD14 45F9 0001 FD02             		lea	(Hud_10).l,a2
0001FD1A 7C01                       		moveq	#1,d6
0001FD1C                            
0001FD1C                            loc_1C9BA:
0001FD1C 7800                       		moveq	#0,d4
0001FD1E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD22                            
0001FD22                            Hud_TimeLoop:
0001FD22 7400                       		moveq	#0,d2
0001FD24 261A                       		move.l	(a2)+,d3
0001FD26                            
0001FD26                            loc_1C9C4:
0001FD26 9283                       		sub.l	d3,d1
0001FD28 6500                       		bcs.s	loc_1C9CC
0001FD2A 5242                       		addq.w	#1,d2
0001FD2C 60F8                       		bra.s	loc_1C9C4
0001FD2E                            ; ===========================================================================
0001FD2E                            
0001FD2E                            loc_1C9CC:
0001FD2E D283                       		add.l	d3,d1
0001FD30 4A42                       		tst.w	d2
0001FD32 6700                       		beq.s	loc_1C9D6
0001FD34 383C 0001                  		move.w	#1,d4
0001FD38                            
0001FD38                            loc_1C9D6:
0001FD38 ED4A                       		lsl.w	#6,d2
0001FD3A 2D40 0004                  		move.l	d0,4(a6)
0001FD3E 47F1 2000                  		lea	(a1,d2.w),a3
0001FD42 2C9B                       		move.l	(a3)+,(a6)
0001FD44 2C9B                       		move.l	(a3)+,(a6)
0001FD46 2C9B                       		move.l	(a3)+,(a6)
0001FD48 2C9B                       		move.l	(a3)+,(a6)
0001FD4A 2C9B                       		move.l	(a3)+,(a6)
0001FD4C 2C9B                       		move.l	(a3)+,(a6)
0001FD4E 2C9B                       		move.l	(a3)+,(a6)
0001FD50 2C9B                       		move.l	(a3)+,(a6)
0001FD52 2C9B                       		move.l	(a3)+,(a6)
0001FD54 2C9B                       		move.l	(a3)+,(a6)
0001FD56 2C9B                       		move.l	(a3)+,(a6)
0001FD58 2C9B                       		move.l	(a3)+,(a6)
0001FD5A 2C9B                       		move.l	(a3)+,(a6)
0001FD5C 2C9B                       		move.l	(a3)+,(a6)
0001FD5E 2C9B                       		move.l	(a3)+,(a6)
0001FD60 2C9B                       		move.l	(a3)+,(a6)
0001FD62 0680 0040 0000             		addi.l	#$400000,d0
0001FD68 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FD6C                            
0001FD6C 4E75                       		rts	
0001FD6E                            ; End of function Hud_Secs
0001FD6E                            
0001FD6E                            ; ---------------------------------------------------------------------------
0001FD6E                            ; Subroutine to	load time/ring bonus numbers patterns
0001FD6E                            ; ---------------------------------------------------------------------------
0001FD6E                            
0001FD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD6E                            
0001FD6E                            
0001FD6E                            Hud_TimeRingBonus:
0001FD6E 45F9 0001 FCFA             		lea	(Hud_1000).l,a2
0001FD74 7C03                       		moveq	#3,d6
0001FD76 7800                       		moveq	#0,d4
0001FD78 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD7C                            
0001FD7C                            Hud_BonusLoop:
0001FD7C 7400                       		moveq	#0,d2
0001FD7E 261A                       		move.l	(a2)+,d3
0001FD80                            
0001FD80                            loc_1CA1E:
0001FD80 9283                       		sub.l	d3,d1
0001FD82 6500                       		bcs.s	loc_1CA26
0001FD84 5242                       		addq.w	#1,d2
0001FD86 60F8                       		bra.s	loc_1CA1E
0001FD88                            ; ===========================================================================
0001FD88                            
0001FD88                            loc_1CA26:
0001FD88 D283                       		add.l	d3,d1
0001FD8A 4A42                       		tst.w	d2
0001FD8C 6700                       		beq.s	loc_1CA30
0001FD8E 383C 0001                  		move.w	#1,d4
0001FD92                            
0001FD92                            loc_1CA30:
0001FD92 4A44                       		tst.w	d4
0001FD94 6700                       		beq.s	Hud_ClrBonus
0001FD96 ED4A                       		lsl.w	#6,d2
0001FD98 47F1 2000                  		lea	(a1,d2.w),a3
0001FD9C 2C9B                       		move.l	(a3)+,(a6)
0001FD9E 2C9B                       		move.l	(a3)+,(a6)
0001FDA0 2C9B                       		move.l	(a3)+,(a6)
0001FDA2 2C9B                       		move.l	(a3)+,(a6)
0001FDA4 2C9B                       		move.l	(a3)+,(a6)
0001FDA6 2C9B                       		move.l	(a3)+,(a6)
0001FDA8 2C9B                       		move.l	(a3)+,(a6)
0001FDAA 2C9B                       		move.l	(a3)+,(a6)
0001FDAC 2C9B                       		move.l	(a3)+,(a6)
0001FDAE 2C9B                       		move.l	(a3)+,(a6)
0001FDB0 2C9B                       		move.l	(a3)+,(a6)
0001FDB2 2C9B                       		move.l	(a3)+,(a6)
0001FDB4 2C9B                       		move.l	(a3)+,(a6)
0001FDB6 2C9B                       		move.l	(a3)+,(a6)
0001FDB8 2C9B                       		move.l	(a3)+,(a6)
0001FDBA 2C9B                       		move.l	(a3)+,(a6)
0001FDBC                            
0001FDBC                            loc_1CA5A:
0001FDBC 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FDC0                            
0001FDC0 4E75                       		rts	
0001FDC2                            ; ===========================================================================
0001FDC2                            
0001FDC2                            Hud_ClrBonus:
0001FDC2 7A0F                       		moveq	#$F,d5
0001FDC4                            
0001FDC4                            Hud_ClrBonusLoop:
0001FDC4 2CBC 0000 0000             		move.l	#0,(a6)
0001FDCA 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FDCE                            
0001FDCE 60EC                       		bra.s	loc_1CA5A
0001FDD0                            ; End of function Hud_TimeRingBonus
0001FDD0                            
0001FDD0                            ; ---------------------------------------------------------------------------
0001FDD0                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FDD0                            ; ---------------------------------------------------------------------------
0001FDD0                            
0001FDD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDD0                            
0001FDD0                            
0001FDD0                            Hud_Lives:
0001FDD0 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FDD6 7200                       		moveq	#0,d1
0001FDD8 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FDDC 45F9 0001 FD02             		lea	(Hud_10).l,a2
0001FDE2 7C01                       		moveq	#1,d6
0001FDE4 7800                       		moveq	#0,d4
0001FDE6 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FDEA                            
0001FDEA                            Hud_LivesLoop:
0001FDEA 2D40 0004                  		move.l	d0,4(a6)
0001FDEE 7400                       		moveq	#0,d2
0001FDF0 261A                       		move.l	(a2)+,d3
0001FDF2                            
0001FDF2                            loc_1CA90:
0001FDF2 9283                       		sub.l	d3,d1
0001FDF4 6500                       		bcs.s	loc_1CA98
0001FDF6 5242                       		addq.w	#1,d2
0001FDF8 60F8                       		bra.s	loc_1CA90
0001FDFA                            ; ===========================================================================
0001FDFA                            
0001FDFA                            loc_1CA98:
0001FDFA D283                       		add.l	d3,d1
0001FDFC 4A42                       		tst.w	d2
0001FDFE 6700                       		beq.s	loc_1CAA2
0001FE00 383C 0001                  		move.w	#1,d4
0001FE04                            
0001FE04                            loc_1CAA2:
0001FE04 4A44                       		tst.w	d4
0001FE06 6700                       		beq.s	Hud_ClrLives
0001FE08                            
0001FE08                            loc_1CAA6:
0001FE08 EB4A                       		lsl.w	#5,d2
0001FE0A 47F1 2000                  		lea	(a1,d2.w),a3
0001FE0E 2C9B                       		move.l	(a3)+,(a6)
0001FE10 2C9B                       		move.l	(a3)+,(a6)
0001FE12 2C9B                       		move.l	(a3)+,(a6)
0001FE14 2C9B                       		move.l	(a3)+,(a6)
0001FE16 2C9B                       		move.l	(a3)+,(a6)
0001FE18 2C9B                       		move.l	(a3)+,(a6)
0001FE1A 2C9B                       		move.l	(a3)+,(a6)
0001FE1C 2C9B                       		move.l	(a3)+,(a6)
0001FE1E                            
0001FE1E                            loc_1CABC:
0001FE1E 0680 0040 0000             		addi.l	#$400000,d0
0001FE24 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FE28                            
0001FE28 4E75                       		rts	
0001FE2A                            ; ===========================================================================
0001FE2A                            
0001FE2A                            Hud_ClrLives:
0001FE2A 4A46                       		tst.w	d6
0001FE2C 67DA                       		beq.s	loc_1CAA6
0001FE2E 7A07                       		moveq	#7,d5
0001FE30                            
0001FE30                            Hud_ClrLivesLoop:
0001FE30 2CBC 0000 0000             		move.l	#0,(a6)
0001FE36 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FE3A 60E2                       		bra.s	loc_1CABC
0001FE3C                            ; End of function Hud_Lives
0001FE3C                            ; End of function Hud_Lives
0001FE3C                            
0001FE3C                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0002013C                            		even
0002013C                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002027C                            		even
0002027C                            
0002027C                            		include	"_incObj\DebugMode.asm"
0002027C                            ; ---------------------------------------------------------------------------
0002027C                            ; When debug mode is currently in use
0002027C                            ; ---------------------------------------------------------------------------
0002027C                            
0002027C                            DebugMode:
0002027C 7000                       		moveq	#0,d0
0002027E 1038 FE08                  		move.b	(v_debuguse).w,d0
00020282 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020286 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0002028A                            ; ===========================================================================
0002028A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002028C 0000                       		dc.w Debug_Action-Debug_Index
0002028E                            ; ===========================================================================
0002028E                            
0002028E                            Debug_Main:	; Routine 0
0002028E 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020292 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020298 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002029E 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000202A4 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000202AA 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000202B0 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000202B6 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000202BC 117C 0000 001A             		move.b	#0,obFrame(a0)
000202C2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000202C8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000202CE 6600                       		bne.s	@islevel	; if not, branch
000202D0                            
000202D0 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000202D6 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000202DC 7006                       		moveq	#6,d0		; use 6th debug	item list
000202DE 6000                       		bra.s	@selectlist
000202E0                            ; ===========================================================================
000202E0                            
000202E0                            @islevel:
000202E0 7000                       		moveq	#0,d0
000202E2 1038 FE10                  		move.b	(v_zone).w,d0
000202E6                            
000202E6                            @selectlist:
000202E6 45F9 0000 0000             		lea	(DebugList).l,a2
000202EC D040                       		add.w	d0,d0
000202EE D4F2 0000                  		adda.w	(a2,d0.w),a2
000202F2 3C1A                       		move.w	(a2)+,d6
000202F4 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000202F8 6200                       		bhi.s	@noreset	; if not, branch
000202FA 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00020300                            
00020300                            	@noreset:
00020300 6100 0000                  		bsr.w	Debug_ShowItem
00020304 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002030A 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00020310                            
00020310                            Debug_Action:	; Routine 2
00020310 7006                       		moveq	#6,d0
00020312 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020318 6700                       		beq.s	@isntlevel
0002031A                            
0002031A 7000                       		moveq	#0,d0
0002031C 1038 FE10                  		move.b	(v_zone).w,d0
00020320                            
00020320                            	@isntlevel:
00020320 45F9 0000 0000             		lea	(DebugList).l,a2
00020326 D040                       		add.w	d0,d0
00020328 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002032C 3C1A                       		move.w	(a2)+,d6
0002032E 6100 0000                  		bsr.w	Debug_Control
00020332 4EF9 0000 F742             		jmp	(DisplaySprite).l
00020338                            
00020338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020338                            
00020338                            
00020338                            Debug_Control:
00020338 7800                       		moveq	#0,d4
0002033A 323C 0001                  		move.w	#1,d1
0002033E 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020342 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020346 6600                       		bne.s	@dirpressed	; if yes, branch
00020348                            
00020348 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002034C 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020350 6600                       		bne.s	@dirheld	; if yes, branch
00020352                            
00020352 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020358 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002035E 6000 0000                  		bra.w	Debug_ChgItem
00020362                            ; ===========================================================================
00020362                            
00020362                            @dirheld:
00020362 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020366 6600                       		bne.s	loc_1D01C
00020368 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002036E 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020372 6600                       		bne.s	@dirpressed
00020374 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
0002037A                            
0002037A                            @dirpressed:
0002037A 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002037E                            
0002037E                            loc_1D01C:
0002037E 7200                       		moveq	#0,d1
00020380 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020384 5241                       		addq.w	#1,d1
00020386 4841                       		swap	d1
00020388 E881                       		asr.l	#4,d1
0002038A 2428 000C                  		move.l	obY(a0),d2
0002038E 2628 0008                  		move.l	obX(a0),d3
00020392 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020396 6700                       		beq.s	loc_1D03C	; if not, branch
00020398 9481                       		sub.l	d1,d2
0002039A 6400                       		bcc.s	loc_1D03C
0002039C 7400                       		moveq	#0,d2
0002039E                            
0002039E                            loc_1D03C:
0002039E 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000203A2 6700                       		beq.s	loc_1D052	; if not, branch
000203A4 D481                       		add.l	d1,d2
000203A6 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000203AC 6500                       		bcs.s	loc_1D052
000203AE 243C 07FF 0000             		move.l	#$7FF0000,d2
000203B4                            
000203B4                            loc_1D052:
000203B4 0804 0002                  		btst	#bitL,d4
000203B8 6700                       		beq.s	loc_1D05E
000203BA 9681                       		sub.l	d1,d3
000203BC 6400                       		bcc.s	loc_1D05E
000203BE 7600                       		moveq	#0,d3
000203C0                            
000203C0                            loc_1D05E:
000203C0 0804 0003                  		btst	#bitR,d4
000203C4 6700                       		beq.s	loc_1D066
000203C6 D681                       		add.l	d1,d3
000203C8                            
000203C8                            loc_1D066:
000203C8 2142 000C                  		move.l	d2,obY(a0)
000203CC 2143 0008                  		move.l	d3,obX(a0)
000203D0                            
000203D0                            Debug_ChgItem:
000203D0 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000203D6 6700                       		beq.s	@createitem	; if not, branch
000203D8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000203DE 6700                       		beq.s	@nextitem	; if not, branch
000203E0 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000203E4 6400                       		bcc.s	@display
000203E6 DD38 FE06                  		add.b	d6,(v_debugitem).w
000203EA 6000                       		bra.s	@display
000203EC                            ; ===========================================================================
000203EC                            
000203EC                            @nextitem:
000203EC 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000203F2 6700                       		beq.s	@createitem	; if not, branch
000203F4 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000203F8 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000203FC 6200                       		bhi.s	@display
000203FE 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00020404                            
00020404                            	@display:
00020404 6000 0000                  		bra.w	Debug_ShowItem
00020408                            ; ===========================================================================
00020408                            
00020408                            @createitem:
00020408 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002040E 6700                       		beq.s	@backtonormal	; if not, branch
00020410 4EB9 0000 FBCE             		jsr	(FindFreeObj).l
00020416 6600                       		bne.s	@backtonormal
00020418 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002041E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020424 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020428 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002042E 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020434 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0002043A 7000                       		moveq	#0,d0
0002043C 1038 FE06                  		move.b	(v_debugitem).w,d0
00020440 E748                       		lsl.w	#3,d0
00020442 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020448 4E75                       		rts	
0002044A                            ; ===========================================================================
0002044A                            
0002044A                            @backtonormal:
0002044A 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020450 6700                       		beq.s	@stayindebug	; if not, branch
00020452 7000                       		moveq	#0,d0
00020454 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020458 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020460 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020466 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
0002046A 3140 000A                  		move.w	d0,obX+2(a0)
0002046E 3140 000E                  		move.w	d0,obY+2(a0)
00020472 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020478 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002047E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020484 6600                       		bne.s	@stayindebug	; if not, branch
00020486                            
00020486 4278 F780                  		clr.w	(v_ssangle).w
0002048A 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020490 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020498 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002049E 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000204A4 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000204AA 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000204B0                            
000204B0                            	@stayindebug:
000204B0 4E75                       		rts	
000204B2                            ; End of function Debug_Control
000204B2                            
000204B2                            
000204B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204B2                            
000204B2                            
000204B2                            Debug_ShowItem:
000204B2 7000                       		moveq	#0,d0
000204B4 1038 FE06                  		move.b	(v_debugitem).w,d0
000204B8 E748                       		lsl.w	#3,d0
000204BA 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000204C0 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000204C6 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000204CC 4E75                       		rts	
000204CE                            ; End of function Debug_ShowItem
000204CE                            ; End of function Debug_ShowItem
000204CE                            		include	"_inc\DebugList.asm"
000204CE                            ; ---------------------------------------------------------------------------
000204CE                            ; Debug	mode item lists
000204CE                            ; ---------------------------------------------------------------------------
000204CE                            DebugList:
000204CE 0000                       	dc.w @GHZ-DebugList
000204D0 0000                       	dc.w @LZ-DebugList
000204D2 0000                       	dc.w @MZ-DebugList
000204D4 0000                       	dc.w @SLZ-DebugList
000204D6 0000                       	dc.w @SYZ-DebugList
000204D8 0000                       	dc.w @SBZ-DebugList
000204DA 0000                       	dc.w @Ending-DebugList
000204DC                            
000204DC                            dbug:	macro map,object,subtype,frame,vram
000204DC                            	dc.l map+(object<<24)
000204DC                            	dc.b subtype,frame
000204DC                            	dc.w vram
000204DC                            	endm
000204DC                            
000204DC                            @GHZ:
000204DC 0000                       	dc.w (@GHZend-@GHZ-2)/8
000204DE                            
000204DE                            ;		mappings	object		subtype	frame	VRAM setting
000204DE 2500 BDB4 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000204E6 2600 C57A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000204EE 1F00 B194 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000204F6 2200 B61E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000204FE 2B00 CCB6 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020506 3600 F0EC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002050E 1800 9B3A 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020516 3B00 F212 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002051E 4001 17BE 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020526 4100 FE60 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002052E 4201 0086 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020536 4401 0394 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002053E 7901 9FFA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020546 4B00 BE04 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002054E 7D01 A1BC 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020556                            	@GHZend:
00020556                            
00020556                            @LZ:
00020556 0000                       	dc.w (@LZend-@LZ-2)/8
00020558                            
00020558                            ;		mappings	object		subtype	frame	VRAM setting
00020558 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020560 2600 C57A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020568 4100 FE60 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020570 2C00 CD5C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020578 2D00 CF48 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020580 1601 4180 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00020588 1601 4180 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020590 3300 E3C6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020598 3200 DF86 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000205A0 3600 F0EC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000205A8 5201 2256 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000205B0 6101 43A8 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000205B8 6101 43A8 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000205C0 6101 43A8 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000205C8 6201 44FC 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000205D0 6101 43A8 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000205D8 6101 43A8 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000205E0 6301 485E 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000205E8 6001 40CA 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000205F0 6401 4BAC 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000205F8 6501 4D34 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00020600 6501 4D34 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020608 0B01 3516 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00020610 0C01 35E6 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020618 7901 9FFA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020620                            	@LZend:
00020620                            
00020620                            @MZ:
00020620 0000                       	dc.w (@MZend-@MZ-2)/8
00020622                            
00020622                            ;		mappings	object		subtype	frame	VRAM setting
00020622 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002062A 2600 C57A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020632 2200 B61E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002063A 3600 F0EC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020642 4100 FE60 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002064A 1300 D456 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020652 4601 0A44 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0002065A 6E01 9096 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020662 6A01 8A4E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002066A 3300 E3C6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020672 1E00 A8AC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002067A 5101 1F7C 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020682 5201 2200 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
0002068A 5300 A17C 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020692 5401 1324 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
0002069A 5501 23F4 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000206A2 7801 9C66 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000206AA 7901 9FFA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000206B2                            	@MZend:
000206B2                            
000206B2                            @SLZ:
000206B2 0000                       	dc.w (@SLZend-@SLZ-2)/8
000206B4                            
000206B4                            ;		mappings	object		subtype	frame	VRAM setting
000206B4 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000206BC 2600 C57A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206C4 5901 2F3E 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000206CC 5300 A17C 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000206D4 1800 9B98 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000206DC 5A01 3078 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000206E4 5B01 3230 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000206EC 5D01 3804 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000206F4 5E01 3B96 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000206FC 4100 FE60 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020704 1300 D456 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0002070C 1C00 A2AE 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020714 5F01 3E14 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002071C 6001 40CA 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020724 7901 9FFA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002072C                            	@SLZend:
0002072C                            
0002072C                            @SYZ:
0002072C 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002072E                            
0002072E                            ;		mappings	object		subtype	frame	VRAM setting
0002072E 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020736 2600 C57A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002073E 3600 F0EC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020746 4100 FE60 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002074E 4301 02E6 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020756 1201 0AC2 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0002075E 4701 0C66 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020766 1F00 B194 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002076E 2200 B61E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020776 5001 1A4E 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0002077E 1800 9B86 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020786 5601 28FE 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
0002078E 3200 DF86 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020796 7801 9C66 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002079E 7901 9FFA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207A6                            	@SYZend:
000207A6                            
000207A6                            @SBZ:
000207A6 0000                       	dc.w (@SBZend-@SBZ-2)/8
000207A8                            
000207A8                            ;		mappings	object		subtype	frame	VRAM setting
000207A8 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207B0 2600 C57A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207B8 5F01 3E14 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000207C0 6001 40CA 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000207C8 7801 9C66 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000207D0 1501 2C9A 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000207D8 6701 853C E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000207E0 5201 2200 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000207E8 3200 DF86 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000207F0 6901 8796 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000207F8 6901 87F0 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020800 6A01 8A4E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020808 5300 A17C 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020810 5201 2200 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020818 6B01 8E1E 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020820 2A00 A43E 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020828 6B01 8E1E 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020830 6A01 8A4E 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020838 6B01 8E1E 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020840 6A01 8A4E 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020848 6B01 8E1E 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020850 6C01 8FE0 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020858 6D01 0736 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020860 6D01 0736 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020868 6E01 9096 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020870 7001 94DC 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020878 7101 36AA 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020880 1E00 A8AC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020888 7901 9FFA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020890                            	@SBZend:
00020890                            
00020890                            @Ending:
00020890 0000                       	dc.w (@Endingend-@Ending-2)/8
00020892                            
00020892                            ;		mappings	object		subtype	frame	VRAM setting
00020892 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002089A 2500 BDB4 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000208A2                            	@Endingend:
000208A2                            
000208A2                            	even
000208A2                            	even
000208A2                            		include	"_inc\LevelHeaders.asm"
000208A2                            ; ---------------------------------------------------------------------------
000208A2                            ; Level Headers
000208A2                            ; ---------------------------------------------------------------------------
000208A2                            
000208A2                            LevelHeaders:
000208A2                            
000208A2                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000208A2                            	dc.l (plc1<<24)+lvlgfx
000208A2                            	dc.l (plc2<<24)+sixteen
000208A2                            	dc.l twofivesix
000208A2                            	dc.b 0, music, pal, pal
000208A2                            	endm
000208A2                            
000208A2                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000208A2                            ; music (unused), palette (unused), palette
000208A2                            
000208A2                            ;		1st PLC				2nd PLC				256x256 data			palette
000208A2                            ;				level gfx*			16x16 data			music*
000208A2                            
000208A2 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000208B2 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
000208C2 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
000208D2 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
000208E2 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
000208F2 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020902 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020912                            	even
00020912                            
00020912                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020912                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020912                            		include	"_inc\Pattern Load Cues.asm"
00020912                            ; ---------------------------------------------------------------------------
00020912                            ; Pattern load cues
00020912                            ; ---------------------------------------------------------------------------
00020912                            ArtLoadCues:
00020912                            
00020912 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020914 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020916 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020918 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
0002091A                            PLC_Levels:
0002091A 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002091C 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0002091E 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020920 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020922 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020924 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020926 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020928 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
0002092A 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002092C 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0002092E 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020930 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020932 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020934 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020936 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020938 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
0002093A 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0002093C                            PLC_Animals:
0002093C 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
0002093E 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020940 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020942 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020944 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020946 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020948 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
0002094A 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0002094C 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
0002094E 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020950 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020952 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020954                            
00020954                            plcm:	macro gfx,vram
00020954                            	dc.l gfx
00020954                            	dc.w vram
00020954                            	endm
00020954                            
00020954                            ; ---------------------------------------------------------------------------
00020954                            ; Pattern load cues - standard block 1
00020954                            ; ---------------------------------------------------------------------------
00020954 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020956 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
0002095C 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020962 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020968 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
0002096E 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020974                            	PLC_Mainend:
00020974                            ; ---------------------------------------------------------------------------
00020974                            ; Pattern load cues - standard block 2
00020974                            ; ---------------------------------------------------------------------------
00020974 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020976 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
0002097C                            	PLC_Main2end:
0002097C                            ; ---------------------------------------------------------------------------
0002097C                            ; Pattern load cues - explosion
0002097C                            ; ---------------------------------------------------------------------------
0002097C 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
0002097E 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020984                            	PLC_Explodeend:
00020984                            ; ---------------------------------------------------------------------------
00020984                            ; Pattern load cues - game/time	over
00020984                            ; ---------------------------------------------------------------------------
00020984 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020986 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
0002098C                            	PLC_GameOverend:
0002098C                            ; ---------------------------------------------------------------------------
0002098C                            ; Pattern load cues - Green Hill
0002098C                            ; ---------------------------------------------------------------------------
0002098C 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
0002098E 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020994 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
0002099A 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000209A0 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000209A6 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000209AC 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000209B2 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000209B8 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000209BE 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
000209C4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000209CA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000209D0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000209D6                            
000209D6 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
000209D8 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000209DE 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
000209E4 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
000209EA 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
000209F0 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
000209F6 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
000209FC                            	PLC_GHZ2end:
000209FC                            ; ---------------------------------------------------------------------------
000209FC                            ; Pattern load cues - Labyrinth
000209FC                            ; ---------------------------------------------------------------------------
000209FC 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
000209FE 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020A04                            		;plcm	Nem_LzBlock1, $3C00	; block
00020A04                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020A04                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020A04 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020A0A 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020A10 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020A16 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020A1C 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020A22 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020A28 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020A2E 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020A34                            
00020A34 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020A36 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020A3C 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020A42 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020A48 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020A4E 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020A54 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020A5A 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020A60 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020A66 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020A6C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A72 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A78 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A7E                            	PLC_LZ2end:
00020A7E                            ; ---------------------------------------------------------------------------
00020A7E                            ; Pattern load cues - Marble
00020A7E                            ; ---------------------------------------------------------------------------
00020A7E 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020A80 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020A86 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020A8C 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020A92 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020A98 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020A9E 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020AA4 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020AAA 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020AB0 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020AB6 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020ABC                            
00020ABC 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020ABE 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020AC4 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020ACA                            		;plcm	Nem_MzSwitch, $A260	; switch
00020ACA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020AD0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020AD6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020ADC 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020AE2 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020AE8                            	PLC_MZ2end:
00020AE8                            ; ---------------------------------------------------------------------------
00020AE8                            ; Pattern load cues - Star Light
00020AE8                            ; ---------------------------------------------------------------------------
00020AE8 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020AEA 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020AF0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020AF6 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020AFC 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020B02 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020B08 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020B0E 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020B14 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B1A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B20 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B26                            
00020B26 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020B28 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020B2E 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020B34 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020B3A 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020B40 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020B46 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020B4C                            	PLC_SLZ2end:
00020B4C                            ; ---------------------------------------------------------------------------
00020B4C                            ; Pattern load cues - Spring Yard
00020B4C                            ; ---------------------------------------------------------------------------
00020B4C 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020B4E 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020B54                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020B54                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020B54 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020B5A 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020B60 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020B66 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020B6C 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020B72 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020B78                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020B78                            
00020B78 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020B7A                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020B7A 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020B80 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020B86 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020B8C                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020B8C 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020B92                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020B92 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B98 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B9E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BA4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BAA                            	PLC_SYZ2end:
00020BAA                            ; ---------------------------------------------------------------------------
00020BAA                            ; Pattern load cues - Scrap Brain
00020BAA                            ; ---------------------------------------------------------------------------
00020BAA 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020BAC 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020BB2 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020BB8                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020BB8                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020BB8                            		;plcm	Nem_Girder, $5E00	; girder
00020BB8 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020BBE 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020BC4                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020BC4 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020BCA 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020BD0 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020BD6 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020BDC                            
00020BDC 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020BDE                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020BDE 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020BE4 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020BEA                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020BEA 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020BF0 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020BF6 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020BFC 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020C02 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C08 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C0E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C14 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C1A                            	PLC_SBZ2end:
00020C1A                            ; ---------------------------------------------------------------------------
00020C1A                            ; Pattern load cues - title card
00020C1A                            ; ---------------------------------------------------------------------------
00020C1A 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020C1C 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020C22                            	PLC_TitleCardend:
00020C22                            ; ---------------------------------------------------------------------------
00020C22                            ; Pattern load cues - act 3 boss
00020C22                            ; ---------------------------------------------------------------------------
00020C22 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020C24 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020C2A 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020C30 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020C36 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020C3C 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020C42 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020C48 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020C4E                            	PLC_Bossend:
00020C4E                            ; ---------------------------------------------------------------------------
00020C4E                            ; Pattern load cues - act 1/2 signpost
00020C4E                            ; ---------------------------------------------------------------------------
00020C4E 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020C50 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020C56 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020C5C 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020C62                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020C62                            	PLC_Signpostend:
00020C62                            ; ---------------------------------------------------------------------------
00020C62                            ; Pattern load cues - beta special stage warp effect
00020C62                            ; ---------------------------------------------------------------------------
00020C62                            PLC_Warp:
00020C62                            	PLC_Warpend:
00020C62                            ; ---------------------------------------------------------------------------
00020C62                            ; Pattern load cues - special stage
00020C62                            ; ---------------------------------------------------------------------------
00020C62 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020C64 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020C6A 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020C70 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020C76 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020C7C 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020C82 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020C88 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020C8E 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020C94 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020C9A 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020CA0 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020CA6 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020CAC 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020CB2 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020CB8                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020CB8                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020CB8                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020CB8                            	PLC_SpeStageend:
00020CB8                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020CB8                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020CB8                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020CB8                            ; ---------------------------------------------------------------------------
00020CB8                            ; Pattern load cues - GHZ animals
00020CB8                            ; ---------------------------------------------------------------------------
00020CB8 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020CBA 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020CC0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020CC6                            	PLC_GHZAnimalsend:
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6                            ; Pattern load cues - LZ animals
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020CC8 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020CCE 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020CD4                            	PLC_LZAnimalsend:
00020CD4                            ; ---------------------------------------------------------------------------
00020CD4                            ; Pattern load cues - MZ animals
00020CD4                            ; ---------------------------------------------------------------------------
00020CD4 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020CD6 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020CDC 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020CE2                            	PLC_MZAnimalsend:
00020CE2                            ; ---------------------------------------------------------------------------
00020CE2                            ; Pattern load cues - SLZ animals
00020CE2                            ; ---------------------------------------------------------------------------
00020CE2 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020CE4 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020CEA 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020CF0                            	PLC_SLZAnimalsend:
00020CF0                            ; ---------------------------------------------------------------------------
00020CF0                            ; Pattern load cues - SYZ animals
00020CF0                            ; ---------------------------------------------------------------------------
00020CF0 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020CF2 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020CF8 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020CFE                            	PLC_SYZAnimalsend:
00020CFE                            ; ---------------------------------------------------------------------------
00020CFE                            ; Pattern load cues - SBZ animals
00020CFE                            ; ---------------------------------------------------------------------------
00020CFE 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020D00 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020D06 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020D0C                            	PLC_SBZAnimalsend:
00020D0C                            ; ---------------------------------------------------------------------------
00020D0C                            ; Pattern load cues - special stage results screen
00020D0C                            ; ---------------------------------------------------------------------------
00020D0C 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020D0E 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020D14 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020D1A                            	PLC_SpeStResultend:
00020D1A                            ; ---------------------------------------------------------------------------
00020D1A                            ; Pattern load cues - ending sequence
00020D1A                            ; ---------------------------------------------------------------------------
00020D1A 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020D1C 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020D22 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020D28 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020D2E                            		;plcm	Nem_EndFlower, $7400	; flowers
00020D2E 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020D34 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020D3A 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020D40 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020D46 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020D4C 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020D52 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020D58 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020D5E 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020D64 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020D6A                            	PLC_Endingend:
00020D6A                            ; ---------------------------------------------------------------------------
00020D6A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020D6A                            ; ---------------------------------------------------------------------------
00020D6A 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020D6C 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020D72 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020D78 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020D7E                            	PLC_TryAgainend:
00020D7E                            ; ---------------------------------------------------------------------------
00020D7E                            ; Pattern load cues - Eggman on SBZ 2
00020D7E                            ; ---------------------------------------------------------------------------
00020D7E 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020D80 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020D86 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020D8C 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020D92                            	PLC_EggmanSBZ2end:
00020D92                            ; ---------------------------------------------------------------------------
00020D92                            ; Pattern load cues - final boss
00020D92                            ; ---------------------------------------------------------------------------
00020D92 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020D94 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020D9A 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020DA0 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020DA6 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020DAC 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020DB2                            	PLC_FZBossend:
00020DB2                            ; ---------------------------------------------------------------------------
00020DB2                            ; Pattern load cues - Eggman
00020DB2                            ; ---------------------------------------------------------------------------
00020DB2 0006                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020DB4 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020DBA 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020DC0 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020DC6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DCC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DD2 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020DD8                            	PLC_Eggend:
00020DD8                            		even
00020DD8                            ; ---------------------------------------------------------------------------
00020DD8                            ; Pattern load cue IDs
00020DD8                            ; ---------------------------------------------------------------------------
00020DD8 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020DD8 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020DD8 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020DD8 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020DD8 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020DD8 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020DD8 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020DD8 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020DD8 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020DD8 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020DD8 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020DD8 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020DD8 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020DD8 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020DD8 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020DD8 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020DD8 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020DD8 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020DD8 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020DD8 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020DD8 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020DD8 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020DD8 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020DD8 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020DD8 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020DD8 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020DD8 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020DD8 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020DD8 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020DD8 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020DD8 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020DD8 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020DD8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020DD8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020DD8                            
00020E00                            			dcb.b	$300,$FF
00021100                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021570                            			even
00021570                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002166C                            			even
0002166C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002174C                            		even
0002174C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022BB8                            		even
00022BB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024652                            		even
00024652                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024686                            		even
00024686                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000248B6                            		even		
000248B6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024974                            		even
00024974                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024E1C                            		even
00024E1C                            
00024E1C                            Map_Sonic:	include	"_maps\Sonic.asm"
00024E1C                            ; --------------------------------------------------------------------------------
00024E1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024E1C                            ; --------------------------------------------------------------------------------
00024E1C                            
00024E1C                            SME_Lx_Kl:	
00024E1C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024E20 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024E24 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024E28 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024E2C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024E30 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024E34 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024E38 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024E3C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024E40 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024E44 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024E48 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024E4C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024E50 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024E54 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024E58 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024E5C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024E60 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024E64 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024E68 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024E6C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024E70 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024E74 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024E78 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024E7C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024E80 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024E84 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024E88 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024E8C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024E90 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024E94 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024E98 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024E9C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024EA0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024EA4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024EA8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024EAC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024EB0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024EB4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024EB8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024EBC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024EC0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024EC4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024EC8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024ECC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024ED0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024ED4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024ED8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024EDC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024EE0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024EE4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024EE8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024EEC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024EF0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024EF4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024EF8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024EFC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024F00 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024F04 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024F08 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024F0C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024F10 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024F14 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024F18 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024F1C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024F20 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024F24 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024F28 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024F2C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024F30 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024F34 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024F38 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024F3C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024F40 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024F44 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024F48 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024F4C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024F50 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024F54 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024F58 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024F5C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024F5E 00                         SME_Lx_Kl_142:	dc.b 0	
00024F5F 04                         SME_Lx_Kl_143:	dc.b 4	
00024F60 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F65 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024F6A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024F6F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024F74 09                         SME_Lx_Kl_158:	dc.b 9	
00024F75 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F7A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F7F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F84 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F89 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F8E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F93 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024F98 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024F9D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024FA2 0A                         SME_Lx_Kl_186:	dc.b $A	
00024FA3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024FA8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024FAD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024FB2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024FB7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024FBC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FC1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024FC6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024FCB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024FD0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024FD5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024FD6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024FDB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FE0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024FE5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024FEA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024FEB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FF0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FF5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FFA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024FFB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025000 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025005 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002500A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002500B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025010 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025015 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002501A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002501F 02                         SME_Lx_Kl_203:	dc.b 2	
00025020 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025025 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002502A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002502B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025030 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025035 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002503A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002503B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025040 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025045 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002504A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002504B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025050 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025055 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002505A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002505B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025060 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025065 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002506A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002506F 03                         SME_Lx_Kl_253:	dc.b 3	
00025070 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025075 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002507A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002507F 07                         SME_Lx_Kl_263:	dc.b 7	
00025080 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025085 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002508A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002508F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025094 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025099 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002509E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000250A3 05                         SME_Lx_Kl_287:	dc.b 5	
000250A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000250A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000250AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000250B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000250B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000250BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000250BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000250C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000250C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000250C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000250CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000250D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000250D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000250D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000250DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000250E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000250E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000250ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000250EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000250F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000250F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000250F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000250FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025103 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025108 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025109 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002510E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025113 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025118 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002511D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025122 05                         SME_Lx_Kl_306:	dc.b 5	
00025123 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025128 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002512D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025132 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025137 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002513C 06                         SME_Lx_Kl_320:	dc.b 6	
0002513D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025142 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025147 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002514C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025151 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025156 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002515B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002515C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025161 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025166 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002516B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025170 03                         SME_Lx_Kl_354:	dc.b 3	
00025171 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025176 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002517B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025180 05                         SME_Lx_Kl_364:	dc.b 5	
00025181 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025186 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002518B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025190 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025195 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002519A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002519B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000251A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000251A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000251AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000251AF 03                         SME_Lx_Kl_393:	dc.b 3	
000251B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000251B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000251BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000251BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000251C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000251C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000251CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000251CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000251D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000251D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000251DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000251DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000251E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000251E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000251EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000251EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000251F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000251F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000251FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000251FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025204 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025205 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002520A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002520F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025214 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025219 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002521E 04                         SME_Lx_Kl_402:	dc.b 4	
0002521F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025224 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025229 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002522E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025233 02                         SME_Lx_Kl_417:	dc.b 2	
00025234 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025239 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002523E 03                         SME_Lx_Kl_422:	dc.b 3	
0002523F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025244 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025249 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002524E 03                         SME_Lx_Kl_432:	dc.b 3	
0002524F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025254 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025259 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002525E 06                         SME_Lx_Kl_442:	dc.b 6	
0002525F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025264 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025269 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002526E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025273 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025278 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002527D 06                         SME_Lx_Kl_461:	dc.b 6	
0002527E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025283 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025288 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002528D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025292 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025297 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002529C 04                         SME_Lx_Kl_480:	dc.b 4	
0002529D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000252A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000252A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000252AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000252B1 03                         SME_Lx_Kl_495:	dc.b 3	
000252B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000252B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000252BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000252C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000252C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000252C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000252CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000252D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000252D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000252DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000252DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000252E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000252E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000252EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000252F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000252F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000252F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000252FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025300 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025301 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025306 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002530B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025310 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025315 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002531A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002531B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025320 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025325 02                         SME_Lx_Kl_509:	dc.b 2	
00025326 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002532B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025330 02                         SME_Lx_Kl_514:	dc.b 2	
00025331 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025336 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002533B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002533C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025341 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025346 02                         SME_Lx_Kl_52A:	dc.b 2	
00025347 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002534C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025351 02                         SME_Lx_Kl_535:	dc.b 2	
00025352 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025357 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002535C 02                         SME_Lx_Kl_540:	dc.b 2	
0002535D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025362 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025367 02                         SME_Lx_Kl_54B:	dc.b 2	
00025368 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002536D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025372 04                         SME_Lx_Kl_556:	dc.b 4	
00025373 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025378 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002537D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025382 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025387 03                         SME_Lx_Kl_56B:	dc.b 3	
00025388 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002538D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025392 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025397 03                         SME_Lx_Kl_57B:	dc.b 3	
00025398 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002539D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000253A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000253B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000253CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000253DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000253ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000253F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000253FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025402 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025407 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025408 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002540D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025412 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025413 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025418 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002541D 02                         SME_Lx_Kl_601:	dc.b 2	
0002541E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025423 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025428 02                         SME_Lx_Kl_60C:	dc.b 2	
00025429 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002542E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025433 02                         SME_Lx_Kl_617:	dc.b 2	
00025434 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025439 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002543E 02                         SME_Lx_Kl_622:	dc.b 2	
0002543F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025444 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025449 02                         SME_Lx_Kl_62D:	dc.b 2	
0002544A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002544F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025454 04                         SME_Lx_Kl_638:	dc.b 4	
00025455 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002545A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002545F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025464 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025469 03                         SME_Lx_Kl_64D:	dc.b 3	
0002546A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002546F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025474 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025479 02                         SME_Lx_Kl_65D:	dc.b 2	
0002547A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002547F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025484 03                         SME_Lx_Kl_668:	dc.b 3	
00025485 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002548A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002548F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025494 04                         SME_Lx_Kl_678:	dc.b 4	
00025495 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002549A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002549F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000254A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000254A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000254AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000254AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000254B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000254BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000254BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000254C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000254C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000254CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000254CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000254D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000254E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000254F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025504 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025509 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002550E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025513 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025518 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002551D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025522 09                         SME_Lx_Kl_706:	dc.b 9	
00025523 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025528 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002552D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025532 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025537 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002553C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025541 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025546 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002554B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025550 03                         SME_Lx_Kl_734:	dc.b 3	
00025551 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025556 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002555B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025560 03                         SME_Lx_Kl_744:	dc.b 3	
00025561 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025566 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002556B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025570 03                         SME_Lx_Kl_754:	dc.b 3	
00025571 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025576 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002557B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025580 05                         SME_Lx_Kl_764:	dc.b 5	
00025581 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025586 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002558B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025590 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025595 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002559A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002559B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000255A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000255A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000255AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000255AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000255B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000255B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000255BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000255BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000255C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000255C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000255CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000255D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000255DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000255DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000255E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000255EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000255F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000255F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000255FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025603 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025604 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025609 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002560E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025613 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025618 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025619 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002561E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025623 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025628 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002562D 04                         SME_Lx_Kl_811:	dc.b 4	
0002562E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025633 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025638 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002563D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025642 01                         SME_Lx_Kl_826:	dc.b 1	
00025643 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025648 01                         SME_Lx_Kl_82C:	dc.b 1	
00025649 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002564E 01                         SME_Lx_Kl_832:	dc.b 1	
0002564F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025654 01                         SME_Lx_Kl_838:	dc.b 1	
00025655 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002565A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002565B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025660 01                         SME_Lx_Kl_844:	dc.b 1	
00025661 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025666 01                         SME_Lx_Kl_84A:	dc.b 1	
00025667 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002566C 03                         SME_Lx_Kl_850:	dc.b 3	
0002566D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025672 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025677 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002567C 01                         SME_Lx_Kl_860:	dc.b 1	
0002567D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025682 02                         SME_Lx_Kl_866:	dc.b 2	
00025683 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025688 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002568D 01                         SME_Lx_Kl_871:	dc.b 1	
0002568E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025693 02                         SME_Lx_Kl_877:	dc.b 2	
00025694 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025699 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002569E 01                         SME_Lx_Kl_882:	dc.b 1	
0002569F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000256A4 04                         SME_Lx_Kl_888:	dc.b 4	
000256A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000256AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000256AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000256B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000256BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000256BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000256C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000256C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000256CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000256D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000256D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000256DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000256DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000256E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000256E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000256ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000256F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000256F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000256FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025702 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025707 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025708 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002570D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025712 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025713 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025718 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002571D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025722 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025727 04                         SME_Lx_Kl_90B:	dc.b 4	
00025728 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002572D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025732 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025737 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002573C 04                         SME_Lx_Kl_920:	dc.b 4	
0002573D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025742 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025747 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002574C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025751 09                         SME_Lx_Kl_935:	dc.b 9	
00025752 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025757 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002575C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025761 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025766 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002576B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025770 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025775 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002577A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002577F 03                         SME_Lx_Kl_963:	dc.b 3	
00025780 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025785 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002578A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002578F 03                         SME_Lx_Kl_973:	dc.b 3	
00025790 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025795 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002579A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002579F 02                         SME_Lx_Kl_983:	dc.b 2	
000257A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000257A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000257AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000257AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000257AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000257CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000257D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000257D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000257F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000257F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025803 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025808 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
0002580D 03                         SME_Lx_Kl_9F1:	dc.b 3	
0002580E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025813 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025818 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
0002581D 03                         SME_Lx_Kl_A01:	dc.b 3	
0002581E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025823 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025828 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
0002582D 03                         SME_Lx_Kl_A11:	dc.b 3	
0002582E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025833 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025838 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002583D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002583E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025843 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025848 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025849 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002584E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025853 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025858 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025859 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002585E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025863 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025868 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025869 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002586E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025873 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025878 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025879 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002587E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025883 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025888 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025889 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002588E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025893 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025898 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002589D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002589E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
000258A3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
000258A8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
000258AD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
000258B2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
000258B7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
000258BC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
000258C1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000258C6 04                         SME_Lx_Kl_AAA:	dc.b 4	
000258C7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258CC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258D1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258D6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258DB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000258DC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258E1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258E6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258EB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258F0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000258F1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258F6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000258FB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025900 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025905 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
0002590A 05                         SME_Lx_Kl_AEE:	dc.b 5	
0002590B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025910 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025915 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
0002591A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
0002591F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025924 02                         SME_Lx_Kl_B08:	dc.b 2	
00025925 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
0002592A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002592F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025930 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025935 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002593A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002593F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025944 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025949 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002594A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002594F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025954 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025959 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002595A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002595F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025964 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025969 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002596E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025973 02                         SME_Lx_Kl_B57:	dc.b 2	
00025974 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025979 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002597E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002597F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025984 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025989 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002598E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002598F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025994 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025999 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002599E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002599F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
000259A4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
000259A9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
000259AE 02                         SME_Lx_Kl_B92:	dc.b 2	
000259AF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000259B4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
000259B9 03                         SME_Lx_Kl_B9D:	dc.b 3	
000259BA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
000259BF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
000259C4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000259C9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
000259CA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000259CF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259D4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000259D9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000259DE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000259E3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000259E8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000259ED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000259F2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000259F7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000259FC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025A01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025A02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025A07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025A0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025A11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025A16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025A1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025A20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025A21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025A26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025A2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025A30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025A31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025A36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025A3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025A40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025A45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025A4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025A4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025A54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025A55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025A5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025A5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025A60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025A6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025A74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025A75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025A7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025A85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025A8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025A94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025A95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025A9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025A9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025AA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025AA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025AAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025AB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025AB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025ABB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025ABC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025AC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025AC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025ACC                            		even
00025ACC                            		even
00025ACC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025ACC                            ; --------------------------------------------------------------------------------
00025ACC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025ACC                            
00025ACC                            SME_vJmm3:	
00025ACC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025AD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025AD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025AD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025ADC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025AE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025AE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025AE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025AEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025AF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025AF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025AF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025AFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025B00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025B04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025B08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025B0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025B10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025B14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025B18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025B1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025B20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025B24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025B28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025B2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025B30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025B34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025B38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025B3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025B40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025B44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025B48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025B4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025B50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025B54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025B58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025B5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025B60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025B64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025B68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025B6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025B70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025B74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025B78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025B7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025B80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025B84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025B88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025B8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025B90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025B94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025B98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025B9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025BA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025BA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025BA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025BAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025BB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025BB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025BB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025BBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025BC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025BC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025BC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025BCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025BD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025BD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025BD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025BDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025BE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025BE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025BE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025BEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025BF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025BF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025BF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025BFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025C00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025C04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025C08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025C0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025C0E 00                         SME_vJmm3_142:	dc.b 0	
00025C0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025C18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025C2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025C40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025C49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025C50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025C57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025C60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025C65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025C6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025C73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025C7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025C83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025C8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025C99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025CA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025CAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025CB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025CBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025CC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025CC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025CD2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025CDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025CEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025CF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025CFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025D05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025D0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025D15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025D20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025D29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025D2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025D33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025D3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025D47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025D4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025D53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025D5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025D67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025D74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025D7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025D84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025D8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025D98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025D9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025DAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025DAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025DB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025DB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025DBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025DC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025DC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025DCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025DD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025DDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025DE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025DE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025DF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025DF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025E00 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025E07 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025E0E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025E13 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025E18 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025E1D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025E22 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025E27 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025E2C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025E31 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025E36 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025E3F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025E46 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025E4B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025E52 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025E5B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025E62 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025E67 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025E6E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025E75 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025E7C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025E8F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025EA2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025EA9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025EB0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025EB7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025EC2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025EC9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025ED0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025EDB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025EE6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025EEF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025EF8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025F01 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025F0A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025F0D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025F10 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025F13 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025F16 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025F19 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025F1C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025F1F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025F26 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025F29 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025F2E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025F31 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025F36 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025F39 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025F42 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025F51 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025F5C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025F63 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025F68 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025F71 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025F7A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025F83 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025F96 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025F9D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025FA4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025FA9 00                         SME_vJmm3_4DD:	dc.b 0	
00025FAA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025FBB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025FCA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025FD3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FDA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FE1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FE8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025FEB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FF2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FF9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026000 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026007 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026010 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026021 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002602A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026033 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002603E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026049 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002604E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026059 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026060 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002606B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026070 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026077 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002607E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026085 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002608A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026091 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000260A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000260B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000260BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000260CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000260D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000260D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000260E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000260E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000260F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000260F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000260F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000260F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000260FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026100 00                         		even
00026100 00                         		even
00026100                            
00026100                            ; ---------------------------------------------------------------------------
00026100                            ; Uncompressed graphics	- Sonic
00026100                            ; ---------------------------------------------------------------------------
00026100                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C700                            		even
0003C700                            ; ---------------------------------------------------------------------------
0003C700                            ; Compressed graphics - various
0003C700                            ; ---------------------------------------------------------------------------
0003C700                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CA60                            		even
0003CA60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CDC0                            		even
0003CDC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D120                            		even
0003D120                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D480                            		even
0003D480                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D900                            		even
0003D900                            
0003D900                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D900                            ; ---------------------------------------------------------------------------
0003D900                            ; Sprite mappings - walls of the special stage
0003D900                            ; ---------------------------------------------------------------------------
0003D900                            Map_SSWalls_internal:
0003D900 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D902 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D904 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D906 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D908 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D90A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D90C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D90E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D910 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D912 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D914 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D916 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D918 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D91A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D91C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D91E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D920 01                         byte_2C584:	dc.b 1
0003D921 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D926 01                         byte_2C58A:	dc.b 1
0003D927 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D92C 01                         byte_2C590:	dc.b 1
0003D92D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D932 01                         byte_2C596:	dc.b 1
0003D933 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D938 01                         byte_2C59C:	dc.b 1
0003D939 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D93E 01                         byte_2C5A2:	dc.b 1
0003D93F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D944 01                         byte_2C5A8:	dc.b 1
0003D945 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D94A 01                         byte_2C5AE:	dc.b 1
0003D94B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D950 01                         byte_2C5B4:	dc.b 1
0003D951 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D956 01                         byte_2C5BA:	dc.b 1
0003D957 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D95C 01                         byte_2C5C0:	dc.b 1
0003D95D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D962 01                         byte_2C5C6:	dc.b 1
0003D963 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D968 01                         byte_2C5CC:	dc.b 1
0003D969 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D96E 01                         byte_2C5D2:	dc.b 1
0003D96F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D974 01                         byte_2C5D8:	dc.b 1
0003D975 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D97A 01                         byte_2C5DE:	dc.b 1
0003D97B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D980                            		even
0003D980                            		even
0003D980                            
0003D980                            ; ---------------------------------------------------------------------------
0003D980                            ; Compressed graphics - special stage
0003D980                            ; ---------------------------------------------------------------------------
0003D980                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E2B8                            		even
0003E2B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E3EC                            		even
0003E3EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F07C                            		even
0003F07C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F37C                            		even
0003F37C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F870                            		even
0003F870                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F95E                            		even
0003F95E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FA2E                            		even
0003FA2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FB24                            		even
0003FB24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FB82                            		even
0003FB82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FC14                            		even
0003FC14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FCD6                            		even
0003FCD6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FDA4                            		even
0003FDA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003FE70                            		even
0003FE70                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003FF38                            		even
0003FF38                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040002                            		even
00040002                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000400D2                            		even
000400D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000402C6                            		even
000402C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004042E                            		even
0004042E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000404DE                            		even
000404DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000405B8                            		even
000405B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004063C                            		even
0004063C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000407BA                            		even
000407BA                            ; ---------------------------------------------------------------------------
000407BA                            ; Compressed graphics - GHZ stuff
000407BA                            ; ---------------------------------------------------------------------------
000407BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
0004081C                            		even
0004081C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040936                            		even
00040936                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040A54                            		even
00040A54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040A9C                            		even
00040A9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040C3A                            		even
00040C3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040CB6                            		even
00040CB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00040ECA                            		even
00040ECA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040FF6                            		even
00040FF6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004114A                            		even
0004114A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000411FA                            		even
000411FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004125A                            		even
0004125A                            ; ---------------------------------------------------------------------------
0004125A                            ; Compressed graphics - LZ stuff
0004125A                            ; ---------------------------------------------------------------------------
0004125A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041332                            		even
00041332                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041B26                            		even
00041B26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041CB8 00                         		even
00041CB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041E22                            		even
00041E22                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042462 00                         		even
00042462                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042504 00                         		even
00042504                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042588                            		even
00042588                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000426EE 00                         		even
000426EE                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
00042774 00                         		even
00042774                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000428E2                            		even
000428E2                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042DC4                            		even
00042DC4                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00042F34                            		even
00042F34                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000431EC                            		even
000431EC                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043332                            		even
00043332                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
0004345C                            		even
0004345C                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000435D8 00                         		even
000435D8                            ; ---------------------------------------------------------------------------
000435D8                            ; Compressed graphics - MZ stuff
000435D8                            ; ---------------------------------------------------------------------------
000435D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043866                            		even
00043866                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043924                            		even
00043924                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000439FC                            		even
000439FC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043A50                            		even
00043A50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043D6E 00                         		even
00043D6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044684                            		even
00044684                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000447DC                            		even
000447DC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044864                            		even
00044864                            ; ---------------------------------------------------------------------------
00044864                            ; Compressed graphics - SLZ stuff
00044864                            ; ---------------------------------------------------------------------------
00044864                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044AA0                            		even
00044AA0                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044BE6                            		even
00044BE6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00044E2A                            		even
00044E2A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044EC6 00                         		even
00044EC6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044FA8                            		even
00044FA8                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
0004518A                            		even
0004518A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00045296                            		even
00045296                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0004533A                            		even
0004533A                            ; ---------------------------------------------------------------------------
0004533A                            ; Compressed graphics - SYZ stuff
0004533A                            ; ---------------------------------------------------------------------------
0004533A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000454CA                            		even
000454CA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004552C                            		even
0004552C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000455FC 00                         		even
000455FC                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0004588A                            		even
0004588A                            ; ---------------------------------------------------------------------------
0004588A                            ; Compressed graphics - SBZ stuff
0004588A                            ; ---------------------------------------------------------------------------
0004588A                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000458DE                            		even
000458DE                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045B7A                            		even
00045B7A                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045D6A                            		even
00045D6A                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00045F08                            		even
00045F08                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046238                            		even
00046238                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046416                            		even
00046416                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0004646E                            		even
0004646E                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
00046620 00                         		even
00046620                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
000467F0 00                         		even
000467F0                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0004697E                            		even
0004697E                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046A18                            		even
00046A18                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046A70                            		even
00046A70                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046B6C                            		even
00046B6C                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046C82                            		even
00046C82                            ; ---------------------------------------------------------------------------
00046C82                            ; Compressed graphics - enemies
00046C82                            ; ---------------------------------------------------------------------------
00046C82                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
000470CA 00                         		even
000470CA                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
000475BA 00                         		even
000475BA                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0004789E 00                         		even
0004789E                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047C12 00                         		even
00047C12                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047DFA                            		even
00047DFA                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048528 00                         		even
00048528                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
000487B0 00                         		even
000487B0                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048A4C 00                         		even
00048A4C                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00049020                            		even
00049020                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
000492B2                            		even
000492B2                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
000498FC 00                         		even
000498FC                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049D38                            		even
00049D38                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A046 00                         		even
0004A046                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A2A6                            		even
0004A2A6                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A5A4                            		even
0004A5A4                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A7D0 00                         		even
0004A7D0                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A95E                            		even
0004A95E                            ; ---------------------------------------------------------------------------
0004A95E                            ; Compressed graphics - various
0004A95E                            ; ---------------------------------------------------------------------------
0004A95E                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004AFAC 00                         		even
0004AFAC                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B124 00                         		even
0004B124                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B248                            		even
0004B248                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B39C 00                         		even
0004B39C                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B846                            		even
0004B846                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004BEBA                            		even
0004BEBA                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004BF54 00                         		even
0004BF54                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C0E6                            		even
0004C0E6                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C204 00                         		even
0004C204                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C2F0                            		even
0004C2F0                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C868 00                         		even
0004C868                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C952                            		even
0004C952                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CAC6                            		even
0004CAC6                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CE4E 00                         		even
0004CE4E                            ; ---------------------------------------------------------------------------
0004CE4E                            ; Compressed graphics - continue screen
0004CE4E                            ; ---------------------------------------------------------------------------
0004CE4E                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D122 00                         		even
0004D122                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D3BC 00                         		even
0004D3BC                            ; ---------------------------------------------------------------------------
0004D3BC                            ; Compressed graphics - animals
0004D3BC                            ; ---------------------------------------------------------------------------
0004D3BC                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D514                            		even
0004D514                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D670                            		even
0004D670                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D7EC                            		even
0004D7EC                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D908                            		even
0004D908                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DA82                            		even
0004DA82                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DBBC                            		even
0004DBBC                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DD18                            		even
0004DD18                            ; ---------------------------------------------------------------------------
0004DD18                            ; Compressed graphics - primary patterns and block mappings
0004DD18                            ; ---------------------------------------------------------------------------
0004DD18                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E71A                            		even
0004E71A                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004FFE8                            		even
0004FFE8                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005157C                            		even
0005157C                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
0005395C                            		even
0005395C                            Blk16_TS:	incbin	"map16\TS.bin"
00053BE0                            		even
00053BE0                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054D1E                            		even
00054D1E                            Blk256_TS:	incbin	"map256\TS.bin"
000558CC                            		even
000558CC                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056B48                            		even
00056B48                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A01A                            		even
0005A01A                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D4D8                            		even
0005D4D8                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DCC6                            		even
0005DCC6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
0006075E                            		even
0006075E                            		incbin	"map256\MZ (JP1).bin"
0006276C                            		even
0006276C                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062DEE                            		even
00062DEE                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066858                            		even
00066858                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068C62                            		even
00068C62                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
000697E8                            		even
000697E8                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CBD8                            		even
0006CBD8                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DF94                            		even
0006DF94                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EB8E                            		even
0006EB8E                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000713D0                            		even
000713D0                            		incbin	"map256\SBZ (JP1).bin"
00071F5C                            		even
00071F5C                            ; ---------------------------------------------------------------------------
00071F5C                            ; Compressed graphics - bosses and ending sequence
00071F5C                            ; ---------------------------------------------------------------------------
00071F5C                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000727D8 00                         		even
000727D8                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072AC2                            		even
00072AC2                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00073346                            		even
00073346                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073B84 00                         		even
00073B84                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074352 00                         		even
00074352                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
0007487A                            		even
0007487A                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
0007499A                            		even
0007499A                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074BA2 00                         		even
00074BA2                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075D80                            		even
00075D80                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000766C4                            		even
000766C4                            		even
000766C4                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076C54                            		even
00076C54                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076EDC                            		even
00076EDC                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
000774DA                            		even
000774DA                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00077762                            		even
00077762                            
00077762 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
000777A2                            ; ---------------------------------------------------------------------------
000777A2                            ; Collision data
000777A2                            ; ---------------------------------------------------------------------------
000777A2                            AngleMap:	incbin	"collide\Angle Map.bin"
000778A2                            		even
000778A2                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
000788A2                            		even
000788A2                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
000798A2                            		even
000798A2                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079A60 00                         		even
00079A60                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079D1E                            		even
00079D1E                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079E98 00                         		even
00079E98                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A08C                            		even
0007A08C                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A278 00                         		even
0007A278                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A448 00                         		even
0007A448                            ; ---------------------------------------------------------------------------
0007A448                            ; Special Stage layouts
0007A448                            ; ---------------------------------------------------------------------------
0007A448                            SS_1:		incbin	"sslayout\1.bin"
0007A6C2                            		even
0007A6C2                            SS_2:		incbin	"sslayout\2.bin"
0007AAD4                            		even
0007AAD4                            SS_3:		incbin	"sslayout\3.bin"
0007AE30                            		even
0007AE30                            SS_4:		incbin	"sslayout\4.bin"
0007B30A                            		even
0007B30A                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B7BA                            			even
0007B7BA                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BAAC                            		even
0007BAAC                            ; ---------------------------------------------------------------------------
0007BAAC                            ; Animated uncompressed graphics
0007BAAC                            ; ---------------------------------------------------------------------------
0007BAAC                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BCAC                            		even
0007BCAC                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C0AC                            		even
0007C0AC                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C52C                            		even
0007C52C                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C82C                            		even
0007C82C                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CE2C                            		even
0007CE2C                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D12C                            		even
0007D12C                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DBAC                            		even
0007DBAC                            
0007DBAC                            ; ---------------------------------------------------------------------------
0007DBAC                            ; Level	layout index
0007DBAC                            ; ---------------------------------------------------------------------------
0007DBAC                            Level_Index:
0007DBAC                            		; GHZ
0007DBAC 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DBB2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DBB8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DBBE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DBC4                            		; LZ
0007DBC4 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DBCA 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DBD0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DBD6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DBDC                            		; MZ
0007DBDC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DBE2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DBE8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DBEE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DBF4                            		; SLZ
0007DBF4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DBFA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DC00 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DC06 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DC0C                            		; SYZ
0007DC0C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DC12 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DC18 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DC1E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DC24                            		; SBZ
0007DC24 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DC2A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DC30 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DC36 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DC3C                            		; Ending
0007DC3C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DC42 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DC48 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DC4E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DC54                            
0007DC54                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DE86                            		even
0007DE86 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DE8A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DFAC                            		even
0007DFAC 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DFB0                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E0D2                            		even
0007E0D2                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E114                            		even
0007E114 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E118 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E11C                            
0007E11C                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E1DE                            		even
0007E1DE                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E2E0                            		even
0007E2E0 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E2E4                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E37E                            		even
0007E37E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E382                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E49C                            		even
0007E49C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E4A0                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E55A                            		even
0007E55A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E55E                            
0007E55E                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E650                            		even
0007E650                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E772                            		even
0007E772                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E864                            		even
0007E864                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E986                            		even
0007E986 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E98A                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EA24                            		even
0007EA24                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EB46                            		even
0007EB46 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EB4A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EB4E                            
0007EB4E                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EC60                            		even
0007EC60                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007ECDA                            		even
0007ECDA                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EDCA                            		even
0007EDCA                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007EEE4                            		even
0007EEE4 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007EEE8                            
0007EEE8                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007EFEC                            		even
0007EFEC                            		incbin	"levels\syzbg (JP1).bin"
0007F026                            		even
0007F026 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F02A                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F12E                            		even
0007F12E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F132                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F28C 00                         		even
0007F28C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F290 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F294                            
0007F294                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F3B6                            		even
0007F3B6                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F3F4                            		even
0007F3F4                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F536                            		even
0007F536                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F6A0                            		even
0007F6A0 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F6A4 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F6A8                            Level_End:	incbin	"levels\ending.bin"
0007F6D8 00                         		even
0007F6D8 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F6DC                            
0007F6DC                            
0007F6DC                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0008031C                            		even
0008031C                            
00080400                            
00080400                            ; ---------------------------------------------------------------------------
00080400                            ; Sprite locations index
00080400                            ; ---------------------------------------------------------------------------
00080400                            ObjPos_Index:
00080400                            		; GHZ
00080400 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080404 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080408 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008040C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080410                            		; LZ
00080410 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080414 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080418 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008041C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080420                            		; MZ
00080420 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080424 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080428 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008042C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080430                            		; SLZ
00080430 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080434 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080438 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008043C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080440                            		; SYZ
00080440 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080444 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080448 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008044C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080450                            		; SBZ
00080450 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080454 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080458 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008045C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080460                            		; Ending
00080460 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080464 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080468 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008046C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080470                            		; --- Put extra object data here. ---
00080470                            ObjPosLZPlatform_Index:
00080470 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080474 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080478 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008047C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080480                            ObjPosSBZPlatform_Index:
00080480 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080484 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080488 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008048C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080490 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080496                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080AF6                            		even
00080AF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080F46                            		even
00080F46                            		incbin	"objpos\ghz3 (JP1).bin"
000812C4                            		even
000812C4                            		incbin	"objpos\lz1 (JP1).bin"
000812FA                            		even
000812FA                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
0008163C                            		even
0008163C                            		incbin	"objpos\lz3 (JP1).bin"
00081C00                            		even
00081C00                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082140                            		even
00082140                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00082172                            		even
00082172                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
000821A4                            		even
000821A4                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000821D6                            		even
000821D6                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
00082208                            		even
00082208                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082252                            		even
00082252                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082290                            		even
00082290                            		incbin	"objpos\mz1 (JP1).bin"
00082872                            		even
00082872                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082C56                            		even
00082C56                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082EAE                            		even
00082EAE                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000833E2                            		even
000833E2                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083850                            		even
00083850                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083E32                            		even
00083E32                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083E92                            		even
00083E92                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083EBC                            		even
00083EBC                            		incbin	"objpos\syz3 (JP1).bin"
00083EEC                            		even
00083EEC                            		incbin	"objpos\sbz1 (JP1).bin"
00083F34                            		even
00083F34                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00083F5E                            		even
00083F5E                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083F9A                            		even
00083F9A                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083FCC                            		even
00083FCC                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083FFE                            		even
00083FFE                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00084030                            		even
00084030                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00084062                            		even
00084062                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00084094                            		even
00084094                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
000840CC                            		even
000840CC                            ObjPos_End:	incbin	"objpos\ending.bin"
00084228                            		even
00084228 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008422E                            
0008422E                            		dcb.b $63C,$FF
0008486A                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
0008486A                            
0008486A                            SoundDriver:	include "s1.sounddriver.asm"
0008486A                            ; ---------------------------------------------------------------------------
0008486A                            ; Modified (early?) SMPS 68k Type 1b
0008486A                            ; ---------------------------------------------------------------------------
0008486A                            ; Go_SoundTypes:
0008486A 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
0008486E                            ; Go_SoundD0:
0008486E 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084872 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084876 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0008487A                            ; off_719A0:
0008487A 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
0008487E 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084882                            ; ---------------------------------------------------------------------------
00084882                            ; PSG instruments used in music
00084882                            ; ---------------------------------------------------------------------------
00084882                            PSG_Index:
00084882 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
0008488E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008489A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000848A6                            PSG1:		incbin	"sound/psg/psg1.bin"
000848BD                            PSG2:		incbin	"sound/psg/psg2.bin"
000848C4                            PSG3:		incbin	"sound/psg/psg3.bin"
000848D5                            PSG4:		incbin	"sound/psg/psg4.bin"
000848E0                            PSG6:		incbin	"sound/psg/psg6.bin"
000848EF                            PSG5:		incbin	"sound/psg/psg5.bin"
00084919                            PSG7:		incbin	"sound/psg/psg7.bin"
00084935                            PSG8:		incbin	"sound/psg/psg8.bin"
0008495D                            PSG9:		incbin	"sound/psg/psg9.bin"
0008496E                            ; ---------------------------------------------------------------------------
0008496E                            ; New tempos for songs during speed shoes
0008496E                            ; ---------------------------------------------------------------------------
0008496E                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
0008496E                            ; tempos while speed shoes are active. If you don't want that, you should add
0008496E                            ; their "correct" sped-up main tempos to the list.
0008496E                            ; byte_71A94:
0008496E                            SpeedUpIndex:
0008496E 07                         		dc.b 7		; GHZ
0008496F 72                         		dc.b $72	; LZ
00084970 73                         		dc.b $73	; MZ
00084971 26                         		dc.b $26	; SLZ
00084972 15                         		dc.b $15	; SYZ
00084973 08                         		dc.b 8		; SBZ
00084974 FF                         		dc.b $FF	; Invincibility
00084975 05                         		dc.b 5		; Extra Life
00084976                            		;dc.b ?		; Special Stage
00084976                            		;dc.b ?		; Title Screen
00084976                            		;dc.b ?		; Ending
00084976                            		;dc.b ?		; Boss
00084976                            		;dc.b ?		; FZ
00084976                            		;dc.b ?		; Sonic Got Through
00084976                            		;dc.b ?		; Game Over
00084976                            		;dc.b ?		; Continue Screen
00084976                            		;dc.b ?		; Credits
00084976                            		;dc.b ?		; Drowning
00084976                            		;dc.b ?		; Get Emerald
00084976                            
00084976                            ; ---------------------------------------------------------------------------
00084976                            ; Music	Pointers
00084976                            ; ---------------------------------------------------------------------------
00084976                            MusicIndex:
00084976 0000 0000                  ptr_mus81:	dc.l Music81
0008497A 0000 0000                  ptr_mus82:	dc.l Music82
0008497E 0000 0000                  ptr_mus83:	dc.l Music83
00084982 0000 0000                  ptr_mus84:	dc.l Music84
00084986 0000 0000                  ptr_mus85:	dc.l Music85
0008498A 0000 0000                  ptr_mus86:	dc.l Music86
0008498E 0000 0000                  ptr_mus87:	dc.l Music87
00084992 0000 0000                  ptr_mus88:	dc.l Music88
00084996 0000 0000                  ptr_mus89:	dc.l Music89
0008499A 0000 0000                  ptr_mus8A:	dc.l Music8A
0008499E 0000 0000                  ptr_mus8B:	dc.l Music8B
000849A2 0000 0000                  ptr_mus8C:	dc.l Music8C
000849A6 0000 0000                  ptr_mus8D:	dc.l Music8D
000849AA 0000 0000                  ptr_mus8E:	dc.l Music8E
000849AE 0000 0000                  ptr_mus8F:	dc.l Music8F
000849B2 0000 0000                  ptr_mus90:	dc.l Music90
000849B6 0000 0000                  ptr_mus91:	dc.l Music91
000849BA 0000 0000                  ptr_mus92:	dc.l Music92
000849BE 0000 0000                  ptr_mus93:	dc.l Music93
000849C2 0000 0000                  ptr_mus94:	dc.l Music94
000849C6 0000 0000                  ptr_mus95:	dc.l Music95
000849CA 0000 0000                  ptr_mus96:	dc.l Music96
000849CE 0000 0000                  ptr_mus97:	dc.l Music97
000849D2 0000 0000                  ptr_mus98:	dc.l Music98
000849D6 0000 0000                  ptr_mus99:	dc.l Music99
000849DA                            ptr_musend
000849DA                            ; ---------------------------------------------------------------------------
000849DA                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000849DA                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000849DA                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000849DA                            ; any music or SFX can override it (as long as it can override whatever was
000849DA                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000849DA                            ; will only override special SFX and music will only override music.
000849DA                            ; ---------------------------------------------------------------------------
000849DA                            ; SoundTypes:
000849DA                            SoundPriorities:
000849DA 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000849E9 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000849F9 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084A09 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084A19 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084A29 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084A39 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084A3E                            
00084A3E                            ; ---------------------------------------------------------------------------
00084A3E                            ; Subroutine to update music more than once per frame
00084A3E                            ; (Called by horizontal & vert. interrupts)
00084A3E                            ; ---------------------------------------------------------------------------
00084A3E                            
00084A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A3E                            
00084A3E                            ; sub_71B4C:
00084A3E                            UpdateMusic:
00084A3E 33FC 0100 00A1 1100        		stopZ80
00084A46 4E71                       		nop	
00084A48 4E71                       		nop	
00084A4A 4E71                       		nop	
00084A4C                            ; loc_71B5A:
00084A4C                            @updateloop:
00084A4C 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084A54 66F6                       		bne.s	@updateloop			; If so, wait
00084A56                            
00084A56 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084A5E 6700                       		beq.s	@driverinput			; Branch if yes
00084A60 33FC 0000 00A1 1100        		startZ80
00084A68 4E71                       		nop	
00084A6A 4E71                       		nop	
00084A6C 4E71                       		nop	
00084A6E 4E71                       		nop	
00084A70 4E71                       		nop	
00084A72 60CA                       		bra.s	UpdateMusic
00084A74                            ; ===========================================================================
00084A74                            ; loc_71B82:
00084A74                            @driverinput:
00084A74 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084A7A 422E 000E                  		clr.b	f_voice_selector(a6)
00084A7E 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00084A82 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084A86 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084A8A 6600                       		bne.s	@skipdelay
00084A8C 4EBA 0000                  		jsr	TempoWait(pc)
00084A90                            ; loc_71B9E:
00084A90                            @skipdelay:
00084A90 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084A94 6700                       		beq.s	@skipfadeout
00084A96 4EBA 0000                  		jsr	DoFadeOut(pc)
00084A9A                            ; loc_71BA8:
00084A9A                            @skipfadeout:
00084A9A 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084A9E 6700                       		beq.s	@skipfadein
00084AA0 4EBA 0000                  		jsr	DoFadeIn(pc)
00084AA4                            ; loc_71BB2:
00084AA4                            @skipfadein:
00084AA4                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084AA4 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084AA8 6700                       		beq.s	@nosndinput		; if not, branch
00084AAA 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084AAE                            ; loc_71BBC:
00084AAE                            @nosndinput:
00084AAE 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084AB4 6700                       		beq.s	@nonewsound		; If yes, branch
00084AB6 4EBA 0000                  		jsr	PlaySoundID(pc)
00084ABA                            ; loc_71BC8:
00084ABA                            @nonewsound:
00084ABA 4A38 C901                  		tst.b	($FFFFC901).w
00084ABE 6700                       		beq.s	@cont
00084AC0 5338 C901                  		subq.b	#1,($FFFFC901).w
00084AC4                            		
00084AC4                            @cont:
00084AC4 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084AC8 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084ACA 6A00                       		bpl.s	@dacdone		; Branch if not
00084ACC 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084AD0                            ; loc_71BD4:
00084AD0                            @dacdone:
00084AD0 422E 0008                  		clr.b	f_updating_dac(a6)
00084AD4 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084AD6                            ; loc_71BDA:
00084AD6                            @bgmfmloop:
00084AD6 DAFC 0030                  		adda.w	#TrackSz,a5
00084ADA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084ADC 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084ADE 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084AE2                            ; loc_71BE6:
00084AE2                            @bgmfmnext:
00084AE2 51CF FFF2                  		dbf	d7,@bgmfmloop
00084AE6                            
00084AE6 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084AE8                            ; loc_71BEC:
00084AE8                            @bgmpsgloop:
00084AE8 DAFC 0030                  		adda.w	#TrackSz,a5
00084AEC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084AEE 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084AF0 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084AF4                            ; loc_71BF8:
00084AF4                            @bgmpsgnext:
00084AF4 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084AF8                            
00084AF8 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084AFE 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084B00                            ; loc_71C04:
00084B00                            @sfxfmloop:
00084B00 DAFC 0030                  		adda.w	#TrackSz,a5
00084B04 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084B06 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084B08 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084B0C                            ; loc_71C10:
00084B0C                            @sfxfmnext:
00084B0C 51CF FFF2                  		dbf	d7,@sfxfmloop
00084B10                            
00084B10 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084B12                            ; loc_71C16:
00084B12                            @sfxpsgloop:
00084B12 DAFC 0030                  		adda.w	#TrackSz,a5
00084B16 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084B18 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084B1A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084B1E                            ; loc_71C22:
00084B1E                            @sfxpsgnext:
00084B1E 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084B22                            		
00084B22 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084B28 DAFC 0030                  		adda.w	#TrackSz,a5
00084B2C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084B2E 6A00                       		bpl.s	@specfmdone		; Branch if not
00084B30 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084B34                            ; loc_71C38:
00084B34                            @specfmdone:
00084B34 DAFC 0030                  		adda.w	#TrackSz,a5
00084B38 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084B3A 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084B3C 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084B40                            ; loc_71C44:
00084B40                            DoStartZ80:
00084B40 33FC 0000 00A1 1100        		startZ80
00084B48 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084B4E 6700                       		beq.s @end ; if not, branch
00084B50 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084B56 6600                       		bne.s @end ; if not, branch
00084B58 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084B5E 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084B62                            
00084B62                            	@end:
00084B62 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084B66 4E75                       		rts
00084B68                            ; End of function UpdateMusic
00084B68                            
00084B68                            
00084B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B68                            
00084B68                            ; sub_71C4E: UpdateDAC:
00084B68                            DACUpdateTrack:
00084B68 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084B6C 6600                       		bne.s	@locret				; Return if not
00084B6E 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084B74                            ;DACDoNext:
00084B74 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084B78                            ; loc_71C5E:
00084B78                            @sampleloop:
00084B78 7A00                       		moveq	#0,d5
00084B7A 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084B7C 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084B80 6500                       		blo.s	@notcoord	; Branch if not
00084B82 4EBA 0000                  		jsr	CoordFlag(pc)
00084B86 60F0                       		bra.s	@sampleloop
00084B88                            ; ===========================================================================
00084B88                            ; loc_71C6E:
00084B88                            @notcoord:
00084B88 4A05                       		tst.b	d5			; Is it a sample?
00084B8A 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084B8C 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084B90 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084B92 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084B94 534C                       		subq.w	#1,a4			; Put byte back
00084B96 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084B9C 6000                       		bra.s	@gotsampleduration
00084B9E                            ; ===========================================================================
00084B9E                            ; loc_71C84:
00084B9E                            @gotduration:
00084B9E 4EBA 0000                  		jsr	SetDuration(pc)
00084BA2                            ; loc_71C88:
00084BA2                            @gotsampleduration:
00084BA2 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084BA6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084BAA 6600                       		bne.s	@locret			; Return if yes
00084BAC 7000                       		moveq	#0,d0
00084BAE 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084BB2 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084BB6 6700                       		beq.s	@locret			; Return if yes
00084BB8 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084BBC 6600                       		bne.s	@timpani		; Various timpani
00084BBE 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084BC4                            ; locret_71CAA:
00084BC4                            @locret:
00084BC4 4E75                       		rts	
00084BC6                            ; ===========================================================================
00084BC6                            ; loc_71CAC:
00084BC6                            @timpani:
00084BC6 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084BCA 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084BCE                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084BCE                            		; use this value from then on.
00084BCE 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084BD4 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084BDC 4E75                       		rts	
00084BDE                            ; End of function DACUpdateTrack
00084BDE                            
00084BDE                            ; ===========================================================================
00084BDE                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084BDE                            ; Also, $8C-$8D are so slow you may want to skip them.
00084BDE                            ; byte_71CC4:
00084BDE 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084BE4                            
00084BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BE4                            
00084BE4                            ; sub_71CCA:
00084BE4                            FMUpdateTrack:
00084BE4 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084BE8 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084BEA 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084BEE 4EBA 0000                  		jsr	FMDoNext(pc)
00084BF2 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084BF6 6000 0000                  		bra.w	FMNoteOn
00084BFA                            ; ===========================================================================
00084BFA                            ; loc_71CE0:
00084BFA                            @notegoing:
00084BFA 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084BFE 4EBA 0000                  		jsr	DoModulation(pc)
00084C02 6000 0000                  		bra.w	FMUpdateFreq
00084C06                            ; End of function FMUpdateTrack
00084C06                            
00084C06                            
00084C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C06                            
00084C06                            ; sub_71CEC:
00084C06                            FMDoNext:
00084C06 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084C0A 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084C0E                            ; loc_71CF4:
00084C0E                            @noteloop:
00084C0E 7A00                       		moveq	#0,d5
00084C10 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084C12 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084C16 6500                       		blo.s	@gotnote	; Branch if not
00084C18 4EBA 0000                  		jsr	CoordFlag(pc)
00084C1C 60F0                       		bra.s	@noteloop
00084C1E                            ; ===========================================================================
00084C1E                            ; loc_71D04:
00084C1E                            @gotnote:
00084C1E 4EBA 0000                  		jsr	FMNoteOff(pc)
00084C22 4A05                       		tst.b	d5		; Is this a note?
00084C24 6A00                       		bpl.s	@gotduration	; Branch if not
00084C26 4EBA 0000                  		jsr	FMSetFreq(pc)
00084C2A 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084C2C 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084C2E 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084C30 6000 0000                  		bra.w	FinishTrackUpdate
00084C34                            ; ===========================================================================
00084C34                            ; loc_71D1A:
00084C34                            @gotduration:
00084C34 4EBA 0000                  		jsr	SetDuration(pc)
00084C38 6000 0000                  		bra.w	FinishTrackUpdate
00084C3C                            ; End of function FMDoNext
00084C3C                            
00084C3C                            
00084C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C3C                            
00084C3C                            ; sub_71D22:
00084C3C                            FMSetFreq:
00084C3C 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084C40 6700                       		beq.s	TrackSetRest
00084C42 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084C46 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084C4A E34D                       		lsl.w	#1,d5
00084C4C 41FA 0000                  		lea	FMFrequencies(pc),a0
00084C50 3C30 5000                  		move.w	(a0,d5.w),d6
00084C54 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084C58 4E75                       		rts	
00084C5A                            ; End of function FMSetFreq
00084C5A                            
00084C5A                            
00084C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C5A                            
00084C5A                            ; sub_71D40:
00084C5A                            SetDuration:
00084C5A 1005                       		move.b	d5,d0
00084C5C 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084C60                            ; loc_71D46:
00084C60                            @multloop:
00084C60 5301                       		subq.b	#1,d1
00084C62 6700                       		beq.s	@donemult
00084C64 D005                       		add.b	d5,d0
00084C66 60F8                       		bra.s	@multloop
00084C68                            ; ===========================================================================
00084C68                            ; loc_71D4E:
00084C68                            @donemult:
00084C68 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084C6C 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084C70 4E75                       		rts	
00084C72                            ; End of function SetDuration
00084C72                            
00084C72                            ; ===========================================================================
00084C72                            ; loc_71D58:
00084C72                            TrackSetRest:
00084C72 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084C76 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084C7A                            
00084C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C7A                            
00084C7A                            ; sub_71D60:
00084C7A                            FinishTrackUpdate:
00084C7A 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084C7E 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084C84 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084C88 6600                       		bne.s	@locret				; If so, branch
00084C8A 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084C90 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084C94 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084C98 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084C9A 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084C9E 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084CA2 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084CA6 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084CAA 1018                       		move.b	(a0)+,d0			; Get steps
00084CAC E208                       		lsr.b	#1,d0				; Halve them
00084CAE 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084CB2 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084CB6                            ; locret_71D9C:
00084CB6                            @locret:
00084CB6 4E75                       		rts	
00084CB8                            ; End of function FinishTrackUpdate
00084CB8                            
00084CB8                            
00084CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CB8                            
00084CB8                            ; sub_71D9E: NoteFillUpdate
00084CB8                            NoteTimeoutUpdate:
00084CB8 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084CBC 6700                       		beq.s	@locret
00084CBE 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084CC2 6600                       		bne.s	@locret				; Return if it hasn't expired
00084CC4 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084CC8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084CCC 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084CD0 4EBA 0000                  		jsr	FMNoteOff(pc)
00084CD4 584F                       		addq.w	#4,sp				; Do not return to caller
00084CD6 4E75                       		rts	
00084CD8                            ; ===========================================================================
00084CD8                            ; loc_71DBE:
00084CD8                            @psgnoteoff:
00084CD8 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084CDC 584F                       		addq.w	#4,sp		; Do not return to caller
00084CDE                            ; locret_71DC4:
00084CDE                            @locret:
00084CDE 4E75                       		rts	
00084CE0                            ; End of function NoteTimeoutUpdate
00084CE0                            
00084CE0                            
00084CE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CE0                            
00084CE0                            ; sub_71DC6:
00084CE0                            DoModulation:
00084CE0 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084CE2 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084CE6 6700                       		beq.s	@locret				; Return if not
00084CE8 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084CEC 6700                       		beq.s	@waitdone			; If yes, branch
00084CEE 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084CF2 4E75                       		rts	
00084CF4                            ; ===========================================================================
00084CF4                            ; loc_71DDA:
00084CF4                            @waitdone:
00084CF4 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084CF8 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084CFA 4E75                       		rts	
00084CFC                            ; ===========================================================================
00084CFC                            ; loc_71DE2:
00084CFC                            @updatemodulation:
00084CFC 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084D00 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084D06 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084D0A 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084D0C 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084D12 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084D16 4E75                       		rts	
00084D18                            ; ===========================================================================
00084D18                            ; loc_71DFE:
00084D18                            @calcfreq:
00084D18 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084D1C 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084D20 4886                       		ext.w	d6
00084D22 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084D26 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084D2A DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084D2E 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084D30                            ; locret_71E16:
00084D30                            @locret:
00084D30 4E75                       		rts	
00084D32                            ; End of function DoModulation
00084D32                            
00084D32                            
00084D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D32                            
00084D32                            ; sub_71E18:
00084D32                            FMPrepareNote:
00084D32 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084D36 6600                       		bne.s	locret_71E48		; Return if so
00084D38 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084D3C 6700                       		beq.s	FMSetRest		; Branch if zero
00084D3E                            ; loc_71E24:
00084D3E                            FMUpdateFreq:
00084D3E 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084D42 4880                       		ext.w	d0
00084D44 DC40                       		add.w	d0,d6			; Add note frequency
00084D46 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084D4A 6600                       		bne.s	locret_71E48		; Return if so
00084D4C 3206                       		move.w	d6,d1
00084D4E E049                       		lsr.w	#8,d1
00084D50 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084D54 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084D58 1206                       		move.b	d6,d1
00084D5A 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084D5E 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084D62                            ; locret_71E48:
00084D62                            locret_71E48:
00084D62 4E75                       		rts	
00084D64                            ; ===========================================================================
00084D64                            ; loc_71E4A:
00084D64                            FMSetRest:
00084D64 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084D68 4E75                       		rts	
00084D6A                            ; End of function FMPrepareNote
00084D6A                            
00084D6A                            ; ===========================================================================
00084D6A                            ; loc_71E50:
00084D6A                            PauseMusic:
00084D6A 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084D6C 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084D72 6700 0000                  		beq.w	@unpausedallfm
00084D76 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084D7C 7602                       		moveq	#2,d3
00084D7E 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084D82 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084D84                            ; loc_71E6A:
00084D84                            @killpanloop:
00084D84 4EBA 0000                  		jsr	WriteFMI(pc)
00084D88 4EBA 0000                  		jsr	WriteFMII(pc)
00084D8C 5200                       		addq.b	#1,d0
00084D8E 51CB FFF4                  		dbf	d3,@killpanloop
00084D92                            
00084D92 7602                       		moveq	#2,d3
00084D94 7028                       		moveq	#$28,d0		; Key on/off register
00084D96                            ; loc_71E7C:
00084D96                            @noteoffloop:
00084D96 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084D98 4EBA 0000                  		jsr	WriteFMI(pc)
00084D9C 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084D9E 4EBA 0000                  		jsr	WriteFMI(pc)
00084DA2 51CB FFF2                  		dbf	d3,@noteoffloop
00084DA6                            
00084DA6 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084DAA 6000 FD94                  		bra.w	DoStartZ80
00084DAE                            ; ===========================================================================
00084DAE                            ; loc_71E94:
00084DAE                            @unpausemusic:
00084DAE 422E 0003                  		clr.b	f_pausemusic(a6)
00084DB2 7630                       		moveq	#TrackSz,d3
00084DB4 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084DB8 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084DBA                            ; loc_71EA0:
00084DBA                            @bgmfmloop:
00084DBA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084DBE 6700                       		beq.s	@bgmfmnext		; Branch if not
00084DC0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084DC4 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084DC6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084DCA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084DCE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084DD2                            ; loc_71EB8:
00084DD2                            @bgmfmnext:
00084DD2 DAC3                       		adda.w	d3,a5
00084DD4 51CC FFE4                  		dbf	d4,@bgmfmloop
00084DD8                            
00084DD8 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084DDC 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084DDE                            ; loc_71EC4:
00084DDE                            @sfxfmloop:
00084DDE 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084DE2 6700                       		beq.s	@sfxfmnext		; Branch if not
00084DE4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084DE8 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084DEA 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084DEE 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084DF2 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084DF6                            ; loc_71EDC:
00084DF6                            @sfxfmnext:
00084DF6 DAC3                       		adda.w	d3,a5
00084DF8 51CC FFE4                  		dbf	d4,@sfxfmloop
00084DFC                            
00084DFC 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084E00 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084E04 6700                       		beq.s	@unpausedallfm		; Branch if not
00084E06 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084E0A 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084E0C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084E10 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084E14 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084E18                            ; loc_71EFE:
00084E18                            @unpausedallfm:
00084E18 6000 FD26                  		bra.w	DoStartZ80
00084E1C                            
00084E1C                            ; ---------------------------------------------------------------------------
00084E1C                            ; Subroutine to	play a sound or	music track
00084E1C                            ; ---------------------------------------------------------------------------
00084E1C                            
00084E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E1C                            
00084E1C                            ; Sound_Play:
00084E1C                            CycleSoundQueue:
00084E1C 2079 0008 486A             		movea.l	(Go_SoundPriorities).l,a0
00084E22 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084E26 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084E28 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084E2A                            ; loc_71F12:
00084E2A                            @inputloop:
00084E2A 1011                       		move.b	(a1),d0			; move track number to d0
00084E2C 1200                       		move.b	d0,d1
00084E2E 4219                       		clr.b	(a1)+			; Clear entry
00084E30 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084E34 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084E36 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084E3C 6700                       		beq.s	@havesound		; If yes, branch
00084E3E 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084E42 6000                       		bra.s	@nextinput
00084E44                            ; ===========================================================================
00084E44                            ; loc_71F2C:
00084E44                            @havesound:
00084E44 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084E48 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084E4C B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084E4E 6500                       		blo.s	@nextinput		; Branch if yes
00084E50 1602                       		move.b	d2,d3			; Store new priority
00084E52 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084E56                            ; loc_71F3E:
00084E56                            @nextinput:
00084E56 51CC FFD2                  		dbf	d4,@inputloop
00084E5A                            
00084E5A 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084E5C 6B00                       		bmi.s	@locret
00084E5E 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084E60                            ; locret_71F4A:
00084E60                            @locret:
00084E60 4E75                       		rts	
00084E62                            ; End of function CycleSoundQueue
00084E62                            
00084E62                            
00084E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E62                            
00084E62                            ; Sound_ChkValue:
00084E62                            PlaySoundID:
00084E62 7E00                       		moveq	#0,d7
00084E64 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084E68 6700 0000                  		beq.w	StopAllSound
00084E6C 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084E6E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084E74                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084E74                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084E74                            		; See LevSel_NoCheat for more.
00084E74 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084E78 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084E7C 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084E80 6500 0000                  		blo.w	@locret			; Return if yes
00084E84 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084E88 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084E8C 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084E90 6500 0000                  		blo.w	@locret			; Return if yes
00084E94 0C07 00D1                  		cmpi.b	#$D1,d7
00084E98 6500 0000                  		bcs.w	Sound_PlaySpecial
00084E9C 0C07 00DF                  		cmp.b	#$DF,d7
00084EA0 6F00 0000                  		ble.w	Sound_D1toDF
00084EA4 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084EA8 6500 0000                  		blo.w	@locret			; Return if yes
00084EAC 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084EB0 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084EB2                            ; locret_71F8C:
00084EB2                            @locret:
00084EB2 4E75                       		rts	
00084EB4                            ; ===========================================================================
00084EB4                            
00084EB4                            Sound_E0toE4:
00084EB4 0407 00E0                  		subi.b	#flg__First,d7
00084EB8 E54F                       		lsl.w	#2,d7
00084EBA 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084EBE                            ; ===========================================================================
00084EBE                            
00084EBE                            Sound_ExIndex:
00084EBE 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084EC2 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084EC6 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084ECA 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084ECE 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084ED2                            ptr_flgend
00084ED2                            ; ===========================================================================
00084ED2                            ; ---------------------------------------------------------------------------
00084ED2                            ; Play "Say-gaa" PCM sound
00084ED2                            ; ---------------------------------------------------------------------------
00084ED2                            ; Sound_E1: PlaySega:
00084ED2                            PlaySegaSound:
00084ED2 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084EDA 33FC 0000 00A1 1100        		startZ80
00084EE2 323C 0011                  		move.w	#$11,d1
00084EE6                            ; loc_71FC0:
00084EE6                            @busyloop_outer:
00084EE6 303C FFFF                  		move.w	#-1,d0
00084EEA                            ; loc_71FC4:
00084EEA                            @busyloop:
00084EEA 4E71                       		nop	
00084EEC 51C8 FFFC                  		dbf	d0,@busyloop
00084EF0                            
00084EF0 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084EF4                            
00084EF4 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084EF6 4E75                       		rts	
00084EF8                            ; ===========================================================================
00084EF8                            ; ---------------------------------------------------------------------------
00084EF8                            ; Play music track $81-$9F
00084EF8                            ; ---------------------------------------------------------------------------
00084EF8                            ; Sound_81to9F:
00084EF8                            Sound_PlayBGM:
00084EF8 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084EFC 6600                       		bne.s	@bgmnot1up		; if not, branch
00084EFE 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084F02 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084F06 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084F0A 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084F0C                            ; loc_71FE6:
00084F0C                            @clearsfxloop:
00084F0C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084F10 DAFC 0030                  		adda.w	#TrackSz,a5
00084F14 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084F18                            
00084F18 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084F1C 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084F1E                            ; loc_71FF8:
00084F1E                            @cleartrackplayloop:
00084F1E 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084F22 DAFC 0030                  		adda.w	#TrackSz,a5
00084F26 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084F2A                            
00084F2A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084F2C 204E                       		movea.l	a6,a0
00084F2E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084F32 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084F36                            ; loc_72012:
00084F36                            @backupramloop:
00084F36 22D8                       		move.l	(a0)+,(a1)+
00084F38 51C8 FFFC                  		dbf	d0,@backupramloop
00084F3C                            
00084F3C 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084F42 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084F44 6000                       		bra.s	@bgm_loadMusic
00084F46                            ; ===========================================================================
00084F46                            ; loc_72024:
00084F46                            @bgmnot1up:
00084F46 422E 0027                  		clr.b	f_1up_playing(a6)
00084F4A 422E 0026                  		clr.b	v_fadein_counter(a6)
00084F4E                            ; loc_7202C:
00084F4E                            @bgm_loadMusic:
00084F4E 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084F52 2879 0008 487A             		movea.l	(Go_SpeedUpIndex).l,a4
00084F58 0407 0081                  		subi.b	#bgm__First,d7
00084F5C 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084F62 2879 0008 4872             		movea.l	(Go_MusicIndex).l,a4
00084F68 E54F                       		lsl.w	#2,d7
00084F6A 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00084F6E 7000                       		moveq	#0,d0
00084F70 3014                       		move.w	(a4),d0			; load voice pointer
00084F72 D08C                       		add.l	a4,d0			; It is a relative pointer
00084F74 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084F78 102C 0005                  		move.b	5(a4),d0		; load tempo
00084F7C 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084F80                            		;tst.b	f_speedup(a6)
00084F80                            		;beq.s	@nospeedshoes
00084F80                            		;move.b	v_speeduptempo(a6),d0
00084F80                            ; loc_72068:
00084F80                            ;@nospeedshoes:
00084F80 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084F84 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084F88 7200                       		moveq	#0,d1
00084F8A 264C                       		movea.l	a4,a3
00084F8C 5C4C                       		addq.w	#6,a4			; Point past header
00084F8E 7E00                       		moveq	#0,d7
00084F90 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084F94 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084F98 5307                       		subq.b	#1,d7
00084F9A 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00084F9E 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00084FA2 7C30                       		moveq	#TrackSz,d6
00084FA4 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00084FA8 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00084FAC 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00084FB0                            ; loc_72098:
00084FB0                            @bmg_fmloadloop:
00084FB0 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084FB4 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084FB8 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084FBC 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084FC0 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084FC4 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084FC8 7000                       		moveq	#0,d0
00084FCA 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084FCC D08B                       		add.l	a3,d0				; Relative pointer
00084FCE 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084FD2 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084FD6 D2C6                       		adda.w	d6,a1
00084FD8 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084FDC                            		
00084FDC 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084FE2 6600                       		bne.s	@silencefm6
00084FE4 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084FE6 7200                       		moveq	#0,d1		; Disable DAC
00084FE8 4EBA 0000                  		jsr	WriteFMI(pc)
00084FEC 6000 0000                  		bra.w	@bgm_fmdone
00084FF0                            ; ===========================================================================
00084FF0                            ; loc_720D8:
00084FF0                            @silencefm6:
00084FF0 7028                       		moveq	#$28,d0		; Key on/off register
00084FF2 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084FF4 4EBA 0000                  		jsr	WriteFMI(pc)
00084FF8 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084FFC 727F                       		moveq	#$7F,d1		; Total silence
00084FFE 4EBA 0000                  		jsr	WriteFMII(pc)
00085002 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00085006 727F                       		moveq	#$7F,d1		; Total silence
00085008 4EBA 0000                  		jsr	WriteFMII(pc)
0008500C 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00085010 727F                       		moveq	#$7F,d1		; Total silence
00085012 4EBA 0000                  		jsr	WriteFMII(pc)
00085016 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
0008501A 727F                       		moveq	#$7F,d1		; Total silence
0008501C 4EBA 0000                  		jsr	WriteFMII(pc)
00085020 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00085024 123C 00C0                  		move.b	#$C0,d1		; Stereo
00085028 4EBA 0000                  		jsr	WriteFMII(pc)
0008502C                            ; loc_72114:
0008502C                            @bgm_fmdone:
0008502C 7E00                       		moveq	#0,d7
0008502E 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00085032 6700                       		beq.s	@bgm_psgdone	; branch if zero
00085034 5307                       		subq.b	#1,d7
00085036 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
0008503A 45FA 0000                  		lea	PSGInitBytes(pc),a2
0008503E                            ; loc_72126:
0008503E                            @bgm_psgloadloop:
0008503E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00085042 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085046 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0008504A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008504E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00085052 7000                       		moveq	#0,d0
00085054 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00085056 D08B                       		add.l	a3,d0				; Relative pointer
00085058 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0008505C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00085060 101C                       		move.b	(a4)+,d0			; load redundant byte
00085062 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00085066 D2C6                       		adda.w	d6,a1
00085068 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
0008506C                            ; loc_72154:
0008506C                            @bgm_psgdone:
0008506C 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00085070 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00085072                            ; loc_7215A:
00085072                            @sfxstoploop:
00085072 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00085074 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00085078 7000                       		moveq	#0,d0
0008507A 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0008507E 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00085080 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00085082 E508                       		lsl.b	#2,d0			; Convert to index
00085084 6000                       		bra.s	@gotchannelindex
00085086                            ; ===========================================================================
00085086                            ; loc_7216E:
00085086                            @sfxpsgchannel:
00085086 E608                       		lsr.b	#3,d0		; Convert to index
00085088                            ; loc_72170:
00085088                            @gotchannelindex:
00085088 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
0008508C 2070 0000                  		movea.l	(a0,d0.w),a0
00085090 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00085094                            ; loc_7217C:
00085094                            @sfxnext:
00085094 D2C6                       		adda.w	d6,a1
00085096 51CF FFDA                  		dbf	d7,@sfxstoploop
0008509A                            
0008509A 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008509E 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000850A0 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000850A6                            ; loc_7218E:
000850A6                            @checkspecialpsg:
000850A6 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000850AA 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000850AC 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000850B2                            ; loc_7219A:
000850B2                            @sendfmnoteoff:
000850B2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000850B6 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000850B8                            ; loc_721A0:
000850B8                            @fmnoteoffloop:
000850B8 4EBA 0000                  		jsr	FMNoteOff(pc)
000850BC DAC6                       		adda.w	d6,a5
000850BE 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000850C2 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000850C4                            ; loc_721AC:
000850C4                            @psgnoteoffloop:
000850C4 4EBA 0000                  		jsr	PSGNoteOff(pc)
000850C8 DAC6                       		adda.w	d6,a5
000850CA 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
000850CE                            ; loc_721B6:
000850CE                            @locdblret:
000850CE 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
000850D0 4E75                       		rts	
000850D2                            ; ===========================================================================
000850D2                            ; byte_721BA:
000850D2 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000850DA 00                         		even
000850DA                            ; byte_721C2:
000850DA 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000850DE 00                         		even
000850DE                            ; ===========================================================================
000850DE                            ; ---------------------------------------------------------------------------
000850DE                            ; Play Spin Dash sound effect
000850DE                            ; ---------------------------------------------------------------------------
000850DE                            Sound_D1toDF:
000850DE 4A2E 0027                  		tst.b	$27(a6)
000850E2 6600 0000                  		bne.w	loc_722C6
000850E6 4A2E 0004                  		tst.b	4(a6)
000850EA 6600 0000                  		bne.w	loc_722C6
000850EE 4A2E 0024                  		tst.b	$24(a6)
000850F2 6600 0000                  		bne.w	loc_722C6
000850F6 4238 C900                  		clr.b	($FFFFC900).w
000850FA 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
000850FE 6600                       		bne.s	@cont3	; if not, branch
00085100 3F00                       		move.w	d0,-(sp)
00085102 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00085106 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
0008510A 6600                       		bne.s	@cont1		; if it is, branch
0008510C 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00085110                            		
00085110                            @cont1:
00085110 5200                       		addq.b	#1,d0
00085112 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00085116 6400                       		bcc.s	@cont2		; if it has, branch
00085118 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
0008511C                            		
0008511C                            @cont2:
0008511C 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00085122 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00085128 301F                       		move.w	(sp)+,d0
0008512A                            		
0008512A                            @cont3:	
0008512A 2079 0008 4876             		movea.l	(Go_SoundIndex).l,a0
00085130 0407 00A0                  		sub.b	#$A0,d7
00085134 6000                       		bra.s	SoundEffects_Common
00085136                            ; ---------------------------------------------------------------------------
00085136                            ; Play normal sound effect
00085136                            ; ---------------------------------------------------------------------------
00085136                            ; Sound_A0toCF:
00085136                            Sound_PlaySFX:
00085136 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0008513A 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008513E 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00085142 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085146 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0008514A 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008514E 4238 C900                  		clr.b	($FFFFC900).w
00085152 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00085156 6600                       		bne.s	Sound_notB5		; if not, branch
00085158 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
0008515C 6600                       		bne.s	loc_721EE		; Branch if not
0008515E 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00085162                            
00085162                            loc_721EE:
00085162 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00085168                            
00085168                            Sound_notB5:
00085168 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
0008516C 6600                       		bne.s	Sound_notA7		; if not, branch
0008516E 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00085172 6600 0000                  		bne.w	locret_722C4			; Return if not
00085176 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
0008517C                            		
0008517C                            Sound_notA7:
0008517C 2079 0008 4876             		movea.l	(Go_SoundIndex).l,a0
00085182 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00085186                            
00085186                            SoundEffects_Common:		
00085186 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00085188 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
0008518C 224B                       		movea.l	a3,a1
0008518E 7200                       		moveq	#0,d1
00085190 3219                       		move.w	(a1)+,d1		; Voice pointer
00085192 D28B                       		add.l	a3,d1			; Relative pointer
00085194 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00085196                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00085196                            		; index entry is above $3F will cause a crash. This is actually the same way that
00085196                            		; this bug is fixed in Ristar's driver.
00085196 7E00                       		moveq	#0,d7	
00085198 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
0008519A 5307                       		subq.b	#1,d7
0008519C 7C30                       		moveq	#TrackSz,d6
0008519E                            
0008519E                            loc_72228:
0008519E 7600                       		moveq	#0,d3
000851A0 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
000851A4 1803                       		move.b	d3,d4
000851A6 6B00                       		bmi.s	loc_72244	; Branch if PSG
000851A8 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000851AA E54B                       		lsl.w	#2,d3
000851AC 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000851B0 2A75 3000                  		movea.l	(a5,d3.w),a5
000851B4 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000851B8 6000                       		bra.s	loc_7226E
000851BA                            ; ===========================================================================
000851BA                            
000851BA                            loc_72244:
000851BA E64B                       		lsr.w	#3,d3
000851BC 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000851C0 2A75 3000                  		movea.l	(a5,d3.w),a5
000851C4 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000851C8 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
000851CC 6600                       		bne.s	loc_7226E	; Branch if not
000851CE 1004                       		move.b	d4,d0
000851D0 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000851D4 13C0 00C0 0011             		move.b	d0,(psg_input).l
000851DA 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000851DE 13C0 00C0 0011             		move.b	d0,(psg_input).l
000851E4                            
000851E4                            loc_7226E:
000851E4 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000851E8 2A75 3000                  		movea.l	(a5,d3.w),a5
000851EC 244D                       		movea.l	a5,a2
000851EE 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000851F0                            
000851F0                            loc_72276:
000851F0 429A                       		clr.l	(a2)+
000851F2 51C8 FFFC                  		dbf	d0,loc_72276
000851F6                            
000851F6 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000851F8 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000851FC 7000                       		moveq	#0,d0
000851FE 3019                       		move.w	(a1)+,d0			; Track data pointer
00085200 D08B                       		add.l	a3,d0				; Relative pointer
00085202 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00085206 3B59 0008                  		move.w	(a1)+,8(a5)
0008520A 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
0008520E 6700                       		beq.s	@cont		; if not, branch
00085210 3F00                       		move.w	d0,-(sp)
00085212 1038 C902                  		move.b	($FFFFC902).w,d0
00085216 D12D 0008                  		add.b	d0,8(a5)
0008521A 301F                       		move.w	(sp)+,d0
0008521C                            		
0008521C                            @cont:
0008521C 1B7C 0001 000E             		move.b	#1,$E(a5)
00085222 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00085226 4A04                       		tst.b	d4				; Is this a PSG channel?
00085228 6B00                       		bmi.s	loc_722A8		; Branch if yes
0008522A 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085230 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00085234                            
00085234                            loc_722A8:
00085234 51CF FF68                  		dbf	d7,loc_72228
00085238                            
00085238 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008523C 6A00                       		bpl.s	loc_722B8				; Branch if not
0008523E 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085244                            
00085244                            loc_722B8:
00085244 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00085248 6A00                       		bpl.s	locret_722C4						; Branch if not
0008524A 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085250                            
00085250                            locret_722C4:
00085250 4E75                       		rts	
00085252                            ; ===========================================================================
00085252                            
00085252                            loc_722C6:
00085252 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00085254 4E75                       		rts	
00085256                            ; ===========================================================================
00085256                            ; ---------------------------------------------------------------------------
00085256                            ; RAM addresses for FM and PSG channel variables used by the SFX
00085256                            ; ---------------------------------------------------------------------------
00085256                            ; dword_722CC: BGMChannelRAM:
00085256                            SFX_BGMChannelRAM:
00085256 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
0008525A 0000 0000                  		dc.l 0
0008525E 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085262 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085266 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
0008526A 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0008526E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00085272 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085276                            ; dword_722EC: SFXChannelRAM:
00085276                            SFX_SFXChannelRAM:
00085276 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
0008527A 0000 0000                  		dc.l 0
0008527E 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00085282 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00085286 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
0008528A 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
0008528E 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00085292 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00085296                            ; ===========================================================================
00085296                            ; ---------------------------------------------------------------------------
00085296                            ; Play GHZ waterfall sound
00085296                            ; ---------------------------------------------------------------------------
00085296                            ; Sound_D0toDF:
00085296                            Sound_PlaySpecial:
00085296 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0008529A 6600 0000                  		bne.w	@locret			; Return if so
0008529E 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000852A2 6600 0000                  		bne.w	@locret			; Exit if it is
000852A6 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000852AA 6600 0000                  		bne.w	@locret			; Exit if it is
000852AE 2079 0008 486E             		movea.l	(Go_SpecSoundIndex).l,a0
000852B4 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000852B8 E54F                       		lsl.w	#2,d7
000852BA 2670 7000                  		movea.l	(a0,d7.w),a3
000852BE 224B                       		movea.l	a3,a1
000852C0 7000                       		moveq	#0,d0
000852C2 3019                       		move.w	(a1)+,d0			; Voice pointer
000852C4 D08B                       		add.l	a3,d0				; Relative pointer
000852C6 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
000852CA 1A19                       		move.b	(a1)+,d5			; Dividing timing
000852CC                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
000852CC                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
000852CC 7E00                       		moveq	#0,d7	
000852CE 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
000852D0 5307                       		subq.b	#1,d7
000852D2 7C30                       		moveq	#TrackSz,d6
000852D4                            ; loc_72348:
000852D4                            @sfxloadloop:
000852D4 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000852D8 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000852DA 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000852E0 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000852E4 6000                       		bra.s	@sfxinitpsg
000852E6                            ; ===========================================================================
000852E6                            ; loc_7235A:
000852E6                            @sfxoverridepsg:
000852E6 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000852EC 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000852F0                            ; loc_72364:
000852F0                            @sfxinitpsg:
000852F0 244D                       		movea.l	a5,a2
000852F2 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000852F4                            ; loc_72368:
000852F4                            @clearsfxtrackram:
000852F4 429A                       		clr.l	(a2)+
000852F6 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000852FA                            
000852FA 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000852FC 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00085300 7000                       		moveq	#0,d0
00085302 3019                       		move.w	(a1)+,d0			; Track data pointer
00085304 D08B                       		add.l	a3,d0				; Relative pointer
00085306 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0008530A 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
0008530E 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00085314 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00085318 4A04                       		tst.b	d4				; Is this a PSG channel?
0008531A 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0008531C 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085322                            ; loc_72396:
00085322                            @sfxpsginitdone:
00085322 51CF FFB0                  		dbf	d7,@sfxloadloop
00085326                            
00085326 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0008532A 6A00                       		bpl.s	@doneoverride					; Branch if not
0008532C 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085332                            ; loc_723A6:
00085332                            @doneoverride:
00085332 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00085336 6A00                       		bpl.s	@locret						; Branch if not
00085338 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008533E 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00085342 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085348 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
0008534C 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085352                            ; locret_723C6:
00085352                            @locret:
00085352 4E75                       		rts	
00085354                            ; End of function PlaySoundID
00085354                            
00085354                            ; ===========================================================================
00085354                            ; ---------------------------------------------------------------------------
00085354                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00085354                            ; ---------------------------------------------------------------------------
00085354                            ; The first block would have been used for overriding the music tracks
00085354                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00085354                            ; The third block would be used to set up the Special SFX
00085354                            ; The second block, however, is for the SFX tracks, which have a higher priority
00085354                            ; and would be checked for if they're currently playing
00085354                            ; If they are, then the third block would be used again, this time to mark
00085354                            ; the new tracks as 'currently playing'
00085354                            
00085354                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00085354                            
00085354                            ; BGMFM4PSG3RAM:
00085354                            ;SpecSFX_BGMChannelRAM:
00085354 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085358 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
0008535C                            ; SFXFM4PSG3RAM:
0008535C                            ;SpecSFX_SFXChannelRAM:
0008535C 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00085360 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00085364                            ; SpecialSFXFM4PSG3RAM:
00085364                            ;SpecSFX_SpecSFXChannelRAM:
00085364 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085368 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
0008536C                            
0008536C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008536C                            
0008536C                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
0008536C                            StopSFX:
0008536C 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008536E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00085372 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00085374                            ; loc_723EA:
00085374                            @trackloop:
00085374 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085376 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
0008537A 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008537E 7600                       		moveq	#0,d3
00085380 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00085384 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00085386 4EBA 0000                  		jsr	FMNoteOff(pc)
0008538A 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
0008538E 6600                       		bne.s	@getfmpointer					; Branch if not
00085390 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085394 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085396                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085396                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085396                            		; is playing its sound!
00085396 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008539A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
0008539E 6000                       		bra.s	@gotfmpointer
000853A0                            ; ===========================================================================
000853A0                            ; loc_72416:
000853A0                            @getfmpointer:
000853A0 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
000853A2 E50B                       		lsl.b	#2,d3
000853A4 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
000853A8 264D                       		movea.l	a5,a3
000853AA 2A70 3000                  		movea.l	(a0,d3.w),a5
000853AE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000853B2                            ; loc_72428:
000853B2                            @gotfmpointer:
000853B2 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000853B6 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000853BA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000853BE 4EBA 0000                  		jsr	SetVoice(pc)
000853C2 2A4B                       		movea.l	a3,a5
000853C4 6000                       		bra.s	@nexttrack
000853C6                            ; ===========================================================================
000853C6                            ; loc_7243C:
000853C6                            @trackpsg:
000853C6 4EBA 0000                  		jsr	PSGNoteOff(pc)
000853CA 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
000853CE 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
000853D2 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000853D4 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000853D8 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000853DA E60B                       		lsr.b	#3,d3
000853DC 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
000853E0 2070 3000                  		movea.l	(a0,d3.w),a0
000853E4                            ; loc_7245A:
000853E4                            @gotpsgpointer:
000853E4 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000853E8 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000853EC 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000853F2 6600                       		bne.s	@nexttrack			; Branch if not
000853F4 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000853FC                            ; loc_72472:
000853FC                            @nexttrack:
000853FC DAFC 0030                  		adda.w	#TrackSz,a5
00085400 51CF FF72                  		dbf	d7,@trackloop
00085404                            
00085404 4E75                       		rts	
00085406                            ; End of function StopSFX
00085406                            
00085406                            
00085406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085406                            
00085406                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00085406                            StopSpecialSFX:
00085406 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008540A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008540C 6A00                       		bpl.s	@fadedfm		; Branch if not
0008540E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085412 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085416 6600                       		bne.s	@fadedfm		; Branch if not
00085418 4EBA 0000                  		jsr	SendFMNoteOff(pc)
0008541C 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085420 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085424 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085428 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008542A 6A00                       		bpl.s	@fadedfm		; Branch if not
0008542C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085430 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085434 4EBA 0000                  		jsr	SetVoice(pc)
00085438                            ; loc_724AE:
00085438                            @fadedfm:
00085438 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
0008543C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008543E 6A00                       		bpl.s	@fadedpsg		; Branch if not
00085440 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085444 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085448 6600                       		bne.s	@fadedpsg		; Return if not
0008544A 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0008544E 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00085452 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085456 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008545A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008545C 6A00                       		bpl.s	@fadedpsg		; Return if not
0008545E 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00085464 6600                       		bne.s	@fadedpsg			; Return if not
00085466 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0008546E                            ; locret_724E4:
0008546E                            @fadedpsg:
0008546E 4E75                       		rts	
00085470                            ; End of function StopSpecialSFX
00085470                            
00085470                            ; ===========================================================================
00085470                            ; ---------------------------------------------------------------------------
00085470                            ; Fade out music
00085470                            ; ---------------------------------------------------------------------------
00085470                            ; Sound_E0:
00085470                            FadeOutMusic:
00085470 4EBA FEFA                  		jsr	StopSFX(pc)
00085474 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085478 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0008547E 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00085484 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00085488 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
0008548C 4E75                       		rts	
0008548E                            
0008548E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008548E                            
0008548E                            ; sub_72504:
0008548E                            DoFadeOut:
0008548E 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00085492 6700                       		beq.s	@continuefade		; Branch if yes
00085494 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085498 4E75                       		rts	
0008549A                            ; ===========================================================================
0008549A                            ; loc_72510:
0008549A                            @continuefade:
0008549A 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
0008549E 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
000854A2 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
000854A8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000854AC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000854AE                            ; loc_72524:
000854AE                            @fmloop:
000854AE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854B0 6A00                       		bpl.s	@nextfm			; Branch if not
000854B2 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000854B6 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
000854B8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000854BC 6000                       		bra.s	@nextfm
000854BE                            ; ===========================================================================
000854BE                            ; loc_72534:
000854BE                            @sendfmtl:
000854BE 4EBA 0000                  		jsr	SendVoiceTL(pc)
000854C2                            ; loc_72538:
000854C2                            @nextfm:
000854C2 DAFC 0030                  		adda.w	#TrackSz,a5
000854C6 51CF FFE6                  		dbf	d7,@fmloop
000854CA                            
000854CA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000854CC                            ; loc_72542:
000854CC                            @psgloop:
000854CC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854CE 6A00                       		bpl.s	@nextpsg		; branch if not
000854D0 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000854D4 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000854DA 6500                       		blo.s	@sendpsgvol		; Branch if not
000854DC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000854E0 6000                       		bra.s	@nextpsg
000854E2                            ; ===========================================================================
000854E2                            ; loc_72558:
000854E2                            @sendpsgvol:
000854E2 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
000854E6 4EBA 0000                  		jsr	SetPSGVolume(pc)
000854EA                            ; loc_72560:
000854EA                            @nextpsg:
000854EA DAFC 0030                  		adda.w	#TrackSz,a5
000854EE 51CF FFDC                  		dbf	d7,@psgloop
000854F2                            
000854F2 4E75                       		rts	
000854F4                            ; End of function DoFadeOut
000854F4                            
000854F4                            
000854F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854F4                            
000854F4                            ; sub_7256A:
000854F4                            FMSilenceAll:
000854F4 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
000854F6 7028                       		moveq	#$28,d0		; FM key on/off register
000854F8                            ; loc_7256E:
000854F8                            @noteoffloop:
000854F8 1203                       		move.b	d3,d1
000854FA 4EBA 0000                  		jsr	WriteFMI(pc)
000854FE 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00085500 4EBA 0000                  		jsr	WriteFMI(pc)
00085504 51CB FFF2                  		dbf	d3,@noteoffloop
00085508                            
00085508 7040                       		moveq	#$40,d0		; Set TL on FM channels...
0008550A 727F                       		moveq	#$7F,d1		; ... to total attenuation...
0008550C 7802                       		moveq	#2,d4		; ... for all 3 channels...
0008550E                            ; loc_72584:
0008550E                            @channelloop:
0008550E 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00085510                            ; loc_72586:
00085510                            @channeltlloop:
00085510 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00085514 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00085518 5840                       		addq.w	#4,d0		; Next TL operator
0008551A 51CB FFF4                  		dbf	d3,@channeltlloop
0008551E                            
0008551E 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00085522 51CC FFEA                  		dbf	d4,@channelloop
00085526                            
00085526 4E75                       		rts	
00085528                            ; End of function FMSilenceAll
00085528                            
00085528                            ; ===========================================================================
00085528                            ; ---------------------------------------------------------------------------
00085528                            ; Stop music
00085528                            ; ---------------------------------------------------------------------------
00085528                            ; Sound_E4: StopSoundAndMusic:
00085528                            StopAllSound:
00085528 702B                       		moveq	#$2B,d0		; Enable/disable DAC
0008552A 123C 0080                  		move.b	#$80,d1		; Enable DAC
0008552E 4EBA 0000                  		jsr	WriteFMI(pc)
00085532 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00085534 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00085536 4EBA 0000                  		jsr	WriteFMI(pc)
0008553A 204E                       		movea.l	a6,a0
0008553C                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
0008553C                            		; Remove the '-$10' to fix this.
0008553C 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00085540                            ; loc_725B6:
00085540                            @clearramloop:
00085540 4298                       		clr.l	(a0)+
00085542 51C8 FFFC                  		dbf	d0,@clearramloop
00085546                            
00085546 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
0008554C 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00085550 6000 0000                  		bra.w	PSGSilenceAll
00085554                            
00085554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085554                            
00085554                            ; sub_725CA:
00085554                            InitMusicPlayback:
00085554 204E                       		movea.l	a6,a0
00085556                            		; Save several values
00085556 1216                       		move.b	v_sndprio(a6),d1
00085558 142E 0027                  		move.b	f_1up_playing(a6),d2
0008555C 162E 002A                  		move.b	f_speedup(a6),d3
00085560 182E 0026                  		move.b	v_fadein_counter(a6),d4
00085564                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00085564 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085568 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
0008556C                            ; loc_725E4:
0008556C                            @clearramloop:
0008556C 4298                       		clr.l	(a0)+
0008556E 51C8 FFFC                  		dbf	d0,@clearramloop
00085572                            
00085572                            		; Restore the values saved above
00085572 1C81                       		move.b	d1,v_sndprio(a6)
00085574 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085578 1D43 002A                  		move.b	d3,f_speedup(a6)
0008557C 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00085580 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00085584 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
0008558A                            		; DANGER! This silences ALL channels, even the ones being used
0008558A                            		; by SFX, and not music! @sendfmnoteoff does this already, and
0008558A                            		; doesn't affect SFX channels, either.
0008558A                            		; This should be replaced with an 'rts'.
0008558A 4EBA FF68                  		jsr	FMSilenceAll(pc)
0008558E 6000 0000                  		bra.w	PSGSilenceAll
00085592                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00085592                            		; don't do a very good job of setting up the music tracks.
00085592                            		; Tracks that aren't defined in a music file's header don't have
00085592                            		; their channels defined, meaning @sendfmnoteoff won't silence
00085592                            		; hardware properly. In combination with removing the above
00085592                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00085592                            		; notes.
00085592                            		; To fix this, I suggest using this code, instead of an 'rts':
00085592                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00085592                            		;lea	FMDACInitBytes(pc),a2
00085592                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00085592                            		;bsr.s	@writeloop
00085592                            		;lea	PSGInitBytes(pc),a2
00085592                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00085592                            
00085592                            ;@writeloop:
00085592                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00085592                            		;lea	TrackSz(a1),a1		; Next track
00085592                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00085592                            
00085592                            		;rts
00085592                            	
00085592                            ; End of function InitMusicPlayback
00085592                            
00085592                            
00085592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085592                            
00085592                            ; sub_7260C:
00085592                            TempoWait:
00085592 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085598 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
0008559C 7030                       		moveq	#TrackSz,d0
0008559E 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
000855A0                            ; loc_7261A:
000855A0                            @tempoloop:
000855A0 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
000855A2 D0C0                       		adda.w	d0,a0	; Advance to next track
000855A4 51C9 FFFA                  		dbf	d1,@tempoloop
000855A8                            
000855A8 4E75                       		rts	
000855AA                            ; End of function TempoWait
000855AA                            
000855AA                            ; ===========================================================================
000855AA                            ; ---------------------------------------------------------------------------
000855AA                            ; Speed	up music
000855AA                            ; ---------------------------------------------------------------------------
000855AA                            ; Sound_E2:
000855AA                            SpeedUpMusic:
000855AA 4A2E 0027                  		tst.b	f_1up_playing(a6)
000855AE 6600                       		bne.s	@speedup_1up
000855B0 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
000855B6 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
000855BC 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
000855C2 4E75                       		rts	
000855C4                            ; ===========================================================================
000855C4                            ; loc_7263E:
000855C4                            @speedup_1up:
000855C4 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
000855CA 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000855D0 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000855D6 4E75                       		rts	
000855D8                            ; ===========================================================================
000855D8                            ; ---------------------------------------------------------------------------
000855D8                            ; Change music back to normal speed
000855D8                            ; ---------------------------------------------------------------------------
000855D8                            ; Sound_E3:
000855D8                            SlowDownMusic:
000855D8 4A2E 0027                  		tst.b	f_1up_playing(a6)
000855DC 6600                       		bne.s	@slowdown_1up
000855DE 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000855E4 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000855EA 422E 002A                  		clr.b	f_speedup(a6)
000855EE 4E75                       		rts	
000855F0                            ; ===========================================================================
000855F0                            ; loc_7266A:
000855F0                            @slowdown_1up:
000855F0 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000855F6 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000855FC 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00085600 4E75                       		rts	
00085602                            
00085602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085602                            
00085602                            ; sub_7267C:
00085602                            DoFadeIn:
00085602 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00085606 6700                       		beq.s	@continuefade		; Branch if yes
00085608 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
0008560C 4E75                       		rts	
0008560E                            ; ===========================================================================
0008560E                            ; loc_72688:
0008560E                            @continuefade:
0008560E 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00085612 6700                       		beq.s	@fadedone		; Branch if yes
00085614 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00085618 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
0008561E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085622 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085624                            ; loc_7269E:
00085624                            @fmloop:
00085624 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085626 6A00                       		bpl.s	@nextfm			; Branch if not
00085628 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0008562C 4EBA 0000                  		jsr	SendVoiceTL(pc)
00085630                            ; loc_726AA:
00085630                            @nextfm:
00085630 DAFC 0030                  		adda.w	#TrackSz,a5
00085634 51CF FFEE                  		dbf	d7,@fmloop
00085638 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
0008563A                            ; loc_726B4:
0008563A                            @psgloop:
0008563A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008563C 6A00                       		bpl.s	@nextpsg		; Branch if not
0008563E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085642 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00085646 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
0008564A 6500                       		blo.s	@sendpsgvol		; Branch if yes
0008564C 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0008564E                            ; loc_726C8:
0008564E                            @sendpsgvol:
0008564E 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085652                            ; loc_726CC:
00085652                            @nextpsg:
00085652 DAFC 0030                  		adda.w	#TrackSz,a5
00085656 51CF FFE2                  		dbf	d7,@psgloop
0008565A 4E75                       		rts	
0008565C                            ; ===========================================================================
0008565C                            ; loc_726D6:
0008565C                            @fadedone:
0008565C 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00085662 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085666 4E75                       		rts	
00085668                            ; End of function DoFadeIn
00085668                            
00085668                            ; ===========================================================================
00085668                            ; loc_726E2:
00085668                            FMNoteOn:
00085668 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
0008566C 6600                       		bne.s	@locret		; Return if so
0008566E 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085672 6600                       		bne.s	@locret		; Return if so
00085674 7028                       		moveq	#$28,d0		; Note on/off register
00085676 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0008567A 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0008567E 6000 0000                  		bra.w	WriteFMI
00085682                            ; ===========================================================================
00085682                            ; locret_726FC:
00085682                            @locret:
00085682 4E75                       		rts	
00085684                            
00085684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085684                            
00085684                            ; sub_726FE:
00085684                            FMNoteOff:
00085684 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00085688 6600                       		bne.s	locret_72714	; Return if yes
0008568A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008568E 6600                       		bne.s	locret_72714	; Return if yes
00085690                            ; loc_7270A:
00085690                            SendFMNoteOff:
00085690 7028                       		moveq	#$28,d0		; Note on/off register
00085692 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085696 6000 0000                  		bra.w	WriteFMI
0008569A                            ; ===========================================================================
0008569A                            
0008569A                            locret_72714:
0008569A 4E75                       		rts	
0008569C                            ; End of function FMNoteOff
0008569C                            
0008569C                            ; ===========================================================================
0008569C                            ; loc_72716:
0008569C                            WriteFMIorIIMain:
0008569C 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
000856A0 6600                       		bne.s	@locret		; Return if yes
000856A2 6000 0000                  		bra.w	WriteFMIorII
000856A6                            ; ===========================================================================
000856A6                            ; locret_72720:
000856A6                            @locret:
000856A6 4E75                       		rts	
000856A8                            
000856A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856A8                            
000856A8                            ; sub_72722:
000856A8                            WriteFMIorII:
000856A8 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
000856AE 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
000856B0 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
000856B4                            ; End of function WriteFMIorII
000856B4                            
000856B4                            
000856B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856B4                            
000856B4                            ; The reason I think this is an *early* SMPS 68k Type 1b
000856B4                            ; is because this subroutine is the one from Type 1a:
000856B4                            ; other Type 1b drivers have a newer, optimised version.
000856B4                            ; The driver itself is Type 1b, with this odd exception.
000856B4                            
000856B4                            ; sub_7272E:
000856B4                            WriteFMI:
000856B4 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000856BA 0802 0007                  		btst	#7,d2		; Is FM busy?
000856BE 66F4                       		bne.s	WriteFMI	; Loop if so
000856C0 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
000856C6 4E71                       		nop	
000856C8 4E71                       		nop	
000856CA 4E71                       		nop	
000856CC                            ; loc_72746:
000856CC                            @waitloop:
000856CC 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000856D2 0802 0007                  		btst	#7,d2		; Is FM busy?
000856D6 66F4                       		bne.s	@waitloop	; Loop if so
000856D8                            
000856D8 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000856DE 4E75                       		rts	
000856E0                            ; End of function WriteFMI
000856E0                            
000856E0                            ; ===========================================================================
000856E0                            ; loc_7275A:
000856E0                            WriteFMIIPart:
000856E0 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000856E4 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000856E8 D002                       		add.b	d2,d0			; Add in to destination register
000856EA                            
000856EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856EA                            
000856EA                            ; sub_72764:
000856EA                            WriteFMII:
000856EA 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000856F0 0802 0007                  		btst	#7,d2		; Is FM busy?
000856F4 66F4                       		bne.s	WriteFMII	; Loop if so
000856F6 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000856FC 4E71                       		nop	
000856FE 4E71                       		nop	
00085700 4E71                       		nop	
00085702                            ; loc_7277C:
00085702                            @waitloop:
00085702 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085708 0802 0007                  		btst	#7,d2		; Is FM busy?
0008570C 66F4                       		bne.s	@waitloop	; Loop if so
0008570E                            
0008570E 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00085714 4E75                       		rts	
00085716                            ; End of function WriteFMII
00085716                            
00085716                            ; ===========================================================================
00085716                            ; ---------------------------------------------------------------------------
00085716                            ; FM Note Values: b-0 to a#8
00085716                            ; ---------------------------------------------------------------------------
00085716                            ; word_72790: FM_Notes:
00085716                            FMFrequencies:
00085716 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
0008572E 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085746 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0008575E 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085776 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0008578E 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
000857A6 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
000857BE 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000857D6                            
000857D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857D6                            
000857D6                            ; sub_72850:
000857D6                            PSGUpdateTrack:
000857D6 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000857DA 6600                       		bne.s	@notegoing
000857DC 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000857E0 4EBA 0000                  		jsr	PSGDoNext(pc)
000857E4 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000857E8 6000 0000                  		bra.w	PSGDoVolFX
000857EC                            ; ===========================================================================
000857EC                            ; loc_72866:
000857EC                            @notegoing:
000857EC 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000857F0 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000857F4 4EBA F4EA                  		jsr	DoModulation(pc)
000857F8 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000857FC 4E75                       		rts
000857FE                            ; End of function PSGUpdateTrack
000857FE                            
000857FE                            
000857FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857FE                            
000857FE                            ; sub_72878:
000857FE                            PSGDoNext:
000857FE 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00085802 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00085806                            ; loc_72880:
00085806                            @noteloop:
00085806 7A00                       		moveq	#0,d5
00085808 1A1C                       		move.b	(a4)+,d5	; Get byte from track
0008580A 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0008580E 6500                       		blo.s	@gotnote	; Branch if not
00085810 4EBA 0000                  		jsr	CoordFlag(pc)
00085814 60F0                       		bra.s	@noteloop
00085816                            ; ===========================================================================
00085816                            ; loc_72890:
00085816                            @gotnote:
00085816 4A05                       		tst.b	d5		; Is it a note?
00085818 6A00                       		bpl.s	@gotduration	; Branch if not
0008581A 4EBA 0000                  		jsr	PSGSetFreq(pc)
0008581E 1A1C                       		move.b	(a4)+,d5	; Get another byte
00085820 4A05                       		tst.b	d5		; Is it a duration?
00085822 6A00                       		bpl.s	@gotduration	; Branch if yes
00085824 534C                       		subq.w	#1,a4		; Put byte back
00085826 6000 F452                  		bra.w	FinishTrackUpdate
0008582A                            ; ===========================================================================
0008582A                            ; loc_728A4:
0008582A                            @gotduration:
0008582A 4EBA F42E                  		jsr	SetDuration(pc)
0008582E 6000 F44A                  		bra.w	FinishTrackUpdate
00085832                            ; End of function PSGDoNext
00085832                            
00085832                            
00085832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085832                            
00085832                            ; sub_728AC:
00085832                            PSGSetFreq:
00085832 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085836 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085838 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
0008583C 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00085840 E34D                       		lsl.w	#1,d5
00085842 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085846 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
0008584C 6000 F42C                  		bra.w	FinishTrackUpdate
00085850                            ; ===========================================================================
00085850                            ; loc_728CA:
00085850                            @restpsg:
00085850 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085854 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0008585A 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0008585E 6000 0000                  		bra.w	PSGNoteOff
00085862                            ; End of function PSGSetFreq
00085862                            
00085862                            
00085862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085862                            
00085862                            ; sub_728DC:
00085862                            PSGDoNoteOn:
00085862 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085866 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085868                            ; End of function PSGDoNoteOn
00085868                            
00085868                            
00085868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085868                            
00085868                            ; sub_728E2:
00085868                            PSGUpdateFreq:
00085868 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
0008586C 4880                       		ext.w	d0
0008586E DC40                       		add.w	d0,d6		; Add to frequency
00085870 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085874 6600                       		bne.s	@locret		; Return if yes
00085876 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0008587A 6600                       		bne.s	@locret		; Return if yes
0008587C 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00085880 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085884 6600                       		bne.s	@notnoise	; Branch if not
00085886 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0008588A                            ; loc_72904:
0008588A                            @notnoise:
0008588A 3206                       		move.w	d6,d1
0008588C 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00085890 8001                       		or.b	d1,d0		; Latch tone data to channel
00085892 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085894 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085898 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008589E 13C6 00C0 0011             		move.b	d6,(psg_input).l
000858A4                            ; locret_7291E:
000858A4                            @locret:
000858A4 4E75                       		rts	
000858A6                            ; End of function PSGUpdateFreq
000858A6                            
000858A6                            ; ===========================================================================
000858A6                            ; loc_72920:
000858A6                            PSGSetRest:
000858A6 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
000858AA 4E75                       		rts	
000858AC                            
000858AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858AC                            
000858AC                            ; sub_72926:
000858AC                            PSGUpdateVolFX:
000858AC 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
000858B0 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
000858B4                            ; loc_7292E:
000858B4                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
000858B4 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
000858B8 7000                       		moveq	#0,d0
000858BA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
000858BE 6700                       		beq.s	SetPSGVolume
000858C0 2079 0008 487E             		movea.l	(Go_PSGIndex).l,a0
000858C6 5340                       		subq.w	#1,d0
000858C8 E548                       		lsl.w	#2,d0
000858CA 2070 0000                  		movea.l	(a0,d0.w),a0
000858CE 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
000858D2 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000858D6 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000858DA 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000858DE 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000858E0 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000858E4 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000858E6                            ; loc_72960:
000858E6                            @gotflutter:
000858E6 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000858E8 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000858EC 6500                       		blo.s	SetPSGVolume	; Branch if not
000858EE 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000858F0                            ; End of function PSGUpdateVolFX
000858F0                            
000858F0                            
000858F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858F0                            
000858F0                            ; sub_7296A:
000858F0                            SetPSGVolume:
000858F0 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000858F4 6600                       		bne.s	locret_7298A	; Return if so
000858F6 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000858FA 6600                       		bne.s	locret_7298A	; Return if so
000858FC 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00085900 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00085902                            ; loc_7297C:
00085902                            PSGSendVolume:
00085902 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00085906 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
0008590A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085910                            
00085910                            locret_7298A:
00085910 4E75                       		rts	
00085912                            ; ===========================================================================
00085912                            ; loc_7298C: PSGCheckNoteFill:
00085912                            PSGCheckNoteTimeout:
00085912 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00085916 67EA                       		beq.s	PSGSendVolume			; Branch if not
00085918 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
0008591C 66E4                       		bne.s	PSGSendVolume			; Branch if not
0008591E 4E75                       		rts	
00085920                            ; End of function SetPSGVolume
00085920                            
00085920                            ; ===========================================================================
00085920                            ; loc_7299A: FlutterDone:
00085920                            VolEnvHold:
00085920 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00085924 4E75                       		rts	
00085926                            
00085926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085926                            
00085926                            ; sub_729A0:
00085926                            PSGNoteOff:
00085926 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008592A 6600                       		bne.s	locret_729B4	; Return if so
0008592C                            ; loc_729A6:
0008592C                            SendPSGNoteOff:
0008592C 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00085930 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085934 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008593A                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0008593A                            		; risk of music accidentally playing noise because it can't detect if
0008593A                            		; the PSG4/noise channel needs muting on track initialisation.
0008593A                            		; S&K's driver fixes it by doing this:
0008593A 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
0008593E 6600                       		bne.s	locret_729B4
00085940 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085948                            
00085948                            locret_729B4:
00085948 4E75                       		rts	
0008594A                            ; End of function PSGNoteOff
0008594A                            
0008594A                            
0008594A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008594A                            
0008594A                            ; sub_729B6:
0008594A                            PSGSilenceAll:
0008594A 41F9 00C0 0011             		lea	(psg_input).l,a0
00085950 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085954 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085958 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
0008595C 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085960 4E75                       		rts	
00085962                            ; End of function PSGSilenceAll
00085962                            
00085962                            ; ===========================================================================
00085962                            ; word_729CE:
00085962                            PSGFrequencies:
00085962 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085972 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085982 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085992 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
000859A2 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000859B2 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000859C2 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
000859D2 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000859E2 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000859EE                            
000859EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859EE                            
000859EE                            ; sub_72A5A:
000859EE                            CoordFlag:
000859EE 0445 00E0                  		subi.w	#$E0,d5
000859F2 E54D                       		lsl.w	#2,d5
000859F4 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000859F8                            ; End of function CoordFlag
000859F8                            
000859F8                            ; ===========================================================================
000859F8                            ; loc_72A64:
000859F8                            coordflagLookup:
000859F8 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000859FC                            ; ===========================================================================
000859FC 6000 0000                  		bra.w	cfDetune		; $E1
00085A00                            ; ===========================================================================
00085A00 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085A04                            ; ===========================================================================
00085A04 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085A08                            ; ===========================================================================
00085A08 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085A0C                            ; ===========================================================================
00085A0C 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085A10                            ; ===========================================================================
00085A10 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085A14                            ; ===========================================================================
00085A14 6000 0000                  		bra.w	cfHoldNote		; $E7
00085A18                            ; ===========================================================================
00085A18 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085A1C                            ; ===========================================================================
00085A1C 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085A20                            ; ===========================================================================
00085A20 6000 0000                  		bra.w	cfSetTempo		; $EA
00085A24                            ; ===========================================================================
00085A24 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085A28                            ; ===========================================================================
00085A28 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085A2C                            ; ===========================================================================
00085A2C 6000 0000                  		bra.w	cfClearPush		; $ED
00085A30                            ; ===========================================================================
00085A30 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085A34                            ; ===========================================================================
00085A34 6000 0000                  		bra.w	cfSetVoice		; $EF
00085A38                            ; ===========================================================================
00085A38 6000 0000                  		bra.w	cfModulation		; $F0
00085A3C                            ; ===========================================================================
00085A3C 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085A40                            ; ===========================================================================
00085A40 6000 0000                  		bra.w	cfStopTrack		; $F2
00085A44                            ; ===========================================================================
00085A44 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085A48                            ; ===========================================================================
00085A48 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085A4C                            ; ===========================================================================
00085A4C 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085A50                            ; ===========================================================================
00085A50 6000 0000                  		bra.w	cfJumpTo		; $F6
00085A54                            ; ===========================================================================
00085A54 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085A58                            ; ===========================================================================
00085A58 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085A5C                            ; ===========================================================================
00085A5C 6000 0000                  		bra.w	cfOpF9			; $F9
00085A60                            ; ===========================================================================
00085A60                            ; loc_72ACC:
00085A60                            cfPanningAMSFMS:
00085A60 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085A62 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085A66 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085A68 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085A6C 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085A70 8200                       		or.b	d0,d1			; Mask in new value
00085A72 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085A76 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085A7A 6000 FC20                  		bra.w	WriteFMIorIIMain
00085A7E                            ; ===========================================================================
00085A7E                            
00085A7E                            locret_72AEA:
00085A7E 4E75                       		rts	
00085A80                            ; ===========================================================================
00085A80                            ; loc_72AEC: cfAlterNotes:
00085A80                            cfDetune:
00085A80 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085A84 4E75                       		rts	
00085A86                            ; ===========================================================================
00085A86                            ; loc_72AF2: cfUnknown1:
00085A86                            cfSetCommunication:
00085A86 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085A8A 4E75                       		rts	
00085A8C                            ; ===========================================================================
00085A8C                            ; loc_72AF8:
00085A8C                            cfJumpReturn:
00085A8C 7000                       		moveq	#0,d0
00085A8E 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085A92 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085A96 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085A9E 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085AA0 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085AA2 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085AA6 4E75                       		rts	
00085AA8                            ; ===========================================================================
00085AA8                            ; loc_72B14:
00085AA8                            cfFadeInToPrevious:
00085AA8 204E                       		movea.l	a6,a0
00085AAA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085AAE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085AB2                            ; loc_72B1E:
00085AB2                            @restoreramloop:
00085AB2 20D9                       		move.l	(a1)+,(a0)+
00085AB4 51C8 FFFC                  		dbf	d0,@restoreramloop
00085AB8                            
00085AB8 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085ABE 264D                       		movea.l	a5,a3
00085AC0 1C3C 0028                  		move.b	#$28,d6
00085AC4 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085AC8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085ACA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085ACE                            ; loc_72B3A:
00085ACE                            @fmloop:
00085ACE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085AD2 6700                       		beq.s	@nextfm		; Branch if not
00085AD4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085AD8 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085ADC 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085AE0 6600                       		bne.s	@nextfm		; Branch if yes
00085AE2 7000                       		moveq	#0,d0
00085AE4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085AE8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085AEC 4EBA 0000                  		jsr	SetVoice(pc)
00085AF0                            ; loc_72B5C:
00085AF0                            @nextfm:
00085AF0 DAFC 0030                  		adda.w	#TrackSz,a5
00085AF4 51CF FFD8                  		dbf	d7,@fmloop
00085AF8                            
00085AF8 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085AFA                            ; loc_72B66:
00085AFA                            @psgloop:
00085AFA 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085AFE 6700                       		beq.s	@nextpsg	; Branch if not
00085B00 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085B04 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085B08 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085B0C                            ; loc_72B78:
00085B0C                            @nextpsg:
00085B0C DAFC 0030                  		adda.w	#TrackSz,a5
00085B10 51CF FFE8                  		dbf	d7,@psgloop
00085B14                            		
00085B14 2A4B                       		movea.l	a3,a5
00085B16 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085B1C 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085B22 422E 0027                  		clr.b	f_1up_playing(a6)
00085B26 33FC 0000 00A1 1100        		startZ80
00085B2E 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085B30 4E75                       		rts	
00085B32                            ; ===========================================================================
00085B32                            ; loc_72B9E:
00085B32                            cfSetTempoDivider:
00085B32 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085B36 4E75                       		rts	
00085B38                            ; ===========================================================================
00085B38                            ; loc_72BA4: cfSetVolume:
00085B38                            cfChangeFMVolume:
00085B38 101C                       		move.b	(a4)+,d0		; Get parameter
00085B3A D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085B3E 6000 0000                  		bra.w	SendVoiceTL
00085B42                            ; ===========================================================================
00085B42                            ; loc_72BAE: cfPreventAttack:
00085B42                            cfHoldNote:
00085B42 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085B46 4E75                       		rts	
00085B48                            ; ===========================================================================
00085B48                            ; loc_72BB4: cfNoteFill
00085B48                            cfNoteTimeout:
00085B48 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085B4C 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085B50 4E75                       		rts	
00085B52                            ; ===========================================================================
00085B52                            ; loc_72BBE: cfAddKey:
00085B52                            cfChangeTransposition:
00085B52 101C                       		move.b	(a4)+,d0		; Get parameter
00085B54 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085B58 4E75                       		rts	
00085B5A                            ; ===========================================================================
00085B5A                            ; loc_72BC6:
00085B5A                            cfSetTempo:
00085B5A 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085B5E 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085B62 4E75                       		rts	
00085B64                            ; ===========================================================================
00085B64                            ; loc_72BD0: cfSetTempoMod:
00085B64                            cfSetTempoDividerAll:
00085B64 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085B68 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085B6A 7230                       		moveq	#TrackSz,d1
00085B6C 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085B6E                            ; loc_72BDA:
00085B6E                            @trackloop:
00085B6E 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085B72 D0C1                       		adda.w	d1,a0
00085B74 51CA FFF8                  		dbf	d2,@trackloop
00085B78                            
00085B78 4E75                       		rts	
00085B7A                            ; ===========================================================================
00085B7A                            ; loc_72BE6: cfChangeVolume:
00085B7A                            cfChangePSGVolume:
00085B7A 101C                       		move.b	(a4)+,d0		; Get volume change
00085B7C D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085B80 4E75                       		rts	
00085B82                            ; ===========================================================================
00085B82                            ; loc_72BEE:
00085B82                            cfClearPush:
00085B82 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085B86 4E75                       		rts	
00085B88                            ; ===========================================================================
00085B88                            ; loc_72BF4:
00085B88                            cfStopSpecialFM4:
00085B88 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085B8C 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085B90 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085B94 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085B98 6B00                       		bmi.s	@locexit					; Branch if yes
00085B9A 264D                       		movea.l	a5,a3
00085B9C 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085BA0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085BA4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085BA8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085BAC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085BB0 4EBA 0000                  		jsr	SetVoice(pc)
00085BB4 2A4B                       		movea.l	a3,a5
00085BB6                            ; loc_72C22:
00085BB6                            @locexit:
00085BB6 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085BB8 4E75                       		rts	
00085BBA                            ; ===========================================================================
00085BBA                            ; loc_72C26:
00085BBA                            cfSetVoice:
00085BBA 7000                       		moveq	#0,d0
00085BBC 101C                       		move.b	(a4)+,d0		; Get new voice
00085BBE 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085BC2 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085BC6 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085BCA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085BCE 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085BD2 6700                       		beq.s	SetVoice		; If yes, branch
00085BD4 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085BD8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085BDC 6B00                       		bmi.s	SetVoice		; If yes, branch
00085BDE 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085BE2                            
00085BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085BE2                            
00085BE2                            ; sub_72C4E:
00085BE2                            SetVoice:
00085BE2 5340                       		subq.w	#1,d0
00085BE4 6B00                       		bmi.s	@havevoiceptr
00085BE6 323C 0019                  		move.w	#25,d1
00085BEA                            ; loc_72C56:
00085BEA                            @voicemultiply:
00085BEA D2C1                       		adda.w	d1,a1
00085BEC 51C8 FFFC                  		dbf	d0,@voicemultiply
00085BF0                            ; loc_72C5C:
00085BF0                            @havevoiceptr:
00085BF0 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085BF2 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085BF6 1801                       		move.b	d1,d4
00085BF8 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085BFC 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085C00 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085C04 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085C06                            ; loc_72C72:
00085C06                            @sendvoiceloop:
00085C06 101A                       		move.b	(a2)+,d0
00085C08 1219                       		move.b	(a1)+,d1
00085C0A 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085C0E 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085C12                            
00085C12 7A03                       		moveq	#3,d5
00085C14 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085C18 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085C1C 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085C20                            ; loc_72C8C:
00085C20                            @sendtlloop:
00085C20 101A                       		move.b	(a2)+,d0
00085C22 1219                       		move.b	(a1)+,d1
00085C24 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085C26 6400                       		bcc.s	@sendtl		; Branch if not
00085C28 D203                       		add.b	d3,d1		; Include additional attenuation
00085C2A                            ; loc_72C96:
00085C2A                            @sendtl:
00085C2A 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085C2E 51CD FFF0                  		dbf	d5,@sendtlloop
00085C32                            		
00085C32 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085C36 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085C3A 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085C3E                            
00085C3E                            locret_72CAA:
00085C3E 4E75                       		rts	
00085C40                            ; End of function SetVoice
00085C40                            
00085C40                            ; ===========================================================================
00085C40                            ; byte_72CAC:
00085C40 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085C48                            
00085C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C48                            
00085C48                            ; sub_72CB4:
00085C48                            SendVoiceTL:
00085C48 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085C4C 6600                       		bne.s	@locret		; Return if so
00085C4E 7000                       		moveq	#0,d0
00085C50 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085C54 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085C58 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085C5C 6700                       		beq.s	@gotvoiceptr
00085C5E                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085C5E                            		; of a6!
00085C5E 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085C62 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085C66 6B00                       		bmi.s	@gotvoiceptr
00085C68 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085C6C                            ; loc_72CD8:
00085C6C                            @gotvoiceptr:
00085C6C 5340                       		subq.w	#1,d0
00085C6E 6B00                       		bmi.s	@gotvoice
00085C70 323C 0019                  		move.w	#25,d1
00085C74                            ; loc_72CE0:
00085C74                            @voicemultiply:
00085C74 D2C1                       		adda.w	d1,a1
00085C76 51C8 FFFC                  		dbf	d0,@voicemultiply
00085C7A                            ; loc_72CE6:
00085C7A                            @gotvoice:
00085C7A D2FC 0015                  		adda.w	#21,a1				; Want TL
00085C7E 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085C82 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085C86 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085C8A 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085C8E 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085C92 6B00                       		bmi.s	@locret				; If negative, stop
00085C94 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085C96                            ; loc_72D02:
00085C96                            @sendtlloop:
00085C96 101A                       		move.b	(a2)+,d0
00085C98 1219                       		move.b	(a1)+,d1
00085C9A E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085C9C 6400                       		bcc.s	@senttl		; Branch if not
00085C9E D203                       		add.b	d3,d1		; Include additional attenuation
00085CA0 6500                       		bcs.s	@senttl		; Branch on overflow
00085CA2 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085CA6                            ; loc_72D12:
00085CA6                            @senttl:
00085CA6 51CD FFEE                  		dbf	d5,@sendtlloop
00085CAA                            ; locret_72D16:
00085CAA                            @locret:
00085CAA 4E75                       		rts	
00085CAC                            ; End of function SendVoiceTL
00085CAC                            
00085CAC                            ; ===========================================================================
00085CAC                            ; byte_72D18:
00085CAC                            FMInstrumentOperatorTable:
00085CAC 30                         		dc.b  $30		; Detune/multiple operator 1
00085CAD 38                         		dc.b  $38		; Detune/multiple operator 3
00085CAE 34                         		dc.b  $34		; Detune/multiple operator 2
00085CAF 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085CB0 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085CB1 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085CB2 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085CB3 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085CB4 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085CB5 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085CB6 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085CB7 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085CB8 70                         		dc.b  $70		; Secondary decay rate operator 1
00085CB9 78                         		dc.b  $78		; Secondary decay rate operator 3
00085CBA 74                         		dc.b  $74		; Secondary decay rate operator 2
00085CBB 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085CBC 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085CBD 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085CBE 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085CBF 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085CC0                            FMInstrumentOperatorTable_End
00085CC0                            ; byte_72D2C:
00085CC0                            FMInstrumentTLTable:
00085CC0 40                         		dc.b  $40		; Total level operator 1
00085CC1 48                         		dc.b  $48		; Total level operator 3
00085CC2 44                         		dc.b  $44		; Total level operator 2
00085CC3 4C                         		dc.b  $4C		; Total level operator 4
00085CC4                            FMInstrumentTLTable_End
00085CC4                            ; ===========================================================================
00085CC4                            ; loc_72D30:
00085CC4                            cfModulation:
00085CC4 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085CC8 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085CCC 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085CD0 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085CD4 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085CD8 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085CDA E208                       		lsr.b	#1,d0				; ... divided by 2...
00085CDC 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085CE0 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085CE4 4E75                       		rts	
00085CE6                            ; ===========================================================================
00085CE6                            ; loc_72D52:
00085CE6                            cfEnableModulation:
00085CE6 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085CEA 4E75                       		rts	
00085CEC                            ; ===========================================================================
00085CEC                            ; loc_72D58:
00085CEC                            cfStopTrack:
00085CEC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085CF0 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085CF4 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085CF8 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085CFA 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085CFE 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085D02 4EBA F980                  		jsr	FMNoteOff(pc)
00085D06 6000                       		bra.s	@stoppedchannel
00085D08                            ; ===========================================================================
00085D08                            ; loc_72D74:
00085D08                            @stoppsg:
00085D08 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085D0C                            ; loc_72D78:
00085D0C                            @stoppedchannel:
00085D0C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085D10 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085D14 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085D16 7000                       		moveq	#0,d0
00085D18 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085D1C 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085D1E 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085D22 264D                       		movea.l	a5,a3
00085D24 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085D28 6600                       		bne.s	@getpointer		; Branch if not
00085D2A 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085D2E 6A00                       		bpl.s	@getpointer		; Branch if not
00085D30 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085D34 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085D38 6000                       		bra.s	@gotpointer
00085D3A                            ; ===========================================================================
00085D3A                            ; loc_72DA8:
00085D3A                            @getpointer:
00085D3A 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085D3C E508                       		lsl.b	#2,d0
00085D3E 2A70 0000                  		movea.l	(a0,d0.w),a5
00085D42 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085D44 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085D46 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085D4A                            ; loc_72DB8:
00085D4A                            @gotpointer:
00085D4A 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085D4E 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085D52 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085D56 4EBA FE8A                  		jsr	SetVoice(pc)
00085D5A                            ; loc_72DC8:
00085D5A                            @novoiceupd:
00085D5A 2A4B                       		movea.l	a3,a5
00085D5C 6000                       		bra.s	@locexit
00085D5E                            ; ===========================================================================
00085D5E                            ; loc_72DCC:
00085D5E                            @getpsgptr:
00085D5E 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085D62 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085D64 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085D66 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085D6A 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085D6C 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085D70 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085D72                            ; loc_72DE0:
00085D72                            @getchannelptr:
00085D72 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085D76 E608                       		lsr.b	#3,d0
00085D78 2070 0000                  		movea.l	(a0,d0.w),a0
00085D7C                            ; loc_72DEA:
00085D7C                            @gotchannelptr:
00085D7C 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085D80 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085D84 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085D8A 6600                       		bne.s	@locexit			; Branch if not
00085D8C 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085D94                            ; loc_72E02:
00085D94                            @locexit:
00085D94 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085D96 4E75                       		rts	
00085D98                            ; ===========================================================================
00085D98                            ; loc_72E06:
00085D98                            cfSetPSGNoise:
00085D98 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085D9E 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085DA2 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085DA6 6600                       		bne.s	@locret				; Return if yes
00085DA8 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085DB0                            ; locret_72E1E:
00085DB0                            @locret:
00085DB0 4E75                       		rts	
00085DB2                            ; ===========================================================================
00085DB2                            ; loc_72E20:
00085DB2                            cfDisableModulation:
00085DB2 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085DB6 4E75                       		rts	
00085DB8                            ; ===========================================================================
00085DB8                            ; loc_72E26:
00085DB8                            cfSetPSGTone:
00085DB8 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085DBC 4E75                       		rts	
00085DBE                            ; ===========================================================================
00085DBE                            ; loc_72E2C:
00085DBE                            cfJumpTo:
00085DBE 101C                       		move.b	(a4)+,d0	; High byte of offset
00085DC0 E148                       		lsl.w	#8,d0		; Shift it into place
00085DC2 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085DC4 D8C0                       		adda.w	d0,a4		; Add to current position
00085DC6 534C                       		subq.w	#1,a4		; Put back one byte
00085DC8 4E75                       		rts	
00085DCA                            ; ===========================================================================
00085DCA                            ; loc_72E38:
00085DCA                            cfRepeatAtPos:
00085DCA 7000                       		moveq	#0,d0
00085DCC 101C                       		move.b	(a4)+,d0			; Loop index
00085DCE 121C                       		move.b	(a4)+,d1			; Repeat count
00085DD0 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085DD4 6600                       		bne.s	@loopexists			; Branch if yes
00085DD6 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085DDA                            ; loc_72E48:
00085DDA                            @loopexists:
00085DDA 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085DDE 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085DE0 544C                       		addq.w	#2,a4				; Skip target address
00085DE2 4E75                       		rts	
00085DE4                            ; ===========================================================================
00085DE4                            ; loc_72E52:
00085DE4                            cfJumpToGosub:
00085DE4 7000                       		moveq	#0,d0
00085DE6 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085DEA 5900                       		subq.b	#4,d0				; Add space for another target
00085DEC 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085DF0 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085DF4 60C8                       		bra.s	cfJumpTo
00085DF6                            ; ===========================================================================
00085DF6                            ; loc_72E64:
00085DF6                            cfOpF9:
00085DF6 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085DFA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085DFE 4EBA F8B4                  		jsr	WriteFMI(pc)
00085E02 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085E06 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085E0A 6000 F8A8                  		bra.w	WriteFMI
00085E0E                            ; ===========================================================================
00085E0E                            
00085E0E                            Kos_Z80:
00085E0E                            		incbin	"sound\z80.bin", 0, $15
00085E23 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085E24                            		incbin	"sound\z80.bin", $16, 6
00085E2A 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085E2B                            		incbin	"sound\z80.bin", $1D, $93
00085EBE 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085EC0                            		incbin	"sound\z80.bin", $B2, 1
00085EC1 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085EC3                            		incbin	"sound\z80.bin", $B5, $16AB
00087564                            		even
00087564                            
00087564                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088888 00                         		even
00088888                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A110                            		even
0008A110                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091A90 00                         		even
00091A90                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000932A4 00                         		even
000932A4                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
0009404A                            		even
0009404A                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00095402                            		even
00095402                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095CFA 00                         		even
00095CFA                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095CFA                            extralifejingle_Header:
00095CFA                            	smpsHeaderStartSong 1
00095CFC 0703                       	smpsHeaderChan      $07, $03
00095CFE 0100                       	smpsHeaderTempo     $01, $00
00095D00                            
00095D04 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095D08 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095D0C 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095D10 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095D14 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095D18 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095D2E                            
00095D2E                            ; DAC Data
00095D2E                            extralifejingle_DAC:
00095D2E 807F 55                    	dc.b	nRst, $7F, $55
00095D31 E4                         	smpsFade
00095D32                            ; PSG1 Data
00095D32                            extralifejingle_PSG1:
00095D32                            ; PSG2 Data
00095D32                            extralifejingle_PSG2:
00095D32                            ; PSG3 Data
00095D32                            extralifejingle_PSG3:
00095D32 F2                         	smpsStop
00095D33                            
00095D33                            ; FM1 Data
00095D33                            extralifejingle_FM1:
00095D33 EF00                       	smpsSetvoice        $00
00095D35 E616                       	smpsAlterVol        $16
00095D37 E0C0                       	smpsPan             panCenter, $00
00095D39 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095D45 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095D49 F2                         	smpsStop
00095D4A                            
00095D4A                            ; FM2 Data
00095D4A                            extralifejingle_FM2:
00095D4A EF01                       	smpsSetvoice        $01
00095D4C E616                       	smpsAlterVol        $16
00095D4E E0C0                       	smpsPan             panCenter, $00
00095D50 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095D5C A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095D60 F2                         	smpsStop
00095D61                            
00095D61                            ; FM3 Data
00095D61                            extralifejingle_FM3:
00095D61 EF01                       	smpsSetvoice        $01
00095D63 E616                       	smpsAlterVol        $16
00095D65 E0C0                       	smpsPan             panCenter, $00
00095D67 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095D73 B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095D77 F2                         	smpsStop
00095D78                            
00095D78                            ; FM4 Data
00095D78                            extralifejingle_FM4:
00095D78 EF02                       	smpsSetvoice        $02
00095D7A E0C0                       	smpsPan             panCenter, $00
00095D7C 8001                       	dc.b	nRst, $01
00095D7E E616                       	smpsAlterVol        $16
00095D80 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095D8C C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095D90 F2                         	smpsStop
00095D91                            
00095D91                            ; FM5 Data
00095D91                            extralifejingle_FM5:
00095D91 EF03                       	smpsSetvoice        $03
00095D93 E602                       	smpsAlterVol        $02
00095D95 E0C0                       	smpsPan             panCenter, $00
00095D97 8001                       	dc.b	nRst, $01
00095D99 EF05                       	smpsSetvoice        $05
00095D9B E60A                       	smpsAlterVol        $0A
00095D9D E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095DA9 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095DB5 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095DC1 C1C4 80                    	dc.b	nE5, nG5, nRst
00095DC4 F2                         	smpsStop
00095DC5                            
00095DC5                            ; FM6 Data
00095DC5                            extralifejingle_FM6:
00095DC5 EF04                       	smpsSetvoice        $04
00095DC7 E607                       	smpsAlterVol        $07
00095DC9 E0C0                       	smpsPan             panCenter, $00
00095DCB 8001                       	dc.b	nRst, $01
00095DCD EF06                       	smpsSetvoice        $06
00095DCF E6F9                       	smpsAlterVol        $F9
00095DD1 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095DD8 F2                         	smpsStop
00095DD9                            
00095DD9                            extralifejingle_Voices:
00095DD9                            ;	Voice $00
00095DD9                            ;	$3A
00095DD9                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095DD9                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095DD9                            	smpsVcAlgorithm     $02
00095DD9                            	smpsVcFeedback      $07
00095DD9                            	smpsVcUnusedBits    $00
00095DD9                            	smpsVcDetune        $03, $07, $07, $03
00095DD9                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095DD9                            	smpsVcRateScale     $00, $00, $00, $00
00095DD9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095DD9                            	smpsVcAmpMod        $00, $00, $00, $00
00095DD9                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095DD9                            	smpsVcDecayRate2    $00, $00, $00, $00
00095DD9                            	smpsVcDecayLevel    $00, $00, $00, $00
00095DD9                            	smpsVcReleaseRate   $05, $03, $03, $03
00095DF2                            
00095DF2                            ;	Voice $01
00095DF2                            ;	$3A
00095DF2                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095DF2                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095DF2                            	smpsVcAlgorithm     $02
00095DF2                            	smpsVcFeedback      $07
00095DF2                            	smpsVcUnusedBits    $00
00095DF2                            	smpsVcDetune        $03, $07, $07, $03
00095DF2                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095DF2                            	smpsVcRateScale     $00, $00, $00, $00
00095DF2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095DF2                            	smpsVcAmpMod        $00, $00, $00, $00
00095DF2                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095DF2                            	smpsVcDecayRate2    $00, $00, $00, $00
00095DF2                            	smpsVcDecayLevel    $00, $00, $00, $00
00095DF2                            	smpsVcReleaseRate   $05, $03, $03, $03
00095E0B                            
00095E0B                            ;	Voice $02
00095E0B                            ;	$3A
00095E0B                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095E0B                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095E0B                            	smpsVcAlgorithm     $02
00095E0B                            	smpsVcFeedback      $07
00095E0B                            	smpsVcUnusedBits    $00
00095E0B                            	smpsVcDetune        $03, $07, $07, $03
00095E0B                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095E0B                            	smpsVcRateScale     $00, $00, $00, $00
00095E0B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095E0B                            	smpsVcAmpMod        $00, $00, $00, $00
00095E0B                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095E0B                            	smpsVcDecayRate2    $00, $00, $00, $00
00095E0B                            	smpsVcDecayLevel    $00, $00, $00, $00
00095E0B                            	smpsVcReleaseRate   $05, $03, $03, $03
00095E24                            
00095E24                            ;	Voice $03
00095E24                            ;	$00
00095E24                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095E24                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095E24                            	smpsVcAlgorithm     $00
00095E24                            	smpsVcFeedback      $00
00095E24                            	smpsVcUnusedBits    $00
00095E24                            	smpsVcDetune        $00, $00, $00, $00
00095E24                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095E24                            	smpsVcRateScale     $00, $00, $00, $00
00095E24                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095E24                            	smpsVcAmpMod        $00, $00, $00, $00
00095E24                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095E24                            	smpsVcDecayRate2    $00, $00, $00, $00
00095E24                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095E24                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095E3D                            
00095E3D                            ;	Voice $04
00095E3D                            ;	$03
00095E3D                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095E3D                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095E3D                            	smpsVcAlgorithm     $03
00095E3D                            	smpsVcFeedback      $00
00095E3D                            	smpsVcUnusedBits    $00
00095E3D                            	smpsVcDetune        $03, $04, $04, $06
00095E3D                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095E3D                            	smpsVcRateScale     $00, $00, $00, $00
00095E3D                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095E3D                            	smpsVcAmpMod        $00, $00, $00, $00
00095E3D                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095E3D                            	smpsVcDecayRate2    $06, $04, $00, $01
00095E3D                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095E3D                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095E56                            
00095E56                            ;	Voice $05
00095E56                            ;	$34
00095E56                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095E56                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095E56                            	smpsVcAlgorithm     $04
00095E56                            	smpsVcFeedback      $06
00095E56                            	smpsVcUnusedBits    $00
00095E56                            	smpsVcDetune        $07, $00, $07, $03
00095E56                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095E56                            	smpsVcRateScale     $00, $01, $00, $02
00095E56                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095E56                            	smpsVcAmpMod        $00, $00, $00, $00
00095E56                            	smpsVcDecayRate1    $08, $07, $07, $14
00095E56                            	smpsVcDecayRate2    $00, $00, $00, $00
00095E56                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095E56                            	smpsVcReleaseRate   $07, $07, $04, $06
00095E6F                            
00095E6F                            ;	Voice $06
00095E6F                            ;	$30
00095E6F                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095E6F                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095E6F                            	smpsVcAlgorithm     $00
00095E6F                            	smpsVcFeedback      $06
00095E6F                            	smpsVcUnusedBits    $00
00095E6F                            	smpsVcDetune        $00, $00, $00, $00
00095E6F                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095E6F                            	smpsVcRateScale     $01, $00, $00, $02
00095E6F                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095E6F                            	smpsVcAmpMod        $00, $00, $00, $00
00095E6F                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095E6F                            	smpsVcDecayRate2    $08, $05, $18, $08
00095E6F                            	smpsVcDecayLevel    $01, $00, $00, $06
00095E6F                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095E88                            
00095E88                            
00095E88                            		even
00095E88                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000966E0 00                         		even
000966E0                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096C00                            		even
00096C00                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096EC2 00                         		even
00096EC2                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097D1A                            		even
00097D1A                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097F66 00                         		even
00097F66                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
0009829C 00                         		even
0009829C                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00098448 00                         		even
00098448                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00098656 00                         		even
00098656                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
0009893A 00                         		even
0009893A                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
0009906A 00                         		even
0009906A                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00099138                            		even
00099138                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000995A6 00                         		even
000995A6                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009A09C                            		even
0009A09C                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AC7E                            		even
0009AC7E                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009BF84 00                         		even
0009BF84                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009BF84                            PasswordEntry_Header:
0009BF84                            	smpsHeaderStartSong 3
0009BF86 0603                       	smpsHeaderChan      $06, $03
0009BF88 0105                       	smpsHeaderTempo     $01, $05
0009BF8A                            
0009BF8E 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009BF92 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009BF96 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009BF9A 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009BF9E 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009BFB4                            
0009BFB4                            ; FM1 Data
0009BFB4                            PasswordEntry_FM1:
0009BFB4 EF00                       	smpsSetvoice        $00
0009BFBB                            
0009BFBB                            PasswordEntry_Jump00:
0009BFBB CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009BFC7 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009BFD3 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009BFDF C918 CB                    	dc.b	nC6, $18, nD6
0009BFE2 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009BFE5                            
0009BFE5                            ; FM2 Data
0009BFE5                            PasswordEntry_FM2:
0009BFE5 EF01                       	smpsSetvoice        $01
0009BFE7                            
0009BFE7                            PasswordEntry_Jump03:
0009BFE7 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009BFF3 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009BFFF AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009C00B AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009C015 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009C018                            
0009C018                            ; FM3 Data
0009C018                            PasswordEntry_FM3:
0009C018 E080                       	smpsPan             panLeft, $00
0009C01A EF02                       	smpsSetvoice        $02
0009C01C                            
0009C01C                            PasswordEntry_Jump02:
0009C01C C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009C028 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009C034 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009C040 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009C04C C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009C058 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009C064 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009C070 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009C07C BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009C088 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C094 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C09C F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009C09F                            
0009C09F                            ; FM4 Data
0009C09F                            PasswordEntry_FM4:
0009C09F E040                       	smpsPan             panRight, $00
0009C0A1 EF02                       	smpsSetvoice        $02
0009C0A3                            
0009C0A3                            PasswordEntry_Jump01:
0009C0A3 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009C0AF BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009C0BB BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009C0C7 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009C0D3 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009C0DF BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C0EB C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C0F7 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C103 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C10F BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C11B BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C123 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C126                            
0009C126                            ; FM5 Data
0009C126                            PasswordEntry_FM5:
0009C126 EF00                       	smpsSetvoice        $00
0009C128 E1FB                       	smpsAlterNote       $FB
0009C12A 800C                       	dc.b	nRst, $0C
0009C12C F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C12F                            
0009C12F                            ; PSG1 Data
0009C12F                            PasswordEntry_PSG1:
0009C12F C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C13B CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C147 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C153 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C15F C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C16B C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C177 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C17B F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C17E                            
0009C17E                            ; PSG2 Data
0009C17E                            PasswordEntry_PSG2:
0009C17E E1FF                       	smpsAlterNote       $FF
0009C180 800C                       	dc.b	nRst, $0C
0009C182 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C185                            
0009C185                            ; PSG3 Data
0009C185                            PasswordEntry_PSG3:
0009C185 F502                       	smpsPSGvoice        fTone_02
0009C187 F3E7                       	smpsPSGform         $E7
0009C189 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C195 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C1A1 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C1A8 F503                       	smpsPSGvoice        fTone_03
0009C1AA C5                         	dc.b	nAb5
0009C1AB F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C1AE                            
0009C1AE                            ; DAC Data
0009C1AE                            PasswordEntry_DAC:
0009C1AE 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C1BA 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C1C2 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C1C7 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C1D3 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C1DB                            
0009C1DB                            PasswordEntry_Loop00:
0009C1DB 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C1E7 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C1EF F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C1F4 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C200 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C20A F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C20D                            
0009C20D                            PasswordEntry_Voices:
0009C20D                            ;	Voice $00
0009C20D                            ;	$04
0009C20D                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C20D                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C20D                            	smpsVcAlgorithm     $04
0009C20D                            	smpsVcFeedback      $00
0009C20D                            	smpsVcUnusedBits    $00
0009C20D                            	smpsVcDetune        $00, $00, $00, $00
0009C20D                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C20D                            	smpsVcRateScale     $00, $00, $00, $00
0009C20D                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C20D                            	smpsVcAmpMod        $00, $00, $00, $00
0009C20D                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C20D                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C20D                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C20D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C226                            
0009C226                            ;	Voice $01
0009C226                            ;	$39
0009C226                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C226                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C226                            	smpsVcAlgorithm     $01
0009C226                            	smpsVcFeedback      $07
0009C226                            	smpsVcUnusedBits    $00
0009C226                            	smpsVcDetune        $00, $04, $06, $00
0009C226                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C226                            	smpsVcRateScale     $01, $01, $01, $00
0009C226                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C226                            	smpsVcAmpMod        $00, $00, $00, $00
0009C226                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C226                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C226                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C226                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C23F                            
0009C23F                            ;	Voice $02
0009C23F                            ;	$2C
0009C23F                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C23F                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C23F                            	smpsVcAlgorithm     $04
0009C23F                            	smpsVcFeedback      $05
0009C23F                            	smpsVcUnusedBits    $00
0009C23F                            	smpsVcDetune        $00, $02, $00, $04
0009C23F                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C23F                            	smpsVcRateScale     $00, $00, $00, $00
0009C23F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C23F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C23F                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C23F                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C23F                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C23F                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C258                            
0009C258                            
0009C258                            		even	
0009C258                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
0009C258                            ToxicLandfill_Header:
0009C258                            	smpsHeaderStartSong 1
0009C25A 0603                       	smpsHeaderChan      $06, $03
0009C25C 0208                       	smpsHeaderTempo     $02, $08
0009C25E                            
0009C262 0000 0C0C                  	smpsHeaderFM        ToxicLandfill_FM1,	$0C, $0C
0009C266 0000 0C0C                  	smpsHeaderFM        ToxicLandfill_FM2,	$0C, $0C	
0009C26A 0000 0009                  	smpsHeaderFM        ToxicLandfill_FM3,	$00, $09
0009C26E 0000 0009                  	smpsHeaderFM        ToxicLandfill_FM4,	$00, $09
0009C272 0000 F413                  	smpsHeaderFM        ToxicLandfill_FM5,	$F4, $13
0009C288                            
0009C288                            ; DAC Data
0009C288                            ToxicLandfill_DAC:
0009C288 E0C0                       	smpsPan             panCenter, $00
0009C28A 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
0009C296 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
0009C2A1                            
0009C2A1                            ToxicLandfill_Loop00:
0009C2A1 82                         	dc.b	dSnare
0009C2A2                            
0009C2A2                            ToxicLandfill_Loop01:
0009C2A2 82                         	dc.b	dSnare
0009C2A3                            
0009C2A3                            ToxicLandfill_Jump00:
0009C2A3 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
0009C2AF 0381 0603                  	dc.b	$03, dKick, $06, $03
0009C2B3 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
0009C2B8 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
0009C2C4 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
0009C2CC F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
0009C2D1                            
0009C2D1                            ToxicLandfill_Loop06:
0009C2D1 82                         	dc.b	dSnare
0009C2D2                            
0009C2D2                            ToxicLandfill_Loop02:
0009C2D2 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
0009C2D6 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
0009C2DB                            
0009C2DB                            ToxicLandfill_Loop03:
0009C2DB 8281 81                    	dc.b	dSnare, dKick, dKick
0009C2DE F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
0009C2E3                            
0009C2E3                            ToxicLandfill_Loop04:
0009C2E3 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
0009C2E7 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
0009C2EC 8182 81                    	dc.b	dKick, dSnare, dKick
0009C2EF                            
0009C2EF                            ToxicLandfill_Loop05:
0009C2EF 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
0009C2F4 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
0009C2F9 0303 03                    	dc.b	$03, $03, $03
0009C2FC F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
0009C301                            
0009C301                            ToxicLandfill_Loop08:
0009C301 03                         	dc.b	$03
0009C302                            
0009C302                            ToxicLandfill_Loop07:
0009C302 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
0009C30B F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
0009C310 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
0009C317 F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
0009C31C                            
0009C31C                            ToxicLandfill_Loop0D:
0009C31C 82                         	dc.b	dSnare
0009C31D                            
0009C31D                            ToxicLandfill_Loop09:
0009C31D 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
0009C321 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
0009C326                            
0009C326                            ToxicLandfill_Loop0A:
0009C326 8281 81                    	dc.b	dSnare, dKick, dKick
0009C329 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
0009C32E                            
0009C32E                            ToxicLandfill_Loop0B:
0009C32E 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
0009C332 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
0009C337 8182 81                    	dc.b	dKick, dSnare, dKick
0009C33A                            
0009C33A                            ToxicLandfill_Loop0C:
0009C33A 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
0009C33F F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
0009C344 0303 03                    	dc.b	$03, $03, $03
0009C347 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
0009C34C                            
0009C34C                            ToxicLandfill_Loop0E:
0009C34C 03                         	dc.b	$03
0009C34D                            
0009C34D                            ToxicLandfill_Loop0F:
0009C34D 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
0009C359 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
0009C35E F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
0009C363 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
0009C36F 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
0009C377 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
0009C37C                            
0009C37C                            ToxicLandfill_Loop10:
0009C37C 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
0009C385 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
0009C38A 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
0009C392 F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
0009C397 F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
0009C39A                            
0009C39A                            ; FM3 Data
0009C39A                            ToxicLandfill_FM3:
0009C39A E0C0                       	smpsPan             panCenter, $00
0009C39C EF00                       	smpsSetvoice        $00
0009C39E 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009C3AA AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
0009C3B2                            
0009C3B2                            ToxicLandfill_Loop3A:
0009C3B2 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
0009C3BE 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
0009C3CA AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
0009C3D6 A706 06AA                  	dc.b	nD3, $06, $06, nF3
0009C3DA F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
0009C3DF                            
0009C3DF                            ToxicLandfill_Loop3C:
0009C3DF AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009C3EB A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
0009C3F7 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
0009C403 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
0009C40B                            
0009C40B                            ToxicLandfill_Loop3B:
0009C40B AA02 A901                  	dc.b	nF3, $02, nE3, $01
0009C40F F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
0009C414 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
0009C41B F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
0009C420                            
0009C420                            ToxicLandfill_Loop3D:
0009C420 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
0009C42C F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
0009C431                            
0009C431                            ToxicLandfill_Loop3E:
0009C431 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009C43C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
0009C441 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
0009C446                            
0009C446                            ToxicLandfill_Loop40:
0009C446 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
0009C452 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
0009C45E AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009C46A B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
0009C472                            
0009C472                            ToxicLandfill_Loop3F:
0009C472 B602 B501                  	dc.b	nF4, $02, nE4, $01
0009C476 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
0009C47B B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
0009C482 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
0009C487                            
0009C487                            ToxicLandfill_Loop41:
0009C487 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
0009C493 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
0009C49F B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
0009C4AB B306 06B6                  	dc.b	nD4, $06, $06, nF4
0009C4AF F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
0009C4B4                            
0009C4B4                            ToxicLandfill_Loop42:
0009C4B4 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009C4BF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
0009C4C4                            
0009C4C4                            ToxicLandfill_Loop43:
0009C4C4 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
0009C4CF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
0009C4D4 F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop42
0009C4D9 F6FE D7                    	smpsJump            ToxicLandfill_Loop3A
0009C4DC                            
0009C4DC                            ; FM4 Data
0009C4DC                            ToxicLandfill_FM4:
0009C4DC E0C0                       	smpsPan             panCenter, $00
0009C4DE EF00                       	smpsSetvoice        $00
0009C4E0 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009C4EC AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
0009C4F4                            
0009C4F4                            ToxicLandfill_Loop30:
0009C4F4 B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
0009C500 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
0009C50C AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
0009C518 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
0009C51C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop30
0009C521                            
0009C521                            ToxicLandfill_Loop32:
0009C521 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
0009C52D AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
0009C539 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
0009C545 B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
0009C54D                            
0009C54D                            ToxicLandfill_Loop31:
0009C54D AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
0009C551 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop31
0009C556 AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
0009C55D F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop32
0009C562                            
0009C562                            ToxicLandfill_Loop33:
0009C562 AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
0009C56E F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop33
0009C573                            
0009C573                            ToxicLandfill_Loop34:
0009C573 ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
0009C57E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop34
0009C583 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop33
0009C588                            
0009C588                            ToxicLandfill_Loop36:
0009C588 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
0009C594 B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
0009C5A0 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
0009C5AC BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
0009C5B4                            
0009C5B4                            ToxicLandfill_Loop35:
0009C5B4 BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
0009C5B8 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop35
0009C5BD BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
0009C5C4 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop36
0009C5C9                            
0009C5C9                            ToxicLandfill_Loop37:
0009C5C9 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
0009C5D5 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
0009C5E1 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
0009C5ED B806 06BB                  	dc.b	nG4, $06, $06, nBb4
0009C5F1 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop37
0009C5F6 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
0009C602 B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
0009C60E B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
0009C61A B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
0009C626 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
0009C632 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
0009C638                            
0009C638                            ToxicLandfill_Loop38:
0009C638 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
0009C643 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
0009C648                            
0009C648                            ToxicLandfill_Loop39:
0009C648 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
0009C653 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop39
0009C658 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop38
0009C65D B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
0009C669 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
0009C673 F6FE 7F                    	smpsJump            ToxicLandfill_Loop30
0009C676                            
0009C676                            ; FM1 Data
0009C676                            ToxicLandfill_FM1:
0009C676 E0C0                       	smpsPan             panCenter, $00
0009C678 EF01                       	smpsSetvoice        $01
0009C67A                            
0009C67A                            ToxicLandfill_Loop23:
0009C67A 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
0009C686 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
0009C692 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
0009C69B F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop23
0009C6A0 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
0009C6AC 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
0009C6B8 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
0009C6C4 A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
0009C6CC                            
0009C6CC                            ToxicLandfill_Loop24:
0009C6CC A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009C6D8 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop24
0009C6DD A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
0009C6E9 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
0009C6EF F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop24
0009C6F4                            
0009C6F4                            ToxicLandfill_Loop27:
0009C6F4 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
0009C6F9                            
0009C6F9                            ToxicLandfill_Loop25:
0009C6F9 9999 A3                    	dc.b	nC2, nC2, nBb2
0009C6FC F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop25
0009C701 99A3                       	dc.b	nC2, nBb2
0009C703                            
0009C703                            ToxicLandfill_Loop26:
0009C703 99A3 99                    	dc.b	nC2, nBb2, nC2
0009C706 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop26
0009C70B 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
0009C710 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop27
0009C715                            
0009C715                            ToxicLandfill_Loop28:
0009C715 A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
0009C721 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop28
0009C726                            
0009C726                            ToxicLandfill_Loop29:
0009C726 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
0009C730 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop29
0009C735 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop28
0009C73A                            
0009C73A                            ToxicLandfill_Loop2C:
0009C73A A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
0009C73F                            
0009C73F                            ToxicLandfill_Loop2A:
0009C73F 9999 A3                    	dc.b	nC2, nC2, nBb2
0009C742 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2A
0009C747 99A3                       	dc.b	nC2, nBb2
0009C749                            
0009C749                            ToxicLandfill_Loop2B:
0009C749 99A3 99                    	dc.b	nC2, nBb2, nC2
0009C74C F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop2B
0009C751 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
0009C756 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop2C
0009C75B                            
0009C75B                            ToxicLandfill_Loop2D:
0009C75B A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009C767 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2D
0009C76C A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
0009C778 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
0009C77E F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2D
0009C783                            
0009C783                            ToxicLandfill_Loop2E:
0009C783 A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
0009C78E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
0009C793                            
0009C793                            ToxicLandfill_Loop2F:
0009C793 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
0009C79D F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2F
0009C7A2 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2E
0009C7A7 F6FF 23                    	smpsJump            ToxicLandfill_Loop24
0009C7AA                            
0009C7AA                            ; FM2 Data
0009C7AA                            ToxicLandfill_FM2:
0009C7AA E0C0                       	smpsPan             panCenter, $00
0009C7AC EF01                       	smpsSetvoice        $01
0009C7AE                            
0009C7AE                            ToxicLandfill_Loop16:
0009C7AE 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
0009C7BA 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
0009C7C6 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
0009C7CF F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop16
0009C7D4 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
0009C7E0 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
0009C7EC 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
0009C7F8 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
0009C7FD                            
0009C7FD                            ToxicLandfill_Loop17:
0009C7FD 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
0009C809 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop17
0009C80E 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
0009C81A 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
0009C820 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop17
0009C825                            
0009C825                            ToxicLandfill_Loop1A:
0009C825 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
0009C82A                            
0009C82A                            ToxicLandfill_Loop18:
0009C82A 8D8D 97                    	dc.b	nC1, nC1, nBb1
0009C82D F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop18
0009C832 8D97                       	dc.b	nC1, nBb1
0009C834                            
0009C834                            ToxicLandfill_Loop19:
0009C834 8D97 8D                    	dc.b	nC1, nBb1, nC1
0009C837 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop19
0009C83C 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
0009C841 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop1A
0009C846                            
0009C846                            ToxicLandfill_Loop1B:
0009C846 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
0009C852 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
0009C857                            
0009C857                            ToxicLandfill_Loop1C:
0009C857 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
0009C861 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
0009C866 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop1B
0009C86B                            
0009C86B                            ToxicLandfill_Loop1F:
0009C86B 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
0009C870                            
0009C870                            ToxicLandfill_Loop1D:
0009C870 8D8D 97                    	dc.b	nC1, nC1, nBb1
0009C873 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop1D
0009C878 8D97                       	dc.b	nC1, nBb1
0009C87A                            
0009C87A                            ToxicLandfill_Loop1E:
0009C87A 8D97 8D                    	dc.b	nC1, nBb1, nC1
0009C87D F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop1E
0009C882 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
0009C887 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop1F
0009C88C                            
0009C88C                            ToxicLandfill_Loop20:
0009C88C 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
0009C898 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop20
0009C89D 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
0009C8A9 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
0009C8AF F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop20
0009C8B4                            
0009C8B4                            ToxicLandfill_Loop21:
0009C8B4 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
0009C8BF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop21
0009C8C4                            
0009C8C4                            ToxicLandfill_Loop22:
0009C8C4 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
0009C8CE F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop22
0009C8D3 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop21
0009C8D8 F6FF 23                    	smpsJump            ToxicLandfill_Loop17
0009C8DB                            
0009C8DB                            ; FM5 Data
0009C8DB                            ToxicLandfill_FM5:
0009C8DB E0C0                       	smpsPan             panCenter, $00
0009C8DD EF02                       	smpsSetvoice        $02
0009C8DF 80                         	dc.b	nRst
0009C8E0                            
0009C8E0                            ToxicLandfill_Loop11:
0009C8E0 70                         	dc.b	$70
0009C8E1 F700 18FF FB               	smpsLoop            $00, $18, ToxicLandfill_Loop11
0009C8E6                            
0009C8E6                            ToxicLandfill_Loop12:
0009C8E6 BD06 B8BB BC03 BD09 B806+  	dc.b	nC5, $06, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009C8F2 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop12
0009C8F7                            
0009C8F7                            ToxicLandfill_Loop13:
0009C8F7 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
0009C902 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop13
0009C907                            
0009C907                            ToxicLandfill_Loop14:
0009C907 C9C4 C7C8 03C9 09C4 06C7+  	dc.b	nC6, nG5, nBb5, nB5, $03, nC6, $09, nG5, $06, nBb5, nB5
0009C912 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop14
0009C917                            
0009C917                            ToxicLandfill_Loop15:
0009C917 C9C2 C4C7 03C9 09C2 06C4+  	dc.b	nC6, nF5, nG5, nBb5, $03, nC6, $09, nF5, $06, nG5, nBb5
0009C922 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
0009C927 8030                       	dc.b	nRst, $30
0009C929 E0C0                       	smpsPan             panCenter, $00
0009C92B EF02                       	smpsSetvoice        $02
0009C92D F2                         	smpsStop
0009C92E                            
0009C92E                            ; PSG1 Data
0009C92E                            ToxicLandfill_PSG1:
0009C92E 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
0009C933                            
0009C933                            ToxicLandfill_Jump03:
0009C933 80                         	dc.b	nRst
0009C934                            
0009C934                            ToxicLandfill_Loop4C:
0009C934 60                         	dc.b	$60
0009C935 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop4C
0009C93A                            
0009C93A                            ToxicLandfill_Loop4D:
0009C93A A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009C946 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
0009C94B                            
0009C94B                            ToxicLandfill_Loop4E:
0009C94B A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
0009C956 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
0009C95B                            
0009C95B                            ToxicLandfill_Loop4F:
0009C95B A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009C966 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4F
0009C96B A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
0009C977 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
0009C983                            
0009C983                            ToxicLandfill_Loop50:
0009C983 6E                         	dc.b	$6E
0009C984 F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop50
0009C989                            
0009C989                            ToxicLandfill_Loop51:
0009C989 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009C995 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop51
0009C99A                            
0009C99A                            ToxicLandfill_Loop52:
0009C99A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
0009C9A5 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop52
0009C9AA F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop51
0009C9AF                            
0009C9AF                            ToxicLandfill_Loop53:
0009C9AF A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009C9BA F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop53
0009C9BF A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
0009C9CB 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
0009C9D7 01                         	dc.b	$01
0009C9D8 F6FF 59                    	smpsJump            ToxicLandfill_Jump03
0009C9DB                            
0009C9DB                            ; PSG2 Data
0009C9DB                            ToxicLandfill_PSG2:
0009C9DB 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
0009C9E0                            
0009C9E0                            ToxicLandfill_Jump02:
0009C9E0 80                         	dc.b	nRst
0009C9E1                            
0009C9E1                            ToxicLandfill_Loop46:
0009C9E1 60                         	dc.b	$60
0009C9E2 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop46
0009C9E7 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009C9F3 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
0009C9FF 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CA0B A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CA17 9EA0 9B9E 9F03 A009 9B06+  	dc.b	nF2, nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CA23 A09B 9E9F 0380 01A0 089B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nRst, $01, nG2, $08, nD2, $06, nF2
0009CA2F 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CA3B A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CA47 9E05 80                    	dc.b	nF2, $05, nRst
0009CA4A                            
0009CA4A                            ToxicLandfill_Loop47:
0009CA4A 60                         	dc.b	$60
0009CA4B F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop47
0009CA50 01                         	dc.b	$01
0009CA51                            
0009CA51                            ToxicLandfill_Loop48:
0009CA51 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CA5D A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
0009CA69 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CA75 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CA81 9E                         	dc.b	nF2
0009CA82 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop48
0009CA87                            
0009CA87                            ToxicLandfill_Loop49:
0009CA87 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CA92 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop49
0009CA97                            
0009CA97                            ToxicLandfill_Loop4A:
0009CA97 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CAA2 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4A
0009CAA7                            
0009CAA7                            ToxicLandfill_Loop4B:
0009CAA7 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CAB2 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
0009CAB7 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
0009CAC3 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
0009CACF 01                         	dc.b	$01
0009CAD0 F6FF 0E                    	smpsJump            ToxicLandfill_Jump02
0009CAD3                            
0009CAD3                            ; PSG3 Data
0009CAD3                            ToxicLandfill_PSG3:
0009CAD3 F3E7                       	smpsPSGform         $E7
0009CAD5 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
0009CADD                            
0009CADD                            ToxicLandfill_Loop44:
0009CADD 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
0009CAE2 F501                       	smpsPSGvoice        fTone_01
0009CAE4 0C                         	dc.b	$0C
0009CAE5 F502                       	smpsPSGvoice        fTone_02
0009CAE7 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop44
0009CAEC 0603 03                    	dc.b	$06, $03, $03
0009CAEF F501                       	smpsPSGvoice        fTone_01
0009CAF1 06                         	dc.b	$06
0009CAF2 F502                       	smpsPSGvoice        fTone_02
0009CAF4 03                         	dc.b	$03
0009CAF5 F501                       	smpsPSGvoice        fTone_01
0009CAF7 0906 0606                  	dc.b	$09, $06, $06, $06
0009CAFB                            
0009CAFB                            ToxicLandfill_Jump01:
0009CAFB E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
0009CB03 F502                       	smpsPSGvoice        fTone_02
0009CB05 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
0009CB09 F501                       	smpsPSGvoice        fTone_01
0009CB0B 18                         	dc.b	$18
0009CB0C F502                       	smpsPSGvoice        fTone_02
0009CB0E 1806                       	dc.b	$18, $06
0009CB10 F501                       	smpsPSGvoice        fTone_01
0009CB12 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
0009CB18 F502                       	smpsPSGvoice        fTone_02
0009CB1A 1818 18                    	dc.b	$18, $18, $18
0009CB1D F501                       	smpsPSGvoice        fTone_01
0009CB1F 18                         	dc.b	$18
0009CB20 F502                       	smpsPSGvoice        fTone_02
0009CB22 1806                       	dc.b	$18, $06
0009CB24 F501                       	smpsPSGvoice        fTone_01
0009CB26 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
0009CB32 F502                       	smpsPSGvoice        fTone_02
0009CB34 1818 18                    	dc.b	$18, $18, $18
0009CB37 F501                       	smpsPSGvoice        fTone_01
0009CB39 18                         	dc.b	$18
0009CB3A F502                       	smpsPSGvoice        fTone_02
0009CB3C 1806                       	dc.b	$18, $06
0009CB3E F501                       	smpsPSGvoice        fTone_01
0009CB40 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
0009CB46 F502                       	smpsPSGvoice        fTone_02
0009CB48 1818 18                    	dc.b	$18, $18, $18
0009CB4B F501                       	smpsPSGvoice        fTone_01
0009CB4D 18                         	dc.b	$18
0009CB4E F502                       	smpsPSGvoice        fTone_02
0009CB50 1806                       	dc.b	$18, $06
0009CB52 F501                       	smpsPSGvoice        fTone_01
0009CB54 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
0009CB59                            
0009CB59                            ToxicLandfill_Loop45:
0009CB59 59E7                       	dc.b	$59, smpsNoAttack
0009CB5B F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop45
0009CB60 5A                         	dc.b	$5A
0009CB61 F6FF 98                    	smpsJump            ToxicLandfill_Jump01
0009CB64                            
0009CB64                            
0009CB64                            ToxicLandfill_Voices:
0009CB64                            ;	Voice $00
0009CB64                            ;	$29
0009CB64                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
0009CB64                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
0009CB64                            	smpsVcAlgorithm     $01
0009CB64                            	smpsVcFeedback      $05
0009CB64                            	smpsVcUnusedBits    $00
0009CB64                            	smpsVcDetune        $00, $00, $00, $03
0009CB64                            	smpsVcCoarseFreq    $01, $02, $02, $03
0009CB64                            	smpsVcRateScale     $00, $00, $00, $00
0009CB64                            	smpsVcAttackRate    $19, $1F, $1F, $1F
0009CB64                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB64                            	smpsVcDecayRate1    $0B, $00, $02, $00
0009CB64                            	smpsVcDecayRate2    $03, $00, $02, $03
0009CB64                            	smpsVcDecayLevel    $01, $00, $01, $00
0009CB64                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
0009CB7D                            	
0009CB7D                            ;	Voice $01
0009CB7D                            ;	$20
0009CB7D                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CB7D                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $00
0009CB7D                            	smpsVcAlgorithm     $00
0009CB7D                            	smpsVcFeedback      $04
0009CB7D                            	smpsVcUnusedBits    $00
0009CB7D                            	smpsVcDetune        $03, $03, $03, $03
0009CB7D                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CB7D                            	smpsVcRateScale     $02, $02, $03, $03
0009CB7D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB7D                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB7D                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CB7D                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CB7D                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CB7D                            	smpsVcReleaseRate   $08, $00, $00, $00
0009CB96                            
0009CB96                            ;	Voice $02
0009CB96                            ;	$2C
0009CB96                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
0009CB96                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
0009CB96                            	smpsVcAlgorithm     $04
0009CB96                            	smpsVcFeedback      $05
0009CB96                            	smpsVcUnusedBits    $00
0009CB96                            	smpsVcDetune        $03, $03, $07, $07
0009CB96                            	smpsVcCoarseFreq    $04, $04, $08, $02
0009CB96                            	smpsVcRateScale     $00, $00, $00, $00
0009CB96                            	smpsVcAttackRate    $12, $1F, $12, $1F
0009CB96                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB96                            	smpsVcDecayRate1    $0A, $00, $0A, $00
0009CB96                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CB96                            	smpsVcDecayLevel    $01, $00, $01, $00
0009CB96                            	smpsVcReleaseRate   $06, $00, $06, $00
0009CBB0 00                         		even			
0009CBB0                            ; ---------------------------------------------------------------------------
0009CBB0                            ; Sound	effect pointers
0009CBB0                            ; ---------------------------------------------------------------------------
0009CBB0                            SoundIndex:
0009CBB0 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009CBB4 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009CBB8 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009CBBC 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009CBC0 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009CBC4 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009CBC8 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009CBCC 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009CBD0 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009CBD4 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009CBD8 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009CBDC 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009CBE0 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009CBE4 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009CBE8 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009CBEC 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009CBF0 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009CBF4 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009CBF8 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009CBFC 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009CC00 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009CC04 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009CC08 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009CC0C 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009CC10 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009CC14 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009CC18 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009CC1C 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009CC20 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009CC24 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009CC28 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009CC2C 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009CC30 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009CC34 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009CC38 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009CC3C 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009CC40 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009CC44 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009CC48 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009CC4C 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009CC50 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009CC54 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009CC58 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009CC5C 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009CC60 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009CC64 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009CC68 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009CC6C 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009CC70                            ptr_sndend
0009CC70                            ; ---------------------------------------------------------------------------
0009CC70                            ; Special sound effect pointers
0009CC70                            ; ---------------------------------------------------------------------------
0009CC70                            SpecSoundIndex:
0009CC70 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009CC74 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009CC78 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009CC7C 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009CC80 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009CC84 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009CC88                            ptr_specend
0009CC88                            SoundA0:	include	"sound/sfx/Jump.asm"
0009CC88                            SndA0_Jump_Header:
0009CC88                            	smpsHeaderStartSong 1
0009CC8A 01                         	smpsHeaderTempoSFX  $01
0009CC8B 01                         	smpsHeaderChanSFX   $01
0009CC8C                            
0009CC92                            
0009CC92                            ; PSG2 Data
0009CC92                            SndA0_Jump_PSG2:
0009CC92 F500                       	smpsPSGvoice        $00
0009CC94 9E05                       	dc.b	nF2, $05
0009CC9B A315                       	dc.b	nBb2, $15
0009CC9D F2                         	smpsStop
0009CC9E                            
0009CC9E                            ; Song seems to not use any FM voices
0009CC9E                            SndA0_Jump_Voices:
0009CC9E                            SndA0_Jump_Voices:
0009CC9E                            		even
0009CC9E                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009CCC8                            		even
0009CCC8                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009CCC8                            SndDF_Header:
0009CCC8                            	smpsHeaderStartSong 3
0009CCCA 01                         	smpsHeaderTempoSFX  $01
0009CCCB 01                         	smpsHeaderChanSFX   $01
0009CCCC                            
0009CCD2                            
0009CCD2                            ; FM5 Data
0009CCD2                            SndDF_FM5:
0009CCD2 EF00                       	smpsSetvoice        $00
0009CCD4                            
0009CCD4                            SndDF_Loop00:
0009CCD4 F800 00                    	smpsCall            SndDF_Call00
0009CCD7 E905                       	smpsAlterPitch $05
0009CCD9 E608                       	smpsFMAlterVol      $08
0009CCDB F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009CCE0 E9EC                       	smpsAlterPitch $EC
0009CCE2 E6E0                       	smpsFMAlterVol      $E0
0009CCE4 F2                         	smpsStop
0009CCE5                            
0009CCE5                            SndDF_Call00:
0009CCE5 9902                       	dc.b	nC2, $02
0009CCE7 E901                       	smpsAlterPitch $01
0009CCE9 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009CCEE E9F6                       	smpsAlterPitch $F6
0009CCF0 E3                         	smpsReturn
0009CCF1                            
0009CCF1                            SndDF_Voices:
0009CCF1                            ;	Voice $00
0009CCF1                            ;	$07
0009CCF1                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009CCF1                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009CCF1                            	smpsVcAlgorithm     $07
0009CCF1                            	smpsVcFeedback      $00
0009CCF1                            	smpsVcUnusedBits    $00
0009CCF1                            	smpsVcDetune        $00, $00, $00, $00
0009CCF1                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009CCF1                            	smpsVcRateScale     $00, $00, $00, $00
0009CCF1                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009CCF1                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCF1                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CCF1                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CCF1                            	smpsVcDecayLevel    $01, $01, $01, $01
0009CCF1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD0A                            		even
0009CD0A                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009CD3C                            		even
0009CD3C                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009CD80 00                         		even
0009CD80                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009CD80                            SndD2_Header:
0009CD80                            	smpsHeaderStartSong 3
0009CD82 01                         	smpsHeaderTempoSFX  $01
0009CD83 01                         	smpsHeaderChanSFX   $01
0009CD84                            
0009CD8A                            
0009CD8A                            ; FM4 Data
0009CD8A                            SndD2_FM4:
0009CD8A EF00                       	smpsSetvoice        $00
0009CD91 C645                       	dc.b	nA5, $45
0009CD93 F2                         	smpsStop
0009CD94                            
0009CD94                            SndD2_Voices:
0009CD94                            ;	Voice $00
0009CD94                            ;	$04
0009CD94                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CD94                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009CD94                            	smpsVcAlgorithm     $04
0009CD94                            	smpsVcFeedback      $00
0009CD94                            	smpsVcUnusedBits    $00
0009CD94                            	smpsVcDetune        $04, $00, $00, $02
0009CD94                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009CD94                            	smpsVcRateScale     $00, $00, $00, $00
0009CD94                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CD94                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD94                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CD94                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CD94                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CD94                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CDAE 00                         		even
0009CDAE                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009CDDE                            		even
0009CDDE                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009CE0E                            		even
0009CE0E                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009CE42                            		even
0009CE42                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009CE54                            		even
0009CE54                            SoundAA:	include	"sound/sfx/Splash.asm"
0009CE54                            SndA2_Header:
0009CE54                            	smpsHeaderStartSong 3
0009CE56 01                         	smpsHeaderTempoSFX  $01
0009CE57 02                         	smpsHeaderChanSFX   $02
0009CE58                            
0009CE64                            
0009CE64                            ; FM3 Data
0009CE64                            SndA2_FM3:
0009CE64 EF00                       	smpsSetvoice        $00
0009CE6B 8106                       	dc.b	nC0, $06
0009CE6D                            
0009CE6D                            SndA2_Loop00:
0009CE6D 810E                       	dc.b	nC0, $0E
0009CE6F E60E                       	smpsAlterVol      $0E
0009CE71 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009CE76 F2                         	smpsStop
0009CE77                            
0009CE77                            ; FM4 Data
0009CE77                            SndA2_FM4:
0009CE77 EF01                       	smpsSetvoice        $01
0009CE79 A606 14                    	dc.b	nCs3, $06, $14
0009CE7C F2                         	smpsStop
0009CE7D                            
0009CE7D                            SndA2_Voices:
0009CE7D                            ;	Voice $00
0009CE7D                            ;	$F9
0009CE7D                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009CE7D                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009CE7D                            	smpsVcAlgorithm     $01
0009CE7D                            	smpsVcFeedback      $07
0009CE7D                            	smpsVcUnusedBits    $03
0009CE7D                            	smpsVcDetune        $03, $01, $03, $02
0009CE7D                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009CE7D                            	smpsVcRateScale     $00, $00, $00, $00
0009CE7D                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009CE7D                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE7D                            	smpsVcDecayRate1    $02, $09, $18, $05
0009CE7D                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009CE7D                            	smpsVcDecayLevel    $02, $04, $02, $01
0009CE7D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE96                            
0009CE96                            ;	Voice $01
0009CE96                            ;	$00
0009CE96                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009CE96                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009CE96                            	smpsVcAlgorithm     $00
0009CE96                            	smpsVcFeedback      $00
0009CE96                            	smpsVcUnusedBits    $00
0009CE96                            	smpsVcDetune        $00, $00, $00, $00
0009CE96                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009CE96                            	smpsVcRateScale     $00, $00, $03, $03
0009CE96                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009CE96                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE96                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009CE96                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009CE96                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CE96                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CEB0 00                         		even
0009CEB0                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009CEB0                            Sound_3E_Header:
0009CEB0                            	smpsHeaderStartSong 3
0009CEB2 01                         	smpsHeaderTempoSFX  $01
0009CEB3 01                         	smpsHeaderChanSFX   $01
0009CEB4                            
0009CEBA                            
0009CEBA                            ; FM5 Data
0009CEBA                            Sound_3E_3F_40_41_FM5:
0009CEBA EF00                       	smpsSetvoice        $00
0009CEBC A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CEC1 F2                         	smpsStop
0009CEC2                            
0009CEC2                            Sound_3E_Voices:
0009CEC2                            ;	Voice $00
0009CEC2                            ;	$0C
0009CEC2                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009CEC2                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009CEC2                            	smpsVcAlgorithm     $04
0009CEC2                            	smpsVcFeedback      $01
0009CEC2                            	smpsVcUnusedBits    $00
0009CEC2                            	smpsVcDetune        $03, $03, $02, $00
0009CEC2                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009CEC2                            	smpsVcRateScale     $00, $00, $00, $00
0009CEC2                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009CEC2                            	smpsVcAmpMod        $00, $00, $00, $00
0009CEC2                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009CEC2                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009CEC2                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009CEC2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CEDB                            
0009CEDB                            
0009CEDC 00                         		even
0009CEDC                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009CF10                            		even
0009CF10                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009CF46                            		even
0009CF46                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009CF46                            Sound_70_Header:
0009CF46                            	smpsHeaderStartSong 3
0009CF48 01                         	smpsHeaderTempoSFX  $01
0009CF49 02                         	smpsHeaderChanSFX   $02
0009CF4A                            
0009CF56                            
0009CF56                            ; FM5 Data
0009CF56                            Sound_70_FM5:
0009CF56 EF00                       	smpsSetvoice        $00
0009CF58 8001                       	dc.b	nRst, $01
0009CF5F 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009CF63 F2                         	smpsStop
0009CF64                            
0009CF64                            ; PSG3 Data
0009CF64                            Sound_70_PSG3:
0009CF64 F500                       	smpsPSGvoice        sTone_0D
0009CF66 800B                       	dc.b	nRst, $0B
0009CF68 F3E7                       	smpsPSGform         $E7
0009CF6A C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009CF6D                            
0009CF6D                            Sound_70_Loop00:
0009CF6D 02                         	dc.b	$02
0009CF6E EC01                       	smpsPSGAlterVol     $01
0009CF70 E7                         	dc.b	smpsNoAttack
0009CF71 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009CF76 F2                         	smpsStop
0009CF77                            
0009CF77                            Sound_70_Voices:
0009CF77                            ;	Voice $00
0009CF77                            ;	$FA
0009CF77                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009CF77                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009CF77                            	smpsVcAlgorithm     $02
0009CF77                            	smpsVcFeedback      $07
0009CF77                            	smpsVcUnusedBits    $03
0009CF77                            	smpsVcDetune        $00, $00, $00, $00
0009CF77                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009CF77                            	smpsVcRateScale     $00, $00, $00, $00
0009CF77                            	smpsVcAttackRate    $13, $0F, $11, $12
0009CF77                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF77                            	smpsVcDecayRate1    $02, $09, $18, $05
0009CF77                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009CF77                            	smpsVcDecayLevel    $02, $04, $02, $01
0009CF77                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF90                            
0009CF90                            
0009CF90                            		even
0009CF90                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009CFBE                            		even
0009CFBE                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009CFF0                            		even
0009CFF0                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009D01C                            		even
0009D01C                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009D06C                            		even
0009D06C                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009D0B6                            		even
0009D0B6                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009D112                            		even
0009D112                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009D140                            		even
0009D140                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009D140                            SpikesSFX_Header:
0009D140                            	smpsHeaderStartSong 3
0009D142 01                         	smpsHeaderTempoSFX  $01
0009D143 02                         	smpsHeaderChanSFX   $02
0009D144                            
0009D150                            
0009D150                            ; FM6 Data
0009D150                            SndB7_FM3:
0009D150 EF01                       	smpsSetvoice        $01
0009D157 B105                       	dc.b	nC4, $05
0009D159 F1                         	smpsModOn
0009D15A E10A                       	smpsAlterNote       $0A
0009D15C E601                       	smpsAlterVol        $01
0009D15E F2                         	smpsStop
0009D15F                            
0009D15F                            ; FM5 Data
0009D15F                            SndB7_FM5:
0009D15F 8005                       	dc.b	nRst, $05			 
0009D161 EF00                       	smpsSetvoice        $00
0009D163 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009D169 F2                         	smpsStop
0009D16A                            
0009D16A                            SndB7_Voices:
0009D16A                            ;	Voice $00
0009D16A                            ;	$34
0009D16A                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009D16A                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009D16A                            	smpsVcAlgorithm     $04
0009D16A                            	smpsVcFeedback      $06
0009D16A                            	smpsVcUnusedBits    $00
0009D16A                            	smpsVcDetune        $0D, $00, $00, $00
0009D16A                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009D16A                            	smpsVcRateScale     $00, $00, $00, $00
0009D16A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D16A                            	smpsVcAmpMod        $00, $00, $00, $00
0009D16A                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009D16A                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009D16A                            	smpsVcDecayLevel    $03, $05, $01, $03
0009D16A                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009D183                            
0009D183                            ;	Voice $01
0009D183                            ;	$FA
0009D183                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009D183                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009D183                            	smpsVcAlgorithm     $02
0009D183                            	smpsVcFeedback      $07
0009D183                            	smpsVcUnusedBits    $03
0009D183                            	smpsVcDetune        $03, $01, $03, $02
0009D183                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009D183                            	smpsVcRateScale     $00, $00, $00, $00
0009D183                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D183                            	smpsVcAmpMod        $00, $00, $00, $00
0009D183                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D183                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D183                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D183                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D19C                            		even
0009D19C                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009D1D8                            		even
0009D1D8                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009D1D8                            SndBD_Header:
0009D1D8                            	smpsHeaderStartSong 3
0009D1DA 01                         	smpsHeaderTempoSFX  $01
0009D1DB 01                         	smpsHeaderChanSFX   $01
0009D1DC                            
0009D1E2                            
0009D1E2                            ; FM6 Data
0009D1E2                            SndBD_FM3:
0009D1E2 EF00                       	smpsSetvoice        $00
0009D1E4                            
0009D1E4                            SndBD_Loop00:
0009D1E4 C009                       	dc.b	nEb5, $09
0009D1E6 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009D1EB F2                         	smpsStop
0009D1EC                            
0009D1EC                            SndBD_Voices:
0009D1EC                            ;	Voice $00
0009D1EC                            ;	$02
0009D1EC                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009D1EC                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009D1EC                            	smpsVcAlgorithm     $02
0009D1EC                            	smpsVcFeedback      $00
0009D1EC                            	smpsVcUnusedBits    $00
0009D1EC                            	smpsVcDetune        $00, $02, $05, $00
0009D1EC                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009D1EC                            	smpsVcRateScale     $00, $00, $00, $00
0009D1EC                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009D1EC                            	smpsVcAmpMod        $00, $00, $00, $00
0009D1EC                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009D1EC                            	smpsVcDecayRate2    $00, $00, $00, $01
0009D1EC                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D1EC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D206 00                         		even
0009D206                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009D206                            Sound_59_Header:
0009D206                            	smpsHeaderStartSong 3
0009D208 01                         	smpsHeaderTempoSFX  $01
0009D209 04                         	smpsHeaderChanSFX   $04
0009D20A                            
0009D222                            
0009D222                            ; FM3 Data
0009D222                            Sound_59_FM3:
0009D222 E040                       	smpsPan             panRight, $00
0009D224 8002                       	dc.b	nRst, $02
0009D226 F600 00                    	smpsJump            Sound_59_FM4
0009D229                            
0009D229                            ; FM5 Data
0009D229                            Sound_59_FM5:
0009D229 E080                       	smpsPan             panLeft, $00
0009D22B 8001                       	dc.b	nRst, $01
0009D22D                            
0009D22D                            ; FM4 Data
0009D22D                            Sound_59_FM4:
0009D22D EF00                       	smpsSetvoice        $00
0009D234 8110                       	dc.b	nC0, $10
0009D236 F2                         	smpsStop
0009D237                            
0009D237                            ; PSG3 Data
0009D237                            Sound_59_PSG3:
0009D23C F3E7                       	smpsPSGform         $E7
0009D23E                            
0009D23E                            Sound_59_Loop00:
0009D23E B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009D241 EC03                       	smpsPSGAlterVol     $03
0009D243 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009D248 F2                         	smpsStop
0009D249                            
0009D249                            Sound_59_Voices:
0009D249                            ;	Voice $00
0009D249                            ;	$F9
0009D249                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009D249                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009D249                            	smpsVcAlgorithm     $01
0009D249                            	smpsVcFeedback      $07
0009D249                            	smpsVcUnusedBits    $03
0009D249                            	smpsVcDetune        $03, $01, $03, $02
0009D249                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009D249                            	smpsVcRateScale     $00, $00, $00, $00
0009D249                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D249                            	smpsVcAmpMod        $00, $00, $00, $00
0009D249                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D249                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D249                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D249                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D262                            
0009D262                            
0009D262                            		even
0009D262                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009D28A                            		even
0009D28A                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009D2B6                            		even
0009D2B6                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009D2B6                            Sound_B6_Header:
0009D2B6                            	smpsHeaderStartSong 3
0009D2B8 01                         	smpsHeaderTempoSFX  $01
0009D2B9 02                         	smpsHeaderChanSFX   $02
0009D2BA                            
0009D2C6                            
0009D2C6                            ; FM5 Data
0009D2C6                            Sound_B6_FM5:
0009D2C6 EF00                       	smpsSetvoice        $00
0009D2CD CD0F                       	dc.b	nE6, $0F
0009D2CF F2                         	smpsStop
0009D2D0                            
0009D2D0                            ; PSG3 Data
0009D2D0                            Sound_B6_PSG3:
0009D2D0 F507                       	smpsPSGvoice        sTone_1D
0009D2D2 8006                       	dc.b	nRst, $06
0009D2D9 F3E7                       	smpsPSGform         $E7
0009D2DB CD4F                       	dc.b	nE6, $4F
0009D2DD F2                         	smpsStop
0009D2DE                            
0009D2DE                            Sound_B6_Voices:
0009D2DE                            ;	Voice $00
0009D2DE                            ;	$3D
0009D2DE                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009D2DE                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009D2DE                            	smpsVcAlgorithm     $05
0009D2DE                            	smpsVcFeedback      $07
0009D2DE                            	smpsVcUnusedBits    $00
0009D2DE                            	smpsVcDetune        $00, $00, $00, $00
0009D2DE                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009D2DE                            	smpsVcRateScale     $00, $00, $00, $00
0009D2DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D2DE                            	smpsVcAmpMod        $00, $00, $00, $00
0009D2DE                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009D2DE                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D2DE                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D2DE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D2F7                            
0009D2F7                            
0009D2F8 00                         		even
0009D2F8                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009D34C                            		even
0009D34C                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009D386                            		even
0009D386                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009D3F8                            		even
0009D3F8                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009D426                            		even
0009D426                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009D460                            		even
0009D460                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009D460                            SndC1_Header:
0009D460                            	smpsHeaderStartSong 3
0009D462 01                         	smpsHeaderTempoSFX  $01
0009D463 01                         	smpsHeaderChanSFX   $01
0009D464                            
0009D46A                            
0009D46A                            ; FM4 Data
0009D46A                            SndC1_FM4:
0009D46A EF00                       	smpsSetvoice        $00
0009D46C D506 40                    	dc.b	nC7, $06, $40
0009D46F F2                         	smpsStop
0009D470                            
0009D470                            SndC1_Voices:
0009D470                            ;	Voice $00
0009D470                            ;	$38
0009D470                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009D470                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009D470                            	smpsVcAlgorithm     $00
0009D470                            	smpsVcFeedback      $07
0009D470                            	smpsVcUnusedBits    $00
0009D470                            	smpsVcDetune        $00, $00, $00, $00
0009D470                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009D470                            	smpsVcRateScale     $00, $00, $00, $00
0009D470                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D470                            	smpsVcAmpMod        $00, $00, $00, $00
0009D470                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009D470                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D470                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D470                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D48A 00                         		even
0009D48A                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009D504                            		even
0009D504                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009D52C                            		even
0009D52C                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009D52C                            Sound_B0_Header:
0009D52C                            	smpsHeaderStartSong 3
0009D52E 01                         	smpsHeaderTempoSFX  $01
0009D52F 03                         	smpsHeaderChanSFX   $03
0009D530                            
0009D542                            
0009D542                            ; FM5 Data
0009D542                            Sound_B0_FM5:
0009D542 EF00                       	smpsSetvoice        $00
0009D544 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009D54A F2                         	smpsStop
0009D54B                            
0009D54B                            ; FM4 Data
0009D54B                            Sound_B0_FM4:
0009D54B EF01                       	smpsSetvoice        $01
0009D54D 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009D551 F2                         	smpsStop
0009D552                            
0009D552                            ; FM3 Data
0009D552                            Sound_B0_FM3:
0009D552 EF02                       	smpsSetvoice        $02
0009D554 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009D55B F2                         	smpsStop
0009D55C                            
0009D55C                            Sound_B0_Voices:
0009D55C                            ;	Voice $00
0009D55C                            ;	$3B
0009D55C                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009D55C                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009D55C                            	smpsVcAlgorithm     $03
0009D55C                            	smpsVcFeedback      $07
0009D55C                            	smpsVcUnusedBits    $00
0009D55C                            	smpsVcDetune        $00, $00, $00, $00
0009D55C                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009D55C                            	smpsVcRateScale     $02, $00, $00, $00
0009D55C                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009D55C                            	smpsVcAmpMod        $00, $00, $00, $00
0009D55C                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009D55C                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D55C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D55C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D575                            
0009D575                            ;	Voice $01
0009D575                            ;	$04
0009D575                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009D575                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009D575                            	smpsVcAlgorithm     $04
0009D575                            	smpsVcFeedback      $00
0009D575                            	smpsVcUnusedBits    $00
0009D575                            	smpsVcDetune        $04, $07, $07, $03
0009D575                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009D575                            	smpsVcRateScale     $00, $00, $00, $00
0009D575                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D575                            	smpsVcAmpMod        $00, $00, $00, $00
0009D575                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009D575                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009D575                            	smpsVcDecayLevel    $00, $01, $00, $01
0009D575                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D58E                            
0009D58E                            ;	Voice $02
0009D58E                            ;	$3C
0009D58E                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009D58E                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009D58E                            	smpsVcAlgorithm     $04
0009D58E                            	smpsVcFeedback      $07
0009D58E                            	smpsVcUnusedBits    $00
0009D58E                            	smpsVcDetune        $00, $00, $00, $00
0009D58E                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009D58E                            	smpsVcRateScale     $00, $00, $00, $00
0009D58E                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009D58E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D58E                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009D58E                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009D58E                            	smpsVcDecayLevel    $02, $09, $09, $01
0009D58E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D5A7                            
0009D5A7                            
0009D5A8 00                         		even
0009D5A8                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009D5EA                            		even
0009D5EA                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009D618                            		even
0009D618                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009D62A                            		even
0009D62A                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009D658                            		even
0009D658                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009D686                            		even
0009D686                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009D6D2                            		even
0009D6D2                            SoundCC:	include	"sound/sfx/Spring.asm"
0009D6D2                            Spring_Header:
0009D6D2                            	smpsHeaderStartSong 1
0009D6D4 01                         	smpsHeaderTempoSFX  $01
0009D6D5 01                         	smpsHeaderChanSFX   $01
0009D6D6                            
0009D6DC                            
0009D6DC                            ; FM6 Data
0009D6DC                            Spring_FM6:
0009D6DC EF00                       	smpsSetvoice        $00
0009D6DE 8001                       	dc.b	nRst, $01
0009D6E5 B006                       	dc.b	nB3, $06
0009D6E7 F4                         	smpsModOff
0009D6E8 EF01                       	smpsSetvoice        $01
0009D6EA                            
0009D6EA                            Spring_Loop00:
0009D6EA BD02                       	dc.b	nC5, $02
0009D6EC E601                       	smpsAlterVol      $01
0009D6EE E7                         	dc.b	smpsNoAttack
0009D6EF F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009D6F4 F2                         	smpsStop
0009D6F5                            
0009D6F5                            Spring_Voices:
0009D6F5                            ;	Voice $00
0009D6F5                            ;	$20
0009D6F5                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009D6F5                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009D6F5                            	smpsVcAlgorithm     $00
0009D6F5                            	smpsVcFeedback      $04
0009D6F5                            	smpsVcUnusedBits    $00
0009D6F5                            	smpsVcDetune        $03, $03, $03, $03
0009D6F5                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009D6F5                            	smpsVcRateScale     $02, $02, $03, $03
0009D6F5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D6F5                            	smpsVcAmpMod        $00, $00, $00, $00
0009D6F5                            	smpsVcDecayRate1    $06, $09, $06, $07
0009D6F5                            	smpsVcDecayRate2    $08, $06, $06, $07
0009D6F5                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009D6F5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D70E                            
0009D70E                            ;	Voice $01
0009D70E                            ;	$20
0009D70E                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009D70E                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009D70E                            	smpsVcAlgorithm     $00
0009D70E                            	smpsVcFeedback      $04
0009D70E                            	smpsVcUnusedBits    $00
0009D70E                            	smpsVcDetune        $03, $03, $03, $03
0009D70E                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009D70E                            	smpsVcRateScale     $02, $02, $02, $02
0009D70E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D70E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D70E                            	smpsVcDecayRate1    $06, $09, $06, $07
0009D70E                            	smpsVcDecayRate2    $08, $06, $06, $07
0009D70E                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009D70E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D728 00                         		even
0009D728                            SoundCD:	include	"sound/sfx/Beep.asm"
0009D728                            Snd99_Header:
0009D728                            	smpsHeaderStartSong 3
0009D72A 01                         	smpsHeaderTempoSFX  $01
0009D72B 01                         	smpsHeaderChanSFX   $01
0009D72C                            
0009D732                            
0009D732                            ; FM4 Data
0009D732                            Snd99_FM4:
0009D732 EF00                       	smpsSetvoice        $00
0009D734 B502                       	dc.b	nE4, $02
0009D736 F2                         	smpsStop
0009D737                            
0009D737                            Snd99_Voices:
0009D737                            ;	Voice $00
0009D737                            ;	$07
0009D737                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009D737                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009D737                            	smpsVcAlgorithm     $07
0009D737                            	smpsVcFeedback      $00
0009D737                            	smpsVcUnusedBits    $00
0009D737                            	smpsVcDetune        $00, $00, $00, $00
0009D737                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009D737                            	smpsVcRateScale     $00, $00, $00, $00
0009D737                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D737                            	smpsVcAmpMod        $00, $00, $00, $00
0009D737                            	smpsVcDecayRate1    $00, $00, $00, $00
0009D737                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D737                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D737                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D750                            		even
0009D750                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009D77E                            		even
0009D77E                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009D77E                            SignpostCD_Header:
0009D77E                            	smpsHeaderStartSong 3
0009D780 01                         	smpsHeaderTempoSFX  $01
0009D781 02                         	smpsHeaderChanSFX   $02
0009D782                            
0009D78E                            
0009D78E                            ; FM5 Data
0009D78E                            Snd9D_FM5:
0009D78E 8004                       	dc.b	nRst, $04
0009D790                            
0009D790                            ; FM4 Data
0009D790                            Snd9D_FM4:
0009D790 EF00                       	smpsSetvoice        $00
0009D792                            
0009D792                            Snd9D_Loop00:
0009D792 B405                       	dc.b	nEb4, $05
0009D794 E604                       	smpsFMAlterVol      $04
0009D796 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009D79B F2                         	smpsStop
0009D79C                            
0009D79C                            Snd9D_Voices:
0009D79C                            ;	Voice $00
0009D79C                            ;	$F4
0009D79C                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009D79C                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009D79C                            	smpsVcAlgorithm     $04
0009D79C                            	smpsVcFeedback      $06
0009D79C                            	smpsVcUnusedBits    $03
0009D79C                            	smpsVcDetune        $00, $00, $00, $00
0009D79C                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009D79C                            	smpsVcRateScale     $00, $00, $00, $00
0009D79C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D79C                            	smpsVcAmpMod        $00, $00, $00, $00
0009D79C                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009D79C                            	smpsVcDecayRate2    $08, $05, $00, $00
0009D79C                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009D79C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D7B6 00                         		even
0009D7B6                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009D7F0                            		even
0009D7F0                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009D7F0                            Sound_41_Header:
0009D7F0                            	smpsHeaderStartSong 3
0009D7F2 01                         	smpsHeaderTempoSFX  $01
0009D7F3 01                         	smpsHeaderChanSFX   $01
0009D7F4                            
0009D7FA                            	
0009D7FA                            Sound41_FM5:
0009D7FA EF00                       	smpsSetvoice        $00
0009D7FC A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009D801 F2                         	smpsStop
0009D802                            
0009D802                            Sound_41_Voices:
0009D802                            ;	Voice $00
0009D802                            ;	$36
0009D802                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009D802                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009D802                            	smpsVcAlgorithm     $06
0009D802                            	smpsVcFeedback      $06
0009D802                            	smpsVcUnusedBits    $00
0009D802                            	smpsVcDetune        $00, $00, $01, $00
0009D802                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009D802                            	smpsVcRateScale     $00, $00, $00, $00
0009D802                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D802                            	smpsVcAmpMod        $00, $00, $00, $00
0009D802                            	smpsVcDecayRate1    $00, $00, $00, $00
0009D802                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009D802                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D802                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D81B                            
0009D81B                            
0009D81C 00                         		even
0009D81C                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009D81C                            Snd9B_Header:
0009D81C                            	smpsHeaderStartSong 3
0009D81E 01                         	smpsHeaderTempoSFX  $01
0009D81F 01                         	smpsHeaderChanSFX   $01
0009D820                            
0009D826                            
0009D826                            ; FM5 Data
0009D826                            Snd9B_FM5:
0009D826 EF00                       	smpsSetvoice        $00
0009D828 8001                       	dc.b	nRst, $01
0009D82F CA25                       	dc.b	nCs6, $25
0009D831 F4                         	smpsModOff
0009D832                            
0009D832                            Snd9B_Loop00:
0009D832 E7                         	dc.b	smpsNoAttack
0009D833 E601                       	smpsFMAlterVol      $01
0009D835 D102                       	dc.b	nAb6, $02
0009D837 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009D83C F2                         	smpsStop
0009D83D                            
0009D83D                            Snd9B_Voices:
0009D83D                            ;	Voice $00
0009D83D                            ;	$3C
0009D83D                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009D83D                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009D83D                            	smpsVcAlgorithm     $04
0009D83D                            	smpsVcFeedback      $07
0009D83D                            	smpsVcUnusedBits    $00
0009D83D                            	smpsVcDetune        $00, $00, $04, $00
0009D83D                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009D83D                            	smpsVcRateScale     $00, $00, $00, $00
0009D83D                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009D83D                            	smpsVcAmpMod        $00, $00, $00, $00
0009D83D                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009D83D                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D83D                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D83D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D856                            
0009D856                            
0009D856                            		even		
0009D856                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009D8EE                            		even
0009D8EE                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009D8FA                            		even				
0009D8FA                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009D936                            		even			
0009D936                            		; Don't let Sega sample cross $8000-byte boundary
0009D936                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 0FCC                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 1EFE                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 0EFC                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 107A                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 107A                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1604                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1604                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1604                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 21A8                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 0FCC                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 377C                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 1E58                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 377C                  		jsr	WaitForVBla				
000A6ACA 46FC 2700                  		move	#$2700,sr
000A6ACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6AD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADA 46FC 2300                  		move	#$2300,sr
000A6ADE 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE4 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AEE                            
000A6AEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF0 60CE                       		bra.s	OptionScreen_Main
000A6AF2                            ; ===========================================================================
000A6AF2                            ; loc_909A:
000A6AF2                            OptionScreen_Select:
000A6AF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AF6 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AF8 7000                       		moveq	#0,d0
000A6AFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B00 4E75                       		rts
000A6B02                            ; ===========================================================================
000A6B02                            ; loc_90B6:
000A6B02                            OptionScreen_Select_Not1P:
000A6B02 5300                       		subq.b	#1,d0
000A6B04 6600                       		bne.s	OptionScreen_Select_Other
000A6B06 60B8                       		bra.s	OptionScreen_Main
000A6B08                            ; ===========================================================================
000A6B08                            ; loc_90D8:
000A6B08                            OptionScreen_Select_Other:
000A6B08 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B0E 4E75                       		rts
000A6B10                            
000A6B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B10                            
000A6B10                            ;sub_90E0:
000A6B10                            OptionScreen_Controls:
000A6B10 7400                       		moveq	#0,d2
000A6B12 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B16 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1A 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B1E 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B20 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B22 6400                       		bcc.s	Option_Controls_Down
000A6B24 143C 0002                  		move.b	#2,d2
000A6B28                            
000A6B28                            Option_Controls_Down:
000A6B28 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B2C 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B2E 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B30 0C02 0003                  		cmpi.b	#3,d2
000A6B34 6500                       		blo.s	Option_Controls_Refresh
000A6B36 7400                       		moveq	#0,d2
000A6B38                            
000A6B38                            Option_Controls_Refresh:
000A6B38 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B3C E54A                       		lsl.w	#2,d2
000A6B3E 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B42 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B46 3411                       		move.w	(a1),d2
000A6B48 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B4C 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B4E 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B50 6400                       		bcc.s	Option_Controls_Right
000A6B52 1403                       		move.b	d3,d2
000A6B54                            
000A6B54                            Option_Controls_Right:
000A6B54 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B58 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5A 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B5C B403                       		cmp.b	d3,d2
000A6B5E 6300                       		bls.s	Option_Controls_Button_A
000A6B60 7400                       		moveq	#0,d2
000A6B62                            
000A6B62                            Option_Controls_Button_A:
000A6B62 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B66 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B68 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B6C B403                       		cmp.b	d3,d2
000A6B6E 6300                       		bls.s	Option_Controls_Refresh2
000A6B70 7400                       		moveq	#0,d2
000A6B72                            
000A6B72                            Option_Controls_Refresh2:
000A6B72 3282                       		move.w	d2,(a1)
000A6B74                            
000A6B74                            Option_Controls_NoMove:
000A6B74 4E75                       		rts
000A6B76                            ; End of function OptionScreen_Controls
000A6B76                            
000A6B76                            ; ===========================================================================
000A6B76                            ; word_917A:
000A6B76                            OptionScreen_Choices:
000A6B76 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7A 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B7E 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B82                            		even
000A6B82                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B82                            
000A6B82                            
000A6B82                            OptionScreen_DrawSelected:
000A6B82 6100 0000                  		bsr.w	loc_9268
000A6B86 7200                       		moveq	#0,d1
000A6B88 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B8C E749                       		lsl.w	#3,d1
000A6B8E 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B94 47F3 1000                  		lea	(a3,d1.w),a3
000A6B98 303C 6000                  		move.w	#$6000,d0
000A6B9C 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA2 225B                       		movea.l	(a3)+,a1
000A6BA4 6100 FE80                  		bsr.w	MenuScreenTextToRAM
000A6BA8 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BAE 7200                       		moveq	#0,d1
000A6BB0 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BB6 6700                       		beq.s	loc_9186
000A6BB8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BBC E549                       		lsl.w	#2,d1
000A6BBE 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC2 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BC6 3211                       		move.w	(a1),d1
000A6BC8 E549                       		lsl.w	#2,d1
000A6BCA                            
000A6BCA                            loc_9186:		
000A6BCA 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BCE 6100 FE56                  		bsr.w	MenuScreenTextToRAM
000A6BD2                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD2                            		;bne.s	loc2_9186
000A6BD2                            		;lea	($FFFF00C2).l,a2
000A6BD2                            		;bsr.w	loc_9296
000A6BD2                            
000A6BD2                            loc2_9186:		
000A6BD2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BD8 201B                       		move.l	(a3)+,d0
000A6BDA 7215                       		moveq	#$15,d1
000A6BDC 7407                       		moveq	#7,d2
000A6BDE 4EF8 1050                  		jmp	TilemapToVRAM
000A6BE2                            ; ===========================================================================
000A6BE2                            
000A6BE2                            OptionScreen_DrawUnselected:
000A6BE2 6100 0000                  		bsr.w	loc_9268
000A6BE6 7200                       		moveq	#0,d1
000A6BE8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BEC E749                       		lsl.w	#3,d1
000A6BEE 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF4 47F3 1000                  		lea	(a3,d1.w),a3
000A6BF8 7000                       		moveq	#0,d0
000A6BFA 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C00 225B                       		movea.l	(a3)+,a1
000A6C02 6100 FE22                  		bsr.w	MenuScreenTextToRAM
000A6C06 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C0C 7200                       		moveq	#0,d1
000A6C0E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C14 6700                       		beq.s	loc2_91F8
000A6C16 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1A E549                       		lsl.w	#2,d1
000A6C1C 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C20 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C24 3211                       		move.w	(a1),d1
000A6C26 E549                       		lsl.w	#2,d1
000A6C28                            
000A6C28                            loc2_91F8		
000A6C28 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C2C 6100 FDF8                  		bsr.w	MenuScreenTextToRAM
000A6C30                            		;cmpi.b	#2,(Options_menu_box).w
000A6C30                            		;bne.s	loc3_91F8
000A6C30                            		;lea	($FFFF0222).l,a2
000A6C30                            		;bsr.w	loc_9296
000A6C30                            
000A6C30                            loc3_91F8		
000A6C30 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C36 201B                       		move.l	(a3)+,d0
000A6C38 7215                       		moveq	#$15,d1
000A6C3A 7407                       		moveq	#7,d2
000A6C3C 4EF8 1050                  		jmp	TilemapToVRAM
000A6C40                            ; ===========================================================================
000A6C40                            
000A6C40                            loc_9268:
000A6C40 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C46 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4A 6A00                       		bpl.s	loc2_9268
000A6C4C 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C52                            
000A6C52                            loc2_9268:
000A6C52 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C56 6700                       		beq.s	loc3_9268
000A6C58 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C5E                            
000A6C5E                            loc3_9268:
000A6C5E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C64 6600                       		bne.s	loc4_9268		; rts
000A6C66 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C6C                            
000A6C6C                            loc4_9268:
000A6C6C 4E75                       		rts
000A6C6E                            ; ===========================================================================
000A6C6E                            
000A6C6E                            loc_9296:
000A6C6E 4E75                       		rts
000A6C70                            
000A6C70                            Dynamic_Menu:
000A6C70 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C74                            
000A6C74                            loc_3FF30:
000A6C74 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C76                            
000A6C76                            loc_3FF32:
000A6C76 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C78 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7A 7000                       	moveq	#0,d0
000A6C7C 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C80 B02A 0006                  	cmp.b	6(a2),d0
000A6C84 6500                       	blo.s	loc_3FF48
000A6C86 7000                       	moveq	#0,d0
000A6C88 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C8C                            
000A6C8C                            loc_3FF48:
000A6C8C 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C90 1692                       	move.b	(a2),(a3)	; set timer
000A6C92 6A00                       	bpl.s	loc_3FF56
000A6C94 D040                       	add.w	d0,d0
000A6C96 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9A                            
000A6C9A                            loc_3FF56:
000A6C9A 1032 0008                  	move.b	8(a2,d0.w),d0
000A6C9E EB48                       	lsl.w	#5,d0
000A6CA0 342A 0004                  	move.w	4(a2),d2
000A6CA4 2212                       	move.l	(a2),d1
000A6CA6 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CAC D280                       	add.l	d0,d1
000A6CAE 7600                       	moveq	#0,d3
000A6CB0 162A 0007                  	move.b	7(a2),d3
000A6CB4 E94B                       	lsl.w	#4,d3
000A6CB6 4EB9 0000 11A2             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CBC                            
000A6CBC                            loc_3FF78:
000A6CBC 102A 0006                  	move.b	6(a2),d0
000A6CC0 4A12                       	tst.b	(a2)
000A6CC2 6A00                       	bpl.s	loc_3FF82
000A6CC4 D000                       	add.b	d0,d0
000A6CC6                            
000A6CC6                            loc_3FF82:
000A6CC6 5200                       	addq.b	#1,d0
000A6CC8 0240 00FE                  	andi.w	#$FE,d0
000A6CCC 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD0 544B                       	addq.w	#2,a3
000A6CD2 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CD6 4E75                       	rts
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ; MENU ANIMATION SCRIPT
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ;word_87C6:
000A6CD8                            Anim_SonicMilesBG:
000A6CD8 0000                       	dc.w   0
000A6CDA                            ; Sonic/Miles animated background
000A6CDA 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CDE 0020                       	dc.w $20
000A6CE0 06                         	dc.b 6
000A6CE1 0A                         	dc.b $A
000A6CE2 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE4 0A05                       	dc.b  $A,  5	; 2
000A6CE6 1405                       	dc.b $14,  5	; 4
000A6CE8 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEA 1405                       	dc.b $14,  5	; 8
000A6CEC 0A05                       	dc.b  $A,  5	; 10	
000A6CEE                            ; ===========================================================================
000A6CEE                            ; off_92BA:
000A6CEE                            OptScrBoxData:
000A6CEE                            
000A6CEE 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF2 4192                       		dc.w $4192
000A6CF4 0003                       		dc.w 3
000A6CF6 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFA 4592                       		dc.w $4592
000A6CFC 0003                       		dc.w 3
000A6CFE 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D02 4992                       		dc.w $4992
000A6D04 0003                       		dc.w 3
000A6D06                            
000A6D06                            off_92D2:
000A6D06 0000 0000                  		dc.l TextOptScr_Default
000A6D0A 0000 0000                  		dc.l TextOptScr_Original
000A6D0E 0000 0000                  		dc.l TextOptScr_Beta
000A6D12 0000 0000                  		dc.l TextOptScr_Midnight
000A6D16 0000 0000                  		dc.l TextOptScr_C2
000A6D1A 0000 0000                  		dc.l TextOptScr_Clackers
000A6D1E 0000 0000                  		dc.l TextOptScr_RHS
000A6D22 0000 0000                  		dc.l TextOptScr_Socket
000A6D26 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2A 0000 0000                  		dc.l TextOptScr_Dark		
000A6D2E                            off_92DE:
000A6D2E 0000 0000                  		dc.l TextOptScr_Default
000A6D32 0000 0000                  		dc.l TextOptScr_Original
000A6D36 0000 0000                  		dc.l TextOptScr_Beta
000A6D3A 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3E 0000 0000                  		dc.l TextOptScr_C2
000A6D42 0000 0000                  		dc.l TextOptScr_Clackers
000A6D46 0000 0000                  		dc.l TextOptScr_RHS
000A6D4A 0000 0000                  		dc.l TextOptScr_Socket
000A6D4E 0000 0000                  		dc.l TextOptScr_Cringe
000A6D52 0000 0000                  		dc.l TextOptScr_Dark	
000A6D56                            off_92EA:
000A6D56 0000 0000                  		dc.l TextOptScr_On
000A6D5A 0000 0000                  		dc.l TextOptScr_Off
000A6D5E                            off_92F2:
000A6D5E 0000 0000                  		dc.l TextOptScr_Null
000A6D62 0000 0000                  		dc.l TextOptScr_Null2
000A6D66                            ; ===========================================================================
000A6D66                            
000A6E85                            ; ============================================================================
000A6E85                            
000A6E85                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A7386 00                         		even
000A7386                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7532                            		even
000A7532                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7A9C                            		even
000A7A9C                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B1C                            		even
000A7B1C                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B48                            		even
000A7B48                            		even
000A7B48                            
000A7B48                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253CC                                        even
001253CC                            
001253CC                            Art_Dust:	incbin	artunc\spindust.bin
00126D0C                            
00126D0C                            ; ===============================================================
00126D0C                            ; ---------------------------------------------------------------
00126D0C                            ; Error handling module
00126D0C                            ; ---------------------------------------------------------------
00126D0C                             
00126D0C 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D10 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1A 01                                 dc.b    1               ; extended stack frame
00126D1C 00                                 even
00126D1C                             
00126D1C 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D20 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D2E 01                                 dc.b    1               ; extended stack frame
00126D30 00                                 even
00126D30                             
00126D30 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D34 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D48 00                                 dc.b    0               ; extended stack frame
00126D4A 00                                 even
00126D4A                             
00126D4A 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D4E 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5A 00                                 dc.b    0               ; extended stack frame
00126D5C 00                                 even
00126D5C                             
00126D5C 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D60 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D70 00                                 dc.b    0               ; extended stack frame
00126D72 00                                 even
00126D72                             
00126D72 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D76 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D88 00                                 dc.b    0               ; extended stack frame
00126D8A 00                                 even
00126D8A                             
00126D8A 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D8E 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA2 00                                 dc.b    0               ; extended stack frame
00126DA4 00                                 even
00126DA4                             
00126DA4 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DA8 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DAE 00                                 dc.b    0               ; extended stack frame
00126DB0 00                                 even
00126DB0                             
00126DB0 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB4 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DC7 00                                 dc.b    0               ; extended stack frame
00126DC8                                    even
00126DC8                             
00126DC8 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DCC 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DDF 00                                 dc.b    0               ; extended stack frame
00126DE0                                    even
00126DE0                             
00126DE0 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE4 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF4 00                                 dc.b    0               ; extended stack frame
00126DF6 00                                 even
00126DF6                             
00126DF6                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DA                            
001275DA                            ; end of 'ROM'
001275DA                            		even
001275DA                            EndOfRom:
001275DA                            
001275DA                            
